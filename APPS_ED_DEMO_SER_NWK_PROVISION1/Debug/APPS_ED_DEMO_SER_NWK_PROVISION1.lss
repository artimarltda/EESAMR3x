
APPS_ED_DEMO_SER_NWK_PROVISION1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00019dac  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00019dac  00019dac  00029dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20000000  00019db4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  000309b8  2**0
                  CONTENTS
  4 .bss          00001434  200009b8  0001a770  000309b8  2**3
                  ALLOC
  5 .stack        00002004  20001dec  0001bba4  000309b8  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  000309b8  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  000309e0  2**0
                  CONTENTS, READONLY
  8 .debug_info   0007597f  00000000  00000000  00030a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000b89a  00000000  00000000  000a63eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00016337  00000000  00000000  000b1c85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001510  00000000  00000000  000c7fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001bc0  00000000  00000000  000c94cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002eccd  00000000  00000000  000cb08c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002d48b  00000000  00000000  000f9d59  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b0c46  00000000  00000000  001271e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004a68  00000000  00000000  001d7e2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f0 3d 00 20 05 2a 00 00 01 2a 00 00 01 2a 00 00     .=. .*...*...*..
	...
      2c:	01 2a 00 00 00 00 00 00 00 00 00 00 01 2a 00 00     .*...........*..
      3c:	01 2a 00 00 01 2a 00 00 01 2a 00 00 a5 0d 00 00     .*...*...*......
      4c:	3d 05 00 00 01 2a 00 00 01 2a 00 00 01 2a 00 00     =....*...*...*..
      5c:	01 2a 00 00 31 12 00 00 41 12 00 00 51 12 00 00     .*..1...A...Q...
      6c:	61 12 00 00 71 12 00 00 81 12 00 00 01 2a 00 00     a...q........*..
      7c:	01 2a 00 00 01 2a 00 00 bd 25 00 00 cd 25 00 00     .*...*...%...%..
      8c:	dd 25 00 00 ed 25 00 00 fd 25 00 00 89 02 00 00     .%...%...%......
      9c:	01 2a 00 00 01 2a 00 00 01 2a 00 00 01 2a 00 00     .*...*...*...*..
      ac:	01 2a 00 00 00 00 00 00                             .*......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200009b8 	.word	0x200009b8
      d4:	00000000 	.word	0x00000000
      d8:	00019db4 	.word	0x00019db4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200009bc 	.word	0x200009bc
     108:	00019db4 	.word	0x00019db4
     10c:	00019db4 	.word	0x00019db4
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	000022ed 	.word	0x000022ed
     140:	00010e0d 	.word	0x00010e0d
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_us+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_us+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_us+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_us+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000004 	.word	0x20000004
     17c:	e000e010 	.word	0xe000e010

00000180 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     180:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     182:	4b08      	ldr	r3, [pc, #32]	; (1a4 <delay_cycles_ms+0x24>)
     184:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     186:	4a08      	ldr	r2, [pc, #32]	; (1a8 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     188:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     18a:	2180      	movs	r1, #128	; 0x80
     18c:	0249      	lsls	r1, r1, #9
	while (n--) {
     18e:	3801      	subs	r0, #1
     190:	d307      	bcc.n	1a2 <delay_cycles_ms+0x22>
	if (n > 0) {
     192:	2c00      	cmp	r4, #0
     194:	d0fb      	beq.n	18e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     196:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     198:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     19a:	6813      	ldr	r3, [r2, #0]
     19c:	420b      	tst	r3, r1
     19e:	d0fc      	beq.n	19a <delay_cycles_ms+0x1a>
     1a0:	e7f5      	b.n	18e <delay_cycles_ms+0xe>
	}
}
     1a2:	bd30      	pop	{r4, r5, pc}
     1a4:	20000000 	.word	0x20000000
     1a8:	e000e010 	.word	0xe000e010

000001ac <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     1ac:	4b0c      	ldr	r3, [pc, #48]	; (1e0 <cpu_irq_enter_critical+0x34>)
     1ae:	681b      	ldr	r3, [r3, #0]
     1b0:	2b00      	cmp	r3, #0
     1b2:	d106      	bne.n	1c2 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     1b4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     1b8:	2b00      	cmp	r3, #0
     1ba:	d007      	beq.n	1cc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     1bc:	2200      	movs	r2, #0
     1be:	4b09      	ldr	r3, [pc, #36]	; (1e4 <cpu_irq_enter_critical+0x38>)
     1c0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     1c2:	4a07      	ldr	r2, [pc, #28]	; (1e0 <cpu_irq_enter_critical+0x34>)
     1c4:	6813      	ldr	r3, [r2, #0]
     1c6:	3301      	adds	r3, #1
     1c8:	6013      	str	r3, [r2, #0]
}
     1ca:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1cc:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     1ce:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1d2:	2200      	movs	r2, #0
     1d4:	4b04      	ldr	r3, [pc, #16]	; (1e8 <cpu_irq_enter_critical+0x3c>)
     1d6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1d8:	3201      	adds	r2, #1
     1da:	4b02      	ldr	r3, [pc, #8]	; (1e4 <cpu_irq_enter_critical+0x38>)
     1dc:	701a      	strb	r2, [r3, #0]
     1de:	e7f0      	b.n	1c2 <cpu_irq_enter_critical+0x16>
     1e0:	200009d4 	.word	0x200009d4
     1e4:	200009d8 	.word	0x200009d8
     1e8:	20000008 	.word	0x20000008

000001ec <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1ec:	4b08      	ldr	r3, [pc, #32]	; (210 <cpu_irq_leave_critical+0x24>)
     1ee:	681a      	ldr	r2, [r3, #0]
     1f0:	3a01      	subs	r2, #1
     1f2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1f4:	681b      	ldr	r3, [r3, #0]
     1f6:	2b00      	cmp	r3, #0
     1f8:	d109      	bne.n	20e <cpu_irq_leave_critical+0x22>
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <cpu_irq_leave_critical+0x28>)
     1fc:	781b      	ldrb	r3, [r3, #0]
     1fe:	2b00      	cmp	r3, #0
     200:	d005      	beq.n	20e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     202:	2201      	movs	r2, #1
     204:	4b04      	ldr	r3, [pc, #16]	; (218 <cpu_irq_leave_critical+0x2c>)
     206:	701a      	strb	r2, [r3, #0]
     208:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     20c:	b662      	cpsie	i
	}
}
     20e:	4770      	bx	lr
     210:	200009d4 	.word	0x200009d4
     214:	200009d8 	.word	0x200009d8
     218:	20000008 	.word	0x20000008

0000021c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     21c:	b5f0      	push	{r4, r5, r6, r7, lr}
     21e:	46c6      	mov	lr, r8
     220:	b500      	push	{lr}
     222:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     224:	ac01      	add	r4, sp, #4
     226:	2501      	movs	r5, #1
     228:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     22a:	2300      	movs	r3, #0
     22c:	4698      	mov	r8, r3
     22e:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     230:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     232:	0021      	movs	r1, r4
     234:	2013      	movs	r0, #19
     236:	4e12      	ldr	r6, [pc, #72]	; (280 <system_board_init+0x64>)
     238:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     23a:	4f12      	ldr	r7, [pc, #72]	; (284 <system_board_init+0x68>)
     23c:	2380      	movs	r3, #128	; 0x80
     23e:	031b      	lsls	r3, r3, #12
     240:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     242:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
     244:	0021      	movs	r1, r4
     246:	2012      	movs	r0, #18
     248:	47b0      	blx	r6
     24a:	2380      	movs	r3, #128	; 0x80
     24c:	02db      	lsls	r3, r3, #11
     24e:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     250:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
     252:	0021      	movs	r1, r4
     254:	200d      	movs	r0, #13
     256:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
     258:	2380      	movs	r3, #128	; 0x80
     25a:	019b      	lsls	r3, r3, #6
     25c:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     25e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
     260:	0021      	movs	r1, r4
     262:	2009      	movs	r0, #9
     264:	47b0      	blx	r6
     266:	2380      	movs	r3, #128	; 0x80
     268:	009b      	lsls	r3, r3, #2
     26a:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     26c:	4643      	mov	r3, r8
     26e:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     270:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     272:	0021      	movs	r1, r4
     274:	201c      	movs	r0, #28
     276:	47b0      	blx	r6
		
}
     278:	b002      	add	sp, #8
     27a:	bc04      	pop	{r2}
     27c:	4690      	mov	r8, r2
     27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     280:	00000a99 	.word	0x00000a99
     284:	40002800 	.word	0x40002800

00000288 <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
     288:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     28a:	4b2f      	ldr	r3, [pc, #188]	; (348 <ADC_Handler+0xc0>)
     28c:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     28e:	6823      	ldr	r3, [r4, #0]
     290:	799a      	ldrb	r2, [r3, #6]
     292:	795d      	ldrb	r5, [r3, #5]
     294:	4015      	ands	r5, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     296:	07ea      	lsls	r2, r5, #31
     298:	d52a      	bpl.n	2f0 <ADC_Handler+0x68>
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     29a:	2201      	movs	r2, #1
     29c:	719a      	strb	r2, [r3, #6]
		*(module->job_buffer++) = module->hw->RESULT.reg;
     29e:	6962      	ldr	r2, [r4, #20]
     2a0:	1c93      	adds	r3, r2, #2
     2a2:	6163      	str	r3, [r4, #20]
     2a4:	6823      	ldr	r3, [r4, #0]
     2a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     2a8:	b29b      	uxth	r3, r3
     2aa:	8013      	strh	r3, [r2, #0]
		if (--module->remaining_conversions > 0) {
     2ac:	8b23      	ldrh	r3, [r4, #24]
     2ae:	3b01      	subs	r3, #1
     2b0:	b29b      	uxth	r3, r3
     2b2:	8323      	strh	r3, [r4, #24]
     2b4:	2b00      	cmp	r3, #0
     2b6:	d015      	beq.n	2e4 <ADC_Handler+0x5c>
			if (module->software_trigger == true
     2b8:	7f63      	ldrb	r3, [r4, #29]
     2ba:	2b00      	cmp	r3, #0
     2bc:	d018      	beq.n	2f0 <ADC_Handler+0x68>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
     2be:	6822      	ldr	r2, [r4, #0]
     2c0:	79d3      	ldrb	r3, [r2, #7]
     2c2:	b25b      	sxtb	r3, r3
     2c4:	2b00      	cmp	r3, #0
     2c6:	db13      	blt.n	2f0 <ADC_Handler+0x68>
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->SYNCBUSY.reg) {
     2c8:	8c13      	ldrh	r3, [r2, #32]
     2ca:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
     2cc:	2b00      	cmp	r3, #0
     2ce:	d1fb      	bne.n	2c8 <ADC_Handler+0x40>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     2d0:	7e13      	ldrb	r3, [r2, #24]
     2d2:	2102      	movs	r1, #2
     2d4:	430b      	orrs	r3, r1
     2d6:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
     2d8:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
     2da:	8c13      	ldrh	r3, [r2, #32]
     2dc:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     2de:	2b00      	cmp	r3, #0
     2e0:	d1fb      	bne.n	2da <ADC_Handler+0x52>
     2e2:	e005      	b.n	2f0 <ADC_Handler+0x68>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     2e4:	2301      	movs	r3, #1
     2e6:	6822      	ldr	r2, [r4, #0]
     2e8:	7113      	strb	r3, [r2, #4]
			if (module->job_status == STATUS_BUSY) {
     2ea:	7f23      	ldrb	r3, [r4, #28]
     2ec:	2b05      	cmp	r3, #5
     2ee:	d016      	beq.n	31e <ADC_Handler+0x96>
	if (flags & ADC_INTFLAG_WINMON) {
     2f0:	076b      	lsls	r3, r5, #29
     2f2:	d508      	bpl.n	306 <ADC_Handler+0x7e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     2f4:	2304      	movs	r3, #4
     2f6:	6822      	ldr	r2, [r4, #0]
     2f8:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     2fa:	7ee3      	ldrb	r3, [r4, #27]
     2fc:	079b      	lsls	r3, r3, #30
     2fe:	d502      	bpl.n	306 <ADC_Handler+0x7e>
     300:	7ea3      	ldrb	r3, [r4, #26]
     302:	079b      	lsls	r3, r3, #30
     304:	d417      	bmi.n	336 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     306:	07ab      	lsls	r3, r5, #30
     308:	d508      	bpl.n	31c <ADC_Handler+0x94>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     30a:	2302      	movs	r3, #2
     30c:	6822      	ldr	r2, [r4, #0]
     30e:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     310:	7ee3      	ldrb	r3, [r4, #27]
     312:	075b      	lsls	r3, r3, #29
     314:	d502      	bpl.n	31c <ADC_Handler+0x94>
     316:	7ea3      	ldrb	r3, [r4, #26]
     318:	075b      	lsls	r3, r3, #29
     31a:	d410      	bmi.n	33e <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     31c:	bd70      	pop	{r4, r5, r6, pc}
				module->job_status = STATUS_OK;
     31e:	2300      	movs	r3, #0
     320:	7723      	strb	r3, [r4, #28]
				if ((module->enabled_callback_mask &
     322:	7ee3      	ldrb	r3, [r4, #27]
     324:	07db      	lsls	r3, r3, #31
     326:	d5e3      	bpl.n	2f0 <ADC_Handler+0x68>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     328:	7ea3      	ldrb	r3, [r4, #26]
     32a:	07db      	lsls	r3, r3, #31
     32c:	d5e0      	bpl.n	2f0 <ADC_Handler+0x68>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     32e:	0020      	movs	r0, r4
     330:	68a3      	ldr	r3, [r4, #8]
     332:	4798      	blx	r3
     334:	e7dc      	b.n	2f0 <ADC_Handler+0x68>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     336:	0020      	movs	r0, r4
     338:	68e3      	ldr	r3, [r4, #12]
     33a:	4798      	blx	r3
     33c:	e7e3      	b.n	306 <ADC_Handler+0x7e>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     33e:	6923      	ldr	r3, [r4, #16]
     340:	0020      	movs	r0, r4
     342:	4798      	blx	r3
}
     344:	e7ea      	b.n	31c <ADC_Handler+0x94>
     346:	46c0      	nop			; (mov r8, r8)
     348:	20001044 	.word	0x20001044

0000034c <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
     34c:	2301      	movs	r3, #1
     34e:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
     350:	2300      	movs	r3, #0
     352:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
     354:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
     356:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
     358:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
     35a:	220f      	movs	r2, #15
     35c:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
     35e:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
     360:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
     362:	7203      	strb	r3, [r0, #8]
}
     364:	4770      	bx	lr

00000366 <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
     366:	6802      	ldr	r2, [r0, #0]
     368:	6813      	ldr	r3, [r2, #0]
     36a:	2102      	movs	r1, #2
     36c:	430b      	orrs	r3, r1
     36e:	6013      	str	r3, [r2, #0]

}
     370:	4770      	bx	lr

00000372 <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
     372:	2303      	movs	r3, #3
     374:	6802      	ldr	r2, [r0, #0]
     376:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
     378:	6802      	ldr	r2, [r0, #0]
     37a:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
     37c:	6802      	ldr	r2, [r0, #0]
     37e:	6813      	ldr	r3, [r2, #0]
     380:	2102      	movs	r1, #2
     382:	438b      	bics	r3, r1
     384:	6013      	str	r3, [r2, #0]
}
     386:	4770      	bx	lr

00000388 <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
     388:	b570      	push	{r4, r5, r6, lr}
     38a:	0004      	movs	r4, r0
     38c:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
     38e:	78d3      	ldrb	r3, [r2, #3]
     390:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
     392:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
     394:	7853      	ldrb	r3, [r2, #1]
     396:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
     398:	7913      	ldrb	r3, [r2, #4]
     39a:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
     39c:	7813      	ldrb	r3, [r2, #0]
     39e:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
     3a0:	7891      	ldrb	r1, [r2, #2]
     3a2:	02c9      	lsls	r1, r1, #11
     3a4:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
     3a6:	7851      	ldrb	r1, [r2, #1]
     3a8:	0209      	lsls	r1, r1, #8
     3aa:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
     3ac:	78d1      	ldrb	r1, [r2, #3]
     3ae:	0089      	lsls	r1, r1, #2
     3b0:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
     3b2:	7911      	ldrb	r1, [r2, #4]
     3b4:	0149      	lsls	r1, r1, #5
     3b6:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
     3b8:	7991      	ldrb	r1, [r2, #6]
     3ba:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
     3bc:	79d0      	ldrb	r0, [r2, #7]
     3be:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
     3c0:	4301      	orrs	r1, r0
     3c2:	7a10      	ldrb	r0, [r2, #8]
     3c4:	0300      	lsls	r0, r0, #12
     3c6:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
     3c8:	7952      	ldrb	r2, [r2, #5]
     3ca:	0412      	lsls	r2, r2, #16
     3cc:	20f0      	movs	r0, #240	; 0xf0
     3ce:	0300      	lsls	r0, r0, #12
     3d0:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
     3d2:	430a      	orrs	r2, r1
     3d4:	4313      	orrs	r3, r2
     3d6:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
     3d8:	682b      	ldr	r3, [r5, #0]
     3da:	079b      	lsls	r3, r3, #30
     3dc:	d401      	bmi.n	3e2 <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
     3de:	602e      	str	r6, [r5, #0]
	}
}
     3e0:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
     3e2:	0020      	movs	r0, r4
     3e4:	4b03      	ldr	r3, [pc, #12]	; (3f4 <aes_set_config+0x6c>)
     3e6:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
     3e8:	602e      	str	r6, [r5, #0]
		aes_enable(module);
     3ea:	0020      	movs	r0, r4
     3ec:	4b02      	ldr	r3, [pc, #8]	; (3f8 <aes_set_config+0x70>)
     3ee:	4798      	blx	r3
     3f0:	e7f6      	b.n	3e0 <aes_set_config+0x58>
     3f2:	46c0      	nop			; (mov r8, r8)
     3f4:	00000373 	.word	0x00000373
     3f8:	00000367 	.word	0x00000367

000003fc <aes_init>:
{
     3fc:	b570      	push	{r4, r5, r6, lr}
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     3fe:	4c05      	ldr	r4, [pc, #20]	; (414 <aes_init+0x18>)
     400:	69e5      	ldr	r5, [r4, #28]
     402:	2380      	movs	r3, #128	; 0x80
     404:	019b      	lsls	r3, r3, #6
     406:	432b      	orrs	r3, r5
     408:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
     40a:	2301      	movs	r3, #1
     40c:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
     40e:	4b02      	ldr	r3, [pc, #8]	; (418 <aes_init+0x1c>)
     410:	4798      	blx	r3
}
     412:	bd70      	pop	{r4, r5, r6, pc}
     414:	40000400 	.word	0x40000400
     418:	00000389 	.word	0x00000389

0000041c <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
     41c:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
     41e:	7943      	ldrb	r3, [r0, #5]
     420:	2b01      	cmp	r3, #1
     422:	d005      	beq.n	430 <aes_write_key+0x14>
     424:	2b00      	cmp	r3, #0
     426:	d010      	beq.n	44a <aes_write_key+0x2e>
     428:	2b02      	cmp	r3, #2
     42a:	d10d      	bne.n	448 <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
     42c:	2508      	movs	r5, #8
     42e:	e000      	b.n	432 <aes_write_key+0x16>
		key_length = 6;
     430:	2506      	movs	r5, #6
{
     432:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
     434:	c910      	ldmia	r1!, {r4}
     436:	1c9a      	adds	r2, r3, #2
     438:	0092      	lsls	r2, r2, #2
     43a:	6806      	ldr	r6, [r0, #0]
     43c:	46b4      	mov	ip, r6
     43e:	4462      	add	r2, ip
     440:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
     442:	3301      	adds	r3, #1
     444:	42ab      	cmp	r3, r5
     446:	d3f5      	bcc.n	434 <aes_write_key+0x18>
		key++;
	}
}
     448:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
     44a:	2504      	movs	r5, #4
     44c:	e7f1      	b.n	432 <aes_write_key+0x16>
	...

00000450 <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
     450:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
     452:	2300      	movs	r3, #0
     454:	6802      	ldr	r2, [r0, #0]
     456:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
     458:	4b0f      	ldr	r3, [pc, #60]	; (498 <aes_write_input_data+0x48>)
     45a:	6842      	ldr	r2, [r0, #4]
     45c:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
     45e:	4a0f      	ldr	r2, [pc, #60]	; (49c <aes_write_input_data+0x4c>)
     460:	4293      	cmp	r3, r2
     462:	d00a      	beq.n	47a <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
     464:	7903      	ldrb	r3, [r0, #4]
     466:	2b03      	cmp	r3, #3
     468:	d00e      	beq.n	488 <aes_write_input_data+0x38>
     46a:	000c      	movs	r4, r1
     46c:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
     46e:	6803      	ldr	r3, [r0, #0]
     470:	c904      	ldmia	r1!, {r2}
     472:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
     474:	428c      	cmp	r4, r1
     476:	d1fa      	bne.n	46e <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
     478:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
     47a:	6803      	ldr	r3, [r0, #0]
     47c:	680a      	ldr	r2, [r1, #0]
     47e:	639a      	str	r2, [r3, #56]	; 0x38
     480:	6803      	ldr	r3, [r0, #0]
     482:	684a      	ldr	r2, [r1, #4]
     484:	639a      	str	r2, [r3, #56]	; 0x38
     486:	e7f7      	b.n	478 <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
     488:	7983      	ldrb	r3, [r0, #6]
     48a:	3b02      	subs	r3, #2
     48c:	2b01      	cmp	r3, #1
     48e:	d8ec      	bhi.n	46a <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
     490:	6803      	ldr	r3, [r0, #0]
     492:	680a      	ldr	r2, [r1, #0]
     494:	639a      	str	r2, [r3, #56]	; 0x38
     496:	e7ef      	b.n	478 <aes_write_input_data+0x28>
     498:	00ff00ff 	.word	0x00ff00ff
     49c:	00010003 	.word	0x00010003

000004a0 <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
     4a0:	2300      	movs	r3, #0
     4a2:	6802      	ldr	r2, [r0, #0]
     4a4:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
     4a6:	4b10      	ldr	r3, [pc, #64]	; (4e8 <aes_read_output_data+0x48>)
     4a8:	6842      	ldr	r2, [r0, #4]
     4aa:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
     4ac:	4a0f      	ldr	r2, [pc, #60]	; (4ec <aes_read_output_data+0x4c>)
     4ae:	4293      	cmp	r3, r2
     4b0:	d00a      	beq.n	4c8 <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
     4b2:	7903      	ldrb	r3, [r0, #4]
     4b4:	2b03      	cmp	r3, #3
     4b6:	d00e      	beq.n	4d6 <aes_read_output_data+0x36>
     4b8:	000a      	movs	r2, r1
     4ba:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
     4bc:	6803      	ldr	r3, [r0, #0]
     4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     4c0:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
     4c2:	428a      	cmp	r2, r1
     4c4:	d1fa      	bne.n	4bc <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
     4c6:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
     4c8:	6803      	ldr	r3, [r0, #0]
     4ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     4cc:	600b      	str	r3, [r1, #0]
     4ce:	6803      	ldr	r3, [r0, #0]
     4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     4d2:	604b      	str	r3, [r1, #4]
     4d4:	e7f7      	b.n	4c6 <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
     4d6:	7983      	ldrb	r3, [r0, #6]
     4d8:	3b02      	subs	r3, #2
     4da:	2b01      	cmp	r3, #1
     4dc:	d8ec      	bhi.n	4b8 <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
     4de:	6803      	ldr	r3, [r0, #0]
     4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     4e2:	600b      	str	r3, [r1, #0]
     4e4:	e7ef      	b.n	4c6 <aes_read_output_data+0x26>
     4e6:	46c0      	nop			; (mov r8, r8)
     4e8:	00ff00ff 	.word	0x00ff00ff
     4ec:	00010003 	.word	0x00010003

000004f0 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     4f0:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     4f2:	2a00      	cmp	r2, #0
     4f4:	d001      	beq.n	4fa <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     4f6:	0018      	movs	r0, r3
     4f8:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     4fa:	008b      	lsls	r3, r1, #2
     4fc:	4a06      	ldr	r2, [pc, #24]	; (518 <extint_register_callback+0x28>)
     4fe:	589b      	ldr	r3, [r3, r2]
     500:	2b00      	cmp	r3, #0
     502:	d003      	beq.n	50c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     504:	4283      	cmp	r3, r0
     506:	d005      	beq.n	514 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     508:	231d      	movs	r3, #29
     50a:	e7f4      	b.n	4f6 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     50c:	0089      	lsls	r1, r1, #2
     50e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     510:	2300      	movs	r3, #0
     512:	e7f0      	b.n	4f6 <extint_register_callback+0x6>
		return STATUS_OK;
     514:	2300      	movs	r3, #0
     516:	e7ee      	b.n	4f6 <extint_register_callback+0x6>
     518:	2000104c 	.word	0x2000104c

0000051c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     51c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     51e:	2900      	cmp	r1, #0
     520:	d001      	beq.n	526 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     522:	0018      	movs	r0, r3
     524:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     526:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     528:	281f      	cmp	r0, #31
     52a:	d800      	bhi.n	52e <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     52c:	4a02      	ldr	r2, [pc, #8]	; (538 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     52e:	2301      	movs	r3, #1
     530:	4083      	lsls	r3, r0
     532:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
     534:	2300      	movs	r3, #0
     536:	e7f4      	b.n	522 <extint_chan_enable_callback+0x6>
     538:	40002400 	.word	0x40002400

0000053c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     53c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     53e:	2200      	movs	r2, #0
     540:	4b10      	ldr	r3, [pc, #64]	; (584 <EIC_Handler+0x48>)
     542:	701a      	strb	r2, [r3, #0]
     544:	2300      	movs	r3, #0
     546:	4910      	ldr	r1, [pc, #64]	; (588 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     548:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     54a:	4e10      	ldr	r6, [pc, #64]	; (58c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     54c:	4c0d      	ldr	r4, [pc, #52]	; (584 <EIC_Handler+0x48>)
     54e:	e00a      	b.n	566 <EIC_Handler+0x2a>
		return eics[eic_index];
     550:	490d      	ldr	r1, [pc, #52]	; (588 <EIC_Handler+0x4c>)
     552:	e008      	b.n	566 <EIC_Handler+0x2a>
     554:	7823      	ldrb	r3, [r4, #0]
     556:	3301      	adds	r3, #1
     558:	b2db      	uxtb	r3, r3
     55a:	7023      	strb	r3, [r4, #0]
     55c:	2b0f      	cmp	r3, #15
     55e:	d810      	bhi.n	582 <EIC_Handler+0x46>
		return NULL;
     560:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     562:	2b1f      	cmp	r3, #31
     564:	d9f4      	bls.n	550 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     566:	0028      	movs	r0, r5
     568:	4018      	ands	r0, r3
     56a:	2201      	movs	r2, #1
     56c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     56e:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     570:	4210      	tst	r0, r2
     572:	d0ef      	beq.n	554 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     574:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     576:	009b      	lsls	r3, r3, #2
     578:	599b      	ldr	r3, [r3, r6]
     57a:	2b00      	cmp	r3, #0
     57c:	d0ea      	beq.n	554 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     57e:	4798      	blx	r3
     580:	e7e8      	b.n	554 <EIC_Handler+0x18>
			}
		}
	}
}
     582:	bd70      	pop	{r4, r5, r6, pc}
     584:	20001048 	.word	0x20001048
     588:	40002400 	.word	0x40002400
     58c:	2000104c 	.word	0x2000104c

00000590 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     590:	4a06      	ldr	r2, [pc, #24]	; (5ac <_extint_enable+0x1c>)
     592:	7813      	ldrb	r3, [r2, #0]
     594:	2102      	movs	r1, #2
     596:	430b      	orrs	r3, r1
     598:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     59a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     59c:	6853      	ldr	r3, [r2, #4]
     59e:	4219      	tst	r1, r3
     5a0:	d1fc      	bne.n	59c <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     5a2:	6853      	ldr	r3, [r2, #4]
     5a4:	4218      	tst	r0, r3
     5a6:	d1f9      	bne.n	59c <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     5a8:	4770      	bx	lr
     5aa:	46c0      	nop			; (mov r8, r8)
     5ac:	40002400 	.word	0x40002400

000005b0 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     5b0:	4a06      	ldr	r2, [pc, #24]	; (5cc <_extint_disable+0x1c>)
     5b2:	7813      	ldrb	r3, [r2, #0]
     5b4:	2102      	movs	r1, #2
     5b6:	438b      	bics	r3, r1
     5b8:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     5ba:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     5bc:	6853      	ldr	r3, [r2, #4]
     5be:	4219      	tst	r1, r3
     5c0:	d1fc      	bne.n	5bc <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     5c2:	6853      	ldr	r3, [r2, #4]
     5c4:	4218      	tst	r0, r3
     5c6:	d1f9      	bne.n	5bc <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     5c8:	4770      	bx	lr
     5ca:	46c0      	nop			; (mov r8, r8)
     5cc:	40002400 	.word	0x40002400

000005d0 <_system_extint_init>:
{
     5d0:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
     5d2:	4a12      	ldr	r2, [pc, #72]	; (61c <_system_extint_init+0x4c>)
     5d4:	6951      	ldr	r1, [r2, #20]
     5d6:	2380      	movs	r3, #128	; 0x80
     5d8:	009b      	lsls	r3, r3, #2
     5da:	430b      	orrs	r3, r1
     5dc:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     5de:	4a10      	ldr	r2, [pc, #64]	; (620 <_system_extint_init+0x50>)
     5e0:	7813      	ldrb	r3, [r2, #0]
     5e2:	2101      	movs	r1, #1
     5e4:	430b      	orrs	r3, r1
     5e6:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     5e8:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     5ea:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     5ec:	6853      	ldr	r3, [r2, #4]
     5ee:	4219      	tst	r1, r3
     5f0:	d1fc      	bne.n	5ec <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     5f2:	6853      	ldr	r3, [r2, #4]
     5f4:	4218      	tst	r0, r3
     5f6:	d1f9      	bne.n	5ec <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
     5f8:	4a09      	ldr	r2, [pc, #36]	; (620 <_system_extint_init+0x50>)
     5fa:	7813      	ldrb	r3, [r2, #0]
     5fc:	2110      	movs	r1, #16
     5fe:	430b      	orrs	r3, r1
     600:	7013      	strb	r3, [r2, #0]
     602:	4b08      	ldr	r3, [pc, #32]	; (624 <_system_extint_init+0x54>)
     604:	0019      	movs	r1, r3
     606:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     608:	2200      	movs	r2, #0
     60a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     60c:	428b      	cmp	r3, r1
     60e:	d1fc      	bne.n	60a <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     610:	2208      	movs	r2, #8
     612:	4b05      	ldr	r3, [pc, #20]	; (628 <_system_extint_init+0x58>)
     614:	601a      	str	r2, [r3, #0]
	_extint_enable();
     616:	4b05      	ldr	r3, [pc, #20]	; (62c <_system_extint_init+0x5c>)
     618:	4798      	blx	r3
}
     61a:	bd10      	pop	{r4, pc}
     61c:	40000400 	.word	0x40000400
     620:	40002400 	.word	0x40002400
     624:	2000104c 	.word	0x2000104c
     628:	e000e100 	.word	0xe000e100
     62c:	00000591 	.word	0x00000591

00000630 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     630:	2300      	movs	r3, #0
     632:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     634:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     636:	2201      	movs	r2, #1
     638:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
     63a:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     63c:	3201      	adds	r2, #1
     63e:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
     640:	7243      	strb	r3, [r0, #9]
}
     642:	4770      	bx	lr

00000644 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     644:	b5f0      	push	{r4, r5, r6, r7, lr}
     646:	b083      	sub	sp, #12
     648:	0005      	movs	r5, r0
     64a:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
     64c:	4b1c      	ldr	r3, [pc, #112]	; (6c0 <extint_chan_set_config+0x7c>)
     64e:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     650:	a901      	add	r1, sp, #4
     652:	2300      	movs	r3, #0
     654:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     656:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     658:	7923      	ldrb	r3, [r4, #4]
     65a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     65c:	7a23      	ldrb	r3, [r4, #8]
     65e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     660:	7820      	ldrb	r0, [r4, #0]
     662:	4b18      	ldr	r3, [pc, #96]	; (6c4 <extint_chan_set_config+0x80>)
     664:	4798      	blx	r3
		return NULL;
     666:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     668:	2d1f      	cmp	r5, #31
     66a:	d800      	bhi.n	66e <extint_chan_set_config+0x2a>
		return eics[eic_index];
     66c:	4916      	ldr	r1, [pc, #88]	; (6c8 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     66e:	2207      	movs	r2, #7
     670:	402a      	ands	r2, r5
     672:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     674:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     676:	7aa3      	ldrb	r3, [r4, #10]
     678:	2b00      	cmp	r3, #0
     67a:	d001      	beq.n	680 <extint_chan_set_config+0x3c>
     67c:	2308      	movs	r3, #8
     67e:	431f      	orrs	r7, r3
     680:	08eb      	lsrs	r3, r5, #3
     682:	009b      	lsls	r3, r3, #2
     684:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     686:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     688:	260f      	movs	r6, #15
     68a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     68c:	43b0      	bics	r0, r6
			(new_config << config_pos);
     68e:	4097      	lsls	r7, r2
     690:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     692:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
     694:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
     696:	7a63      	ldrb	r3, [r4, #9]
     698:	2b00      	cmp	r3, #0
     69a:	d10b      	bne.n	6b4 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
     69c:	698a      	ldr	r2, [r1, #24]
     69e:	2301      	movs	r3, #1
     6a0:	40ab      	lsls	r3, r5
     6a2:	43db      	mvns	r3, r3
     6a4:	041b      	lsls	r3, r3, #16
     6a6:	0c1b      	lsrs	r3, r3, #16
     6a8:	4013      	ands	r3, r2
     6aa:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
     6ac:	4b07      	ldr	r3, [pc, #28]	; (6cc <extint_chan_set_config+0x88>)
     6ae:	4798      	blx	r3
}
     6b0:	b003      	add	sp, #12
     6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
     6b4:	698a      	ldr	r2, [r1, #24]
     6b6:	2301      	movs	r3, #1
     6b8:	40ab      	lsls	r3, r5
     6ba:	4313      	orrs	r3, r2
     6bc:	618b      	str	r3, [r1, #24]
     6be:	e7f5      	b.n	6ac <extint_chan_set_config+0x68>
     6c0:	000005b1 	.word	0x000005b1
     6c4:	000024c5 	.word	0x000024c5
     6c8:	40002400 	.word	0x40002400
     6cc:	00000591 	.word	0x00000591

000006d0 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     6d0:	b510      	push	{r4, lr}
			MCLK->APBBMASK.reg |= mask;
     6d2:	4a1e      	ldr	r2, [pc, #120]	; (74c <nvm_set_config+0x7c>)
     6d4:	6993      	ldr	r3, [r2, #24]
     6d6:	2104      	movs	r1, #4
     6d8:	430b      	orrs	r3, r1
     6da:	6193      	str	r3, [r2, #24]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     6dc:	4b1c      	ldr	r3, [pc, #112]	; (750 <nvm_set_config+0x80>)
     6de:	2220      	movs	r2, #32
     6e0:	32ff      	adds	r2, #255	; 0xff
     6e2:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     6e4:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
     6e6:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
     6e8:	07d2      	lsls	r2, r2, #31
     6ea:	d401      	bmi.n	6f0 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
     6ec:	0018      	movs	r0, r3
     6ee:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     6f0:	7803      	ldrb	r3, [r0, #0]
     6f2:	021b      	lsls	r3, r3, #8
     6f4:	22c0      	movs	r2, #192	; 0xc0
     6f6:	0092      	lsls	r2, r2, #2
     6f8:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     6fa:	7841      	ldrb	r1, [r0, #1]
     6fc:	01c9      	lsls	r1, r1, #7
     6fe:	22ff      	movs	r2, #255	; 0xff
     700:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     702:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     704:	7881      	ldrb	r1, [r0, #2]
     706:	0049      	lsls	r1, r1, #1
     708:	221e      	movs	r2, #30
     70a:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     70c:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     70e:	78c2      	ldrb	r2, [r0, #3]
     710:	0492      	lsls	r2, r2, #18
     712:	2180      	movs	r1, #128	; 0x80
     714:	02c9      	lsls	r1, r1, #11
     716:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     718:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     71a:	7902      	ldrb	r2, [r0, #4]
     71c:	0412      	lsls	r2, r2, #16
     71e:	21c0      	movs	r1, #192	; 0xc0
     720:	0289      	lsls	r1, r1, #10
     722:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     724:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
     726:	4a0a      	ldr	r2, [pc, #40]	; (750 <nvm_set_config+0x80>)
     728:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     72a:	6893      	ldr	r3, [r2, #8]
     72c:	035b      	lsls	r3, r3, #13
     72e:	0f5b      	lsrs	r3, r3, #29
     730:	4908      	ldr	r1, [pc, #32]	; (754 <nvm_set_config+0x84>)
     732:	2408      	movs	r4, #8
     734:	409c      	lsls	r4, r3
     736:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     738:	6893      	ldr	r3, [r2, #8]
     73a:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     73c:	7843      	ldrb	r3, [r0, #1]
     73e:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     740:	8b13      	ldrh	r3, [r2, #24]
     742:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
     744:	0fdb      	lsrs	r3, r3, #31
     746:	011b      	lsls	r3, r3, #4
     748:	e7d0      	b.n	6ec <nvm_set_config+0x1c>
     74a:	46c0      	nop			; (mov r8, r8)
     74c:	40000400 	.word	0x40000400
     750:	41004000 	.word	0x41004000
     754:	200009dc 	.word	0x200009dc

00000758 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     758:	b530      	push	{r4, r5, lr}
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     75a:	4a30      	ldr	r2, [pc, #192]	; (81c <nvm_execute_command+0xc4>)
     75c:	8814      	ldrh	r4, [r2, #0]
     75e:	8853      	ldrh	r3, [r2, #2]
     760:	4363      	muls	r3, r4
     762:	428b      	cmp	r3, r1
     764:	d20b      	bcs.n	77e <nvm_execute_command+0x26>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     766:	2280      	movs	r2, #128	; 0x80
     768:	0192      	lsls	r2, r2, #6
     76a:	4b2d      	ldr	r3, [pc, #180]	; (820 <nvm_execute_command+0xc8>)
     76c:	18cb      	adds	r3, r1, r3
     76e:	4293      	cmp	r3, r2
     770:	d905      	bls.n	77e <nvm_execute_command+0x26>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     772:	4c2c      	ldr	r4, [pc, #176]	; (824 <nvm_execute_command+0xcc>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
     774:	2318      	movs	r3, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     776:	4a2c      	ldr	r2, [pc, #176]	; (828 <nvm_execute_command+0xd0>)
     778:	188a      	adds	r2, r1, r2
     77a:	42a2      	cmp	r2, r4
     77c:	d80e      	bhi.n	79c <nvm_execute_command+0x44>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     77e:	4b2b      	ldr	r3, [pc, #172]	; (82c <nvm_execute_command+0xd4>)
     780:	685c      	ldr	r4, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     782:	2280      	movs	r2, #128	; 0x80
     784:	02d2      	lsls	r2, r2, #11
     786:	4322      	orrs	r2, r4
     788:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     78a:	2220      	movs	r2, #32
     78c:	32ff      	adds	r2, #255	; 0xff
     78e:	831a      	strh	r2, [r3, #24]
     790:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     792:	07db      	lsls	r3, r3, #31
     794:	d404      	bmi.n	7a0 <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     796:	4b25      	ldr	r3, [pc, #148]	; (82c <nvm_execute_command+0xd4>)
     798:	605c      	str	r4, [r3, #4]
		return STATUS_BUSY;
     79a:	2305      	movs	r3, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
     79c:	0018      	movs	r0, r3
     79e:	bd30      	pop	{r4, r5, pc}
	switch (command) {
     7a0:	2845      	cmp	r0, #69	; 0x45
     7a2:	d829      	bhi.n	7f8 <nvm_execute_command+0xa0>
     7a4:	0083      	lsls	r3, r0, #2
     7a6:	4a22      	ldr	r2, [pc, #136]	; (830 <nvm_execute_command+0xd8>)
     7a8:	58d3      	ldr	r3, [r2, r3]
     7aa:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     7ac:	4b1f      	ldr	r3, [pc, #124]	; (82c <nvm_execute_command+0xd4>)
     7ae:	8b1b      	ldrh	r3, [r3, #24]
     7b0:	05db      	lsls	r3, r3, #23
     7b2:	d503      	bpl.n	7bc <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
     7b4:	4b1d      	ldr	r3, [pc, #116]	; (82c <nvm_execute_command+0xd4>)
     7b6:	605c      	str	r4, [r3, #4]
				return STATUS_ERR_IO;
     7b8:	2310      	movs	r3, #16
     7ba:	e7ef      	b.n	79c <nvm_execute_command+0x44>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     7bc:	0889      	lsrs	r1, r1, #2
     7be:	0049      	lsls	r1, r1, #1
     7c0:	4b1a      	ldr	r3, [pc, #104]	; (82c <nvm_execute_command+0xd4>)
     7c2:	61d9      	str	r1, [r3, #28]
			break;
     7c4:	e003      	b.n	7ce <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     7c6:	0889      	lsrs	r1, r1, #2
     7c8:	0049      	lsls	r1, r1, #1
     7ca:	4b18      	ldr	r3, [pc, #96]	; (82c <nvm_execute_command+0xd4>)
     7cc:	61d9      	str	r1, [r3, #28]
	if( command == NVM_COMMAND_RWWEE_ERASE_ROW || command == NVM_COMMAND_RWWEE_WRITE_PAGE)
     7ce:	23fd      	movs	r3, #253	; 0xfd
     7d0:	0005      	movs	r5, r0
     7d2:	3d1a      	subs	r5, #26
     7d4:	401d      	ands	r5, r3
     7d6:	d013      	beq.n	800 <nvm_execute_command+0xa8>
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     7d8:	23a5      	movs	r3, #165	; 0xa5
     7da:	021b      	lsls	r3, r3, #8
     7dc:	4318      	orrs	r0, r3
     7de:	4b13      	ldr	r3, [pc, #76]	; (82c <nvm_execute_command+0xd4>)
     7e0:	8018      	strh	r0, [r3, #0]
     7e2:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     7e4:	2201      	movs	r2, #1
     7e6:	7d0b      	ldrb	r3, [r1, #20]
     7e8:	4213      	tst	r3, r2
     7ea:	d0fc      	beq.n	7e6 <nvm_execute_command+0x8e>
	if( command == NVM_COMMAND_RWWEE_ERASE_ROW || command == NVM_COMMAND_RWWEE_WRITE_PAGE)
     7ec:	2d00      	cmp	r5, #0
     7ee:	d00f      	beq.n	810 <nvm_execute_command+0xb8>
	nvm_module->CTRLB.reg = ctrlb_bak;
     7f0:	4b0e      	ldr	r3, [pc, #56]	; (82c <nvm_execute_command+0xd4>)
     7f2:	605c      	str	r4, [r3, #4]
	return STATUS_OK;
     7f4:	2300      	movs	r3, #0
     7f6:	e7d1      	b.n	79c <nvm_execute_command+0x44>
			nvm_module->CTRLB.reg = ctrlb_bak;
     7f8:	4b0c      	ldr	r3, [pc, #48]	; (82c <nvm_execute_command+0xd4>)
     7fa:	605c      	str	r4, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     7fc:	2317      	movs	r3, #23
     7fe:	e7cd      	b.n	79c <nvm_execute_command+0x44>
		nvm_module->CTRLB.bit.CACHEDIS = 1;
     800:	4b0a      	ldr	r3, [pc, #40]	; (82c <nvm_execute_command+0xd4>)
     802:	6859      	ldr	r1, [r3, #4]
     804:	2280      	movs	r2, #128	; 0x80
     806:	02d2      	lsls	r2, r2, #11
     808:	430a      	orrs	r2, r1
     80a:	605a      	str	r2, [r3, #4]
		nvm_module->CTRLB.reg;
     80c:	685b      	ldr	r3, [r3, #4]
     80e:	e7e3      	b.n	7d8 <nvm_execute_command+0x80>
		nvm_module->CTRLB.bit.CACHEDIS = 0;
     810:	4a06      	ldr	r2, [pc, #24]	; (82c <nvm_execute_command+0xd4>)
     812:	6853      	ldr	r3, [r2, #4]
     814:	4907      	ldr	r1, [pc, #28]	; (834 <nvm_execute_command+0xdc>)
     816:	400b      	ands	r3, r1
     818:	6053      	str	r3, [r2, #4]
     81a:	e7e9      	b.n	7f0 <nvm_execute_command+0x98>
     81c:	200009dc 	.word	0x200009dc
     820:	ff7fc000 	.word	0xff7fc000
     824:	00001fff 	.word	0x00001fff
     828:	ffc00000 	.word	0xffc00000
     82c:	41004000 	.word	0x41004000
     830:	00018db4 	.word	0x00018db4
     834:	fffbffff 	.word	0xfffbffff

00000838 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     83a:	4b2f      	ldr	r3, [pc, #188]	; (8f8 <nvm_write_buffer+0xc0>)
     83c:	881c      	ldrh	r4, [r3, #0]
     83e:	885b      	ldrh	r3, [r3, #2]
     840:	4363      	muls	r3, r4
	if (destination_address >
     842:	4283      	cmp	r3, r0
     844:	d207      	bcs.n	856 <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     846:	4e2d      	ldr	r6, [pc, #180]	; (8fc <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
     848:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     84a:	4b2d      	ldr	r3, [pc, #180]	; (900 <nvm_write_buffer+0xc8>)
     84c:	18c3      	adds	r3, r0, r3
     84e:	42b3      	cmp	r3, r6
     850:	d806      	bhi.n	860 <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
     852:	2601      	movs	r6, #1
     854:	e000      	b.n	858 <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
     856:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
     858:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
     85a:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
     85c:	4218      	tst	r0, r3
     85e:	d001      	beq.n	864 <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
     860:	0028      	movs	r0, r5
     862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     864:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
     866:	4294      	cmp	r4, r2
     868:	d3fa      	bcc.n	860 <nvm_write_buffer+0x28>
     86a:	4b26      	ldr	r3, [pc, #152]	; (904 <nvm_write_buffer+0xcc>)
     86c:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     86e:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
     870:	07db      	lsls	r3, r3, #31
     872:	d5f5      	bpl.n	860 <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     874:	4c24      	ldr	r4, [pc, #144]	; (908 <nvm_write_buffer+0xd0>)
     876:	4b23      	ldr	r3, [pc, #140]	; (904 <nvm_write_buffer+0xcc>)
     878:	801c      	strh	r4, [r3, #0]
     87a:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
     87c:	2401      	movs	r4, #1
     87e:	7d2b      	ldrb	r3, [r5, #20]
     880:	4223      	tst	r3, r4
     882:	d0fc      	beq.n	87e <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     884:	2420      	movs	r4, #32
     886:	34ff      	adds	r4, #255	; 0xff
     888:	4b1e      	ldr	r3, [pc, #120]	; (904 <nvm_write_buffer+0xcc>)
     88a:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     88c:	2a00      	cmp	r2, #0
     88e:	d02c      	beq.n	8ea <nvm_write_buffer+0xb2>
     890:	2301      	movs	r3, #1
     892:	0005      	movs	r5, r0
     894:	439d      	bics	r5, r3
     896:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     898:	1e54      	subs	r4, r2, #1
     89a:	46a4      	mov	ip, r4
     89c:	e009      	b.n	8b2 <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
     89e:	18cf      	adds	r7, r1, r3
     8a0:	787f      	ldrb	r7, [r7, #1]
     8a2:	023f      	lsls	r7, r7, #8
     8a4:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
     8a6:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     8a8:	3302      	adds	r3, #2
     8aa:	b29b      	uxth	r3, r3
     8ac:	3502      	adds	r5, #2
     8ae:	429a      	cmp	r2, r3
     8b0:	d904      	bls.n	8bc <nvm_write_buffer+0x84>
		data = buffer[i];
     8b2:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
     8b4:	4563      	cmp	r3, ip
     8b6:	dbf2      	blt.n	89e <nvm_write_buffer+0x66>
		data = buffer[i];
     8b8:	b2a4      	uxth	r4, r4
     8ba:	e7f4      	b.n	8a6 <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     8bc:	4b0e      	ldr	r3, [pc, #56]	; (8f8 <nvm_write_buffer+0xc0>)
     8be:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     8c0:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     8c2:	2b00      	cmp	r3, #0
     8c4:	d1cc      	bne.n	860 <nvm_write_buffer+0x28>
     8c6:	2a3f      	cmp	r2, #63	; 0x3f
     8c8:	d8ca      	bhi.n	860 <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
     8ca:	2e00      	cmp	r6, #0
     8cc:	d106      	bne.n	8dc <nvm_write_buffer+0xa4>
     8ce:	2200      	movs	r2, #0
     8d0:	0001      	movs	r1, r0
     8d2:	2004      	movs	r0, #4
     8d4:	4b0d      	ldr	r3, [pc, #52]	; (90c <nvm_write_buffer+0xd4>)
     8d6:	4798      	blx	r3
     8d8:	0005      	movs	r5, r0
     8da:	e7c1      	b.n	860 <nvm_write_buffer+0x28>
     8dc:	2200      	movs	r2, #0
     8de:	0001      	movs	r1, r0
     8e0:	201c      	movs	r0, #28
     8e2:	4b0a      	ldr	r3, [pc, #40]	; (90c <nvm_write_buffer+0xd4>)
     8e4:	4798      	blx	r3
     8e6:	0005      	movs	r5, r0
     8e8:	e7ba      	b.n	860 <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     8ea:	4b03      	ldr	r3, [pc, #12]	; (8f8 <nvm_write_buffer+0xc0>)
     8ec:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     8ee:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     8f0:	2b00      	cmp	r3, #0
     8f2:	d0ea      	beq.n	8ca <nvm_write_buffer+0x92>
     8f4:	e7b4      	b.n	860 <nvm_write_buffer+0x28>
     8f6:	46c0      	nop			; (mov r8, r8)
     8f8:	200009dc 	.word	0x200009dc
     8fc:	00001fff 	.word	0x00001fff
     900:	ffc00000 	.word	0xffc00000
     904:	41004000 	.word	0x41004000
     908:	ffffa544 	.word	0xffffa544
     90c:	00000759 	.word	0x00000759

00000910 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
     910:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     912:	4b1b      	ldr	r3, [pc, #108]	; (980 <nvm_read_buffer+0x70>)
     914:	881c      	ldrh	r4, [r3, #0]
     916:	885b      	ldrh	r3, [r3, #2]
     918:	4363      	muls	r3, r4
	if (source_address >
     91a:	4283      	cmp	r3, r0
     91c:	d205      	bcs.n	92a <nvm_read_buffer+0x1a>
#ifdef FEATURE_NVM_RWWEE
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     91e:	4e19      	ldr	r6, [pc, #100]	; (984 <nvm_read_buffer+0x74>)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
     920:	2518      	movs	r5, #24
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     922:	4b19      	ldr	r3, [pc, #100]	; (988 <nvm_read_buffer+0x78>)
     924:	18c3      	adds	r3, r0, r3
     926:	42b3      	cmp	r3, r6
     928:	d803      	bhi.n	932 <nvm_read_buffer+0x22>
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
     92a:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
     92c:	2518      	movs	r5, #24
	if (source_address & (_nvm_dev.page_size - 1)) {
     92e:	4218      	tst	r0, r3
     930:	d001      	beq.n	936 <nvm_read_buffer+0x26>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
     932:	0028      	movs	r0, r5
     934:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_ERR_INVALID_ARG;
     936:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
     938:	4294      	cmp	r4, r2
     93a:	d3fa      	bcc.n	932 <nvm_read_buffer+0x22>
     93c:	4b13      	ldr	r3, [pc, #76]	; (98c <nvm_read_buffer+0x7c>)
     93e:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     940:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
     942:	07db      	lsls	r3, r3, #31
     944:	d5f5      	bpl.n	932 <nvm_read_buffer+0x22>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     946:	2420      	movs	r4, #32
     948:	34ff      	adds	r4, #255	; 0xff
     94a:	4b10      	ldr	r3, [pc, #64]	; (98c <nvm_read_buffer+0x7c>)
     94c:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     94e:	2a00      	cmp	r2, #0
     950:	d014      	beq.n	97c <nvm_read_buffer+0x6c>
     952:	2301      	movs	r3, #1
     954:	4398      	bics	r0, r3
     956:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     958:	1e56      	subs	r6, r2, #1
     95a:	e004      	b.n	966 <nvm_read_buffer+0x56>
	for (uint16_t i = 0; i < length; i += 2) {
     95c:	3302      	adds	r3, #2
     95e:	b29b      	uxth	r3, r3
     960:	3002      	adds	r0, #2
     962:	429a      	cmp	r2, r3
     964:	d908      	bls.n	978 <nvm_read_buffer+0x68>
		uint16_t data = NVM_MEMORY[page_address++];
     966:	8804      	ldrh	r4, [r0, #0]
     968:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
     96a:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
     96c:	42b3      	cmp	r3, r6
     96e:	daf5      	bge.n	95c <nvm_read_buffer+0x4c>
			buffer[i + 1] = (data >> 8);
     970:	18cd      	adds	r5, r1, r3
     972:	0a24      	lsrs	r4, r4, #8
     974:	706c      	strb	r4, [r5, #1]
     976:	e7f1      	b.n	95c <nvm_read_buffer+0x4c>
	return STATUS_OK;
     978:	2500      	movs	r5, #0
     97a:	e7da      	b.n	932 <nvm_read_buffer+0x22>
     97c:	2500      	movs	r5, #0
     97e:	e7d8      	b.n	932 <nvm_read_buffer+0x22>
     980:	200009dc 	.word	0x200009dc
     984:	00001fff 	.word	0x00001fff
     988:	ffc00000 	.word	0xffc00000
     98c:	41004000 	.word	0x41004000

00000990 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
     990:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     992:	4a22      	ldr	r2, [pc, #136]	; (a1c <nvm_erase_row+0x8c>)
     994:	8813      	ldrh	r3, [r2, #0]
     996:	8852      	ldrh	r2, [r2, #2]
     998:	435a      	muls	r2, r3
	if (row_address >
     99a:	4282      	cmp	r2, r0
     99c:	d207      	bcs.n	9ae <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     99e:	4c20      	ldr	r4, [pc, #128]	; (a20 <nvm_erase_row+0x90>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
     9a0:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     9a2:	4920      	ldr	r1, [pc, #128]	; (a24 <nvm_erase_row+0x94>)
     9a4:	1841      	adds	r1, r0, r1
     9a6:	42a1      	cmp	r1, r4
     9a8:	d807      	bhi.n	9ba <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
     9aa:	2401      	movs	r4, #1
     9ac:	e000      	b.n	9b0 <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
     9ae:	2400      	movs	r4, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     9b0:	009b      	lsls	r3, r3, #2
     9b2:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
     9b4:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     9b6:	4218      	tst	r0, r3
     9b8:	d001      	beq.n	9be <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
     9ba:	0010      	movs	r0, r2
     9bc:	bd10      	pop	{r4, pc}
     9be:	4b1a      	ldr	r3, [pc, #104]	; (a28 <nvm_erase_row+0x98>)
     9c0:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     9c2:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
     9c4:	07db      	lsls	r3, r3, #31
     9c6:	d5f8      	bpl.n	9ba <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     9c8:	4b17      	ldr	r3, [pc, #92]	; (a28 <nvm_erase_row+0x98>)
     9ca:	2220      	movs	r2, #32
     9cc:	32ff      	adds	r2, #255	; 0xff
     9ce:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     9d0:	0880      	lsrs	r0, r0, #2
     9d2:	0040      	lsls	r0, r0, #1
     9d4:	61d8      	str	r0, [r3, #28]
	if (is_rww_eeprom) {
     9d6:	2c00      	cmp	r4, #0
     9d8:	d01b      	beq.n	a12 <nvm_erase_row+0x82>
		nvm_module->CTRLB.bit.CACHEDIS = 1;
     9da:	6859      	ldr	r1, [r3, #4]
     9dc:	2280      	movs	r2, #128	; 0x80
     9de:	02d2      	lsls	r2, r2, #11
     9e0:	430a      	orrs	r2, r1
     9e2:	605a      	str	r2, [r3, #4]
		nvm_module->CTRLB.reg;
     9e4:	685a      	ldr	r2, [r3, #4]
		nvm_module->CTRLA.reg = NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     9e6:	4a11      	ldr	r2, [pc, #68]	; (a2c <nvm_erase_row+0x9c>)
     9e8:	801a      	strh	r2, [r3, #0]
     9ea:	490f      	ldr	r1, [pc, #60]	; (a28 <nvm_erase_row+0x98>)
	while (!nvm_is_ready()) {
     9ec:	2201      	movs	r2, #1
     9ee:	7d0b      	ldrb	r3, [r1, #20]
     9f0:	4213      	tst	r3, r2
     9f2:	d0fc      	beq.n	9ee <nvm_erase_row+0x5e>
	if (is_rww_eeprom) {
     9f4:	2c00      	cmp	r4, #0
     9f6:	d004      	beq.n	a02 <nvm_erase_row+0x72>
		nvm_module->CTRLB.bit.CACHEDIS = 0;
     9f8:	4a0b      	ldr	r2, [pc, #44]	; (a28 <nvm_erase_row+0x98>)
     9fa:	6853      	ldr	r3, [r2, #4]
     9fc:	490c      	ldr	r1, [pc, #48]	; (a30 <nvm_erase_row+0xa0>)
     9fe:	400b      	ands	r3, r1
     a00:	6053      	str	r3, [r2, #4]
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     a02:	4b09      	ldr	r3, [pc, #36]	; (a28 <nvm_erase_row+0x98>)
     a04:	8b1a      	ldrh	r2, [r3, #24]
     a06:	201c      	movs	r0, #28
     a08:	4002      	ands	r2, r0
	return STATUS_OK;
     a0a:	1e50      	subs	r0, r2, #1
     a0c:	4182      	sbcs	r2, r0
     a0e:	0092      	lsls	r2, r2, #2
     a10:	e7d3      	b.n	9ba <nvm_erase_row+0x2a>
		nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     a12:	4a08      	ldr	r2, [pc, #32]	; (a34 <nvm_erase_row+0xa4>)
     a14:	4b04      	ldr	r3, [pc, #16]	; (a28 <nvm_erase_row+0x98>)
     a16:	801a      	strh	r2, [r3, #0]
     a18:	e7e7      	b.n	9ea <nvm_erase_row+0x5a>
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	200009dc 	.word	0x200009dc
     a20:	00001fff 	.word	0x00001fff
     a24:	ffc00000 	.word	0xffc00000
     a28:	41004000 	.word	0x41004000
     a2c:	ffffa51a 	.word	0xffffa51a
     a30:	fffbffff 	.word	0xfffbffff
     a34:	ffffa502 	.word	0xffffa502

00000a38 <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     a38:	4b15      	ldr	r3, [pc, #84]	; (a90 <nvm_get_parameters+0x58>)
     a3a:	2220      	movs	r2, #32
     a3c:	32ff      	adds	r2, #255	; 0xff
     a3e:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
     a40:	689b      	ldr	r3, [r3, #8]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
     a42:	0359      	lsls	r1, r3, #13
     a44:	0f49      	lsrs	r1, r1, #29
     a46:	3a18      	subs	r2, #24
     a48:	3aff      	subs	r2, #255	; 0xff
     a4a:	408a      	lsls	r2, r1
	parameters->page_size =
     a4c:	7002      	strb	r2, [r0, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
     a4e:	8043      	strh	r3, [r0, #2]
			(param_reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;

#ifdef FEATURE_NVM_RWWEE
	/* Mask out rwwee number of pages count */
	parameters->rww_eeprom_number_of_pages =
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
     a50:	0d1b      	lsrs	r3, r3, #20
	parameters->rww_eeprom_number_of_pages =
     a52:	8183      	strh	r3, [r0, #12]
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
     a54:	4b0f      	ldr	r3, [pc, #60]	; (a94 <nvm_get_parameters+0x5c>)
     a56:	881b      	ldrh	r3, [r3, #0]
	uint16_t eeprom_fuse_value =
     a58:	065b      	lsls	r3, r3, #25
     a5a:	0f5b      	lsrs	r3, r3, #29
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
     a5c:	2b07      	cmp	r3, #7
     a5e:	d010      	beq.n	a82 <nvm_get_parameters+0x4a>
		parameters->eeprom_number_of_pages = 0;
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
     a60:	2206      	movs	r2, #6
     a62:	1ad2      	subs	r2, r2, r3
     a64:	2304      	movs	r3, #4
     a66:	4093      	lsls	r3, r2
		parameters->eeprom_number_of_pages =
     a68:	6043      	str	r3, [r0, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
     a6a:	4b0a      	ldr	r3, [pc, #40]	; (a94 <nvm_get_parameters+0x5c>)
     a6c:	881b      	ldrh	r3, [r3, #0]
	uint16_t boot_fuse_value =
     a6e:	2207      	movs	r2, #7
     a70:	4013      	ands	r3, r2
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
     a72:	2b07      	cmp	r3, #7
     a74:	d008      	beq.n	a88 <nvm_get_parameters+0x50>
		parameters->bootloader_number_of_pages = 0;
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
     a76:	2207      	movs	r2, #7
     a78:	1ad2      	subs	r2, r2, r3
     a7a:	2304      	movs	r3, #4
     a7c:	4093      	lsls	r3, r2
		parameters->bootloader_number_of_pages =
     a7e:	6083      	str	r3, [r0, #8]
	}
}
     a80:	4770      	bx	lr
		parameters->eeprom_number_of_pages = 0;
     a82:	2300      	movs	r3, #0
     a84:	6043      	str	r3, [r0, #4]
     a86:	e7f0      	b.n	a6a <nvm_get_parameters+0x32>
		parameters->bootloader_number_of_pages = 0;
     a88:	2300      	movs	r3, #0
     a8a:	6083      	str	r3, [r0, #8]
     a8c:	e7f8      	b.n	a80 <nvm_get_parameters+0x48>
     a8e:	46c0      	nop			; (mov r8, r8)
     a90:	41004000 	.word	0x41004000
     a94:	00804000 	.word	0x00804000

00000a98 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     a98:	b500      	push	{lr}
     a9a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a9c:	ab01      	add	r3, sp, #4
     a9e:	2280      	movs	r2, #128	; 0x80
     aa0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     aa2:	780a      	ldrb	r2, [r1, #0]
     aa4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     aa6:	784a      	ldrb	r2, [r1, #1]
     aa8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     aaa:	788a      	ldrb	r2, [r1, #2]
     aac:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     aae:	0019      	movs	r1, r3
     ab0:	4b01      	ldr	r3, [pc, #4]	; (ab8 <port_pin_set_config+0x20>)
     ab2:	4798      	blx	r3
}
     ab4:	b003      	add	sp, #12
     ab6:	bd00      	pop	{pc}
     ab8:	000024c5 	.word	0x000024c5

00000abc <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     abc:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
     abe:	6918      	ldr	r0, [r3, #16]
     ac0:	1e43      	subs	r3, r0, #1
     ac2:	4198      	sbcs	r0, r3
     ac4:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
     ac6:	4770      	bx	lr

00000ac8 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     ac8:	b570      	push	{r4, r5, r6, lr}
     aca:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     acc:	6806      	ldr	r6, [r0, #0]
     ace:	2204      	movs	r2, #4
     ad0:	4b08      	ldr	r3, [pc, #32]	; (af4 <rtc_count_enable+0x2c>)
     ad2:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     ad4:	4d08      	ldr	r5, [pc, #32]	; (af8 <rtc_count_enable+0x30>)
     ad6:	0020      	movs	r0, r4
     ad8:	47a8      	blx	r5
     ada:	2800      	cmp	r0, #0
     adc:	d1fb      	bne.n	ad6 <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
     ade:	8833      	ldrh	r3, [r6, #0]
     ae0:	2202      	movs	r2, #2
     ae2:	4313      	orrs	r3, r2
     ae4:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
     ae6:	4d04      	ldr	r5, [pc, #16]	; (af8 <rtc_count_enable+0x30>)
     ae8:	0020      	movs	r0, r4
     aea:	47a8      	blx	r5
     aec:	2800      	cmp	r0, #0
     aee:	d1fb      	bne.n	ae8 <rtc_count_enable+0x20>
		/* Wait for synchronization */
	}
}
     af0:	bd70      	pop	{r4, r5, r6, pc}
     af2:	46c0      	nop			; (mov r8, r8)
     af4:	e000e100 	.word	0xe000e100
     af8:	00000abd 	.word	0x00000abd

00000afc <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     afc:	b570      	push	{r4, r5, r6, lr}
     afe:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     b00:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     b02:	2104      	movs	r1, #4
     b04:	2380      	movs	r3, #128	; 0x80
     b06:	4a0a      	ldr	r2, [pc, #40]	; (b30 <rtc_count_disable+0x34>)
     b08:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     b0a:	4d0a      	ldr	r5, [pc, #40]	; (b34 <rtc_count_disable+0x38>)
     b0c:	0020      	movs	r0, r4
     b0e:	47a8      	blx	r5
     b10:	2800      	cmp	r0, #0
     b12:	d1fb      	bne.n	b0c <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
     b14:	4b08      	ldr	r3, [pc, #32]	; (b38 <rtc_count_disable+0x3c>)
     b16:	8133      	strh	r3, [r6, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
     b18:	81b3      	strh	r3, [r6, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
     b1a:	8833      	ldrh	r3, [r6, #0]
     b1c:	2202      	movs	r2, #2
     b1e:	4393      	bics	r3, r2
     b20:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
     b22:	4d04      	ldr	r5, [pc, #16]	; (b34 <rtc_count_disable+0x38>)
     b24:	0020      	movs	r0, r4
     b26:	47a8      	blx	r5
     b28:	2800      	cmp	r0, #0
     b2a:	d1fb      	bne.n	b24 <rtc_count_disable+0x28>
		/* Wait for synchronization */
	}
}
     b2c:	bd70      	pop	{r4, r5, r6, pc}
     b2e:	46c0      	nop			; (mov r8, r8)
     b30:	e000e100 	.word	0xe000e100
     b34:	00000abd 	.word	0x00000abd
     b38:	ffff81ff 	.word	0xffff81ff

00000b3c <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     b3c:	b570      	push	{r4, r5, r6, lr}
     b3e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     b40:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
     b42:	4b0a      	ldr	r3, [pc, #40]	; (b6c <rtc_count_reset+0x30>)
     b44:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     b46:	2300      	movs	r3, #0
     b48:	86a3      	strh	r3, [r4, #52]	; 0x34
	module->enabled_callback    = 0;
     b4a:	86e3      	strh	r3, [r4, #54]	; 0x36
#endif

	while (rtc_count_is_syncing(module)) {
     b4c:	4d08      	ldr	r5, [pc, #32]	; (b70 <rtc_count_reset+0x34>)
     b4e:	0020      	movs	r0, r4
     b50:	47a8      	blx	r5
     b52:	2800      	cmp	r0, #0
     b54:	d1fb      	bne.n	b4e <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
     b56:	8833      	ldrh	r3, [r6, #0]
     b58:	2201      	movs	r2, #1
     b5a:	4313      	orrs	r3, r2
     b5c:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
     b5e:	4d04      	ldr	r5, [pc, #16]	; (b70 <rtc_count_reset+0x34>)
     b60:	0020      	movs	r0, r4
     b62:	47a8      	blx	r5
     b64:	2800      	cmp	r0, #0
     b66:	d1fb      	bne.n	b60 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}
}
     b68:	bd70      	pop	{r4, r5, r6, pc}
     b6a:	46c0      	nop			; (mov r8, r8)
     b6c:	00000afd 	.word	0x00000afd
     b70:	00000abd 	.word	0x00000abd

00000b74 <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
     b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b76:	0004      	movs	r4, r0
     b78:	000e      	movs	r6, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     b7a:	6807      	ldr	r7, [r0, #0]

	while (rtc_count_is_syncing(module)) {
     b7c:	4d0c      	ldr	r5, [pc, #48]	; (bb0 <rtc_count_set_count+0x3c>)
     b7e:	0020      	movs	r0, r4
     b80:	47a8      	blx	r5
     b82:	2800      	cmp	r0, #0
     b84:	d1fb      	bne.n	b7e <rtc_count_set_count+0xa>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
     b86:	7923      	ldrb	r3, [r4, #4]
     b88:	2b00      	cmp	r3, #0
     b8a:	d009      	beq.n	ba0 <rtc_count_set_count+0x2c>

			break;

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     b8c:	2017      	movs	r0, #23
	switch(module->mode){
     b8e:	2b01      	cmp	r3, #1
     b90:	d105      	bne.n	b9e <rtc_count_set_count+0x2a>
			rtc_module->MODE0.COUNT.reg = count_value;
     b92:	61be      	str	r6, [r7, #24]
	}

	while (rtc_count_is_syncing(module)) {
     b94:	4d06      	ldr	r5, [pc, #24]	; (bb0 <rtc_count_set_count+0x3c>)
     b96:	0020      	movs	r0, r4
     b98:	47a8      	blx	r5
     b9a:	2800      	cmp	r0, #0
     b9c:	d1fb      	bne.n	b96 <rtc_count_set_count+0x22>
		/* Wait for synchronization */
	}
	return STATUS_OK;
}
     b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(count_value > 0xffff){
     ba0:	4b04      	ldr	r3, [pc, #16]	; (bb4 <rtc_count_set_count+0x40>)
				return STATUS_ERR_INVALID_ARG;
     ba2:	2017      	movs	r0, #23
			if(count_value > 0xffff){
     ba4:	429e      	cmp	r6, r3
     ba6:	d8fa      	bhi.n	b9e <rtc_count_set_count+0x2a>
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
     ba8:	b2b6      	uxth	r6, r6
     baa:	833e      	strh	r6, [r7, #24]
			break;
     bac:	e7f2      	b.n	b94 <rtc_count_set_count+0x20>
     bae:	46c0      	nop			; (mov r8, r8)
     bb0:	00000abd 	.word	0x00000abd
     bb4:	0000ffff 	.word	0x0000ffff

00000bb8 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     bb8:	b570      	push	{r4, r5, r6, lr}
     bba:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     bbc:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
     bbe:	4d08      	ldr	r5, [pc, #32]	; (be0 <rtc_count_get_count+0x28>)
     bc0:	0020      	movs	r0, r4
     bc2:	47a8      	blx	r5
     bc4:	2800      	cmp	r0, #0
     bc6:	d1fb      	bne.n	bc0 <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
     bc8:	7923      	ldrb	r3, [r4, #4]
     bca:	2b00      	cmp	r3, #0
     bcc:	d004      	beq.n	bd8 <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     bce:	2000      	movs	r0, #0
	switch (module->mode) {
     bd0:	2b01      	cmp	r3, #1
     bd2:	d100      	bne.n	bd6 <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
     bd4:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
     bd6:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     bd8:	8b30      	ldrh	r0, [r6, #24]
     bda:	b280      	uxth	r0, r0
			break;
     bdc:	e7fb      	b.n	bd6 <rtc_count_get_count+0x1e>
     bde:	46c0      	nop			; (mov r8, r8)
     be0:	00000abd 	.word	0x00000abd

00000be4 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     be4:	b5f0      	push	{r4, r5, r6, r7, lr}
     be6:	b083      	sub	sp, #12
     be8:	0004      	movs	r4, r0
     bea:	9101      	str	r1, [sp, #4]
     bec:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     bee:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
     bf0:	4f13      	ldr	r7, [pc, #76]	; (c40 <rtc_count_set_compare+0x5c>)
     bf2:	0020      	movs	r0, r4
     bf4:	47b8      	blx	r7
     bf6:	2800      	cmp	r0, #0
     bf8:	d1fb      	bne.n	bf2 <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     bfa:	7923      	ldrb	r3, [r4, #4]
     bfc:	2b00      	cmp	r3, #0
     bfe:	d00e      	beq.n	c1e <rtc_count_set_compare+0x3a>
     c00:	2b01      	cmp	r3, #1
     c02:	d119      	bne.n	c38 <rtc_count_set_compare+0x54>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
				return STATUS_ERR_INVALID_ARG;
     c04:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
     c06:	2d01      	cmp	r5, #1
     c08:	d817      	bhi.n	c3a <rtc_count_set_compare+0x56>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     c0a:	3508      	adds	r5, #8
     c0c:	00ad      	lsls	r5, r5, #2
     c0e:	9b01      	ldr	r3, [sp, #4]
     c10:	51ab      	str	r3, [r5, r6]
		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	while (rtc_count_is_syncing(module)) {
     c12:	4d0b      	ldr	r5, [pc, #44]	; (c40 <rtc_count_set_compare+0x5c>)
     c14:	0020      	movs	r0, r4
     c16:	47a8      	blx	r5
     c18:	2800      	cmp	r0, #0
     c1a:	d1fb      	bne.n	c14 <rtc_count_set_compare+0x30>
     c1c:	e00d      	b.n	c3a <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
     c1e:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     c20:	2d02      	cmp	r5, #2
     c22:	d80a      	bhi.n	c3a <rtc_count_set_compare+0x56>
			if (comp_value > 0xffff) {
     c24:	4b07      	ldr	r3, [pc, #28]	; (c44 <rtc_count_set_compare+0x60>)
     c26:	9a01      	ldr	r2, [sp, #4]
     c28:	429a      	cmp	r2, r3
     c2a:	d806      	bhi.n	c3a <rtc_count_set_compare+0x56>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     c2c:	466b      	mov	r3, sp
     c2e:	889b      	ldrh	r3, [r3, #4]
     c30:	3510      	adds	r5, #16
     c32:	006d      	lsls	r5, r5, #1
     c34:	53ab      	strh	r3, [r5, r6]
			break;
     c36:	e7ec      	b.n	c12 <rtc_count_set_compare+0x2e>
			return STATUS_ERR_BAD_FORMAT;
     c38:	201a      	movs	r0, #26
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
}
     c3a:	b003      	add	sp, #12
     c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c3e:	46c0      	nop			; (mov r8, r8)
     c40:	00000abd 	.word	0x00000abd
     c44:	0000ffff 	.word	0x0000ffff

00000c48 <rtc_count_init>:
{
     c48:	b570      	push	{r4, r5, r6, lr}
     c4a:	0004      	movs	r4, r0
     c4c:	0015      	movs	r5, r2
	module->hw = hw;
     c4e:	6001      	str	r1, [r0, #0]
			MCLK->APBAMASK.reg |= mask;
     c50:	4a1f      	ldr	r2, [pc, #124]	; (cd0 <rtc_count_init+0x88>)
     c52:	6951      	ldr	r1, [r2, #20]
     c54:	2380      	movs	r3, #128	; 0x80
     c56:	005b      	lsls	r3, r3, #1
     c58:	430b      	orrs	r3, r1
     c5a:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
     c5c:	2205      	movs	r2, #5
     c5e:	4b1d      	ldr	r3, [pc, #116]	; (cd4 <rtc_count_init+0x8c>)
     c60:	611a      	str	r2, [r3, #16]
	rtc_count_reset(module);
     c62:	4b1d      	ldr	r3, [pc, #116]	; (cd8 <rtc_count_init+0x90>)
     c64:	4798      	blx	r3
	module->mode                = config->mode;
     c66:	78ab      	ldrb	r3, [r5, #2]
     c68:	7123      	strb	r3, [r4, #4]
	_rtc_instance[0] = module;
     c6a:	4b1c      	ldr	r3, [pc, #112]	; (cdc <rtc_count_init+0x94>)
     c6c:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
     c6e:	6822      	ldr	r2, [r4, #0]
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
     c70:	792b      	ldrb	r3, [r5, #4]
     c72:	03db      	lsls	r3, r3, #15
				    | config->prescaler;
     c74:	8829      	ldrh	r1, [r5, #0]
     c76:	430b      	orrs	r3, r1
     c78:	b29b      	uxth	r3, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
     c7a:	8013      	strh	r3, [r2, #0]
	switch (config->mode) {
     c7c:	78ab      	ldrb	r3, [r5, #2]
     c7e:	2b00      	cmp	r3, #0
     c80:	d013      	beq.n	caa <rtc_count_init+0x62>
			return STATUS_ERR_INVALID_ARG;
     c82:	2017      	movs	r0, #23
	switch (config->mode) {
     c84:	2b01      	cmp	r3, #1
     c86:	d10f      	bne.n	ca8 <rtc_count_init+0x60>
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
     c88:	8813      	ldrh	r3, [r2, #0]
     c8a:	b29b      	uxth	r3, r3
     c8c:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
     c8e:	78eb      	ldrb	r3, [r5, #3]
     c90:	2b00      	cmp	r3, #0
     c92:	d003      	beq.n	c9c <rtc_count_init+0x54>
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
     c94:	8813      	ldrh	r3, [r2, #0]
     c96:	2180      	movs	r1, #128	; 0x80
     c98:	430b      	orrs	r3, r1
     c9a:	8013      	strh	r3, [r2, #0]
				rtc_count_set_compare(module, config->compare_values[i],
     c9c:	68a9      	ldr	r1, [r5, #8]
     c9e:	2200      	movs	r2, #0
     ca0:	0020      	movs	r0, r4
     ca2:	4b0f      	ldr	r3, [pc, #60]	; (ce0 <rtc_count_init+0x98>)
     ca4:	4798      	blx	r3
	return STATUS_OK;
     ca6:	2000      	movs	r0, #0
}
     ca8:	bd70      	pop	{r4, r5, r6, pc}
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
     caa:	8813      	ldrh	r3, [r2, #0]
     cac:	2104      	movs	r1, #4
     cae:	430b      	orrs	r3, r1
     cb0:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
     cb2:	78eb      	ldrb	r3, [r5, #3]
				return STATUS_ERR_INVALID_ARG;
     cb4:	2017      	movs	r0, #23
			if (config->clear_on_match) {
     cb6:	2b00      	cmp	r3, #0
     cb8:	d1f6      	bne.n	ca8 <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
     cba:	2200      	movs	r2, #0
     cbc:	68a9      	ldr	r1, [r5, #8]
     cbe:	0020      	movs	r0, r4
     cc0:	4e07      	ldr	r6, [pc, #28]	; (ce0 <rtc_count_init+0x98>)
     cc2:	47b0      	blx	r6
     cc4:	68e9      	ldr	r1, [r5, #12]
     cc6:	2201      	movs	r2, #1
     cc8:	0020      	movs	r0, r4
     cca:	47b0      	blx	r6
	return STATUS_OK;
     ccc:	2000      	movs	r0, #0
     cce:	e7eb      	b.n	ca8 <rtc_count_init+0x60>
     cd0:	40000400 	.word	0x40000400
     cd4:	40001000 	.word	0x40001000
     cd8:	00000b3d 	.word	0x00000b3d
     cdc:	2000108c 	.word	0x2000108c
     ce0:	00000be5 	.word	0x00000be5

00000ce4 <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW
     ce4:	2a0a      	cmp	r2, #10
     ce6:	d009      	beq.n	cfc <rtc_count_register_callback+0x18>
#ifdef FEATURE_RTC_TAMPER_DETECTION
		|| callback_type == RTC_COUNT_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
     ce8:	2a07      	cmp	r2, #7
     cea:	d907      	bls.n	cfc <rtc_count_register_callback+0x18>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
     cec:	7903      	ldrb	r3, [r0, #4]
     cee:	2b00      	cmp	r3, #0
     cf0:	d010      	beq.n	d14 <rtc_count_register_callback+0x30>
     cf2:	2b01      	cmp	r3, #1
     cf4:	d112      	bne.n	d1c <rtc_count_register_callback+0x38>
     cf6:	3316      	adds	r3, #22
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > (RTC_COMP32_NUM + RTC_PER_NUM)) {
     cf8:	2a09      	cmp	r2, #9
     cfa:	d809      	bhi.n	d10 <rtc_count_register_callback+0x2c>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
     cfc:	1c93      	adds	r3, r2, #2
     cfe:	009b      	lsls	r3, r3, #2
     d00:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
     d02:	8e83      	ldrh	r3, [r0, #52]	; 0x34
     d04:	2101      	movs	r1, #1
     d06:	4091      	lsls	r1, r2
     d08:	430b      	orrs	r3, r1
     d0a:	b29b      	uxth	r3, r3
     d0c:	8683      	strh	r3, [r0, #52]	; 0x34
     d0e:	2300      	movs	r3, #0
	}

	return status;
}
     d10:	0018      	movs	r0, r3
     d12:	4770      	bx	lr
     d14:	2317      	movs	r3, #23
			if (callback_type > (RTC_NUM_OF_COMP16 + RTC_PER_NUM)) {
     d16:	2a0a      	cmp	r2, #10
     d18:	d8fa      	bhi.n	d10 <rtc_count_register_callback+0x2c>
     d1a:	e7ef      	b.n	cfc <rtc_count_register_callback+0x18>
			status = STATUS_ERR_INVALID_ARG;
     d1c:	2317      	movs	r3, #23
     d1e:	e7f7      	b.n	d10 <rtc_count_register_callback+0x2c>

00000d20 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
     d20:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     d22:	6802      	ldr	r2, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     d24:	290a      	cmp	r1, #10
     d26:	d011      	beq.n	d4c <rtc_count_enable_callback+0x2c>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
     d28:	2907      	cmp	r1, #7
     d2a:	d912      	bls.n	d52 <rtc_count_enable_callback+0x32>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
	}else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
     d2c:	2380      	movs	r3, #128	; 0x80
     d2e:	005b      	lsls	r3, r3, #1
     d30:	000c      	movs	r4, r1
     d32:	3c08      	subs	r4, #8
     d34:	40a3      	lsls	r3, r4
     d36:	24c0      	movs	r4, #192	; 0xc0
     d38:	00a4      	lsls	r4, r4, #2
     d3a:	4023      	ands	r3, r4
     d3c:	8153      	strh	r3, [r2, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     d3e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
     d40:	2201      	movs	r2, #1
     d42:	408a      	lsls	r2, r1
     d44:	4313      	orrs	r3, r2
     d46:	b29b      	uxth	r3, r3
     d48:	86c3      	strh	r3, [r0, #54]	; 0x36
}
     d4a:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
     d4c:	4b04      	ldr	r3, [pc, #16]	; (d60 <rtc_count_enable_callback+0x40>)
     d4e:	8153      	strh	r3, [r2, #10]
     d50:	e7f5      	b.n	d3e <rtc_count_enable_callback+0x1e>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
     d52:	2401      	movs	r4, #1
     d54:	408c      	lsls	r4, r1
     d56:	23ff      	movs	r3, #255	; 0xff
     d58:	4023      	ands	r3, r4
     d5a:	8153      	strh	r3, [r2, #10]
     d5c:	e7ef      	b.n	d3e <rtc_count_enable_callback+0x1e>
     d5e:	46c0      	nop			; (mov r8, r8)
     d60:	ffff8000 	.word	0xffff8000

00000d64 <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
     d64:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     d66:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     d68:	290a      	cmp	r1, #10
     d6a:	d010      	beq.n	d8e <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
     d6c:	2907      	cmp	r1, #7
     d6e:	d911      	bls.n	d94 <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
     d70:	2380      	movs	r3, #128	; 0x80
     d72:	005b      	lsls	r3, r3, #1
     d74:	000c      	movs	r4, r1
     d76:	3c08      	subs	r4, #8
     d78:	40a3      	lsls	r3, r4
     d7a:	24c0      	movs	r4, #192	; 0xc0
     d7c:	00a4      	lsls	r4, r4, #2
     d7e:	4023      	ands	r3, r4
     d80:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
     d82:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
     d84:	2201      	movs	r2, #1
     d86:	408a      	lsls	r2, r1
     d88:	4393      	bics	r3, r2
     d8a:	86c3      	strh	r3, [r0, #54]	; 0x36
}
     d8c:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
     d8e:	4b04      	ldr	r3, [pc, #16]	; (da0 <rtc_count_disable_callback+0x3c>)
     d90:	8113      	strh	r3, [r2, #8]
     d92:	e7f6      	b.n	d82 <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
     d94:	2401      	movs	r4, #1
     d96:	408c      	lsls	r4, r1
     d98:	23ff      	movs	r3, #255	; 0xff
     d9a:	4023      	ands	r3, r4
     d9c:	8113      	strh	r3, [r2, #8]
     d9e:	e7f0      	b.n	d82 <rtc_count_disable_callback+0x1e>
     da0:	ffff8000 	.word	0xffff8000

00000da4 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     da6:	46de      	mov	lr, fp
     da8:	4657      	mov	r7, sl
     daa:	464e      	mov	r6, r9
     dac:	4645      	mov	r5, r8
     dae:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
     db0:	4b2b      	ldr	r3, [pc, #172]	; (e60 <RTC_Handler+0xbc>)
     db2:	681b      	ldr	r3, [r3, #0]
     db4:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
     db6:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
     db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
     dba:	4652      	mov	r2, sl
     dbc:	8e92      	ldrh	r2, [r2, #52]	; 0x34
     dbe:	401a      	ands	r2, r3
     dc0:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     dc2:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     dc4:	8973      	ldrh	r3, [r6, #10]
     dc6:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     dc8:	b21a      	sxth	r2, r3
     dca:	2a00      	cmp	r2, #0
     dcc:	db08      	blt.n	de0 <RTC_Handler+0x3c>
     dce:	27ff      	movs	r7, #255	; 0xff
     dd0:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
     dd2:	d02a      	beq.n	e2a <RTC_Handler+0x86>
     dd4:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
     dd6:	2301      	movs	r3, #1
     dd8:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
     dda:	33fe      	adds	r3, #254	; 0xfe
     ddc:	469b      	mov	fp, r3
     dde:	e014      	b.n	e0a <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     de0:	4643      	mov	r3, r8
     de2:	055b      	lsls	r3, r3, #21
     de4:	d407      	bmi.n	df6 <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     de6:	4b1f      	ldr	r3, [pc, #124]	; (e64 <RTC_Handler+0xc0>)
     de8:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
     dea:	bc3c      	pop	{r2, r3, r4, r5}
     dec:	4690      	mov	r8, r2
     dee:	4699      	mov	r9, r3
     df0:	46a2      	mov	sl, r4
     df2:	46ab      	mov	fp, r5
     df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     df6:	4653      	mov	r3, sl
     df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     dfa:	4798      	blx	r3
     dfc:	e7f3      	b.n	de6 <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
     dfe:	465b      	mov	r3, fp
     e00:	401d      	ands	r5, r3
     e02:	81b5      	strh	r5, [r6, #12]
     e04:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
     e06:	2c08      	cmp	r4, #8
     e08:	d0ef      	beq.n	dea <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
     e0a:	0023      	movs	r3, r4
     e0c:	464d      	mov	r5, r9
     e0e:	40a5      	lsls	r5, r4
     e10:	422f      	tst	r7, r5
     e12:	d0f4      	beq.n	dfe <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
     e14:	4642      	mov	r2, r8
     e16:	4122      	asrs	r2, r4
     e18:	4649      	mov	r1, r9
     e1a:	4211      	tst	r1, r2
     e1c:	d0ef      	beq.n	dfe <RTC_Handler+0x5a>
				module->callbacks[i]();
     e1e:	3302      	adds	r3, #2
     e20:	009b      	lsls	r3, r3, #2
     e22:	4652      	mov	r2, sl
     e24:	589b      	ldr	r3, [r3, r2]
     e26:	4798      	blx	r3
     e28:	e7e9      	b.n	dfe <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     e2a:	05da      	lsls	r2, r3, #23
     e2c:	d50a      	bpl.n	e44 <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     e2e:	4643      	mov	r3, r8
     e30:	05db      	lsls	r3, r3, #23
     e32:	d403      	bmi.n	e3c <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     e34:	2380      	movs	r3, #128	; 0x80
     e36:	005b      	lsls	r3, r3, #1
     e38:	81b3      	strh	r3, [r6, #12]
     e3a:	e7d6      	b.n	dea <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     e3c:	4653      	mov	r3, sl
     e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     e40:	4798      	blx	r3
     e42:	e7f7      	b.n	e34 <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     e44:	059b      	lsls	r3, r3, #22
     e46:	d5d0      	bpl.n	dea <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     e48:	4643      	mov	r3, r8
     e4a:	059b      	lsls	r3, r3, #22
     e4c:	d403      	bmi.n	e56 <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     e4e:	2380      	movs	r3, #128	; 0x80
     e50:	009b      	lsls	r3, r3, #2
     e52:	81b3      	strh	r3, [r6, #12]
}
     e54:	e7c9      	b.n	dea <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     e56:	4653      	mov	r3, sl
     e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     e5a:	4798      	blx	r3
     e5c:	e7f7      	b.n	e4e <RTC_Handler+0xaa>
     e5e:	46c0      	nop			; (mov r8, r8)
     e60:	2000108c 	.word	0x2000108c
     e64:	ffff8000 	.word	0xffff8000

00000e68 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     e68:	b5f0      	push	{r4, r5, r6, r7, lr}
     e6a:	46de      	mov	lr, fp
     e6c:	4657      	mov	r7, sl
     e6e:	464e      	mov	r6, r9
     e70:	4645      	mov	r5, r8
     e72:	b5e0      	push	{r5, r6, r7, lr}
     e74:	b087      	sub	sp, #28
     e76:	4680      	mov	r8, r0
     e78:	9104      	str	r1, [sp, #16]
     e7a:	0016      	movs	r6, r2
     e7c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     e7e:	2200      	movs	r2, #0
     e80:	2300      	movs	r3, #0
     e82:	2100      	movs	r1, #0
     e84:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     e86:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     e88:	2001      	movs	r0, #1
     e8a:	0021      	movs	r1, r4
     e8c:	9600      	str	r6, [sp, #0]
     e8e:	9701      	str	r7, [sp, #4]
     e90:	465c      	mov	r4, fp
     e92:	9403      	str	r4, [sp, #12]
     e94:	4644      	mov	r4, r8
     e96:	9405      	str	r4, [sp, #20]
     e98:	e013      	b.n	ec2 <long_division+0x5a>
     e9a:	2420      	movs	r4, #32
     e9c:	1a64      	subs	r4, r4, r1
     e9e:	0005      	movs	r5, r0
     ea0:	40e5      	lsrs	r5, r4
     ea2:	46a8      	mov	r8, r5
     ea4:	e014      	b.n	ed0 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     ea6:	9c00      	ldr	r4, [sp, #0]
     ea8:	9d01      	ldr	r5, [sp, #4]
     eaa:	1b12      	subs	r2, r2, r4
     eac:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     eae:	465c      	mov	r4, fp
     eb0:	464d      	mov	r5, r9
     eb2:	432c      	orrs	r4, r5
     eb4:	46a3      	mov	fp, r4
     eb6:	9c03      	ldr	r4, [sp, #12]
     eb8:	4645      	mov	r5, r8
     eba:	432c      	orrs	r4, r5
     ebc:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     ebe:	3901      	subs	r1, #1
     ec0:	d325      	bcc.n	f0e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     ec2:	2420      	movs	r4, #32
     ec4:	4264      	negs	r4, r4
     ec6:	190c      	adds	r4, r1, r4
     ec8:	d4e7      	bmi.n	e9a <long_division+0x32>
     eca:	0005      	movs	r5, r0
     ecc:	40a5      	lsls	r5, r4
     ece:	46a8      	mov	r8, r5
     ed0:	0004      	movs	r4, r0
     ed2:	408c      	lsls	r4, r1
     ed4:	46a1      	mov	r9, r4
		r = r << 1;
     ed6:	1892      	adds	r2, r2, r2
     ed8:	415b      	adcs	r3, r3
     eda:	0014      	movs	r4, r2
     edc:	001d      	movs	r5, r3
		if (n & bit_shift) {
     ede:	9e05      	ldr	r6, [sp, #20]
     ee0:	464f      	mov	r7, r9
     ee2:	403e      	ands	r6, r7
     ee4:	46b4      	mov	ip, r6
     ee6:	9e04      	ldr	r6, [sp, #16]
     ee8:	4647      	mov	r7, r8
     eea:	403e      	ands	r6, r7
     eec:	46b2      	mov	sl, r6
     eee:	4666      	mov	r6, ip
     ef0:	4657      	mov	r7, sl
     ef2:	433e      	orrs	r6, r7
     ef4:	d003      	beq.n	efe <long_division+0x96>
			r |= 0x01;
     ef6:	0006      	movs	r6, r0
     ef8:	4326      	orrs	r6, r4
     efa:	0032      	movs	r2, r6
     efc:	002b      	movs	r3, r5
		if (r >= d) {
     efe:	9c00      	ldr	r4, [sp, #0]
     f00:	9d01      	ldr	r5, [sp, #4]
     f02:	429d      	cmp	r5, r3
     f04:	d8db      	bhi.n	ebe <long_division+0x56>
     f06:	d1ce      	bne.n	ea6 <long_division+0x3e>
     f08:	4294      	cmp	r4, r2
     f0a:	d8d8      	bhi.n	ebe <long_division+0x56>
     f0c:	e7cb      	b.n	ea6 <long_division+0x3e>
     f0e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     f10:	4658      	mov	r0, fp
     f12:	0019      	movs	r1, r3
     f14:	b007      	add	sp, #28
     f16:	bc3c      	pop	{r2, r3, r4, r5}
     f18:	4690      	mov	r8, r2
     f1a:	4699      	mov	r9, r3
     f1c:	46a2      	mov	sl, r4
     f1e:	46ab      	mov	fp, r5
     f20:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000f22 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     f22:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     f24:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f26:	2340      	movs	r3, #64	; 0x40
     f28:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     f2a:	4281      	cmp	r1, r0
     f2c:	d202      	bcs.n	f34 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     f2e:	0018      	movs	r0, r3
     f30:	bd10      	pop	{r4, pc}
		baud_calculated++;
     f32:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     f34:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     f36:	1c63      	adds	r3, r4, #1
     f38:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     f3a:	4288      	cmp	r0, r1
     f3c:	d9f9      	bls.n	f32 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f3e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     f40:	2cff      	cmp	r4, #255	; 0xff
     f42:	d8f4      	bhi.n	f2e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     f44:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     f46:	2300      	movs	r3, #0
     f48:	e7f1      	b.n	f2e <_sercom_get_sync_baud_val+0xc>
	...

00000f4c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f4e:	b083      	sub	sp, #12
     f50:	000f      	movs	r7, r1
     f52:	0016      	movs	r6, r2
     f54:	aa08      	add	r2, sp, #32
     f56:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     f58:	0004      	movs	r4, r0
     f5a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f5c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     f5e:	42bc      	cmp	r4, r7
     f60:	d902      	bls.n	f68 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     f62:	0010      	movs	r0, r2
     f64:	b003      	add	sp, #12
     f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     f68:	2b00      	cmp	r3, #0
     f6a:	d114      	bne.n	f96 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     f6c:	0002      	movs	r2, r0
     f6e:	0008      	movs	r0, r1
     f70:	2100      	movs	r1, #0
     f72:	4c19      	ldr	r4, [pc, #100]	; (fd8 <_sercom_get_async_baud_val+0x8c>)
     f74:	47a0      	blx	r4
     f76:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     f78:	003a      	movs	r2, r7
     f7a:	2300      	movs	r3, #0
     f7c:	2000      	movs	r0, #0
     f7e:	4c17      	ldr	r4, [pc, #92]	; (fdc <_sercom_get_async_baud_val+0x90>)
     f80:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     f82:	2200      	movs	r2, #0
     f84:	2301      	movs	r3, #1
     f86:	1a12      	subs	r2, r2, r0
     f88:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     f8a:	0c12      	lsrs	r2, r2, #16
     f8c:	041b      	lsls	r3, r3, #16
     f8e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     f90:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     f92:	2200      	movs	r2, #0
     f94:	e7e5      	b.n	f62 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     f96:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     f98:	2b01      	cmp	r3, #1
     f9a:	d1f9      	bne.n	f90 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     f9c:	000a      	movs	r2, r1
     f9e:	2300      	movs	r3, #0
     fa0:	2100      	movs	r1, #0
     fa2:	4c0d      	ldr	r4, [pc, #52]	; (fd8 <_sercom_get_async_baud_val+0x8c>)
     fa4:	47a0      	blx	r4
     fa6:	0002      	movs	r2, r0
     fa8:	000b      	movs	r3, r1
     faa:	9200      	str	r2, [sp, #0]
     fac:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     fae:	0038      	movs	r0, r7
     fb0:	2100      	movs	r1, #0
     fb2:	4c0a      	ldr	r4, [pc, #40]	; (fdc <_sercom_get_async_baud_val+0x90>)
     fb4:	47a0      	blx	r4
     fb6:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     fb8:	2380      	movs	r3, #128	; 0x80
     fba:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     fbc:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     fbe:	4298      	cmp	r0, r3
     fc0:	d8cf      	bhi.n	f62 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     fc2:	0f79      	lsrs	r1, r7, #29
     fc4:	00f8      	lsls	r0, r7, #3
     fc6:	9a00      	ldr	r2, [sp, #0]
     fc8:	9b01      	ldr	r3, [sp, #4]
     fca:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     fcc:	00ea      	lsls	r2, r5, #3
     fce:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     fd0:	b2d2      	uxtb	r2, r2
     fd2:	0352      	lsls	r2, r2, #13
     fd4:	432a      	orrs	r2, r5
     fd6:	e7db      	b.n	f90 <_sercom_get_async_baud_val+0x44>
     fd8:	000111ad 	.word	0x000111ad
     fdc:	00000e69 	.word	0x00000e69

00000fe0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     fe0:	b510      	push	{r4, lr}
     fe2:	b082      	sub	sp, #8
     fe4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     fe6:	4b0e      	ldr	r3, [pc, #56]	; (1020 <sercom_set_gclk_generator+0x40>)
     fe8:	781b      	ldrb	r3, [r3, #0]
     fea:	2b00      	cmp	r3, #0
     fec:	d007      	beq.n	ffe <sercom_set_gclk_generator+0x1e>
     fee:	2900      	cmp	r1, #0
     ff0:	d105      	bne.n	ffe <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     ff2:	4b0b      	ldr	r3, [pc, #44]	; (1020 <sercom_set_gclk_generator+0x40>)
     ff4:	785b      	ldrb	r3, [r3, #1]
     ff6:	4283      	cmp	r3, r0
     ff8:	d010      	beq.n	101c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     ffa:	201d      	movs	r0, #29
     ffc:	e00c      	b.n	1018 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     ffe:	a901      	add	r1, sp, #4
    1000:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1002:	2011      	movs	r0, #17
    1004:	4b07      	ldr	r3, [pc, #28]	; (1024 <sercom_set_gclk_generator+0x44>)
    1006:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1008:	2011      	movs	r0, #17
    100a:	4b07      	ldr	r3, [pc, #28]	; (1028 <sercom_set_gclk_generator+0x48>)
    100c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    100e:	4b04      	ldr	r3, [pc, #16]	; (1020 <sercom_set_gclk_generator+0x40>)
    1010:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1012:	2201      	movs	r2, #1
    1014:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1016:	2000      	movs	r0, #0
}
    1018:	b002      	add	sp, #8
    101a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    101c:	2000      	movs	r0, #0
    101e:	e7fb      	b.n	1018 <sercom_set_gclk_generator+0x38>
    1020:	200009e4 	.word	0x200009e4
    1024:	000023c9 	.word	0x000023c9
    1028:	00002359 	.word	0x00002359

0000102c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    102c:	4b3c      	ldr	r3, [pc, #240]	; (1120 <_sercom_get_default_pad+0xf4>)
    102e:	4298      	cmp	r0, r3
    1030:	d032      	beq.n	1098 <_sercom_get_default_pad+0x6c>
    1032:	d90a      	bls.n	104a <_sercom_get_default_pad+0x1e>
    1034:	4b3b      	ldr	r3, [pc, #236]	; (1124 <_sercom_get_default_pad+0xf8>)
    1036:	4298      	cmp	r0, r3
    1038:	d04e      	beq.n	10d8 <_sercom_get_default_pad+0xac>
    103a:	4b3b      	ldr	r3, [pc, #236]	; (1128 <_sercom_get_default_pad+0xfc>)
    103c:	4298      	cmp	r0, r3
    103e:	d055      	beq.n	10ec <_sercom_get_default_pad+0xc0>
    1040:	4b3a      	ldr	r3, [pc, #232]	; (112c <_sercom_get_default_pad+0x100>)
    1042:	4298      	cmp	r0, r3
    1044:	d038      	beq.n	10b8 <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1046:	2000      	movs	r0, #0
}
    1048:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    104a:	2384      	movs	r3, #132	; 0x84
    104c:	05db      	lsls	r3, r3, #23
    104e:	4298      	cmp	r0, r3
    1050:	d00c      	beq.n	106c <_sercom_get_default_pad+0x40>
    1052:	4b37      	ldr	r3, [pc, #220]	; (1130 <_sercom_get_default_pad+0x104>)
    1054:	4298      	cmp	r0, r3
    1056:	d1f6      	bne.n	1046 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1058:	2901      	cmp	r1, #1
    105a:	d017      	beq.n	108c <_sercom_get_default_pad+0x60>
    105c:	2900      	cmp	r1, #0
    105e:	d057      	beq.n	1110 <_sercom_get_default_pad+0xe4>
    1060:	2902      	cmp	r1, #2
    1062:	d015      	beq.n	1090 <_sercom_get_default_pad+0x64>
    1064:	2903      	cmp	r1, #3
    1066:	d015      	beq.n	1094 <_sercom_get_default_pad+0x68>
	return 0;
    1068:	2000      	movs	r0, #0
    106a:	e7ed      	b.n	1048 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    106c:	2901      	cmp	r1, #1
    106e:	d007      	beq.n	1080 <_sercom_get_default_pad+0x54>
    1070:	2900      	cmp	r1, #0
    1072:	d04b      	beq.n	110c <_sercom_get_default_pad+0xe0>
    1074:	2902      	cmp	r1, #2
    1076:	d005      	beq.n	1084 <_sercom_get_default_pad+0x58>
    1078:	2903      	cmp	r1, #3
    107a:	d005      	beq.n	1088 <_sercom_get_default_pad+0x5c>
	return 0;
    107c:	2000      	movs	r0, #0
    107e:	e7e3      	b.n	1048 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1080:	482c      	ldr	r0, [pc, #176]	; (1134 <_sercom_get_default_pad+0x108>)
    1082:	e7e1      	b.n	1048 <_sercom_get_default_pad+0x1c>
    1084:	482c      	ldr	r0, [pc, #176]	; (1138 <_sercom_get_default_pad+0x10c>)
    1086:	e7df      	b.n	1048 <_sercom_get_default_pad+0x1c>
    1088:	482c      	ldr	r0, [pc, #176]	; (113c <_sercom_get_default_pad+0x110>)
    108a:	e7dd      	b.n	1048 <_sercom_get_default_pad+0x1c>
    108c:	482c      	ldr	r0, [pc, #176]	; (1140 <_sercom_get_default_pad+0x114>)
    108e:	e7db      	b.n	1048 <_sercom_get_default_pad+0x1c>
    1090:	482c      	ldr	r0, [pc, #176]	; (1144 <_sercom_get_default_pad+0x118>)
    1092:	e7d9      	b.n	1048 <_sercom_get_default_pad+0x1c>
    1094:	482c      	ldr	r0, [pc, #176]	; (1148 <_sercom_get_default_pad+0x11c>)
    1096:	e7d7      	b.n	1048 <_sercom_get_default_pad+0x1c>
    1098:	2901      	cmp	r1, #1
    109a:	d007      	beq.n	10ac <_sercom_get_default_pad+0x80>
    109c:	2900      	cmp	r1, #0
    109e:	d039      	beq.n	1114 <_sercom_get_default_pad+0xe8>
    10a0:	2902      	cmp	r1, #2
    10a2:	d005      	beq.n	10b0 <_sercom_get_default_pad+0x84>
    10a4:	2903      	cmp	r1, #3
    10a6:	d005      	beq.n	10b4 <_sercom_get_default_pad+0x88>
	return 0;
    10a8:	2000      	movs	r0, #0
    10aa:	e7cd      	b.n	1048 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    10ac:	4827      	ldr	r0, [pc, #156]	; (114c <_sercom_get_default_pad+0x120>)
    10ae:	e7cb      	b.n	1048 <_sercom_get_default_pad+0x1c>
    10b0:	4827      	ldr	r0, [pc, #156]	; (1150 <_sercom_get_default_pad+0x124>)
    10b2:	e7c9      	b.n	1048 <_sercom_get_default_pad+0x1c>
    10b4:	4827      	ldr	r0, [pc, #156]	; (1154 <_sercom_get_default_pad+0x128>)
    10b6:	e7c7      	b.n	1048 <_sercom_get_default_pad+0x1c>
    10b8:	2901      	cmp	r1, #1
    10ba:	d007      	beq.n	10cc <_sercom_get_default_pad+0xa0>
    10bc:	2900      	cmp	r1, #0
    10be:	d02b      	beq.n	1118 <_sercom_get_default_pad+0xec>
    10c0:	2902      	cmp	r1, #2
    10c2:	d005      	beq.n	10d0 <_sercom_get_default_pad+0xa4>
    10c4:	2903      	cmp	r1, #3
    10c6:	d005      	beq.n	10d4 <_sercom_get_default_pad+0xa8>
	return 0;
    10c8:	2000      	movs	r0, #0
    10ca:	e7bd      	b.n	1048 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    10cc:	4822      	ldr	r0, [pc, #136]	; (1158 <_sercom_get_default_pad+0x12c>)
    10ce:	e7bb      	b.n	1048 <_sercom_get_default_pad+0x1c>
    10d0:	4822      	ldr	r0, [pc, #136]	; (115c <_sercom_get_default_pad+0x130>)
    10d2:	e7b9      	b.n	1048 <_sercom_get_default_pad+0x1c>
    10d4:	4822      	ldr	r0, [pc, #136]	; (1160 <_sercom_get_default_pad+0x134>)
    10d6:	e7b7      	b.n	1048 <_sercom_get_default_pad+0x1c>
    10d8:	2902      	cmp	r1, #2
    10da:	d003      	beq.n	10e4 <_sercom_get_default_pad+0xb8>
    10dc:	2903      	cmp	r1, #3
    10de:	d003      	beq.n	10e8 <_sercom_get_default_pad+0xbc>
    10e0:	2000      	movs	r0, #0
    10e2:	e7b1      	b.n	1048 <_sercom_get_default_pad+0x1c>
    10e4:	481f      	ldr	r0, [pc, #124]	; (1164 <_sercom_get_default_pad+0x138>)
    10e6:	e7af      	b.n	1048 <_sercom_get_default_pad+0x1c>
    10e8:	481f      	ldr	r0, [pc, #124]	; (1168 <_sercom_get_default_pad+0x13c>)
    10ea:	e7ad      	b.n	1048 <_sercom_get_default_pad+0x1c>
    10ec:	2901      	cmp	r1, #1
    10ee:	d007      	beq.n	1100 <_sercom_get_default_pad+0xd4>
    10f0:	2900      	cmp	r1, #0
    10f2:	d013      	beq.n	111c <_sercom_get_default_pad+0xf0>
    10f4:	2902      	cmp	r1, #2
    10f6:	d005      	beq.n	1104 <_sercom_get_default_pad+0xd8>
    10f8:	2903      	cmp	r1, #3
    10fa:	d005      	beq.n	1108 <_sercom_get_default_pad+0xdc>
	return 0;
    10fc:	2000      	movs	r0, #0
    10fe:	e7a3      	b.n	1048 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1100:	481a      	ldr	r0, [pc, #104]	; (116c <_sercom_get_default_pad+0x140>)
    1102:	e7a1      	b.n	1048 <_sercom_get_default_pad+0x1c>
    1104:	481a      	ldr	r0, [pc, #104]	; (1170 <_sercom_get_default_pad+0x144>)
    1106:	e79f      	b.n	1048 <_sercom_get_default_pad+0x1c>
    1108:	481a      	ldr	r0, [pc, #104]	; (1174 <_sercom_get_default_pad+0x148>)
    110a:	e79d      	b.n	1048 <_sercom_get_default_pad+0x1c>
    110c:	481a      	ldr	r0, [pc, #104]	; (1178 <_sercom_get_default_pad+0x14c>)
    110e:	e79b      	b.n	1048 <_sercom_get_default_pad+0x1c>
    1110:	2003      	movs	r0, #3
    1112:	e799      	b.n	1048 <_sercom_get_default_pad+0x1c>
    1114:	4819      	ldr	r0, [pc, #100]	; (117c <_sercom_get_default_pad+0x150>)
    1116:	e797      	b.n	1048 <_sercom_get_default_pad+0x1c>
    1118:	4819      	ldr	r0, [pc, #100]	; (1180 <_sercom_get_default_pad+0x154>)
    111a:	e795      	b.n	1048 <_sercom_get_default_pad+0x1c>
    111c:	4819      	ldr	r0, [pc, #100]	; (1184 <_sercom_get_default_pad+0x158>)
    111e:	e793      	b.n	1048 <_sercom_get_default_pad+0x1c>
    1120:	42000800 	.word	0x42000800
    1124:	42001000 	.word	0x42001000
    1128:	43000400 	.word	0x43000400
    112c:	42000c00 	.word	0x42000c00
    1130:	42000400 	.word	0x42000400
    1134:	00050003 	.word	0x00050003
    1138:	00060003 	.word	0x00060003
    113c:	00070003 	.word	0x00070003
    1140:	00010003 	.word	0x00010003
    1144:	001e0003 	.word	0x001e0003
    1148:	001f0003 	.word	0x001f0003
    114c:	00090003 	.word	0x00090003
    1150:	000a0003 	.word	0x000a0003
    1154:	000b0003 	.word	0x000b0003
    1158:	00110003 	.word	0x00110003
    115c:	00120003 	.word	0x00120003
    1160:	00130003 	.word	0x00130003
    1164:	000e0003 	.word	0x000e0003
    1168:	000f0003 	.word	0x000f0003
    116c:	00170003 	.word	0x00170003
    1170:	00180003 	.word	0x00180003
    1174:	00190003 	.word	0x00190003
    1178:	00040003 	.word	0x00040003
    117c:	00080003 	.word	0x00080003
    1180:	00100003 	.word	0x00100003
    1184:	00160003 	.word	0x00160003

00001188 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1188:	b530      	push	{r4, r5, lr}
    118a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    118c:	4b0b      	ldr	r3, [pc, #44]	; (11bc <_sercom_get_sercom_inst_index+0x34>)
    118e:	466a      	mov	r2, sp
    1190:	cb32      	ldmia	r3!, {r1, r4, r5}
    1192:	c232      	stmia	r2!, {r1, r4, r5}
    1194:	cb32      	ldmia	r3!, {r1, r4, r5}
    1196:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1198:	9b00      	ldr	r3, [sp, #0]
    119a:	4283      	cmp	r3, r0
    119c:	d00b      	beq.n	11b6 <_sercom_get_sercom_inst_index+0x2e>
    119e:	2301      	movs	r3, #1
    11a0:	009a      	lsls	r2, r3, #2
    11a2:	4669      	mov	r1, sp
    11a4:	5852      	ldr	r2, [r2, r1]
    11a6:	4282      	cmp	r2, r0
    11a8:	d006      	beq.n	11b8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11aa:	3301      	adds	r3, #1
    11ac:	2b06      	cmp	r3, #6
    11ae:	d1f7      	bne.n	11a0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    11b0:	2000      	movs	r0, #0
}
    11b2:	b007      	add	sp, #28
    11b4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11b6:	2300      	movs	r3, #0
			return i;
    11b8:	b2d8      	uxtb	r0, r3
    11ba:	e7fa      	b.n	11b2 <_sercom_get_sercom_inst_index+0x2a>
    11bc:	00018ecc 	.word	0x00018ecc

000011c0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    11c0:	4770      	bx	lr
	...

000011c4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    11c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    11c6:	4b0a      	ldr	r3, [pc, #40]	; (11f0 <_sercom_set_handler+0x2c>)
    11c8:	781b      	ldrb	r3, [r3, #0]
    11ca:	2b00      	cmp	r3, #0
    11cc:	d10c      	bne.n	11e8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    11ce:	4f09      	ldr	r7, [pc, #36]	; (11f4 <_sercom_set_handler+0x30>)
    11d0:	4e09      	ldr	r6, [pc, #36]	; (11f8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    11d2:	4d0a      	ldr	r5, [pc, #40]	; (11fc <_sercom_set_handler+0x38>)
    11d4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    11d6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    11d8:	195a      	adds	r2, r3, r5
    11da:	6014      	str	r4, [r2, #0]
    11dc:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11de:	2b18      	cmp	r3, #24
    11e0:	d1f9      	bne.n	11d6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    11e2:	2201      	movs	r2, #1
    11e4:	4b02      	ldr	r3, [pc, #8]	; (11f0 <_sercom_set_handler+0x2c>)
    11e6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    11e8:	0080      	lsls	r0, r0, #2
    11ea:	4b02      	ldr	r3, [pc, #8]	; (11f4 <_sercom_set_handler+0x30>)
    11ec:	50c1      	str	r1, [r0, r3]
}
    11ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11f0:	200009e6 	.word	0x200009e6
    11f4:	200009e8 	.word	0x200009e8
    11f8:	000011c1 	.word	0x000011c1
    11fc:	20001090 	.word	0x20001090

00001200 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1200:	b500      	push	{lr}
    1202:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1204:	2308      	movs	r3, #8
    1206:	466a      	mov	r2, sp
    1208:	7013      	strb	r3, [r2, #0]
    120a:	3301      	adds	r3, #1
    120c:	7053      	strb	r3, [r2, #1]
    120e:	3301      	adds	r3, #1
    1210:	7093      	strb	r3, [r2, #2]
    1212:	3301      	adds	r3, #1
    1214:	70d3      	strb	r3, [r2, #3]
    1216:	3301      	adds	r3, #1
    1218:	7113      	strb	r3, [r2, #4]
    121a:	3301      	adds	r3, #1
    121c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    121e:	4b03      	ldr	r3, [pc, #12]	; (122c <_sercom_get_interrupt_vector+0x2c>)
    1220:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1222:	466b      	mov	r3, sp
    1224:	5618      	ldrsb	r0, [r3, r0]
}
    1226:	b003      	add	sp, #12
    1228:	bd00      	pop	{pc}
    122a:	46c0      	nop			; (mov r8, r8)
    122c:	00001189 	.word	0x00001189

00001230 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1230:	b510      	push	{r4, lr}
    1232:	4b02      	ldr	r3, [pc, #8]	; (123c <SERCOM0_Handler+0xc>)
    1234:	681b      	ldr	r3, [r3, #0]
    1236:	2000      	movs	r0, #0
    1238:	4798      	blx	r3
    123a:	bd10      	pop	{r4, pc}
    123c:	200009e8 	.word	0x200009e8

00001240 <SERCOM1_Handler>:
    1240:	b510      	push	{r4, lr}
    1242:	4b02      	ldr	r3, [pc, #8]	; (124c <SERCOM1_Handler+0xc>)
    1244:	685b      	ldr	r3, [r3, #4]
    1246:	2001      	movs	r0, #1
    1248:	4798      	blx	r3
    124a:	bd10      	pop	{r4, pc}
    124c:	200009e8 	.word	0x200009e8

00001250 <SERCOM2_Handler>:
    1250:	b510      	push	{r4, lr}
    1252:	4b02      	ldr	r3, [pc, #8]	; (125c <SERCOM2_Handler+0xc>)
    1254:	689b      	ldr	r3, [r3, #8]
    1256:	2002      	movs	r0, #2
    1258:	4798      	blx	r3
    125a:	bd10      	pop	{r4, pc}
    125c:	200009e8 	.word	0x200009e8

00001260 <SERCOM3_Handler>:
    1260:	b510      	push	{r4, lr}
    1262:	4b02      	ldr	r3, [pc, #8]	; (126c <SERCOM3_Handler+0xc>)
    1264:	68db      	ldr	r3, [r3, #12]
    1266:	2003      	movs	r0, #3
    1268:	4798      	blx	r3
    126a:	bd10      	pop	{r4, pc}
    126c:	200009e8 	.word	0x200009e8

00001270 <SERCOM4_Handler>:
    1270:	b510      	push	{r4, lr}
    1272:	4b02      	ldr	r3, [pc, #8]	; (127c <SERCOM4_Handler+0xc>)
    1274:	691b      	ldr	r3, [r3, #16]
    1276:	2004      	movs	r0, #4
    1278:	4798      	blx	r3
    127a:	bd10      	pop	{r4, pc}
    127c:	200009e8 	.word	0x200009e8

00001280 <SERCOM5_Handler>:
    1280:	b510      	push	{r4, lr}
    1282:	4b02      	ldr	r3, [pc, #8]	; (128c <SERCOM5_Handler+0xc>)
    1284:	695b      	ldr	r3, [r3, #20]
    1286:	2005      	movs	r0, #5
    1288:	4798      	blx	r3
    128a:	bd10      	pop	{r4, pc}
    128c:	200009e8 	.word	0x200009e8

00001290 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1290:	b5f0      	push	{r4, r5, r6, r7, lr}
    1292:	46d6      	mov	lr, sl
    1294:	464f      	mov	r7, r9
    1296:	4646      	mov	r6, r8
    1298:	b5c0      	push	{r6, r7, lr}
    129a:	b08a      	sub	sp, #40	; 0x28
    129c:	0006      	movs	r6, r0
    129e:	000f      	movs	r7, r1
    12a0:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    12a2:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    12a4:	680b      	ldr	r3, [r1, #0]
    12a6:	079b      	lsls	r3, r3, #30
    12a8:	d40a      	bmi.n	12c0 <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    12aa:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    12ac:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    12ae:	07db      	lsls	r3, r3, #31
    12b0:	d400      	bmi.n	12b4 <spi_init+0x24>
    12b2:	e097      	b.n	13e4 <spi_init+0x154>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    12b4:	b00a      	add	sp, #40	; 0x28
    12b6:	bc1c      	pop	{r2, r3, r4}
    12b8:	4690      	mov	r8, r2
    12ba:	4699      	mov	r9, r3
    12bc:	46a2      	mov	sl, r4
    12be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    12c0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    12c2:	9305      	str	r3, [sp, #20]
    12c4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    12c6:	9306      	str	r3, [sp, #24]
    12c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    12ca:	9307      	str	r3, [sp, #28]
    12cc:	6b53      	ldr	r3, [r2, #52]	; 0x34
    12ce:	9308      	str	r3, [sp, #32]
    12d0:	2500      	movs	r5, #0
    12d2:	e00a      	b.n	12ea <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    12d4:	0038      	movs	r0, r7
    12d6:	4b9a      	ldr	r3, [pc, #616]	; (1540 <spi_init+0x2b0>)
    12d8:	4798      	blx	r3
    12da:	e00e      	b.n	12fa <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    12dc:	230f      	movs	r3, #15
    12de:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    12e0:	4581      	cmp	r9, r0
    12e2:	d130      	bne.n	1346 <spi_init+0xb6>
    12e4:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    12e6:	2d04      	cmp	r5, #4
    12e8:	d031      	beq.n	134e <spi_init+0xbe>
    12ea:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    12ec:	00ab      	lsls	r3, r5, #2
    12ee:	aa02      	add	r2, sp, #8
    12f0:	200c      	movs	r0, #12
    12f2:	1812      	adds	r2, r2, r0
    12f4:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    12f6:	2800      	cmp	r0, #0
    12f8:	d0ec      	beq.n	12d4 <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    12fa:	1c43      	adds	r3, r0, #1
    12fc:	d0f2      	beq.n	12e4 <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    12fe:	0401      	lsls	r1, r0, #16
    1300:	0c0b      	lsrs	r3, r1, #16
    1302:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    1304:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    1306:	b2c3      	uxtb	r3, r0
    1308:	469c      	mov	ip, r3
		return NULL;
    130a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    130c:	0602      	lsls	r2, r0, #24
    130e:	d405      	bmi.n	131c <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    1310:	4663      	mov	r3, ip
    1312:	095b      	lsrs	r3, r3, #5
    1314:	01db      	lsls	r3, r3, #7
    1316:	4a8b      	ldr	r2, [pc, #556]	; (1544 <spi_init+0x2b4>)
    1318:	4690      	mov	r8, r2
    131a:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    131c:	221f      	movs	r2, #31
    131e:	4660      	mov	r0, ip
    1320:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1322:	1898      	adds	r0, r3, r2
    1324:	3040      	adds	r0, #64	; 0x40
    1326:	7800      	ldrb	r0, [r0, #0]
    1328:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    132a:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    132c:	4651      	mov	r1, sl
    132e:	07c9      	lsls	r1, r1, #31
    1330:	d5d6      	bpl.n	12e0 <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    1332:	0852      	lsrs	r2, r2, #1
    1334:	189b      	adds	r3, r3, r2
    1336:	3330      	adds	r3, #48	; 0x30
    1338:	7818      	ldrb	r0, [r3, #0]
    133a:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    133c:	4663      	mov	r3, ip
    133e:	07db      	lsls	r3, r3, #31
    1340:	d5cc      	bpl.n	12dc <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    1342:	0900      	lsrs	r0, r0, #4
    1344:	e7cc      	b.n	12e0 <spi_init+0x50>
			module->hw = NULL;
    1346:	2300      	movs	r3, #0
    1348:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    134a:	201c      	movs	r0, #28
    134c:	e7b2      	b.n	12b4 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    134e:	2011      	movs	r0, #17
    1350:	4b7d      	ldr	r3, [pc, #500]	; (1548 <spi_init+0x2b8>)
    1352:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1354:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    1356:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    1358:	2a01      	cmp	r2, #1
    135a:	d026      	beq.n	13aa <spi_init+0x11a>
	ctrla |= config->mux_setting;
    135c:	6863      	ldr	r3, [r4, #4]
    135e:	68a2      	ldr	r2, [r4, #8]
    1360:	4313      	orrs	r3, r2
    1362:	68e2      	ldr	r2, [r4, #12]
    1364:	4313      	orrs	r3, r2
    1366:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    1368:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    136a:	7c61      	ldrb	r1, [r4, #17]
    136c:	2900      	cmp	r1, #0
    136e:	d001      	beq.n	1374 <spi_init+0xe4>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1370:	2180      	movs	r1, #128	; 0x80
    1372:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    1374:	7ca1      	ldrb	r1, [r4, #18]
    1376:	2900      	cmp	r1, #0
    1378:	d002      	beq.n	1380 <spi_init+0xf0>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    137a:	2180      	movs	r1, #128	; 0x80
    137c:	0289      	lsls	r1, r1, #10
    137e:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    1380:	7ce1      	ldrb	r1, [r4, #19]
    1382:	2900      	cmp	r1, #0
    1384:	d002      	beq.n	138c <spi_init+0xfc>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1386:	2180      	movs	r1, #128	; 0x80
    1388:	0089      	lsls	r1, r1, #2
    138a:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    138c:	7d21      	ldrb	r1, [r4, #20]
    138e:	2900      	cmp	r1, #0
    1390:	d002      	beq.n	1398 <spi_init+0x108>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1392:	2180      	movs	r1, #128	; 0x80
    1394:	0189      	lsls	r1, r1, #6
    1396:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    1398:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    139a:	2002      	movs	r0, #2
    139c:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    139e:	428b      	cmp	r3, r1
    13a0:	d017      	beq.n	13d2 <spi_init+0x142>
	module->hw = NULL;
    13a2:	2300      	movs	r3, #0
    13a4:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    13a6:	201c      	movs	r0, #28
    13a8:	e784      	b.n	12b4 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    13aa:	aa04      	add	r2, sp, #16
    13ac:	0001      	movs	r1, r0
    13ae:	69a0      	ldr	r0, [r4, #24]
    13b0:	4b66      	ldr	r3, [pc, #408]	; (154c <spi_init+0x2bc>)
    13b2:	4798      	blx	r3
    13b4:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    13b6:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    13b8:	2b00      	cmp	r3, #0
    13ba:	d000      	beq.n	13be <spi_init+0x12e>
    13bc:	e77a      	b.n	12b4 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    13be:	7b3b      	ldrb	r3, [r7, #12]
    13c0:	b2db      	uxtb	r3, r3
    13c2:	aa04      	add	r2, sp, #16
    13c4:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    13c6:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    13c8:	429a      	cmp	r2, r3
    13ca:	d000      	beq.n	13ce <spi_init+0x13e>
    13cc:	e772      	b.n	12b4 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    13ce:	350c      	adds	r5, #12
    13d0:	e7c4      	b.n	135c <spi_init+0xcc>
			spi_module->CTRLB.reg == ctrlb) {
    13d2:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    13d4:	4293      	cmp	r3, r2
    13d6:	d1e4      	bne.n	13a2 <spi_init+0x112>
		module->mode           = config->mode;
    13d8:	7823      	ldrb	r3, [r4, #0]
    13da:	7173      	strb	r3, [r6, #5]
		module->character_size = config->character_size;
    13dc:	7c23      	ldrb	r3, [r4, #16]
    13de:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    13e0:	2000      	movs	r0, #0
    13e2:	e767      	b.n	12b4 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    13e4:	0008      	movs	r0, r1
    13e6:	4b5a      	ldr	r3, [pc, #360]	; (1550 <spi_init+0x2c0>)
    13e8:	4798      	blx	r3
	if (sercom_index == 5) {
    13ea:	2805      	cmp	r0, #5
    13ec:	d100      	bne.n	13f0 <spi_init+0x160>
    13ee:	e09f      	b.n	1530 <spi_init+0x2a0>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    13f0:	0003      	movs	r3, r0
    13f2:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    13f4:	4957      	ldr	r1, [pc, #348]	; (1554 <spi_init+0x2c4>)
    13f6:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    13f8:	2201      	movs	r2, #1
    13fa:	4082      	lsls	r2, r0
    13fc:	432a      	orrs	r2, r5
    13fe:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    1400:	a909      	add	r1, sp, #36	; 0x24
    1402:	2524      	movs	r5, #36	; 0x24
    1404:	5d62      	ldrb	r2, [r4, r5]
    1406:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1408:	b2db      	uxtb	r3, r3
    140a:	9301      	str	r3, [sp, #4]
    140c:	0018      	movs	r0, r3
    140e:	4b52      	ldr	r3, [pc, #328]	; (1558 <spi_init+0x2c8>)
    1410:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1412:	9801      	ldr	r0, [sp, #4]
    1414:	4b51      	ldr	r3, [pc, #324]	; (155c <spi_init+0x2cc>)
    1416:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1418:	5d60      	ldrb	r0, [r4, r5]
    141a:	2100      	movs	r1, #0
    141c:	4b50      	ldr	r3, [pc, #320]	; (1560 <spi_init+0x2d0>)
    141e:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1420:	7823      	ldrb	r3, [r4, #0]
    1422:	2b01      	cmp	r3, #1
    1424:	d019      	beq.n	145a <spi_init+0x1ca>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1426:	6833      	ldr	r3, [r6, #0]
    1428:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    142a:	ab04      	add	r3, sp, #16
    142c:	2280      	movs	r2, #128	; 0x80
    142e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1430:	2200      	movs	r2, #0
    1432:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1434:	2101      	movs	r1, #1
    1436:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    1438:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    143a:	7823      	ldrb	r3, [r4, #0]
    143c:	2b00      	cmp	r3, #0
    143e:	d101      	bne.n	1444 <spi_init+0x1b4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1440:	ab04      	add	r3, sp, #16
    1442:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1444:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1446:	9305      	str	r3, [sp, #20]
    1448:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    144a:	9306      	str	r3, [sp, #24]
    144c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    144e:	9307      	str	r3, [sp, #28]
    1450:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1452:	9308      	str	r3, [sp, #32]
    1454:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1456:	ad05      	add	r5, sp, #20
    1458:	e011      	b.n	147e <spi_init+0x1ee>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    145a:	683b      	ldr	r3, [r7, #0]
    145c:	220c      	movs	r2, #12
    145e:	4313      	orrs	r3, r2
    1460:	603b      	str	r3, [r7, #0]
    1462:	e7e0      	b.n	1426 <spi_init+0x196>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1464:	4640      	mov	r0, r8
    1466:	4b36      	ldr	r3, [pc, #216]	; (1540 <spi_init+0x2b0>)
    1468:	4798      	blx	r3
    146a:	e00d      	b.n	1488 <spi_init+0x1f8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    146c:	a904      	add	r1, sp, #16
    146e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1470:	0c00      	lsrs	r0, r0, #16
    1472:	b2c0      	uxtb	r0, r0
    1474:	4b3b      	ldr	r3, [pc, #236]	; (1564 <spi_init+0x2d4>)
    1476:	4798      	blx	r3
    1478:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    147a:	2f04      	cmp	r7, #4
    147c:	d007      	beq.n	148e <spi_init+0x1fe>
    147e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1480:	00bb      	lsls	r3, r7, #2
    1482:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    1484:	2800      	cmp	r0, #0
    1486:	d0ed      	beq.n	1464 <spi_init+0x1d4>
		if (current_pinmux != PINMUX_UNUSED) {
    1488:	1c43      	adds	r3, r0, #1
    148a:	d1ef      	bne.n	146c <spi_init+0x1dc>
    148c:	e7f4      	b.n	1478 <spi_init+0x1e8>
	module->mode             = config->mode;
    148e:	7823      	ldrb	r3, [r4, #0]
    1490:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    1492:	7c23      	ldrb	r3, [r4, #16]
    1494:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    1496:	7ca3      	ldrb	r3, [r4, #18]
    1498:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    149a:	7d23      	ldrb	r3, [r4, #20]
    149c:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    149e:	2200      	movs	r2, #0
    14a0:	ab02      	add	r3, sp, #8
    14a2:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    14a4:	7823      	ldrb	r3, [r4, #0]
    14a6:	2b01      	cmp	r3, #1
    14a8:	d02a      	beq.n	1500 <spi_init+0x270>
	ctrla |= config->transfer_mode;
    14aa:	6863      	ldr	r3, [r4, #4]
    14ac:	68a2      	ldr	r2, [r4, #8]
    14ae:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    14b0:	68e2      	ldr	r2, [r4, #12]
    14b2:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    14b4:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    14b6:	7c62      	ldrb	r2, [r4, #17]
    14b8:	2a00      	cmp	r2, #0
    14ba:	d103      	bne.n	14c4 <spi_init+0x234>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    14bc:	4a2a      	ldr	r2, [pc, #168]	; (1568 <spi_init+0x2d8>)
    14be:	7892      	ldrb	r2, [r2, #2]
    14c0:	0792      	lsls	r2, r2, #30
    14c2:	d501      	bpl.n	14c8 <spi_init+0x238>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    14c4:	2280      	movs	r2, #128	; 0x80
    14c6:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    14c8:	7ca2      	ldrb	r2, [r4, #18]
    14ca:	2a00      	cmp	r2, #0
    14cc:	d002      	beq.n	14d4 <spi_init+0x244>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    14ce:	2280      	movs	r2, #128	; 0x80
    14d0:	0292      	lsls	r2, r2, #10
    14d2:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    14d4:	7ce2      	ldrb	r2, [r4, #19]
    14d6:	2a00      	cmp	r2, #0
    14d8:	d002      	beq.n	14e0 <spi_init+0x250>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    14da:	2280      	movs	r2, #128	; 0x80
    14dc:	0092      	lsls	r2, r2, #2
    14de:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    14e0:	7d22      	ldrb	r2, [r4, #20]
    14e2:	2a00      	cmp	r2, #0
    14e4:	d002      	beq.n	14ec <spi_init+0x25c>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    14e6:	2280      	movs	r2, #128	; 0x80
    14e8:	0192      	lsls	r2, r2, #6
    14ea:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    14ec:	4642      	mov	r2, r8
    14ee:	6812      	ldr	r2, [r2, #0]
    14f0:	4313      	orrs	r3, r2
    14f2:	4642      	mov	r2, r8
    14f4:	6013      	str	r3, [r2, #0]
	spi_module->CTRLB.reg |= ctrlb;
    14f6:	6853      	ldr	r3, [r2, #4]
    14f8:	430b      	orrs	r3, r1
    14fa:	6053      	str	r3, [r2, #4]
	return STATUS_OK;
    14fc:	2000      	movs	r0, #0
    14fe:	e6d9      	b.n	12b4 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1500:	6830      	ldr	r0, [r6, #0]
    1502:	4b13      	ldr	r3, [pc, #76]	; (1550 <spi_init+0x2c0>)
    1504:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1506:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1508:	b2c0      	uxtb	r0, r0
    150a:	4b0f      	ldr	r3, [pc, #60]	; (1548 <spi_init+0x2b8>)
    150c:	4798      	blx	r3
    150e:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    1510:	ab02      	add	r3, sp, #8
    1512:	1d9a      	adds	r2, r3, #6
    1514:	69a0      	ldr	r0, [r4, #24]
    1516:	4b0d      	ldr	r3, [pc, #52]	; (154c <spi_init+0x2bc>)
    1518:	4798      	blx	r3
    151a:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    151c:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    151e:	2b00      	cmp	r3, #0
    1520:	d000      	beq.n	1524 <spi_init+0x294>
    1522:	e6c7      	b.n	12b4 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    1524:	ab02      	add	r3, sp, #8
    1526:	3306      	adds	r3, #6
    1528:	781b      	ldrb	r3, [r3, #0]
    152a:	4642      	mov	r2, r8
    152c:	7313      	strb	r3, [r2, #12]
    152e:	e7bc      	b.n	14aa <spi_init+0x21a>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    1530:	4a08      	ldr	r2, [pc, #32]	; (1554 <spi_init+0x2c4>)
    1532:	6a13      	ldr	r3, [r2, #32]
    1534:	2102      	movs	r1, #2
    1536:	430b      	orrs	r3, r1
    1538:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    153a:	2318      	movs	r3, #24
    153c:	e760      	b.n	1400 <spi_init+0x170>
    153e:	46c0      	nop			; (mov r8, r8)
    1540:	0000102d 	.word	0x0000102d
    1544:	40002800 	.word	0x40002800
    1548:	000023ed 	.word	0x000023ed
    154c:	00000f23 	.word	0x00000f23
    1550:	00001189 	.word	0x00001189
    1554:	40000400 	.word	0x40000400
    1558:	000023c9 	.word	0x000023c9
    155c:	00002359 	.word	0x00002359
    1560:	00000fe1 	.word	0x00000fe1
    1564:	000024c5 	.word	0x000024c5
    1568:	41002000 	.word	0x41002000

0000156c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    156c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    156e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    1570:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    1572:	2c01      	cmp	r4, #1
    1574:	d001      	beq.n	157a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    1576:	0018      	movs	r0, r3
    1578:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    157a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    157c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    157e:	2c00      	cmp	r4, #0
    1580:	d1f9      	bne.n	1576 <spi_select_slave+0xa>
		if (select) {
    1582:	2a00      	cmp	r2, #0
    1584:	d058      	beq.n	1638 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    1586:	784b      	ldrb	r3, [r1, #1]
    1588:	2b00      	cmp	r3, #0
    158a:	d044      	beq.n	1616 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    158c:	6803      	ldr	r3, [r0, #0]
    158e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    1590:	07db      	lsls	r3, r3, #31
    1592:	d410      	bmi.n	15b6 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    1594:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1596:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1598:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    159a:	2900      	cmp	r1, #0
    159c:	d104      	bne.n	15a8 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    159e:	0953      	lsrs	r3, r2, #5
    15a0:	01db      	lsls	r3, r3, #7
    15a2:	492e      	ldr	r1, [pc, #184]	; (165c <spi_select_slave+0xf0>)
    15a4:	468c      	mov	ip, r1
    15a6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    15a8:	211f      	movs	r1, #31
    15aa:	4011      	ands	r1, r2
    15ac:	2201      	movs	r2, #1
    15ae:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    15b0:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    15b2:	2305      	movs	r3, #5
    15b4:	e7df      	b.n	1576 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    15b6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    15b8:	09d4      	lsrs	r4, r2, #7
		return NULL;
    15ba:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    15bc:	2c00      	cmp	r4, #0
    15be:	d104      	bne.n	15ca <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    15c0:	0953      	lsrs	r3, r2, #5
    15c2:	01db      	lsls	r3, r3, #7
    15c4:	4c25      	ldr	r4, [pc, #148]	; (165c <spi_select_slave+0xf0>)
    15c6:	46a4      	mov	ip, r4
    15c8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    15ca:	241f      	movs	r4, #31
    15cc:	4014      	ands	r4, r2
    15ce:	2201      	movs	r2, #1
    15d0:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    15d2:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    15d4:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    15d6:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    15d8:	07d2      	lsls	r2, r2, #31
    15da:	d501      	bpl.n	15e0 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    15dc:	788a      	ldrb	r2, [r1, #2]
    15de:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    15e0:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    15e2:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    15e4:	2a00      	cmp	r2, #0
    15e6:	d1c6      	bne.n	1576 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    15e8:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    15ea:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    15ec:	7e13      	ldrb	r3, [r2, #24]
    15ee:	420b      	tst	r3, r1
    15f0:	d0fc      	beq.n	15ec <spi_select_slave+0x80>
    15f2:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    15f4:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    15f6:	0749      	lsls	r1, r1, #29
    15f8:	d5bd      	bpl.n	1576 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    15fa:	8b53      	ldrh	r3, [r2, #26]
    15fc:	075b      	lsls	r3, r3, #29
    15fe:	d501      	bpl.n	1604 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1600:	2304      	movs	r3, #4
    1602:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1604:	7983      	ldrb	r3, [r0, #6]
    1606:	2b01      	cmp	r3, #1
    1608:	d002      	beq.n	1610 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    160a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    160c:	2300      	movs	r3, #0
    160e:	e7b2      	b.n	1576 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1610:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1612:	2300      	movs	r3, #0
    1614:	e7af      	b.n	1576 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1616:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1618:	09d1      	lsrs	r1, r2, #7
		return NULL;
    161a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    161c:	2900      	cmp	r1, #0
    161e:	d104      	bne.n	162a <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    1620:	0953      	lsrs	r3, r2, #5
    1622:	01db      	lsls	r3, r3, #7
    1624:	490d      	ldr	r1, [pc, #52]	; (165c <spi_select_slave+0xf0>)
    1626:	468c      	mov	ip, r1
    1628:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    162a:	211f      	movs	r1, #31
    162c:	4011      	ands	r1, r2
    162e:	2201      	movs	r2, #1
    1630:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1632:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    1634:	2300      	movs	r3, #0
    1636:	e79e      	b.n	1576 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    1638:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    163a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    163c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    163e:	2900      	cmp	r1, #0
    1640:	d104      	bne.n	164c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    1642:	0953      	lsrs	r3, r2, #5
    1644:	01db      	lsls	r3, r3, #7
    1646:	4905      	ldr	r1, [pc, #20]	; (165c <spi_select_slave+0xf0>)
    1648:	468c      	mov	ip, r1
    164a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    164c:	211f      	movs	r1, #31
    164e:	4011      	ands	r1, r2
    1650:	2201      	movs	r2, #1
    1652:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1654:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    1656:	2300      	movs	r3, #0
    1658:	e78d      	b.n	1576 <spi_select_slave+0xa>
    165a:	46c0      	nop			; (mov r8, r8)
    165c:	40002800 	.word	0x40002800

00001660 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1660:	b5f0      	push	{r4, r5, r6, r7, lr}
    1662:	46de      	mov	lr, fp
    1664:	4657      	mov	r7, sl
    1666:	464e      	mov	r6, r9
    1668:	4645      	mov	r5, r8
    166a:	b5e0      	push	{r5, r6, r7, lr}
    166c:	b091      	sub	sp, #68	; 0x44
    166e:	0005      	movs	r5, r0
    1670:	000c      	movs	r4, r1
    1672:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1674:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1676:	0008      	movs	r0, r1
    1678:	4bc4      	ldr	r3, [pc, #784]	; (198c <usart_init+0x32c>)
    167a:	4798      	blx	r3
    167c:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
    167e:	2805      	cmp	r0, #5
    1680:	d00d      	beq.n	169e <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1682:	0007      	movs	r7, r0
    1684:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    1686:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1688:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    168a:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    168c:	07c9      	lsls	r1, r1, #31
    168e:	d509      	bpl.n	16a4 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1690:	b011      	add	sp, #68	; 0x44
    1692:	bc3c      	pop	{r2, r3, r4, r5}
    1694:	4690      	mov	r8, r2
    1696:	4699      	mov	r9, r3
    1698:	46a2      	mov	sl, r4
    169a:	46ab      	mov	fp, r5
    169c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    169e:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    16a0:	2301      	movs	r3, #1
    16a2:	e7f1      	b.n	1688 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    16a4:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    16a6:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    16a8:	0789      	lsls	r1, r1, #30
    16aa:	d4f1      	bmi.n	1690 <usart_init+0x30>
	if (sercom_index == 5) {
    16ac:	2a05      	cmp	r2, #5
    16ae:	d049      	beq.n	1744 <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    16b0:	49b7      	ldr	r1, [pc, #732]	; (1990 <usart_init+0x330>)
    16b2:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    16b4:	2201      	movs	r2, #1
    16b6:	409a      	lsls	r2, r3
    16b8:	0013      	movs	r3, r2
    16ba:	4303      	orrs	r3, r0
    16bc:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    16be:	a90f      	add	r1, sp, #60	; 0x3c
    16c0:	232d      	movs	r3, #45	; 0x2d
    16c2:	4698      	mov	r8, r3
    16c4:	5cf3      	ldrb	r3, [r6, r3]
    16c6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    16c8:	b2ff      	uxtb	r7, r7
    16ca:	0038      	movs	r0, r7
    16cc:	4bb1      	ldr	r3, [pc, #708]	; (1994 <usart_init+0x334>)
    16ce:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    16d0:	0038      	movs	r0, r7
    16d2:	4bb1      	ldr	r3, [pc, #708]	; (1998 <usart_init+0x338>)
    16d4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    16d6:	4643      	mov	r3, r8
    16d8:	5cf0      	ldrb	r0, [r6, r3]
    16da:	2100      	movs	r1, #0
    16dc:	4baf      	ldr	r3, [pc, #700]	; (199c <usart_init+0x33c>)
    16de:	4798      	blx	r3
	module->character_size = config->character_size;
    16e0:	7af3      	ldrb	r3, [r6, #11]
    16e2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    16e4:	2324      	movs	r3, #36	; 0x24
    16e6:	5cf3      	ldrb	r3, [r6, r3]
    16e8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    16ea:	2325      	movs	r3, #37	; 0x25
    16ec:	5cf3      	ldrb	r3, [r6, r3]
    16ee:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    16f0:	7ef3      	ldrb	r3, [r6, #27]
    16f2:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    16f4:	7f33      	ldrb	r3, [r6, #28]
    16f6:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    16f8:	682b      	ldr	r3, [r5, #0]
    16fa:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    16fc:	0018      	movs	r0, r3
    16fe:	4ba3      	ldr	r3, [pc, #652]	; (198c <usart_init+0x32c>)
    1700:	4798      	blx	r3
	if (sercom_index == 5) {
    1702:	2805      	cmp	r0, #5
    1704:	d026      	beq.n	1754 <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1706:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    1708:	2200      	movs	r2, #0
    170a:	230e      	movs	r3, #14
    170c:	a906      	add	r1, sp, #24
    170e:	468c      	mov	ip, r1
    1710:	4463      	add	r3, ip
    1712:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1714:	8a32      	ldrh	r2, [r6, #16]
    1716:	9202      	str	r2, [sp, #8]
    1718:	2380      	movs	r3, #128	; 0x80
    171a:	01db      	lsls	r3, r3, #7
    171c:	429a      	cmp	r2, r3
    171e:	d100      	bne.n	1722 <usart_init+0xc2>
    1720:	e0a7      	b.n	1872 <usart_init+0x212>
    1722:	d919      	bls.n	1758 <usart_init+0xf8>
    1724:	23c0      	movs	r3, #192	; 0xc0
    1726:	01db      	lsls	r3, r3, #7
    1728:	9a02      	ldr	r2, [sp, #8]
    172a:	429a      	cmp	r2, r3
    172c:	d100      	bne.n	1730 <usart_init+0xd0>
    172e:	e09b      	b.n	1868 <usart_init+0x208>
    1730:	2380      	movs	r3, #128	; 0x80
    1732:	021b      	lsls	r3, r3, #8
    1734:	429a      	cmp	r2, r3
    1736:	d000      	beq.n	173a <usart_init+0xda>
    1738:	e123      	b.n	1982 <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    173a:	2303      	movs	r3, #3
    173c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    173e:	2300      	movs	r3, #0
    1740:	9307      	str	r3, [sp, #28]
    1742:	e012      	b.n	176a <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    1744:	4992      	ldr	r1, [pc, #584]	; (1990 <usart_init+0x330>)
    1746:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    1748:	3a04      	subs	r2, #4
    174a:	409a      	lsls	r2, r3
    174c:	0013      	movs	r3, r2
    174e:	4303      	orrs	r3, r0
    1750:	620b      	str	r3, [r1, #32]
    1752:	e7b4      	b.n	16be <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    1754:	2018      	movs	r0, #24
    1756:	e7d7      	b.n	1708 <usart_init+0xa8>
	switch (config->sample_rate) {
    1758:	2380      	movs	r3, #128	; 0x80
    175a:	019b      	lsls	r3, r3, #6
    175c:	429a      	cmp	r2, r3
    175e:	d000      	beq.n	1762 <usart_init+0x102>
    1760:	e10f      	b.n	1982 <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1762:	2310      	movs	r3, #16
    1764:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1766:	3b0f      	subs	r3, #15
    1768:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    176a:	6833      	ldr	r3, [r6, #0]
    176c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    176e:	68f3      	ldr	r3, [r6, #12]
    1770:	469b      	mov	fp, r3
		config->sample_adjustment |
    1772:	6973      	ldr	r3, [r6, #20]
    1774:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1776:	7e33      	ldrb	r3, [r6, #24]
    1778:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    177a:	2326      	movs	r3, #38	; 0x26
    177c:	5cf3      	ldrb	r3, [r6, r3]
    177e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1780:	6873      	ldr	r3, [r6, #4]
    1782:	4699      	mov	r9, r3
	switch (transfer_mode)
    1784:	2b00      	cmp	r3, #0
    1786:	d100      	bne.n	178a <usart_init+0x12a>
    1788:	e09b      	b.n	18c2 <usart_init+0x262>
    178a:	2380      	movs	r3, #128	; 0x80
    178c:	055b      	lsls	r3, r3, #21
    178e:	4599      	cmp	r9, r3
    1790:	d104      	bne.n	179c <usart_init+0x13c>
			if (!config->use_external_clock) {
    1792:	2327      	movs	r3, #39	; 0x27
    1794:	5cf3      	ldrb	r3, [r6, r3]
    1796:	2b00      	cmp	r3, #0
    1798:	d100      	bne.n	179c <usart_init+0x13c>
    179a:	e080      	b.n	189e <usart_init+0x23e>
	if(config->encoding_format_enable) {
    179c:	7e73      	ldrb	r3, [r6, #25]
    179e:	2b00      	cmp	r3, #0
    17a0:	d002      	beq.n	17a8 <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    17a2:	7eb3      	ldrb	r3, [r6, #26]
    17a4:	4642      	mov	r2, r8
    17a6:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    17a8:	230e      	movs	r3, #14
    17aa:	aa06      	add	r2, sp, #24
    17ac:	4694      	mov	ip, r2
    17ae:	4463      	add	r3, ip
    17b0:	881b      	ldrh	r3, [r3, #0]
    17b2:	4642      	mov	r2, r8
    17b4:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    17b6:	9b05      	ldr	r3, [sp, #20]
    17b8:	465a      	mov	r2, fp
    17ba:	4313      	orrs	r3, r2
    17bc:	9a03      	ldr	r2, [sp, #12]
    17be:	4313      	orrs	r3, r2
    17c0:	464a      	mov	r2, r9
    17c2:	4313      	orrs	r3, r2
    17c4:	9f02      	ldr	r7, [sp, #8]
    17c6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    17c8:	9b04      	ldr	r3, [sp, #16]
    17ca:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    17cc:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    17ce:	4653      	mov	r3, sl
    17d0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    17d2:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    17d4:	2327      	movs	r3, #39	; 0x27
    17d6:	5cf3      	ldrb	r3, [r6, r3]
    17d8:	2b00      	cmp	r3, #0
    17da:	d101      	bne.n	17e0 <usart_init+0x180>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    17dc:	3304      	adds	r3, #4
    17de:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    17e0:	7e73      	ldrb	r3, [r6, #25]
    17e2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    17e4:	7f32      	ldrb	r2, [r6, #28]
    17e6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    17e8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    17ea:	7f72      	ldrb	r2, [r6, #29]
    17ec:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    17ee:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    17f0:	2224      	movs	r2, #36	; 0x24
    17f2:	5cb2      	ldrb	r2, [r6, r2]
    17f4:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    17f6:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    17f8:	2225      	movs	r2, #37	; 0x25
    17fa:	5cb2      	ldrb	r2, [r6, r2]
    17fc:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    17fe:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1800:	7ab1      	ldrb	r1, [r6, #10]
    1802:	7af2      	ldrb	r2, [r6, #11]
    1804:	4311      	orrs	r1, r2
    1806:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1808:	8933      	ldrh	r3, [r6, #8]
    180a:	2bff      	cmp	r3, #255	; 0xff
    180c:	d07d      	beq.n	190a <usart_init+0x2aa>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    180e:	2280      	movs	r2, #128	; 0x80
    1810:	0452      	lsls	r2, r2, #17
    1812:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1814:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1816:	232c      	movs	r3, #44	; 0x2c
    1818:	5cf3      	ldrb	r3, [r6, r3]
    181a:	2b00      	cmp	r3, #0
    181c:	d103      	bne.n	1826 <usart_init+0x1c6>
    181e:	4b60      	ldr	r3, [pc, #384]	; (19a0 <usart_init+0x340>)
    1820:	789b      	ldrb	r3, [r3, #2]
    1822:	079b      	lsls	r3, r3, #30
    1824:	d501      	bpl.n	182a <usart_init+0x1ca>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1826:	2380      	movs	r3, #128	; 0x80
    1828:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    182a:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    182c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    182e:	2b00      	cmp	r3, #0
    1830:	d1fc      	bne.n	182c <usart_init+0x1cc>
	usart_hw->CTRLB.reg = ctrlb;
    1832:	4643      	mov	r3, r8
    1834:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1836:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1838:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    183a:	2b00      	cmp	r3, #0
    183c:	d1fc      	bne.n	1838 <usart_init+0x1d8>
	usart_hw->CTRLA.reg = ctrla;
    183e:	4643      	mov	r3, r8
    1840:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1842:	ab0e      	add	r3, sp, #56	; 0x38
    1844:	2280      	movs	r2, #128	; 0x80
    1846:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1848:	2200      	movs	r2, #0
    184a:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    184c:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    184e:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1850:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1852:	930a      	str	r3, [sp, #40]	; 0x28
    1854:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1856:	930b      	str	r3, [sp, #44]	; 0x2c
    1858:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    185a:	930c      	str	r3, [sp, #48]	; 0x30
    185c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    185e:	9302      	str	r3, [sp, #8]
    1860:	930d      	str	r3, [sp, #52]	; 0x34
    1862:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1864:	ae0a      	add	r6, sp, #40	; 0x28
    1866:	e05e      	b.n	1926 <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1868:	2308      	movs	r3, #8
    186a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    186c:	3b07      	subs	r3, #7
    186e:	9307      	str	r3, [sp, #28]
    1870:	e77b      	b.n	176a <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    1872:	6833      	ldr	r3, [r6, #0]
    1874:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1876:	68f3      	ldr	r3, [r6, #12]
    1878:	469b      	mov	fp, r3
		config->sample_adjustment |
    187a:	6973      	ldr	r3, [r6, #20]
    187c:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    187e:	7e33      	ldrb	r3, [r6, #24]
    1880:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1882:	2326      	movs	r3, #38	; 0x26
    1884:	5cf3      	ldrb	r3, [r6, r3]
    1886:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1888:	6873      	ldr	r3, [r6, #4]
    188a:	4699      	mov	r9, r3
	switch (transfer_mode)
    188c:	2b00      	cmp	r3, #0
    188e:	d014      	beq.n	18ba <usart_init+0x25a>
    1890:	2380      	movs	r3, #128	; 0x80
    1892:	055b      	lsls	r3, r3, #21
    1894:	4599      	cmp	r9, r3
    1896:	d100      	bne.n	189a <usart_init+0x23a>
    1898:	e77b      	b.n	1792 <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    189a:	2000      	movs	r0, #0
    189c:	e020      	b.n	18e0 <usart_init+0x280>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    189e:	6a33      	ldr	r3, [r6, #32]
    18a0:	001f      	movs	r7, r3
    18a2:	b2c0      	uxtb	r0, r0
    18a4:	4b3f      	ldr	r3, [pc, #252]	; (19a4 <usart_init+0x344>)
    18a6:	4798      	blx	r3
    18a8:	0001      	movs	r1, r0
    18aa:	220e      	movs	r2, #14
    18ac:	ab06      	add	r3, sp, #24
    18ae:	469c      	mov	ip, r3
    18b0:	4462      	add	r2, ip
    18b2:	0038      	movs	r0, r7
    18b4:	4b3c      	ldr	r3, [pc, #240]	; (19a8 <usart_init+0x348>)
    18b6:	4798      	blx	r3
    18b8:	e012      	b.n	18e0 <usart_init+0x280>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    18ba:	2308      	movs	r3, #8
    18bc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    18be:	2300      	movs	r3, #0
    18c0:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    18c2:	2327      	movs	r3, #39	; 0x27
    18c4:	5cf3      	ldrb	r3, [r6, r3]
    18c6:	2b00      	cmp	r3, #0
    18c8:	d00e      	beq.n	18e8 <usart_init+0x288>
				status_code =
    18ca:	9b06      	ldr	r3, [sp, #24]
    18cc:	9300      	str	r3, [sp, #0]
    18ce:	9b07      	ldr	r3, [sp, #28]
    18d0:	220e      	movs	r2, #14
    18d2:	a906      	add	r1, sp, #24
    18d4:	468c      	mov	ip, r1
    18d6:	4462      	add	r2, ip
    18d8:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    18da:	6a30      	ldr	r0, [r6, #32]
    18dc:	4f33      	ldr	r7, [pc, #204]	; (19ac <usart_init+0x34c>)
    18de:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    18e0:	2800      	cmp	r0, #0
    18e2:	d000      	beq.n	18e6 <usart_init+0x286>
    18e4:	e6d4      	b.n	1690 <usart_init+0x30>
    18e6:	e759      	b.n	179c <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    18e8:	6a33      	ldr	r3, [r6, #32]
    18ea:	001f      	movs	r7, r3
    18ec:	b2c0      	uxtb	r0, r0
    18ee:	4b2d      	ldr	r3, [pc, #180]	; (19a4 <usart_init+0x344>)
    18f0:	4798      	blx	r3
    18f2:	0001      	movs	r1, r0
				status_code =
    18f4:	9b06      	ldr	r3, [sp, #24]
    18f6:	9300      	str	r3, [sp, #0]
    18f8:	9b07      	ldr	r3, [sp, #28]
    18fa:	220e      	movs	r2, #14
    18fc:	a806      	add	r0, sp, #24
    18fe:	4684      	mov	ip, r0
    1900:	4462      	add	r2, ip
    1902:	0038      	movs	r0, r7
    1904:	4f29      	ldr	r7, [pc, #164]	; (19ac <usart_init+0x34c>)
    1906:	47b8      	blx	r7
    1908:	e7ea      	b.n	18e0 <usart_init+0x280>
		if(config->lin_slave_enable) {
    190a:	7ef3      	ldrb	r3, [r6, #27]
    190c:	2b00      	cmp	r3, #0
    190e:	d082      	beq.n	1816 <usart_init+0x1b6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1910:	2380      	movs	r3, #128	; 0x80
    1912:	04db      	lsls	r3, r3, #19
    1914:	431f      	orrs	r7, r3
    1916:	e77e      	b.n	1816 <usart_init+0x1b6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1918:	0020      	movs	r0, r4
    191a:	4b25      	ldr	r3, [pc, #148]	; (19b0 <usart_init+0x350>)
    191c:	4798      	blx	r3
    191e:	e007      	b.n	1930 <usart_init+0x2d0>
    1920:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1922:	2f04      	cmp	r7, #4
    1924:	d00d      	beq.n	1942 <usart_init+0x2e2>
    1926:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1928:	00bb      	lsls	r3, r7, #2
    192a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    192c:	2800      	cmp	r0, #0
    192e:	d0f3      	beq.n	1918 <usart_init+0x2b8>
		if (current_pinmux != PINMUX_UNUSED) {
    1930:	1c43      	adds	r3, r0, #1
    1932:	d0f5      	beq.n	1920 <usart_init+0x2c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1934:	a90e      	add	r1, sp, #56	; 0x38
    1936:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1938:	0c00      	lsrs	r0, r0, #16
    193a:	b2c0      	uxtb	r0, r0
    193c:	4b1d      	ldr	r3, [pc, #116]	; (19b4 <usart_init+0x354>)
    193e:	4798      	blx	r3
    1940:	e7ee      	b.n	1920 <usart_init+0x2c0>
		module->callback[i]            = NULL;
    1942:	2300      	movs	r3, #0
    1944:	60eb      	str	r3, [r5, #12]
    1946:	612b      	str	r3, [r5, #16]
    1948:	616b      	str	r3, [r5, #20]
    194a:	61ab      	str	r3, [r5, #24]
    194c:	61eb      	str	r3, [r5, #28]
    194e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1950:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1952:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1954:	2200      	movs	r2, #0
    1956:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1958:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    195a:	3330      	adds	r3, #48	; 0x30
    195c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    195e:	3301      	adds	r3, #1
    1960:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1962:	3301      	adds	r3, #1
    1964:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1966:	3301      	adds	r3, #1
    1968:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    196a:	6828      	ldr	r0, [r5, #0]
    196c:	4b07      	ldr	r3, [pc, #28]	; (198c <usart_init+0x32c>)
    196e:	4798      	blx	r3
    1970:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1972:	4911      	ldr	r1, [pc, #68]	; (19b8 <usart_init+0x358>)
    1974:	4b11      	ldr	r3, [pc, #68]	; (19bc <usart_init+0x35c>)
    1976:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1978:	00a4      	lsls	r4, r4, #2
    197a:	4b11      	ldr	r3, [pc, #68]	; (19c0 <usart_init+0x360>)
    197c:	50e5      	str	r5, [r4, r3]
	return status_code;
    197e:	2000      	movs	r0, #0
    1980:	e686      	b.n	1690 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1982:	2310      	movs	r3, #16
    1984:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1986:	2300      	movs	r3, #0
    1988:	9307      	str	r3, [sp, #28]
    198a:	e6ee      	b.n	176a <usart_init+0x10a>
    198c:	00001189 	.word	0x00001189
    1990:	40000400 	.word	0x40000400
    1994:	000023c9 	.word	0x000023c9
    1998:	00002359 	.word	0x00002359
    199c:	00000fe1 	.word	0x00000fe1
    19a0:	41002000 	.word	0x41002000
    19a4:	000023ed 	.word	0x000023ed
    19a8:	00000f23 	.word	0x00000f23
    19ac:	00000f4d 	.word	0x00000f4d
    19b0:	0000102d 	.word	0x0000102d
    19b4:	000024c5 	.word	0x000024c5
    19b8:	00001aed 	.word	0x00001aed
    19bc:	000011c5 	.word	0x000011c5
    19c0:	20001090 	.word	0x20001090

000019c4 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    19c4:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    19c6:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    19c8:	2a00      	cmp	r2, #0
    19ca:	d101      	bne.n	19d0 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    19cc:	0018      	movs	r0, r3
    19ce:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    19d0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    19d2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    19d4:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    19d6:	2a00      	cmp	r2, #0
    19d8:	d1f8      	bne.n	19cc <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    19da:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    19dc:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    19de:	2102      	movs	r1, #2
    19e0:	7e13      	ldrb	r3, [r2, #24]
    19e2:	420b      	tst	r3, r1
    19e4:	d0fc      	beq.n	19e0 <usart_write_wait+0x1c>
	return STATUS_OK;
    19e6:	2300      	movs	r3, #0
    19e8:	e7f0      	b.n	19cc <usart_write_wait+0x8>

000019ea <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    19ea:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    19ec:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    19ee:	2a00      	cmp	r2, #0
    19f0:	d101      	bne.n	19f6 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    19f2:	0018      	movs	r0, r3
    19f4:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    19f6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    19f8:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    19fa:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    19fc:	2a00      	cmp	r2, #0
    19fe:	d1f8      	bne.n	19f2 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a00:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1a02:	7e10      	ldrb	r0, [r2, #24]
    1a04:	0740      	lsls	r0, r0, #29
    1a06:	d5f4      	bpl.n	19f2 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1a08:	8b53      	ldrh	r3, [r2, #26]
    1a0a:	b2db      	uxtb	r3, r3
	if (error_code) {
    1a0c:	0698      	lsls	r0, r3, #26
    1a0e:	d01d      	beq.n	1a4c <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1a10:	0798      	lsls	r0, r3, #30
    1a12:	d503      	bpl.n	1a1c <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1a14:	2302      	movs	r3, #2
    1a16:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1a18:	3318      	adds	r3, #24
    1a1a:	e7ea      	b.n	19f2 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1a1c:	0758      	lsls	r0, r3, #29
    1a1e:	d503      	bpl.n	1a28 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1a20:	2304      	movs	r3, #4
    1a22:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1a24:	331a      	adds	r3, #26
    1a26:	e7e4      	b.n	19f2 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1a28:	07d8      	lsls	r0, r3, #31
    1a2a:	d503      	bpl.n	1a34 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1a2c:	2301      	movs	r3, #1
    1a2e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1a30:	3312      	adds	r3, #18
    1a32:	e7de      	b.n	19f2 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1a34:	06d8      	lsls	r0, r3, #27
    1a36:	d503      	bpl.n	1a40 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1a38:	2310      	movs	r3, #16
    1a3a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1a3c:	3332      	adds	r3, #50	; 0x32
    1a3e:	e7d8      	b.n	19f2 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1a40:	069b      	lsls	r3, r3, #26
    1a42:	d503      	bpl.n	1a4c <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1a44:	2320      	movs	r3, #32
    1a46:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1a48:	3321      	adds	r3, #33	; 0x21
    1a4a:	e7d2      	b.n	19f2 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1a4c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1a4e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1a50:	2300      	movs	r3, #0
    1a52:	e7ce      	b.n	19f2 <usart_read_wait+0x8>

00001a54 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1a54:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a56:	46d6      	mov	lr, sl
    1a58:	b500      	push	{lr}
    1a5a:	b084      	sub	sp, #16
    1a5c:	0004      	movs	r4, r0
    1a5e:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1a60:	2017      	movs	r0, #23
	if (length == 0) {
    1a62:	2a00      	cmp	r2, #0
    1a64:	d103      	bne.n	1a6e <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    1a66:	b004      	add	sp, #16
    1a68:	bc04      	pop	{r2}
    1a6a:	4692      	mov	sl, r2
    1a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    1a6e:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    1a70:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    1a72:	2b00      	cmp	r3, #0
    1a74:	d0f7      	beq.n	1a66 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a76:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    1a78:	3a01      	subs	r2, #1
    1a7a:	b293      	uxth	r3, r2
    1a7c:	469a      	mov	sl, r3
    1a7e:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    1a80:	2704      	movs	r7, #4
    1a82:	e019      	b.n	1ab8 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    1a84:	2300      	movs	r3, #0
    1a86:	aa02      	add	r2, sp, #8
    1a88:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    1a8a:	1d91      	adds	r1, r2, #6
    1a8c:	0020      	movs	r0, r4
    1a8e:	4b15      	ldr	r3, [pc, #84]	; (1ae4 <usart_read_buffer_wait+0x90>)
    1a90:	4798      	blx	r3
		if (retval != STATUS_OK) {
    1a92:	2800      	cmp	r0, #0
    1a94:	d1e7      	bne.n	1a66 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    1a96:	1c69      	adds	r1, r5, #1
    1a98:	b289      	uxth	r1, r1
    1a9a:	ab02      	add	r3, sp, #8
    1a9c:	88db      	ldrh	r3, [r3, #6]
    1a9e:	9a01      	ldr	r2, [sp, #4]
    1aa0:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1aa2:	7962      	ldrb	r2, [r4, #5]
    1aa4:	2a01      	cmp	r2, #1
    1aa6:	d014      	beq.n	1ad2 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    1aa8:	000d      	movs	r5, r1
	while (length--) {
    1aaa:	4653      	mov	r3, sl
    1aac:	3b01      	subs	r3, #1
    1aae:	b29b      	uxth	r3, r3
    1ab0:	469a      	mov	sl, r3
    1ab2:	4b0d      	ldr	r3, [pc, #52]	; (1ae8 <usart_read_buffer_wait+0x94>)
    1ab4:	459a      	cmp	sl, r3
    1ab6:	d0d6      	beq.n	1a66 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    1ab8:	7e33      	ldrb	r3, [r6, #24]
    1aba:	423b      	tst	r3, r7
    1abc:	d1e2      	bne.n	1a84 <usart_read_buffer_wait+0x30>
    1abe:	4b0a      	ldr	r3, [pc, #40]	; (1ae8 <usart_read_buffer_wait+0x94>)
    1ac0:	7e32      	ldrb	r2, [r6, #24]
    1ac2:	423a      	tst	r2, r7
    1ac4:	d1de      	bne.n	1a84 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    1ac6:	2b01      	cmp	r3, #1
    1ac8:	d009      	beq.n	1ade <usart_read_buffer_wait+0x8a>
    1aca:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1acc:	2b00      	cmp	r3, #0
    1ace:	d1f7      	bne.n	1ac0 <usart_read_buffer_wait+0x6c>
    1ad0:	e7d8      	b.n	1a84 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    1ad2:	3502      	adds	r5, #2
    1ad4:	b2ad      	uxth	r5, r5
    1ad6:	0a1b      	lsrs	r3, r3, #8
    1ad8:	9a01      	ldr	r2, [sp, #4]
    1ada:	5453      	strb	r3, [r2, r1]
    1adc:	e7e5      	b.n	1aaa <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    1ade:	2012      	movs	r0, #18
    1ae0:	e7c1      	b.n	1a66 <usart_read_buffer_wait+0x12>
    1ae2:	46c0      	nop			; (mov r8, r8)
    1ae4:	000019eb 	.word	0x000019eb
    1ae8:	0000ffff 	.word	0x0000ffff

00001aec <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1aee:	0080      	lsls	r0, r0, #2
    1af0:	4b62      	ldr	r3, [pc, #392]	; (1c7c <_usart_interrupt_handler+0x190>)
    1af2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1af4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1af6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1af8:	2b00      	cmp	r3, #0
    1afa:	d1fc      	bne.n	1af6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1afc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1afe:	7da6      	ldrb	r6, [r4, #22]
    1b00:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1b02:	2330      	movs	r3, #48	; 0x30
    1b04:	5ceb      	ldrb	r3, [r5, r3]
    1b06:	2231      	movs	r2, #49	; 0x31
    1b08:	5caf      	ldrb	r7, [r5, r2]
    1b0a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1b0c:	07f3      	lsls	r3, r6, #31
    1b0e:	d522      	bpl.n	1b56 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1b10:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1b12:	b29b      	uxth	r3, r3
    1b14:	2b00      	cmp	r3, #0
    1b16:	d01c      	beq.n	1b52 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1b18:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1b1a:	7813      	ldrb	r3, [r2, #0]
    1b1c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1b1e:	1c51      	adds	r1, r2, #1
    1b20:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1b22:	7969      	ldrb	r1, [r5, #5]
    1b24:	2901      	cmp	r1, #1
    1b26:	d00e      	beq.n	1b46 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1b28:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1b2a:	05db      	lsls	r3, r3, #23
    1b2c:	0ddb      	lsrs	r3, r3, #23
    1b2e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1b30:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1b32:	3b01      	subs	r3, #1
    1b34:	b29b      	uxth	r3, r3
    1b36:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1b38:	2b00      	cmp	r3, #0
    1b3a:	d10c      	bne.n	1b56 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1b3c:	3301      	adds	r3, #1
    1b3e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1b40:	3301      	adds	r3, #1
    1b42:	75a3      	strb	r3, [r4, #22]
    1b44:	e007      	b.n	1b56 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1b46:	7851      	ldrb	r1, [r2, #1]
    1b48:	0209      	lsls	r1, r1, #8
    1b4a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1b4c:	3202      	adds	r2, #2
    1b4e:	62aa      	str	r2, [r5, #40]	; 0x28
    1b50:	e7eb      	b.n	1b2a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1b52:	2301      	movs	r3, #1
    1b54:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1b56:	07b3      	lsls	r3, r6, #30
    1b58:	d506      	bpl.n	1b68 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1b5a:	2302      	movs	r3, #2
    1b5c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1b5e:	2200      	movs	r2, #0
    1b60:	3331      	adds	r3, #49	; 0x31
    1b62:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1b64:	07fb      	lsls	r3, r7, #31
    1b66:	d41a      	bmi.n	1b9e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1b68:	0773      	lsls	r3, r6, #29
    1b6a:	d565      	bpl.n	1c38 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1b6c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1b6e:	b29b      	uxth	r3, r3
    1b70:	2b00      	cmp	r3, #0
    1b72:	d05f      	beq.n	1c34 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1b74:	8b63      	ldrh	r3, [r4, #26]
    1b76:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1b78:	071a      	lsls	r2, r3, #28
    1b7a:	d414      	bmi.n	1ba6 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1b7c:	223f      	movs	r2, #63	; 0x3f
    1b7e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1b80:	2b00      	cmp	r3, #0
    1b82:	d034      	beq.n	1bee <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1b84:	079a      	lsls	r2, r3, #30
    1b86:	d511      	bpl.n	1bac <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1b88:	221a      	movs	r2, #26
    1b8a:	2332      	movs	r3, #50	; 0x32
    1b8c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1b8e:	3b30      	subs	r3, #48	; 0x30
    1b90:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1b92:	077b      	lsls	r3, r7, #29
    1b94:	d550      	bpl.n	1c38 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1b96:	0028      	movs	r0, r5
    1b98:	696b      	ldr	r3, [r5, #20]
    1b9a:	4798      	blx	r3
    1b9c:	e04c      	b.n	1c38 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1b9e:	0028      	movs	r0, r5
    1ba0:	68eb      	ldr	r3, [r5, #12]
    1ba2:	4798      	blx	r3
    1ba4:	e7e0      	b.n	1b68 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1ba6:	2237      	movs	r2, #55	; 0x37
    1ba8:	4013      	ands	r3, r2
    1baa:	e7e9      	b.n	1b80 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1bac:	075a      	lsls	r2, r3, #29
    1bae:	d505      	bpl.n	1bbc <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1bb0:	221e      	movs	r2, #30
    1bb2:	2332      	movs	r3, #50	; 0x32
    1bb4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1bb6:	3b2e      	subs	r3, #46	; 0x2e
    1bb8:	8363      	strh	r3, [r4, #26]
    1bba:	e7ea      	b.n	1b92 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1bbc:	07da      	lsls	r2, r3, #31
    1bbe:	d505      	bpl.n	1bcc <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1bc0:	2213      	movs	r2, #19
    1bc2:	2332      	movs	r3, #50	; 0x32
    1bc4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1bc6:	3b31      	subs	r3, #49	; 0x31
    1bc8:	8363      	strh	r3, [r4, #26]
    1bca:	e7e2      	b.n	1b92 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1bcc:	06da      	lsls	r2, r3, #27
    1bce:	d505      	bpl.n	1bdc <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1bd0:	2242      	movs	r2, #66	; 0x42
    1bd2:	2332      	movs	r3, #50	; 0x32
    1bd4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1bd6:	3b22      	subs	r3, #34	; 0x22
    1bd8:	8363      	strh	r3, [r4, #26]
    1bda:	e7da      	b.n	1b92 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1bdc:	2220      	movs	r2, #32
    1bde:	421a      	tst	r2, r3
    1be0:	d0d7      	beq.n	1b92 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1be2:	3221      	adds	r2, #33	; 0x21
    1be4:	2332      	movs	r3, #50	; 0x32
    1be6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1be8:	3b12      	subs	r3, #18
    1bea:	8363      	strh	r3, [r4, #26]
    1bec:	e7d1      	b.n	1b92 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1bee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1bf0:	05db      	lsls	r3, r3, #23
    1bf2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1bf4:	b2da      	uxtb	r2, r3
    1bf6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1bf8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1bfa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1bfc:	1c51      	adds	r1, r2, #1
    1bfe:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1c00:	7969      	ldrb	r1, [r5, #5]
    1c02:	2901      	cmp	r1, #1
    1c04:	d010      	beq.n	1c28 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1c06:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1c08:	3b01      	subs	r3, #1
    1c0a:	b29b      	uxth	r3, r3
    1c0c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1c0e:	2b00      	cmp	r3, #0
    1c10:	d112      	bne.n	1c38 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1c12:	3304      	adds	r3, #4
    1c14:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1c16:	2200      	movs	r2, #0
    1c18:	332e      	adds	r3, #46	; 0x2e
    1c1a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1c1c:	07bb      	lsls	r3, r7, #30
    1c1e:	d50b      	bpl.n	1c38 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1c20:	0028      	movs	r0, r5
    1c22:	692b      	ldr	r3, [r5, #16]
    1c24:	4798      	blx	r3
    1c26:	e007      	b.n	1c38 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1c28:	0a1b      	lsrs	r3, r3, #8
    1c2a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1c2c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1c2e:	3301      	adds	r3, #1
    1c30:	626b      	str	r3, [r5, #36]	; 0x24
    1c32:	e7e8      	b.n	1c06 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1c34:	2304      	movs	r3, #4
    1c36:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1c38:	06f3      	lsls	r3, r6, #27
    1c3a:	d504      	bpl.n	1c46 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1c3c:	2310      	movs	r3, #16
    1c3e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1c40:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1c42:	06fb      	lsls	r3, r7, #27
    1c44:	d40e      	bmi.n	1c64 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1c46:	06b3      	lsls	r3, r6, #26
    1c48:	d504      	bpl.n	1c54 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1c4a:	2320      	movs	r3, #32
    1c4c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1c4e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1c50:	073b      	lsls	r3, r7, #28
    1c52:	d40b      	bmi.n	1c6c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1c54:	0733      	lsls	r3, r6, #28
    1c56:	d504      	bpl.n	1c62 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1c58:	2308      	movs	r3, #8
    1c5a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1c5c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1c5e:	06bb      	lsls	r3, r7, #26
    1c60:	d408      	bmi.n	1c74 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1c64:	0028      	movs	r0, r5
    1c66:	69eb      	ldr	r3, [r5, #28]
    1c68:	4798      	blx	r3
    1c6a:	e7ec      	b.n	1c46 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1c6c:	0028      	movs	r0, r5
    1c6e:	69ab      	ldr	r3, [r5, #24]
    1c70:	4798      	blx	r3
    1c72:	e7ef      	b.n	1c54 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1c74:	6a2b      	ldr	r3, [r5, #32]
    1c76:	0028      	movs	r0, r5
    1c78:	4798      	blx	r3
}
    1c7a:	e7f2      	b.n	1c62 <_usart_interrupt_handler+0x176>
    1c7c:	20001090 	.word	0x20001090

00001c80 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1c80:	b510      	push	{r4, lr}
	switch (clock_source) {
    1c82:	2808      	cmp	r0, #8
    1c84:	d803      	bhi.n	1c8e <system_clock_source_get_hz+0xe>
    1c86:	0080      	lsls	r0, r0, #2
    1c88:	4b1c      	ldr	r3, [pc, #112]	; (1cfc <system_clock_source_get_hz+0x7c>)
    1c8a:	581b      	ldr	r3, [r3, r0]
    1c8c:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    1c8e:	2000      	movs	r0, #0
    1c90:	e032      	b.n	1cf8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    1c92:	4b1b      	ldr	r3, [pc, #108]	; (1d00 <system_clock_source_get_hz+0x80>)
    1c94:	6918      	ldr	r0, [r3, #16]
    1c96:	e02f      	b.n	1cf8 <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    1c98:	4b1a      	ldr	r3, [pc, #104]	; (1d04 <system_clock_source_get_hz+0x84>)
    1c9a:	7d18      	ldrb	r0, [r3, #20]
    1c9c:	0700      	lsls	r0, r0, #28
    1c9e:	0f80      	lsrs	r0, r0, #30
    1ca0:	1c43      	adds	r3, r0, #1
    1ca2:	4819      	ldr	r0, [pc, #100]	; (1d08 <system_clock_source_get_hz+0x88>)
    1ca4:	4358      	muls	r0, r3
    1ca6:	e027      	b.n	1cf8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    1ca8:	4b15      	ldr	r3, [pc, #84]	; (1d00 <system_clock_source_get_hz+0x80>)
    1caa:	6958      	ldr	r0, [r3, #20]
    1cac:	e024      	b.n	1cf8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    1cae:	4b14      	ldr	r3, [pc, #80]	; (1d00 <system_clock_source_get_hz+0x80>)
    1cb0:	681b      	ldr	r3, [r3, #0]
			return 0;
    1cb2:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    1cb4:	079b      	lsls	r3, r3, #30
    1cb6:	d51f      	bpl.n	1cf8 <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    1cb8:	4912      	ldr	r1, [pc, #72]	; (1d04 <system_clock_source_get_hz+0x84>)
    1cba:	2280      	movs	r2, #128	; 0x80
    1cbc:	0052      	lsls	r2, r2, #1
    1cbe:	68cb      	ldr	r3, [r1, #12]
    1cc0:	4213      	tst	r3, r2
    1cc2:	d0fc      	beq.n	1cbe <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    1cc4:	4b0e      	ldr	r3, [pc, #56]	; (1d00 <system_clock_source_get_hz+0x80>)
    1cc6:	681b      	ldr	r3, [r3, #0]
    1cc8:	075b      	lsls	r3, r3, #29
    1cca:	d401      	bmi.n	1cd0 <system_clock_source_get_hz+0x50>
		return 48000000UL;
    1ccc:	480f      	ldr	r0, [pc, #60]	; (1d0c <system_clock_source_get_hz+0x8c>)
    1cce:	e013      	b.n	1cf8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    1cd0:	2000      	movs	r0, #0
    1cd2:	4b0f      	ldr	r3, [pc, #60]	; (1d10 <system_clock_source_get_hz+0x90>)
    1cd4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1cd6:	4b0a      	ldr	r3, [pc, #40]	; (1d00 <system_clock_source_get_hz+0x80>)
    1cd8:	689b      	ldr	r3, [r3, #8]
    1cda:	041b      	lsls	r3, r3, #16
    1cdc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    1cde:	4358      	muls	r0, r3
    1ce0:	e00a      	b.n	1cf8 <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1ce2:	2328      	movs	r3, #40	; 0x28
    1ce4:	4a07      	ldr	r2, [pc, #28]	; (1d04 <system_clock_source_get_hz+0x84>)
    1ce6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1ce8:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1cea:	079b      	lsls	r3, r3, #30
    1cec:	d504      	bpl.n	1cf8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    1cee:	4b04      	ldr	r3, [pc, #16]	; (1d00 <system_clock_source_get_hz+0x80>)
    1cf0:	68d8      	ldr	r0, [r3, #12]
    1cf2:	e001      	b.n	1cf8 <system_clock_source_get_hz+0x78>
		return 32768UL;
    1cf4:	2080      	movs	r0, #128	; 0x80
    1cf6:	0200      	lsls	r0, r0, #8
	}
}
    1cf8:	bd10      	pop	{r4, pc}
    1cfa:	46c0      	nop			; (mov r8, r8)
    1cfc:	00018ee4 	.word	0x00018ee4
    1d00:	20000a00 	.word	0x20000a00
    1d04:	40000c00 	.word	0x40000c00
    1d08:	003d0900 	.word	0x003d0900
    1d0c:	02dc6c00 	.word	0x02dc6c00
    1d10:	000023ed 	.word	0x000023ed

00001d14 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    1d14:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    1d16:	4c0b      	ldr	r4, [pc, #44]	; (1d44 <system_clock_source_osc16m_set_config+0x30>)
    1d18:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    1d1a:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1d1c:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    1d1e:	7802      	ldrb	r2, [r0, #0]
    1d20:	2103      	movs	r1, #3
    1d22:	4011      	ands	r1, r2
    1d24:	0089      	lsls	r1, r1, #2
    1d26:	220c      	movs	r2, #12
    1d28:	4393      	bics	r3, r2
    1d2a:	430b      	orrs	r3, r1
    1d2c:	3a0b      	subs	r2, #11
    1d2e:	4032      	ands	r2, r6
    1d30:	0192      	lsls	r2, r2, #6
    1d32:	2140      	movs	r1, #64	; 0x40
    1d34:	438b      	bics	r3, r1
    1d36:	4313      	orrs	r3, r2
    1d38:	01ed      	lsls	r5, r5, #7
    1d3a:	227f      	movs	r2, #127	; 0x7f
    1d3c:	4013      	ands	r3, r2
    1d3e:	432b      	orrs	r3, r5
    1d40:	7523      	strb	r3, [r4, #20]
}
    1d42:	bd70      	pop	{r4, r5, r6, pc}
    1d44:	40000c00 	.word	0x40000c00

00001d48 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1d48:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d4a:	46d6      	mov	lr, sl
    1d4c:	464f      	mov	r7, r9
    1d4e:	4646      	mov	r6, r8
    1d50:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    1d52:	4b20      	ldr	r3, [pc, #128]	; (1dd4 <system_clock_source_xosc32k_set_config+0x8c>)
    1d54:	469a      	mov	sl, r3
    1d56:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1d58:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1d5a:	7801      	ldrb	r1, [r0, #0]
    1d5c:	424c      	negs	r4, r1
    1d5e:	414c      	adcs	r4, r1
    1d60:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    1d62:	7881      	ldrb	r1, [r0, #2]
    1d64:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    1d66:	78c1      	ldrb	r1, [r0, #3]
    1d68:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    1d6a:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1d6c:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    1d6e:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1d70:	6840      	ldr	r0, [r0, #4]
    1d72:	4919      	ldr	r1, [pc, #100]	; (1dd8 <system_clock_source_xosc32k_set_config+0x90>)
    1d74:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    1d76:	2101      	movs	r1, #1
    1d78:	4648      	mov	r0, r9
    1d7a:	0080      	lsls	r0, r0, #2
    1d7c:	2204      	movs	r2, #4
    1d7e:	4393      	bics	r3, r2
    1d80:	4303      	orrs	r3, r0
    1d82:	4640      	mov	r0, r8
    1d84:	4008      	ands	r0, r1
    1d86:	00c0      	lsls	r0, r0, #3
    1d88:	3204      	adds	r2, #4
    1d8a:	4393      	bics	r3, r2
    1d8c:	4303      	orrs	r3, r0
    1d8e:	4660      	mov	r0, ip
    1d90:	4008      	ands	r0, r1
    1d92:	0100      	lsls	r0, r0, #4
    1d94:	3208      	adds	r2, #8
    1d96:	4393      	bics	r3, r2
    1d98:	4303      	orrs	r3, r0
    1d9a:	400f      	ands	r7, r1
    1d9c:	01bf      	lsls	r7, r7, #6
    1d9e:	2040      	movs	r0, #64	; 0x40
    1da0:	4383      	bics	r3, r0
    1da2:	433b      	orrs	r3, r7
    1da4:	400e      	ands	r6, r1
    1da6:	01f6      	lsls	r6, r6, #7
    1da8:	3040      	adds	r0, #64	; 0x40
    1daa:	4383      	bics	r3, r0
    1dac:	4333      	orrs	r3, r6
    1dae:	3879      	subs	r0, #121	; 0x79
    1db0:	4005      	ands	r5, r0
    1db2:	022d      	lsls	r5, r5, #8
    1db4:	4809      	ldr	r0, [pc, #36]	; (1ddc <system_clock_source_xosc32k_set_config+0x94>)
    1db6:	4003      	ands	r3, r0
    1db8:	432b      	orrs	r3, r5
    1dba:	4021      	ands	r1, r4
    1dbc:	0309      	lsls	r1, r1, #12
    1dbe:	4808      	ldr	r0, [pc, #32]	; (1de0 <system_clock_source_xosc32k_set_config+0x98>)
    1dc0:	4003      	ands	r3, r0
    1dc2:	430b      	orrs	r3, r1
    1dc4:	4652      	mov	r2, sl
    1dc6:	6153      	str	r3, [r2, #20]
}
    1dc8:	bc1c      	pop	{r2, r3, r4}
    1dca:	4690      	mov	r8, r2
    1dcc:	4699      	mov	r9, r3
    1dce:	46a2      	mov	sl, r4
    1dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1dd2:	46c0      	nop			; (mov r8, r8)
    1dd4:	40001000 	.word	0x40001000
    1dd8:	20000a00 	.word	0x20000a00
    1ddc:	fffff8ff 	.word	0xfffff8ff
    1de0:	ffffefff 	.word	0xffffefff

00001de4 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1de4:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1de6:	7a83      	ldrb	r3, [r0, #10]
    1de8:	069b      	lsls	r3, r3, #26
    1dea:	0c1b      	lsrs	r3, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    1dec:	8982      	ldrh	r2, [r0, #12]
    1dee:	0592      	lsls	r2, r2, #22
    1df0:	0d92      	lsrs	r2, r2, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1df2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1df4:	491a      	ldr	r1, [pc, #104]	; (1e60 <system_clock_source_dfll_set_config+0x7c>)
    1df6:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1df8:	7a03      	ldrb	r3, [r0, #8]
    1dfa:	7a42      	ldrb	r2, [r0, #9]
    1dfc:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1dfe:	8882      	ldrh	r2, [r0, #4]
    1e00:	88c4      	ldrh	r4, [r0, #6]
    1e02:	4322      	orrs	r2, r4
    1e04:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    1e06:	7842      	ldrb	r2, [r0, #1]
    1e08:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1e0a:	4313      	orrs	r3, r2
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    1e0c:	7882      	ldrb	r2, [r0, #2]
    1e0e:	0192      	lsls	r2, r2, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    1e10:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1e12:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1e14:	7803      	ldrb	r3, [r0, #0]
    1e16:	2b04      	cmp	r3, #4
    1e18:	d011      	beq.n	1e3e <system_clock_source_dfll_set_config+0x5a>
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1e1a:	2b20      	cmp	r3, #32
    1e1c:	d10e      	bne.n	1e3c <system_clock_source_dfll_set_config+0x58>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1e1e:	7b83      	ldrb	r3, [r0, #14]
    1e20:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    1e22:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1e24:	4313      	orrs	r3, r2
    1e26:	8a02      	ldrh	r2, [r0, #16]
    1e28:	0412      	lsls	r2, r2, #16
    1e2a:	490e      	ldr	r1, [pc, #56]	; (1e64 <system_clock_source_dfll_set_config+0x80>)
    1e2c:	400a      	ands	r2, r1
    1e2e:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1e30:	4a0b      	ldr	r2, [pc, #44]	; (1e60 <system_clock_source_dfll_set_config+0x7c>)
    1e32:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1e34:	6811      	ldr	r1, [r2, #0]
    1e36:	4b0c      	ldr	r3, [pc, #48]	; (1e68 <system_clock_source_dfll_set_config+0x84>)
    1e38:	430b      	orrs	r3, r1
    1e3a:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    1e3c:	bd10      	pop	{r4, pc}
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1e3e:	7b83      	ldrb	r3, [r0, #14]
    1e40:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    1e42:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1e44:	4313      	orrs	r3, r2
    1e46:	8a02      	ldrh	r2, [r0, #16]
    1e48:	0412      	lsls	r2, r2, #16
    1e4a:	4906      	ldr	r1, [pc, #24]	; (1e64 <system_clock_source_dfll_set_config+0x80>)
    1e4c:	400a      	ands	r2, r1
    1e4e:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1e50:	4a03      	ldr	r2, [pc, #12]	; (1e60 <system_clock_source_dfll_set_config+0x7c>)
    1e52:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1e54:	6813      	ldr	r3, [r2, #0]
    1e56:	2104      	movs	r1, #4
    1e58:	430b      	orrs	r3, r1
    1e5a:	6013      	str	r3, [r2, #0]
    1e5c:	e7ee      	b.n	1e3c <system_clock_source_dfll_set_config+0x58>
    1e5e:	46c0      	nop			; (mov r8, r8)
    1e60:	20000a00 	.word	0x20000a00
    1e64:	03ff0000 	.word	0x03ff0000
    1e68:	00000424 	.word	0x00000424

00001e6c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1e6c:	2808      	cmp	r0, #8
    1e6e:	d803      	bhi.n	1e78 <system_clock_source_enable+0xc>
    1e70:	0080      	lsls	r0, r0, #2
    1e72:	4b29      	ldr	r3, [pc, #164]	; (1f18 <system_clock_source_enable+0xac>)
    1e74:	581b      	ldr	r3, [r3, r0]
    1e76:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1e78:	2017      	movs	r0, #23
    1e7a:	e04b      	b.n	1f14 <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    1e7c:	4a27      	ldr	r2, [pc, #156]	; (1f1c <system_clock_source_enable+0xb0>)
    1e7e:	7d13      	ldrb	r3, [r2, #20]
    1e80:	2102      	movs	r1, #2
    1e82:	430b      	orrs	r3, r1
    1e84:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    1e86:	2000      	movs	r0, #0
    1e88:	e044      	b.n	1f14 <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    1e8a:	4a25      	ldr	r2, [pc, #148]	; (1f20 <system_clock_source_enable+0xb4>)
    1e8c:	6993      	ldr	r3, [r2, #24]
    1e8e:	2102      	movs	r1, #2
    1e90:	430b      	orrs	r3, r1
    1e92:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1e94:	2000      	movs	r0, #0
		break;
    1e96:	e03d      	b.n	1f14 <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    1e98:	4a20      	ldr	r2, [pc, #128]	; (1f1c <system_clock_source_enable+0xb0>)
    1e9a:	8a13      	ldrh	r3, [r2, #16]
    1e9c:	2102      	movs	r1, #2
    1e9e:	430b      	orrs	r3, r1
    1ea0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1ea2:	2000      	movs	r0, #0
		break;
    1ea4:	e036      	b.n	1f14 <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    1ea6:	4a1e      	ldr	r2, [pc, #120]	; (1f20 <system_clock_source_enable+0xb4>)
    1ea8:	6953      	ldr	r3, [r2, #20]
    1eaa:	2102      	movs	r1, #2
    1eac:	430b      	orrs	r3, r1
    1eae:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    1eb0:	2000      	movs	r0, #0
		break;
    1eb2:	e02f      	b.n	1f14 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    1eb4:	491b      	ldr	r1, [pc, #108]	; (1f24 <system_clock_source_enable+0xb8>)
    1eb6:	680b      	ldr	r3, [r1, #0]
    1eb8:	2202      	movs	r2, #2
    1eba:	4313      	orrs	r3, r2
    1ebc:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    1ebe:	4b17      	ldr	r3, [pc, #92]	; (1f1c <system_clock_source_enable+0xb0>)
    1ec0:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    1ec2:	0019      	movs	r1, r3
    1ec4:	32fe      	adds	r2, #254	; 0xfe
    1ec6:	68cb      	ldr	r3, [r1, #12]
    1ec8:	4213      	tst	r3, r2
    1eca:	d0fc      	beq.n	1ec6 <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1ecc:	4a15      	ldr	r2, [pc, #84]	; (1f24 <system_clock_source_enable+0xb8>)
    1ece:	6891      	ldr	r1, [r2, #8]
    1ed0:	4b12      	ldr	r3, [pc, #72]	; (1f1c <system_clock_source_enable+0xb0>)
    1ed2:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1ed4:	6852      	ldr	r2, [r2, #4]
    1ed6:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    1ed8:	2200      	movs	r2, #0
    1eda:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    1edc:	0019      	movs	r1, r3
    1ede:	3201      	adds	r2, #1
    1ee0:	32ff      	adds	r2, #255	; 0xff
    1ee2:	68cb      	ldr	r3, [r1, #12]
    1ee4:	4213      	tst	r3, r2
    1ee6:	d0fc      	beq.n	1ee2 <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1ee8:	4b0e      	ldr	r3, [pc, #56]	; (1f24 <system_clock_source_enable+0xb8>)
    1eea:	681b      	ldr	r3, [r3, #0]
    1eec:	b29b      	uxth	r3, r3
    1eee:	4a0b      	ldr	r2, [pc, #44]	; (1f1c <system_clock_source_enable+0xb0>)
    1ef0:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    1ef2:	2000      	movs	r0, #0
    1ef4:	e00e      	b.n	1f14 <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    1ef6:	4909      	ldr	r1, [pc, #36]	; (1f1c <system_clock_source_enable+0xb0>)
    1ef8:	2228      	movs	r2, #40	; 0x28
    1efa:	5c8b      	ldrb	r3, [r1, r2]
    1efc:	2002      	movs	r0, #2
    1efe:	4303      	orrs	r3, r0
    1f00:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    1f02:	0008      	movs	r0, r1
    1f04:	2138      	movs	r1, #56	; 0x38
    1f06:	3a26      	subs	r2, #38	; 0x26
    1f08:	5c43      	ldrb	r3, [r0, r1]
    1f0a:	4213      	tst	r3, r2
    1f0c:	d1fc      	bne.n	1f08 <system_clock_source_enable+0x9c>
	return STATUS_OK;
    1f0e:	2000      	movs	r0, #0
    1f10:	e000      	b.n	1f14 <system_clock_source_enable+0xa8>
		return STATUS_OK;
    1f12:	2000      	movs	r0, #0
}
    1f14:	4770      	bx	lr
    1f16:	46c0      	nop			; (mov r8, r8)
    1f18:	00018f08 	.word	0x00018f08
    1f1c:	40000c00 	.word	0x40000c00
    1f20:	40001000 	.word	0x40001000
    1f24:	20000a00 	.word	0x20000a00

00001f28 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1f28:	2808      	cmp	r0, #8
    1f2a:	d832      	bhi.n	1f92 <system_clock_source_disable+0x6a>
    1f2c:	0080      	lsls	r0, r0, #2
    1f2e:	4b1a      	ldr	r3, [pc, #104]	; (1f98 <system_clock_source_disable+0x70>)
    1f30:	581b      	ldr	r3, [r3, r0]
    1f32:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    1f34:	4a19      	ldr	r2, [pc, #100]	; (1f9c <system_clock_source_disable+0x74>)
    1f36:	7d13      	ldrb	r3, [r2, #20]
    1f38:	2102      	movs	r1, #2
    1f3a:	438b      	bics	r3, r1
    1f3c:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    1f3e:	2000      	movs	r0, #0
}
    1f40:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    1f42:	4a17      	ldr	r2, [pc, #92]	; (1fa0 <system_clock_source_disable+0x78>)
    1f44:	6993      	ldr	r3, [r2, #24]
    1f46:	2102      	movs	r1, #2
    1f48:	438b      	bics	r3, r1
    1f4a:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    1f4c:	2000      	movs	r0, #0
		break;
    1f4e:	e7f7      	b.n	1f40 <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    1f50:	4a12      	ldr	r2, [pc, #72]	; (1f9c <system_clock_source_disable+0x74>)
    1f52:	8a13      	ldrh	r3, [r2, #16]
    1f54:	2102      	movs	r1, #2
    1f56:	438b      	bics	r3, r1
    1f58:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1f5a:	2000      	movs	r0, #0
		break;
    1f5c:	e7f0      	b.n	1f40 <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    1f5e:	4a10      	ldr	r2, [pc, #64]	; (1fa0 <system_clock_source_disable+0x78>)
    1f60:	6953      	ldr	r3, [r2, #20]
    1f62:	2102      	movs	r1, #2
    1f64:	438b      	bics	r3, r1
    1f66:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    1f68:	2000      	movs	r0, #0
		break;
    1f6a:	e7e9      	b.n	1f40 <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    1f6c:	4b0d      	ldr	r3, [pc, #52]	; (1fa4 <system_clock_source_disable+0x7c>)
    1f6e:	681a      	ldr	r2, [r3, #0]
    1f70:	2102      	movs	r1, #2
    1f72:	438a      	bics	r2, r1
    1f74:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1f76:	681b      	ldr	r3, [r3, #0]
    1f78:	b29b      	uxth	r3, r3
    1f7a:	4a08      	ldr	r2, [pc, #32]	; (1f9c <system_clock_source_disable+0x74>)
    1f7c:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    1f7e:	2000      	movs	r0, #0
		break;
    1f80:	e7de      	b.n	1f40 <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    1f82:	4906      	ldr	r1, [pc, #24]	; (1f9c <system_clock_source_disable+0x74>)
    1f84:	2228      	movs	r2, #40	; 0x28
    1f86:	5c8b      	ldrb	r3, [r1, r2]
    1f88:	2002      	movs	r0, #2
    1f8a:	4383      	bics	r3, r0
    1f8c:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1f8e:	2000      	movs	r0, #0
		break;
    1f90:	e7d6      	b.n	1f40 <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    1f92:	2017      	movs	r0, #23
    1f94:	e7d4      	b.n	1f40 <system_clock_source_disable+0x18>
    1f96:	46c0      	nop			; (mov r8, r8)
    1f98:	00018f2c 	.word	0x00018f2c
    1f9c:	40000c00 	.word	0x40000c00
    1fa0:	40001000 	.word	0x40001000
    1fa4:	20000a00 	.word	0x20000a00

00001fa8 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1faa:	46ce      	mov	lr, r9
    1fac:	4647      	mov	r7, r8
    1fae:	b580      	push	{r7, lr}
    1fb0:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    1fb2:	2280      	movs	r2, #128	; 0x80
    1fb4:	0052      	lsls	r2, r2, #1
    1fb6:	4b76      	ldr	r3, [pc, #472]	; (2190 <STACK_SIZE+0x190>)
    1fb8:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    1fba:	3afd      	subs	r2, #253	; 0xfd
    1fbc:	4b75      	ldr	r3, [pc, #468]	; (2194 <STACK_SIZE+0x194>)
    1fbe:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1fc0:	4a75      	ldr	r2, [pc, #468]	; (2198 <STACK_SIZE+0x198>)
    1fc2:	6853      	ldr	r3, [r2, #4]
    1fc4:	211e      	movs	r1, #30
    1fc6:	438b      	bics	r3, r1
    1fc8:	391a      	subs	r1, #26
    1fca:	430b      	orrs	r3, r1
    1fcc:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    1fce:	2380      	movs	r3, #128	; 0x80
    1fd0:	05db      	lsls	r3, r3, #23
    1fd2:	789b      	ldrb	r3, [r3, #2]
    1fd4:	2b02      	cmp	r3, #2
    1fd6:	d00f      	beq.n	1ff8 <system_clock_init+0x50>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    1fd8:	2380      	movs	r3, #128	; 0x80
    1fda:	05db      	lsls	r3, r3, #23
    1fdc:	789b      	ldrb	r3, [r3, #2]
    1fde:	b25b      	sxtb	r3, r3
    1fe0:	2b00      	cmp	r3, #0
    1fe2:	db09      	blt.n	1ff8 <system_clock_init+0x50>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    1fe4:	2380      	movs	r3, #128	; 0x80
    1fe6:	05db      	lsls	r3, r3, #23
    1fe8:	2201      	movs	r2, #1
    1fea:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    1fec:	3201      	adds	r2, #1
    1fee:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    1ff0:	001a      	movs	r2, r3
    1ff2:	7993      	ldrb	r3, [r2, #6]
    1ff4:	2b00      	cmp	r3, #0
    1ff6:	d0fc      	beq.n	1ff2 <system_clock_init+0x4a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1ff8:	a809      	add	r0, sp, #36	; 0x24
    1ffa:	2300      	movs	r3, #0
    1ffc:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    1ffe:	2280      	movs	r2, #128	; 0x80
    2000:	0212      	lsls	r2, r2, #8
    2002:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    2004:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    2006:	2201      	movs	r2, #1
    2008:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    200a:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    200c:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    200e:	3203      	adds	r2, #3
    2010:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2012:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2014:	4b61      	ldr	r3, [pc, #388]	; (219c <STACK_SIZE+0x19c>)
    2016:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2018:	2005      	movs	r0, #5
    201a:	4b61      	ldr	r3, [pc, #388]	; (21a0 <STACK_SIZE+0x1a0>)
    201c:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    201e:	4961      	ldr	r1, [pc, #388]	; (21a4 <STACK_SIZE+0x1a4>)
    2020:	2201      	movs	r2, #1
    2022:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2024:	421a      	tst	r2, r3
    2026:	d0fc      	beq.n	2022 <STACK_SIZE+0x22>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2028:	a901      	add	r1, sp, #4
    202a:	2501      	movs	r5, #1
    202c:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    202e:	2400      	movs	r4, #0
    2030:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2032:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    2034:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    2036:	2303      	movs	r3, #3
    2038:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    203a:	2000      	movs	r0, #0
    203c:	4b5a      	ldr	r3, [pc, #360]	; (21a8 <STACK_SIZE+0x1a8>)
    203e:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    2040:	2006      	movs	r0, #6
    2042:	4b5a      	ldr	r3, [pc, #360]	; (21ac <STACK_SIZE+0x1ac>)
    2044:	4798      	blx	r3
	config->run_in_standby  = false;
    2046:	466b      	mov	r3, sp
    2048:	705c      	strb	r4, [r3, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    204a:	701d      	strb	r5, [r3, #0]
	osc16m_conf.on_demand       = 0;
    204c:	709c      	strb	r4, [r3, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    204e:	4668      	mov	r0, sp
    2050:	4b57      	ldr	r3, [pc, #348]	; (21b0 <STACK_SIZE+0x1b0>)
    2052:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    2054:	2006      	movs	r0, #6
    2056:	4b52      	ldr	r3, [pc, #328]	; (21a0 <STACK_SIZE+0x1a0>)
    2058:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    205a:	494d      	ldr	r1, [pc, #308]	; (2190 <STACK_SIZE+0x190>)
    205c:	2210      	movs	r2, #16
    205e:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    2060:	421a      	tst	r2, r3
    2062:	d0fc      	beq.n	205e <STACK_SIZE+0x5e>
	config->division_factor    = 1;
    2064:	a901      	add	r1, sp, #4
    2066:	2301      	movs	r3, #1
    2068:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    206a:	2400      	movs	r4, #0
    206c:	704c      	strb	r4, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    206e:	3305      	adds	r3, #5
    2070:	700b      	strb	r3, [r1, #0]
	config->run_in_standby     = false;
    2072:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    2074:	724c      	strb	r4, [r1, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    2076:	2000      	movs	r0, #0
    2078:	4b4b      	ldr	r3, [pc, #300]	; (21a8 <STACK_SIZE+0x1a8>)
    207a:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    207c:	ab04      	add	r3, sp, #16
    207e:	2200      	movs	r2, #0
    2080:	809c      	strh	r4, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2082:	80dc      	strh	r4, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2084:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2086:	725a      	strb	r2, [r3, #9]
	config->run_in_stanby   = false;
    2088:	709a      	strb	r2, [r3, #2]
	config->fine_value      = 0xff / 4; /* Midpoint */
    208a:	213f      	movs	r1, #63	; 0x3f
    208c:	8199      	strh	r1, [r3, #12]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    208e:	393b      	subs	r1, #59	; 0x3b
    2090:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2092:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    2094:	4b47      	ldr	r3, [pc, #284]	; (21b4 <STACK_SIZE+0x1b4>)
    2096:	681b      	ldr	r3, [r3, #0]
    2098:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    209a:	2b3f      	cmp	r3, #63	; 0x3f
    209c:	d100      	bne.n	20a0 <STACK_SIZE+0xa0>
    209e:	e074      	b.n	218a <STACK_SIZE+0x18a>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    20a0:	a804      	add	r0, sp, #16
    20a2:	7283      	strb	r3, [r0, #10]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    20a4:	23b7      	movs	r3, #183	; 0xb7
    20a6:	00db      	lsls	r3, r3, #3
    20a8:	8243      	strh	r3, [r0, #18]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    20aa:	2307      	movs	r3, #7
    20ac:	7383      	strb	r3, [r0, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    20ae:	3338      	adds	r3, #56	; 0x38
    20b0:	8203      	strh	r3, [r0, #16]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    20b2:	4b41      	ldr	r3, [pc, #260]	; (21b8 <STACK_SIZE+0x1b8>)
    20b4:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    20b6:	4b41      	ldr	r3, [pc, #260]	; (21bc <STACK_SIZE+0x1bc>)
    20b8:	4798      	blx	r3
	config->division_factor    = 1;
    20ba:	ac01      	add	r4, sp, #4
    20bc:	2601      	movs	r6, #1
    20be:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    20c0:	2500      	movs	r5, #0
    20c2:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    20c4:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    20c6:	2305      	movs	r3, #5
    20c8:	4699      	mov	r9, r3
    20ca:	7023      	strb	r3, [r4, #0]
    20cc:	7226      	strb	r6, [r4, #8]
    20ce:	0021      	movs	r1, r4
    20d0:	2001      	movs	r0, #1
    20d2:	4b35      	ldr	r3, [pc, #212]	; (21a8 <STACK_SIZE+0x1a8>)
    20d4:	4698      	mov	r8, r3
    20d6:	4798      	blx	r3
    20d8:	2001      	movs	r0, #1
    20da:	4f39      	ldr	r7, [pc, #228]	; (21c0 <STACK_SIZE+0x1c0>)
    20dc:	47b8      	blx	r7
	config->high_when_disabled = false;
    20de:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    20e0:	2306      	movs	r3, #6
    20e2:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    20e4:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    20e6:	7265      	strb	r5, [r4, #9]
    20e8:	464b      	mov	r3, r9
    20ea:	6063      	str	r3, [r4, #4]
    20ec:	0021      	movs	r1, r4
    20ee:	2002      	movs	r0, #2
    20f0:	47c0      	blx	r8
    20f2:	2002      	movs	r0, #2
    20f4:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    20f6:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    20f8:	0021      	movs	r1, r4
    20fa:	2000      	movs	r0, #0
    20fc:	4b31      	ldr	r3, [pc, #196]	; (21c4 <STACK_SIZE+0x1c4>)
    20fe:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    2100:	2000      	movs	r0, #0
    2102:	4b31      	ldr	r3, [pc, #196]	; (21c8 <STACK_SIZE+0x1c8>)
    2104:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2106:	2007      	movs	r0, #7
    2108:	4b25      	ldr	r3, [pc, #148]	; (21a0 <STACK_SIZE+0x1a0>)
    210a:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    210c:	4920      	ldr	r1, [pc, #128]	; (2190 <STACK_SIZE+0x190>)
    210e:	22d0      	movs	r2, #208	; 0xd0
    2110:	0112      	lsls	r2, r2, #4
    2112:	68cb      	ldr	r3, [r1, #12]
    2114:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2116:	4293      	cmp	r3, r2
    2118:	d1fb      	bne.n	2112 <STACK_SIZE+0x112>
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    211a:	4c2c      	ldr	r4, [pc, #176]	; (21cc <STACK_SIZE+0x1cc>)
    211c:	2301      	movs	r3, #1
    211e:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    2120:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    2122:	7123      	strb	r3, [r4, #4]
	config->high_when_disabled = false;
    2124:	a901      	add	r1, sp, #4
    2126:	2300      	movs	r3, #0
    2128:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    212a:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    212c:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    212e:	3307      	adds	r3, #7
    2130:	700b      	strb	r3, [r1, #0]
    2132:	3b01      	subs	r3, #1
    2134:	604b      	str	r3, [r1, #4]
    2136:	2000      	movs	r0, #0
    2138:	4b1b      	ldr	r3, [pc, #108]	; (21a8 <STACK_SIZE+0x1a8>)
    213a:	4798      	blx	r3
    213c:	2000      	movs	r0, #0
    213e:	4b20      	ldr	r3, [pc, #128]	; (21c0 <STACK_SIZE+0x1c0>)
    2140:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    2142:	2000      	movs	r0, #0
    2144:	4b22      	ldr	r3, [pc, #136]	; (21d0 <STACK_SIZE+0x1d0>)
    2146:	4798      	blx	r3
    2148:	7921      	ldrb	r1, [r4, #4]
    214a:	b2c9      	uxtb	r1, r1
    214c:	4b21      	ldr	r3, [pc, #132]	; (21d4 <STACK_SIZE+0x1d4>)
    214e:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    2150:	4b21      	ldr	r3, [pc, #132]	; (21d8 <STACK_SIZE+0x1d8>)
    2152:	4298      	cmp	r0, r3
    2154:	d814      	bhi.n	2180 <STACK_SIZE+0x180>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    2156:	2380      	movs	r3, #128	; 0x80
    2158:	05db      	lsls	r3, r3, #23
    215a:	789b      	ldrb	r3, [r3, #2]
    215c:	2b00      	cmp	r3, #0
    215e:	d00f      	beq.n	2180 <STACK_SIZE+0x180>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    2160:	2380      	movs	r3, #128	; 0x80
    2162:	05db      	lsls	r3, r3, #23
    2164:	789b      	ldrb	r3, [r3, #2]
    2166:	b25b      	sxtb	r3, r3
    2168:	2b00      	cmp	r3, #0
    216a:	db09      	blt.n	2180 <STACK_SIZE+0x180>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    216c:	2380      	movs	r3, #128	; 0x80
    216e:	05db      	lsls	r3, r3, #23
    2170:	2201      	movs	r2, #1
    2172:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    2174:	2200      	movs	r2, #0
    2176:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    2178:	001a      	movs	r2, r3
    217a:	7993      	ldrb	r3, [r2, #6]
    217c:	2b00      	cmp	r3, #0
    217e:	d0fc      	beq.n	217a <STACK_SIZE+0x17a>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    2180:	b00d      	add	sp, #52	; 0x34
    2182:	bc0c      	pop	{r2, r3}
    2184:	4690      	mov	r8, r2
    2186:	4699      	mov	r9, r3
    2188:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    218a:	3b20      	subs	r3, #32
    218c:	e788      	b.n	20a0 <STACK_SIZE+0xa0>
    218e:	46c0      	nop			; (mov r8, r8)
    2190:	40000c00 	.word	0x40000c00
    2194:	40001400 	.word	0x40001400
    2198:	41004000 	.word	0x41004000
    219c:	00001d49 	.word	0x00001d49
    21a0:	00001e6d 	.word	0x00001e6d
    21a4:	40001000 	.word	0x40001000
    21a8:	00002201 	.word	0x00002201
    21ac:	00001f29 	.word	0x00001f29
    21b0:	00001d15 	.word	0x00001d15
    21b4:	00806020 	.word	0x00806020
    21b8:	00001de5 	.word	0x00001de5
    21bc:	000021dd 	.word	0x000021dd
    21c0:	000022ad 	.word	0x000022ad
    21c4:	000023c9 	.word	0x000023c9
    21c8:	00002359 	.word	0x00002359
    21cc:	40000400 	.word	0x40000400
    21d0:	000022ed 	.word	0x000022ed
    21d4:	00010e0d 	.word	0x00010e0d
    21d8:	00b71b00 	.word	0x00b71b00

000021dc <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    21dc:	4a06      	ldr	r2, [pc, #24]	; (21f8 <system_gclk_init+0x1c>)
    21de:	6953      	ldr	r3, [r2, #20]
    21e0:	2140      	movs	r1, #64	; 0x40
    21e2:	430b      	orrs	r3, r1
    21e4:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    21e6:	2201      	movs	r2, #1
    21e8:	4b04      	ldr	r3, [pc, #16]	; (21fc <system_gclk_init+0x20>)
    21ea:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    21ec:	0019      	movs	r1, r3
    21ee:	780b      	ldrb	r3, [r1, #0]
    21f0:	4213      	tst	r3, r2
    21f2:	d1fc      	bne.n	21ee <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    21f4:	4770      	bx	lr
    21f6:	46c0      	nop			; (mov r8, r8)
    21f8:	40000400 	.word	0x40000400
    21fc:	40001800 	.word	0x40001800

00002200 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2200:	b570      	push	{r4, r5, r6, lr}
    2202:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2204:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2206:	784b      	ldrb	r3, [r1, #1]
    2208:	2b00      	cmp	r3, #0
    220a:	d002      	beq.n	2212 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    220c:	2380      	movs	r3, #128	; 0x80
    220e:	00db      	lsls	r3, r3, #3
    2210:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2212:	7a4b      	ldrb	r3, [r1, #9]
    2214:	2b00      	cmp	r3, #0
    2216:	d002      	beq.n	221e <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2218:	2380      	movs	r3, #128	; 0x80
    221a:	011b      	lsls	r3, r3, #4
    221c:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    221e:	6848      	ldr	r0, [r1, #4]
    2220:	2801      	cmp	r0, #1
    2222:	d90f      	bls.n	2244 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2224:	1e43      	subs	r3, r0, #1
    2226:	4218      	tst	r0, r3
    2228:	d131      	bne.n	228e <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    222a:	2802      	cmp	r0, #2
    222c:	d92d      	bls.n	228a <system_gclk_gen_set_config+0x8a>
    222e:	2302      	movs	r3, #2
    2230:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2232:	3201      	adds	r2, #1
						mask <<= 1) {
    2234:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2236:	4298      	cmp	r0, r3
    2238:	d8fb      	bhi.n	2232 <system_gclk_gen_set_config+0x32>
    223a:	2380      	movs	r3, #128	; 0x80
    223c:	015b      	lsls	r3, r3, #5
    223e:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    2240:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2242:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2244:	7a0b      	ldrb	r3, [r1, #8]
    2246:	2b00      	cmp	r3, #0
    2248:	d002      	beq.n	2250 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    224a:	2380      	movs	r3, #128	; 0x80
    224c:	019b      	lsls	r3, r3, #6
    224e:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2250:	2604      	movs	r6, #4
    2252:	40a6      	lsls	r6, r4
    2254:	4911      	ldr	r1, [pc, #68]	; (229c <system_gclk_gen_set_config+0x9c>)
    2256:	4a12      	ldr	r2, [pc, #72]	; (22a0 <system_gclk_gen_set_config+0xa0>)
    2258:	684b      	ldr	r3, [r1, #4]
    225a:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    225c:	421e      	tst	r6, r3
    225e:	d1fb      	bne.n	2258 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    2260:	4b10      	ldr	r3, [pc, #64]	; (22a4 <system_gclk_gen_set_config+0xa4>)
    2262:	4798      	blx	r3
    2264:	00a4      	lsls	r4, r4, #2
    2266:	4b0d      	ldr	r3, [pc, #52]	; (229c <system_gclk_gen_set_config+0x9c>)
    2268:	469c      	mov	ip, r3
    226a:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    226c:	6a22      	ldr	r2, [r4, #32]
    226e:	2380      	movs	r3, #128	; 0x80
    2270:	005b      	lsls	r3, r3, #1
    2272:	401a      	ands	r2, r3
    2274:	432a      	orrs	r2, r5
    2276:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2278:	4661      	mov	r1, ip
    227a:	4a09      	ldr	r2, [pc, #36]	; (22a0 <system_gclk_gen_set_config+0xa0>)
    227c:	684b      	ldr	r3, [r1, #4]
    227e:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    2280:	421e      	tst	r6, r3
    2282:	d1fb      	bne.n	227c <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    2284:	4b08      	ldr	r3, [pc, #32]	; (22a8 <system_gclk_gen_set_config+0xa8>)
    2286:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    2288:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    228a:	2200      	movs	r2, #0
    228c:	e7d5      	b.n	223a <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    228e:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2290:	2380      	movs	r3, #128	; 0x80
    2292:	009b      	lsls	r3, r3, #2
    2294:	4318      	orrs	r0, r3
    2296:	4305      	orrs	r5, r0
    2298:	e7d4      	b.n	2244 <system_gclk_gen_set_config+0x44>
    229a:	46c0      	nop			; (mov r8, r8)
    229c:	40001800 	.word	0x40001800
    22a0:	000007fc 	.word	0x000007fc
    22a4:	000001ad 	.word	0x000001ad
    22a8:	000001ed 	.word	0x000001ed

000022ac <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    22ac:	b510      	push	{r4, lr}
    22ae:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    22b0:	2204      	movs	r2, #4
    22b2:	4082      	lsls	r2, r0
    22b4:	4809      	ldr	r0, [pc, #36]	; (22dc <system_gclk_gen_enable+0x30>)
    22b6:	490a      	ldr	r1, [pc, #40]	; (22e0 <system_gclk_gen_enable+0x34>)
    22b8:	6843      	ldr	r3, [r0, #4]
    22ba:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    22bc:	421a      	tst	r2, r3
    22be:	d1fb      	bne.n	22b8 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    22c0:	4b08      	ldr	r3, [pc, #32]	; (22e4 <system_gclk_gen_enable+0x38>)
    22c2:	4798      	blx	r3
    22c4:	00a4      	lsls	r4, r4, #2
    22c6:	4b05      	ldr	r3, [pc, #20]	; (22dc <system_gclk_gen_enable+0x30>)
    22c8:	469c      	mov	ip, r3
    22ca:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    22cc:	6a22      	ldr	r2, [r4, #32]
    22ce:	2380      	movs	r3, #128	; 0x80
    22d0:	005b      	lsls	r3, r3, #1
    22d2:	4313      	orrs	r3, r2
    22d4:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    22d6:	4b04      	ldr	r3, [pc, #16]	; (22e8 <system_gclk_gen_enable+0x3c>)
    22d8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    22da:	bd10      	pop	{r4, pc}
    22dc:	40001800 	.word	0x40001800
    22e0:	000007fc 	.word	0x000007fc
    22e4:	000001ad 	.word	0x000001ad
    22e8:	000001ed 	.word	0x000001ed

000022ec <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    22ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22ee:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    22f0:	2204      	movs	r2, #4
    22f2:	4082      	lsls	r2, r0
    22f4:	4812      	ldr	r0, [pc, #72]	; (2340 <system_gclk_gen_get_hz+0x54>)
    22f6:	4913      	ldr	r1, [pc, #76]	; (2344 <system_gclk_gen_get_hz+0x58>)
    22f8:	6843      	ldr	r3, [r0, #4]
    22fa:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    22fc:	421a      	tst	r2, r3
    22fe:	d1fb      	bne.n	22f8 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    2300:	4b11      	ldr	r3, [pc, #68]	; (2348 <system_gclk_gen_get_hz+0x5c>)
    2302:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    2304:	4f0e      	ldr	r7, [pc, #56]	; (2340 <system_gclk_gen_get_hz+0x54>)
    2306:	3408      	adds	r4, #8
    2308:	00a4      	lsls	r4, r4, #2
    230a:	59e0      	ldr	r0, [r4, r7]
    230c:	0700      	lsls	r0, r0, #28
    230e:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2310:	4b0e      	ldr	r3, [pc, #56]	; (234c <system_gclk_gen_get_hz+0x60>)
    2312:	4798      	blx	r3
    2314:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    2316:	59e5      	ldr	r5, [r4, r7]
    2318:	04ed      	lsls	r5, r5, #19
    231a:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    231c:	59e4      	ldr	r4, [r4, r7]
    231e:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2320:	4b0b      	ldr	r3, [pc, #44]	; (2350 <system_gclk_gen_get_hz+0x64>)
    2322:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2324:	2d00      	cmp	r5, #0
    2326:	d107      	bne.n	2338 <system_gclk_gen_get_hz+0x4c>
    2328:	2c01      	cmp	r4, #1
    232a:	d907      	bls.n	233c <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    232c:	0021      	movs	r1, r4
    232e:	0030      	movs	r0, r6
    2330:	4b08      	ldr	r3, [pc, #32]	; (2354 <system_gclk_gen_get_hz+0x68>)
    2332:	4798      	blx	r3
    2334:	0006      	movs	r6, r0
    2336:	e001      	b.n	233c <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2338:	3401      	adds	r4, #1
    233a:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    233c:	0030      	movs	r0, r6
    233e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2340:	40001800 	.word	0x40001800
    2344:	000007fc 	.word	0x000007fc
    2348:	000001ad 	.word	0x000001ad
    234c:	00001c81 	.word	0x00001c81
    2350:	000001ed 	.word	0x000001ed
    2354:	00010e0d 	.word	0x00010e0d

00002358 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2358:	b510      	push	{r4, lr}
    235a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    235c:	4b09      	ldr	r3, [pc, #36]	; (2384 <system_gclk_chan_enable+0x2c>)
    235e:	4798      	blx	r3
    2360:	00a0      	lsls	r0, r4, #2
    2362:	4b09      	ldr	r3, [pc, #36]	; (2388 <system_gclk_chan_enable+0x30>)
    2364:	469c      	mov	ip, r3
    2366:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    2368:	2280      	movs	r2, #128	; 0x80
    236a:	5883      	ldr	r3, [r0, r2]
    236c:	2140      	movs	r1, #64	; 0x40
    236e:	430b      	orrs	r3, r1
    2370:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    2372:	3140      	adds	r1, #64	; 0x40
    2374:	3a40      	subs	r2, #64	; 0x40
    2376:	5843      	ldr	r3, [r0, r1]
    2378:	421a      	tst	r2, r3
    237a:	d0fc      	beq.n	2376 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    237c:	4b03      	ldr	r3, [pc, #12]	; (238c <system_gclk_chan_enable+0x34>)
    237e:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    2380:	bd10      	pop	{r4, pc}
    2382:	46c0      	nop			; (mov r8, r8)
    2384:	000001ad 	.word	0x000001ad
    2388:	40001800 	.word	0x40001800
    238c:	000001ed 	.word	0x000001ed

00002390 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2390:	b510      	push	{r4, lr}
    2392:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2394:	4b09      	ldr	r3, [pc, #36]	; (23bc <system_gclk_chan_disable+0x2c>)
    2396:	4798      	blx	r3
    2398:	00a0      	lsls	r0, r4, #2
    239a:	4b09      	ldr	r3, [pc, #36]	; (23c0 <system_gclk_chan_disable+0x30>)
    239c:	469c      	mov	ip, r3
    239e:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    23a0:	2280      	movs	r2, #128	; 0x80
    23a2:	5883      	ldr	r3, [r0, r2]
    23a4:	2140      	movs	r1, #64	; 0x40
    23a6:	438b      	bics	r3, r1
    23a8:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    23aa:	3140      	adds	r1, #64	; 0x40
    23ac:	3a40      	subs	r2, #64	; 0x40
    23ae:	5843      	ldr	r3, [r0, r1]
    23b0:	421a      	tst	r2, r3
    23b2:	d1fc      	bne.n	23ae <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    23b4:	4b03      	ldr	r3, [pc, #12]	; (23c4 <system_gclk_chan_disable+0x34>)
    23b6:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    23b8:	bd10      	pop	{r4, pc}
    23ba:	46c0      	nop			; (mov r8, r8)
    23bc:	000001ad 	.word	0x000001ad
    23c0:	40001800 	.word	0x40001800
    23c4:	000001ed 	.word	0x000001ed

000023c8 <system_gclk_chan_set_config>:
{
    23c8:	b570      	push	{r4, r5, r6, lr}
    23ca:	0004      	movs	r4, r0
    23cc:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    23ce:	4b05      	ldr	r3, [pc, #20]	; (23e4 <system_gclk_chan_set_config+0x1c>)
    23d0:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    23d2:	782a      	ldrb	r2, [r5, #0]
    23d4:	230f      	movs	r3, #15
    23d6:	4013      	ands	r3, r2
    23d8:	3420      	adds	r4, #32
    23da:	00a4      	lsls	r4, r4, #2
    23dc:	4a02      	ldr	r2, [pc, #8]	; (23e8 <system_gclk_chan_set_config+0x20>)
    23de:	50a3      	str	r3, [r4, r2]
}
    23e0:	bd70      	pop	{r4, r5, r6, pc}
    23e2:	46c0      	nop			; (mov r8, r8)
    23e4:	00002391 	.word	0x00002391
    23e8:	40001800 	.word	0x40001800

000023ec <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    23ec:	b510      	push	{r4, lr}
    23ee:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    23f0:	4b06      	ldr	r3, [pc, #24]	; (240c <system_gclk_chan_get_hz+0x20>)
    23f2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    23f4:	3420      	adds	r4, #32
    23f6:	00a4      	lsls	r4, r4, #2
    23f8:	4b05      	ldr	r3, [pc, #20]	; (2410 <system_gclk_chan_get_hz+0x24>)
    23fa:	58e4      	ldr	r4, [r4, r3]
    23fc:	0724      	lsls	r4, r4, #28
    23fe:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2400:	4b04      	ldr	r3, [pc, #16]	; (2414 <system_gclk_chan_get_hz+0x28>)
    2402:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2404:	0020      	movs	r0, r4
    2406:	4b04      	ldr	r3, [pc, #16]	; (2418 <system_gclk_chan_get_hz+0x2c>)
    2408:	4798      	blx	r3
}
    240a:	bd10      	pop	{r4, pc}
    240c:	000001ad 	.word	0x000001ad
    2410:	40001800 	.word	0x40001800
    2414:	000001ed 	.word	0x000001ed
    2418:	000022ed 	.word	0x000022ed

0000241c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    241c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    241e:	78d3      	ldrb	r3, [r2, #3]
    2420:	2b00      	cmp	r3, #0
    2422:	d135      	bne.n	2490 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2424:	7813      	ldrb	r3, [r2, #0]
    2426:	2b80      	cmp	r3, #128	; 0x80
    2428:	d029      	beq.n	247e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    242a:	061b      	lsls	r3, r3, #24
    242c:	2480      	movs	r4, #128	; 0x80
    242e:	0264      	lsls	r4, r4, #9
    2430:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2432:	7854      	ldrb	r4, [r2, #1]
    2434:	2502      	movs	r5, #2
    2436:	43ac      	bics	r4, r5
    2438:	d106      	bne.n	2448 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    243a:	7894      	ldrb	r4, [r2, #2]
    243c:	2c00      	cmp	r4, #0
    243e:	d120      	bne.n	2482 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2440:	2480      	movs	r4, #128	; 0x80
    2442:	02a4      	lsls	r4, r4, #10
    2444:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2446:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2448:	7854      	ldrb	r4, [r2, #1]
    244a:	3c01      	subs	r4, #1
    244c:	2c01      	cmp	r4, #1
    244e:	d91c      	bls.n	248a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2450:	040d      	lsls	r5, r1, #16
    2452:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2454:	24a0      	movs	r4, #160	; 0xa0
    2456:	05e4      	lsls	r4, r4, #23
    2458:	432c      	orrs	r4, r5
    245a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    245c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    245e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2460:	24d0      	movs	r4, #208	; 0xd0
    2462:	0624      	lsls	r4, r4, #24
    2464:	432c      	orrs	r4, r5
    2466:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2468:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    246a:	78d4      	ldrb	r4, [r2, #3]
    246c:	2c00      	cmp	r4, #0
    246e:	d122      	bne.n	24b6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2470:	035b      	lsls	r3, r3, #13
    2472:	d51c      	bpl.n	24ae <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2474:	7893      	ldrb	r3, [r2, #2]
    2476:	2b01      	cmp	r3, #1
    2478:	d01e      	beq.n	24b8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    247a:	6141      	str	r1, [r0, #20]
    247c:	e017      	b.n	24ae <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    247e:	2300      	movs	r3, #0
    2480:	e7d7      	b.n	2432 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2482:	24c0      	movs	r4, #192	; 0xc0
    2484:	02e4      	lsls	r4, r4, #11
    2486:	4323      	orrs	r3, r4
    2488:	e7dd      	b.n	2446 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    248a:	4c0d      	ldr	r4, [pc, #52]	; (24c0 <_system_pinmux_config+0xa4>)
    248c:	4023      	ands	r3, r4
    248e:	e7df      	b.n	2450 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2490:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2492:	040c      	lsls	r4, r1, #16
    2494:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2496:	23a0      	movs	r3, #160	; 0xa0
    2498:	05db      	lsls	r3, r3, #23
    249a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    249c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    249e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    24a0:	23d0      	movs	r3, #208	; 0xd0
    24a2:	061b      	lsls	r3, r3, #24
    24a4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    24a6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    24a8:	78d3      	ldrb	r3, [r2, #3]
    24aa:	2b00      	cmp	r3, #0
    24ac:	d103      	bne.n	24b6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    24ae:	7853      	ldrb	r3, [r2, #1]
    24b0:	3b01      	subs	r3, #1
    24b2:	2b01      	cmp	r3, #1
    24b4:	d902      	bls.n	24bc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    24b6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    24b8:	6181      	str	r1, [r0, #24]
    24ba:	e7f8      	b.n	24ae <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    24bc:	6081      	str	r1, [r0, #8]
}
    24be:	e7fa      	b.n	24b6 <_system_pinmux_config+0x9a>
    24c0:	fffbffff 	.word	0xfffbffff

000024c4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    24c4:	b510      	push	{r4, lr}
    24c6:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    24c8:	09c1      	lsrs	r1, r0, #7
		return NULL;
    24ca:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    24cc:	2900      	cmp	r1, #0
    24ce:	d104      	bne.n	24da <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    24d0:	0943      	lsrs	r3, r0, #5
    24d2:	01db      	lsls	r3, r3, #7
    24d4:	4905      	ldr	r1, [pc, #20]	; (24ec <system_pinmux_pin_set_config+0x28>)
    24d6:	468c      	mov	ip, r1
    24d8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    24da:	241f      	movs	r4, #31
    24dc:	4020      	ands	r0, r4
    24de:	2101      	movs	r1, #1
    24e0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    24e2:	0018      	movs	r0, r3
    24e4:	4b02      	ldr	r3, [pc, #8]	; (24f0 <system_pinmux_pin_set_config+0x2c>)
    24e6:	4798      	blx	r3
}
    24e8:	bd10      	pop	{r4, pc}
    24ea:	46c0      	nop			; (mov r8, r8)
    24ec:	40002800 	.word	0x40002800
    24f0:	0000241d 	.word	0x0000241d

000024f4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    24f4:	4770      	bx	lr
	...

000024f8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    24f8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    24fa:	4b05      	ldr	r3, [pc, #20]	; (2510 <system_init+0x18>)
    24fc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    24fe:	4b05      	ldr	r3, [pc, #20]	; (2514 <system_init+0x1c>)
    2500:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2502:	4b05      	ldr	r3, [pc, #20]	; (2518 <system_init+0x20>)
    2504:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2506:	4b05      	ldr	r3, [pc, #20]	; (251c <system_init+0x24>)
    2508:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    250a:	4b05      	ldr	r3, [pc, #20]	; (2520 <system_init+0x28>)
    250c:	4798      	blx	r3
}
    250e:	bd10      	pop	{r4, pc}
    2510:	00001fa9 	.word	0x00001fa9
    2514:	0000021d 	.word	0x0000021d
    2518:	000024f5 	.word	0x000024f5
    251c:	000005d1 	.word	0x000005d1
    2520:	000024f5 	.word	0x000024f5

00002524 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2524:	1c93      	adds	r3, r2, #2
    2526:	009b      	lsls	r3, r3, #2
    2528:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    252a:	2a02      	cmp	r2, #2
    252c:	d009      	beq.n	2542 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    252e:	2a03      	cmp	r2, #3
    2530:	d00c      	beq.n	254c <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    2532:	2301      	movs	r3, #1
    2534:	4093      	lsls	r3, r2
    2536:	001a      	movs	r2, r3
    2538:	7e03      	ldrb	r3, [r0, #24]
    253a:	4313      	orrs	r3, r2
    253c:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    253e:	2000      	movs	r0, #0
    2540:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    2542:	7e03      	ldrb	r3, [r0, #24]
    2544:	2210      	movs	r2, #16
    2546:	4313      	orrs	r3, r2
    2548:	7603      	strb	r3, [r0, #24]
    254a:	e7f8      	b.n	253e <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    254c:	7e03      	ldrb	r3, [r0, #24]
    254e:	2220      	movs	r2, #32
    2550:	4313      	orrs	r3, r2
    2552:	7603      	strb	r3, [r0, #24]
    2554:	e7f3      	b.n	253e <tc_register_callback+0x1a>
	...

00002558 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    2558:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    255a:	0080      	lsls	r0, r0, #2
    255c:	4b16      	ldr	r3, [pc, #88]	; (25b8 <_tc_interrupt_handler+0x60>)
    255e:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2560:	6823      	ldr	r3, [r4, #0]
    2562:	7a9d      	ldrb	r5, [r3, #10]
    2564:	7e22      	ldrb	r2, [r4, #24]
    2566:	7e63      	ldrb	r3, [r4, #25]
    2568:	4013      	ands	r3, r2
    256a:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    256c:	07eb      	lsls	r3, r5, #31
    256e:	d406      	bmi.n	257e <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    2570:	07ab      	lsls	r3, r5, #30
    2572:	d40b      	bmi.n	258c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    2574:	06eb      	lsls	r3, r5, #27
    2576:	d410      	bmi.n	259a <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    2578:	06ab      	lsls	r3, r5, #26
    257a:	d415      	bmi.n	25a8 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    257c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    257e:	0020      	movs	r0, r4
    2580:	68a3      	ldr	r3, [r4, #8]
    2582:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2584:	2301      	movs	r3, #1
    2586:	6822      	ldr	r2, [r4, #0]
    2588:	7293      	strb	r3, [r2, #10]
    258a:	e7f1      	b.n	2570 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    258c:	0020      	movs	r0, r4
    258e:	68e3      	ldr	r3, [r4, #12]
    2590:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2592:	2302      	movs	r3, #2
    2594:	6822      	ldr	r2, [r4, #0]
    2596:	7293      	strb	r3, [r2, #10]
    2598:	e7ec      	b.n	2574 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    259a:	0020      	movs	r0, r4
    259c:	6923      	ldr	r3, [r4, #16]
    259e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    25a0:	2310      	movs	r3, #16
    25a2:	6822      	ldr	r2, [r4, #0]
    25a4:	7293      	strb	r3, [r2, #10]
    25a6:	e7e7      	b.n	2578 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    25a8:	0020      	movs	r0, r4
    25aa:	6963      	ldr	r3, [r4, #20]
    25ac:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    25ae:	6823      	ldr	r3, [r4, #0]
    25b0:	2220      	movs	r2, #32
    25b2:	729a      	strb	r2, [r3, #10]
}
    25b4:	e7e2      	b.n	257c <_tc_interrupt_handler+0x24>
    25b6:	46c0      	nop			; (mov r8, r8)
    25b8:	200010a8 	.word	0x200010a8

000025bc <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    25bc:	b510      	push	{r4, lr}
    25be:	2000      	movs	r0, #0
    25c0:	4b01      	ldr	r3, [pc, #4]	; (25c8 <TC0_Handler+0xc>)
    25c2:	4798      	blx	r3
    25c4:	bd10      	pop	{r4, pc}
    25c6:	46c0      	nop			; (mov r8, r8)
    25c8:	00002559 	.word	0x00002559

000025cc <TC1_Handler>:
    25cc:	b510      	push	{r4, lr}
    25ce:	2001      	movs	r0, #1
    25d0:	4b01      	ldr	r3, [pc, #4]	; (25d8 <TC1_Handler+0xc>)
    25d2:	4798      	blx	r3
    25d4:	bd10      	pop	{r4, pc}
    25d6:	46c0      	nop			; (mov r8, r8)
    25d8:	00002559 	.word	0x00002559

000025dc <TC2_Handler>:
    25dc:	b510      	push	{r4, lr}
    25de:	2002      	movs	r0, #2
    25e0:	4b01      	ldr	r3, [pc, #4]	; (25e8 <TC2_Handler+0xc>)
    25e2:	4798      	blx	r3
    25e4:	bd10      	pop	{r4, pc}
    25e6:	46c0      	nop			; (mov r8, r8)
    25e8:	00002559 	.word	0x00002559

000025ec <TC3_Handler>:
    25ec:	b510      	push	{r4, lr}
    25ee:	2003      	movs	r0, #3
    25f0:	4b01      	ldr	r3, [pc, #4]	; (25f8 <TC3_Handler+0xc>)
    25f2:	4798      	blx	r3
    25f4:	bd10      	pop	{r4, pc}
    25f6:	46c0      	nop			; (mov r8, r8)
    25f8:	00002559 	.word	0x00002559

000025fc <TC4_Handler>:
    25fc:	b510      	push	{r4, lr}
    25fe:	2004      	movs	r0, #4
    2600:	4b01      	ldr	r3, [pc, #4]	; (2608 <TC4_Handler+0xc>)
    2602:	4798      	blx	r3
    2604:	bd10      	pop	{r4, pc}
    2606:	46c0      	nop			; (mov r8, r8)
    2608:	00002559 	.word	0x00002559

0000260c <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    260c:	b530      	push	{r4, r5, lr}
    260e:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2610:	a901      	add	r1, sp, #4
    2612:	4b0c      	ldr	r3, [pc, #48]	; (2644 <_tc_get_inst_index+0x38>)
    2614:	000a      	movs	r2, r1
    2616:	cb32      	ldmia	r3!, {r1, r4, r5}
    2618:	c232      	stmia	r2!, {r1, r4, r5}
    261a:	cb12      	ldmia	r3!, {r1, r4}
    261c:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    261e:	9b01      	ldr	r3, [sp, #4]
    2620:	4298      	cmp	r0, r3
    2622:	d00b      	beq.n	263c <_tc_get_inst_index+0x30>
    2624:	2301      	movs	r3, #1
    2626:	a901      	add	r1, sp, #4
    2628:	009a      	lsls	r2, r3, #2
    262a:	5852      	ldr	r2, [r2, r1]
    262c:	4282      	cmp	r2, r0
    262e:	d006      	beq.n	263e <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2630:	3301      	adds	r3, #1
    2632:	2b05      	cmp	r3, #5
    2634:	d1f8      	bne.n	2628 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    2636:	2000      	movs	r0, #0
}
    2638:	b007      	add	sp, #28
    263a:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    263c:	2300      	movs	r3, #0
			return i;
    263e:	b2d8      	uxtb	r0, r3
    2640:	e7fa      	b.n	2638 <_tc_get_inst_index+0x2c>
    2642:	46c0      	nop			; (mov r8, r8)
    2644:	00018f78 	.word	0x00018f78

00002648 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    2648:	b5f0      	push	{r4, r5, r6, r7, lr}
    264a:	46c6      	mov	lr, r8
    264c:	b500      	push	{lr}
    264e:	b08e      	sub	sp, #56	; 0x38
    2650:	0004      	movs	r4, r0
    2652:	000d      	movs	r5, r1
    2654:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    2656:	0008      	movs	r0, r1
    2658:	4bae      	ldr	r3, [pc, #696]	; (2914 <tc_init+0x2cc>)
    265a:	4798      	blx	r3
    265c:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    265e:	ab0c      	add	r3, sp, #48	; 0x30
    2660:	221b      	movs	r2, #27
    2662:	701a      	strb	r2, [r3, #0]
    2664:	705a      	strb	r2, [r3, #1]
    2666:	3201      	adds	r2, #1
    2668:	709a      	strb	r2, [r3, #2]
    266a:	70da      	strb	r2, [r3, #3]
    266c:	3201      	adds	r2, #1
    266e:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    2670:	a902      	add	r1, sp, #8
    2672:	4ba9      	ldr	r3, [pc, #676]	; (2918 <tc_init+0x2d0>)
    2674:	3314      	adds	r3, #20
    2676:	000a      	movs	r2, r1
    2678:	cb83      	ldmia	r3!, {r0, r1, r7}
    267a:	c283      	stmia	r2!, {r0, r1, r7}
    267c:	cb83      	ldmia	r3!, {r0, r1, r7}
    267e:	c283      	stmia	r2!, {r0, r1, r7}
    2680:	cb83      	ldmia	r3!, {r0, r1, r7}
    2682:	c283      	stmia	r2!, {r0, r1, r7}
    2684:	681b      	ldr	r3, [r3, #0]
    2686:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    2688:	2300      	movs	r3, #0
    268a:	60a3      	str	r3, [r4, #8]
    268c:	60e3      	str	r3, [r4, #12]
    268e:	6123      	str	r3, [r4, #16]
    2690:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    2692:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    2694:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    2696:	4643      	mov	r3, r8
    2698:	009a      	lsls	r2, r3, #2
    269a:	4ba0      	ldr	r3, [pc, #640]	; (291c <tc_init+0x2d4>)
    269c:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    269e:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    26a0:	2334      	movs	r3, #52	; 0x34
    26a2:	5cf3      	ldrb	r3, [r6, r3]
    26a4:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    26a6:	78f3      	ldrb	r3, [r6, #3]
    26a8:	2b08      	cmp	r3, #8
    26aa:	d008      	beq.n	26be <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    26ac:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    26ae:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    26b0:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    26b2:	07db      	lsls	r3, r3, #31
    26b4:	d508      	bpl.n	26c8 <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    26b6:	b00e      	add	sp, #56	; 0x38
    26b8:	bc04      	pop	{r2}
    26ba:	4690      	mov	r8, r2
    26bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    26be:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    26c0:	4642      	mov	r2, r8
    26c2:	07d2      	lsls	r2, r2, #31
    26c4:	d4f7      	bmi.n	26b6 <tc_init+0x6e>
    26c6:	e7f1      	b.n	26ac <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    26c8:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    26ca:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    26cc:	079b      	lsls	r3, r3, #30
    26ce:	d4f2      	bmi.n	26b6 <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    26d0:	682b      	ldr	r3, [r5, #0]
    26d2:	079b      	lsls	r3, r3, #30
    26d4:	d4ef      	bmi.n	26b6 <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    26d6:	7c33      	ldrb	r3, [r6, #16]
    26d8:	2b00      	cmp	r3, #0
    26da:	d112      	bne.n	2702 <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    26dc:	7f33      	ldrb	r3, [r6, #28]
    26de:	2b00      	cmp	r3, #0
    26e0:	d11b      	bne.n	271a <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    26e2:	4643      	mov	r3, r8
    26e4:	005a      	lsls	r2, r3, #1
    26e6:	a902      	add	r1, sp, #8
    26e8:	1c53      	adds	r3, r2, #1
    26ea:	009b      	lsls	r3, r3, #2
    26ec:	5858      	ldr	r0, [r3, r1]
    26ee:	4643      	mov	r3, r8
    26f0:	00db      	lsls	r3, r3, #3
    26f2:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    26f4:	b2d9      	uxtb	r1, r3
    26f6:	2904      	cmp	r1, #4
    26f8:	d823      	bhi.n	2742 <tc_init+0xfa>
    26fa:	008b      	lsls	r3, r1, #2
    26fc:	4988      	ldr	r1, [pc, #544]	; (2920 <tc_init+0x2d8>)
    26fe:	58cb      	ldr	r3, [r1, r3]
    2700:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2702:	a901      	add	r1, sp, #4
    2704:	2301      	movs	r3, #1
    2706:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2708:	2200      	movs	r2, #0
    270a:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    270c:	7e32      	ldrb	r2, [r6, #24]
    270e:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2710:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2712:	7d30      	ldrb	r0, [r6, #20]
    2714:	4b83      	ldr	r3, [pc, #524]	; (2924 <tc_init+0x2dc>)
    2716:	4798      	blx	r3
    2718:	e7e0      	b.n	26dc <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    271a:	a901      	add	r1, sp, #4
    271c:	2301      	movs	r3, #1
    271e:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2720:	2200      	movs	r2, #0
    2722:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    2724:	3224      	adds	r2, #36	; 0x24
    2726:	18b2      	adds	r2, r6, r2
    2728:	7812      	ldrb	r2, [r2, #0]
    272a:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    272c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    272e:	331f      	adds	r3, #31
    2730:	18f3      	adds	r3, r6, r3
    2732:	7818      	ldrb	r0, [r3, #0]
    2734:	4b7b      	ldr	r3, [pc, #492]	; (2924 <tc_init+0x2dc>)
    2736:	4798      	blx	r3
    2738:	e7d3      	b.n	26e2 <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    273a:	497b      	ldr	r1, [pc, #492]	; (2928 <tc_init+0x2e0>)
    273c:	694b      	ldr	r3, [r1, #20]
    273e:	4318      	orrs	r0, r3
    2740:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    2742:	78f3      	ldrb	r3, [r6, #3]
    2744:	2b08      	cmp	r3, #8
    2746:	d100      	bne.n	274a <tc_init+0x102>
    2748:	e086      	b.n	2858 <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    274a:	7833      	ldrb	r3, [r6, #0]
    274c:	466a      	mov	r2, sp
    274e:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    2750:	ab0c      	add	r3, sp, #48	; 0x30
    2752:	4642      	mov	r2, r8
    2754:	5c9f      	ldrb	r7, [r3, r2]
    2756:	4669      	mov	r1, sp
    2758:	0038      	movs	r0, r7
    275a:	4b74      	ldr	r3, [pc, #464]	; (292c <tc_init+0x2e4>)
    275c:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    275e:	0038      	movs	r0, r7
    2760:	4b73      	ldr	r3, [pc, #460]	; (2930 <tc_init+0x2e8>)
    2762:	4798      	blx	r3
			(uint32_t)config->counter_size |
    2764:	78f3      	ldrb	r3, [r6, #3]
    2766:	79f2      	ldrb	r2, [r6, #7]
    2768:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    276a:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    276c:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    276e:	7a72      	ldrb	r2, [r6, #9]
    2770:	2a00      	cmp	r2, #0
    2772:	d002      	beq.n	277a <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    2774:	2280      	movs	r2, #128	; 0x80
    2776:	0252      	lsls	r2, r2, #9
    2778:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    277a:	7ab2      	ldrb	r2, [r6, #10]
    277c:	2a00      	cmp	r2, #0
    277e:	d002      	beq.n	2786 <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    2780:	2280      	movs	r2, #128	; 0x80
    2782:	0292      	lsls	r2, r2, #10
    2784:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    2786:	7af2      	ldrb	r2, [r6, #11]
    2788:	2a00      	cmp	r2, #0
    278a:	d002      	beq.n	2792 <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    278c:	2280      	movs	r2, #128	; 0x80
    278e:	0352      	lsls	r2, r2, #13
    2790:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    2792:	7b32      	ldrb	r2, [r6, #12]
    2794:	2a00      	cmp	r2, #0
    2796:	d002      	beq.n	279e <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    2798:	2280      	movs	r2, #128	; 0x80
    279a:	0392      	lsls	r2, r2, #14
    279c:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    279e:	7871      	ldrb	r1, [r6, #1]
    27a0:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    27a2:	78b2      	ldrb	r2, [r6, #2]
    27a4:	01d2      	lsls	r2, r2, #7
    27a6:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    27a8:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    27aa:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (tc_module->SYNCBUSY.reg);
    27ac:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    27ae:	2b00      	cmp	r3, #0
    27b0:	d1fc      	bne.n	27ac <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    27b2:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    27b4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    27b6:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    27b8:	2b00      	cmp	r3, #0
    27ba:	d1fc      	bne.n	27b6 <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    27bc:	79b3      	ldrb	r3, [r6, #6]
    27be:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    27c0:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    27c2:	1e4b      	subs	r3, r1, #1
    27c4:	4199      	sbcs	r1, r3
    27c6:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    27c8:	7bb3      	ldrb	r3, [r6, #14]
    27ca:	2b00      	cmp	r3, #0
    27cc:	d001      	beq.n	27d2 <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    27ce:	2301      	movs	r3, #1
    27d0:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    27d2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    27d4:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    27d6:	2b00      	cmp	r3, #0
    27d8:	d1fc      	bne.n	27d4 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    27da:	33ff      	adds	r3, #255	; 0xff
    27dc:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    27de:	2900      	cmp	r1, #0
    27e0:	d004      	beq.n	27ec <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    27e2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    27e4:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    27e6:	2b00      	cmp	r3, #0
    27e8:	d1fc      	bne.n	27e4 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    27ea:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    27ec:	7a33      	ldrb	r3, [r6, #8]
    27ee:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    27f0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    27f2:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    27f4:	2b00      	cmp	r3, #0
    27f6:	d1fc      	bne.n	27f2 <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    27f8:	7923      	ldrb	r3, [r4, #4]
    27fa:	2b04      	cmp	r3, #4
    27fc:	d059      	beq.n	28b2 <tc_init+0x26a>
    27fe:	2b08      	cmp	r3, #8
    2800:	d074      	beq.n	28ec <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    2802:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    2804:	2b00      	cmp	r3, #0
    2806:	d000      	beq.n	280a <tc_init+0x1c2>
    2808:	e755      	b.n	26b6 <tc_init+0x6e>
    280a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    280c:	2b00      	cmp	r3, #0
    280e:	d1fc      	bne.n	280a <tc_init+0x1c2>
				= config->counter_16_bit.value;
    2810:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    2812:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2814:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    2816:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    2818:	2b00      	cmp	r3, #0
    281a:	d1fc      	bne.n	2816 <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    281c:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    281e:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2820:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    2822:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    2824:	2b00      	cmp	r3, #0
    2826:	d1fc      	bne.n	2822 <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    2828:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    282a:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    282c:	2000      	movs	r0, #0
    282e:	e742      	b.n	26b6 <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    2830:	493d      	ldr	r1, [pc, #244]	; (2928 <tc_init+0x2e0>)
    2832:	698b      	ldr	r3, [r1, #24]
    2834:	4318      	orrs	r0, r3
    2836:	6188      	str	r0, [r1, #24]
    2838:	e783      	b.n	2742 <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    283a:	493b      	ldr	r1, [pc, #236]	; (2928 <tc_init+0x2e0>)
    283c:	69cb      	ldr	r3, [r1, #28]
    283e:	4318      	orrs	r0, r3
    2840:	61c8      	str	r0, [r1, #28]
    2842:	e77e      	b.n	2742 <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    2844:	4938      	ldr	r1, [pc, #224]	; (2928 <tc_init+0x2e0>)
    2846:	6a0b      	ldr	r3, [r1, #32]
    2848:	4318      	orrs	r0, r3
    284a:	6208      	str	r0, [r1, #32]
    284c:	e779      	b.n	2742 <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    284e:	4b36      	ldr	r3, [pc, #216]	; (2928 <tc_init+0x2e0>)
    2850:	6a59      	ldr	r1, [r3, #36]	; 0x24
    2852:	4308      	orrs	r0, r1
    2854:	6258      	str	r0, [r3, #36]	; 0x24
    2856:	e774      	b.n	2742 <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    2858:	4643      	mov	r3, r8
    285a:	3301      	adds	r3, #1
    285c:	2b04      	cmp	r3, #4
    285e:	dd00      	ble.n	2862 <tc_init+0x21a>
    2860:	e773      	b.n	274a <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    2862:	ab02      	add	r3, sp, #8
    2864:	1cd1      	adds	r1, r2, #3
    2866:	0089      	lsls	r1, r1, #2
    2868:	58c9      	ldr	r1, [r1, r3]
    286a:	3202      	adds	r2, #2
    286c:	0092      	lsls	r2, r2, #2
    286e:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    2870:	b2da      	uxtb	r2, r3
    2872:	2a04      	cmp	r2, #4
    2874:	d900      	bls.n	2878 <tc_init+0x230>
    2876:	e768      	b.n	274a <tc_init+0x102>
    2878:	0093      	lsls	r3, r2, #2
    287a:	4a2e      	ldr	r2, [pc, #184]	; (2934 <tc_init+0x2ec>)
    287c:	58d3      	ldr	r3, [r2, r3]
    287e:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    2880:	4a29      	ldr	r2, [pc, #164]	; (2928 <tc_init+0x2e0>)
    2882:	6953      	ldr	r3, [r2, #20]
    2884:	4319      	orrs	r1, r3
    2886:	6151      	str	r1, [r2, #20]
    2888:	e75f      	b.n	274a <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    288a:	4a27      	ldr	r2, [pc, #156]	; (2928 <tc_init+0x2e0>)
    288c:	6993      	ldr	r3, [r2, #24]
    288e:	4319      	orrs	r1, r3
    2890:	6191      	str	r1, [r2, #24]
    2892:	e75a      	b.n	274a <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    2894:	4a24      	ldr	r2, [pc, #144]	; (2928 <tc_init+0x2e0>)
    2896:	69d3      	ldr	r3, [r2, #28]
    2898:	4319      	orrs	r1, r3
    289a:	61d1      	str	r1, [r2, #28]
    289c:	e755      	b.n	274a <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    289e:	4a22      	ldr	r2, [pc, #136]	; (2928 <tc_init+0x2e0>)
    28a0:	6a13      	ldr	r3, [r2, #32]
    28a2:	4319      	orrs	r1, r3
    28a4:	6211      	str	r1, [r2, #32]
    28a6:	e750      	b.n	274a <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    28a8:	4b1f      	ldr	r3, [pc, #124]	; (2928 <tc_init+0x2e0>)
    28aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    28ac:	4311      	orrs	r1, r2
    28ae:	6259      	str	r1, [r3, #36]	; 0x24
    28b0:	e74b      	b.n	274a <tc_init+0x102>
    28b2:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    28b4:	2b00      	cmp	r3, #0
    28b6:	d1fc      	bne.n	28b2 <tc_init+0x26a>
					config->counter_8_bit.value;
    28b8:	3328      	adds	r3, #40	; 0x28
    28ba:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    28bc:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    28be:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    28c0:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    28c2:	2b00      	cmp	r3, #0
    28c4:	d1fc      	bne.n	28c0 <tc_init+0x278>
					config->counter_8_bit.period;
    28c6:	3329      	adds	r3, #41	; 0x29
    28c8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    28ca:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    28cc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    28ce:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    28d0:	2b00      	cmp	r3, #0
    28d2:	d1fc      	bne.n	28ce <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    28d4:	332a      	adds	r3, #42	; 0x2a
    28d6:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    28d8:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    28da:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    28dc:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    28de:	2b00      	cmp	r3, #0
    28e0:	d1fc      	bne.n	28dc <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    28e2:	332b      	adds	r3, #43	; 0x2b
    28e4:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    28e6:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    28e8:	2000      	movs	r0, #0
    28ea:	e6e4      	b.n	26b6 <tc_init+0x6e>
    28ec:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    28ee:	2b00      	cmp	r3, #0
    28f0:	d1fc      	bne.n	28ec <tc_init+0x2a4>
				= config->counter_32_bit.value;
    28f2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    28f4:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    28f6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    28f8:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    28fa:	2b00      	cmp	r3, #0
    28fc:	d1fc      	bne.n	28f8 <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    28fe:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2900:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2902:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    2904:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    2906:	2b00      	cmp	r3, #0
    2908:	d1fc      	bne.n	2904 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    290a:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    290c:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    290e:	2000      	movs	r0, #0
    2910:	e6d1      	b.n	26b6 <tc_init+0x6e>
    2912:	46c0      	nop			; (mov r8, r8)
    2914:	0000260d 	.word	0x0000260d
    2918:	00018f78 	.word	0x00018f78
    291c:	200010a8 	.word	0x200010a8
    2920:	00018f50 	.word	0x00018f50
    2924:	000024c5 	.word	0x000024c5
    2928:	40000400 	.word	0x40000400
    292c:	000023c9 	.word	0x000023c9
    2930:	00002359 	.word	0x00002359
    2934:	00018f64 	.word	0x00018f64

00002938 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2938:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    293a:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    293c:	2b00      	cmp	r3, #0
    293e:	d1fc      	bne.n	293a <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    2940:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2942:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    2944:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    2946:	2b00      	cmp	r3, #0
    2948:	d1fc      	bne.n	2944 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    294a:	3380      	adds	r3, #128	; 0x80
    294c:	7153      	strb	r3, [r2, #5]

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    294e:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    2950:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    2952:	2b00      	cmp	r3, #0
    2954:	d1fc      	bne.n	2950 <tc_get_count_value+0x18>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    2956:	7903      	ldrb	r3, [r0, #4]
    2958:	2b04      	cmp	r3, #4
    295a:	d005      	beq.n	2968 <tc_get_count_value+0x30>
    295c:	2b08      	cmp	r3, #8
    295e:	d009      	beq.n	2974 <tc_get_count_value+0x3c>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    2960:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    2962:	2b00      	cmp	r3, #0
    2964:	d003      	beq.n	296e <tc_get_count_value+0x36>
}
    2966:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    2968:	7d10      	ldrb	r0, [r2, #20]
    296a:	b2c0      	uxtb	r0, r0
    296c:	e7fb      	b.n	2966 <tc_get_count_value+0x2e>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    296e:	8a90      	ldrh	r0, [r2, #20]
    2970:	b280      	uxth	r0, r0
    2972:	e7f8      	b.n	2966 <tc_get_count_value+0x2e>
			return tc_module->COUNT32.COUNT.reg;
    2974:	6950      	ldr	r0, [r2, #20]
    2976:	e7f6      	b.n	2966 <tc_get_count_value+0x2e>

00002978 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    2978:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    297a:	6804      	ldr	r4, [r0, #0]
    297c:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    297e:	2b00      	cmp	r3, #0
    2980:	d1fc      	bne.n	297c <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    2982:	7903      	ldrb	r3, [r0, #4]
    2984:	2b04      	cmp	r3, #4
    2986:	d006      	beq.n	2996 <tc_set_compare_value+0x1e>
    2988:	2b08      	cmp	r3, #8
    298a:	d028      	beq.n	29de <tc_set_compare_value+0x66>
    298c:	2b00      	cmp	r3, #0
    298e:	d013      	beq.n	29b8 <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    2990:	2317      	movs	r3, #23
}
    2992:	0018      	movs	r0, r3
    2994:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    2996:	2317      	movs	r3, #23
			if (channel_index <
    2998:	2901      	cmp	r1, #1
    299a:	d8fa      	bhi.n	2992 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    299c:	7e83      	ldrb	r3, [r0, #26]
    299e:	2b00      	cmp	r3, #0
    29a0:	d005      	beq.n	29ae <tc_set_compare_value+0x36>
							(uint8_t)compare;
    29a2:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    29a4:	1861      	adds	r1, r4, r1
    29a6:	3130      	adds	r1, #48	; 0x30
    29a8:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    29aa:	2300      	movs	r3, #0
    29ac:	e7f1      	b.n	2992 <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    29ae:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    29b0:	1864      	adds	r4, r4, r1
    29b2:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    29b4:	2300      	movs	r3, #0
    29b6:	e7ec      	b.n	2992 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    29b8:	2317      	movs	r3, #23
			if (channel_index <
    29ba:	2901      	cmp	r1, #1
    29bc:	d8e9      	bhi.n	2992 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    29be:	7e83      	ldrb	r3, [r0, #26]
    29c0:	2b00      	cmp	r3, #0
    29c2:	d005      	beq.n	29d0 <tc_set_compare_value+0x58>
							(uint16_t)compare;
    29c4:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    29c6:	3118      	adds	r1, #24
    29c8:	0049      	lsls	r1, r1, #1
    29ca:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    29cc:	2300      	movs	r3, #0
    29ce:	e7e0      	b.n	2992 <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    29d0:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    29d2:	310c      	adds	r1, #12
    29d4:	0049      	lsls	r1, r1, #1
    29d6:	1864      	adds	r4, r4, r1
    29d8:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    29da:	2300      	movs	r3, #0
    29dc:	e7d9      	b.n	2992 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    29de:	2317      	movs	r3, #23
			if (channel_index <
    29e0:	2901      	cmp	r1, #1
    29e2:	d8d6      	bhi.n	2992 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    29e4:	7e83      	ldrb	r3, [r0, #26]
    29e6:	2b00      	cmp	r3, #0
    29e8:	d105      	bne.n	29f6 <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    29ea:	3106      	adds	r1, #6
    29ec:	0089      	lsls	r1, r1, #2
    29ee:	1864      	adds	r4, r4, r1
    29f0:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    29f2:	2300      	movs	r3, #0
    29f4:	e7cd      	b.n	2992 <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    29f6:	310c      	adds	r1, #12
    29f8:	0089      	lsls	r1, r1, #2
    29fa:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    29fc:	2300      	movs	r3, #0
    29fe:	e7c8      	b.n	2992 <tc_set_compare_value+0x1a>

00002a00 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2a00:	e7fe      	b.n	2a00 <Dummy_Handler>
	...

00002a04 <Reset_Handler>:
{
    2a04:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    2a06:	4a1a      	ldr	r2, [pc, #104]	; (2a70 <Reset_Handler+0x6c>)
    2a08:	4b1a      	ldr	r3, [pc, #104]	; (2a74 <Reset_Handler+0x70>)
    2a0a:	429a      	cmp	r2, r3
    2a0c:	d011      	beq.n	2a32 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2a0e:	001a      	movs	r2, r3
    2a10:	4b19      	ldr	r3, [pc, #100]	; (2a78 <Reset_Handler+0x74>)
    2a12:	429a      	cmp	r2, r3
    2a14:	d20d      	bcs.n	2a32 <Reset_Handler+0x2e>
    2a16:	4a19      	ldr	r2, [pc, #100]	; (2a7c <Reset_Handler+0x78>)
    2a18:	3303      	adds	r3, #3
    2a1a:	1a9b      	subs	r3, r3, r2
    2a1c:	089b      	lsrs	r3, r3, #2
    2a1e:	3301      	adds	r3, #1
    2a20:	009b      	lsls	r3, r3, #2
    2a22:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2a24:	4813      	ldr	r0, [pc, #76]	; (2a74 <Reset_Handler+0x70>)
    2a26:	4912      	ldr	r1, [pc, #72]	; (2a70 <Reset_Handler+0x6c>)
    2a28:	588c      	ldr	r4, [r1, r2]
    2a2a:	5084      	str	r4, [r0, r2]
    2a2c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2a2e:	429a      	cmp	r2, r3
    2a30:	d1fa      	bne.n	2a28 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2a32:	4a13      	ldr	r2, [pc, #76]	; (2a80 <Reset_Handler+0x7c>)
    2a34:	4b13      	ldr	r3, [pc, #76]	; (2a84 <Reset_Handler+0x80>)
    2a36:	429a      	cmp	r2, r3
    2a38:	d20a      	bcs.n	2a50 <Reset_Handler+0x4c>
    2a3a:	43d3      	mvns	r3, r2
    2a3c:	4911      	ldr	r1, [pc, #68]	; (2a84 <Reset_Handler+0x80>)
    2a3e:	185b      	adds	r3, r3, r1
    2a40:	2103      	movs	r1, #3
    2a42:	438b      	bics	r3, r1
    2a44:	3304      	adds	r3, #4
    2a46:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2a48:	2100      	movs	r1, #0
    2a4a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2a4c:	4293      	cmp	r3, r2
    2a4e:	d1fc      	bne.n	2a4a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2a50:	4a0d      	ldr	r2, [pc, #52]	; (2a88 <Reset_Handler+0x84>)
    2a52:	21ff      	movs	r1, #255	; 0xff
    2a54:	4b0d      	ldr	r3, [pc, #52]	; (2a8c <Reset_Handler+0x88>)
    2a56:	438b      	bics	r3, r1
    2a58:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2a5a:	4a0d      	ldr	r2, [pc, #52]	; (2a90 <Reset_Handler+0x8c>)
    2a5c:	6853      	ldr	r3, [r2, #4]
    2a5e:	397f      	subs	r1, #127	; 0x7f
    2a60:	430b      	orrs	r3, r1
    2a62:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2a64:	4b0b      	ldr	r3, [pc, #44]	; (2a94 <Reset_Handler+0x90>)
    2a66:	4798      	blx	r3
        main();
    2a68:	4b0b      	ldr	r3, [pc, #44]	; (2a98 <Reset_Handler+0x94>)
    2a6a:	4798      	blx	r3
    2a6c:	e7fe      	b.n	2a6c <Reset_Handler+0x68>
    2a6e:	46c0      	nop			; (mov r8, r8)
    2a70:	00019db4 	.word	0x00019db4
    2a74:	20000000 	.word	0x20000000
    2a78:	200009b8 	.word	0x200009b8
    2a7c:	20000004 	.word	0x20000004
    2a80:	200009b8 	.word	0x200009b8
    2a84:	20001dec 	.word	0x20001dec
    2a88:	e000ed00 	.word	0xe000ed00
    2a8c:	00000000 	.word	0x00000000
    2a90:	41004000 	.word	0x41004000
    2a94:	00013e15 	.word	0x00013e15
    2a98:	0000aaa5 	.word	0x0000aaa5

00002a9c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a9e:	46c6      	mov	lr, r8
    2aa0:	b500      	push	{lr}
    2aa2:	000c      	movs	r4, r1
    2aa4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2aa6:	2800      	cmp	r0, #0
    2aa8:	d10f      	bne.n	2aca <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    2aaa:	2a00      	cmp	r2, #0
    2aac:	dd11      	ble.n	2ad2 <_read+0x36>
    2aae:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2ab0:	4e09      	ldr	r6, [pc, #36]	; (2ad8 <_read+0x3c>)
    2ab2:	4d0a      	ldr	r5, [pc, #40]	; (2adc <_read+0x40>)
    2ab4:	6830      	ldr	r0, [r6, #0]
    2ab6:	0021      	movs	r1, r4
    2ab8:	682b      	ldr	r3, [r5, #0]
    2aba:	4798      	blx	r3
		ptr++;
    2abc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    2abe:	42bc      	cmp	r4, r7
    2ac0:	d1f8      	bne.n	2ab4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    2ac2:	4640      	mov	r0, r8
    2ac4:	bc04      	pop	{r2}
    2ac6:	4690      	mov	r8, r2
    2ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    2aca:	2301      	movs	r3, #1
    2acc:	425b      	negs	r3, r3
    2ace:	4698      	mov	r8, r3
    2ad0:	e7f7      	b.n	2ac2 <_read+0x26>
	for (; len > 0; --len) {
    2ad2:	4680      	mov	r8, r0
    2ad4:	e7f5      	b.n	2ac2 <_read+0x26>
    2ad6:	46c0      	nop			; (mov r8, r8)
    2ad8:	200010c4 	.word	0x200010c4
    2adc:	200010bc 	.word	0x200010bc

00002ae0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ae2:	46c6      	mov	lr, r8
    2ae4:	b500      	push	{lr}
    2ae6:	000e      	movs	r6, r1
    2ae8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2aea:	3801      	subs	r0, #1
    2aec:	2802      	cmp	r0, #2
    2aee:	d810      	bhi.n	2b12 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2af0:	2a00      	cmp	r2, #0
    2af2:	d011      	beq.n	2b18 <_write+0x38>
    2af4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2af6:	4b0c      	ldr	r3, [pc, #48]	; (2b28 <_write+0x48>)
    2af8:	4698      	mov	r8, r3
    2afa:	4f0c      	ldr	r7, [pc, #48]	; (2b2c <_write+0x4c>)
    2afc:	4643      	mov	r3, r8
    2afe:	6818      	ldr	r0, [r3, #0]
    2b00:	5d31      	ldrb	r1, [r6, r4]
    2b02:	683b      	ldr	r3, [r7, #0]
    2b04:	4798      	blx	r3
    2b06:	2800      	cmp	r0, #0
    2b08:	db08      	blt.n	2b1c <_write+0x3c>
			return -1;
		}
		++nChars;
    2b0a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2b0c:	42a5      	cmp	r5, r4
    2b0e:	d1f5      	bne.n	2afc <_write+0x1c>
    2b10:	e006      	b.n	2b20 <_write+0x40>
		return -1;
    2b12:	2401      	movs	r4, #1
    2b14:	4264      	negs	r4, r4
    2b16:	e003      	b.n	2b20 <_write+0x40>
	for (; len != 0; --len) {
    2b18:	0014      	movs	r4, r2
    2b1a:	e001      	b.n	2b20 <_write+0x40>
			return -1;
    2b1c:	2401      	movs	r4, #1
    2b1e:	4264      	negs	r4, r4
	}
	return nChars;
}
    2b20:	0020      	movs	r0, r4
    2b22:	bc04      	pop	{r2}
    2b24:	4690      	mov	r8, r2
    2b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b28:	200010c4 	.word	0x200010c4
    2b2c:	200010c0 	.word	0x200010c0

00002b30 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2b30:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2b32:	4a06      	ldr	r2, [pc, #24]	; (2b4c <_sbrk+0x1c>)
    2b34:	6812      	ldr	r2, [r2, #0]
    2b36:	2a00      	cmp	r2, #0
    2b38:	d004      	beq.n	2b44 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2b3a:	4a04      	ldr	r2, [pc, #16]	; (2b4c <_sbrk+0x1c>)
    2b3c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2b3e:	18c3      	adds	r3, r0, r3
    2b40:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2b42:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2b44:	4902      	ldr	r1, [pc, #8]	; (2b50 <_sbrk+0x20>)
    2b46:	4a01      	ldr	r2, [pc, #4]	; (2b4c <_sbrk+0x1c>)
    2b48:	6011      	str	r1, [r2, #0]
    2b4a:	e7f6      	b.n	2b3a <_sbrk+0xa>
    2b4c:	20000a18 	.word	0x20000a18
    2b50:	20003df0 	.word	0x20003df0

00002b54 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2b54:	2001      	movs	r0, #1
    2b56:	4240      	negs	r0, r0
    2b58:	4770      	bx	lr

00002b5a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2b5a:	2380      	movs	r3, #128	; 0x80
    2b5c:	019b      	lsls	r3, r3, #6
    2b5e:	604b      	str	r3, [r1, #4]

	return 0;
}
    2b60:	2000      	movs	r0, #0
    2b62:	4770      	bx	lr

00002b64 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2b64:	2001      	movs	r0, #1
    2b66:	4770      	bx	lr

00002b68 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2b68:	2000      	movs	r0, #0
    2b6a:	4770      	bx	lr

00002b6c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2b6c:	b570      	push	{r4, r5, r6, lr}
    2b6e:	b082      	sub	sp, #8
    2b70:	0005      	movs	r5, r0
    2b72:	000e      	movs	r6, r1
	uint16_t temp = 0;
    2b74:	2200      	movs	r2, #0
    2b76:	466b      	mov	r3, sp
    2b78:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    2b7a:	4c06      	ldr	r4, [pc, #24]	; (2b94 <usart_serial_getchar+0x28>)
    2b7c:	466b      	mov	r3, sp
    2b7e:	1d99      	adds	r1, r3, #6
    2b80:	0028      	movs	r0, r5
    2b82:	47a0      	blx	r4
    2b84:	2800      	cmp	r0, #0
    2b86:	d1f9      	bne.n	2b7c <usart_serial_getchar+0x10>

	*c = temp;
    2b88:	466b      	mov	r3, sp
    2b8a:	3306      	adds	r3, #6
    2b8c:	881b      	ldrh	r3, [r3, #0]
    2b8e:	7033      	strb	r3, [r6, #0]
}
    2b90:	b002      	add	sp, #8
    2b92:	bd70      	pop	{r4, r5, r6, pc}
    2b94:	000019eb 	.word	0x000019eb

00002b98 <usart_serial_putchar>:
{
    2b98:	b570      	push	{r4, r5, r6, lr}
    2b9a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    2b9c:	b28c      	uxth	r4, r1
    2b9e:	4e03      	ldr	r6, [pc, #12]	; (2bac <usart_serial_putchar+0x14>)
    2ba0:	0021      	movs	r1, r4
    2ba2:	0028      	movs	r0, r5
    2ba4:	47b0      	blx	r6
    2ba6:	2800      	cmp	r0, #0
    2ba8:	d1fa      	bne.n	2ba0 <usart_serial_putchar+0x8>
}
    2baa:	bd70      	pop	{r4, r5, r6, pc}
    2bac:	000019c5 	.word	0x000019c5

00002bb0 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    2bb0:	b510      	push	{r4, lr}
    2bb2:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    2bb4:	466b      	mov	r3, sp
    2bb6:	1ddc      	adds	r4, r3, #7
    2bb8:	2201      	movs	r2, #1
    2bba:	0021      	movs	r1, r4
    2bbc:	480f      	ldr	r0, [pc, #60]	; (2bfc <USART_HOST_ISR_VECT+0x4c>)
    2bbe:	4b10      	ldr	r3, [pc, #64]	; (2c00 <USART_HOST_ISR_VECT+0x50>)
    2bc0:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    2bc2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2bc4:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    2bc8:	2200      	movs	r2, #0
    2bca:	4b0e      	ldr	r3, [pc, #56]	; (2c04 <USART_HOST_ISR_VECT+0x54>)
    2bcc:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    2bce:	4b0e      	ldr	r3, [pc, #56]	; (2c08 <USART_HOST_ISR_VECT+0x58>)
    2bd0:	781b      	ldrb	r3, [r3, #0]
    2bd2:	7821      	ldrb	r1, [r4, #0]
    2bd4:	4a0d      	ldr	r2, [pc, #52]	; (2c0c <USART_HOST_ISR_VECT+0x5c>)
    2bd6:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    2bd8:	2b7f      	cmp	r3, #127	; 0x7f
    2bda:	d00a      	beq.n	2bf2 <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    2bdc:	3301      	adds	r3, #1
    2bde:	4a0a      	ldr	r2, [pc, #40]	; (2c08 <USART_HOST_ISR_VECT+0x58>)
    2be0:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    2be2:	2201      	movs	r2, #1
    2be4:	4b07      	ldr	r3, [pc, #28]	; (2c04 <USART_HOST_ISR_VECT+0x54>)
    2be6:	701a      	strb	r2, [r3, #0]
    2be8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2bec:	b662      	cpsie	i
}
    2bee:	b002      	add	sp, #8
    2bf0:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    2bf2:	2200      	movs	r2, #0
    2bf4:	4b04      	ldr	r3, [pc, #16]	; (2c08 <USART_HOST_ISR_VECT+0x58>)
    2bf6:	701a      	strb	r2, [r3, #0]
    2bf8:	e7f3      	b.n	2be2 <USART_HOST_ISR_VECT+0x32>
    2bfa:	46c0      	nop			; (mov r8, r8)
    2bfc:	20000a1c 	.word	0x20000a1c
    2c00:	00001a55 	.word	0x00001a55
    2c04:	20000008 	.word	0x20000008
    2c08:	20000ad0 	.word	0x20000ad0
    2c0c:	20000a50 	.word	0x20000a50

00002c10 <sio2host_init>:
{
    2c10:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c12:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2c14:	2380      	movs	r3, #128	; 0x80
    2c16:	05db      	lsls	r3, r3, #23
    2c18:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2c1a:	2300      	movs	r3, #0
    2c1c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2c1e:	22ff      	movs	r2, #255	; 0xff
    2c20:	4669      	mov	r1, sp
    2c22:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2c24:	2200      	movs	r2, #0
    2c26:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2c28:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    2c2a:	2401      	movs	r4, #1
    2c2c:	2124      	movs	r1, #36	; 0x24
    2c2e:	4668      	mov	r0, sp
    2c30:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    2c32:	3101      	adds	r1, #1
    2c34:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    2c36:	3101      	adds	r1, #1
    2c38:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    2c3a:	3101      	adds	r1, #1
    2c3c:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    2c3e:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2c40:	3105      	adds	r1, #5
    2c42:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    2c44:	3101      	adds	r1, #1
    2c46:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2c48:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2c4a:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2c4c:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2c4e:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2c50:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2c52:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    2c54:	2313      	movs	r3, #19
    2c56:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2c58:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    2c5a:	2380      	movs	r3, #128	; 0x80
    2c5c:	035b      	lsls	r3, r3, #13
    2c5e:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    2c60:	4b2f      	ldr	r3, [pc, #188]	; (2d20 <sio2host_init+0x110>)
    2c62:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    2c64:	4b2f      	ldr	r3, [pc, #188]	; (2d24 <sio2host_init+0x114>)
    2c66:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    2c68:	2301      	movs	r3, #1
    2c6a:	425b      	negs	r3, r3
    2c6c:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    2c6e:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    2c70:	23e1      	movs	r3, #225	; 0xe1
    2c72:	025b      	lsls	r3, r3, #9
    2c74:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    2c76:	4d2c      	ldr	r5, [pc, #176]	; (2d28 <sio2host_init+0x118>)
    2c78:	4b2c      	ldr	r3, [pc, #176]	; (2d2c <sio2host_init+0x11c>)
    2c7a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2c7c:	4a2c      	ldr	r2, [pc, #176]	; (2d30 <sio2host_init+0x120>)
    2c7e:	4b2d      	ldr	r3, [pc, #180]	; (2d34 <sio2host_init+0x124>)
    2c80:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2c82:	4a2d      	ldr	r2, [pc, #180]	; (2d38 <sio2host_init+0x128>)
    2c84:	4b2d      	ldr	r3, [pc, #180]	; (2d3c <sio2host_init+0x12c>)
    2c86:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    2c88:	466a      	mov	r2, sp
    2c8a:	2184      	movs	r1, #132	; 0x84
    2c8c:	05c9      	lsls	r1, r1, #23
    2c8e:	0028      	movs	r0, r5
    2c90:	4b2b      	ldr	r3, [pc, #172]	; (2d40 <sio2host_init+0x130>)
    2c92:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2c94:	4f2b      	ldr	r7, [pc, #172]	; (2d44 <sio2host_init+0x134>)
    2c96:	683b      	ldr	r3, [r7, #0]
    2c98:	6898      	ldr	r0, [r3, #8]
    2c9a:	2100      	movs	r1, #0
    2c9c:	4e2a      	ldr	r6, [pc, #168]	; (2d48 <sio2host_init+0x138>)
    2c9e:	47b0      	blx	r6
	setbuf(stdin, NULL);
    2ca0:	683b      	ldr	r3, [r7, #0]
    2ca2:	6858      	ldr	r0, [r3, #4]
    2ca4:	2100      	movs	r1, #0
    2ca6:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2ca8:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2caa:	0030      	movs	r0, r6
    2cac:	4b27      	ldr	r3, [pc, #156]	; (2d4c <sio2host_init+0x13c>)
    2cae:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2cb0:	231f      	movs	r3, #31
    2cb2:	4018      	ands	r0, r3
    2cb4:	4084      	lsls	r4, r0
    2cb6:	4b26      	ldr	r3, [pc, #152]	; (2d50 <sio2host_init+0x140>)
    2cb8:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2cba:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2cbc:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2cbe:	2b00      	cmp	r3, #0
    2cc0:	d1fc      	bne.n	2cbc <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2cc2:	6833      	ldr	r3, [r6, #0]
    2cc4:	2202      	movs	r2, #2
    2cc6:	4313      	orrs	r3, r2
    2cc8:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2cca:	4b17      	ldr	r3, [pc, #92]	; (2d28 <sio2host_init+0x118>)
    2ccc:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    2cce:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2cd0:	2a00      	cmp	r2, #0
    2cd2:	d1fc      	bne.n	2cce <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    2cd4:	6859      	ldr	r1, [r3, #4]
    2cd6:	2280      	movs	r2, #128	; 0x80
    2cd8:	0252      	lsls	r2, r2, #9
    2cda:	430a      	orrs	r2, r1
    2cdc:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    2cde:	2101      	movs	r1, #1
    2ce0:	4a11      	ldr	r2, [pc, #68]	; (2d28 <sio2host_init+0x118>)
    2ce2:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    2ce4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2ce6:	2a00      	cmp	r2, #0
    2ce8:	d1fc      	bne.n	2ce4 <sio2host_init+0xd4>
	return (usart_hw->SYNCBUSY.reg);
    2cea:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2cec:	2a00      	cmp	r2, #0
    2cee:	d1fc      	bne.n	2cea <sio2host_init+0xda>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    2cf0:	6859      	ldr	r1, [r3, #4]
    2cf2:	2280      	movs	r2, #128	; 0x80
    2cf4:	0292      	lsls	r2, r2, #10
    2cf6:	430a      	orrs	r2, r1
    2cf8:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    2cfa:	2101      	movs	r1, #1
    2cfc:	4a0a      	ldr	r2, [pc, #40]	; (2d28 <sio2host_init+0x118>)
    2cfe:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    2d00:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2d02:	2a00      	cmp	r2, #0
    2d04:	d1fc      	bne.n	2d00 <sio2host_init+0xf0>
	USART_HOST_RX_ISR_ENABLE();
    2d06:	4913      	ldr	r1, [pc, #76]	; (2d54 <sio2host_init+0x144>)
    2d08:	2000      	movs	r0, #0
    2d0a:	4b13      	ldr	r3, [pc, #76]	; (2d58 <sio2host_init+0x148>)
    2d0c:	4798      	blx	r3
    2d0e:	2204      	movs	r2, #4
    2d10:	2384      	movs	r3, #132	; 0x84
    2d12:	05db      	lsls	r3, r3, #23
    2d14:	759a      	strb	r2, [r3, #22]
    2d16:	32fc      	adds	r2, #252	; 0xfc
    2d18:	4b0d      	ldr	r3, [pc, #52]	; (2d50 <sio2host_init+0x140>)
    2d1a:	601a      	str	r2, [r3, #0]
}
    2d1c:	b011      	add	sp, #68	; 0x44
    2d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d20:	00040003 	.word	0x00040003
    2d24:	00050003 	.word	0x00050003
    2d28:	20000a1c 	.word	0x20000a1c
    2d2c:	200010c4 	.word	0x200010c4
    2d30:	00002b99 	.word	0x00002b99
    2d34:	200010c0 	.word	0x200010c0
    2d38:	00002b6d 	.word	0x00002b6d
    2d3c:	200010bc 	.word	0x200010bc
    2d40:	00001661 	.word	0x00001661
    2d44:	2000000c 	.word	0x2000000c
    2d48:	00014095 	.word	0x00014095
    2d4c:	00001201 	.word	0x00001201
    2d50:	e000e100 	.word	0xe000e100
    2d54:	00002bb1 	.word	0x00002bb1
    2d58:	000011c5 	.word	0x000011c5

00002d5c <sio2host_deinit>:
{
    2d5c:	b570      	push	{r4, r5, r6, lr}
	SercomUsart *const usart_hw = &(module->hw->USART);
    2d5e:	4d15      	ldr	r5, [pc, #84]	; (2db4 <sio2host_deinit+0x58>)
    2d60:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2d62:	0020      	movs	r0, r4
    2d64:	4b14      	ldr	r3, [pc, #80]	; (2db8 <sio2host_deinit+0x5c>)
    2d66:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2d68:	231f      	movs	r3, #31
    2d6a:	4018      	ands	r0, r3
    2d6c:	3b1e      	subs	r3, #30
    2d6e:	4083      	lsls	r3, r0
    2d70:	2280      	movs	r2, #128	; 0x80
    2d72:	4912      	ldr	r1, [pc, #72]	; (2dbc <sio2host_deinit+0x60>)
    2d74:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2d76:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2d78:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	d1fc      	bne.n	2d78 <sio2host_deinit+0x1c>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2d7e:	6823      	ldr	r3, [r4, #0]
    2d80:	2202      	movs	r2, #2
    2d82:	4393      	bics	r3, r2
    2d84:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2d86:	4b0b      	ldr	r3, [pc, #44]	; (2db4 <sio2host_deinit+0x58>)
    2d88:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    2d8a:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2d8c:	2a00      	cmp	r2, #0
    2d8e:	d1fc      	bne.n	2d8a <sio2host_deinit+0x2e>
			module->receiver_enabled = false;
			break;

		case USART_TRANSCEIVER_TX:
			/* Disable TX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_TXEN;
    2d90:	685a      	ldr	r2, [r3, #4]
    2d92:	490b      	ldr	r1, [pc, #44]	; (2dc0 <sio2host_deinit+0x64>)
    2d94:	400a      	ands	r2, r1
    2d96:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = false;
    2d98:	2100      	movs	r1, #0
    2d9a:	4a06      	ldr	r2, [pc, #24]	; (2db4 <sio2host_deinit+0x58>)
    2d9c:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    2d9e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2da0:	2a00      	cmp	r2, #0
    2da2:	d1fc      	bne.n	2d9e <sio2host_deinit+0x42>
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
    2da4:	685a      	ldr	r2, [r3, #4]
    2da6:	4907      	ldr	r1, [pc, #28]	; (2dc4 <sio2host_deinit+0x68>)
    2da8:	400a      	ands	r2, r1
    2daa:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = false;
    2dac:	2200      	movs	r2, #0
    2dae:	4b01      	ldr	r3, [pc, #4]	; (2db4 <sio2host_deinit+0x58>)
    2db0:	719a      	strb	r2, [r3, #6]
}
    2db2:	bd70      	pop	{r4, r5, r6, pc}
    2db4:	20000a1c 	.word	0x20000a1c
    2db8:	00001201 	.word	0x00001201
    2dbc:	e000e100 	.word	0xe000e100
    2dc0:	fffeffff 	.word	0xfffeffff
    2dc4:	fffdffff 	.word	0xfffdffff

00002dc8 <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    2dc8:	4b13      	ldr	r3, [pc, #76]	; (2e18 <HAL_SPISend+0x50>)
    2dca:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    2dcc:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2dce:	7e1a      	ldrb	r2, [r3, #24]
    2dd0:	420a      	tst	r2, r1
    2dd2:	d0fc      	beq.n	2dce <HAL_SPISend+0x6>
    2dd4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    2dd6:	07d2      	lsls	r2, r2, #31
    2dd8:	d500      	bpl.n	2ddc <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2dda:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    2ddc:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2dde:	7e1a      	ldrb	r2, [r3, #24]
    2de0:	420a      	tst	r2, r1
    2de2:	d0fc      	beq.n	2dde <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    2de4:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2de6:	7e1a      	ldrb	r2, [r3, #24]
    2de8:	420a      	tst	r2, r1
    2dea:	d0fc      	beq.n	2de6 <HAL_SPISend+0x1e>
    2dec:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    2dee:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    2df0:	0752      	lsls	r2, r2, #29
    2df2:	d50a      	bpl.n	2e0a <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2df4:	8b5a      	ldrh	r2, [r3, #26]
    2df6:	0752      	lsls	r2, r2, #29
    2df8:	d501      	bpl.n	2dfe <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2dfa:	2204      	movs	r2, #4
    2dfc:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2dfe:	4a06      	ldr	r2, [pc, #24]	; (2e18 <HAL_SPISend+0x50>)
    2e00:	7992      	ldrb	r2, [r2, #6]
    2e02:	2a01      	cmp	r2, #1
    2e04:	d003      	beq.n	2e0e <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2e06:	6a98      	ldr	r0, [r3, #40]	; 0x28
    2e08:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    2e0a:	b2c0      	uxtb	r0, r0
}
    2e0c:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2e0e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    2e10:	05c0      	lsls	r0, r0, #23
    2e12:	0dc0      	lsrs	r0, r0, #23
    2e14:	e7f9      	b.n	2e0a <HAL_SPISend+0x42>
    2e16:	46c0      	nop			; (mov r8, r8)
    2e18:	20000ae0 	.word	0x20000ae0

00002e1c <HAL_ResetPinMakeOutput>:
{
    2e1c:	b500      	push	{lr}
    2e1e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    2e20:	a901      	add	r1, sp, #4
    2e22:	2301      	movs	r3, #1
    2e24:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    2e26:	2200      	movs	r2, #0
    2e28:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2e2a:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    2e2c:	202f      	movs	r0, #47	; 0x2f
    2e2e:	4b02      	ldr	r3, [pc, #8]	; (2e38 <HAL_ResetPinMakeOutput+0x1c>)
    2e30:	4798      	blx	r3
}
    2e32:	b003      	add	sp, #12
    2e34:	bd00      	pop	{pc}
    2e36:	46c0      	nop			; (mov r8, r8)
    2e38:	00000a99 	.word	0x00000a99

00002e3c <HAL_RadioDIO2Callback>:
{
    2e3c:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    2e3e:	4b05      	ldr	r3, [pc, #20]	; (2e54 <HAL_RadioDIO2Callback+0x18>)
    2e40:	681b      	ldr	r3, [r3, #0]
    2e42:	2b00      	cmp	r3, #0
    2e44:	d004      	beq.n	2e50 <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    2e46:	4b04      	ldr	r3, [pc, #16]	; (2e58 <HAL_RadioDIO2Callback+0x1c>)
    2e48:	4798      	blx	r3
    interruptHandlerDio2();
    2e4a:	4b02      	ldr	r3, [pc, #8]	; (2e54 <HAL_RadioDIO2Callback+0x18>)
    2e4c:	681b      	ldr	r3, [r3, #0]
    2e4e:	4798      	blx	r3
}
    2e50:	bd10      	pop	{r4, pc}
    2e52:	46c0      	nop			; (mov r8, r8)
    2e54:	20000adc 	.word	0x20000adc
    2e58:	000033a1 	.word	0x000033a1

00002e5c <HAL_RadioDIO1Callback>:
{
    2e5c:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    2e5e:	4b05      	ldr	r3, [pc, #20]	; (2e74 <HAL_RadioDIO1Callback+0x18>)
    2e60:	681b      	ldr	r3, [r3, #0]
    2e62:	2b00      	cmp	r3, #0
    2e64:	d004      	beq.n	2e70 <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    2e66:	4b04      	ldr	r3, [pc, #16]	; (2e78 <HAL_RadioDIO1Callback+0x1c>)
    2e68:	4798      	blx	r3
    interruptHandlerDio1();
    2e6a:	4b02      	ldr	r3, [pc, #8]	; (2e74 <HAL_RadioDIO1Callback+0x18>)
    2e6c:	681b      	ldr	r3, [r3, #0]
    2e6e:	4798      	blx	r3
}
    2e70:	bd10      	pop	{r4, pc}
    2e72:	46c0      	nop			; (mov r8, r8)
    2e74:	20000ad8 	.word	0x20000ad8
    2e78:	000033a1 	.word	0x000033a1

00002e7c <HAL_RadioDIO0Callback>:
{
    2e7c:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    2e7e:	4b05      	ldr	r3, [pc, #20]	; (2e94 <HAL_RadioDIO0Callback+0x18>)
    2e80:	681b      	ldr	r3, [r3, #0]
    2e82:	2b00      	cmp	r3, #0
    2e84:	d004      	beq.n	2e90 <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    2e86:	4b04      	ldr	r3, [pc, #16]	; (2e98 <HAL_RadioDIO0Callback+0x1c>)
    2e88:	4798      	blx	r3
    interruptHandlerDio0();
    2e8a:	4b02      	ldr	r3, [pc, #8]	; (2e94 <HAL_RadioDIO0Callback+0x18>)
    2e8c:	681b      	ldr	r3, [r3, #0]
    2e8e:	4798      	blx	r3
}
    2e90:	bd10      	pop	{r4, pc}
    2e92:	46c0      	nop			; (mov r8, r8)
    2e94:	20000ad4 	.word	0x20000ad4
    2e98:	000033a1 	.word	0x000033a1

00002e9c <HAL_SPICSAssert>:
{
    2e9c:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    2e9e:	2201      	movs	r2, #1
    2ea0:	4902      	ldr	r1, [pc, #8]	; (2eac <HAL_SPICSAssert+0x10>)
    2ea2:	4803      	ldr	r0, [pc, #12]	; (2eb0 <HAL_SPICSAssert+0x14>)
    2ea4:	4b03      	ldr	r3, [pc, #12]	; (2eb4 <HAL_SPICSAssert+0x18>)
    2ea6:	4798      	blx	r3
}
    2ea8:	bd10      	pop	{r4, pc}
    2eaa:	46c0      	nop			; (mov r8, r8)
    2eac:	200010c8 	.word	0x200010c8
    2eb0:	20000ae0 	.word	0x20000ae0
    2eb4:	0000156d 	.word	0x0000156d

00002eb8 <HAL_SPICSDeassert>:
{
    2eb8:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    2eba:	2200      	movs	r2, #0
    2ebc:	4902      	ldr	r1, [pc, #8]	; (2ec8 <HAL_SPICSDeassert+0x10>)
    2ebe:	4803      	ldr	r0, [pc, #12]	; (2ecc <HAL_SPICSDeassert+0x14>)
    2ec0:	4b03      	ldr	r3, [pc, #12]	; (2ed0 <HAL_SPICSDeassert+0x18>)
    2ec2:	4798      	blx	r3
}
    2ec4:	bd10      	pop	{r4, pc}
    2ec6:	46c0      	nop			; (mov r8, r8)
    2ec8:	200010c8 	.word	0x200010c8
    2ecc:	20000ae0 	.word	0x20000ae0
    2ed0:	0000156d 	.word	0x0000156d

00002ed4 <HAL_RadioInit>:
{
    2ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ed6:	46d6      	mov	lr, sl
    2ed8:	464f      	mov	r7, r9
    2eda:	4646      	mov	r6, r8
    2edc:	b5c0      	push	{r6, r7, lr}
    2ede:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    2ee0:	ac01      	add	r4, sp, #4
    2ee2:	2601      	movs	r6, #1
    2ee4:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    2ee6:	2500      	movs	r5, #0
    2ee8:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2eea:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    2eec:	0021      	movs	r1, r4
    2eee:	2052      	movs	r0, #82	; 0x52
    2ef0:	4f52      	ldr	r7, [pc, #328]	; (303c <HAL_RadioInit+0x168>)
    2ef2:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    2ef4:	0021      	movs	r1, r4
    2ef6:	203e      	movs	r0, #62	; 0x3e
    2ef8:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    2efa:	0021      	movs	r1, r4
    2efc:	203f      	movs	r0, #63	; 0x3f
    2efe:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    2f00:	0021      	movs	r1, r4
    2f02:	202f      	movs	r0, #47	; 0x2f
    2f04:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    2f06:	2280      	movs	r2, #128	; 0x80
    2f08:	02d2      	lsls	r2, r2, #11
    2f0a:	4b4d      	ldr	r3, [pc, #308]	; (3040 <HAL_RadioInit+0x16c>)
    2f0c:	619a      	str	r2, [r3, #24]
    2f0e:	4b4d      	ldr	r3, [pc, #308]	; (3044 <HAL_RadioInit+0x170>)
    2f10:	2280      	movs	r2, #128	; 0x80
    2f12:	05d2      	lsls	r2, r2, #23
    2f14:	619a      	str	r2, [r3, #24]
    2f16:	2280      	movs	r2, #128	; 0x80
    2f18:	0612      	lsls	r2, r2, #24
    2f1a:	619a      	str	r2, [r3, #24]
    2f1c:	2280      	movs	r2, #128	; 0x80
    2f1e:	0212      	lsls	r2, r2, #8
    2f20:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2f22:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    2f24:	0021      	movs	r1, r4
    2f26:	2053      	movs	r0, #83	; 0x53
    2f28:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    2f2a:	ac02      	add	r4, sp, #8
    2f2c:	0020      	movs	r0, r4
    2f2e:	4b46      	ldr	r3, [pc, #280]	; (3048 <HAL_RadioInit+0x174>)
    2f30:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    2f32:	2330      	movs	r3, #48	; 0x30
    2f34:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    2f36:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    2f38:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    2f3a:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    2f3c:	0021      	movs	r1, r4
    2f3e:	2000      	movs	r0, #0
    2f40:	4b42      	ldr	r3, [pc, #264]	; (304c <HAL_RadioInit+0x178>)
    2f42:	469a      	mov	sl, r3
    2f44:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    2f46:	2200      	movs	r2, #0
    2f48:	2100      	movs	r1, #0
    2f4a:	4841      	ldr	r0, [pc, #260]	; (3050 <HAL_RadioInit+0x17c>)
    2f4c:	4b41      	ldr	r3, [pc, #260]	; (3054 <HAL_RadioInit+0x180>)
    2f4e:	4699      	mov	r9, r3
    2f50:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    2f52:	2100      	movs	r1, #0
    2f54:	2000      	movs	r0, #0
    2f56:	4b40      	ldr	r3, [pc, #256]	; (3058 <HAL_RadioInit+0x184>)
    2f58:	4698      	mov	r8, r3
    2f5a:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    2f5c:	230b      	movs	r3, #11
    2f5e:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    2f60:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    2f62:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    2f64:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    2f66:	0021      	movs	r1, r4
    2f68:	200b      	movs	r0, #11
    2f6a:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    2f6c:	2200      	movs	r2, #0
    2f6e:	210b      	movs	r1, #11
    2f70:	483a      	ldr	r0, [pc, #232]	; (305c <HAL_RadioInit+0x188>)
    2f72:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    2f74:	2100      	movs	r1, #0
    2f76:	200b      	movs	r0, #11
    2f78:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    2f7a:	230c      	movs	r3, #12
    2f7c:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    2f7e:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    2f80:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    2f82:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    2f84:	0021      	movs	r1, r4
    2f86:	200c      	movs	r0, #12
    2f88:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    2f8a:	2200      	movs	r2, #0
    2f8c:	210c      	movs	r1, #12
    2f8e:	4834      	ldr	r0, [pc, #208]	; (3060 <HAL_RadioInit+0x18c>)
    2f90:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    2f92:	2100      	movs	r1, #0
    2f94:	200c      	movs	r0, #12
    2f96:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    2f98:	4b32      	ldr	r3, [pc, #200]	; (3064 <HAL_RadioInit+0x190>)
    2f9a:	4698      	mov	r8, r3
    2f9c:	233f      	movs	r3, #63	; 0x3f
    2f9e:	4642      	mov	r2, r8
    2fa0:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    2fa2:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    2fa4:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    2fa6:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    2fa8:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2faa:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2fac:	0021      	movs	r1, r4
    2fae:	203f      	movs	r0, #63	; 0x3f
    2fb0:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    2fb2:	4643      	mov	r3, r8
    2fb4:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    2fb6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2fb8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2fba:	2900      	cmp	r1, #0
    2fbc:	d104      	bne.n	2fc8 <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    2fbe:	0953      	lsrs	r3, r2, #5
    2fc0:	01db      	lsls	r3, r3, #7
    2fc2:	4929      	ldr	r1, [pc, #164]	; (3068 <HAL_RadioInit+0x194>)
    2fc4:	468c      	mov	ip, r1
    2fc6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2fc8:	211f      	movs	r1, #31
    2fca:	4011      	ands	r1, r2
    2fcc:	2201      	movs	r2, #1
    2fce:	0010      	movs	r0, r2
    2fd0:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    2fd2:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    2fd4:	ac02      	add	r4, sp, #8
    2fd6:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2fd8:	2300      	movs	r3, #0
    2fda:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2fdc:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2fde:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    2fe0:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    2fe2:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    2fe4:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    2fe6:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    2fe8:	3223      	adds	r2, #35	; 0x23
    2fea:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2fec:	3a18      	subs	r2, #24
    2fee:	2100      	movs	r1, #0
    2ff0:	a808      	add	r0, sp, #32
    2ff2:	4b1e      	ldr	r3, [pc, #120]	; (306c <HAL_RadioInit+0x198>)
    2ff4:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    2ff6:	4b1e      	ldr	r3, [pc, #120]	; (3070 <HAL_RadioInit+0x19c>)
    2ff8:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    2ffa:	2380      	movs	r3, #128	; 0x80
    2ffc:	025b      	lsls	r3, r3, #9
    2ffe:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    3000:	4b1c      	ldr	r3, [pc, #112]	; (3074 <HAL_RadioInit+0x1a0>)
    3002:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    3004:	2301      	movs	r3, #1
    3006:	425b      	negs	r3, r3
    3008:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    300a:	4b1b      	ldr	r3, [pc, #108]	; (3078 <HAL_RadioInit+0x1a4>)
    300c:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    300e:	4b1b      	ldr	r3, [pc, #108]	; (307c <HAL_RadioInit+0x1a8>)
    3010:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    3012:	4d1b      	ldr	r5, [pc, #108]	; (3080 <HAL_RadioInit+0x1ac>)
    3014:	0022      	movs	r2, r4
    3016:	491b      	ldr	r1, [pc, #108]	; (3084 <HAL_RadioInit+0x1b0>)
    3018:	0028      	movs	r0, r5
    301a:	4b1b      	ldr	r3, [pc, #108]	; (3088 <HAL_RadioInit+0x1b4>)
    301c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    301e:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    3020:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    3022:	2b00      	cmp	r3, #0
    3024:	d1fc      	bne.n	3020 <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3026:	6813      	ldr	r3, [r2, #0]
    3028:	2102      	movs	r1, #2
    302a:	430b      	orrs	r3, r1
    302c:	6013      	str	r3, [r2, #0]
}
    302e:	b010      	add	sp, #64	; 0x40
    3030:	bc1c      	pop	{r2, r3, r4}
    3032:	4690      	mov	r8, r2
    3034:	4699      	mov	r9, r3
    3036:	46a2      	mov	sl, r4
    3038:	bdf0      	pop	{r4, r5, r6, r7, pc}
    303a:	46c0      	nop			; (mov r8, r8)
    303c:	00000a99 	.word	0x00000a99
    3040:	40002900 	.word	0x40002900
    3044:	40002880 	.word	0x40002880
    3048:	00000631 	.word	0x00000631
    304c:	00000645 	.word	0x00000645
    3050:	00002e7d 	.word	0x00002e7d
    3054:	000004f1 	.word	0x000004f1
    3058:	0000051d 	.word	0x0000051d
    305c:	00002e5d 	.word	0x00002e5d
    3060:	00002e3d 	.word	0x00002e3d
    3064:	200010c8 	.word	0x200010c8
    3068:	40002800 	.word	0x40002800
    306c:	00013ee1 	.word	0x00013ee1
    3070:	001e8480 	.word	0x001e8480
    3074:	00530005 	.word	0x00530005
    3078:	003e0005 	.word	0x003e0005
    307c:	00520005 	.word	0x00520005
    3080:	20000ae0 	.word	0x20000ae0
    3084:	42001000 	.word	0x42001000
    3088:	00001291 	.word	0x00001291

0000308c <HAL_Radio_resources_init>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    308c:	4b07      	ldr	r3, [pc, #28]	; (30ac <HAL_Radio_resources_init+0x20>)
    308e:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    3090:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    3092:	2b00      	cmp	r3, #0
    3094:	d1fc      	bne.n	3090 <HAL_Radio_resources_init+0x4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3096:	6813      	ldr	r3, [r2, #0]
    3098:	2102      	movs	r1, #2
    309a:	430b      	orrs	r3, r1
    309c:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    309e:	4b03      	ldr	r3, [pc, #12]	; (30ac <HAL_Radio_resources_init+0x20>)
    30a0:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    30a2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(&master)) {
    30a4:	2b00      	cmp	r3, #0
    30a6:	d1fc      	bne.n	30a2 <HAL_Radio_resources_init+0x16>
}
    30a8:	4770      	bx	lr
    30aa:	46c0      	nop			; (mov r8, r8)
    30ac:	20000ae0 	.word	0x20000ae0

000030b0 <HAL_RadioDeInit>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    30b0:	4b06      	ldr	r3, [pc, #24]	; (30cc <HAL_RadioDeInit+0x1c>)
    30b2:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    30b4:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    30b6:	2b00      	cmp	r3, #0
    30b8:	d1fc      	bne.n	30b4 <HAL_RadioDeInit+0x4>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    30ba:	338f      	adds	r3, #143	; 0x8f
    30bc:	7513      	strb	r3, [r2, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    30be:	7613      	strb	r3, [r2, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    30c0:	6813      	ldr	r3, [r2, #0]
    30c2:	2102      	movs	r1, #2
    30c4:	438b      	bics	r3, r1
    30c6:	6013      	str	r3, [r2, #0]
}
    30c8:	4770      	bx	lr
    30ca:	46c0      	nop			; (mov r8, r8)
    30cc:	20000ae0 	.word	0x20000ae0

000030d0 <RADIO_Reset>:
{
    30d0:	b570      	push	{r4, r5, r6, lr}
    30d2:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    30d4:	4c0a      	ldr	r4, [pc, #40]	; (3100 <RADIO_Reset+0x30>)
    30d6:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    30d8:	4d0a      	ldr	r5, [pc, #40]	; (3104 <RADIO_Reset+0x34>)
    30da:	2680      	movs	r6, #128	; 0x80
    30dc:	0236      	lsls	r6, r6, #8
    30de:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    30e0:	2001      	movs	r0, #1
    30e2:	4b09      	ldr	r3, [pc, #36]	; (3108 <RADIO_Reset+0x38>)
    30e4:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    30e6:	a901      	add	r1, sp, #4
    30e8:	2300      	movs	r3, #0
    30ea:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    30ec:	2201      	movs	r2, #1
    30ee:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    30f0:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    30f2:	202f      	movs	r0, #47	; 0x2f
    30f4:	4b05      	ldr	r3, [pc, #20]	; (310c <RADIO_Reset+0x3c>)
    30f6:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    30f8:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    30fa:	47a0      	blx	r4
}
    30fc:	b002      	add	sp, #8
    30fe:	bd70      	pop	{r4, r5, r6, pc}
    3100:	00002e1d 	.word	0x00002e1d
    3104:	40002880 	.word	0x40002880
    3108:	0000336d 	.word	0x0000336d
    310c:	00000a99 	.word	0x00000a99

00003110 <RADIO_RegisterWrite>:
{
    3110:	b570      	push	{r4, r5, r6, lr}
    3112:	0004      	movs	r4, r0
    3114:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    3116:	4b05      	ldr	r3, [pc, #20]	; (312c <RADIO_RegisterWrite+0x1c>)
    3118:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    311a:	2080      	movs	r0, #128	; 0x80
    311c:	4320      	orrs	r0, r4
    311e:	4c04      	ldr	r4, [pc, #16]	; (3130 <RADIO_RegisterWrite+0x20>)
    3120:	47a0      	blx	r4
	HAL_SPISend(value);
    3122:	0028      	movs	r0, r5
    3124:	47a0      	blx	r4
	HAL_SPICSDeassert();
    3126:	4b03      	ldr	r3, [pc, #12]	; (3134 <RADIO_RegisterWrite+0x24>)
    3128:	4798      	blx	r3
}
    312a:	bd70      	pop	{r4, r5, r6, pc}
    312c:	00002e9d 	.word	0x00002e9d
    3130:	00002dc9 	.word	0x00002dc9
    3134:	00002eb9 	.word	0x00002eb9

00003138 <RADIO_RegisterRead>:
{
    3138:	b510      	push	{r4, lr}
    313a:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    313c:	4b06      	ldr	r3, [pc, #24]	; (3158 <RADIO_RegisterRead+0x20>)
    313e:	4798      	blx	r3
	HAL_SPISend(reg);
    3140:	207f      	movs	r0, #127	; 0x7f
    3142:	4020      	ands	r0, r4
    3144:	4c05      	ldr	r4, [pc, #20]	; (315c <RADIO_RegisterRead+0x24>)
    3146:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    3148:	20ff      	movs	r0, #255	; 0xff
    314a:	47a0      	blx	r4
    314c:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    314e:	4b04      	ldr	r3, [pc, #16]	; (3160 <RADIO_RegisterRead+0x28>)
    3150:	4798      	blx	r3
}
    3152:	0020      	movs	r0, r4
    3154:	bd10      	pop	{r4, pc}
    3156:	46c0      	nop			; (mov r8, r8)
    3158:	00002e9d 	.word	0x00002e9d
    315c:	00002dc9 	.word	0x00002dc9
    3160:	00002eb9 	.word	0x00002eb9

00003164 <RADIO_FrameWrite>:
{
    3164:	b570      	push	{r4, r5, r6, lr}
    3166:	0004      	movs	r4, r0
    3168:	000e      	movs	r6, r1
    316a:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    316c:	4b0a      	ldr	r3, [pc, #40]	; (3198 <RADIO_FrameWrite+0x34>)
    316e:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    3170:	2080      	movs	r0, #128	; 0x80
    3172:	4320      	orrs	r0, r4
    3174:	4b09      	ldr	r3, [pc, #36]	; (319c <RADIO_FrameWrite+0x38>)
    3176:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    3178:	2d00      	cmp	r5, #0
    317a:	d00a      	beq.n	3192 <RADIO_FrameWrite+0x2e>
    317c:	0034      	movs	r4, r6
    317e:	3d01      	subs	r5, #1
    3180:	b2ed      	uxtb	r5, r5
    3182:	3501      	adds	r5, #1
    3184:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    3186:	4e05      	ldr	r6, [pc, #20]	; (319c <RADIO_FrameWrite+0x38>)
    3188:	7820      	ldrb	r0, [r4, #0]
    318a:	47b0      	blx	r6
    318c:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    318e:	42ac      	cmp	r4, r5
    3190:	d1fa      	bne.n	3188 <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    3192:	4b03      	ldr	r3, [pc, #12]	; (31a0 <RADIO_FrameWrite+0x3c>)
    3194:	4798      	blx	r3
}
    3196:	bd70      	pop	{r4, r5, r6, pc}
    3198:	00002e9d 	.word	0x00002e9d
    319c:	00002dc9 	.word	0x00002dc9
    31a0:	00002eb9 	.word	0x00002eb9

000031a4 <RADIO_FrameRead>:
{
    31a4:	b570      	push	{r4, r5, r6, lr}
    31a6:	0004      	movs	r4, r0
    31a8:	000e      	movs	r6, r1
    31aa:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    31ac:	4b0a      	ldr	r3, [pc, #40]	; (31d8 <RADIO_FrameRead+0x34>)
    31ae:	4798      	blx	r3
    HAL_SPISend(offset);
    31b0:	0020      	movs	r0, r4
    31b2:	4b0a      	ldr	r3, [pc, #40]	; (31dc <RADIO_FrameRead+0x38>)
    31b4:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    31b6:	2d00      	cmp	r5, #0
    31b8:	d00b      	beq.n	31d2 <RADIO_FrameRead+0x2e>
    31ba:	0034      	movs	r4, r6
    31bc:	3d01      	subs	r5, #1
    31be:	b2ed      	uxtb	r5, r5
    31c0:	3501      	adds	r5, #1
    31c2:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    31c4:	4e05      	ldr	r6, [pc, #20]	; (31dc <RADIO_FrameRead+0x38>)
    31c6:	20ff      	movs	r0, #255	; 0xff
    31c8:	47b0      	blx	r6
    31ca:	7020      	strb	r0, [r4, #0]
    31cc:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    31ce:	42ac      	cmp	r4, r5
    31d0:	d1f9      	bne.n	31c6 <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    31d2:	4b03      	ldr	r3, [pc, #12]	; (31e0 <RADIO_FrameRead+0x3c>)
    31d4:	4798      	blx	r3
}
    31d6:	bd70      	pop	{r4, r5, r6, pc}
    31d8:	00002e9d 	.word	0x00002e9d
    31dc:	00002dc9 	.word	0x00002dc9
    31e0:	00002eb9 	.word	0x00002eb9

000031e4 <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    31e4:	2802      	cmp	r0, #2
    31e6:	d007      	beq.n	31f8 <HAL_RegisterDioInterruptHandler+0x14>
    31e8:	2804      	cmp	r0, #4
    31ea:	d008      	beq.n	31fe <HAL_RegisterDioInterruptHandler+0x1a>
    31ec:	2801      	cmp	r0, #1
    31ee:	d000      	beq.n	31f2 <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    31f0:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    31f2:	4b04      	ldr	r3, [pc, #16]	; (3204 <HAL_RegisterDioInterruptHandler+0x20>)
    31f4:	6019      	str	r1, [r3, #0]
      break;
    31f6:	e7fb      	b.n	31f0 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    31f8:	4b03      	ldr	r3, [pc, #12]	; (3208 <HAL_RegisterDioInterruptHandler+0x24>)
    31fa:	6019      	str	r1, [r3, #0]
      break;
    31fc:	e7f8      	b.n	31f0 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    31fe:	4b03      	ldr	r3, [pc, #12]	; (320c <HAL_RegisterDioInterruptHandler+0x28>)
    3200:	6019      	str	r1, [r3, #0]
}
    3202:	e7f5      	b.n	31f0 <HAL_RegisterDioInterruptHandler+0xc>
    3204:	20000ad4 	.word	0x20000ad4
    3208:	20000ad8 	.word	0x20000ad8
    320c:	20000adc 	.word	0x20000adc

00003210 <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    3210:	2801      	cmp	r0, #1
    3212:	d00a      	beq.n	322a <HAL_EnableRFCtrl+0x1a>
    3214:	2900      	cmp	r1, #0
    3216:	d008      	beq.n	322a <HAL_EnableRFCtrl+0x1a>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
   else if ((RFCtrl1 == PA_BOOST) && (RFCtrl2 == TX))
    3218:	2802      	cmp	r0, #2
    321a:	d10a      	bne.n	3232 <HAL_EnableRFCtrl+0x22>
    321c:	2901      	cmp	r1, #1
    321e:	d108      	bne.n	3232 <HAL_EnableRFCtrl+0x22>
		port_base->OUTCLR.reg = pin_mask;
    3220:	2280      	movs	r2, #128	; 0x80
    3222:	0192      	lsls	r2, r2, #6
    3224:	4b03      	ldr	r3, [pc, #12]	; (3234 <HAL_EnableRFCtrl+0x24>)
    3226:	615a      	str	r2, [r3, #20]
   {
	   port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);
   }
#endif	
}
    3228:	e003      	b.n	3232 <HAL_EnableRFCtrl+0x22>
		port_base->OUTSET.reg = pin_mask;
    322a:	2280      	movs	r2, #128	; 0x80
    322c:	0192      	lsls	r2, r2, #6
    322e:	4b01      	ldr	r3, [pc, #4]	; (3234 <HAL_EnableRFCtrl+0x24>)
    3230:	619a      	str	r2, [r3, #24]
    3232:	4770      	bx	lr
    3234:	40002800 	.word	0x40002800

00003238 <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    3238:	2801      	cmp	r0, #1
    323a:	d001      	beq.n	3240 <HAL_DisableRFCtrl+0x8>
    323c:	2900      	cmp	r1, #0
    323e:	d103      	bne.n	3248 <HAL_DisableRFCtrl+0x10>
		port_base->OUTCLR.reg = pin_mask;
    3240:	2280      	movs	r2, #128	; 0x80
    3242:	0192      	lsls	r2, r2, #6
    3244:	4b01      	ldr	r3, [pc, #4]	; (324c <HAL_DisableRFCtrl+0x14>)
    3246:	615a      	str	r2, [r3, #20]
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    3248:	4770      	bx	lr
    324a:	46c0      	nop			; (mov r8, r8)
    324c:	40002800 	.word	0x40002800

00003250 <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    3250:	2002      	movs	r0, #2
    3252:	4770      	bx	lr

00003254 <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    3254:	2000      	movs	r0, #0
    3256:	4770      	bx	lr

00003258 <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    3258:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    325a:	2280      	movs	r2, #128	; 0x80
    325c:	0092      	lsls	r2, r2, #2
    325e:	4b03      	ldr	r3, [pc, #12]	; (326c <HAL_TCXOPowerOn+0x14>)
    3260:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    3262:	2002      	movs	r0, #2
    3264:	4b02      	ldr	r3, [pc, #8]	; (3270 <HAL_TCXOPowerOn+0x18>)
    3266:	4798      	blx	r3
#endif
}
    3268:	bd10      	pop	{r4, pc}
    326a:	46c0      	nop			; (mov r8, r8)
    326c:	40002800 	.word	0x40002800
    3270:	00000181 	.word	0x00000181

00003274 <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    3274:	2280      	movs	r2, #128	; 0x80
    3276:	0092      	lsls	r2, r2, #2
    3278:	4b01      	ldr	r3, [pc, #4]	; (3280 <HAL_TCXOPowerOff+0xc>)
    327a:	615a      	str	r2, [r3, #20]
#ifdef TCXO_ENABLE
#ifndef TCXO_ALWAYS_ON
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
#endif
}
    327c:	4770      	bx	lr
    327e:	46c0      	nop			; (mov r8, r8)
    3280:	40002800 	.word	0x40002800

00003284 <HAL_Sleep>:
 *
 * \param[in] mode - sleep mode
 */
void HAL_Sleep(HAL_SleepMode_t mode)
{
	switch (mode)
    3284:	2801      	cmp	r0, #1
    3286:	d002      	beq.n	328e <HAL_Sleep+0xa>
    3288:	2802      	cmp	r0, #2
    328a:	d00c      	beq.n	32a6 <HAL_Sleep+0x22>
		{
			/* other sleep modes are not implemented currently */
			break;
		}
	}
}
    328c:	4770      	bx	lr
	PM->SLEEPCFG.reg = sleep_mode;
    328e:	2204      	movs	r2, #4
    3290:	2380      	movs	r3, #128	; 0x80
    3292:	05db      	lsls	r3, r3, #23
    3294:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    3296:	001a      	movs	r2, r3
    3298:	7853      	ldrb	r3, [r2, #1]
    329a:	2b04      	cmp	r3, #4
    329c:	d1fc      	bne.n	3298 <HAL_Sleep+0x14>
  __ASM volatile ("dsb 0xF":::"memory");
    329e:	f3bf 8f4f 	dsb	sy
	__WFI();
    32a2:	bf30      	wfi
    32a4:	e7f2      	b.n	328c <HAL_Sleep+0x8>
	PM->SLEEPCFG.reg = sleep_mode;
    32a6:	2205      	movs	r2, #5
    32a8:	2380      	movs	r3, #128	; 0x80
    32aa:	05db      	lsls	r3, r3, #23
    32ac:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    32ae:	001a      	movs	r2, r3
    32b0:	7853      	ldrb	r3, [r2, #1]
    32b2:	2b05      	cmp	r3, #5
    32b4:	d1fc      	bne.n	32b0 <HAL_Sleep+0x2c>
    32b6:	f3bf 8f4f 	dsb	sy
	__WFI();
    32ba:	bf30      	wfi
    32bc:	e7e6      	b.n	328c <HAL_Sleep+0x8>
	...

000032c0 <SleepTimerInit>:
/************************************** IMPLEMENTATION************************/
/**
* \brief Initializes the sleep timer module
*/
void SleepTimerInit(void)
{
    32c0:	b510      	push	{r4, lr}
    32c2:	b084      	sub	sp, #16
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
    32c4:	2201      	movs	r2, #1
    32c6:	466b      	mov	r3, sp
    32c8:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    32ca:	2300      	movs	r3, #0
    32cc:	4669      	mov	r1, sp
    32ce:	70cb      	strb	r3, [r1, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
    32d0:	710a      	strb	r2, [r1, #4]
	struct rtc_count_config rtc_config;
	rtc_count_get_config_defaults(&rtc_config);
	
	rtc_config.prescaler = RTC_COUNT_PRESCALER_OFF;
    32d2:	466a      	mov	r2, sp
    32d4:	800b      	strh	r3, [r1, #0]
	rtc_config.enable_read_sync = true;
	rtc_config.compare_values[0] = COMPARE_COUNT_MAX_VALUE;
    32d6:	3b01      	subs	r3, #1
    32d8:	9302      	str	r3, [sp, #8]
	rtc_config.compare_values[1] = COMPARE_COUNT_MAX_VALUE;
    32da:	9303      	str	r3, [sp, #12]
	rtc_count_init(&rtc, RTC, &rtc_config);
    32dc:	4c04      	ldr	r4, [pc, #16]	; (32f0 <SleepTimerInit+0x30>)
    32de:	4905      	ldr	r1, [pc, #20]	; (32f4 <SleepTimerInit+0x34>)
    32e0:	0020      	movs	r0, r4
    32e2:	4b05      	ldr	r3, [pc, #20]	; (32f8 <SleepTimerInit+0x38>)
    32e4:	4798      	blx	r3
	rtc_count_enable(&rtc);
    32e6:	0020      	movs	r0, r4
    32e8:	4b04      	ldr	r3, [pc, #16]	; (32fc <SleepTimerInit+0x3c>)
    32ea:	4798      	blx	r3
}
    32ec:	b004      	add	sp, #16
    32ee:	bd10      	pop	{r4, pc}
    32f0:	200010cc 	.word	0x200010cc
    32f4:	40002000 	.word	0x40002000
    32f8:	00000c49 	.word	0x00000c49
    32fc:	00000ac9 	.word	0x00000ac9

00003300 <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    3300:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    3302:	4802      	ldr	r0, [pc, #8]	; (330c <SleepTimerGetElapsedTime+0xc>)
    3304:	4b02      	ldr	r3, [pc, #8]	; (3310 <SleepTimerGetElapsedTime+0x10>)
    3306:	4798      	blx	r3
}
    3308:	bd10      	pop	{r4, pc}
    330a:	46c0      	nop			; (mov r8, r8)
    330c:	200010cc 	.word	0x200010cc
    3310:	00000bb9 	.word	0x00000bb9

00003314 <SleepTimerStart>:

/**
* \brief Initializes the sleep timer
*/
void SleepTimerStart(uint32_t sleepTicks, void (*cb)(void))
{
    3314:	b570      	push	{r4, r5, r6, lr}
    3316:	0005      	movs	r5, r0
    3318:	000e      	movs	r6, r1
	rtc_count_set_count(&rtc, 0);
    331a:	4c0a      	ldr	r4, [pc, #40]	; (3344 <SleepTimerStart+0x30>)
    331c:	2100      	movs	r1, #0
    331e:	0020      	movs	r0, r4
    3320:	4b09      	ldr	r3, [pc, #36]	; (3348 <SleepTimerStart+0x34>)
    3322:	4798      	blx	r3
	rtc_count_register_callback(&rtc, cb, RTC_COUNT_CALLBACK_COMPARE_0);
    3324:	2208      	movs	r2, #8
    3326:	0031      	movs	r1, r6
    3328:	0020      	movs	r0, r4
    332a:	4b08      	ldr	r3, [pc, #32]	; (334c <SleepTimerStart+0x38>)
    332c:	4798      	blx	r3
	rtc_count_set_compare(&rtc, sleepTicks, RTC_COUNT_COMPARE_0);
    332e:	2200      	movs	r2, #0
    3330:	0029      	movs	r1, r5
    3332:	0020      	movs	r0, r4
    3334:	4b06      	ldr	r3, [pc, #24]	; (3350 <SleepTimerStart+0x3c>)
    3336:	4798      	blx	r3
	rtc_count_enable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    3338:	2108      	movs	r1, #8
    333a:	0020      	movs	r0, r4
    333c:	4b05      	ldr	r3, [pc, #20]	; (3354 <SleepTimerStart+0x40>)
    333e:	4798      	blx	r3
}
    3340:	bd70      	pop	{r4, r5, r6, pc}
    3342:	46c0      	nop			; (mov r8, r8)
    3344:	200010cc 	.word	0x200010cc
    3348:	00000b75 	.word	0x00000b75
    334c:	00000ce5 	.word	0x00000ce5
    3350:	00000be5 	.word	0x00000be5
    3354:	00000d21 	.word	0x00000d21

00003358 <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    3358:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    335a:	2108      	movs	r1, #8
    335c:	4801      	ldr	r0, [pc, #4]	; (3364 <SleepTimerStop+0xc>)
    335e:	4b02      	ldr	r3, [pc, #8]	; (3368 <SleepTimerStop+0x10>)
    3360:	4798      	blx	r3
}
    3362:	bd10      	pop	{r4, pc}
    3364:	200010cc 	.word	0x200010cc
    3368:	00000d65 	.word	0x00000d65

0000336c <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    336c:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    336e:	2800      	cmp	r0, #0
    3370:	d103      	bne.n	337a <SystemBlockingWaitMs+0xe>
    3372:	2001      	movs	r0, #1
    3374:	4b02      	ldr	r3, [pc, #8]	; (3380 <SystemBlockingWaitMs+0x14>)
    3376:	4798      	blx	r3
#endif
}
    3378:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    337a:	4b02      	ldr	r3, [pc, #8]	; (3384 <SystemBlockingWaitMs+0x18>)
    337c:	4798      	blx	r3
    337e:	e7fb      	b.n	3378 <SystemBlockingWaitMs+0xc>
    3380:	00000155 	.word	0x00000155
    3384:	00000181 	.word	0x00000181

00003388 <system_enter_critical_section>:
{

}

void system_enter_critical_section(void)
{
    3388:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    338a:	4b01      	ldr	r3, [pc, #4]	; (3390 <system_enter_critical_section+0x8>)
    338c:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    338e:	bd10      	pop	{r4, pc}
    3390:	000001ad 	.word	0x000001ad

00003394 <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    3394:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    3396:	4b01      	ldr	r3, [pc, #4]	; (339c <system_leave_critical_section+0x8>)
    3398:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    339a:	bd10      	pop	{r4, pc}
    339c:	000001ed 	.word	0x000001ed

000033a0 <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    33a0:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    33a2:	4b16      	ldr	r3, [pc, #88]	; (33fc <PMM_Wakeup+0x5c>)
    33a4:	781b      	ldrb	r3, [r3, #0]
    33a6:	2b01      	cmp	r3, #1
    33a8:	d000      	beq.n	33ac <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    33aa:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    33ac:	2200      	movs	r2, #0
    33ae:	4b13      	ldr	r3, [pc, #76]	; (33fc <PMM_Wakeup+0x5c>)
    33b0:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    33b2:	4b13      	ldr	r3, [pc, #76]	; (3400 <PMM_Wakeup+0x60>)
    33b4:	4798      	blx	r3
    33b6:	4b13      	ldr	r3, [pc, #76]	; (3404 <PMM_Wakeup+0x64>)
    33b8:	4798      	blx	r3
    33ba:	4913      	ldr	r1, [pc, #76]	; (3408 <PMM_Wakeup+0x68>)
    33bc:	4b13      	ldr	r3, [pc, #76]	; (340c <PMM_Wakeup+0x6c>)
    33be:	4798      	blx	r3
    33c0:	4b13      	ldr	r3, [pc, #76]	; (3410 <PMM_Wakeup+0x70>)
    33c2:	4798      	blx	r3
    33c4:	0004      	movs	r4, r0
    33c6:	000d      	movs	r5, r1
        SleepTimerStop();
    33c8:	4b12      	ldr	r3, [pc, #72]	; (3414 <PMM_Wakeup+0x74>)
    33ca:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    33cc:	0020      	movs	r0, r4
    33ce:	0029      	movs	r1, r5
    33d0:	4b11      	ldr	r3, [pc, #68]	; (3418 <PMM_Wakeup+0x78>)
    33d2:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    33d4:	4b11      	ldr	r3, [pc, #68]	; (341c <PMM_Wakeup+0x7c>)
    33d6:	681b      	ldr	r3, [r3, #0]
    33d8:	2b00      	cmp	r3, #0
    33da:	d0e6      	beq.n	33aa <PMM_Wakeup+0xa>
    33dc:	689e      	ldr	r6, [r3, #8]
    33de:	2e00      	cmp	r6, #0
    33e0:	d0e3      	beq.n	33aa <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    33e2:	22fa      	movs	r2, #250	; 0xfa
    33e4:	0092      	lsls	r2, r2, #2
    33e6:	2300      	movs	r3, #0
    33e8:	0020      	movs	r0, r4
    33ea:	0029      	movs	r1, r5
    33ec:	4c0c      	ldr	r4, [pc, #48]	; (3420 <PMM_Wakeup+0x80>)
    33ee:	47a0      	blx	r4
    33f0:	47b0      	blx	r6
            sleepReq = NULL;
    33f2:	2200      	movs	r2, #0
    33f4:	4b09      	ldr	r3, [pc, #36]	; (341c <PMM_Wakeup+0x7c>)
    33f6:	601a      	str	r2, [r3, #0]
}
    33f8:	e7d7      	b.n	33aa <PMM_Wakeup+0xa>
    33fa:	46c0      	nop			; (mov r8, r8)
    33fc:	20000aec 	.word	0x20000aec
    3400:	00003301 	.word	0x00003301
    3404:	0001214d 	.word	0x0001214d
    3408:	41f423d7 	.word	0x41f423d7
    340c:	00011af5 	.word	0x00011af5
    3410:	00011231 	.word	0x00011231
    3414:	00003359 	.word	0x00003359
    3418:	00009c7d 	.word	0x00009c7d
    341c:	20000af0 	.word	0x20000af0
    3420:	0001116d 	.word	0x0001116d

00003424 <PMM_Sleep>:
{
    3424:	b570      	push	{r4, r5, r6, lr}
    3426:	1e05      	subs	r5, r0, #0
    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    3428:	d059      	beq.n	34de <PMM_Sleep+0xba>
    342a:	4b33      	ldr	r3, [pc, #204]	; (34f8 <PMM_Sleep+0xd4>)
    342c:	781b      	ldrb	r3, [r3, #0]
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    342e:	2000      	movs	r0, #0
    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    3430:	2b00      	cmp	r3, #0
    3432:	d000      	beq.n	3436 <PMM_Sleep+0x12>
}
    3434:	bd70      	pop	{r4, r5, r6, pc}
        canSleep = SYSTEM_ReadyToSleep();
    3436:	4b31      	ldr	r3, [pc, #196]	; (34fc <PMM_Sleep+0xd8>)
    3438:	4798      	blx	r3
    343a:	1e04      	subs	r4, r0, #0
        canSleep = canSleep && validateSleepDuration( req->sleepTimeMs );
    343c:	d051      	beq.n	34e2 <PMM_Sleep+0xbe>
        (PMM_SLEEPTIME_MAX_MS >= durationMs) && \
    343e:	682b      	ldr	r3, [r5, #0]
    3440:	4a2f      	ldr	r2, [pc, #188]	; (3500 <PMM_Sleep+0xdc>)
    3442:	4694      	mov	ip, r2
    3444:	4463      	add	r3, ip
        canSleep = canSleep && validateSleepDuration( req->sleepTimeMs );
    3446:	2400      	movs	r4, #0
    3448:	4a2e      	ldr	r2, [pc, #184]	; (3504 <PMM_Sleep+0xe0>)
    344a:	429a      	cmp	r2, r3
    344c:	4164      	adcs	r4, r4
    344e:	b2e4      	uxtb	r4, r4
        if ( SLEEP_MODE_BACKUP == req->sleep_mode )
    3450:	792a      	ldrb	r2, [r5, #4]
    3452:	2a02      	cmp	r2, #2
    3454:	d01e      	beq.n	3494 <PMM_Sleep+0x70>
        else if ( SLEEP_MODE_STANDBY == req->sleep_mode )
    3456:	2a01      	cmp	r2, #1
    3458:	d029      	beq.n	34ae <PMM_Sleep+0x8a>
    uint32_t sysSleepTime = ~0u; /* 0xffFFffFF is invalid */
    345a:	2601      	movs	r6, #1
    345c:	4276      	negs	r6, r6
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    345e:	2000      	movs	r0, #0
        if ( canSleep )
    3460:	2c00      	cmp	r4, #0
    3462:	d0e7      	beq.n	3434 <PMM_Sleep+0x10>
            SystemTimerSuspend();
    3464:	4b28      	ldr	r3, [pc, #160]	; (3508 <PMM_Sleep+0xe4>)
    3466:	4798      	blx	r3
            SleepTimerStart( MS_TO_SLEEP_TICKS( sysSleepTime - PMM_WAKEUPTIME_MS ), PMM_Wakeup );
    3468:	0030      	movs	r0, r6
    346a:	380a      	subs	r0, #10
    346c:	4b27      	ldr	r3, [pc, #156]	; (350c <PMM_Sleep+0xe8>)
    346e:	4798      	blx	r3
    3470:	4927      	ldr	r1, [pc, #156]	; (3510 <PMM_Sleep+0xec>)
    3472:	4b28      	ldr	r3, [pc, #160]	; (3514 <PMM_Sleep+0xf0>)
    3474:	4798      	blx	r3
    3476:	4b28      	ldr	r3, [pc, #160]	; (3518 <PMM_Sleep+0xf4>)
    3478:	4798      	blx	r3
    347a:	4928      	ldr	r1, [pc, #160]	; (351c <PMM_Sleep+0xf8>)
    347c:	4b28      	ldr	r3, [pc, #160]	; (3520 <PMM_Sleep+0xfc>)
    347e:	4798      	blx	r3
            pmmState = PMM_STATE_SLEEP;
    3480:	2201      	movs	r2, #1
    3482:	4b1d      	ldr	r3, [pc, #116]	; (34f8 <PMM_Sleep+0xd4>)
    3484:	701a      	strb	r2, [r3, #0]
            sleepReq = req;
    3486:	4b27      	ldr	r3, [pc, #156]	; (3524 <PMM_Sleep+0x100>)
    3488:	601d      	str	r5, [r3, #0]
            HAL_Sleep(req->sleep_mode);
    348a:	7928      	ldrb	r0, [r5, #4]
    348c:	4b26      	ldr	r3, [pc, #152]	; (3528 <PMM_Sleep+0x104>)
    348e:	4798      	blx	r3
            status = PMM_SLEEP_REQ_PROCESSED;
    3490:	2001      	movs	r0, #1
    3492:	e7cf      	b.n	3434 <PMM_Sleep+0x10>
            canSleep = canSleep && ( SWTIMER_INVALID_TIMEOUT == SwTimerNextExpiryDuration() );
    3494:	4a1b      	ldr	r2, [pc, #108]	; (3504 <PMM_Sleep+0xe0>)
    3496:	2400      	movs	r4, #0
    3498:	4293      	cmp	r3, r2
    349a:	d806      	bhi.n	34aa <PMM_Sleep+0x86>
    349c:	4b23      	ldr	r3, [pc, #140]	; (352c <PMM_Sleep+0x108>)
    349e:	4798      	blx	r3
    34a0:	3001      	adds	r0, #1
    34a2:	4244      	negs	r4, r0
    34a4:	4144      	adcs	r4, r0
    34a6:	e000      	b.n	34aa <PMM_Sleep+0x86>
    34a8:	2400      	movs	r4, #0
            sysSleepTime = req->sleepTimeMs;
    34aa:	682e      	ldr	r6, [r5, #0]
    34ac:	e7d7      	b.n	345e <PMM_Sleep+0x3a>
            sysSleepTime = SwTimerNextExpiryDuration();
    34ae:	4b1f      	ldr	r3, [pc, #124]	; (352c <PMM_Sleep+0x108>)
    34b0:	4798      	blx	r3
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    34b2:	1c43      	adds	r3, r0, #1
    34b4:	d01c      	beq.n	34f0 <PMM_Sleep+0xcc>
    34b6:	21fa      	movs	r1, #250	; 0xfa
    34b8:	0089      	lsls	r1, r1, #2
    34ba:	4b1d      	ldr	r3, [pc, #116]	; (3530 <PMM_Sleep+0x10c>)
    34bc:	4798      	blx	r3
    34be:	0003      	movs	r3, r0
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    34c0:	2000      	movs	r0, #0
            canSleep = canSleep && validateSleepDuration( sysSleepTime );
    34c2:	2c00      	cmp	r4, #0
    34c4:	d0b6      	beq.n	3434 <PMM_Sleep+0x10>
            if ( canSleep && (req->sleepTimeMs < sysSleepTime) )
    34c6:	490f      	ldr	r1, [pc, #60]	; (3504 <PMM_Sleep+0xe0>)
    34c8:	4a0d      	ldr	r2, [pc, #52]	; (3500 <PMM_Sleep+0xdc>)
    34ca:	189a      	adds	r2, r3, r2
    34cc:	428a      	cmp	r2, r1
    34ce:	d8b1      	bhi.n	3434 <PMM_Sleep+0x10>
    34d0:	682e      	ldr	r6, [r5, #0]
    34d2:	429e      	cmp	r6, r3
    34d4:	d9c6      	bls.n	3464 <PMM_Sleep+0x40>
    34d6:	001e      	movs	r6, r3
    34d8:	e7c4      	b.n	3464 <PMM_Sleep+0x40>
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    34da:	4b16      	ldr	r3, [pc, #88]	; (3534 <PMM_Sleep+0x110>)
    34dc:	e7f8      	b.n	34d0 <PMM_Sleep+0xac>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    34de:	2000      	movs	r0, #0
    34e0:	e7a8      	b.n	3434 <PMM_Sleep+0x10>
        if ( SLEEP_MODE_BACKUP == req->sleep_mode )
    34e2:	792b      	ldrb	r3, [r5, #4]
    34e4:	2b02      	cmp	r3, #2
    34e6:	d0df      	beq.n	34a8 <PMM_Sleep+0x84>
        else if ( SLEEP_MODE_STANDBY == req->sleep_mode )
    34e8:	2b01      	cmp	r3, #1
    34ea:	d0e0      	beq.n	34ae <PMM_Sleep+0x8a>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    34ec:	2000      	movs	r0, #0
    return status;
    34ee:	e7a1      	b.n	3434 <PMM_Sleep+0x10>
            canSleep = canSleep && validateSleepDuration( sysSleepTime );
    34f0:	2c00      	cmp	r4, #0
    34f2:	d1f2      	bne.n	34da <PMM_Sleep+0xb6>
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    34f4:	4e0f      	ldr	r6, [pc, #60]	; (3534 <PMM_Sleep+0x110>)
    34f6:	e7b2      	b.n	345e <PMM_Sleep+0x3a>
    34f8:	20000aec 	.word	0x20000aec
    34fc:	00009de5 	.word	0x00009de5
    3500:	fffffc18 	.word	0xfffffc18
    3504:	07cebbc8 	.word	0x07cebbc8
    3508:	00009c49 	.word	0x00009c49
    350c:	0001214d 	.word	0x0001214d
    3510:	42031375 	.word	0x42031375
    3514:	00011af5 	.word	0x00011af5
    3518:	00011201 	.word	0x00011201
    351c:	000033a1 	.word	0x000033a1
    3520:	00003315 	.word	0x00003315
    3524:	20000af0 	.word	0x20000af0
    3528:	00003285 	.word	0x00003285
    352c:	00009985 	.word	0x00009985
    3530:	00010e0d 	.word	0x00010e0d
    3534:	07cebfb0 	.word	0x07cebfb0

00003538 <LorawanReg_AS_Pds_Cb>:
}
#if (ENABLE_PDS == 1)
void LorawanReg_AS_Pds_Cb(void)
{
	; // nothing to do
}
    3538:	4770      	bx	lr
	...

0000353c <LORAReg_InitAS>:
{
    353c:	b570      	push	{r4, r5, r6, lr}
    353e:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AS;
    3540:	4b8e      	ldr	r3, [pc, #568]	; (377c <LORAReg_InitAS+0x240>)
    3542:	2103      	movs	r1, #3
    3544:	2226      	movs	r2, #38	; 0x26
    3546:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_AS;
    3548:	2410      	movs	r4, #16
    354a:	3204      	adds	r2, #4
    354c:	549c      	strb	r4, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_AS;
    354e:	3a29      	subs	r2, #41	; 0x29
    3550:	3126      	adds	r1, #38	; 0x26
    3552:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
    3554:	3902      	subs	r1, #2
    3556:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    3558:	001a      	movs	r2, r3
    355a:	3283      	adds	r2, #131	; 0x83
    355c:	2100      	movs	r1, #0
    355e:	711a      	strb	r2, [r3, #4]
    3560:	0a15      	lsrs	r5, r2, #8
    3562:	715d      	strb	r5, [r3, #5]
    3564:	0c15      	lsrs	r5, r2, #16
    3566:	719d      	strb	r5, [r3, #6]
    3568:	0e12      	lsrs	r2, r2, #24
    356a:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    356c:	001a      	movs	r2, r3
    356e:	3243      	adds	r2, #67	; 0x43
    3570:	701a      	strb	r2, [r3, #0]
    3572:	0a15      	lsrs	r5, r2, #8
    3574:	705d      	strb	r5, [r3, #1]
    3576:	0c15      	lsrs	r5, r2, #16
    3578:	709d      	strb	r5, [r3, #2]
    357a:	0e12      	lsrs	r2, r2, #24
    357c:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    357e:	001a      	movs	r2, r3
    3580:	32a3      	adds	r2, #163	; 0xa3
    3582:	721a      	strb	r2, [r3, #8]
    3584:	0a15      	lsrs	r5, r2, #8
    3586:	725d      	strb	r5, [r3, #9]
    3588:	0c15      	lsrs	r5, r2, #16
    358a:	729d      	strb	r5, [r3, #10]
    358c:	0e12      	lsrs	r2, r2, #24
    358e:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    3590:	001a      	movs	r2, r3
    3592:	3264      	adds	r2, #100	; 0x64
    3594:	32ff      	adds	r2, #255	; 0xff
    3596:	741a      	strb	r2, [r3, #16]
    3598:	0a15      	lsrs	r5, r2, #8
    359a:	745d      	strb	r5, [r3, #17]
    359c:	0c15      	lsrs	r5, r2, #16
    359e:	749d      	strb	r5, [r3, #18]
    35a0:	0e12      	lsrs	r2, r2, #24
    35a2:	74da      	strb	r2, [r3, #19]
	RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    35a4:	001a      	movs	r2, r3
    35a6:	3234      	adds	r2, #52	; 0x34
    35a8:	751a      	strb	r2, [r3, #20]
    35aa:	0a15      	lsrs	r5, r2, #8
    35ac:	755d      	strb	r5, [r3, #21]
    35ae:	0c15      	lsrs	r5, r2, #16
    35b0:	759d      	strb	r5, [r3, #22]
    35b2:	0e12      	lsrs	r2, r2, #24
    35b4:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    35b6:	001a      	movs	r2, r3
    35b8:	323d      	adds	r2, #61	; 0x3d
    35ba:	761a      	strb	r2, [r3, #24]
    35bc:	0a15      	lsrs	r5, r2, #8
    35be:	765d      	strb	r5, [r3, #25]
    35c0:	0c15      	lsrs	r5, r2, #16
    35c2:	769d      	strb	r5, [r3, #26]
    35c4:	0e12      	lsrs	r2, r2, #24
    35c6:	76da      	strb	r2, [r3, #27]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    35c8:	001a      	movs	r2, r3
    35ca:	32c4      	adds	r2, #196	; 0xc4
    35cc:	32ff      	adds	r2, #255	; 0xff
    35ce:	731a      	strb	r2, [r3, #12]
    35d0:	0a15      	lsrs	r5, r2, #8
    35d2:	735d      	strb	r5, [r3, #13]
    35d4:	0c15      	lsrs	r5, r2, #16
    35d6:	739d      	strb	r5, [r3, #14]
    35d8:	0e12      	lsrs	r2, r2, #24
    35da:	73da      	strb	r2, [r3, #15]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AS;
    35dc:	2202      	movs	r2, #2
    35de:	2522      	movs	r5, #34	; 0x22
    35e0:	555a      	strb	r2, [r3, r5]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AS;
    35e2:	3501      	adds	r5, #1
    35e4:	555a      	strb	r2, [r3, r5]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AS;	
    35e6:	2500      	movs	r5, #0
    35e8:	771d      	strb	r5, [r3, #28]
    35ea:	3d16      	subs	r5, #22
    35ec:	775d      	strb	r5, [r3, #29]
    35ee:	351c      	adds	r5, #28
    35f0:	779d      	strb	r5, [r3, #30]
    35f2:	3531      	adds	r5, #49	; 0x31
    35f4:	77dd      	strb	r5, [r3, #31]
	RegParams.MinNewChIndex = NEW_CHANNEL_INDEX_AS;
    35f6:	3d16      	subs	r5, #22
    35f8:	555a      	strb	r2, [r3, r5]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AS;
    35fa:	2632      	movs	r6, #50	; 0x32
    35fc:	3d01      	subs	r5, #1
    35fe:	555e      	strb	r6, [r3, r5]
	RegParams.minDataRate = MAC_DATARATE_MIN_AS;
    3600:	3d19      	subs	r5, #25
    3602:	3e0e      	subs	r6, #14
    3604:	559d      	strb	r5, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AS;
    3606:	3601      	adds	r6, #1
    3608:	5599      	strb	r1, [r3, r6]
	RegParams.Rx1DrOffset = 7;
    360a:	3607      	adds	r6, #7
    360c:	559d      	strb	r5, [r3, r6]
	RegParams.maxTxPwrIndx = MAX_TX_PWR_INDEX_AS;
    360e:	3601      	adds	r6, #1
    3610:	559d      	strb	r5, [r3, r6]
	RegParams.maxTxPwr = DEFAULT_EIRP_AS;
    3612:	3521      	adds	r5, #33	; 0x21
    3614:	555c      	strb	r4, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    3616:	34b1      	adds	r4, #177	; 0xb1
    3618:	34ff      	adds	r4, #255	; 0xff
    361a:	551a      	strb	r2, [r3, r4]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    361c:	4a58      	ldr	r2, [pc, #352]	; (3780 <LORAReg_InitAS+0x244>)
    361e:	7815      	ldrb	r5, [r2, #0]
    3620:	2468      	movs	r4, #104	; 0x68
    3622:	34ff      	adds	r4, #255	; 0xff
    3624:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    3626:	7855      	ldrb	r5, [r2, #1]
    3628:	3c2b      	subs	r4, #43	; 0x2b
    362a:	3cff      	subs	r4, #255	; 0xff
    362c:	551d      	strb	r5, [r3, r4]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    362e:	7894      	ldrb	r4, [r2, #2]
    3630:	223c      	movs	r2, #60	; 0x3c
    3632:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    3634:	2400      	movs	r4, #0
    3636:	3a04      	subs	r2, #4
    3638:	549c      	strb	r4, [r3, r2]
    363a:	3201      	adds	r2, #1
    363c:	549c      	strb	r4, [r3, r2]
    363e:	3201      	adds	r2, #1
    3640:	549c      	strb	r4, [r3, r2]
    3642:	3201      	adds	r2, #1
    3644:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    3646:	3207      	adds	r2, #7
    3648:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    364a:	001a      	movs	r2, r3
    364c:	323e      	adds	r2, #62	; 0x3e
    364e:	7011      	strb	r1, [r2, #0]
    3650:	7051      	strb	r1, [r2, #1]
    3652:	7091      	strb	r1, [r2, #2]
    3654:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = 1;
    3656:	31c3      	adds	r1, #195	; 0xc3
    3658:	31ff      	adds	r1, #255	; 0xff
    365a:	5c5a      	ldrb	r2, [r3, r1]
    365c:	2401      	movs	r4, #1
    365e:	4322      	orrs	r2, r4
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = 1;
    3660:	2402      	movs	r4, #2
    3662:	4322      	orrs	r2, r4
    3664:	545a      	strb	r2, [r3, r1]
	RegParams.band = ismBand;
    3666:	222e      	movs	r2, #46	; 0x2e
    3668:	5498      	strb	r0, [r3, r2]
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    366a:	3806      	subs	r0, #6
		result =  LORAWAN_INVALID_PARAMETER;
    366c:	240a      	movs	r4, #10
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    366e:	2808      	cmp	r0, #8
    3670:	d91a      	bls.n	36a8 <LORAReg_InitAS+0x16c>
	if(!initialized)
    3672:	4b44      	ldr	r3, [pc, #272]	; (3784 <LORAReg_InitAS+0x248>)
    3674:	781b      	ldrb	r3, [r3, #0]
    3676:	2b00      	cmp	r3, #0
    3678:	d102      	bne.n	3680 <LORAReg_InitAS+0x144>
		initialized = true;
    367a:	2201      	movs	r2, #1
    367c:	4b41      	ldr	r3, [pc, #260]	; (3784 <LORAReg_InitAS+0x248>)
    367e:	701a      	strb	r2, [r3, #0]
    LORAREG_InitGetAttrFnPtrsAS();	
    3680:	4b41      	ldr	r3, [pc, #260]	; (3788 <LORAReg_InitAS+0x24c>)
    3682:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAS();
    3684:	4b41      	ldr	r3, [pc, #260]	; (378c <LORAReg_InitAS+0x250>)
    3686:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAS();
    3688:	4b41      	ldr	r3, [pc, #260]	; (3790 <LORAReg_InitAS+0x254>)
    368a:	4798      	blx	r3
	PDS_STORE(RegParams.regParamItems.band_item_id);
    368c:	4b3b      	ldr	r3, [pc, #236]	; (377c <LORAReg_InitAS+0x240>)
    368e:	4a41      	ldr	r2, [pc, #260]	; (3794 <LORAReg_InitAS+0x258>)
    3690:	5c9a      	ldrb	r2, [r3, r2]
    3692:	4941      	ldr	r1, [pc, #260]	; (3798 <LORAReg_InitAS+0x25c>)
    3694:	5c58      	ldrb	r0, [r3, r1]
    3696:	0200      	lsls	r0, r0, #8
    3698:	4310      	orrs	r0, r2
    369a:	b2c1      	uxtb	r1, r0
    369c:	0a00      	lsrs	r0, r0, #8
    369e:	4b3f      	ldr	r3, [pc, #252]	; (379c <LORAReg_InitAS+0x260>)
    36a0:	4798      	blx	r3
}
    36a2:	0020      	movs	r0, r4
    36a4:	b006      	add	sp, #24
    36a6:	bd70      	pop	{r4, r5, r6, pc}
	memcpy (RegParams.pChParams, DefaultChannels923, sizeof(DefaultChannels923));
    36a8:	001c      	movs	r4, r3
    36aa:	0018      	movs	r0, r3
    36ac:	3083      	adds	r0, #131	; 0x83
    36ae:	3a2a      	subs	r2, #42	; 0x2a
    36b0:	493b      	ldr	r1, [pc, #236]	; (37a0 <LORAReg_InitAS+0x264>)
    36b2:	4d3c      	ldr	r5, [pc, #240]	; (37a4 <LORAReg_InitAS+0x268>)
    36b4:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923, sizeof(AdvChannels923));
    36b6:	0020      	movs	r0, r4
    36b8:	30a3      	adds	r0, #163	; 0xa3
    36ba:	2218      	movs	r2, #24
    36bc:	493a      	ldr	r1, [pc, #232]	; (37a8 <LORAReg_InitAS+0x26c>)
    36be:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams923, sizeof(SubBandParams923) );
    36c0:	0020      	movs	r0, r4
    36c2:	30c4      	adds	r0, #196	; 0xc4
    36c4:	30ff      	adds	r0, #255	; 0xff
    36c6:	220c      	movs	r2, #12
    36c8:	4938      	ldr	r1, [pc, #224]	; (37ac <LORAReg_InitAS+0x270>)
    36ca:	47a8      	blx	r5
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle923,sizeof(SubBandDutyCycle923));
    36cc:	0020      	movs	r0, r4
    36ce:	30ae      	adds	r0, #174	; 0xae
    36d0:	30ff      	adds	r0, #255	; 0xff
    36d2:	2202      	movs	r2, #2
    36d4:	4936      	ldr	r1, [pc, #216]	; (37b0 <LORAReg_InitAS+0x274>)
    36d6:	47a8      	blx	r5
    36d8:	2302      	movs	r3, #2
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    36da:	4828      	ldr	r0, [pc, #160]	; (377c <LORAReg_InitAS+0x240>)
    36dc:	25ff      	movs	r5, #255	; 0xff
	for (i = 2; i < RegParams.maxChannels; i++)
    36de:	242a      	movs	r4, #42	; 0x2a
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    36e0:	7902      	ldrb	r2, [r0, #4]
    36e2:	7941      	ldrb	r1, [r0, #5]
    36e4:	0209      	lsls	r1, r1, #8
    36e6:	4311      	orrs	r1, r2
    36e8:	7982      	ldrb	r2, [r0, #6]
    36ea:	0412      	lsls	r2, r2, #16
    36ec:	4311      	orrs	r1, r2
    36ee:	79c2      	ldrb	r2, [r0, #7]
    36f0:	0612      	lsls	r2, r2, #24
    36f2:	430a      	orrs	r2, r1
    36f4:	0059      	lsls	r1, r3, #1
    36f6:	188a      	adds	r2, r1, r2
    36f8:	7055      	strb	r5, [r2, #1]
	for (i = 2; i < RegParams.maxChannels; i++)
    36fa:	3301      	adds	r3, #1
    36fc:	b2db      	uxtb	r3, r3
    36fe:	5702      	ldrsb	r2, [r0, r4]
    3700:	4293      	cmp	r3, r2
    3702:	dbed      	blt.n	36e0 <LORAReg_InitAS+0x1a4>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_AS;
    3704:	4c1d      	ldr	r4, [pc, #116]	; (377c <LORAReg_InitAS+0x240>)
    3706:	2210      	movs	r2, #16
    3708:	23c2      	movs	r3, #194	; 0xc2
    370a:	33ff      	adds	r3, #255	; 0xff
    370c:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsAS, sizeof(DefaultDrParamsAS) );
    370e:	7820      	ldrb	r0, [r4, #0]
    3710:	7863      	ldrb	r3, [r4, #1]
    3712:	021b      	lsls	r3, r3, #8
    3714:	4303      	orrs	r3, r0
    3716:	78a0      	ldrb	r0, [r4, #2]
    3718:	0400      	lsls	r0, r0, #16
    371a:	4303      	orrs	r3, r0
    371c:	78e0      	ldrb	r0, [r4, #3]
    371e:	0600      	lsls	r0, r0, #24
    3720:	4318      	orrs	r0, r3
    3722:	3230      	adds	r2, #48	; 0x30
    3724:	4923      	ldr	r1, [pc, #140]	; (37b4 <LORAReg_InitAS+0x278>)
    3726:	4b1f      	ldr	r3, [pc, #124]	; (37a4 <LORAReg_InitAS+0x268>)
    3728:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_AS_05_IDX;
    372a:	2304      	movs	r3, #4
    372c:	2104      	movs	r1, #4
    372e:	4a22      	ldr	r2, [pc, #136]	; (37b8 <LORAReg_InitAS+0x27c>)
    3730:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AS_CH_PARAM_1;
    3732:	2100      	movs	r1, #0
    3734:	4a21      	ldr	r2, [pc, #132]	; (37bc <LORAReg_InitAS+0x280>)
    3736:	54a1      	strb	r1, [r4, r2]
    3738:	18a2      	adds	r2, r4, r2
    373a:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_AS_CH_PARAM_2;
    373c:	3101      	adds	r1, #1
    373e:	2284      	movs	r2, #132	; 0x84
    3740:	0092      	lsls	r2, r2, #2
    3742:	54a1      	strb	r1, [r4, r2]
    3744:	18a2      	adds	r2, r4, r2
    3746:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = PDS_REG_AS_BAND;
    3748:	3101      	adds	r1, #1
    374a:	4a12      	ldr	r2, [pc, #72]	; (3794 <LORAReg_InitAS+0x258>)
    374c:	54a1      	strb	r1, [r4, r2]
    374e:	18a2      	adds	r2, r4, r2
    3750:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    3752:	2200      	movs	r2, #0
    3754:	2383      	movs	r3, #131	; 0x83
    3756:	009b      	lsls	r3, r3, #2
    3758:	54e2      	strb	r2, [r4, r3]
    375a:	469c      	mov	ip, r3
    375c:	4464      	add	r4, ip
    375e:	2300      	movs	r3, #0
    3760:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegAsPdsOps;
    3762:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_AS_MAX_VALUE & 0x00FF);
    3764:	3203      	adds	r2, #3
    3766:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_AS_Pds_Cb;
    3768:	4a15      	ldr	r2, [pc, #84]	; (37c0 <LORAReg_InitAS+0x284>)
		PDS_RegFile(PDS_FILE_REG_AS_05_IDX,filemarks);
    376a:	9200      	str	r2, [sp, #0]
    376c:	4915      	ldr	r1, [pc, #84]	; (37c4 <LORAReg_InitAS+0x288>)
    376e:	9a03      	ldr	r2, [sp, #12]
    3770:	4b15      	ldr	r3, [pc, #84]	; (37c8 <LORAReg_InitAS+0x28c>)
    3772:	2004      	movs	r0, #4
    3774:	4c15      	ldr	r4, [pc, #84]	; (37cc <LORAReg_InitAS+0x290>)
    3776:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    3778:	2408      	movs	r4, #8
    377a:	e77a      	b.n	3672 <LORAReg_InitAS+0x136>
    377c:	20001328 	.word	0x20001328
    3780:	20001324 	.word	0x20001324
    3784:	20000af4 	.word	0x20000af4
    3788:	00007b35 	.word	0x00007b35
    378c:	00008265 	.word	0x00008265
    3790:	00008539 	.word	0x00008539
    3794:	00000212 	.word	0x00000212
    3798:	00000213 	.word	0x00000213
    379c:	00008d6d 	.word	0x00008d6d
    37a0:	00018fcc 	.word	0x00018fcc
    37a4:	00013e5d 	.word	0x00013e5d
    37a8:	00018fb4 	.word	0x00018fb4
    37ac:	00019014 	.word	0x00019014
    37b0:	00019010 	.word	0x00019010
    37b4:	00018fd0 	.word	0x00018fd0
    37b8:	0000020b 	.word	0x0000020b
    37bc:	0000020e 	.word	0x0000020e
    37c0:	00003539 	.word	0x00003539
    37c4:	20001104 	.word	0x20001104
    37c8:	00019020 	.word	0x00019020
    37cc:	00008dd1 	.word	0x00008dd1

000037d0 <LorawanReg_AU_Pds_Cb>:
}
#if (ENABLE_PDS == 1)
void LorawanReg_AU_Pds_Cb(void)
{
	
}
    37d0:	4770      	bx	lr
	...

000037d4 <LORAReg_InitAU>:
{
    37d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    37d6:	46de      	mov	lr, fp
    37d8:	4657      	mov	r7, sl
    37da:	464e      	mov	r6, r9
    37dc:	4645      	mov	r5, r8
    37de:	b5e0      	push	{r5, r6, r7, lr}
    37e0:	b087      	sub	sp, #28
    37e2:	4683      	mov	fp, r0
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AU;
    37e4:	4c83      	ldr	r4, [pc, #524]	; (39f4 <LORAReg_InitAU+0x220>)
    37e6:	2103      	movs	r1, #3
    37e8:	2326      	movs	r3, #38	; 0x26
    37ea:	54e1      	strb	r1, [r4, r3]
	RegParams.maxChannels = MAX_CHANNELS_AU_NA;
    37ec:	3145      	adds	r1, #69	; 0x45
    37ee:	3304      	adds	r3, #4
    37f0:	54e1      	strb	r1, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    37f2:	3941      	subs	r1, #65	; 0x41
    37f4:	3b03      	subs	r3, #3
    37f6:	54e1      	strb	r1, [r4, r3]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    37f8:	0020      	movs	r0, r4
    37fa:	30b3      	adds	r0, #179	; 0xb3
    37fc:	2600      	movs	r6, #0
    37fe:	7120      	strb	r0, [r4, #4]
    3800:	0a03      	lsrs	r3, r0, #8
    3802:	7163      	strb	r3, [r4, #5]
    3804:	0c03      	lsrs	r3, r0, #16
    3806:	71a3      	strb	r3, [r4, #6]
    3808:	0e03      	lsrs	r3, r0, #24
    380a:	71e3      	strb	r3, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    380c:	2343      	movs	r3, #67	; 0x43
    380e:	4698      	mov	r8, r3
    3810:	44a0      	add	r8, r4
    3812:	4643      	mov	r3, r8
    3814:	7023      	strb	r3, [r4, #0]
    3816:	4643      	mov	r3, r8
    3818:	0a1b      	lsrs	r3, r3, #8
    381a:	7063      	strb	r3, [r4, #1]
    381c:	4643      	mov	r3, r8
    381e:	0c1b      	lsrs	r3, r3, #16
    3820:	70a3      	strb	r3, [r4, #2]
    3822:	4643      	mov	r3, r8
    3824:	0e1b      	lsrs	r3, r3, #24
    3826:	70e3      	strb	r3, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    3828:	2321      	movs	r3, #33	; 0x21
    382a:	31f8      	adds	r1, #248	; 0xf8
    382c:	54e1      	strb	r1, [r4, r3]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AU;
    382e:	2508      	movs	r5, #8
    3830:	2708      	movs	r7, #8
    3832:	3301      	adds	r3, #1
    3834:	54e5      	strb	r5, [r4, r3]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AU;
    3836:	3301      	adds	r3, #1
    3838:	54e5      	strb	r5, [r4, r3]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AU;
    383a:	3b83      	subs	r3, #131	; 0x83
    383c:	469c      	mov	ip, r3
    383e:	7723      	strb	r3, [r4, #28]
    3840:	2370      	movs	r3, #112	; 0x70
    3842:	7763      	strb	r3, [r4, #29]
    3844:	77a7      	strb	r7, [r4, #30]
    3846:	3b39      	subs	r3, #57	; 0x39
    3848:	77e3      	strb	r3, [r4, #31]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AU;
    384a:	39c7      	subs	r1, #199	; 0xc7
    384c:	3b17      	subs	r3, #23
    384e:	54e1      	strb	r1, [r4, r3]
	RegParams.minDataRate = MAC_DATARATE_MIN_AU;
    3850:	2224      	movs	r2, #36	; 0x24
    3852:	3b1a      	subs	r3, #26
    3854:	54a3      	strb	r3, [r4, r2]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AU;
    3856:	3201      	adds	r2, #1
    3858:	54a6      	strb	r6, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU_NA;
    385a:	321b      	adds	r2, #27
    385c:	4692      	mov	sl, r2
    385e:	2254      	movs	r2, #84	; 0x54
    3860:	32ff      	adds	r2, #255	; 0xff
    3862:	4653      	mov	r3, sl
    3864:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU_NA;
    3866:	23aa      	movs	r3, #170	; 0xaa
    3868:	005b      	lsls	r3, r3, #1
    386a:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    386c:	2350      	movs	r3, #80	; 0x50
    386e:	33ff      	adds	r3, #255	; 0xff
    3870:	54e6      	strb	r6, [r4, r3]
	RegParams.cmnParams.paramsType1.maxTxDR = DR6;
    3872:	3301      	adds	r3, #1
    3874:	3a4e      	subs	r2, #78	; 0x4e
    3876:	3aff      	subs	r2, #255	; 0xff
    3878:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    387a:	2352      	movs	r3, #82	; 0x52
    387c:	33ff      	adds	r3, #255	; 0xff
    387e:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    3880:	3b45      	subs	r3, #69	; 0x45
    3882:	3bff      	subs	r3, #255	; 0xff
    3884:	4699      	mov	r9, r3
    3886:	3346      	adds	r3, #70	; 0x46
    3888:	33ff      	adds	r3, #255	; 0xff
    388a:	464a      	mov	r2, r9
    388c:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 8;
    388e:	2356      	movs	r3, #86	; 0x56
    3890:	33ff      	adds	r3, #255	; 0xff
    3892:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_AU;
    3894:	2300      	movs	r3, #0
    3896:	4699      	mov	r9, r3
    3898:	2344      	movs	r3, #68	; 0x44
    389a:	33ff      	adds	r3, #255	; 0xff
    389c:	464a      	mov	r2, r9
    389e:	54e2      	strb	r2, [r4, r3]
    38a0:	0023      	movs	r3, r4
    38a2:	3344      	adds	r3, #68	; 0x44
    38a4:	33ff      	adds	r3, #255	; 0xff
    38a6:	2228      	movs	r2, #40	; 0x28
    38a8:	4252      	negs	r2, r2
    38aa:	705a      	strb	r2, [r3, #1]
    38ac:	2274      	movs	r2, #116	; 0x74
    38ae:	4252      	negs	r2, r2
    38b0:	709a      	strb	r2, [r3, #2]
    38b2:	2236      	movs	r2, #54	; 0x36
    38b4:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_AU;
    38b6:	2360      	movs	r3, #96	; 0x60
    38b8:	4699      	mov	r9, r3
    38ba:	2348      	movs	r3, #72	; 0x48
    38bc:	33ff      	adds	r3, #255	; 0xff
    38be:	464a      	mov	r2, r9
    38c0:	54e2      	strb	r2, [r4, r3]
    38c2:	0023      	movs	r3, r4
    38c4:	3348      	adds	r3, #72	; 0x48
    38c6:	33ff      	adds	r3, #255	; 0xff
    38c8:	227a      	movs	r2, #122	; 0x7a
    38ca:	4252      	negs	r2, r2
    38cc:	705a      	strb	r2, [r3, #1]
    38ce:	2269      	movs	r2, #105	; 0x69
    38d0:	4252      	negs	r2, r2
    38d2:	709a      	strb	r2, [r3, #2]
    38d4:	2236      	movs	r2, #54	; 0x36
    38d6:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_AU;
    38d8:	234c      	movs	r3, #76	; 0x4c
    38da:	33ff      	adds	r3, #255	; 0xff
    38dc:	4662      	mov	r2, ip
    38de:	54e2      	strb	r2, [r4, r3]
    38e0:	0023      	movs	r3, r4
    38e2:	334c      	adds	r3, #76	; 0x4c
    38e4:	33ff      	adds	r3, #255	; 0xff
    38e6:	2270      	movs	r2, #112	; 0x70
    38e8:	705a      	strb	r2, [r3, #1]
    38ea:	709f      	strb	r7, [r3, #2]
    38ec:	2237      	movs	r2, #55	; 0x37
    38ee:	70da      	strb	r2, [r3, #3]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    38f0:	0023      	movs	r3, r4
    38f2:	3334      	adds	r3, #52	; 0x34
    38f4:	7523      	strb	r3, [r4, #20]
    38f6:	0a1a      	lsrs	r2, r3, #8
    38f8:	7562      	strb	r2, [r4, #21]
    38fa:	0c1a      	lsrs	r2, r3, #16
    38fc:	75a2      	strb	r2, [r4, #22]
    38fe:	0e1b      	lsrs	r3, r3, #24
    3900:	75e3      	strb	r3, [r4, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    3902:	0023      	movs	r3, r4
    3904:	333d      	adds	r3, #61	; 0x3d
    3906:	7623      	strb	r3, [r4, #24]
    3908:	0a1a      	lsrs	r2, r3, #8
    390a:	7662      	strb	r2, [r4, #25]
    390c:	0c1a      	lsrs	r2, r3, #16
    390e:	76a2      	strb	r2, [r4, #26]
    3910:	0e1b      	lsrs	r3, r3, #24
    3912:	76e3      	strb	r3, [r4, #27]
    RegParams.Rx1DrOffset = 5;
    3914:	2305      	movs	r3, #5
    3916:	469c      	mov	ip, r3
    3918:	3327      	adds	r3, #39	; 0x27
    391a:	4662      	mov	r2, ip
    391c:	54e2      	strb	r2, [r4, r3]
	RegParams.maxTxPwrIndx = 10;
    391e:	3b22      	subs	r3, #34	; 0x22
    3920:	469c      	mov	ip, r3
    3922:	3323      	adds	r3, #35	; 0x23
    3924:	4662      	mov	r2, ip
    3926:	54e2      	strb	r2, [r4, r3]
	RegParams.maxTxPwr = DEFAULT_EIRP_AU;
    3928:	3b0f      	subs	r3, #15
    392a:	469c      	mov	ip, r3
    392c:	330a      	adds	r3, #10
    392e:	4662      	mov	r2, ip
    3930:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    3932:	2358      	movs	r3, #88	; 0x58
    3934:	33ff      	adds	r3, #255	; 0xff
    3936:	54e6      	strb	r6, [r4, r3]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[0];	
    3938:	4b2f      	ldr	r3, [pc, #188]	; (39f8 <LORAReg_InitAU+0x224>)
    393a:	469a      	mov	sl, r3
    393c:	781a      	ldrb	r2, [r3, #0]
    393e:	4691      	mov	r9, r2
    3940:	223d      	movs	r2, #61	; 0x3d
    3942:	464b      	mov	r3, r9
    3944:	54a3      	strb	r3, [r4, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[1];
    3946:	4653      	mov	r3, sl
    3948:	785b      	ldrb	r3, [r3, #1]
    394a:	469c      	mov	ip, r3
    394c:	233c      	movs	r3, #60	; 0x3c
    394e:	4662      	mov	r2, ip
    3950:	54e2      	strb	r2, [r4, r3]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    3952:	2300      	movs	r3, #0
    3954:	5463      	strb	r3, [r4, r1]
    3956:	2100      	movs	r1, #0
    3958:	3339      	adds	r3, #57	; 0x39
    395a:	54e1      	strb	r1, [r4, r3]
    395c:	3301      	adds	r3, #1
    395e:	54e1      	strb	r1, [r4, r3]
    3960:	3301      	adds	r3, #1
    3962:	54e1      	strb	r1, [r4, r3]
	RegParams.joinbccount =0;
    3964:	3307      	adds	r3, #7
    3966:	54e6      	strb	r6, [r4, r3]
	RegParams.joinDutyCycleTimeout =0;
    3968:	0023      	movs	r3, r4
    396a:	333e      	adds	r3, #62	; 0x3e
    396c:	7019      	strb	r1, [r3, #0]
    396e:	7059      	strb	r1, [r3, #1]
    3970:	7099      	strb	r1, [r3, #2]
    3972:	70d9      	strb	r1, [r3, #3]
	RegParams.band = ismBand;
    3974:	232e      	movs	r3, #46	; 0x2e
    3976:	465a      	mov	r2, fp
    3978:	54e2      	strb	r2, [r4, r3]
	memcpy (RegParams.pChParams, DefaultChannels915AU, sizeof(DefaultChannels915AU) );
    397a:	2290      	movs	r2, #144	; 0x90
    397c:	491f      	ldr	r1, [pc, #124]	; (39fc <LORAReg_InitAU+0x228>)
    397e:	4b20      	ldr	r3, [pc, #128]	; (3a00 <LORAReg_InitAU+0x22c>)
    3980:	4699      	mov	r9, r3
    3982:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsAU, sizeof(DefaultDrParamsAU) );
    3984:	2270      	movs	r2, #112	; 0x70
    3986:	491f      	ldr	r1, [pc, #124]	; (3a04 <LORAReg_InitAU+0x230>)
    3988:	4640      	mov	r0, r8
    398a:	47c8      	blx	r9
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    398c:	23ab      	movs	r3, #171	; 0xab
    398e:	005b      	lsls	r3, r3, #1
    3990:	54e6      	strb	r6, [r4, r3]
	RegParams.regParamItems.fileid = PDS_FILE_REG_AU_09_IDX;
    3992:	4b1d      	ldr	r3, [pc, #116]	; (3a08 <LORAReg_InitAU+0x234>)
    3994:	54e5      	strb	r5, [r4, r3]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AU_CH_PARAM;
    3996:	2200      	movs	r2, #0
    3998:	4b1c      	ldr	r3, [pc, #112]	; (3a0c <LORAReg_InitAU+0x238>)
    399a:	54e2      	strb	r2, [r4, r3]
    399c:	18e3      	adds	r3, r4, r3
    399e:	705f      	strb	r7, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    39a0:	2384      	movs	r3, #132	; 0x84
    39a2:	009b      	lsls	r3, r3, #2
    39a4:	54e2      	strb	r2, [r4, r3]
    39a6:	18e3      	adds	r3, r4, r3
    39a8:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    39aa:	4b19      	ldr	r3, [pc, #100]	; (3a10 <LORAReg_InitAU+0x23c>)
    39ac:	54e2      	strb	r2, [r4, r3]
    39ae:	18e3      	adds	r3, r4, r3
    39b0:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.lastUsedSB = PDS_REG_AU_LAST_USED_SB;
    39b2:	3201      	adds	r2, #1
    39b4:	2383      	movs	r3, #131	; 0x83
    39b6:	009b      	lsls	r3, r3, #2
    39b8:	54e2      	strb	r2, [r4, r3]
    39ba:	469c      	mov	ip, r3
    39bc:	4464      	add	r4, ip
    39be:	7067      	strb	r7, [r4, #1]
	filemarks.fileMarkListAddr = aRegAuPdsOps;
    39c0:	ab02      	add	r3, sp, #8
	filemarks.numItems =  (uint8_t)(PDS_REG_AU_MAX_VALUE & 0x00FF);
    39c2:	3201      	adds	r2, #1
    39c4:	711a      	strb	r2, [r3, #4]
	filemarks.fIDcb = LorawanReg_AU_Pds_Cb;
    39c6:	4a13      	ldr	r2, [pc, #76]	; (3a14 <LORAReg_InitAU+0x240>)
	PDS_RegFile(PDS_FILE_REG_AU_09_IDX,filemarks);
    39c8:	9200      	str	r2, [sp, #0]
    39ca:	4913      	ldr	r1, [pc, #76]	; (3a18 <LORAReg_InitAU+0x244>)
    39cc:	9a03      	ldr	r2, [sp, #12]
    39ce:	4b13      	ldr	r3, [pc, #76]	; (3a1c <LORAReg_InitAU+0x248>)
    39d0:	2008      	movs	r0, #8
    39d2:	4c13      	ldr	r4, [pc, #76]	; (3a20 <LORAReg_InitAU+0x24c>)
    39d4:	47a0      	blx	r4
    LORAREG_InitGetAttrFnPtrsAU();
    39d6:	4b13      	ldr	r3, [pc, #76]	; (3a24 <LORAReg_InitAU+0x250>)
    39d8:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAU();
    39da:	4b13      	ldr	r3, [pc, #76]	; (3a28 <LORAReg_InitAU+0x254>)
    39dc:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAU();
    39de:	4b13      	ldr	r3, [pc, #76]	; (3a2c <LORAReg_InitAU+0x258>)
    39e0:	4798      	blx	r3
}
    39e2:	2008      	movs	r0, #8
    39e4:	b007      	add	sp, #28
    39e6:	bc3c      	pop	{r2, r3, r4, r5}
    39e8:	4690      	mov	r8, r2
    39ea:	4699      	mov	r9, r3
    39ec:	46a2      	mov	sl, r4
    39ee:	46ab      	mov	fp, r5
    39f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39f2:	46c0      	nop			; (mov r8, r8)
    39f4:	20001328 	.word	0x20001328
    39f8:	20001324 	.word	0x20001324
    39fc:	00019038 	.word	0x00019038
    3a00:	00013e5d 	.word	0x00013e5d
    3a04:	000190c8 	.word	0x000190c8
    3a08:	0000020b 	.word	0x0000020b
    3a0c:	0000020e 	.word	0x0000020e
    3a10:	00000212 	.word	0x00000212
    3a14:	000037d1 	.word	0x000037d1
    3a18:	20001108 	.word	0x20001108
    3a1c:	00019138 	.word	0x00019138
    3a20:	00008dd1 	.word	0x00008dd1
    3a24:	00007c7d 	.word	0x00007c7d
    3a28:	000082d1 	.word	0x000082d1
    3a2c:	000085ad 	.word	0x000085ad

00003a30 <LorawanReg_EU868_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_EU868_Pds_Cb(void)
{
	
}
    3a30:	4770      	bx	lr
	...

00003a34 <LORAReg_InitEU>:
{
    3a34:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a36:	b08b      	sub	sp, #44	; 0x2c
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_EU;
    3a38:	4ba2      	ldr	r3, [pc, #648]	; (3cc4 <LORAReg_InitEU+0x290>)
    3a3a:	2103      	movs	r1, #3
    3a3c:	2226      	movs	r2, #38	; 0x26
    3a3e:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_T2;
    3a40:	2510      	movs	r5, #16
    3a42:	3204      	adds	r2, #4
    3a44:	549d      	strb	r5, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_EU;
    3a46:	2406      	movs	r4, #6
    3a48:	3a01      	subs	r2, #1
    3a4a:	549c      	strb	r4, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    3a4c:	3c05      	subs	r4, #5
    3a4e:	3a02      	subs	r2, #2
    3a50:	549c      	strb	r4, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    3a52:	001a      	movs	r2, r3
    3a54:	3283      	adds	r2, #131	; 0x83
    3a56:	2400      	movs	r4, #0
    3a58:	711a      	strb	r2, [r3, #4]
    3a5a:	0a16      	lsrs	r6, r2, #8
    3a5c:	715e      	strb	r6, [r3, #5]
    3a5e:	0c16      	lsrs	r6, r2, #16
    3a60:	719e      	strb	r6, [r3, #6]
    3a62:	0e12      	lsrs	r2, r2, #24
    3a64:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    3a66:	001a      	movs	r2, r3
    3a68:	3243      	adds	r2, #67	; 0x43
    3a6a:	701a      	strb	r2, [r3, #0]
    3a6c:	0a16      	lsrs	r6, r2, #8
    3a6e:	705e      	strb	r6, [r3, #1]
    3a70:	0c16      	lsrs	r6, r2, #16
    3a72:	709e      	strb	r6, [r3, #2]
    3a74:	0e12      	lsrs	r2, r2, #24
    3a76:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    3a78:	001a      	movs	r2, r3
    3a7a:	32c4      	adds	r2, #196	; 0xc4
    3a7c:	32ff      	adds	r2, #255	; 0xff
    3a7e:	731a      	strb	r2, [r3, #12]
    3a80:	0a16      	lsrs	r6, r2, #8
    3a82:	735e      	strb	r6, [r3, #13]
    3a84:	0c16      	lsrs	r6, r2, #16
    3a86:	739e      	strb	r6, [r3, #14]
    3a88:	0e12      	lsrs	r2, r2, #24
    3a8a:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    3a8c:	001a      	movs	r2, r3
    3a8e:	32a3      	adds	r2, #163	; 0xa3
    3a90:	721a      	strb	r2, [r3, #8]
    3a92:	0a16      	lsrs	r6, r2, #8
    3a94:	725e      	strb	r6, [r3, #9]
    3a96:	0c16      	lsrs	r6, r2, #16
    3a98:	729e      	strb	r6, [r3, #10]
    3a9a:	0e12      	lsrs	r2, r2, #24
    3a9c:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    3a9e:	001a      	movs	r2, r3
    3aa0:	3264      	adds	r2, #100	; 0x64
    3aa2:	32ff      	adds	r2, #255	; 0xff
    3aa4:	741a      	strb	r2, [r3, #16]
    3aa6:	0a16      	lsrs	r6, r2, #8
    3aa8:	745e      	strb	r6, [r3, #17]
    3aaa:	0c16      	lsrs	r6, r2, #16
    3aac:	749e      	strb	r6, [r3, #18]
    3aae:	0e12      	lsrs	r2, r2, #24
    3ab0:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    3ab2:	001a      	movs	r2, r3
    3ab4:	3234      	adds	r2, #52	; 0x34
    3ab6:	751a      	strb	r2, [r3, #20]
    3ab8:	0a16      	lsrs	r6, r2, #8
    3aba:	755e      	strb	r6, [r3, #21]
    3abc:	0c16      	lsrs	r6, r2, #16
    3abe:	759e      	strb	r6, [r3, #22]
    3ac0:	0e12      	lsrs	r2, r2, #24
    3ac2:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    3ac4:	001a      	movs	r2, r3
    3ac6:	323d      	adds	r2, #61	; 0x3d
    3ac8:	761a      	strb	r2, [r3, #24]
    3aca:	0a16      	lsrs	r6, r2, #8
    3acc:	765e      	strb	r6, [r3, #25]
    3ace:	0c16      	lsrs	r6, r2, #16
    3ad0:	769e      	strb	r6, [r3, #26]
    3ad2:	0e12      	lsrs	r2, r2, #24
    3ad4:	76da      	strb	r2, [r3, #27]
	RegParams.MinNewChIndex = 3;
    3ad6:	2221      	movs	r2, #33	; 0x21
    3ad8:	5499      	strb	r1, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_EU;
    3ada:	2622      	movs	r6, #34	; 0x22
    3adc:	3a01      	subs	r2, #1
    3ade:	549e      	strb	r6, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_EU;
    3ae0:	3a19      	subs	r2, #25
    3ae2:	3602      	adds	r6, #2
    3ae4:	559a      	strb	r2, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_EU;
    3ae6:	3601      	adds	r6, #1
    3ae8:	559c      	strb	r4, [r3, r6]
	RegParams.Rx1DrOffset = 5;
    3aea:	2705      	movs	r7, #5
    3aec:	3607      	adds	r6, #7
    3aee:	559f      	strb	r7, [r3, r6]
	RegParams.maxTxPwrIndx = 7;
    3af0:	3601      	adds	r6, #1
    3af2:	559a      	strb	r2, [r3, r6]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    3af4:	32ba      	adds	r2, #186	; 0xba
    3af6:	32ff      	adds	r2, #255	; 0xff
    3af8:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_EU;
    3afa:	3a99      	subs	r2, #153	; 0x99
    3afc:	3aff      	subs	r2, #255	; 0xff
    3afe:	549d      	strb	r5, [r3, r2]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    3b00:	4a71      	ldr	r2, [pc, #452]	; (3cc8 <LORAReg_InitEU+0x294>)
    3b02:	7815      	ldrb	r5, [r2, #0]
    3b04:	2168      	movs	r1, #104	; 0x68
    3b06:	31ff      	adds	r1, #255	; 0xff
    3b08:	545d      	strb	r5, [r3, r1]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    3b0a:	7855      	ldrb	r5, [r2, #1]
    3b0c:	392b      	subs	r1, #43	; 0x2b
    3b0e:	39ff      	subs	r1, #255	; 0xff
    3b10:	545d      	strb	r5, [r3, r1]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    3b12:	7891      	ldrb	r1, [r2, #2]
    3b14:	223c      	movs	r2, #60	; 0x3c
    3b16:	5499      	strb	r1, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    3b18:	2100      	movs	r1, #0
    3b1a:	3a04      	subs	r2, #4
    3b1c:	5499      	strb	r1, [r3, r2]
    3b1e:	3201      	adds	r2, #1
    3b20:	5499      	strb	r1, [r3, r2]
    3b22:	3201      	adds	r2, #1
    3b24:	5499      	strb	r1, [r3, r2]
    3b26:	3201      	adds	r2, #1
    3b28:	5499      	strb	r1, [r3, r2]
	RegParams.joinbccount =0;
    3b2a:	3207      	adds	r2, #7
    3b2c:	549c      	strb	r4, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    3b2e:	001a      	movs	r2, r3
    3b30:	323e      	adds	r2, #62	; 0x3e
    3b32:	7011      	strb	r1, [r2, #0]
    3b34:	7051      	strb	r1, [r2, #1]
    3b36:	7091      	strb	r1, [r2, #2]
    3b38:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    3b3a:	222e      	movs	r2, #46	; 0x2e
    3b3c:	5498      	strb	r0, [r3, r2]
	if(ismBand == ISM_EU868)
    3b3e:	2800      	cmp	r0, #0
    3b40:	d006      	beq.n	3b50 <LORAReg_InitEU+0x11c>
		return UNSUPPORTED_BAND;
    3b42:	23c6      	movs	r3, #198	; 0xc6
	else if(ismBand == ISM_EU433)
    3b44:	2801      	cmp	r0, #1
    3b46:	d100      	bne.n	3b4a <LORAReg_InitEU+0x116>
    3b48:	e084      	b.n	3c54 <LORAReg_InitEU+0x220>
}
    3b4a:	0018      	movs	r0, r3
    3b4c:	b00b      	add	sp, #44	; 0x2c
    3b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels868, sizeof(DefaultChannels868) );
    3b50:	001c      	movs	r4, r3
    3b52:	0018      	movs	r0, r3
    3b54:	3083      	adds	r0, #131	; 0x83
    3b56:	3a28      	subs	r2, #40	; 0x28
    3b58:	495c      	ldr	r1, [pc, #368]	; (3ccc <LORAReg_InitEU+0x298>)
    3b5a:	4d5d      	ldr	r5, [pc, #372]	; (3cd0 <LORAReg_InitEU+0x29c>)
    3b5c:	47a8      	blx	r5
    memcpy (RegParams.pOtherChParams, AdvChannels868, sizeof(AdvChannels868) );	
    3b5e:	0020      	movs	r0, r4
    3b60:	30a3      	adds	r0, #163	; 0xa3
    3b62:	2224      	movs	r2, #36	; 0x24
    3b64:	495b      	ldr	r1, [pc, #364]	; (3cd4 <LORAReg_InitEU+0x2a0>)
    3b66:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams868, sizeof(SubBandParams868) );
    3b68:	0020      	movs	r0, r4
    3b6a:	30c4      	adds	r0, #196	; 0xc4
    3b6c:	30ff      	adds	r0, #255	; 0xff
    3b6e:	2248      	movs	r2, #72	; 0x48
    3b70:	4959      	ldr	r1, [pc, #356]	; (3cd8 <LORAReg_InitEU+0x2a4>)
    3b72:	47a8      	blx	r5
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle868,sizeof(SubBandDutyCycle868));
    3b74:	0020      	movs	r0, r4
    3b76:	30ae      	adds	r0, #174	; 0xae
    3b78:	30ff      	adds	r0, #255	; 0xff
    3b7a:	220c      	movs	r2, #12
    3b7c:	4957      	ldr	r1, [pc, #348]	; (3cdc <LORAReg_InitEU+0x2a8>)
    3b7e:	47a8      	blx	r5
    3b80:	2303      	movs	r3, #3
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    3b82:	4850      	ldr	r0, [pc, #320]	; (3cc4 <LORAReg_InitEU+0x290>)
    3b84:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    3b86:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    3b88:	7902      	ldrb	r2, [r0, #4]
    3b8a:	7941      	ldrb	r1, [r0, #5]
    3b8c:	0209      	lsls	r1, r1, #8
    3b8e:	4311      	orrs	r1, r2
    3b90:	7982      	ldrb	r2, [r0, #6]
    3b92:	0412      	lsls	r2, r2, #16
    3b94:	4311      	orrs	r1, r2
    3b96:	79c2      	ldrb	r2, [r0, #7]
    3b98:	0612      	lsls	r2, r2, #24
    3b9a:	430a      	orrs	r2, r1
    3b9c:	0059      	lsls	r1, r3, #1
    3b9e:	188a      	adds	r2, r1, r2
    3ba0:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    3ba2:	3301      	adds	r3, #1
    3ba4:	b2db      	uxtb	r3, r3
    3ba6:	5702      	ldrsb	r2, [r0, r4]
    3ba8:	4293      	cmp	r3, r2
    3baa:	dbed      	blt.n	3b88 <LORAReg_InitEU+0x154>
		RegParams.DefRx1DataRate = MAC_868_RX1_WINDOW_DATARATE;
    3bac:	4b45      	ldr	r3, [pc, #276]	; (3cc4 <LORAReg_InitEU+0x290>)
    3bae:	2200      	movs	r2, #0
    3bb0:	2122      	movs	r1, #34	; 0x22
    3bb2:	545a      	strb	r2, [r3, r1]
		RegParams.DefRx2DataRate = MAC_868_RX2_WINDOW_DATARATE;
    3bb4:	3101      	adds	r1, #1
    3bb6:	545a      	strb	r2, [r3, r1]
		RegParams.DefRx2Freq = MAC_868_RX2_WINDOW_FREQ;
    3bb8:	3208      	adds	r2, #8
    3bba:	771a      	strb	r2, [r3, #28]
    3bbc:	3a22      	subs	r2, #34	; 0x22
    3bbe:	775a      	strb	r2, [r3, #29]
    3bc0:	3a13      	subs	r2, #19
    3bc2:	779a      	strb	r2, [r3, #30]
    3bc4:	3260      	adds	r2, #96	; 0x60
    3bc6:	77da      	strb	r2, [r3, #31]
		RegParams.regParamItems.fileid = PDS_FILE_REG_EU868_04_IDX;
    3bc8:	3920      	subs	r1, #32
    3bca:	4a45      	ldr	r2, [pc, #276]	; (3ce0 <LORAReg_InitEU+0x2ac>)
    3bcc:	5499      	strb	r1, [r3, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_EU868_CH_PARAM_1;
    3bce:	2100      	movs	r1, #0
    3bd0:	4a44      	ldr	r2, [pc, #272]	; (3ce4 <LORAReg_InitEU+0x2b0>)
    3bd2:	5499      	strb	r1, [r3, r2]
    3bd4:	189a      	adds	r2, r3, r2
    3bd6:	2103      	movs	r1, #3
    3bd8:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_EU868_CH_PARAM_2;
    3bda:	2100      	movs	r1, #0
    3bdc:	2284      	movs	r2, #132	; 0x84
    3bde:	0092      	lsls	r2, r2, #2
    3be0:	5499      	strb	r1, [r3, r2]
    3be2:	189a      	adds	r2, r3, r2
    3be4:	310b      	adds	r1, #11
    3be6:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    3be8:	2100      	movs	r1, #0
    3bea:	4a3f      	ldr	r2, [pc, #252]	; (3ce8 <LORAReg_InitEU+0x2b4>)
    3bec:	5499      	strb	r1, [r3, r2]
    3bee:	189a      	adds	r2, r3, r2
    3bf0:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    3bf2:	2283      	movs	r2, #131	; 0x83
    3bf4:	0092      	lsls	r2, r2, #2
    3bf6:	5499      	strb	r1, [r3, r2]
    3bf8:	4694      	mov	ip, r2
    3bfa:	4463      	add	r3, ip
    3bfc:	2200      	movs	r2, #0
    3bfe:	705a      	strb	r2, [r3, #1]
		filemarks_fid1.fileMarkListAddr = aRegEu868Fid1PdsOps;
    3c00:	ab02      	add	r3, sp, #8
		filemarks_fid1.numItems =  (uint8_t)(PDS_REG_EU868_FID1_MAX_VALUE & 0x00FF);
    3c02:	2601      	movs	r6, #1
    3c04:	711e      	strb	r6, [r3, #4]
		filemarks_fid1.fIDcb = LorawanReg_EU868_Pds_Cb;
    3c06:	4d39      	ldr	r5, [pc, #228]	; (3cec <LORAReg_InitEU+0x2b8>)
		PDS_RegFile(PDS_FILE_REG_EU868_04_IDX,filemarks_fid1);
    3c08:	9500      	str	r5, [sp, #0]
    3c0a:	4939      	ldr	r1, [pc, #228]	; (3cf0 <LORAReg_InitEU+0x2bc>)
    3c0c:	9a03      	ldr	r2, [sp, #12]
    3c0e:	4b39      	ldr	r3, [pc, #228]	; (3cf4 <LORAReg_InitEU+0x2c0>)
    3c10:	2003      	movs	r0, #3
    3c12:	4c39      	ldr	r4, [pc, #228]	; (3cf8 <LORAReg_InitEU+0x2c4>)
    3c14:	47a0      	blx	r4
		filemarks_fid2.fileMarkListAddr = aRegEu868Fid2PdsOps;
    3c16:	ab06      	add	r3, sp, #24
		filemarks_fid2.numItems =  (uint8_t)(PDS_REG_EU868_FID2_MAX_VALUE & 0x00FF);
    3c18:	711e      	strb	r6, [r3, #4]
		PDS_RegFile(PDS_FILE_REG_EU868_12_IDX,filemarks_fid2);
    3c1a:	9500      	str	r5, [sp, #0]
    3c1c:	4937      	ldr	r1, [pc, #220]	; (3cfc <LORAReg_InitEU+0x2c8>)
    3c1e:	9a07      	ldr	r2, [sp, #28]
    3c20:	4b37      	ldr	r3, [pc, #220]	; (3d00 <LORAReg_InitEU+0x2cc>)
    3c22:	200b      	movs	r0, #11
    3c24:	47a0      	blx	r4
	memcpy (RegParams.pDrParams, DefaultDrparamsEU, sizeof(DefaultDrparamsEU) );
    3c26:	4a27      	ldr	r2, [pc, #156]	; (3cc4 <LORAReg_InitEU+0x290>)
    3c28:	7810      	ldrb	r0, [r2, #0]
    3c2a:	7853      	ldrb	r3, [r2, #1]
    3c2c:	021b      	lsls	r3, r3, #8
    3c2e:	4303      	orrs	r3, r0
    3c30:	7890      	ldrb	r0, [r2, #2]
    3c32:	0400      	lsls	r0, r0, #16
    3c34:	4303      	orrs	r3, r0
    3c36:	78d0      	ldrb	r0, [r2, #3]
    3c38:	0600      	lsls	r0, r0, #24
    3c3a:	4318      	orrs	r0, r3
    3c3c:	2240      	movs	r2, #64	; 0x40
    3c3e:	4931      	ldr	r1, [pc, #196]	; (3d04 <LORAReg_InitEU+0x2d0>)
    3c40:	4b23      	ldr	r3, [pc, #140]	; (3cd0 <LORAReg_InitEU+0x29c>)
    3c42:	4798      	blx	r3
    LORAREG_InitGetAttrFnPtrsEU();
    3c44:	4b30      	ldr	r3, [pc, #192]	; (3d08 <LORAReg_InitEU+0x2d4>)
    3c46:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsEU();
    3c48:	4b30      	ldr	r3, [pc, #192]	; (3d0c <LORAReg_InitEU+0x2d8>)
    3c4a:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsEU();
    3c4c:	4b30      	ldr	r3, [pc, #192]	; (3d10 <LORAReg_InitEU+0x2dc>)
    3c4e:	4798      	blx	r3
	return status;
    3c50:	2308      	movs	r3, #8
    3c52:	e77a      	b.n	3b4a <LORAReg_InitEU+0x116>
    memcpy (RegParams.pChParams, DefaultChannels433, sizeof(DefaultChannels433) );
    3c54:	4c1b      	ldr	r4, [pc, #108]	; (3cc4 <LORAReg_InitEU+0x290>)
    3c56:	0020      	movs	r0, r4
    3c58:	3083      	adds	r0, #131	; 0x83
    3c5a:	2206      	movs	r2, #6
    3c5c:	492d      	ldr	r1, [pc, #180]	; (3d14 <LORAReg_InitEU+0x2e0>)
    3c5e:	4d1c      	ldr	r5, [pc, #112]	; (3cd0 <LORAReg_InitEU+0x29c>)
    3c60:	47a8      	blx	r5
    memcpy (RegParams.pOtherChParams, AdvChannels433, sizeof(AdvChannels433) );
    3c62:	0020      	movs	r0, r4
    3c64:	30a3      	adds	r0, #163	; 0xa3
    3c66:	2224      	movs	r2, #36	; 0x24
    3c68:	492b      	ldr	r1, [pc, #172]	; (3d18 <LORAReg_InitEU+0x2e4>)
    3c6a:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams433, sizeof(SubBandParams433) );	
    3c6c:	0020      	movs	r0, r4
    3c6e:	30c4      	adds	r0, #196	; 0xc4
    3c70:	30ff      	adds	r0, #255	; 0xff
    3c72:	220c      	movs	r2, #12
    3c74:	4929      	ldr	r1, [pc, #164]	; (3d1c <LORAReg_InitEU+0x2e8>)
    3c76:	47a8      	blx	r5
    3c78:	2303      	movs	r3, #3
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    3c7a:	4812      	ldr	r0, [pc, #72]	; (3cc4 <LORAReg_InitEU+0x290>)
    3c7c:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    3c7e:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    3c80:	7902      	ldrb	r2, [r0, #4]
    3c82:	7941      	ldrb	r1, [r0, #5]
    3c84:	0209      	lsls	r1, r1, #8
    3c86:	4311      	orrs	r1, r2
    3c88:	7982      	ldrb	r2, [r0, #6]
    3c8a:	0412      	lsls	r2, r2, #16
    3c8c:	4311      	orrs	r1, r2
    3c8e:	79c2      	ldrb	r2, [r0, #7]
    3c90:	0612      	lsls	r2, r2, #24
    3c92:	430a      	orrs	r2, r1
    3c94:	0059      	lsls	r1, r3, #1
    3c96:	188a      	adds	r2, r1, r2
    3c98:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    3c9a:	3301      	adds	r3, #1
    3c9c:	b2db      	uxtb	r3, r3
    3c9e:	5702      	ldrsb	r2, [r0, r4]
    3ca0:	4293      	cmp	r3, r2
    3ca2:	dbed      	blt.n	3c80 <LORAReg_InitEU+0x24c>
		RegParams.DefRx1DataRate = MAC_433_RX1_WINDOW_DATARATE;
    3ca4:	4b07      	ldr	r3, [pc, #28]	; (3cc4 <LORAReg_InitEU+0x290>)
    3ca6:	2105      	movs	r1, #5
    3ca8:	2222      	movs	r2, #34	; 0x22
    3caa:	5499      	strb	r1, [r3, r2]
		RegParams.DefRx2DataRate = MAC_433_RX2_WINDOW_DATARATE;
    3cac:	2100      	movs	r1, #0
    3cae:	3201      	adds	r2, #1
    3cb0:	5499      	strb	r1, [r3, r2]
		RegParams.DefRx2Freq = MAC_433_RX2_WINDOW_FREQ;
    3cb2:	3a93      	subs	r2, #147	; 0x93
    3cb4:	771a      	strb	r2, [r3, #28]
    3cb6:	3241      	adds	r2, #65	; 0x41
    3cb8:	775a      	strb	r2, [r3, #29]
    3cba:	3a02      	subs	r2, #2
    3cbc:	779a      	strb	r2, [r3, #30]
    3cbe:	324a      	adds	r2, #74	; 0x4a
    3cc0:	77da      	strb	r2, [r3, #31]
    3cc2:	e7b0      	b.n	3c26 <LORAReg_InitEU+0x1f2>
    3cc4:	20001328 	.word	0x20001328
    3cc8:	20001324 	.word	0x20001324
    3ccc:	00019198 	.word	0x00019198
    3cd0:	00013e5d 	.word	0x00013e5d
    3cd4:	0001916c 	.word	0x0001916c
    3cd8:	000191f8 	.word	0x000191f8
    3cdc:	000191e0 	.word	0x000191e0
    3ce0:	0000020b 	.word	0x0000020b
    3ce4:	0000020e 	.word	0x0000020e
    3ce8:	00000212 	.word	0x00000212
    3cec:	00003a31 	.word	0x00003a31
    3cf0:	2000110c 	.word	0x2000110c
    3cf4:	00019240 	.word	0x00019240
    3cf8:	00008dd1 	.word	0x00008dd1
    3cfc:	20001110 	.word	0x20001110
    3d00:	00019248 	.word	0x00019248
    3d04:	000191a0 	.word	0x000191a0
    3d08:	000079ed 	.word	0x000079ed
    3d0c:	000081fd 	.word	0x000081fd
    3d10:	000084cd 	.word	0x000084cd
    3d14:	00019190 	.word	0x00019190
    3d18:	00019148 	.word	0x00019148
    3d1c:	000191ec 	.word	0x000191ec

00003d20 <LorawanReg_IND_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_IND_Pds_Cb(void)
{
	
}
    3d20:	4770      	bx	lr
	...

00003d24 <LORAReg_InitIN>:
{
    3d24:	b530      	push	{r4, r5, lr}
    3d26:	b087      	sub	sp, #28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_IN;
    3d28:	4b72      	ldr	r3, [pc, #456]	; (3ef4 <LORAReg_InitIN+0x1d0>)
    3d2a:	2403      	movs	r4, #3
    3d2c:	2226      	movs	r2, #38	; 0x26
    3d2e:	549c      	strb	r4, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_IN;
    3d30:	2110      	movs	r1, #16
    3d32:	3204      	adds	r2, #4
    3d34:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_IN;
    3d36:	3a29      	subs	r2, #41	; 0x29
    3d38:	3119      	adds	r1, #25
    3d3a:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_IN;
    3d3c:	3902      	subs	r1, #2
    3d3e:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    3d40:	001a      	movs	r2, r3
    3d42:	3283      	adds	r2, #131	; 0x83
    3d44:	2100      	movs	r1, #0
    3d46:	711a      	strb	r2, [r3, #4]
    3d48:	0a15      	lsrs	r5, r2, #8
    3d4a:	715d      	strb	r5, [r3, #5]
    3d4c:	0c15      	lsrs	r5, r2, #16
    3d4e:	719d      	strb	r5, [r3, #6]
    3d50:	0e12      	lsrs	r2, r2, #24
    3d52:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    3d54:	001a      	movs	r2, r3
    3d56:	3243      	adds	r2, #67	; 0x43
    3d58:	701a      	strb	r2, [r3, #0]
    3d5a:	0a15      	lsrs	r5, r2, #8
    3d5c:	705d      	strb	r5, [r3, #1]
    3d5e:	0c15      	lsrs	r5, r2, #16
    3d60:	709d      	strb	r5, [r3, #2]
    3d62:	0e12      	lsrs	r2, r2, #24
    3d64:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    3d66:	001a      	movs	r2, r3
    3d68:	32a3      	adds	r2, #163	; 0xa3
    3d6a:	721a      	strb	r2, [r3, #8]
    3d6c:	0a15      	lsrs	r5, r2, #8
    3d6e:	725d      	strb	r5, [r3, #9]
    3d70:	0c15      	lsrs	r5, r2, #16
    3d72:	729d      	strb	r5, [r3, #10]
    3d74:	0e12      	lsrs	r2, r2, #24
    3d76:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    3d78:	001a      	movs	r2, r3
    3d7a:	3264      	adds	r2, #100	; 0x64
    3d7c:	32ff      	adds	r2, #255	; 0xff
    3d7e:	741a      	strb	r2, [r3, #16]
    3d80:	0a15      	lsrs	r5, r2, #8
    3d82:	745d      	strb	r5, [r3, #17]
    3d84:	0c15      	lsrs	r5, r2, #16
    3d86:	749d      	strb	r5, [r3, #18]
    3d88:	0e12      	lsrs	r2, r2, #24
    3d8a:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    3d8c:	001a      	movs	r2, r3
    3d8e:	3234      	adds	r2, #52	; 0x34
    3d90:	751a      	strb	r2, [r3, #20]
    3d92:	0a15      	lsrs	r5, r2, #8
    3d94:	755d      	strb	r5, [r3, #21]
    3d96:	0c15      	lsrs	r5, r2, #16
    3d98:	759d      	strb	r5, [r3, #22]
    3d9a:	0e12      	lsrs	r2, r2, #24
    3d9c:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    3d9e:	001a      	movs	r2, r3
    3da0:	323d      	adds	r2, #61	; 0x3d
    3da2:	761a      	strb	r2, [r3, #24]
    3da4:	0a15      	lsrs	r5, r2, #8
    3da6:	765d      	strb	r5, [r3, #25]
    3da8:	0c15      	lsrs	r5, r2, #16
    3daa:	769d      	strb	r5, [r3, #26]
    3dac:	0e12      	lsrs	r2, r2, #24
    3dae:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_IN;
    3db0:	2222      	movs	r2, #34	; 0x22
    3db2:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_IN;
    3db4:	2502      	movs	r5, #2
    3db6:	3201      	adds	r2, #1
    3db8:	549d      	strb	r5, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_IN;	
    3dba:	3a33      	subs	r2, #51	; 0x33
    3dbc:	771a      	strb	r2, [r3, #28]
    3dbe:	3a70      	subs	r2, #112	; 0x70
    3dc0:	775a      	strb	r2, [r3, #29]
    3dc2:	3226      	adds	r2, #38	; 0x26
    3dc4:	779a      	strb	r2, [r3, #30]
    3dc6:	328d      	adds	r2, #141	; 0x8d
    3dc8:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_IN;
    3dca:	3a12      	subs	r2, #18
    3dcc:	549c      	strb	r4, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_IN;
    3dce:	352e      	adds	r5, #46	; 0x2e
    3dd0:	3a01      	subs	r2, #1
    3dd2:	549d      	strb	r5, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_IN;
    3dd4:	3a19      	subs	r2, #25
    3dd6:	3d0c      	subs	r5, #12
    3dd8:	555a      	strb	r2, [r3, r5]
	RegParams.maxDataRate = MAC_DATARATE_MAX_IN;
    3dda:	3501      	adds	r5, #1
    3ddc:	5559      	strb	r1, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    3dde:	359c      	adds	r5, #156	; 0x9c
    3de0:	35ff      	adds	r5, #255	; 0xff
    3de2:	555c      	strb	r4, [r3, r5]
	RegParams.Rx1DrOffset = 7;
    3de4:	3429      	adds	r4, #41	; 0x29
    3de6:	551a      	strb	r2, [r3, r4]
	RegParams.maxTxPwrIndx = 10;
    3de8:	3c22      	subs	r4, #34	; 0x22
    3dea:	3226      	adds	r2, #38	; 0x26
    3dec:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_IN;
    3dee:	3414      	adds	r4, #20
    3df0:	3a05      	subs	r2, #5
    3df2:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[0];
    3df4:	4a40      	ldr	r2, [pc, #256]	; (3ef8 <LORAReg_InitIN+0x1d4>)
    3df6:	7815      	ldrb	r5, [r2, #0]
    3df8:	341e      	adds	r4, #30
    3dfa:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    3dfc:	2500      	movs	r5, #0
    3dfe:	3c04      	subs	r4, #4
    3e00:	551d      	strb	r5, [r3, r4]
    3e02:	3401      	adds	r4, #1
    3e04:	551d      	strb	r5, [r3, r4]
    3e06:	3401      	adds	r4, #1
    3e08:	551d      	strb	r5, [r3, r4]
    3e0a:	3401      	adds	r4, #1
    3e0c:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    3e0e:	7854      	ldrb	r4, [r2, #1]
    3e10:	223d      	movs	r2, #61	; 0x3d
    3e12:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    3e14:	3205      	adds	r2, #5
    3e16:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    3e18:	001a      	movs	r2, r3
    3e1a:	323e      	adds	r2, #62	; 0x3e
    3e1c:	7011      	strb	r1, [r2, #0]
    3e1e:	7051      	strb	r1, [r2, #1]
    3e20:	7091      	strb	r1, [r2, #2]
    3e22:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    3e24:	222e      	movs	r2, #46	; 0x2e
    3e26:	5498      	strb	r0, [r3, r2]
		result = LORAWAN_INVALID_PARAMETER;
    3e28:	240a      	movs	r4, #10
	if(ismBand == ISM_IND865)
    3e2a:	280f      	cmp	r0, #15
    3e2c:	d008      	beq.n	3e40 <LORAReg_InitIN+0x11c>
    LORAREG_InitGetAttrFnPtrsIN();
    3e2e:	4b33      	ldr	r3, [pc, #204]	; (3efc <LORAReg_InitIN+0x1d8>)
    3e30:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsIN();
    3e32:	4b33      	ldr	r3, [pc, #204]	; (3f00 <LORAReg_InitIN+0x1dc>)
    3e34:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsIN();
    3e36:	4b33      	ldr	r3, [pc, #204]	; (3f04 <LORAReg_InitIN+0x1e0>)
    3e38:	4798      	blx	r3
}
    3e3a:	0020      	movs	r0, r4
    3e3c:	b007      	add	sp, #28
    3e3e:	bd30      	pop	{r4, r5, pc}
    memcpy (RegParams.pChParams, DefaultChannels865, sizeof(DefaultChannels865) );
    3e40:	001c      	movs	r4, r3
    3e42:	0018      	movs	r0, r3
    3e44:	3083      	adds	r0, #131	; 0x83
    3e46:	3a28      	subs	r2, #40	; 0x28
    3e48:	492f      	ldr	r1, [pc, #188]	; (3f08 <LORAReg_InitIN+0x1e4>)
    3e4a:	4d30      	ldr	r5, [pc, #192]	; (3f0c <LORAReg_InitIN+0x1e8>)
    3e4c:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels865, sizeof(AdvChannels865) );
    3e4e:	0020      	movs	r0, r4
    3e50:	30a3      	adds	r0, #163	; 0xa3
    3e52:	2224      	movs	r2, #36	; 0x24
    3e54:	492e      	ldr	r1, [pc, #184]	; (3f10 <LORAReg_InitIN+0x1ec>)
    3e56:	47a8      	blx	r5
    3e58:	2006      	movs	r0, #6
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    3e5a:	4926      	ldr	r1, [pc, #152]	; (3ef4 <LORAReg_InitIN+0x1d0>)
    3e5c:	24ff      	movs	r4, #255	; 0xff
    3e5e:	790b      	ldrb	r3, [r1, #4]
    3e60:	794a      	ldrb	r2, [r1, #5]
    3e62:	0212      	lsls	r2, r2, #8
    3e64:	431a      	orrs	r2, r3
    3e66:	798b      	ldrb	r3, [r1, #6]
    3e68:	041b      	lsls	r3, r3, #16
    3e6a:	431a      	orrs	r2, r3
    3e6c:	79cb      	ldrb	r3, [r1, #7]
    3e6e:	061b      	lsls	r3, r3, #24
    3e70:	4313      	orrs	r3, r2
    3e72:	181b      	adds	r3, r3, r0
    3e74:	705c      	strb	r4, [r3, #1]
    3e76:	3002      	adds	r0, #2
    for (i = MIN_CHANNEL_INDEX_IN; i < MAX_CHANNELS_IN; i++)
    3e78:	2820      	cmp	r0, #32
    3e7a:	d1f0      	bne.n	3e5e <LORAReg_InitIN+0x13a>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_IN;
    3e7c:	4c1d      	ldr	r4, [pc, #116]	; (3ef4 <LORAReg_InitIN+0x1d0>)
    3e7e:	221e      	movs	r2, #30
    3e80:	23c2      	movs	r3, #194	; 0xc2
    3e82:	33ff      	adds	r3, #255	; 0xff
    3e84:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsIN, sizeof(DefaultDrParamsIN) );
    3e86:	7820      	ldrb	r0, [r4, #0]
    3e88:	7863      	ldrb	r3, [r4, #1]
    3e8a:	021b      	lsls	r3, r3, #8
    3e8c:	4303      	orrs	r3, r0
    3e8e:	78a0      	ldrb	r0, [r4, #2]
    3e90:	0400      	lsls	r0, r0, #16
    3e92:	4303      	orrs	r3, r0
    3e94:	78e0      	ldrb	r0, [r4, #3]
    3e96:	0600      	lsls	r0, r0, #24
    3e98:	4318      	orrs	r0, r3
    3e9a:	3222      	adds	r2, #34	; 0x22
    3e9c:	491d      	ldr	r1, [pc, #116]	; (3f14 <LORAReg_InitIN+0x1f0>)
    3e9e:	4b1b      	ldr	r3, [pc, #108]	; (3f0c <LORAReg_InitIN+0x1e8>)
    3ea0:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_IND_07_IDX;
    3ea2:	2306      	movs	r3, #6
    3ea4:	2106      	movs	r1, #6
    3ea6:	4a1c      	ldr	r2, [pc, #112]	; (3f18 <LORAReg_InitIN+0x1f4>)
    3ea8:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_IND_CH_PARAM_1;
    3eaa:	2100      	movs	r1, #0
    3eac:	4a1b      	ldr	r2, [pc, #108]	; (3f1c <LORAReg_InitIN+0x1f8>)
    3eae:	54a1      	strb	r1, [r4, r2]
    3eb0:	18a2      	adds	r2, r4, r2
    3eb2:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_IND_CH_PARAM_2;
    3eb4:	3101      	adds	r1, #1
    3eb6:	2284      	movs	r2, #132	; 0x84
    3eb8:	0092      	lsls	r2, r2, #2
    3eba:	54a1      	strb	r1, [r4, r2]
    3ebc:	18a2      	adds	r2, r4, r2
    3ebe:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    3ec0:	2200      	movs	r2, #0
    3ec2:	4b17      	ldr	r3, [pc, #92]	; (3f20 <LORAReg_InitIN+0x1fc>)
    3ec4:	54e2      	strb	r2, [r4, r3]
    3ec6:	18e3      	adds	r3, r4, r3
    3ec8:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    3eca:	2383      	movs	r3, #131	; 0x83
    3ecc:	009b      	lsls	r3, r3, #2
    3ece:	54e2      	strb	r2, [r4, r3]
    3ed0:	469c      	mov	ip, r3
    3ed2:	4464      	add	r4, ip
    3ed4:	2300      	movs	r3, #0
    3ed6:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegIndPdsOps;
    3ed8:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_IND_MAX_VALUE & 0x00FF);
    3eda:	3202      	adds	r2, #2
    3edc:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_IND_Pds_Cb;
    3ede:	4a11      	ldr	r2, [pc, #68]	; (3f24 <LORAReg_InitIN+0x200>)
		PDS_RegFile(PDS_FILE_REG_IND_07_IDX,filemarks);
    3ee0:	9200      	str	r2, [sp, #0]
    3ee2:	4911      	ldr	r1, [pc, #68]	; (3f28 <LORAReg_InitIN+0x204>)
    3ee4:	9a03      	ldr	r2, [sp, #12]
    3ee6:	4b11      	ldr	r3, [pc, #68]	; (3f2c <LORAReg_InitIN+0x208>)
    3ee8:	2006      	movs	r0, #6
    3eea:	4c11      	ldr	r4, [pc, #68]	; (3f30 <LORAReg_InitIN+0x20c>)
    3eec:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    3eee:	2408      	movs	r4, #8
    3ef0:	e79d      	b.n	3e2e <LORAReg_InitIN+0x10a>
    3ef2:	46c0      	nop			; (mov r8, r8)
    3ef4:	20001328 	.word	0x20001328
    3ef8:	20001324 	.word	0x20001324
    3efc:	00007db9 	.word	0x00007db9
    3f00:	0000833d 	.word	0x0000833d
    3f04:	00008601 	.word	0x00008601
    3f08:	00019274 	.word	0x00019274
    3f0c:	00013e5d 	.word	0x00013e5d
    3f10:	00019250 	.word	0x00019250
    3f14:	0001927c 	.word	0x0001927c
    3f18:	0000020b 	.word	0x0000020b
    3f1c:	0000020e 	.word	0x0000020e
    3f20:	00000212 	.word	0x00000212
    3f24:	00003d21 	.word	0x00003d21
    3f28:	20001114 	.word	0x20001114
    3f2c:	000192bc 	.word	0x000192bc
    3f30:	00008dd1 	.word	0x00008dd1

00003f34 <LorawanReg_JPN_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_JPN_Pds_Cb(void)
{

}
    3f34:	4770      	bx	lr
	...

00003f38 <LORAReg_InitJP>:
{
    3f38:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f3a:	46c6      	mov	lr, r8
    3f3c:	b500      	push	{lr}
    3f3e:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_JP;
    3f40:	4b97      	ldr	r3, [pc, #604]	; (41a0 <LORAReg_InitJP+0x268>)
    3f42:	2103      	movs	r1, #3
    3f44:	2226      	movs	r2, #38	; 0x26
    3f46:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_JP;
    3f48:	2510      	movs	r5, #16
    3f4a:	3204      	adds	r2, #4
    3f4c:	549d      	strb	r5, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_JP;
    3f4e:	3901      	subs	r1, #1
    3f50:	3a01      	subs	r2, #1
    3f52:	5499      	strb	r1, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    3f54:	2401      	movs	r4, #1
    3f56:	3a02      	subs	r2, #2
    3f58:	549c      	strb	r4, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    3f5a:	001a      	movs	r2, r3
    3f5c:	3283      	adds	r2, #131	; 0x83
    3f5e:	2400      	movs	r4, #0
    3f60:	46a0      	mov	r8, r4
    3f62:	711a      	strb	r2, [r3, #4]
    3f64:	0a16      	lsrs	r6, r2, #8
    3f66:	715e      	strb	r6, [r3, #5]
    3f68:	0c16      	lsrs	r6, r2, #16
    3f6a:	719e      	strb	r6, [r3, #6]
    3f6c:	0e12      	lsrs	r2, r2, #24
    3f6e:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    3f70:	001a      	movs	r2, r3
    3f72:	3243      	adds	r2, #67	; 0x43
    3f74:	701a      	strb	r2, [r3, #0]
    3f76:	0a16      	lsrs	r6, r2, #8
    3f78:	705e      	strb	r6, [r3, #1]
    3f7a:	0c16      	lsrs	r6, r2, #16
    3f7c:	709e      	strb	r6, [r3, #2]
    3f7e:	0e12      	lsrs	r2, r2, #24
    3f80:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    3f82:	001a      	movs	r2, r3
    3f84:	32c4      	adds	r2, #196	; 0xc4
    3f86:	32ff      	adds	r2, #255	; 0xff
    3f88:	731a      	strb	r2, [r3, #12]
    3f8a:	0a16      	lsrs	r6, r2, #8
    3f8c:	735e      	strb	r6, [r3, #13]
    3f8e:	0c16      	lsrs	r6, r2, #16
    3f90:	739e      	strb	r6, [r3, #14]
    3f92:	0e12      	lsrs	r2, r2, #24
    3f94:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    3f96:	001a      	movs	r2, r3
    3f98:	32a3      	adds	r2, #163	; 0xa3
    3f9a:	721a      	strb	r2, [r3, #8]
    3f9c:	0a16      	lsrs	r6, r2, #8
    3f9e:	725e      	strb	r6, [r3, #9]
    3fa0:	0c16      	lsrs	r6, r2, #16
    3fa2:	729e      	strb	r6, [r3, #10]
    3fa4:	0e12      	lsrs	r2, r2, #24
    3fa6:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    3fa8:	001a      	movs	r2, r3
    3faa:	3264      	adds	r2, #100	; 0x64
    3fac:	32ff      	adds	r2, #255	; 0xff
    3fae:	741a      	strb	r2, [r3, #16]
    3fb0:	0a16      	lsrs	r6, r2, #8
    3fb2:	745e      	strb	r6, [r3, #17]
    3fb4:	0c16      	lsrs	r6, r2, #16
    3fb6:	749e      	strb	r6, [r3, #18]
    3fb8:	0e12      	lsrs	r2, r2, #24
    3fba:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    3fbc:	001a      	movs	r2, r3
    3fbe:	3234      	adds	r2, #52	; 0x34
    3fc0:	751a      	strb	r2, [r3, #20]
    3fc2:	0a16      	lsrs	r6, r2, #8
    3fc4:	755e      	strb	r6, [r3, #21]
    3fc6:	0c16      	lsrs	r6, r2, #16
    3fc8:	759e      	strb	r6, [r3, #22]
    3fca:	0e12      	lsrs	r2, r2, #24
    3fcc:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    3fce:	001a      	movs	r2, r3
    3fd0:	323d      	adds	r2, #61	; 0x3d
    3fd2:	761a      	strb	r2, [r3, #24]
    3fd4:	0a16      	lsrs	r6, r2, #8
    3fd6:	765e      	strb	r6, [r3, #25]
    3fd8:	0c16      	lsrs	r6, r2, #16
    3fda:	769e      	strb	r6, [r3, #26]
    3fdc:	0e12      	lsrs	r2, r2, #24
    3fde:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_JP;
    3fe0:	2222      	movs	r2, #34	; 0x22
    3fe2:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_JP;
    3fe4:	3201      	adds	r2, #1
    3fe6:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_JP;	
    3fe8:	2200      	movs	r2, #0
    3fea:	771a      	strb	r2, [r3, #28]
    3fec:	3a16      	subs	r2, #22
    3fee:	775a      	strb	r2, [r3, #29]
    3ff0:	321c      	adds	r2, #28
    3ff2:	779a      	strb	r2, [r3, #30]
    3ff4:	3231      	adds	r2, #49	; 0x31
    3ff6:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_JP;
    3ff8:	3a16      	subs	r2, #22
    3ffa:	5499      	strb	r1, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_JP;
    3ffc:	2634      	movs	r6, #52	; 0x34
    3ffe:	3a01      	subs	r2, #1
    4000:	549e      	strb	r6, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_JP;
    4002:	3a19      	subs	r2, #25
    4004:	3e10      	subs	r6, #16
    4006:	559a      	strb	r2, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_JP;
    4008:	3601      	adds	r6, #1
    400a:	559c      	strb	r4, [r3, r6]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_JP;
    400c:	3e20      	subs	r6, #32
    400e:	27be      	movs	r7, #190	; 0xbe
    4010:	37ff      	adds	r7, #255	; 0xff
    4012:	55de      	strb	r6, [r3, r7]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_JP;
    4014:	3f0e      	subs	r7, #14
    4016:	3fff      	subs	r7, #255	; 0xff
    4018:	46bc      	mov	ip, r7
    401a:	370f      	adds	r7, #15
    401c:	37ff      	adds	r7, #255	; 0xff
    401e:	4664      	mov	r4, ip
    4020:	55dc      	strb	r4, [r3, r7]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_JP;
    4022:	27c0      	movs	r7, #192	; 0xc0
    4024:	37ff      	adds	r7, #255	; 0xff
    4026:	55de      	strb	r6, [r3, r7]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    4028:	36bc      	adds	r6, #188	; 0xbc
    402a:	36ff      	adds	r6, #255	; 0xff
    402c:	5599      	strb	r1, [r3, r6]
	RegParams.Rx1DrOffset = 7;
    402e:	312a      	adds	r1, #42	; 0x2a
    4030:	545a      	strb	r2, [r3, r1]
	RegParams.maxTxPwrIndx = 7;
    4032:	3101      	adds	r1, #1
    4034:	545a      	strb	r2, [r3, r1]
	RegParams.maxTxPwr = DEFAULT_EIRP_JP;
    4036:	3221      	adds	r2, #33	; 0x21
    4038:	549d      	strb	r5, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    403a:	4a5a      	ldr	r2, [pc, #360]	; (41a4 <LORAReg_InitJP+0x26c>)
    403c:	7815      	ldrb	r5, [r2, #0]
    403e:	3180      	adds	r1, #128	; 0x80
    4040:	31ff      	adds	r1, #255	; 0xff
    4042:	545d      	strb	r5, [r3, r1]
	RegParams.pDutyCycleTimer->timerId = regTimerId[1];
    4044:	7855      	ldrb	r5, [r2, #1]
    4046:	2168      	movs	r1, #104	; 0x68
    4048:	31ff      	adds	r1, #255	; 0xff
    404a:	545d      	strb	r5, [r3, r1]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[2];
    404c:	7895      	ldrb	r5, [r2, #2]
    404e:	392b      	subs	r1, #43	; 0x2b
    4050:	39ff      	subs	r1, #255	; 0xff
    4052:	545d      	strb	r5, [r3, r1]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[3];
    4054:	78d1      	ldrb	r1, [r2, #3]
    4056:	223c      	movs	r2, #60	; 0x3c
    4058:	5499      	strb	r1, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    405a:	2100      	movs	r1, #0
    405c:	3a04      	subs	r2, #4
    405e:	5499      	strb	r1, [r3, r2]
    4060:	3201      	adds	r2, #1
    4062:	5499      	strb	r1, [r3, r2]
    4064:	3201      	adds	r2, #1
    4066:	5499      	strb	r1, [r3, r2]
    4068:	3201      	adds	r2, #1
    406a:	5499      	strb	r1, [r3, r2]
	RegParams.joinbccount =0;
    406c:	3207      	adds	r2, #7
    406e:	4641      	mov	r1, r8
    4070:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    4072:	001a      	movs	r2, r3
    4074:	323e      	adds	r2, #62	; 0x3e
    4076:	2100      	movs	r1, #0
    4078:	7011      	strb	r1, [r2, #0]
    407a:	7051      	strb	r1, [r2, #1]
    407c:	7091      	strb	r1, [r2, #2]
    407e:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = 1;
    4080:	31c3      	adds	r1, #195	; 0xc3
    4082:	31ff      	adds	r1, #255	; 0xff
    4084:	5c5a      	ldrb	r2, [r3, r1]
    4086:	2401      	movs	r4, #1
    4088:	4322      	orrs	r2, r4
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = 1;
    408a:	2402      	movs	r4, #2
    408c:	4322      	orrs	r2, r4
    408e:	545a      	strb	r2, [r3, r1]
	RegParams.band = ismBand;
    4090:	222e      	movs	r2, #46	; 0x2e
    4092:	5498      	strb	r0, [r3, r2]
		result = LORAWAN_INVALID_PARAMETER;
    4094:	240a      	movs	r4, #10
	if(ismBand == ISM_JPN923)
    4096:	2805      	cmp	r0, #5
    4098:	d00a      	beq.n	40b0 <LORAReg_InitJP+0x178>
    LORAREG_InitGetAttrFnPtrsJP();
    409a:	4b43      	ldr	r3, [pc, #268]	; (41a8 <LORAReg_InitJP+0x270>)
    409c:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsJP();
    409e:	4b43      	ldr	r3, [pc, #268]	; (41ac <LORAReg_InitJP+0x274>)
    40a0:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsJP();
    40a2:	4b43      	ldr	r3, [pc, #268]	; (41b0 <LORAReg_InitJP+0x278>)
    40a4:	4798      	blx	r3
}
    40a6:	0020      	movs	r0, r4
    40a8:	b006      	add	sp, #24
    40aa:	bc04      	pop	{r2}
    40ac:	4690      	mov	r8, r2
    40ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels923JP, sizeof(DefaultChannels923JP) );
    40b0:	001c      	movs	r4, r3
    40b2:	0018      	movs	r0, r3
    40b4:	3083      	adds	r0, #131	; 0x83
    40b6:	3a2a      	subs	r2, #42	; 0x2a
    40b8:	493e      	ldr	r1, [pc, #248]	; (41b4 <LORAReg_InitJP+0x27c>)
    40ba:	4d3f      	ldr	r5, [pc, #252]	; (41b8 <LORAReg_InitJP+0x280>)
    40bc:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923JP, sizeof(AdvChannels923JP) );
    40be:	0020      	movs	r0, r4
    40c0:	30a3      	adds	r0, #163	; 0xa3
    40c2:	2218      	movs	r2, #24
    40c4:	493d      	ldr	r1, [pc, #244]	; (41bc <LORAReg_InitJP+0x284>)
    40c6:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParamsJP923, sizeof(SubBandParamsJP923) );
    40c8:	0020      	movs	r0, r4
    40ca:	30c4      	adds	r0, #196	; 0xc4
    40cc:	30ff      	adds	r0, #255	; 0xff
    40ce:	2218      	movs	r2, #24
    40d0:	493b      	ldr	r1, [pc, #236]	; (41c0 <LORAReg_InitJP+0x288>)
    40d2:	47a8      	blx	r5
	memcpy (RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycleJP923,sizeof(SubBandDutyCycleJP923));
    40d4:	0020      	movs	r0, r4
    40d6:	30ae      	adds	r0, #174	; 0xae
    40d8:	30ff      	adds	r0, #255	; 0xff
    40da:	2204      	movs	r2, #4
    40dc:	4939      	ldr	r1, [pc, #228]	; (41c4 <LORAReg_InitJP+0x28c>)
    40de:	47a8      	blx	r5
    40e0:	2302      	movs	r3, #2
    40e2:	2202      	movs	r2, #2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    40e4:	492e      	ldr	r1, [pc, #184]	; (41a0 <LORAReg_InitJP+0x268>)
    40e6:	3fc0      	subs	r7, #192	; 0xc0
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    40e8:	2500      	movs	r5, #0
    for (i = 2; i < RegParams.maxChannels; i++)
    40ea:	3e97      	subs	r6, #151	; 0x97
    40ec:	3eff      	subs	r6, #255	; 0xff
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    40ee:	7908      	ldrb	r0, [r1, #4]
    40f0:	794c      	ldrb	r4, [r1, #5]
    40f2:	0224      	lsls	r4, r4, #8
    40f4:	4304      	orrs	r4, r0
    40f6:	7988      	ldrb	r0, [r1, #6]
    40f8:	0400      	lsls	r0, r0, #16
    40fa:	4304      	orrs	r4, r0
    40fc:	79c8      	ldrb	r0, [r1, #7]
    40fe:	0600      	lsls	r0, r0, #24
    4100:	4320      	orrs	r0, r4
    4102:	0054      	lsls	r4, r2, #1
    4104:	1820      	adds	r0, r4, r0
    4106:	7047      	strb	r7, [r0, #1]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    4108:	3358      	adds	r3, #88	; 0x58
    410a:	009b      	lsls	r3, r3, #2
    410c:	18cb      	adds	r3, r1, r3
    410e:	721d      	strb	r5, [r3, #8]
    4110:	725d      	strb	r5, [r3, #9]
    4112:	729d      	strb	r5, [r3, #10]
    4114:	72dd      	strb	r5, [r3, #11]
    for (i = 2; i < RegParams.maxChannels; i++)
    4116:	3201      	adds	r2, #1
    4118:	b2d2      	uxtb	r2, r2
    411a:	0013      	movs	r3, r2
    411c:	5788      	ldrsb	r0, [r1, r6]
    411e:	4282      	cmp	r2, r0
    4120:	dbe5      	blt.n	40ee <LORAReg_InitJP+0x1b6>
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    4122:	4c1f      	ldr	r4, [pc, #124]	; (41a0 <LORAReg_InitJP+0x268>)
    4124:	22ff      	movs	r2, #255	; 0xff
    4126:	232f      	movs	r3, #47	; 0x2f
    4128:	54e2      	strb	r2, [r4, r3]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_JP;//MAX_EIRP_JP;
    412a:	3aef      	subs	r2, #239	; 0xef
    412c:	23c2      	movs	r3, #194	; 0xc2
    412e:	33ff      	adds	r3, #255	; 0xff
    4130:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsJP, sizeof(DefaultDrParamsJP) );
    4132:	7820      	ldrb	r0, [r4, #0]
    4134:	7863      	ldrb	r3, [r4, #1]
    4136:	021b      	lsls	r3, r3, #8
    4138:	4303      	orrs	r3, r0
    413a:	78a0      	ldrb	r0, [r4, #2]
    413c:	0400      	lsls	r0, r0, #16
    413e:	4303      	orrs	r3, r0
    4140:	78e0      	ldrb	r0, [r4, #3]
    4142:	0600      	lsls	r0, r0, #24
    4144:	4318      	orrs	r0, r3
    4146:	3230      	adds	r2, #48	; 0x30
    4148:	491f      	ldr	r1, [pc, #124]	; (41c8 <LORAReg_InitJP+0x290>)
    414a:	4b1b      	ldr	r3, [pc, #108]	; (41b8 <LORAReg_InitJP+0x280>)
    414c:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_JPN_08_IDX;
    414e:	2307      	movs	r3, #7
    4150:	2107      	movs	r1, #7
    4152:	4a1e      	ldr	r2, [pc, #120]	; (41cc <LORAReg_InitJP+0x294>)
    4154:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_JPN_CH_PARAM_1;
    4156:	2100      	movs	r1, #0
    4158:	4a1d      	ldr	r2, [pc, #116]	; (41d0 <LORAReg_InitJP+0x298>)
    415a:	54a1      	strb	r1, [r4, r2]
    415c:	18a2      	adds	r2, r4, r2
    415e:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_JPN_CH_PARAM_2;
    4160:	3101      	adds	r1, #1
    4162:	2284      	movs	r2, #132	; 0x84
    4164:	0092      	lsls	r2, r2, #2
    4166:	54a1      	strb	r1, [r4, r2]
    4168:	18a2      	adds	r2, r4, r2
    416a:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    416c:	2200      	movs	r2, #0
    416e:	4b19      	ldr	r3, [pc, #100]	; (41d4 <LORAReg_InitJP+0x29c>)
    4170:	54e2      	strb	r2, [r4, r3]
    4172:	18e3      	adds	r3, r4, r3
    4174:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    4176:	2383      	movs	r3, #131	; 0x83
    4178:	009b      	lsls	r3, r3, #2
    417a:	54e2      	strb	r2, [r4, r3]
    417c:	469c      	mov	ip, r3
    417e:	4464      	add	r4, ip
    4180:	2300      	movs	r3, #0
    4182:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegJpnFid1PdsOps;
    4184:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_JPN_FID1_MAX_VALUE & 0x00FF);
    4186:	3202      	adds	r2, #2
    4188:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_JPN_Pds_Cb;
    418a:	4a13      	ldr	r2, [pc, #76]	; (41d8 <LORAReg_InitJP+0x2a0>)
		PDS_RegFile(PDS_FILE_REG_JPN_08_IDX,filemarks);
    418c:	9200      	str	r2, [sp, #0]
    418e:	4913      	ldr	r1, [pc, #76]	; (41dc <LORAReg_InitJP+0x2a4>)
    4190:	9a03      	ldr	r2, [sp, #12]
    4192:	4b13      	ldr	r3, [pc, #76]	; (41e0 <LORAReg_InitJP+0x2a8>)
    4194:	2007      	movs	r0, #7
    4196:	4c13      	ldr	r4, [pc, #76]	; (41e4 <LORAReg_InitJP+0x2ac>)
    4198:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    419a:	2408      	movs	r4, #8
    419c:	e77d      	b.n	409a <LORAReg_InitJP+0x162>
    419e:	46c0      	nop			; (mov r8, r8)
    41a0:	20001328 	.word	0x20001328
    41a4:	20001324 	.word	0x20001324
    41a8:	00007eed 	.word	0x00007eed
    41ac:	000083a5 	.word	0x000083a5
    41b0:	00008665 	.word	0x00008665
    41b4:	000192e4 	.word	0x000192e4
    41b8:	00013e5d 	.word	0x00013e5d
    41bc:	000192cc 	.word	0x000192cc
    41c0:	0001932c 	.word	0x0001932c
    41c4:	00019328 	.word	0x00019328
    41c8:	000192e8 	.word	0x000192e8
    41cc:	0000020b 	.word	0x0000020b
    41d0:	0000020e 	.word	0x0000020e
    41d4:	00000212 	.word	0x00000212
    41d8:	00003f35 	.word	0x00003f35
    41dc:	20001118 	.word	0x20001118
    41e0:	00019344 	.word	0x00019344
    41e4:	00008dd1 	.word	0x00008dd1

000041e8 <LorawanReg_KR_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback */
void LorawanReg_KR_Pds_Cb(void)
{

}
    41e8:	4770      	bx	lr
	...

000041ec <LORAReg_InitKR>:
{
    41ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    41ee:	46de      	mov	lr, fp
    41f0:	4657      	mov	r7, sl
    41f2:	464e      	mov	r6, r9
    41f4:	4645      	mov	r5, r8
    41f6:	b5e0      	push	{r5, r6, r7, lr}
    41f8:	b087      	sub	sp, #28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_KR;
    41fa:	4ba9      	ldr	r3, [pc, #676]	; (44a0 <LORAReg_InitKR+0x2b4>)
    41fc:	2403      	movs	r4, #3
    41fe:	2226      	movs	r2, #38	; 0x26
    4200:	549c      	strb	r4, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_KR;
    4202:	2110      	movs	r1, #16
    4204:	3204      	adds	r2, #4
    4206:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_KR;
    4208:	3a29      	subs	r2, #41	; 0x29
    420a:	3119      	adds	r1, #25
    420c:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    420e:	3902      	subs	r1, #2
    4210:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    4212:	001a      	movs	r2, r3
    4214:	3283      	adds	r2, #131	; 0x83
    4216:	2100      	movs	r1, #0
    4218:	711a      	strb	r2, [r3, #4]
    421a:	0a15      	lsrs	r5, r2, #8
    421c:	715d      	strb	r5, [r3, #5]
    421e:	0c15      	lsrs	r5, r2, #16
    4220:	719d      	strb	r5, [r3, #6]
    4222:	0e12      	lsrs	r2, r2, #24
    4224:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    4226:	001a      	movs	r2, r3
    4228:	3243      	adds	r2, #67	; 0x43
    422a:	701a      	strb	r2, [r3, #0]
    422c:	0a15      	lsrs	r5, r2, #8
    422e:	705d      	strb	r5, [r3, #1]
    4230:	0c15      	lsrs	r5, r2, #16
    4232:	709d      	strb	r5, [r3, #2]
    4234:	0e12      	lsrs	r2, r2, #24
    4236:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    4238:	001a      	movs	r2, r3
    423a:	32a3      	adds	r2, #163	; 0xa3
    423c:	721a      	strb	r2, [r3, #8]
    423e:	0a15      	lsrs	r5, r2, #8
    4240:	725d      	strb	r5, [r3, #9]
    4242:	0c15      	lsrs	r5, r2, #16
    4244:	729d      	strb	r5, [r3, #10]
    4246:	0e12      	lsrs	r2, r2, #24
    4248:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    424a:	001a      	movs	r2, r3
    424c:	3264      	adds	r2, #100	; 0x64
    424e:	32ff      	adds	r2, #255	; 0xff
    4250:	741a      	strb	r2, [r3, #16]
    4252:	0a15      	lsrs	r5, r2, #8
    4254:	745d      	strb	r5, [r3, #17]
    4256:	0c15      	lsrs	r5, r2, #16
    4258:	749d      	strb	r5, [r3, #18]
    425a:	0e12      	lsrs	r2, r2, #24
    425c:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    425e:	001a      	movs	r2, r3
    4260:	3234      	adds	r2, #52	; 0x34
    4262:	751a      	strb	r2, [r3, #20]
    4264:	0a15      	lsrs	r5, r2, #8
    4266:	755d      	strb	r5, [r3, #21]
    4268:	0c15      	lsrs	r5, r2, #16
    426a:	759d      	strb	r5, [r3, #22]
    426c:	0e12      	lsrs	r2, r2, #24
    426e:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    4270:	001a      	movs	r2, r3
    4272:	323d      	adds	r2, #61	; 0x3d
    4274:	761a      	strb	r2, [r3, #24]
    4276:	0a15      	lsrs	r5, r2, #8
    4278:	765d      	strb	r5, [r3, #25]
    427a:	0c15      	lsrs	r5, r2, #16
    427c:	769d      	strb	r5, [r3, #26]
    427e:	0e12      	lsrs	r2, r2, #24
    4280:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_KR;
    4282:	2222      	movs	r2, #34	; 0x22
    4284:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_KR;
    4286:	3201      	adds	r2, #1
    4288:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_KR;	
    428a:	3a43      	subs	r2, #67	; 0x43
    428c:	771a      	strb	r2, [r3, #28]
    428e:	3233      	adds	r2, #51	; 0x33
    4290:	775a      	strb	r2, [r3, #29]
    4292:	3a20      	subs	r2, #32
    4294:	779a      	strb	r2, [r3, #30]
    4296:	3243      	adds	r2, #67	; 0x43
    4298:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_KR;
    429a:	3a15      	subs	r2, #21
    429c:	549c      	strb	r4, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_KR;
    429e:	2534      	movs	r5, #52	; 0x34
    42a0:	3a01      	subs	r2, #1
    42a2:	549d      	strb	r5, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_KR;
    42a4:	3a1b      	subs	r2, #27
    42a6:	3d10      	subs	r5, #16
    42a8:	555a      	strb	r2, [r3, r5]
	RegParams.maxDataRate = MAC_DATARATE_MAX_KR;
    42aa:	3501      	adds	r5, #1
    42ac:	5559      	strb	r1, [r3, r5]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_KR;
    42ae:	3d1b      	subs	r5, #27
    42b0:	26be      	movs	r6, #190	; 0xbe
    42b2:	36ff      	adds	r6, #255	; 0xff
    42b4:	559d      	strb	r5, [r3, r6]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_KR;
    42b6:	27bf      	movs	r7, #191	; 0xbf
    42b8:	3601      	adds	r6, #1
    42ba:	559f      	strb	r7, [r3, r6]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_KR;
    42bc:	26c0      	movs	r6, #192	; 0xc0
    42be:	36ff      	adds	r6, #255	; 0xff
    42c0:	559d      	strb	r5, [r3, r6]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    42c2:	35b7      	adds	r5, #183	; 0xb7
    42c4:	35ff      	adds	r5, #255	; 0xff
    42c6:	555c      	strb	r4, [r3, r5]
	RegParams.Rx1DrOffset = 5;
    42c8:	3429      	adds	r4, #41	; 0x29
    42ca:	551a      	strb	r2, [r3, r4]
	RegParams.maxTxPwrIndx = 7;
    42cc:	3c25      	subs	r4, #37	; 0x25
    42ce:	3228      	adds	r2, #40	; 0x28
    42d0:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_KR_HF;
    42d2:	3407      	adds	r4, #7
    42d4:	3a05      	subs	r2, #5
    42d6:	549c      	strb	r4, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    42d8:	4a72      	ldr	r2, [pc, #456]	; (44a4 <LORAReg_InitKR+0x2b8>)
    42da:	7815      	ldrb	r5, [r2, #0]
    42dc:	349f      	adds	r4, #159	; 0x9f
    42de:	34ff      	adds	r4, #255	; 0xff
    42e0:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    42e2:	7855      	ldrb	r5, [r2, #1]
    42e4:	3c70      	subs	r4, #112	; 0x70
    42e6:	3cff      	subs	r4, #255	; 0xff
    42e8:	551d      	strb	r5, [r3, r4]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    42ea:	7894      	ldrb	r4, [r2, #2]
    42ec:	223c      	movs	r2, #60	; 0x3c
    42ee:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    42f0:	2400      	movs	r4, #0
    42f2:	3a04      	subs	r2, #4
    42f4:	549c      	strb	r4, [r3, r2]
    42f6:	3201      	adds	r2, #1
    42f8:	549c      	strb	r4, [r3, r2]
    42fa:	3201      	adds	r2, #1
    42fc:	549c      	strb	r4, [r3, r2]
    42fe:	3201      	adds	r2, #1
    4300:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    4302:	3207      	adds	r2, #7
    4304:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    4306:	001a      	movs	r2, r3
    4308:	323e      	adds	r2, #62	; 0x3e
    430a:	7011      	strb	r1, [r2, #0]
    430c:	7051      	strb	r1, [r2, #1]
    430e:	7091      	strb	r1, [r2, #2]
    4310:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    4312:	222e      	movs	r2, #46	; 0x2e
    4314:	5498      	strb	r0, [r3, r2]
		result = UNSUPPORTED_BAND;
    4316:	34c6      	adds	r4, #198	; 0xc6
	if(ismBand == ISM_KR920)
    4318:	2804      	cmp	r0, #4
    431a:	d00d      	beq.n	4338 <LORAReg_InitKR+0x14c>
    LORAREG_InitGetAttrFnPtrsKR();
    431c:	4b62      	ldr	r3, [pc, #392]	; (44a8 <LORAReg_InitKR+0x2bc>)
    431e:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsKR();
    4320:	4b62      	ldr	r3, [pc, #392]	; (44ac <LORAReg_InitKR+0x2c0>)
    4322:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsKR();
    4324:	4b62      	ldr	r3, [pc, #392]	; (44b0 <LORAReg_InitKR+0x2c4>)
    4326:	4798      	blx	r3
}
    4328:	0020      	movs	r0, r4
    432a:	b007      	add	sp, #28
    432c:	bc3c      	pop	{r2, r3, r4, r5}
    432e:	4690      	mov	r8, r2
    4330:	4699      	mov	r9, r3
    4332:	46a2      	mov	sl, r4
    4334:	46ab      	mov	fp, r5
    4336:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels920KR, sizeof(DefaultChannels920KR) );
    4338:	001c      	movs	r4, r3
    433a:	0018      	movs	r0, r3
    433c:	3083      	adds	r0, #131	; 0x83
    433e:	3a28      	subs	r2, #40	; 0x28
    4340:	495c      	ldr	r1, [pc, #368]	; (44b4 <LORAReg_InitKR+0x2c8>)
    4342:	4d5d      	ldr	r5, [pc, #372]	; (44b8 <LORAReg_InitKR+0x2cc>)
    4344:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels920KR, sizeof(AdvChannels920KR) );
    4346:	0020      	movs	r0, r4
    4348:	30a3      	adds	r0, #163	; 0xa3
    434a:	2224      	movs	r2, #36	; 0x24
    434c:	495b      	ldr	r1, [pc, #364]	; (44bc <LORAReg_InitKR+0x2d0>)
    434e:	47a8      	blx	r5
    4350:	2103      	movs	r1, #3
    4352:	2003      	movs	r0, #3
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    4354:	4b52      	ldr	r3, [pc, #328]	; (44a0 <LORAReg_InitKR+0x2b4>)
    4356:	22ff      	movs	r2, #255	; 0xff
    4358:	4692      	mov	sl, r2
		RegParams.pChParams[i].status = DISABLED;
    435a:	2400      	movs	r4, #0
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    435c:	22c2      	movs	r2, #194	; 0xc2
    435e:	32ff      	adds	r2, #255	; 0xff
    4360:	4694      	mov	ip, r2
    4362:	4657      	mov	r7, sl
    for (i = 3; i < RegParams.maxChannels; i++)
    4364:	3a98      	subs	r2, #152	; 0x98
    4366:	3aff      	subs	r2, #255	; 0xff
    4368:	4693      	mov	fp, r2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    436a:	0042      	lsls	r2, r0, #1
    436c:	791e      	ldrb	r6, [r3, #4]
    436e:	46b0      	mov	r8, r6
    4370:	795e      	ldrb	r6, [r3, #5]
    4372:	0236      	lsls	r6, r6, #8
    4374:	46b1      	mov	r9, r6
    4376:	4646      	mov	r6, r8
    4378:	464d      	mov	r5, r9
    437a:	432e      	orrs	r6, r5
    437c:	799d      	ldrb	r5, [r3, #6]
    437e:	042d      	lsls	r5, r5, #16
    4380:	432e      	orrs	r6, r5
    4382:	79dd      	ldrb	r5, [r3, #7]
    4384:	062d      	lsls	r5, r5, #24
    4386:	432e      	orrs	r6, r5
    4388:	46b0      	mov	r8, r6
    438a:	4490      	add	r8, r2
    438c:	4645      	mov	r5, r8
    438e:	4656      	mov	r6, sl
    4390:	706e      	strb	r6, [r5, #1]
		RegParams.pChParams[i].status = DISABLED;
    4392:	791d      	ldrb	r5, [r3, #4]
    4394:	46a8      	mov	r8, r5
    4396:	795d      	ldrb	r5, [r3, #5]
    4398:	022d      	lsls	r5, r5, #8
    439a:	4646      	mov	r6, r8
    439c:	432e      	orrs	r6, r5
    439e:	799d      	ldrb	r5, [r3, #6]
    43a0:	042d      	lsls	r5, r5, #16
    43a2:	432e      	orrs	r6, r5
    43a4:	79dd      	ldrb	r5, [r3, #7]
    43a6:	062d      	lsls	r5, r5, #24
    43a8:	432e      	orrs	r6, r5
    43aa:	54b4      	strb	r4, [r6, r2]
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
    43ac:	7a1d      	ldrb	r5, [r3, #8]
    43ae:	46a8      	mov	r8, r5
    43b0:	7a5d      	ldrb	r5, [r3, #9]
    43b2:	022d      	lsls	r5, r5, #8
    43b4:	4646      	mov	r6, r8
    43b6:	432e      	orrs	r6, r5
    43b8:	7a9d      	ldrb	r5, [r3, #10]
    43ba:	042d      	lsls	r5, r5, #16
    43bc:	432e      	orrs	r6, r5
    43be:	7add      	ldrb	r5, [r3, #11]
    43c0:	062d      	lsls	r5, r5, #24
    43c2:	432e      	orrs	r6, r5
    43c4:	46b0      	mov	r8, r6
    43c6:	1812      	adds	r2, r2, r0
    43c8:	0092      	lsls	r2, r2, #2
    43ca:	4442      	add	r2, r8
    43cc:	7254      	strb	r4, [r2, #9]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    43ce:	4662      	mov	r2, ip
    43d0:	549f      	strb	r7, [r3, r2]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    43d2:	000a      	movs	r2, r1
    43d4:	3258      	adds	r2, #88	; 0x58
    43d6:	0092      	lsls	r2, r2, #2
    43d8:	189a      	adds	r2, r3, r2
    43da:	7214      	strb	r4, [r2, #8]
    43dc:	7254      	strb	r4, [r2, #9]
    43de:	7294      	strb	r4, [r2, #10]
    43e0:	72d4      	strb	r4, [r2, #11]
    for (i = 3; i < RegParams.maxChannels; i++)
    43e2:	3001      	adds	r0, #1
    43e4:	b2c0      	uxtb	r0, r0
    43e6:	0001      	movs	r1, r0
    43e8:	465a      	mov	r2, fp
    43ea:	569a      	ldrsb	r2, [r3, r2]
    43ec:	4290      	cmp	r0, r2
    43ee:	dbbc      	blt.n	436a <LORAReg_InitKR+0x17e>
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    43f0:	4c2b      	ldr	r4, [pc, #172]	; (44a0 <LORAReg_InitKR+0x2b4>)
    43f2:	22ff      	movs	r2, #255	; 0xff
    43f4:	232f      	movs	r3, #47	; 0x2f
    43f6:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsKR, sizeof(DefaultDrParamsKR) );
    43f8:	7820      	ldrb	r0, [r4, #0]
    43fa:	7863      	ldrb	r3, [r4, #1]
    43fc:	021b      	lsls	r3, r3, #8
    43fe:	4303      	orrs	r3, r0
    4400:	78a0      	ldrb	r0, [r4, #2]
    4402:	0400      	lsls	r0, r0, #16
    4404:	4303      	orrs	r3, r0
    4406:	78e0      	ldrb	r0, [r4, #3]
    4408:	0600      	lsls	r0, r0, #24
    440a:	4318      	orrs	r0, r3
    440c:	3acf      	subs	r2, #207	; 0xcf
    440e:	492c      	ldr	r1, [pc, #176]	; (44c0 <LORAReg_InitKR+0x2d4>)
    4410:	4b29      	ldr	r3, [pc, #164]	; (44b8 <LORAReg_InitKR+0x2cc>)
    4412:	4798      	blx	r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    4414:	2325      	movs	r3, #37	; 0x25
    4416:	5ce3      	ldrb	r3, [r4, r3]
    4418:	2b00      	cmp	r3, #0
    441a:	dd18      	ble.n	444e <LORAReg_InitKR+0x262>
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    441c:	4a20      	ldr	r2, [pc, #128]	; (44a0 <LORAReg_InitKR+0x2b4>)
    441e:	7811      	ldrb	r1, [r2, #0]
    4420:	7853      	ldrb	r3, [r2, #1]
    4422:	021b      	lsls	r3, r3, #8
    4424:	430b      	orrs	r3, r1
    4426:	7891      	ldrb	r1, [r2, #2]
    4428:	0409      	lsls	r1, r1, #16
    442a:	430b      	orrs	r3, r1
    442c:	78d1      	ldrb	r1, [r2, #3]
    442e:	0609      	lsls	r1, r1, #24
    4430:	4319      	orrs	r1, r3
    4432:	2300      	movs	r3, #0
    4434:	2601      	movs	r6, #1
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    4436:	2507      	movs	r5, #7
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    4438:	0014      	movs	r4, r2
    443a:	2025      	movs	r0, #37	; 0x25
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    443c:	00da      	lsls	r2, r3, #3
    443e:	188a      	adds	r2, r1, r2
    4440:	71d6      	strb	r6, [r2, #7]
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    4442:	7195      	strb	r5, [r2, #6]
    4444:	3301      	adds	r3, #1
    4446:	b25b      	sxtb	r3, r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    4448:	5c22      	ldrb	r2, [r4, r0]
    444a:	4293      	cmp	r3, r2
    444c:	dbf6      	blt.n	443c <LORAReg_InitKR+0x250>
		RegParams.regParamItems.fileid = PDS_FILE_REG_KR_06_IDX;
    444e:	4b14      	ldr	r3, [pc, #80]	; (44a0 <LORAReg_InitKR+0x2b4>)
    4450:	2205      	movs	r2, #5
    4452:	2005      	movs	r0, #5
    4454:	491b      	ldr	r1, [pc, #108]	; (44c4 <LORAReg_InitKR+0x2d8>)
    4456:	5458      	strb	r0, [r3, r1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_KR_CH_PARAM_1;
    4458:	2000      	movs	r0, #0
    445a:	491b      	ldr	r1, [pc, #108]	; (44c8 <LORAReg_InitKR+0x2dc>)
    445c:	5458      	strb	r0, [r3, r1]
    445e:	1859      	adds	r1, r3, r1
    4460:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_KR_CH_PARAM_2;
    4462:	3001      	adds	r0, #1
    4464:	2184      	movs	r1, #132	; 0x84
    4466:	0089      	lsls	r1, r1, #2
    4468:	5458      	strb	r0, [r3, r1]
    446a:	1859      	adds	r1, r3, r1
    446c:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.band_item_id = 0;
    446e:	2100      	movs	r1, #0
    4470:	4a16      	ldr	r2, [pc, #88]	; (44cc <LORAReg_InitKR+0x2e0>)
    4472:	5499      	strb	r1, [r3, r2]
    4474:	189a      	adds	r2, r3, r2
    4476:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    4478:	2283      	movs	r2, #131	; 0x83
    447a:	0092      	lsls	r2, r2, #2
    447c:	5499      	strb	r1, [r3, r2]
    447e:	4694      	mov	ip, r2
    4480:	4463      	add	r3, ip
    4482:	2200      	movs	r2, #0
    4484:	705a      	strb	r2, [r3, #1]
		filemarks.fileMarkListAddr = aRegKrFid1PdsOps;
    4486:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_KR_FID1_MAX_VALUE & 0x00FF);
    4488:	3202      	adds	r2, #2
    448a:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_KR_Pds_Cb;
    448c:	4a10      	ldr	r2, [pc, #64]	; (44d0 <LORAReg_InitKR+0x2e4>)
		PDS_RegFile(PDS_FILE_REG_KR_06_IDX,filemarks);
    448e:	9200      	str	r2, [sp, #0]
    4490:	4910      	ldr	r1, [pc, #64]	; (44d4 <LORAReg_InitKR+0x2e8>)
    4492:	9a03      	ldr	r2, [sp, #12]
    4494:	4b10      	ldr	r3, [pc, #64]	; (44d8 <LORAReg_InitKR+0x2ec>)
    4496:	3004      	adds	r0, #4
    4498:	4c10      	ldr	r4, [pc, #64]	; (44dc <LORAReg_InitKR+0x2f0>)
    449a:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    449c:	2408      	movs	r4, #8
    449e:	e73d      	b.n	431c <LORAReg_InitKR+0x130>
    44a0:	20001328 	.word	0x20001328
    44a4:	20001324 	.word	0x20001324
    44a8:	00008049 	.word	0x00008049
    44ac:	00008411 	.word	0x00008411
    44b0:	000086e5 	.word	0x000086e5
    44b4:	00019378 	.word	0x00019378
    44b8:	00013e5d 	.word	0x00013e5d
    44bc:	00019354 	.word	0x00019354
    44c0:	00019380 	.word	0x00019380
    44c4:	0000020b 	.word	0x0000020b
    44c8:	0000020e 	.word	0x0000020e
    44cc:	00000212 	.word	0x00000212
    44d0:	000041e9 	.word	0x000041e9
    44d4:	2000111c 	.word	0x2000111c
    44d8:	000193b0 	.word	0x000193b0
    44dc:	00008dd1 	.word	0x00008dd1

000044e0 <LorawanReg_NA_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_NA_Pds_Cb(void)
{
	
}
    44e0:	4770      	bx	lr
	...

000044e4 <LORAReg_InitNA>:
{
    44e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    44e6:	46de      	mov	lr, fp
    44e8:	4657      	mov	r7, sl
    44ea:	464e      	mov	r6, r9
    44ec:	4645      	mov	r5, r8
    44ee:	b5e0      	push	{r5, r6, r7, lr}
    44f0:	b089      	sub	sp, #36	; 0x24
    44f2:	9003      	str	r0, [sp, #12]
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_NA;
    44f4:	4c7d      	ldr	r4, [pc, #500]	; (46ec <LORAReg_InitNA+0x208>)
    44f6:	2702      	movs	r7, #2
    44f8:	2302      	movs	r3, #2
    44fa:	469b      	mov	fp, r3
    44fc:	2326      	movs	r3, #38	; 0x26
    44fe:	54e7      	strb	r7, [r4, r3]
	RegParams.maxChannels = MAX_CHANNELS_T1;
    4500:	2248      	movs	r2, #72	; 0x48
    4502:	3304      	adds	r3, #4
    4504:	54e2      	strb	r2, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    4506:	3a41      	subs	r2, #65	; 0x41
    4508:	3b03      	subs	r3, #3
    450a:	54e2      	strb	r2, [r4, r3]
	RegParams.maxTxPwr = DEFAULT_EIRP_NA;
    450c:	3217      	adds	r2, #23
    450e:	3301      	adds	r3, #1
    4510:	54e2      	strb	r2, [r4, r3]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    4512:	0023      	movs	r3, r4
    4514:	33b3      	adds	r3, #179	; 0xb3
    4516:	0018      	movs	r0, r3
    4518:	2500      	movs	r5, #0
    451a:	7123      	strb	r3, [r4, #4]
    451c:	0a1b      	lsrs	r3, r3, #8
    451e:	7163      	strb	r3, [r4, #5]
    4520:	0c03      	lsrs	r3, r0, #16
    4522:	71a3      	strb	r3, [r4, #6]
    4524:	0e03      	lsrs	r3, r0, #24
    4526:	71e3      	strb	r3, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    4528:	0026      	movs	r6, r4
    452a:	3643      	adds	r6, #67	; 0x43
    452c:	7026      	strb	r6, [r4, #0]
    452e:	0a33      	lsrs	r3, r6, #8
    4530:	7063      	strb	r3, [r4, #1]
    4532:	0c33      	lsrs	r3, r6, #16
    4534:	70a3      	strb	r3, [r4, #2]
    4536:	0e33      	lsrs	r3, r6, #24
    4538:	70e3      	strb	r3, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    453a:	2321      	movs	r3, #33	; 0x21
    453c:	32e1      	adds	r2, #225	; 0xe1
    453e:	54e2      	strb	r2, [r4, r3]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_NA;
    4540:	3add      	subs	r2, #221	; 0xdd
    4542:	3b17      	subs	r3, #23
    4544:	54a3      	strb	r3, [r4, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_NA;
    4546:	3a1a      	subs	r2, #26
    4548:	2108      	movs	r1, #8
    454a:	468c      	mov	ip, r1
    454c:	2123      	movs	r1, #35	; 0x23
    454e:	5462      	strb	r2, [r4, r1]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_NA;
    4550:	3983      	subs	r1, #131	; 0x83
    4552:	4688      	mov	r8, r1
    4554:	7721      	strb	r1, [r4, #28]
    4556:	2170      	movs	r1, #112	; 0x70
    4558:	7761      	strb	r1, [r4, #29]
    455a:	4661      	mov	r1, ip
    455c:	77a1      	strb	r1, [r4, #30]
    455e:	2137      	movs	r1, #55	; 0x37
    4560:	77e1      	strb	r1, [r4, #31]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_NA;
    4562:	3917      	subs	r1, #23
    4564:	2338      	movs	r3, #56	; 0x38
    4566:	5463      	strb	r3, [r4, r1]
	RegParams.minDataRate = MAC_DATARATE_MIN_NA;
    4568:	391c      	subs	r1, #28
    456a:	4689      	mov	r9, r1
    456c:	3120      	adds	r1, #32
    456e:	464b      	mov	r3, r9
    4570:	5463      	strb	r3, [r4, r1]
	RegParams.maxDataRate = MAC_DATARATE_MAX_NA;
    4572:	2325      	movs	r3, #37	; 0x25
    4574:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU_NA;
    4576:	2354      	movs	r3, #84	; 0x54
    4578:	33ff      	adds	r3, #255	; 0xff
    457a:	311c      	adds	r1, #28
    457c:	54e1      	strb	r1, [r4, r3]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU_NA;
    457e:	3301      	adds	r3, #1
    4580:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    4582:	2350      	movs	r3, #80	; 0x50
    4584:	33ff      	adds	r3, #255	; 0xff
    4586:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.maxTxDR = DR4;
    4588:	3301      	adds	r3, #1
    458a:	4649      	mov	r1, r9
    458c:	54e1      	strb	r1, [r4, r3]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    458e:	2352      	movs	r3, #82	; 0x52
    4590:	33ff      	adds	r3, #255	; 0xff
    4592:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    4594:	3b45      	subs	r3, #69	; 0x45
    4596:	3bff      	subs	r3, #255	; 0xff
    4598:	324b      	adds	r2, #75	; 0x4b
    459a:	32ff      	adds	r2, #255	; 0xff
    459c:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 10;
    459e:	2256      	movs	r2, #86	; 0x56
    45a0:	32ff      	adds	r2, #255	; 0xff
    45a2:	230a      	movs	r3, #10
    45a4:	54a3      	strb	r3, [r4, r2]
	RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    45a6:	0022      	movs	r2, r4
    45a8:	3234      	adds	r2, #52	; 0x34
    45aa:	7522      	strb	r2, [r4, #20]
    45ac:	0a13      	lsrs	r3, r2, #8
    45ae:	7563      	strb	r3, [r4, #21]
    45b0:	0c13      	lsrs	r3, r2, #16
    45b2:	75a3      	strb	r3, [r4, #22]
    45b4:	0e12      	lsrs	r2, r2, #24
    45b6:	75e2      	strb	r2, [r4, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    45b8:	0022      	movs	r2, r4
    45ba:	323d      	adds	r2, #61	; 0x3d
    45bc:	7622      	strb	r2, [r4, #24]
    45be:	0a13      	lsrs	r3, r2, #8
    45c0:	7663      	strb	r3, [r4, #25]
    45c2:	0c13      	lsrs	r3, r2, #16
    45c4:	76a3      	strb	r3, [r4, #26]
    45c6:	0e12      	lsrs	r2, r2, #24
    45c8:	76e2      	strb	r2, [r4, #27]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_NA;
    45ca:	2360      	movs	r3, #96	; 0x60
    45cc:	2244      	movs	r2, #68	; 0x44
    45ce:	32ff      	adds	r2, #255	; 0xff
    45d0:	54a3      	strb	r3, [r4, r2]
    45d2:	0022      	movs	r2, r4
    45d4:	3244      	adds	r2, #68	; 0x44
    45d6:	32ff      	adds	r2, #255	; 0xff
    45d8:	2301      	movs	r3, #1
    45da:	7053      	strb	r3, [r2, #1]
    45dc:	2338      	movs	r3, #56	; 0x38
    45de:	425b      	negs	r3, r3
    45e0:	7093      	strb	r3, [r2, #2]
    45e2:	2335      	movs	r3, #53	; 0x35
    45e4:	70d3      	strb	r3, [r2, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_NA;
    45e6:	2340      	movs	r3, #64	; 0x40
    45e8:	425b      	negs	r3, r3
    45ea:	2248      	movs	r2, #72	; 0x48
    45ec:	32ff      	adds	r2, #255	; 0xff
    45ee:	54a3      	strb	r3, [r4, r2]
    45f0:	0022      	movs	r2, r4
    45f2:	3248      	adds	r2, #72	; 0x48
    45f4:	32ff      	adds	r2, #255	; 0xff
    45f6:	2351      	movs	r3, #81	; 0x51
    45f8:	425b      	negs	r3, r3
    45fa:	7053      	strb	r3, [r2, #1]
    45fc:	232e      	movs	r3, #46	; 0x2e
    45fe:	425b      	negs	r3, r3
    4600:	7093      	strb	r3, [r2, #2]
    4602:	2335      	movs	r3, #53	; 0x35
    4604:	70d3      	strb	r3, [r2, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_NA;
    4606:	224c      	movs	r2, #76	; 0x4c
    4608:	32ff      	adds	r2, #255	; 0xff
    460a:	4643      	mov	r3, r8
    460c:	54a3      	strb	r3, [r4, r2]
    460e:	0022      	movs	r2, r4
    4610:	324c      	adds	r2, #76	; 0x4c
    4612:	32ff      	adds	r2, #255	; 0xff
    4614:	2370      	movs	r3, #112	; 0x70
    4616:	7053      	strb	r3, [r2, #1]
    4618:	4663      	mov	r3, ip
    461a:	7093      	strb	r3, [r2, #2]
    461c:	2337      	movs	r3, #55	; 0x37
    461e:	70d3      	strb	r3, [r2, #3]
	RegParams.Rx1DrOffset = 3;
    4620:	2303      	movs	r3, #3
    4622:	222c      	movs	r2, #44	; 0x2c
    4624:	54a3      	strb	r3, [r4, r2]
	RegParams.maxTxPwrIndx = 10;
    4626:	3201      	adds	r2, #1
    4628:	230a      	movs	r3, #10
    462a:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    462c:	2358      	movs	r3, #88	; 0x58
    462e:	33ff      	adds	r3, #255	; 0xff
    4630:	54e5      	strb	r5, [r4, r3]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[0];
    4632:	4b2f      	ldr	r3, [pc, #188]	; (46f0 <LORAReg_InitNA+0x20c>)
    4634:	781a      	ldrb	r2, [r3, #0]
    4636:	4694      	mov	ip, r2
    4638:	223d      	movs	r2, #61	; 0x3d
    463a:	4661      	mov	r1, ip
    463c:	54a1      	strb	r1, [r4, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[1];
    463e:	785a      	ldrb	r2, [r3, #1]
    4640:	233c      	movs	r3, #60	; 0x3c
    4642:	54e2      	strb	r2, [r4, r3]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    4644:	2300      	movs	r3, #0
    4646:	2238      	movs	r2, #56	; 0x38
    4648:	54a3      	strb	r3, [r4, r2]
    464a:	2200      	movs	r2, #0
    464c:	3339      	adds	r3, #57	; 0x39
    464e:	54e2      	strb	r2, [r4, r3]
    4650:	3301      	adds	r3, #1
    4652:	54e2      	strb	r2, [r4, r3]
    4654:	3301      	adds	r3, #1
    4656:	54e2      	strb	r2, [r4, r3]
	RegParams.joinbccount =0;
    4658:	3307      	adds	r3, #7
    465a:	54e5      	strb	r5, [r4, r3]
	RegParams.joinDutyCycleTimeout =0;
    465c:	0023      	movs	r3, r4
    465e:	333e      	adds	r3, #62	; 0x3e
    4660:	701a      	strb	r2, [r3, #0]
    4662:	705a      	strb	r2, [r3, #1]
    4664:	709a      	strb	r2, [r3, #2]
    4666:	70da      	strb	r2, [r3, #3]
	RegParams.band = ismBand;
    4668:	232e      	movs	r3, #46	; 0x2e
    466a:	466a      	mov	r2, sp
    466c:	7b12      	ldrb	r2, [r2, #12]
    466e:	54e2      	strb	r2, [r4, r3]
	memcpy (RegParams.pChParams, DefaultChannels915, sizeof(DefaultChannels915) );
    4670:	2290      	movs	r2, #144	; 0x90
    4672:	4920      	ldr	r1, [pc, #128]	; (46f4 <LORAReg_InitNA+0x210>)
    4674:	4b20      	ldr	r3, [pc, #128]	; (46f8 <LORAReg_InitNA+0x214>)
    4676:	4698      	mov	r8, r3
    4678:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsNA, sizeof(DefaultDrParamsNA) );
    467a:	2270      	movs	r2, #112	; 0x70
    467c:	491f      	ldr	r1, [pc, #124]	; (46fc <LORAReg_InitNA+0x218>)
    467e:	0030      	movs	r0, r6
    4680:	47c0      	blx	r8
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    4682:	23ab      	movs	r3, #171	; 0xab
    4684:	005b      	lsls	r3, r3, #1
    4686:	54e5      	strb	r5, [r4, r3]
	RegParams.regParamItems.fileid = PDS_FILE_REG_NA_03_IDX;
    4688:	4b1d      	ldr	r3, [pc, #116]	; (4700 <LORAReg_InitNA+0x21c>)
    468a:	54e7      	strb	r7, [r4, r3]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_NA_CH_PARAM;
    468c:	2200      	movs	r2, #0
    468e:	4b1d      	ldr	r3, [pc, #116]	; (4704 <LORAReg_InitNA+0x220>)
    4690:	54e2      	strb	r2, [r4, r3]
    4692:	18e3      	adds	r3, r4, r3
    4694:	465a      	mov	r2, fp
    4696:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    4698:	2200      	movs	r2, #0
    469a:	2384      	movs	r3, #132	; 0x84
    469c:	009b      	lsls	r3, r3, #2
    469e:	54e2      	strb	r2, [r4, r3]
    46a0:	18e3      	adds	r3, r4, r3
    46a2:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    46a4:	4b18      	ldr	r3, [pc, #96]	; (4708 <LORAReg_InitNA+0x224>)
    46a6:	54e2      	strb	r2, [r4, r3]
    46a8:	18e3      	adds	r3, r4, r3
    46aa:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.lastUsedSB = PDS_REG_NA_LAST_USED_SB;
    46ac:	2383      	movs	r3, #131	; 0x83
    46ae:	009b      	lsls	r3, r3, #2
    46b0:	2201      	movs	r2, #1
    46b2:	54e2      	strb	r2, [r4, r3]
    46b4:	469c      	mov	ip, r3
    46b6:	4464      	add	r4, ip
    46b8:	465b      	mov	r3, fp
    46ba:	7063      	strb	r3, [r4, #1]
	filemarks.fileMarkListAddr = aRegNaPdsOps;
    46bc:	ab04      	add	r3, sp, #16
	filemarks.numItems =  (uint8_t)(PDS_REG_NA_MAX_VALUE & 0x00FF);
    46be:	711f      	strb	r7, [r3, #4]
	filemarks.fIDcb = LorawanReg_NA_Pds_Cb;
    46c0:	4a12      	ldr	r2, [pc, #72]	; (470c <LORAReg_InitNA+0x228>)
	PDS_RegFile(PDS_FILE_REG_NA_03_IDX,filemarks);
    46c2:	9200      	str	r2, [sp, #0]
    46c4:	4912      	ldr	r1, [pc, #72]	; (4710 <LORAReg_InitNA+0x22c>)
    46c6:	9a05      	ldr	r2, [sp, #20]
    46c8:	4b12      	ldr	r3, [pc, #72]	; (4714 <LORAReg_InitNA+0x230>)
    46ca:	2002      	movs	r0, #2
    46cc:	4c12      	ldr	r4, [pc, #72]	; (4718 <LORAReg_InitNA+0x234>)
    46ce:	47a0      	blx	r4
    LORAREG_InitGetAttrFnPtrsNA();
    46d0:	4b12      	ldr	r3, [pc, #72]	; (471c <LORAReg_InitNA+0x238>)
    46d2:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsNA();
    46d4:	4b12      	ldr	r3, [pc, #72]	; (4720 <LORAReg_InitNA+0x23c>)
    46d6:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsNA();
    46d8:	4b12      	ldr	r3, [pc, #72]	; (4724 <LORAReg_InitNA+0x240>)
    46da:	4798      	blx	r3
}
    46dc:	2008      	movs	r0, #8
    46de:	b009      	add	sp, #36	; 0x24
    46e0:	bc3c      	pop	{r2, r3, r4, r5}
    46e2:	4690      	mov	r8, r2
    46e4:	4699      	mov	r9, r3
    46e6:	46a2      	mov	sl, r4
    46e8:	46ab      	mov	fp, r5
    46ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46ec:	20001328 	.word	0x20001328
    46f0:	20001324 	.word	0x20001324
    46f4:	000193c0 	.word	0x000193c0
    46f8:	00013e5d 	.word	0x00013e5d
    46fc:	00019450 	.word	0x00019450
    4700:	0000020b 	.word	0x0000020b
    4704:	0000020e 	.word	0x0000020e
    4708:	00000212 	.word	0x00000212
    470c:	000044e1 	.word	0x000044e1
    4710:	20001120 	.word	0x20001120
    4714:	000194c0 	.word	0x000194c0
    4718:	00008dd1 	.word	0x00008dd1
    471c:	000078b1 	.word	0x000078b1
    4720:	00008191 	.word	0x00008191
    4724:	00008479 	.word	0x00008479

00004728 <InValidGetAttr>:
/****************************** FUNCTIONS *************************************/

StackRetStatus_t InValidGetAttr(LorawanRegionalAttributes_t attr, void * attrInput, void * attrOutput)
{
	return LORAWAN_INVALID_REQUEST;
}
    4728:	2015      	movs	r0, #21
    472a:	4770      	bx	lr

0000472c <InValidAttr>:

StackRetStatus_t InValidAttr(LorawanRegionalAttributes_t attr, void * attrInput)
{
	return LORAWAN_INVALID_REQUEST;
}
    472c:	2015      	movs	r0, #21
    472e:	4770      	bx	lr

00004730 <LORAREG_GetAttr_MaxChannel>:
#endif


static StackRetStatus_t LORAREG_GetAttr_MaxChannel(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.maxChannels;
    4730:	232a      	movs	r3, #42	; 0x2a
    4732:	4902      	ldr	r1, [pc, #8]	; (473c <LORAREG_GetAttr_MaxChannel+0xc>)
    4734:	5ccb      	ldrb	r3, [r1, r3]
    4736:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4738:	2008      	movs	r0, #8
    473a:	4770      	bx	lr
    473c:	20001328 	.word	0x20001328

00004740 <LORAREG_GetAttr_MinNewChIndex>:


static StackRetStatus_t LORAREG_GetAttr_MinNewChIndex(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	*(uint8_t *)attrOutput = (uint8_t)RegParams.MinNewChIndex;
    4740:	4905      	ldr	r1, [pc, #20]	; (4758 <LORAREG_GetAttr_MinNewChIndex+0x18>)
    4742:	2321      	movs	r3, #33	; 0x21
    4744:	5cc8      	ldrb	r0, [r1, r3]
    4746:	7010      	strb	r0, [r2, #0]
	if(RegParams.MinNewChIndex == 0xFF)
    4748:	5ccb      	ldrb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    474a:	2008      	movs	r0, #8
	if(RegParams.MinNewChIndex == 0xFF)
    474c:	2bff      	cmp	r3, #255	; 0xff
    474e:	d000      	beq.n	4752 <LORAREG_GetAttr_MinNewChIndex+0x12>
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	
	return result;
}
    4750:	4770      	bx	lr
		result = LORAWAN_INVALID_PARAMETER;
    4752:	3002      	adds	r0, #2
    4754:	e7fc      	b.n	4750 <LORAREG_GetAttr_MinNewChIndex+0x10>
    4756:	46c0      	nop			; (mov r8, r8)
    4758:	20001328 	.word	0x20001328

0000475c <LORAREG_GetAttr_DefRx1DataRate>:
}
#endif

static StackRetStatus_t LORAREG_GetAttr_DefRx1DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx1DataRate;
    475c:	2322      	movs	r3, #34	; 0x22
    475e:	4902      	ldr	r1, [pc, #8]	; (4768 <LORAREG_GetAttr_DefRx1DataRate+0xc>)
    4760:	5ccb      	ldrb	r3, [r1, r3]
    4762:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4764:	2008      	movs	r0, #8
    4766:	4770      	bx	lr
    4768:	20001328 	.word	0x20001328

0000476c <LORAREG_GetAttr_DefRx2DataRate>:

static StackRetStatus_t LORAREG_GetAttr_DefRx2DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx2DataRate;
    476c:	2323      	movs	r3, #35	; 0x23
    476e:	4902      	ldr	r1, [pc, #8]	; (4778 <LORAREG_GetAttr_DefRx2DataRate+0xc>)
    4770:	5ccb      	ldrb	r3, [r1, r3]
    4772:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4774:	2008      	movs	r0, #8
    4776:	4770      	bx	lr
    4778:	20001328 	.word	0x20001328

0000477c <LORAREG_GetAttr_RegFeatures>:
	return LORAWAN_SUCCESS;
}

static StackRetStatus_t LORAREG_GetAttr_RegFeatures(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = RegParams.FeaturesSupport;
    477c:	2320      	movs	r3, #32
    477e:	4902      	ldr	r1, [pc, #8]	; (4788 <LORAREG_GetAttr_RegFeatures+0xc>)
    4780:	5ccb      	ldrb	r3, [r1, r3]
    4782:	6013      	str	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4784:	2008      	movs	r0, #8
    4786:	4770      	bx	lr
    4788:	20001328 	.word	0x20001328

0000478c <LORAREG_GetAttr_DataRange>:

static StackRetStatus_t LORAREG_GetAttr_DataRange(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    478c:	b530      	push	{r4, r5, lr}
    478e:	b083      	sub	sp, #12
    4790:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t  channelId;
	ValChId_t valChid;
	valChid.channelIndex = *(uint8_t *)attrInput;
    4792:	780c      	ldrb	r4, [r1, #0]
    4794:	a901      	add	r1, sp, #4
    4796:	700c      	strb	r4, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    4798:	2301      	movs	r3, #1
    479a:	704b      	strb	r3, [r1, #1]
	channelId = *(uint8_t *)attrInput;
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    479c:	4b0d      	ldr	r3, [pc, #52]	; (47d4 <LORAREG_GetAttr_DataRange+0x48>)
    479e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    47a0:	2015      	movs	r0, #21
    47a2:	4798      	blx	r3
    47a4:	2808      	cmp	r0, #8
    47a6:	d004      	beq.n	47b2 <LORAREG_GetAttr_DataRange+0x26>
	{
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
	}
	else
	{
		*(uint8_t *)attrOutput = 0xFF;
    47a8:	23ff      	movs	r3, #255	; 0xff
    47aa:	702b      	strb	r3, [r5, #0]
	    result = LORAWAN_INVALID_PARAMETER;
    47ac:	200a      	movs	r0, #10
	}
	return result;
}
    47ae:	b003      	add	sp, #12
    47b0:	bd30      	pop	{r4, r5, pc}
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
    47b2:	4909      	ldr	r1, [pc, #36]	; (47d8 <LORAREG_GetAttr_DataRange+0x4c>)
    47b4:	790b      	ldrb	r3, [r1, #4]
    47b6:	794a      	ldrb	r2, [r1, #5]
    47b8:	0212      	lsls	r2, r2, #8
    47ba:	4313      	orrs	r3, r2
    47bc:	798a      	ldrb	r2, [r1, #6]
    47be:	0412      	lsls	r2, r2, #16
    47c0:	431a      	orrs	r2, r3
    47c2:	79cb      	ldrb	r3, [r1, #7]
    47c4:	061b      	lsls	r3, r3, #24
    47c6:	431a      	orrs	r2, r3
    47c8:	0063      	lsls	r3, r4, #1
    47ca:	189b      	adds	r3, r3, r2
    47cc:	785b      	ldrb	r3, [r3, #1]
    47ce:	702b      	strb	r3, [r5, #0]
    47d0:	e7ed      	b.n	47ae <LORAREG_GetAttr_DataRange+0x22>
    47d2:	46c0      	nop			; (mov r8, r8)
    47d4:	20000ce0 	.word	0x20000ce0
    47d8:	20001328 	.word	0x20001328

000047dc <LORAREG_GetAttr_ChIdStatus>:
}
#endif


static StackRetStatus_t LORAREG_GetAttr_ChIdStatus(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    47dc:	b530      	push	{r4, r5, lr}
    47de:	b083      	sub	sp, #12
    47e0:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	uint8_t  channelId;
	channelId = *(uint8_t *)attrInput;
    47e2:	780c      	ldrb	r4, [r1, #0]
	val_chid.channelIndex = *(uint8_t *)attrInput;
    47e4:	a901      	add	r1, sp, #4
    47e6:	700c      	strb	r4, [r1, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    47e8:	2301      	movs	r3, #1
    47ea:	704b      	strb	r3, [r1, #1]
	
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    47ec:	4b0c      	ldr	r3, [pc, #48]	; (4820 <LORAREG_GetAttr_ChIdStatus+0x44>)
    47ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    47f0:	2015      	movs	r0, #21
    47f2:	4798      	blx	r3
    47f4:	2808      	cmp	r0, #8
    47f6:	d004      	beq.n	4802 <LORAREG_GetAttr_ChIdStatus+0x26>
	{
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
	}
	else
	{
		*(uint8_t *)attrOutput = DISABLED;
    47f8:	2300      	movs	r3, #0
    47fa:	702b      	strb	r3, [r5, #0]
		result = LORAWAN_INVALID_PARAMETER;
    47fc:	200a      	movs	r0, #10
	}
	return result;
}
    47fe:	b003      	add	sp, #12
    4800:	bd30      	pop	{r4, r5, pc}
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
    4802:	4908      	ldr	r1, [pc, #32]	; (4824 <LORAREG_GetAttr_ChIdStatus+0x48>)
    4804:	790a      	ldrb	r2, [r1, #4]
    4806:	794b      	ldrb	r3, [r1, #5]
    4808:	021b      	lsls	r3, r3, #8
    480a:	4313      	orrs	r3, r2
    480c:	798a      	ldrb	r2, [r1, #6]
    480e:	0412      	lsls	r2, r2, #16
    4810:	4313      	orrs	r3, r2
    4812:	79ca      	ldrb	r2, [r1, #7]
    4814:	0612      	lsls	r2, r2, #24
    4816:	431a      	orrs	r2, r3
    4818:	0064      	lsls	r4, r4, #1
    481a:	5ca3      	ldrb	r3, [r4, r2]
    481c:	702b      	strb	r3, [r5, #0]
    481e:	e7ee      	b.n	47fe <LORAREG_GetAttr_ChIdStatus+0x22>
    4820:	20000ce0 	.word	0x20000ce0
    4824:	20001328 	.word	0x20001328

00004828 <LORAREG_GetAttr_DutyCycleT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_DutyCycleT1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = UINT16_MAX;
    4828:	2301      	movs	r3, #1
    482a:	425b      	negs	r3, r3
    482c:	8013      	strh	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    482e:	200a      	movs	r0, #10
    4830:	4770      	bx	lr

00004832 <LORAREG_GetAttr_MinDutyCycleTimer>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_MinDutyCycleTimer(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = UINT32_MAX;
    4832:	2301      	movs	r3, #1
    4834:	425b      	negs	r3, r3
    4836:	6013      	str	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    4838:	200a      	movs	r0, #10
    483a:	4770      	bx	lr

0000483c <LORAREG_GetAttr_MacRecvDelay1>:
#endif

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY1;
    483c:	23fa      	movs	r3, #250	; 0xfa
    483e:	009b      	lsls	r3, r3, #2
    4840:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4842:	2008      	movs	r0, #8
    4844:	4770      	bx	lr

00004846 <LORAREG_GetAttr_MacRecvDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY2;
    4846:	23fa      	movs	r3, #250	; 0xfa
    4848:	00db      	lsls	r3, r3, #3
    484a:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    484c:	2008      	movs	r0, #8
    484e:	4770      	bx	lr

00004850 <LORAREG_GetAttr_MacJoinAcptDelay1>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY1;
    4850:	4b01      	ldr	r3, [pc, #4]	; (4858 <LORAREG_GetAttr_MacJoinAcptDelay1+0x8>)
    4852:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4854:	2008      	movs	r0, #8
    4856:	4770      	bx	lr
    4858:	00001388 	.word	0x00001388

0000485c <LORAREG_GetAttr_MacJoinAcptDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY2;
    485c:	4b01      	ldr	r3, [pc, #4]	; (4864 <LORAREG_GetAttr_MacJoinAcptDelay2+0x8>)
    485e:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4860:	2008      	movs	r0, #8
    4862:	4770      	bx	lr
    4864:	00001770 	.word	0x00001770

00004868 <LORAREG_GetAttr_MacAckTimeout>:

static StackRetStatus_t LORAREG_GetAttr_MacAckTimeout(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = ACK_TIMEOUT;
    4868:	23fa      	movs	r3, #250	; 0xfa
    486a:	00db      	lsls	r3, r3, #3
    486c:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    486e:	2008      	movs	r0, #8
    4870:	4770      	bx	lr

00004872 <LORAREG_GetAttr_MacAdrAckDelay>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckDelay(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_DELAY;
    4872:	2320      	movs	r3, #32
    4874:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4876:	2008      	movs	r0, #8
    4878:	4770      	bx	lr

0000487a <LORAREG_GetAttr_MacAdrAckLimit>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckLimit(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_LIMIT;
    487a:	2340      	movs	r3, #64	; 0x40
    487c:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    487e:	2008      	movs	r0, #8
    4880:	4770      	bx	lr

00004882 <LORAREG_GetAttr_MacMaxFcntGap>:

static StackRetStatus_t LORAREG_GetAttr_MacMaxFcntGap(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = MAX_FCNT_GAP;
    4882:	2380      	movs	r3, #128	; 0x80
    4884:	01db      	lsls	r3, r3, #7
    4886:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4888:	2008      	movs	r0, #8
    488a:	4770      	bx	lr

0000488c <LORAREG_GetAttr_RegDefTxPwr>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxPwr(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.MacTxPower;
    488c:	2327      	movs	r3, #39	; 0x27
    488e:	4902      	ldr	r1, [pc, #8]	; (4898 <LORAREG_GetAttr_RegDefTxPwr+0xc>)
    4890:	5ccb      	ldrb	r3, [r1, r3]
    4892:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    4894:	2008      	movs	r0, #8
    4896:	4770      	bx	lr
    4898:	20001328 	.word	0x20001328

0000489c <LORAREG_GetAttr_RegDefTxDR>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxDR(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.TxCurDataRate;
    489c:	2326      	movs	r3, #38	; 0x26
    489e:	4902      	ldr	r1, [pc, #8]	; (48a8 <LORAREG_GetAttr_RegDefTxDR+0xc>)
    48a0:	5ccb      	ldrb	r3, [r1, r3]
    48a2:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    48a4:	2008      	movs	r0, #8
    48a6:	4770      	bx	lr
    48a8:	20001328 	.word	0x20001328

000048ac <LORAREG_GetAttr_CurChIndx>:

static StackRetStatus_t LORAREG_GetAttr_CurChIndx(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.lastUsedChannelIndex;
    48ac:	232f      	movs	r3, #47	; 0x2f
    48ae:	4902      	ldr	r1, [pc, #8]	; (48b8 <LORAREG_GetAttr_CurChIndx+0xc>)
    48b0:	5ccb      	ldrb	r3, [r1, r3]
    48b2:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    48b4:	2008      	movs	r0, #8
    48b6:	4770      	bx	lr
    48b8:	20001328 	.word	0x20001328

000048bc <LORAREG_GetAttr_DefLBTParams>:
static StackRetStatus_t LORAREG_GetAttr_DefLBTParams(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	LorawanLBTParams_t* lorawanLBTParams;
	lorawanLBTParams = (LorawanLBTParams_t *)attrOutput;
			
	lorawanLBTParams->lbtNumOfSamples	= RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount;
    48bc:	4b09      	ldr	r3, [pc, #36]	; (48e4 <LORAREG_GetAttr_DefLBTParams+0x28>)
    48be:	21c0      	movs	r1, #192	; 0xc0
    48c0:	31ff      	adds	r1, #255	; 0xff
    48c2:	5c59      	ldrb	r1, [r3, r1]
    48c4:	7191      	strb	r1, [r2, #6]
	lorawanLBTParams->lbtScanPeriod		= RegParams.cmnParams.paramsType2.LBTScanPeriod;
    48c6:	21be      	movs	r1, #190	; 0xbe
    48c8:	31ff      	adds	r1, #255	; 0xff
    48ca:	5c59      	ldrb	r1, [r3, r1]
    48cc:	8011      	strh	r1, [r2, #0]
	lorawanLBTParams->lbtThreshold		= RegParams.cmnParams.paramsType2.LBTSignalThreshold;
    48ce:	21df      	movs	r1, #223	; 0xdf
    48d0:	0049      	lsls	r1, r1, #1
    48d2:	565b      	ldrsb	r3, [r3, r1]
    48d4:	8053      	strh	r3, [r2, #2]
	lorawanLBTParams->lbtTransmitOn		= LBT_ENABLE;
    48d6:	2301      	movs	r3, #1
    48d8:	71d3      	strb	r3, [r2, #7]
	lorawanLBTParams->maxRetryChannels	= LBT_MAX_RETRY_CHANNELS;
    48da:	3304      	adds	r3, #4
    48dc:	8093      	strh	r3, [r2, #4]
	return 0;
}
    48de:	2000      	movs	r0, #0
    48e0:	4770      	bx	lr
    48e2:	46c0      	nop			; (mov r8, r8)
    48e4:	20001328 	.word	0x20001328

000048e8 <LORAREG_GetAttr_FreqT1>:
{
    48e8:	b530      	push	{r4, r5, lr}
	channelId = *(uint8_t *)attrInput;
    48ea:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    48ec:	212a      	movs	r1, #42	; 0x2a
    48ee:	4820      	ldr	r0, [pc, #128]	; (4970 <LORAREG_GetAttr_FreqT1+0x88>)
    48f0:	5641      	ldrsb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    48f2:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    48f4:	428b      	cmp	r3, r1
    48f6:	dc39      	bgt.n	496c <LORAREG_GetAttr_FreqT1+0x84>
	if (channelId < RegParams.cmnParams.paramsType1.Max_125khzChan)
    48f8:	2054      	movs	r0, #84	; 0x54
    48fa:	30ff      	adds	r0, #255	; 0xff
    48fc:	4c1c      	ldr	r4, [pc, #112]	; (4970 <LORAREG_GetAttr_FreqT1+0x88>)
    48fe:	5c24      	ldrb	r4, [r4, r0]
    4900:	42a3      	cmp	r3, r4
    4902:	d31c      	bcc.n	493e <LORAREG_GetAttr_FreqT1+0x56>
		result = LORAWAN_INVALID_PARAMETER;
    4904:	200a      	movs	r0, #10
	else if ( (channelId < RegParams.maxChannels) && (channelId >= RegParams.cmnParams.paramsType1.Max_125khzChan) )
    4906:	428b      	cmp	r3, r1
    4908:	da30      	bge.n	496c <LORAREG_GetAttr_FreqT1+0x84>
static uint32_t GenerateFrequency2 (uint8_t channelIndex)
{
    uint32_t channelFrequency;

    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    490a:	1b1b      	subs	r3, r3, r4
    490c:	4919      	ldr	r1, [pc, #100]	; (4974 <LORAREG_GetAttr_FreqT1+0x8c>)
    490e:	434b      	muls	r3, r1
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    4910:	4c17      	ldr	r4, [pc, #92]	; (4970 <LORAREG_GetAttr_FreqT1+0x88>)
    4912:	2148      	movs	r1, #72	; 0x48
    4914:	31ff      	adds	r1, #255	; 0xff
    4916:	5c61      	ldrb	r1, [r4, r1]
    4918:	303f      	adds	r0, #63	; 0x3f
    491a:	30ff      	adds	r0, #255	; 0xff
    491c:	5c20      	ldrb	r0, [r4, r0]
    491e:	0200      	lsls	r0, r0, #8
    4920:	4301      	orrs	r1, r0
    4922:	204a      	movs	r0, #74	; 0x4a
    4924:	30ff      	adds	r0, #255	; 0xff
    4926:	5c20      	ldrb	r0, [r4, r0]
    4928:	0400      	lsls	r0, r0, #16
    492a:	4308      	orrs	r0, r1
    492c:	21a5      	movs	r1, #165	; 0xa5
    492e:	0049      	lsls	r1, r1, #1
    4930:	5c61      	ldrb	r1, [r4, r1]
    4932:	0609      	lsls	r1, r1, #24
    4934:	4301      	orrs	r1, r0
    4936:	1859      	adds	r1, r3, r1
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    4938:	6011      	str	r1, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    493a:	2008      	movs	r0, #8
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    493c:	e016      	b.n	496c <LORAREG_GetAttr_FreqT1+0x84>
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    493e:	4c0c      	ldr	r4, [pc, #48]	; (4970 <LORAREG_GetAttr_FreqT1+0x88>)
    4940:	2144      	movs	r1, #68	; 0x44
    4942:	31ff      	adds	r1, #255	; 0xff
    4944:	5c61      	ldrb	r1, [r4, r1]
    4946:	380f      	subs	r0, #15
    4948:	5c20      	ldrb	r0, [r4, r0]
    494a:	0200      	lsls	r0, r0, #8
    494c:	4308      	orrs	r0, r1
    494e:	2146      	movs	r1, #70	; 0x46
    4950:	31ff      	adds	r1, #255	; 0xff
    4952:	5c61      	ldrb	r1, [r4, r1]
    4954:	0409      	lsls	r1, r1, #16
    4956:	4308      	orrs	r0, r1
    4958:	21a3      	movs	r1, #163	; 0xa3
    495a:	0049      	lsls	r1, r1, #1
    495c:	5c61      	ldrb	r1, [r4, r1]
    495e:	0609      	lsls	r1, r1, #24
    4960:	4301      	orrs	r1, r0
    4962:	4805      	ldr	r0, [pc, #20]	; (4978 <LORAREG_GetAttr_FreqT1+0x90>)
    4964:	4343      	muls	r3, r0
    4966:	18cb      	adds	r3, r1, r3
		*(uint32_t *)attrOutput = GenerateFrequency1 (channelId);
    4968:	6013      	str	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    496a:	2008      	movs	r0, #8
}
    496c:	bd30      	pop	{r4, r5, pc}
    496e:	46c0      	nop			; (mov r8, r8)
    4970:	20001328 	.word	0x20001328
    4974:	00186a00 	.word	0x00186a00
    4978:	00030d40 	.word	0x00030d40

0000497c <ValidateDataRateTxT1>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    497c:	780a      	ldrb	r2, [r1, #0]
    497e:	23a8      	movs	r3, #168	; 0xa8
    4980:	005b      	lsls	r3, r3, #1
    4982:	4903      	ldr	r1, [pc, #12]	; (4990 <ValidateDataRateTxT1+0x14>)
    4984:	5ccb      	ldrb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4986:	2008      	movs	r0, #8
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    4988:	429a      	cmp	r2, r3
    498a:	d900      	bls.n	498e <ValidateDataRateTxT1+0x12>
	{
		result = LORAWAN_INVALID_PARAMETER;
    498c:	3002      	adds	r0, #2
	}
	
	return result;
}
    498e:	4770      	bx	lr
    4990:	20001328 	.word	0x20001328

00004994 <ValidateDataRateTxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateTxT2(LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    4994:	780b      	ldrb	r3, [r1, #0]
	
	if(dataRate > RegParams.minDataRate ||
    4996:	2224      	movs	r2, #36	; 0x24
    4998:	4908      	ldr	r1, [pc, #32]	; (49bc <ValidateDataRateTxT2+0x28>)
    499a:	5c8a      	ldrb	r2, [r1, r2]
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    499c:	200a      	movs	r0, #10
	if(dataRate > RegParams.minDataRate ||
    499e:	429a      	cmp	r2, r3
    49a0:	d30a      	bcc.n	49b8 <ValidateDataRateTxT2+0x24>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    49a2:	22e1      	movs	r2, #225	; 0xe1
    49a4:	0052      	lsls	r2, r2, #1
    49a6:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    49a8:	3802      	subs	r0, #2
	if(dataRate > RegParams.minDataRate ||
    49aa:	07d2      	lsls	r2, r2, #31
    49ac:	d504      	bpl.n	49b8 <ValidateDataRateTxT2+0x24>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    49ae:	2222      	movs	r2, #34	; 0x22
    49b0:	5c8a      	ldrb	r2, [r1, r2]
    49b2:	429a      	cmp	r2, r3
    49b4:	d900      	bls.n	49b8 <ValidateDataRateTxT2+0x24>
		result = LORAWAN_INVALID_PARAMETER;
    49b6:	3002      	adds	r0, #2
	}
	
	return result;
}
    49b8:	4770      	bx	lr
    49ba:	46c0      	nop			; (mov r8, r8)
    49bc:	20001328 	.word	0x20001328

000049c0 <ValidateDataRateRxT1>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    49c0:	780b      	ldrb	r3, [r1, #0]

	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    49c2:	22a9      	movs	r2, #169	; 0xa9
    49c4:	0052      	lsls	r2, r2, #1
    49c6:	4906      	ldr	r1, [pc, #24]	; (49e0 <ValidateDataRateRxT1+0x20>)
    49c8:	5c8a      	ldrb	r2, [r1, r2]
	{
		result = LORAWAN_INVALID_PARAMETER;
    49ca:	200a      	movs	r0, #10
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    49cc:	429a      	cmp	r2, r3
    49ce:	d306      	bcc.n	49de <ValidateDataRateRxT1+0x1e>
    49d0:	2252      	movs	r2, #82	; 0x52
    49d2:	32ff      	adds	r2, #255	; 0xff
    49d4:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    49d6:	3802      	subs	r0, #2
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    49d8:	429a      	cmp	r2, r3
    49da:	d900      	bls.n	49de <ValidateDataRateRxT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    49dc:	3002      	adds	r0, #2
	}
	return result;
}
    49de:	4770      	bx	lr
    49e0:	20001328 	.word	0x20001328

000049e4 <ValidateDataRateRxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    49e4:	780b      	ldrb	r3, [r1, #0]

    if(dataRate > RegParams.minDataRate || (
    49e6:	2224      	movs	r2, #36	; 0x24
    49e8:	4908      	ldr	r1, [pc, #32]	; (4a0c <ValidateDataRateRxT2+0x28>)
    49ea:	5c8a      	ldrb	r2, [r1, r2]
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    49ec:	200a      	movs	r0, #10
    if(dataRate > RegParams.minDataRate || (
    49ee:	429a      	cmp	r2, r3
    49f0:	d30a      	bcc.n	4a08 <ValidateDataRateRxT2+0x24>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    49f2:	22e1      	movs	r2, #225	; 0xe1
    49f4:	0052      	lsls	r2, r2, #1
    49f6:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    49f8:	3802      	subs	r0, #2
    if(dataRate > RegParams.minDataRate || (
    49fa:	0792      	lsls	r2, r2, #30
    49fc:	d504      	bpl.n	4a08 <ValidateDataRateRxT2+0x24>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    49fe:	2222      	movs	r2, #34	; 0x22
    4a00:	5c8a      	ldrb	r2, [r1, r2]
    4a02:	429a      	cmp	r2, r3
    4a04:	d900      	bls.n	4a08 <ValidateDataRateRxT2+0x24>
		result = LORAWAN_INVALID_PARAMETER;
    4a06:	3002      	adds	r0, #2
	}

	return result;
}
    4a08:	4770      	bx	lr
    4a0a:	46c0      	nop			; (mov r8, r8)
    4a0c:	20001328 	.word	0x20001328

00004a10 <ValidateChannelId>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
    uint8_t channelId = *(uint8_t *)attrInput;
	
    if (channelId >= RegParams.maxChannels)
    4a10:	780a      	ldrb	r2, [r1, #0]
    4a12:	232a      	movs	r3, #42	; 0x2a
    4a14:	4903      	ldr	r1, [pc, #12]	; (4a24 <ValidateChannelId+0x14>)
    4a16:	56cb      	ldrsb	r3, [r1, r3]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    4a18:	2008      	movs	r0, #8
    if (channelId >= RegParams.maxChannels)
    4a1a:	429a      	cmp	r2, r3
    4a1c:	db00      	blt.n	4a20 <ValidateChannelId+0x10>
    {
        result = LORAWAN_INVALID_PARAMETER ;
    4a1e:	3002      	adds	r0, #2
    }
	
    return result;
}
    4a20:	4770      	bx	lr
    4a22:	46c0      	nop			; (mov r8, r8)
    4a24:	20001328 	.word	0x20001328

00004a28 <ValidateChannelIdT2>:
static StackRetStatus_t ValidateChannelIdT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	
	memcpy(&val_chid,attrInput,sizeof(ValChId_t));
    4a28:	780b      	ldrb	r3, [r1, #0]
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    4a2a:	222a      	movs	r2, #42	; 0x2a
    4a2c:	4808      	ldr	r0, [pc, #32]	; (4a50 <ValidateChannelIdT2+0x28>)
    4a2e:	5682      	ldrsb	r2, [r0, r2]
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
	 {
		 retVal = LORAWAN_INVALID_PARAMETER;
    4a30:	200a      	movs	r0, #10
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    4a32:	4293      	cmp	r3, r2
    4a34:	da0a      	bge.n	4a4c <ValidateChannelIdT2+0x24>
    4a36:	784a      	ldrb	r2, [r1, #1]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    4a38:	3802      	subs	r0, #2
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    4a3a:	2a00      	cmp	r2, #0
    4a3c:	d106      	bne.n	4a4c <ValidateChannelIdT2+0x24>
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
    4a3e:	32c1      	adds	r2, #193	; 0xc1
    4a40:	32ff      	adds	r2, #255	; 0xff
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    4a42:	4903      	ldr	r1, [pc, #12]	; (4a50 <ValidateChannelIdT2+0x28>)
    4a44:	5c8a      	ldrb	r2, [r1, r2]
    4a46:	429a      	cmp	r2, r3
    4a48:	d900      	bls.n	4a4c <ValidateChannelIdT2+0x24>
		 retVal = LORAWAN_INVALID_PARAMETER;
    4a4a:	3002      	adds	r0, #2
	 }
	 return retVal;
}
    4a4c:	4770      	bx	lr
    4a4e:	46c0      	nop			; (mov r8, r8)
    4a50:	20001328 	.word	0x20001328

00004a54 <LORAREG_GetAttr_DutyCycleT2>:
{
    4a54:	b530      	push	{r4, r5, lr}
    4a56:	b083      	sub	sp, #12
    4a58:	0014      	movs	r4, r2
	valChid.channelIndex = *(uint8_t *)attrInput;
    4a5a:	780d      	ldrb	r5, [r1, #0]
    4a5c:	a901      	add	r1, sp, #4
    4a5e:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    4a60:	2301      	movs	r3, #1
    4a62:	704b      	strb	r3, [r1, #1]
    if (ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    4a64:	2015      	movs	r0, #21
    4a66:	4b0b      	ldr	r3, [pc, #44]	; (4a94 <LORAREG_GetAttr_DutyCycleT2+0x40>)
    4a68:	4798      	blx	r3
    4a6a:	2808      	cmp	r0, #8
    4a6c:	d002      	beq.n	4a74 <LORAREG_GetAttr_DutyCycleT2+0x20>
	    result = LORAWAN_INVALID_PARAMETER;
    4a6e:	200a      	movs	r0, #10
}
    4a70:	b003      	add	sp, #12
    4a72:	bd30      	pop	{r4, r5, pc}
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    4a74:	4a08      	ldr	r2, [pc, #32]	; (4a98 <LORAREG_GetAttr_DutyCycleT2+0x44>)
	    subBandId = RegParams.cmnParams.paramsType2.othChParams[channelId].subBandId;
    4a76:	006b      	lsls	r3, r5, #1
    4a78:	195b      	adds	r3, r3, r5
    4a7a:	009b      	lsls	r3, r3, #2
    4a7c:	18d3      	adds	r3, r2, r3
    4a7e:	33ab      	adds	r3, #171	; 0xab
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    4a80:	781b      	ldrb	r3, [r3, #0]
    4a82:	33d4      	adds	r3, #212	; 0xd4
    4a84:	005b      	lsls	r3, r3, #1
    4a86:	18d2      	adds	r2, r2, r3
    4a88:	7951      	ldrb	r1, [r2, #5]
    4a8a:	7993      	ldrb	r3, [r2, #6]
    4a8c:	021b      	lsls	r3, r3, #8
    4a8e:	430b      	orrs	r3, r1
    4a90:	8023      	strh	r3, [r4, #0]
    4a92:	e7ed      	b.n	4a70 <LORAREG_GetAttr_DutyCycleT2+0x1c>
    4a94:	00004a29 	.word	0x00004a29
    4a98:	20001328 	.word	0x20001328

00004a9c <LORAREG_GetAttr_MinMaxDr>:
{
    4a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a9e:	4694      	mov	ip, r2
{
	uint8_t i;
	
	// after updating the data range of a channel we need to check if the minimum dataRange has changed or not.
	// The user cannot set the current data rate outside the range of the data range
	uint8_t minDataRate = RegParams.minDataRate;
    4aa0:	4b1b      	ldr	r3, [pc, #108]	; (4b10 <LORAREG_GetAttr_MinMaxDr+0x74>)
    4aa2:	2124      	movs	r1, #36	; 0x24
    4aa4:	5c5c      	ldrb	r4, [r3, r1]
	uint8_t maxDataRate = RegParams.maxDataRate;
    4aa6:	3101      	adds	r1, #1
    4aa8:	5c5f      	ldrb	r7, [r3, r1]

	for (i = 0; i < RegParams.maxChannels; i++)
    4aaa:	3105      	adds	r1, #5
    4aac:	565e      	ldrsb	r6, [r3, r1]
    4aae:	2e00      	cmp	r6, #0
    4ab0:	dd28      	ble.n	4b04 <LORAREG_GetAttr_MinMaxDr+0x68>
	{
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    4ab2:	0019      	movs	r1, r3
    4ab4:	791d      	ldrb	r5, [r3, #4]
    4ab6:	795b      	ldrb	r3, [r3, #5]
    4ab8:	021b      	lsls	r3, r3, #8
    4aba:	432b      	orrs	r3, r5
    4abc:	798d      	ldrb	r5, [r1, #6]
    4abe:	042d      	lsls	r5, r5, #16
    4ac0:	432b      	orrs	r3, r5
    4ac2:	79cd      	ldrb	r5, [r1, #7]
    4ac4:	062d      	lsls	r5, r5, #24
    4ac6:	431d      	orrs	r5, r3
    4ac8:	2100      	movs	r1, #0
    4aca:	e00b      	b.n	4ae4 <LORAREG_GetAttr_MinMaxDr+0x48>
		{
			minDataRate = RegParams.pChParams[i].dataRange.min;
		}
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    4acc:	7843      	ldrb	r3, [r0, #1]
    4ace:	091b      	lsrs	r3, r3, #4
    4ad0:	42bb      	cmp	r3, r7
    4ad2:	dd03      	ble.n	4adc <LORAREG_GetAttr_MinMaxDr+0x40>
    4ad4:	7800      	ldrb	r0, [r0, #0]
    4ad6:	2800      	cmp	r0, #0
    4ad8:	d000      	beq.n	4adc <LORAREG_GetAttr_MinMaxDr+0x40>
		{
			maxDataRate = RegParams.pChParams[i].dataRange.max;
    4ada:	001f      	movs	r7, r3
	for (i = 0; i < RegParams.maxChannels; i++)
    4adc:	3101      	adds	r1, #1
    4ade:	b2c9      	uxtb	r1, r1
    4ae0:	42b1      	cmp	r1, r6
    4ae2:	da0f      	bge.n	4b04 <LORAREG_GetAttr_MinMaxDr+0x68>
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    4ae4:	0048      	lsls	r0, r1, #1
    4ae6:	1828      	adds	r0, r5, r0
    4ae8:	7843      	ldrb	r3, [r0, #1]
    4aea:	071b      	lsls	r3, r3, #28
    4aec:	0f1b      	lsrs	r3, r3, #28
    4aee:	42a3      	cmp	r3, r4
    4af0:	daec      	bge.n	4acc <LORAREG_GetAttr_MinMaxDr+0x30>
    4af2:	7802      	ldrb	r2, [r0, #0]
    4af4:	2a00      	cmp	r2, #0
    4af6:	d0f1      	beq.n	4adc <LORAREG_GetAttr_MinMaxDr+0x40>
			minDataRate = RegParams.pChParams[i].dataRange.min;
    4af8:	001c      	movs	r4, r3
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    4afa:	7843      	ldrb	r3, [r0, #1]
    4afc:	091b      	lsrs	r3, r3, #4
    4afe:	42bb      	cmp	r3, r7
    4b00:	dceb      	bgt.n	4ada <LORAREG_GetAttr_MinMaxDr+0x3e>
    4b02:	e7eb      	b.n	4adc <LORAREG_GetAttr_MinMaxDr+0x40>
	memcpy(attrOutput,&minmaxDr,sizeof(MinMaxDr_t));
    4b04:	4663      	mov	r3, ip
    4b06:	701c      	strb	r4, [r3, #0]
    4b08:	705f      	strb	r7, [r3, #1]
}
    4b0a:	2008      	movs	r0, #8
    4b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b0e:	46c0      	nop			; (mov r8, r8)
    4b10:	20001328 	.word	0x20001328

00004b14 <ValidateChannelMaskCntl>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntl (LorawanRegionalAttributes_t attr, void *attrInput)
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t channelMaskCntl = *(uint8_t *)attrInput;
    4b14:	780b      	ldrb	r3, [r1, #0]

    // 5 is RFU for channel mask for US
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    4b16:	2b05      	cmp	r3, #5
    4b18:	d004      	beq.n	4b24 <ValidateChannelMaskCntl+0x10>
    StackRetStatus_t result = LORAWAN_SUCCESS;
    4b1a:	2008      	movs	r0, #8
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    4b1c:	2b07      	cmp	r3, #7
    4b1e:	d900      	bls.n	4b22 <ValidateChannelMaskCntl+0xe>
    {
        result = LORAWAN_INVALID_PARAMETER;
    4b20:	3002      	adds	r0, #2
    }

    return result;
}
    4b22:	4770      	bx	lr
        result = LORAWAN_INVALID_PARAMETER;
    4b24:	200a      	movs	r0, #10
    4b26:	e7fc      	b.n	4b22 <ValidateChannelMaskCntl+0xe>

00004b28 <ValidateTxPower>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t txPowerNew = *(uint8_t *)attrInput;
	
	//if ((txPowerNew < 5) || (txPowerNew > 10) || (txPowerNew == 6))
	if (txPowerNew > RegParams.maxTxPwrIndx)
    4b28:	780a      	ldrb	r2, [r1, #0]
    4b2a:	232d      	movs	r3, #45	; 0x2d
    4b2c:	4903      	ldr	r1, [pc, #12]	; (4b3c <ValidateTxPower+0x14>)
    4b2e:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4b30:	2008      	movs	r0, #8
	if (txPowerNew > RegParams.maxTxPwrIndx)
    4b32:	429a      	cmp	r2, r3
    4b34:	dd00      	ble.n	4b38 <ValidateTxPower+0x10>
	{
		result = LORAWAN_INVALID_PARAMETER;
    4b36:	3002      	adds	r0, #2
	}

	return result;
}
    4b38:	4770      	bx	lr
    4b3a:	46c0      	nop			; (mov r8, r8)
    4b3c:	20001328 	.word	0x20001328

00004b40 <ValidateChannelMask>:
 */
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMask (LorawanRegionalAttributes_t attr, void *attrInput)
{
	return LORAWAN_SUCCESS;	
}
    4b40:	2008      	movs	r0, #8
    4b42:	4770      	bx	lr

00004b44 <ValidateChannelMaskT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    4b44:	b530      	push	{r4, r5, lr}
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	
	uint16_t channelMask = * (uint16_t *)attrInput;
    4b46:	8809      	ldrh	r1, [r1, #0]
	
	if(channelMask != 0x0000U)
    4b48:	2900      	cmp	r1, #0
    4b4a:	d020      	beq.n	4b8e <ValidateChannelMaskT2+0x4a>
	{
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    4b4c:	232a      	movs	r3, #42	; 0x2a
    4b4e:	4a11      	ldr	r2, [pc, #68]	; (4b94 <ValidateChannelMaskT2+0x50>)
    4b50:	56d0      	ldrsb	r0, [r2, r3]
    4b52:	2800      	cmp	r0, #0
    4b54:	dd1b      	ble.n	4b8e <ValidateChannelMaskT2+0x4a>
		{
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    4b56:	7a14      	ldrb	r4, [r2, #8]
    4b58:	7a53      	ldrb	r3, [r2, #9]
    4b5a:	021b      	lsls	r3, r3, #8
    4b5c:	4323      	orrs	r3, r4
    4b5e:	7a94      	ldrb	r4, [r2, #10]
    4b60:	0424      	lsls	r4, r4, #16
    4b62:	4323      	orrs	r3, r4
    4b64:	7ad4      	ldrb	r4, [r2, #11]
    4b66:	0624      	lsls	r4, r4, #24
    4b68:	431c      	orrs	r4, r3
    4b6a:	2300      	movs	r3, #0
    4b6c:	2503      	movs	r5, #3
    4b6e:	e004      	b.n	4b7a <ValidateChannelMaskT2+0x36>
				retVal = LORAWAN_INVALID_PARAMETER;
				break;
			}
			else
			{
				channelMask = channelMask >> SHIFT1;
    4b70:	0849      	lsrs	r1, r1, #1
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    4b72:	3301      	adds	r3, #1
    4b74:	b2db      	uxtb	r3, r3
    4b76:	4283      	cmp	r3, r0
    4b78:	da09      	bge.n	4b8e <ValidateChannelMaskT2+0x4a>
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    4b7a:	2900      	cmp	r1, #0
    4b7c:	d0f8      	beq.n	4b70 <ValidateChannelMaskT2+0x2c>
    4b7e:	005a      	lsls	r2, r3, #1
    4b80:	18d2      	adds	r2, r2, r3
    4b82:	0092      	lsls	r2, r2, #2
    4b84:	18a2      	adds	r2, r4, r2
    4b86:	7ad2      	ldrb	r2, [r2, #11]
    4b88:	402a      	ands	r2, r5
    4b8a:	2a03      	cmp	r2, #3
    4b8c:	d0f0      	beq.n	4b70 <ValidateChannelMaskT2+0x2c>
		////ChMask can be set to 0 if ChMaskCtrl is set to 6
		return retVal = LORAWAN_SUCCESS;
	}
	
	return retVal;
}
    4b8e:	2008      	movs	r0, #8
    4b90:	bd30      	pop	{r4, r5, pc}
    4b92:	46c0      	nop			; (mov r8, r8)
    4b94:	20001328 	.word	0x20001328

00004b98 <ValidateChannelMaskCntlT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntlT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	uint8_t channelMaskCntl = * (uint16_t *)attrInput;
    4b98:	780b      	ldrb	r3, [r1, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4b9a:	2008      	movs	r0, #8
	
    if ( (channelMaskCntl != 0) && (channelMaskCntl != 6) )
    4b9c:	2b00      	cmp	r3, #0
    4b9e:	d002      	beq.n	4ba6 <ValidateChannelMaskCntlT2+0xe>
    4ba0:	2b06      	cmp	r3, #6
    4ba2:	d001      	beq.n	4ba8 <ValidateChannelMaskCntlT2+0x10>
    {
	    result = LORAWAN_INVALID_PARAMETER;
    4ba4:	3002      	adds	r0, #2
    }
	return result;
}
    4ba6:	4770      	bx	lr
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4ba8:	2008      	movs	r0, #8
    4baa:	e7fc      	b.n	4ba6 <ValidateChannelMaskCntlT2+0xe>

00004bac <ValidateChMaskChCntlT2>:
{
    4bac:	b510      	push	{r4, lr}
    4bae:	b082      	sub	sp, #8
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    4bb0:	ac01      	add	r4, sp, #4
    4bb2:	2204      	movs	r2, #4
    4bb4:	0020      	movs	r0, r4
    4bb6:	4b0f      	ldr	r3, [pc, #60]	; (4bf4 <ValidateChMaskChCntlT2+0x48>)
    4bb8:	4798      	blx	r3
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    4bba:	8863      	ldrh	r3, [r4, #2]
    4bbc:	2b00      	cmp	r3, #0
    4bbe:	d104      	bne.n	4bca <ValidateChMaskChCntlT2+0x1e>
    4bc0:	ab01      	add	r3, sp, #4
    4bc2:	781a      	ldrb	r2, [r3, #0]
		return LORAWAN_INVALID_PARAMETER;
    4bc4:	230a      	movs	r3, #10
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    4bc6:	2a00      	cmp	r2, #0
    4bc8:	d007      	beq.n	4bda <ValidateChMaskChCntlT2+0x2e>
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    4bca:	466b      	mov	r3, sp
    4bcc:	1d99      	adds	r1, r3, #6
    4bce:	201a      	movs	r0, #26
    4bd0:	4b09      	ldr	r3, [pc, #36]	; (4bf8 <ValidateChMaskChCntlT2+0x4c>)
    4bd2:	4798      	blx	r3
			return LORAWAN_INVALID_PARAMETER;
    4bd4:	230a      	movs	r3, #10
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    4bd6:	2808      	cmp	r0, #8
    4bd8:	d002      	beq.n	4be0 <ValidateChMaskChCntlT2+0x34>
}
    4bda:	0018      	movs	r0, r3
    4bdc:	b002      	add	sp, #8
    4bde:	bd10      	pop	{r4, pc}
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    4be0:	a901      	add	r1, sp, #4
    4be2:	3013      	adds	r0, #19
    4be4:	4b05      	ldr	r3, [pc, #20]	; (4bfc <ValidateChMaskChCntlT2+0x50>)
    4be6:	4798      	blx	r3
    4be8:	0003      	movs	r3, r0
    4bea:	2808      	cmp	r0, #8
    4bec:	d0f5      	beq.n	4bda <ValidateChMaskChCntlT2+0x2e>
			return LORAWAN_INVALID_PARAMETER;
    4bee:	230a      	movs	r3, #10
    4bf0:	e7f3      	b.n	4bda <ValidateChMaskChCntlT2+0x2e>
    4bf2:	46c0      	nop			; (mov r8, r8)
    4bf4:	00013e5d 	.word	0x00013e5d
    4bf8:	00004b45 	.word	0x00004b45
    4bfc:	00004b99 	.word	0x00004b99

00004c00 <ValidateDataRate>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

    if ( dataRate > RegParams.minDataRate )
    4c00:	780a      	ldrb	r2, [r1, #0]
    4c02:	2324      	movs	r3, #36	; 0x24
    4c04:	4903      	ldr	r1, [pc, #12]	; (4c14 <ValidateDataRate+0x14>)
    4c06:	5ccb      	ldrb	r3, [r1, r3]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    4c08:	2008      	movs	r0, #8
    if ( dataRate > RegParams.minDataRate )
    4c0a:	429a      	cmp	r2, r3
    4c0c:	d900      	bls.n	4c10 <ValidateDataRate+0x10>
    {
        result = LORAWAN_INVALID_PARAMETER;
    4c0e:	3002      	adds	r0, #2
    }

    return result;
}
    4c10:	4770      	bx	lr
    4c12:	46c0      	nop			; (mov r8, r8)
    4c14:	20001328 	.word	0x20001328

00004c18 <ValidateSupportedDr>:
#endif

static StackRetStatus_t ValidateSupportedDr (LorawanRegionalAttributes_t attr, void *attrInput)
{
    4c18:	b570      	push	{r4, r5, r6, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
	uint8_t  dataRate;
	dataRate = *(uint8_t *)attrInput;
    4c1a:	780d      	ldrb	r5, [r1, #0]
	
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    4c1c:	232a      	movs	r3, #42	; 0x2a
    4c1e:	4a14      	ldr	r2, [pc, #80]	; (4c70 <ValidateSupportedDr+0x58>)
    4c20:	56d4      	ldrsb	r4, [r2, r3]
    4c22:	2c00      	cmp	r4, #0
    4c24:	dd22      	ble.n	4c6c <ValidateSupportedDr+0x54>
	{
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    4c26:	7910      	ldrb	r0, [r2, #4]
    4c28:	7953      	ldrb	r3, [r2, #5]
    4c2a:	021b      	lsls	r3, r3, #8
    4c2c:	4303      	orrs	r3, r0
    4c2e:	7990      	ldrb	r0, [r2, #6]
    4c30:	0400      	lsls	r0, r0, #16
    4c32:	4303      	orrs	r3, r0
    4c34:	79d0      	ldrb	r0, [r2, #7]
    4c36:	0600      	lsls	r0, r0, #24
    4c38:	4318      	orrs	r0, r3
    4c3a:	2300      	movs	r3, #0
    4c3c:	002e      	movs	r6, r5
    4c3e:	e003      	b.n	4c48 <ValidateSupportedDr+0x30>
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    4c40:	3301      	adds	r3, #1
    4c42:	b2db      	uxtb	r3, r3
    4c44:	42a3      	cmp	r3, r4
    4c46:	da0f      	bge.n	4c68 <ValidateSupportedDr+0x50>
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    4c48:	005a      	lsls	r2, r3, #1
    4c4a:	1882      	adds	r2, r0, r2
    4c4c:	7811      	ldrb	r1, [r2, #0]
    4c4e:	2900      	cmp	r1, #0
    4c50:	d0f6      	beq.n	4c40 <ValidateSupportedDr+0x28>
    4c52:	7851      	ldrb	r1, [r2, #1]
    4c54:	0709      	lsls	r1, r1, #28
    4c56:	0f09      	lsrs	r1, r1, #28
    4c58:	428d      	cmp	r5, r1
    4c5a:	dbf1      	blt.n	4c40 <ValidateSupportedDr+0x28>
		   dataRate <= RegParams.pChParams[i].dataRange.max)
    4c5c:	7852      	ldrb	r2, [r2, #1]
    4c5e:	0912      	lsrs	r2, r2, #4
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    4c60:	4296      	cmp	r6, r2
    4c62:	dced      	bgt.n	4c40 <ValidateSupportedDr+0x28>
		{
			result = LORAWAN_SUCCESS;
    4c64:	2008      	movs	r0, #8
    4c66:	e000      	b.n	4c6a <ValidateSupportedDr+0x52>
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    4c68:	200a      	movs	r0, #10
			break;
		}
	}
	return result;	
}
    4c6a:	bd70      	pop	{r4, r5, r6, pc}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    4c6c:	200a      	movs	r0, #10
    4c6e:	e7fc      	b.n	4c6a <ValidateSupportedDr+0x52>
    4c70:	20001328 	.word	0x20001328

00004c74 <ValidateRxFreqT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateRxFreqT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    4c74:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t FreqNew = *(uint32_t *)attrInput;
	
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    4c76:	6808      	ldr	r0, [r1, #0]
    4c78:	4b07      	ldr	r3, [pc, #28]	; (4c98 <ValidateRxFreqT1+0x24>)
    4c7a:	469c      	mov	ip, r3
    4c7c:	4460      	add	r0, ip
    4c7e:	4a07      	ldr	r2, [pc, #28]	; (4c9c <ValidateRxFreqT1+0x28>)
	{
		result = LORAWAN_INVALID_PARAMETER;
    4c80:	230a      	movs	r3, #10
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    4c82:	4290      	cmp	r0, r2
    4c84:	d806      	bhi.n	4c94 <ValidateRxFreqT1+0x20>
    4c86:	4906      	ldr	r1, [pc, #24]	; (4ca0 <ValidateRxFreqT1+0x2c>)
    4c88:	4b06      	ldr	r3, [pc, #24]	; (4ca4 <ValidateRxFreqT1+0x30>)
    4c8a:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4c8c:	2308      	movs	r3, #8
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    4c8e:	2900      	cmp	r1, #0
    4c90:	d000      	beq.n	4c94 <ValidateRxFreqT1+0x20>
		result = LORAWAN_INVALID_PARAMETER;
    4c92:	3302      	adds	r3, #2
	}
	return result;
}
    4c94:	0018      	movs	r0, r3
    4c96:	bd10      	pop	{r4, pc}
    4c98:	c8f78f60 	.word	0xc8f78f60
    4c9c:	00401640 	.word	0x00401640
    4ca0:	000927c0 	.word	0x000927c0
    4ca4:	00010f19 	.word	0x00010f19

00004ca8 <ValidateRx1DataRateOffset>:
{
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
	
	uint8_t rx1DrOffset = *(uint8_t *)attrInput;
	
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    4ca8:	780a      	ldrb	r2, [r1, #0]
    4caa:	232c      	movs	r3, #44	; 0x2c
    4cac:	4903      	ldr	r1, [pc, #12]	; (4cbc <ValidateRx1DataRateOffset+0x14>)
    4cae:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
    4cb0:	200a      	movs	r0, #10
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    4cb2:	429a      	cmp	r2, r3
    4cb4:	dc00      	bgt.n	4cb8 <ValidateRx1DataRateOffset+0x10>
	{
		retVal = LORAWAN_SUCCESS;
    4cb6:	3802      	subs	r0, #2
	}
	
	return retVal;
}
    4cb8:	4770      	bx	lr
    4cba:	46c0      	nop			; (mov r8, r8)
    4cbc:	20001328 	.word	0x20001328

00004cc0 <getSubBandId>:
}
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static uint8_t getSubBandId(uint32_t frequency)
{
    4cc0:	b530      	push	{r4, r5, lr}
    4cc2:	0004      	movs	r4, r0
	uint8_t subBandId = 0xFF;
#if (EU_BAND == 1)	|| (JPN_BAND == 1)
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    4cc4:	2329      	movs	r3, #41	; 0x29
    4cc6:	4a19      	ldr	r2, [pc, #100]	; (4d2c <getSubBandId+0x6c>)
    4cc8:	5cd5      	ldrb	r5, [r2, r3]
    4cca:	2d00      	cmp	r5, #0
    4ccc:	d02c      	beq.n	4d28 <getSubBandId+0x68>
	{
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    4cce:	0011      	movs	r1, r2
    4cd0:	7b13      	ldrb	r3, [r2, #12]
    4cd2:	7b52      	ldrb	r2, [r2, #13]
    4cd4:	0212      	lsls	r2, r2, #8
    4cd6:	431a      	orrs	r2, r3
    4cd8:	7b8b      	ldrb	r3, [r1, #14]
    4cda:	041b      	lsls	r3, r3, #16
    4cdc:	431a      	orrs	r2, r3
    4cde:	7bcb      	ldrb	r3, [r1, #15]
    4ce0:	061b      	lsls	r3, r3, #24
    4ce2:	4313      	orrs	r3, r2
    4ce4:	2000      	movs	r0, #0
    4ce6:	e004      	b.n	4cf2 <getSubBandId+0x32>
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    4ce8:	3001      	adds	r0, #1
    4cea:	b2c0      	uxtb	r0, r0
    4cec:	330c      	adds	r3, #12
    4cee:	42a8      	cmp	r0, r5
    4cf0:	d018      	beq.n	4d24 <getSubBandId+0x64>
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    4cf2:	781a      	ldrb	r2, [r3, #0]
    4cf4:	7859      	ldrb	r1, [r3, #1]
    4cf6:	0209      	lsls	r1, r1, #8
    4cf8:	4311      	orrs	r1, r2
    4cfa:	789a      	ldrb	r2, [r3, #2]
    4cfc:	0412      	lsls	r2, r2, #16
    4cfe:	4311      	orrs	r1, r2
    4d00:	78da      	ldrb	r2, [r3, #3]
    4d02:	0612      	lsls	r2, r2, #24
    4d04:	430a      	orrs	r2, r1
    4d06:	42a2      	cmp	r2, r4
    4d08:	d8ee      	bhi.n	4ce8 <getSubBandId+0x28>
    4d0a:	791a      	ldrb	r2, [r3, #4]
    4d0c:	7959      	ldrb	r1, [r3, #5]
    4d0e:	0209      	lsls	r1, r1, #8
    4d10:	4311      	orrs	r1, r2
    4d12:	799a      	ldrb	r2, [r3, #6]
    4d14:	0412      	lsls	r2, r2, #16
    4d16:	4311      	orrs	r1, r2
    4d18:	79da      	ldrb	r2, [r3, #7]
    4d1a:	0612      	lsls	r2, r2, #24
    4d1c:	430a      	orrs	r2, r1
    4d1e:	4294      	cmp	r4, r2
    4d20:	d8e2      	bhi.n	4ce8 <getSubBandId+0x28>
    4d22:	e000      	b.n	4d26 <getSubBandId+0x66>
	uint8_t subBandId = 0xFF;
    4d24:	20ff      	movs	r0, #255	; 0xff
#elif (AS_BAND == 1)
	// whole ASIA 923 spectrum is one band
	subBandId = 0;
#endif
	return subBandId;
}
    4d26:	bd30      	pop	{r4, r5, pc}
	uint8_t subBandId = 0xFF;
    4d28:	20ff      	movs	r0, #255	; 0xff
    4d2a:	e7fc      	b.n	4d26 <getSubBandId+0x66>
    4d2c:	20001328 	.word	0x20001328

00004d30 <ValidateFreq>:
{
    4d30:	b510      	push	{r4, lr}
    if(getSubBandId(frequencyNew) == 0xFF)
    4d32:	6808      	ldr	r0, [r1, #0]
    4d34:	4b04      	ldr	r3, [pc, #16]	; (4d48 <ValidateFreq+0x18>)
    4d36:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    4d38:	2308      	movs	r3, #8
    if(getSubBandId(frequencyNew) == 0xFF)
    4d3a:	28ff      	cmp	r0, #255	; 0xff
    4d3c:	d001      	beq.n	4d42 <ValidateFreq+0x12>
}
    4d3e:	0018      	movs	r0, r3
    4d40:	bd10      	pop	{r4, pc}
		retVal = LORAWAN_INVALID_PARAMETER;
    4d42:	3302      	adds	r3, #2
    4d44:	e7fb      	b.n	4d3e <ValidateFreq+0xe>
    4d46:	46c0      	nop			; (mov r8, r8)
    4d48:	00004cc1 	.word	0x00004cc1

00004d4c <ValidateFrequencyAS>:
 */
#if (AS_BAND == 1)
static StackRetStatus_t ValidateFrequencyAS (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t frequencyNew = * (uint32_t *)attrInput;
    4d4c:	680b      	ldr	r3, [r1, #0]

    /*Bands Supporting Freq 923-925MHz*/
    if(RegParams.band == ISM_BRN923 || RegParams.band == ISM_CMB923 || RegParams.band == ISM_INS923 || RegParams.band == ISM_LAOS923)
    4d4e:	222e      	movs	r2, #46	; 0x2e
    4d50:	4919      	ldr	r1, [pc, #100]	; (4db8 <ValidateFrequencyAS+0x6c>)
    4d52:	5c8a      	ldrb	r2, [r1, r2]
    4d54:	1f91      	subs	r1, r2, #6
    4d56:	2903      	cmp	r1, #3
    4d58:	d808      	bhi.n	4d6c <ValidateFrequencyAS+0x20>
	{
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    4d5a:	4a18      	ldr	r2, [pc, #96]	; (4dbc <ValidateFrequencyAS+0x70>)
    4d5c:	4694      	mov	ip, r2
    4d5e:	4463      	add	r3, ip
    4d60:	4a17      	ldr	r2, [pc, #92]	; (4dc0 <ValidateFrequencyAS+0x74>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4d62:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    4d64:	4293      	cmp	r3, r2
    4d66:	d900      	bls.n	4d6a <ValidateFrequencyAS+0x1e>
		{
			result = LORAWAN_INVALID_PARAMETER;
    4d68:	3002      	adds	r0, #2
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	return result;
}
    4d6a:	4770      	bx	lr
	else if(RegParams.band == ISM_NZ923)
    4d6c:	2a0a      	cmp	r2, #10
    4d6e:	d011      	beq.n	4d94 <ValidateFrequencyAS+0x48>
	else if(RegParams.band == ISM_SP923 || RegParams.band == ISM_THAI923 || RegParams.band == ISM_VTM923)
    4d70:	2a0b      	cmp	r2, #11
    4d72:	d018      	beq.n	4da6 <ValidateFrequencyAS+0x5a>
    4d74:	0011      	movs	r1, r2
    4d76:	390d      	subs	r1, #13
    4d78:	2901      	cmp	r1, #1
    4d7a:	d914      	bls.n	4da6 <ValidateFrequencyAS+0x5a>
		result = LORAWAN_INVALID_PARAMETER;
    4d7c:	200a      	movs	r0, #10
	else if(RegParams.band == ISM_TWN923)
    4d7e:	2a0c      	cmp	r2, #12
    4d80:	d1f3      	bne.n	4d6a <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    4d82:	4a10      	ldr	r2, [pc, #64]	; (4dc4 <ValidateFrequencyAS+0x78>)
    4d84:	4694      	mov	ip, r2
    4d86:	4463      	add	r3, ip
    4d88:	4a0f      	ldr	r2, [pc, #60]	; (4dc8 <ValidateFrequencyAS+0x7c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4d8a:	3802      	subs	r0, #2
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    4d8c:	4293      	cmp	r3, r2
    4d8e:	d9ec      	bls.n	4d6a <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    4d90:	3002      	adds	r0, #2
    4d92:	e7ea      	b.n	4d6a <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    4d94:	4a0d      	ldr	r2, [pc, #52]	; (4dcc <ValidateFrequencyAS+0x80>)
    4d96:	4694      	mov	ip, r2
    4d98:	4463      	add	r3, ip
    4d9a:	4a0d      	ldr	r2, [pc, #52]	; (4dd0 <ValidateFrequencyAS+0x84>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4d9c:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    4d9e:	4293      	cmp	r3, r2
    4da0:	d9e3      	bls.n	4d6a <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    4da2:	3002      	adds	r0, #2
    4da4:	e7e1      	b.n	4d6a <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    4da6:	4a0b      	ldr	r2, [pc, #44]	; (4dd4 <ValidateFrequencyAS+0x88>)
    4da8:	4694      	mov	ip, r2
    4daa:	4463      	add	r3, ip
    4dac:	4a0a      	ldr	r2, [pc, #40]	; (4dd8 <ValidateFrequencyAS+0x8c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4dae:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    4db0:	4293      	cmp	r3, r2
    4db2:	d9da      	bls.n	4d6a <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    4db4:	3002      	adds	r0, #2
    4db6:	e7d8      	b.n	4d6a <ValidateFrequencyAS+0x1e>
    4db8:	20001328 	.word	0x20001328
    4dbc:	c8fc2340 	.word	0xc8fc2340
    4dc0:	001e8480 	.word	0x001e8480
    4dc4:	c90b6580 	.word	0xc90b6580
    4dc8:	005b8d80 	.word	0x005b8d80
    4dcc:	c9763540 	.word	0xc9763540
    4dd0:	00c65d40 	.word	0x00c65d40
    4dd4:	c929ea00 	.word	0xc929ea00
    4dd8:	004c4b40 	.word	0x004c4b40

00004ddc <setTxParams>:
}
#endif

#if ( AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setTxParams(LorawanRegionalAttributes_t attr, void *attrInput)
{
    4ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
	TxParams_t updateTxParams;

	memcpy(&updateTxParams,attrInput,sizeof(TxParams_t));
    4dde:	780d      	ldrb	r5, [r1, #0]
    4de0:	7849      	ldrb	r1, [r1, #1]
    4de2:	084a      	lsrs	r2, r1, #1
	
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = updateTxParams.uplinkDwellTime;
    4de4:	4809      	ldr	r0, [pc, #36]	; (4e0c <setTxParams+0x30>)
    4de6:	24e1      	movs	r4, #225	; 0xe1
    4de8:	0064      	lsls	r4, r4, #1
    4dea:	2601      	movs	r6, #1
    4dec:	4031      	ands	r1, r6
    4dee:	5d03      	ldrb	r3, [r0, r4]
    4df0:	2701      	movs	r7, #1
    4df2:	43bb      	bics	r3, r7
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = updateTxParams.downlinkDwellTime;
    4df4:	4032      	ands	r2, r6
    4df6:	0052      	lsls	r2, r2, #1
    4df8:	430b      	orrs	r3, r1
    4dfa:	2102      	movs	r1, #2
    4dfc:	438b      	bics	r3, r1
    4dfe:	4313      	orrs	r3, r2
    4e00:	5503      	strb	r3, [r0, r4]
	RegParams.maxTxPwr = updateTxParams.maxEIRP;
    4e02:	2328      	movs	r3, #40	; 0x28
    4e04:	54c5      	strb	r5, [r0, r3]
	
	return LORAWAN_SUCCESS;
}
    4e06:	2008      	movs	r0, #8
    4e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e0a:	46c0      	nop			; (mov r8, r8)
    4e0c:	20001328 	.word	0x20001328

00004e10 <setJoinSuccess>:
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
#endif
#endif
	return status;
}
    4e10:	2008      	movs	r0, #8
    4e12:	4770      	bx	lr

00004e14 <setEnableAllChs>:
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
	PDS_STORE(RegParams.regParamItems.lastUsedSB);
#endif
#endif	
	return status;
}
    4e14:	2008      	movs	r0, #8
    4e16:	4770      	bx	lr

00004e18 <setChlistDefaultState>:
#endif
#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setChlistDefaultState(LorawanRegionalAttributes_t attr, void *attrInput)
{
    4e18:	b5f0      	push	{r4, r5, r6, r7, lr}
	StackRetStatus_t status = LORAWAN_SUCCESS;
	/* Traverse the entire channel list and disable the all the Channel status except Default channels */
	for (uint8_t i = 0; i <= RegParams.maxChannels; i++)
    4e1a:	232a      	movs	r3, #42	; 0x2a
    4e1c:	4a17      	ldr	r2, [pc, #92]	; (4e7c <setChlistDefaultState+0x64>)
    4e1e:	5cd3      	ldrb	r3, [r2, r3]
    4e20:	2b7f      	cmp	r3, #127	; 0x7f
    4e22:	d829      	bhi.n	4e78 <setChlistDefaultState+0x60>
    4e24:	2200      	movs	r2, #0
	{
		if(RegParams.pOtherChParams[i].joinRequestChannel != true)
    4e26:	4815      	ldr	r0, [pc, #84]	; (4e7c <setChlistDefaultState+0x64>)
		{
			RegParams.pChParams[i].status = DISABLED;
    4e28:	0004      	movs	r4, r0
    4e2a:	2700      	movs	r7, #0
	for (uint8_t i = 0; i <= RegParams.maxChannels; i++)
    4e2c:	0006      	movs	r6, r0
    4e2e:	252a      	movs	r5, #42	; 0x2a
    4e30:	e004      	b.n	4e3c <setChlistDefaultState+0x24>
    4e32:	3201      	adds	r2, #1
    4e34:	b2d2      	uxtb	r2, r2
    4e36:	5773      	ldrsb	r3, [r6, r5]
    4e38:	429a      	cmp	r2, r3
    4e3a:	dc1d      	bgt.n	4e78 <setChlistDefaultState+0x60>
		if(RegParams.pOtherChParams[i].joinRequestChannel != true)
    4e3c:	7a03      	ldrb	r3, [r0, #8]
    4e3e:	7a41      	ldrb	r1, [r0, #9]
    4e40:	0209      	lsls	r1, r1, #8
    4e42:	430b      	orrs	r3, r1
    4e44:	7a81      	ldrb	r1, [r0, #10]
    4e46:	0409      	lsls	r1, r1, #16
    4e48:	4319      	orrs	r1, r3
    4e4a:	7ac3      	ldrb	r3, [r0, #11]
    4e4c:	061b      	lsls	r3, r3, #24
    4e4e:	4319      	orrs	r1, r3
    4e50:	0053      	lsls	r3, r2, #1
    4e52:	189b      	adds	r3, r3, r2
    4e54:	009b      	lsls	r3, r3, #2
    4e56:	185b      	adds	r3, r3, r1
    4e58:	7a5b      	ldrb	r3, [r3, #9]
    4e5a:	2b00      	cmp	r3, #0
    4e5c:	d1e9      	bne.n	4e32 <setChlistDefaultState+0x1a>
			RegParams.pChParams[i].status = DISABLED;
    4e5e:	7923      	ldrb	r3, [r4, #4]
    4e60:	7961      	ldrb	r1, [r4, #5]
    4e62:	0209      	lsls	r1, r1, #8
    4e64:	4319      	orrs	r1, r3
    4e66:	79a3      	ldrb	r3, [r4, #6]
    4e68:	041b      	lsls	r3, r3, #16
    4e6a:	4319      	orrs	r1, r3
    4e6c:	79e3      	ldrb	r3, [r4, #7]
    4e6e:	061b      	lsls	r3, r3, #24
    4e70:	430b      	orrs	r3, r1
    4e72:	0051      	lsls	r1, r2, #1
    4e74:	54cf      	strb	r7, [r1, r3]
    4e76:	e7dc      	b.n	4e32 <setChlistDefaultState+0x1a>
		}
	}
	return status;
}
    4e78:	2008      	movs	r0, #8
    4e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e7c:	20001328 	.word	0x20001328

00004e80 <SearchAvailableChannel1>:
{
    4e80:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e82:	46de      	mov	lr, fp
    4e84:	4657      	mov	r7, sl
    4e86:	464e      	mov	r6, r9
    4e88:	4645      	mov	r5, r8
    4e8a:	b5e0      	push	{r5, r6, r7, lr}
    4e8c:	b0af      	sub	sp, #188	; 0xbc
    4e8e:	000e      	movs	r6, r1
    4e90:	9206      	str	r2, [sp, #24]
    4e92:	9309      	str	r3, [sp, #36]	; 0x24
	memset(ChList, 0, (MAX_CHANNELS_BANDWIDTH_125_AU_NA + MAX_CHANNELS_BANDWIDTH_500_AU_NA) * 2);  
    4e94:	2290      	movs	r2, #144	; 0x90
    4e96:	2100      	movs	r1, #0
    4e98:	a80a      	add	r0, sp, #40	; 0x28
    4e9a:	4b59      	ldr	r3, [pc, #356]	; (5000 <SearchAvailableChannel1+0x180>)
    4e9c:	4798      	blx	r3
	if(transmissionType == false)
    4e9e:	2e00      	cmp	r6, #0
    4ea0:	d01d      	beq.n	4ede <SearchAvailableChannel1+0x5e>
				if (((transmissionType) && (currDr >= RegParams.pChParams[i + j].dataRange.min) && (currDr <= RegParams.pChParams[i + j].dataRange.max) 
    4ea2:	4b58      	ldr	r3, [pc, #352]	; (5004 <SearchAvailableChannel1+0x184>)
    4ea4:	7919      	ldrb	r1, [r3, #4]
    4ea6:	795a      	ldrb	r2, [r3, #5]
    4ea8:	0212      	lsls	r2, r2, #8
    4eaa:	4311      	orrs	r1, r2
    4eac:	799a      	ldrb	r2, [r3, #6]
    4eae:	0412      	lsls	r2, r2, #16
    4eb0:	430a      	orrs	r2, r1
    4eb2:	79d9      	ldrb	r1, [r3, #7]
    4eb4:	0609      	lsls	r1, r1, #24
    4eb6:	4311      	orrs	r1, r2
    4eb8:	9107      	str	r1, [sp, #28]
					&& ((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))) 
    4eba:	222f      	movs	r2, #47	; 0x2f
    4ebc:	5c9b      	ldrb	r3, [r3, r2]
    4ebe:	9308      	str	r3, [sp, #32]
    4ec0:	469b      	mov	fp, r3
    4ec2:	9103      	str	r1, [sp, #12]
    4ec4:	9104      	str	r1, [sp, #16]
    4ec6:	2300      	movs	r3, #0
    4ec8:	469c      	mov	ip, r3
    4eca:	27c9      	movs	r7, #201	; 0xc9
    4ecc:	3301      	adds	r3, #1
    4ece:	4698      	mov	r8, r3
    4ed0:	2500      	movs	r5, #0
				if (((transmissionType) && (currDr >= RegParams.pChParams[i + j].dataRange.min) && (currDr <= RegParams.pChParams[i + j].dataRange.max) 
    4ed2:	9a06      	ldr	r2, [sp, #24]
    4ed4:	4663      	mov	r3, ip
    4ed6:	9305      	str	r3, [sp, #20]
    4ed8:	4691      	mov	r9, r2
    4eda:	4694      	mov	ip, r2
    4edc:	e05a      	b.n	4f94 <SearchAvailableChannel1+0x114>
		if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    4ede:	2320      	movs	r3, #32
    4ee0:	4a48      	ldr	r2, [pc, #288]	; (5004 <SearchAvailableChannel1+0x184>)
    4ee2:	5cd3      	ldrb	r3, [r2, r3]
    4ee4:	069b      	lsls	r3, r3, #26
    4ee6:	d5dc      	bpl.n	4ea2 <SearchAvailableChannel1+0x22>
			if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) 
    4ee8:	0011      	movs	r1, r2
    4eea:	7d13      	ldrb	r3, [r2, #20]
    4eec:	7d52      	ldrb	r2, [r2, #21]
    4eee:	0212      	lsls	r2, r2, #8
    4ef0:	431a      	orrs	r2, r3
    4ef2:	7d8b      	ldrb	r3, [r1, #22]
    4ef4:	041b      	lsls	r3, r3, #16
    4ef6:	431a      	orrs	r2, r3
    4ef8:	7dcb      	ldrb	r3, [r1, #23]
    4efa:	061b      	lsls	r3, r3, #24
    4efc:	4313      	orrs	r3, r2
    4efe:	7a18      	ldrb	r0, [r3, #8]
    4f00:	4b41      	ldr	r3, [pc, #260]	; (5008 <SearchAvailableChannel1+0x188>)
    4f02:	4798      	blx	r3
    4f04:	0003      	movs	r3, r0
					return LORAWAN_NO_CHANNELS_FOUND;
    4f06:	2010      	movs	r0, #16
			if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) 
    4f08:	2b00      	cmp	r3, #0
    4f0a:	d0ca      	beq.n	4ea2 <SearchAvailableChannel1+0x22>
    4f0c:	e070      	b.n	4ff0 <SearchAvailableChannel1+0x170>
								ChList[num][1] = k + 1;    
    4f0e:	9c01      	ldr	r4, [sp, #4]
    4f10:	0064      	lsls	r4, r4, #1
    4f12:	ad0a      	add	r5, sp, #40	; 0x28
    4f14:	46aa      	mov	sl, r5
    4f16:	4454      	add	r4, sl
    4f18:	4645      	mov	r5, r8
    4f1a:	7065      	strb	r5, [r4, #1]
						num++;
    4f1c:	9d01      	ldr	r5, [sp, #4]
    4f1e:	3501      	adds	r5, #1
    4f20:	b2ec      	uxtb	r4, r5
    4f22:	9401      	str	r4, [sp, #4]
    4f24:	3102      	adds	r1, #2
    4f26:	3002      	adds	r0, #2
    4f28:	3201      	adds	r2, #1
    4f2a:	3301      	adds	r3, #1
    4f2c:	b2db      	uxtb	r3, r3
			for (j = 0; j < NO_OF_CH_IN_SUBBAND; j++)
    4f2e:	42bb      	cmp	r3, r7
    4f30:	d01e      	beq.n	4f70 <SearchAvailableChannel1+0xf0>
				if (((transmissionType) && (currDr >= RegParams.pChParams[i + j].dataRange.min) && (currDr <= RegParams.pChParams[i + j].dataRange.max) 
    4f32:	2e00      	cmp	r6, #0
    4f34:	d008      	beq.n	4f48 <SearchAvailableChannel1+0xc8>
    4f36:	784c      	ldrb	r4, [r1, #1]
    4f38:	0724      	lsls	r4, r4, #28
    4f3a:	0f24      	lsrs	r4, r4, #28
    4f3c:	45a1      	cmp	r9, r4
    4f3e:	dbf1      	blt.n	4f24 <SearchAvailableChannel1+0xa4>
    4f40:	784c      	ldrb	r4, [r1, #1]
    4f42:	0924      	lsrs	r4, r4, #4
    4f44:	45a4      	cmp	ip, r4
    4f46:	dced      	bgt.n	4f24 <SearchAvailableChannel1+0xa4>
					||
    4f48:	7804      	ldrb	r4, [r0, #0]
    4f4a:	2c00      	cmp	r4, #0
    4f4c:	d0ea      	beq.n	4f24 <SearchAvailableChannel1+0xa4>
    4f4e:	9202      	str	r2, [sp, #8]
					&& ((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))) 
    4f50:	4593      	cmp	fp, r2
    4f52:	d0e7      	beq.n	4f24 <SearchAvailableChannel1+0xa4>
						ChList[num][0] = i+j;
    4f54:	9c01      	ldr	r4, [sp, #4]
    4f56:	0064      	lsls	r4, r4, #1
    4f58:	46a2      	mov	sl, r4
    4f5a:	ac0a      	add	r4, sp, #40	; 0x28
    4f5c:	4655      	mov	r5, sl
    4f5e:	552a      	strb	r2, [r5, r4]
						if((i+j) >= MAX_CHANNELS_BANDWIDTH_125_AU_NA)
    4f60:	2a3f      	cmp	r2, #63	; 0x3f
    4f62:	ddd4      	ble.n	4f0e <SearchAvailableChannel1+0x8e>
								ChList[num][1] = ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA + 1);
    4f64:	4654      	mov	r4, sl
    4f66:	ad0a      	add	r5, sp, #40	; 0x28
    4f68:	46aa      	mov	sl, r5
    4f6a:	4454      	add	r4, sl
    4f6c:	7063      	strb	r3, [r4, #1]
    4f6e:	e7d5      	b.n	4f1c <SearchAvailableChannel1+0x9c>
    4f70:	9d01      	ldr	r5, [sp, #4]
    4f72:	4643      	mov	r3, r8
    4f74:	3301      	adds	r3, #1
    4f76:	b2db      	uxtb	r3, r3
    4f78:	4698      	mov	r8, r3
    4f7a:	3708      	adds	r7, #8
    4f7c:	b2ff      	uxtb	r7, r7
    4f7e:	9b03      	ldr	r3, [sp, #12]
    4f80:	3310      	adds	r3, #16
    4f82:	9303      	str	r3, [sp, #12]
    4f84:	9b04      	ldr	r3, [sp, #16]
    4f86:	3310      	adds	r3, #16
    4f88:	9304      	str	r3, [sp, #16]
    4f8a:	9b05      	ldr	r3, [sp, #20]
    4f8c:	3308      	adds	r3, #8
    4f8e:	9305      	str	r3, [sp, #20]
	for (i = 0, k = 0; i < (MAX_CHANNELS_BANDWIDTH_125_AU_NA + MAX_CHANNELS_BANDWIDTH_500_AU_NA); i += 8, k++)
    4f90:	2f11      	cmp	r7, #17
    4f92:	d007      	beq.n	4fa4 <SearchAvailableChannel1+0x124>
    4f94:	003b      	movs	r3, r7
    4f96:	3b08      	subs	r3, #8
    4f98:	b2db      	uxtb	r3, r3
{
    4f9a:	9a05      	ldr	r2, [sp, #20]
    4f9c:	9804      	ldr	r0, [sp, #16]
    4f9e:	9903      	ldr	r1, [sp, #12]
    4fa0:	9501      	str	r5, [sp, #4]
    4fa2:	e7c6      	b.n	4f32 <SearchAvailableChannel1+0xb2>
	if(0 != num)
    4fa4:	2d00      	cmp	r5, #0
    4fa6:	d116      	bne.n	4fd6 <SearchAvailableChannel1+0x156>
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    4fa8:	9908      	ldr	r1, [sp, #32]
    4faa:	004b      	lsls	r3, r1, #1
    4fac:	9a07      	ldr	r2, [sp, #28]
    4fae:	4694      	mov	ip, r2
    4fb0:	4463      	add	r3, ip
    4fb2:	781a      	ldrb	r2, [r3, #0]
			result = LORAWAN_NO_CHANNELS_FOUND;
    4fb4:	2010      	movs	r0, #16
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    4fb6:	2a00      	cmp	r2, #0
    4fb8:	d01a      	beq.n	4ff0 <SearchAvailableChannel1+0x170>
		(currDr >= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.min) &&
    4fba:	9f06      	ldr	r7, [sp, #24]
    4fbc:	785a      	ldrb	r2, [r3, #1]
    4fbe:	0712      	lsls	r2, r2, #28
    4fc0:	0f12      	lsrs	r2, r2, #28
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    4fc2:	4297      	cmp	r7, r2
    4fc4:	db14      	blt.n	4ff0 <SearchAvailableChannel1+0x170>
		(currDr <= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.max))
    4fc6:	785b      	ldrb	r3, [r3, #1]
    4fc8:	091b      	lsrs	r3, r3, #4
		(currDr >= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.min) &&
    4fca:	429f      	cmp	r7, r3
    4fcc:	dc10      	bgt.n	4ff0 <SearchAvailableChannel1+0x170>
			*channelIndex = RegParams.lastUsedChannelIndex;
    4fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4fd0:	7019      	strb	r1, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4fd2:	3808      	subs	r0, #8
			*channelIndex = RegParams.lastUsedChannelIndex;
    4fd4:	e00c      	b.n	4ff0 <SearchAvailableChannel1+0x170>
		randomNumber = rand() % num;
    4fd6:	4b0d      	ldr	r3, [pc, #52]	; (500c <SearchAvailableChannel1+0x18c>)
    4fd8:	4798      	blx	r3
    4fda:	0029      	movs	r1, r5
    4fdc:	4b0c      	ldr	r3, [pc, #48]	; (5010 <SearchAvailableChannel1+0x190>)
    4fde:	4798      	blx	r3
		*channelIndex = ChList[randomNumber][0];
    4fe0:	23ff      	movs	r3, #255	; 0xff
    4fe2:	400b      	ands	r3, r1
    4fe4:	005b      	lsls	r3, r3, #1
    4fe6:	aa0a      	add	r2, sp, #40	; 0x28
    4fe8:	5c9b      	ldrb	r3, [r3, r2]
    4fea:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4fec:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4fee:	2008      	movs	r0, #8
}
    4ff0:	b02f      	add	sp, #188	; 0xbc
    4ff2:	bc3c      	pop	{r2, r3, r4, r5}
    4ff4:	4690      	mov	r8, r2
    4ff6:	4699      	mov	r9, r3
    4ff8:	46a2      	mov	sl, r4
    4ffa:	46ab      	mov	fp, r5
    4ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ffe:	46c0      	nop			; (mov r8, r8)
    5000:	00013ee1 	.word	0x00013ee1
    5004:	20001328 	.word	0x20001328
    5008:	0000992d 	.word	0x0000992d
    500c:	00014061 	.word	0x00014061
    5010:	000110ed 	.word	0x000110ed

00005014 <LORAREG_GetAttr_FreeChannel1>:
{
    5014:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    5016:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    5018:	202a      	movs	r0, #42	; 0x2a
    501a:	4d07      	ldr	r5, [pc, #28]	; (5038 <LORAREG_GetAttr_FreeChannel1+0x24>)
    501c:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    501e:	3820      	subs	r0, #32
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    5020:	42ac      	cmp	r4, r5
    5022:	dd00      	ble.n	5026 <LORAREG_GetAttr_FreeChannel1+0x12>
}
    5024:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel1(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    5026:	7888      	ldrb	r0, [r1, #2]
    5028:	7809      	ldrb	r1, [r1, #0]
    502a:	0013      	movs	r3, r2
    502c:	0002      	movs	r2, r0
    502e:	0020      	movs	r0, r4
    5030:	4c02      	ldr	r4, [pc, #8]	; (503c <LORAREG_GetAttr_FreeChannel1+0x28>)
    5032:	47a0      	blx	r4
	return result;
    5034:	e7f6      	b.n	5024 <LORAREG_GetAttr_FreeChannel1+0x10>
    5036:	46c0      	nop			; (mov r8, r8)
    5038:	20001328 	.word	0x20001328
    503c:	00004e81 	.word	0x00004e81

00005040 <UpdateChannelIdStatus>:
{
    5040:	b510      	push	{r4, lr}
	if(chid < RegParams.maxChannels || ((((1 << RegParams.band) & (ISM_NAAUBAND)) == 0) && chid >= RegParams.cmnParams.paramsType2.minNonDefChId))
    5042:	232a      	movs	r3, #42	; 0x2a
    5044:	4a13      	ldr	r2, [pc, #76]	; (5094 <UpdateChannelIdStatus+0x54>)
    5046:	56d3      	ldrsb	r3, [r2, r3]
    5048:	4298      	cmp	r0, r3
    504a:	db0b      	blt.n	5064 <UpdateChannelIdStatus+0x24>
    504c:	232e      	movs	r3, #46	; 0x2e
    504e:	5cd2      	ldrb	r2, [r2, r3]
    5050:	3b22      	subs	r3, #34	; 0x22
    5052:	4113      	asrs	r3, r2
    5054:	07db      	lsls	r3, r3, #31
    5056:	d41c      	bmi.n	5092 <UpdateChannelIdStatus+0x52>
    5058:	23e0      	movs	r3, #224	; 0xe0
    505a:	005b      	lsls	r3, r3, #1
    505c:	4a0d      	ldr	r2, [pc, #52]	; (5094 <UpdateChannelIdStatus+0x54>)
    505e:	5cd3      	ldrb	r3, [r2, r3]
    5060:	4283      	cmp	r3, r0
    5062:	d816      	bhi.n	5092 <UpdateChannelIdStatus+0x52>
		RegParams.pChParams[chid].status = statusNew;
    5064:	4b0b      	ldr	r3, [pc, #44]	; (5094 <UpdateChannelIdStatus+0x54>)
    5066:	791a      	ldrb	r2, [r3, #4]
    5068:	795c      	ldrb	r4, [r3, #5]
    506a:	0224      	lsls	r4, r4, #8
    506c:	4314      	orrs	r4, r2
    506e:	799a      	ldrb	r2, [r3, #6]
    5070:	0412      	lsls	r2, r2, #16
    5072:	4314      	orrs	r4, r2
    5074:	79da      	ldrb	r2, [r3, #7]
    5076:	0612      	lsls	r2, r2, #24
    5078:	4322      	orrs	r2, r4
    507a:	0040      	lsls	r0, r0, #1
    507c:	5481      	strb	r1, [r0, r2]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    507e:	4a06      	ldr	r2, [pc, #24]	; (5098 <UpdateChannelIdStatus+0x58>)
    5080:	5c9a      	ldrb	r2, [r3, r2]
    5082:	4906      	ldr	r1, [pc, #24]	; (509c <UpdateChannelIdStatus+0x5c>)
    5084:	5c58      	ldrb	r0, [r3, r1]
    5086:	0200      	lsls	r0, r0, #8
    5088:	4310      	orrs	r0, r2
    508a:	b2c1      	uxtb	r1, r0
    508c:	0a00      	lsrs	r0, r0, #8
    508e:	4b04      	ldr	r3, [pc, #16]	; (50a0 <UpdateChannelIdStatus+0x60>)
    5090:	4798      	blx	r3
}
    5092:	bd10      	pop	{r4, pc}
    5094:	20001328 	.word	0x20001328
    5098:	0000020e 	.word	0x0000020e
    509c:	0000020f 	.word	0x0000020f
    50a0:	00008d6d 	.word	0x00008d6d

000050a4 <EnableChannels2>:
{
    50a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50a6:	46ce      	mov	lr, r9
    50a8:	4647      	mov	r7, r8
    50aa:	b580      	push	{r7, lr}
    50ac:	0004      	movs	r4, r0
    50ae:	000f      	movs	r7, r1
    50b0:	0015      	movs	r5, r2
	for(i = startIndx; i <= endIndx; i++)
    50b2:	4288      	cmp	r0, r1
    50b4:	d812      	bhi.n	50dc <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    50b6:	2601      	movs	r6, #1
			UpdateChannelIdStatus(i, ENABLED);
    50b8:	4b0a      	ldr	r3, [pc, #40]	; (50e4 <EnableChannels2+0x40>)
    50ba:	4699      	mov	r9, r3
			UpdateChannelIdStatus(i, DISABLED);
    50bc:	4698      	mov	r8, r3
    50be:	e007      	b.n	50d0 <EnableChannels2+0x2c>
    50c0:	2100      	movs	r1, #0
    50c2:	0020      	movs	r0, r4
    50c4:	47c0      	blx	r8
		chMask = chMask >> SHIFT1;
    50c6:	086d      	lsrs	r5, r5, #1
	for(i = startIndx; i <= endIndx; i++)
    50c8:	3401      	adds	r4, #1
    50ca:	b2e4      	uxtb	r4, r4
    50cc:	42a7      	cmp	r7, r4
    50ce:	d305      	bcc.n	50dc <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    50d0:	422e      	tst	r6, r5
    50d2:	d0f5      	beq.n	50c0 <EnableChannels2+0x1c>
			UpdateChannelIdStatus(i, ENABLED);
    50d4:	0031      	movs	r1, r6
    50d6:	0020      	movs	r0, r4
    50d8:	47c8      	blx	r9
    50da:	e7f4      	b.n	50c6 <EnableChannels2+0x22>
}
    50dc:	bc0c      	pop	{r2, r3}
    50de:	4690      	mov	r8, r2
    50e0:	4699      	mov	r9, r3
    50e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50e4:	00005041 	.word	0x00005041

000050e8 <UpdateChannelIdStatusT2>:
{
    50e8:	b570      	push	{r4, r5, r6, lr}
    50ea:	000c      	movs	r4, r1
	if(chid < RegParams.maxChannels && chid >= RegParams.cmnParams.paramsType2.minNonDefChId &&
    50ec:	232a      	movs	r3, #42	; 0x2a
    50ee:	4a3f      	ldr	r2, [pc, #252]	; (51ec <UpdateChannelIdStatusT2+0x104>)
    50f0:	56d3      	ldrsb	r3, [r2, r3]
    50f2:	4298      	cmp	r0, r3
    50f4:	da17      	bge.n	5126 <UpdateChannelIdStatusT2+0x3e>
    50f6:	23e0      	movs	r3, #224	; 0xe0
    50f8:	005b      	lsls	r3, r3, #1
    50fa:	5cd3      	ldrb	r3, [r2, r3]
    50fc:	4283      	cmp	r3, r0
    50fe:	d812      	bhi.n	5126 <UpdateChannelIdStatusT2+0x3e>
	   (RegParams.pOtherChParams[chid].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) == (FREQUENCY_DEFINED | DATA_RANGE_DEFINED))
    5100:	0045      	lsls	r5, r0, #1
    5102:	182d      	adds	r5, r5, r0
    5104:	00ad      	lsls	r5, r5, #2
    5106:	0011      	movs	r1, r2
    5108:	7a13      	ldrb	r3, [r2, #8]
    510a:	7a52      	ldrb	r2, [r2, #9]
    510c:	0212      	lsls	r2, r2, #8
    510e:	431a      	orrs	r2, r3
    5110:	7a8b      	ldrb	r3, [r1, #10]
    5112:	041b      	lsls	r3, r3, #16
    5114:	431a      	orrs	r2, r3
    5116:	7acb      	ldrb	r3, [r1, #11]
    5118:	061b      	lsls	r3, r3, #24
    511a:	4313      	orrs	r3, r2
    511c:	195b      	adds	r3, r3, r5
	if(chid < RegParams.maxChannels && chid >= RegParams.cmnParams.paramsType2.minNonDefChId &&
    511e:	7adb      	ldrb	r3, [r3, #11]
    5120:	43db      	mvns	r3, r3
    5122:	079b      	lsls	r3, r3, #30
    5124:	d000      	beq.n	5128 <UpdateChannelIdStatusT2+0x40>
}
    5126:	bd70      	pop	{r4, r5, r6, pc}
		RegParams.pChParams[chid].status = statusNew;
    5128:	000e      	movs	r6, r1
    512a:	790b      	ldrb	r3, [r1, #4]
    512c:	794a      	ldrb	r2, [r1, #5]
    512e:	0212      	lsls	r2, r2, #8
    5130:	431a      	orrs	r2, r3
    5132:	798b      	ldrb	r3, [r1, #6]
    5134:	041b      	lsls	r3, r3, #16
    5136:	431a      	orrs	r2, r3
    5138:	79cb      	ldrb	r3, [r1, #7]
    513a:	061b      	lsls	r3, r3, #24
    513c:	4313      	orrs	r3, r2
    513e:	0040      	lsls	r0, r0, #1
    5140:	54c4      	strb	r4, [r0, r3]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    5142:	4b2b      	ldr	r3, [pc, #172]	; (51f0 <UpdateChannelIdStatusT2+0x108>)
    5144:	5ccb      	ldrb	r3, [r1, r3]
    5146:	4a2b      	ldr	r2, [pc, #172]	; (51f4 <UpdateChannelIdStatusT2+0x10c>)
    5148:	5c88      	ldrb	r0, [r1, r2]
    514a:	0200      	lsls	r0, r0, #8
    514c:	4318      	orrs	r0, r3
    514e:	b2c1      	uxtb	r1, r0
    5150:	0a00      	lsrs	r0, r0, #8
    5152:	4b29      	ldr	r3, [pc, #164]	; (51f8 <UpdateChannelIdStatusT2+0x110>)
    5154:	4798      	blx	r3
		if(((1 << RegParams.band) & (ISM_EUBAND)) != 0 && statusNew == DISABLED)
    5156:	232e      	movs	r3, #46	; 0x2e
    5158:	5cf2      	ldrb	r2, [r6, r3]
    515a:	3b2b      	subs	r3, #43	; 0x2b
    515c:	4113      	asrs	r3, r2
    515e:	07db      	lsls	r3, r3, #31
    5160:	d5e1      	bpl.n	5126 <UpdateChannelIdStatusT2+0x3e>
    5162:	2c00      	cmp	r4, #0
    5164:	d1df      	bne.n	5126 <UpdateChannelIdStatusT2+0x3e>
			subBandId = RegParams.pOtherChParams[chid].subBandId;
    5166:	4b21      	ldr	r3, [pc, #132]	; (51ec <UpdateChannelIdStatusT2+0x104>)
    5168:	7a18      	ldrb	r0, [r3, #8]
    516a:	7a5a      	ldrb	r2, [r3, #9]
    516c:	0212      	lsls	r2, r2, #8
    516e:	4302      	orrs	r2, r0
    5170:	7a98      	ldrb	r0, [r3, #10]
    5172:	0400      	lsls	r0, r0, #16
    5174:	4302      	orrs	r2, r0
    5176:	7ad8      	ldrb	r0, [r3, #11]
    5178:	0600      	lsls	r0, r0, #24
    517a:	4310      	orrs	r0, r2
    517c:	1945      	adds	r5, r0, r5
    517e:	7a2d      	ldrb	r5, [r5, #8]
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    5180:	222a      	movs	r2, #42	; 0x2a
    5182:	569c      	ldrsb	r4, [r3, r2]
    5184:	2c00      	cmp	r4, #0
    5186:	dd1c      	ble.n	51c2 <UpdateChannelIdStatusT2+0xda>
				if(RegParams.pChParams[i].status == ENABLED &&
    5188:	001a      	movs	r2, r3
    518a:	7919      	ldrb	r1, [r3, #4]
    518c:	795b      	ldrb	r3, [r3, #5]
    518e:	021b      	lsls	r3, r3, #8
    5190:	430b      	orrs	r3, r1
    5192:	7991      	ldrb	r1, [r2, #6]
    5194:	0409      	lsls	r1, r1, #16
    5196:	430b      	orrs	r3, r1
    5198:	79d1      	ldrb	r1, [r2, #7]
    519a:	0609      	lsls	r1, r1, #24
    519c:	4319      	orrs	r1, r3
    519e:	2300      	movs	r3, #0
    51a0:	e003      	b.n	51aa <UpdateChannelIdStatusT2+0xc2>
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    51a2:	3301      	adds	r3, #1
    51a4:	b2db      	uxtb	r3, r3
    51a6:	42a3      	cmp	r3, r4
    51a8:	da0b      	bge.n	51c2 <UpdateChannelIdStatusT2+0xda>
				if(RegParams.pChParams[i].status == ENABLED &&
    51aa:	005a      	lsls	r2, r3, #1
    51ac:	5c52      	ldrb	r2, [r2, r1]
    51ae:	2a00      	cmp	r2, #0
    51b0:	d0f7      	beq.n	51a2 <UpdateChannelIdStatusT2+0xba>
				 subBandId == RegParams.pOtherChParams[i].subBandId)
    51b2:	005a      	lsls	r2, r3, #1
    51b4:	18d2      	adds	r2, r2, r3
    51b6:	0092      	lsls	r2, r2, #2
    51b8:	1882      	adds	r2, r0, r2
				if(RegParams.pChParams[i].status == ENABLED &&
    51ba:	7a12      	ldrb	r2, [r2, #8]
    51bc:	42aa      	cmp	r2, r5
    51be:	d1f0      	bne.n	51a2 <UpdateChannelIdStatusT2+0xba>
    51c0:	e7b1      	b.n	5126 <UpdateChannelIdStatusT2+0x3e>
			RegParams.pSubBandParams[subBandId].subBandTimeout = 0;
    51c2:	490a      	ldr	r1, [pc, #40]	; (51ec <UpdateChannelIdStatusT2+0x104>)
    51c4:	7b0a      	ldrb	r2, [r1, #12]
    51c6:	7b4b      	ldrb	r3, [r1, #13]
    51c8:	021b      	lsls	r3, r3, #8
    51ca:	4313      	orrs	r3, r2
    51cc:	7b8a      	ldrb	r2, [r1, #14]
    51ce:	0412      	lsls	r2, r2, #16
    51d0:	4313      	orrs	r3, r2
    51d2:	7bca      	ldrb	r2, [r1, #15]
    51d4:	0612      	lsls	r2, r2, #24
    51d6:	431a      	orrs	r2, r3
    51d8:	006b      	lsls	r3, r5, #1
    51da:	195d      	adds	r5, r3, r5
    51dc:	00ad      	lsls	r5, r5, #2
    51de:	18ad      	adds	r5, r5, r2
    51e0:	2300      	movs	r3, #0
    51e2:	722b      	strb	r3, [r5, #8]
    51e4:	726b      	strb	r3, [r5, #9]
    51e6:	72ab      	strb	r3, [r5, #10]
    51e8:	72eb      	strb	r3, [r5, #11]
    51ea:	e79c      	b.n	5126 <UpdateChannelIdStatusT2+0x3e>
    51ec:	20001328 	.word	0x20001328
    51f0:	0000020e 	.word	0x0000020e
    51f4:	0000020f 	.word	0x0000020f
    51f8:	00008d6d 	.word	0x00008d6d

000051fc <setChannelIdStatusT2>:
{
    51fc:	b570      	push	{r4, r5, r6, lr}
    51fe:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    5200:	780d      	ldrb	r5, [r1, #0]
    5202:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    5204:	a901      	add	r1, sp, #4
    5206:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = /*WITHOUT_DEFAULT_CHANNELS*/ALL_CHANNELS;
    5208:	2301      	movs	r3, #1
    520a:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    520c:	2015      	movs	r0, #21
    520e:	4b0c      	ldr	r3, [pc, #48]	; (5240 <setChannelIdStatusT2+0x44>)
    5210:	4798      	blx	r3
    5212:	0004      	movs	r4, r0
    5214:	2808      	cmp	r0, #8
    5216:	d003      	beq.n	5220 <setChannelIdStatusT2+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    5218:	240a      	movs	r4, #10
}
    521a:	0020      	movs	r0, r4
    521c:	b002      	add	sp, #8
    521e:	bd70      	pop	{r4, r5, r6, pc}
		if(RegParams.band ==  ISM_IND865)
    5220:	232e      	movs	r3, #46	; 0x2e
    5222:	4a08      	ldr	r2, [pc, #32]	; (5244 <setChannelIdStatusT2+0x48>)
    5224:	5cd3      	ldrb	r3, [r2, r3]
    5226:	2b0f      	cmp	r3, #15
    5228:	d004      	beq.n	5234 <setChannelIdStatusT2+0x38>
		    UpdateChannelIdStatusT2(updateChid.channelIndex,updateChid.statusNew);
    522a:	0031      	movs	r1, r6
    522c:	0028      	movs	r0, r5
    522e:	4b06      	ldr	r3, [pc, #24]	; (5248 <setChannelIdStatusT2+0x4c>)
    5230:	4798      	blx	r3
    5232:	e7f2      	b.n	521a <setChannelIdStatusT2+0x1e>
			UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    5234:	0031      	movs	r1, r6
    5236:	0028      	movs	r0, r5
    5238:	4b04      	ldr	r3, [pc, #16]	; (524c <setChannelIdStatusT2+0x50>)
    523a:	4798      	blx	r3
    523c:	e7ed      	b.n	521a <setChannelIdStatusT2+0x1e>
    523e:	46c0      	nop			; (mov r8, r8)
    5240:	00004a29 	.word	0x00004a29
    5244:	20001328 	.word	0x20001328
    5248:	000050e9 	.word	0x000050e9
    524c:	00005041 	.word	0x00005041

00005250 <UpdateChannelIdStatusT4>:
{
    5250:	b570      	push	{r4, r5, r6, lr}
    5252:	0004      	movs	r4, r0
    5254:	000d      	movs	r5, r1
	RegParams.pChParams[chid].status = statusNew;
    5256:	4923      	ldr	r1, [pc, #140]	; (52e4 <UpdateChannelIdStatusT4+0x94>)
    5258:	790b      	ldrb	r3, [r1, #4]
    525a:	794a      	ldrb	r2, [r1, #5]
    525c:	0212      	lsls	r2, r2, #8
    525e:	431a      	orrs	r2, r3
    5260:	798b      	ldrb	r3, [r1, #6]
    5262:	041b      	lsls	r3, r3, #16
    5264:	431a      	orrs	r2, r3
    5266:	79cb      	ldrb	r3, [r1, #7]
    5268:	061b      	lsls	r3, r3, #24
    526a:	4313      	orrs	r3, r2
    526c:	0042      	lsls	r2, r0, #1
    526e:	54d5      	strb	r5, [r2, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    5270:	4b1d      	ldr	r3, [pc, #116]	; (52e8 <UpdateChannelIdStatusT4+0x98>)
    5272:	5ccb      	ldrb	r3, [r1, r3]
    5274:	4a1d      	ldr	r2, [pc, #116]	; (52ec <UpdateChannelIdStatusT4+0x9c>)
    5276:	5c88      	ldrb	r0, [r1, r2]
    5278:	0200      	lsls	r0, r0, #8
    527a:	4318      	orrs	r0, r3
    527c:	b2c1      	uxtb	r1, r0
    527e:	0a00      	lsrs	r0, r0, #8
    5280:	4b1b      	ldr	r3, [pc, #108]	; (52f0 <UpdateChannelIdStatusT4+0xa0>)
    5282:	4798      	blx	r3
	if(statusNew == ENABLED)
    5284:	2d00      	cmp	r5, #0
    5286:	d029      	beq.n	52dc <UpdateChannelIdStatusT4+0x8c>
		if(RegParams.pOtherChParams[chid].ulfrequency < FREQ_922100KHZ)
    5288:	4a16      	ldr	r2, [pc, #88]	; (52e4 <UpdateChannelIdStatusT4+0x94>)
    528a:	7a10      	ldrb	r0, [r2, #8]
    528c:	7a53      	ldrb	r3, [r2, #9]
    528e:	021b      	lsls	r3, r3, #8
    5290:	4303      	orrs	r3, r0
    5292:	7a90      	ldrb	r0, [r2, #10]
    5294:	0400      	lsls	r0, r0, #16
    5296:	4303      	orrs	r3, r0
    5298:	7ad0      	ldrb	r0, [r2, #11]
    529a:	0600      	lsls	r0, r0, #24
    529c:	4318      	orrs	r0, r3
    529e:	0063      	lsls	r3, r4, #1
    52a0:	191c      	adds	r4, r3, r4
    52a2:	00a4      	lsls	r4, r4, #2
    52a4:	1900      	adds	r0, r0, r4
    52a6:	7803      	ldrb	r3, [r0, #0]
    52a8:	7842      	ldrb	r2, [r0, #1]
    52aa:	0212      	lsls	r2, r2, #8
    52ac:	431a      	orrs	r2, r3
    52ae:	7883      	ldrb	r3, [r0, #2]
    52b0:	041b      	lsls	r3, r3, #16
    52b2:	431a      	orrs	r2, r3
    52b4:	78c3      	ldrb	r3, [r0, #3]
    52b6:	061b      	lsls	r3, r3, #24
    52b8:	4313      	orrs	r3, r2
    52ba:	4a0e      	ldr	r2, [pc, #56]	; (52f4 <UpdateChannelIdStatusT4+0xa4>)
    52bc:	4293      	cmp	r3, r2
    52be:	d80e      	bhi.n	52de <UpdateChannelIdStatusT4+0x8e>
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_KR_LF;
    52c0:	230a      	movs	r3, #10
    52c2:	7283      	strb	r3, [r0, #10]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    52c4:	4b07      	ldr	r3, [pc, #28]	; (52e4 <UpdateChannelIdStatusT4+0x94>)
    52c6:	2284      	movs	r2, #132	; 0x84
    52c8:	0092      	lsls	r2, r2, #2
    52ca:	5c9a      	ldrb	r2, [r3, r2]
    52cc:	490a      	ldr	r1, [pc, #40]	; (52f8 <UpdateChannelIdStatusT4+0xa8>)
    52ce:	5c58      	ldrb	r0, [r3, r1]
    52d0:	0200      	lsls	r0, r0, #8
    52d2:	4310      	orrs	r0, r2
    52d4:	b2c1      	uxtb	r1, r0
    52d6:	0a00      	lsrs	r0, r0, #8
    52d8:	4b05      	ldr	r3, [pc, #20]	; (52f0 <UpdateChannelIdStatusT4+0xa0>)
    52da:	4798      	blx	r3
}
    52dc:	bd70      	pop	{r4, r5, r6, pc}
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_KR_HF;
    52de:	230e      	movs	r3, #14
    52e0:	7283      	strb	r3, [r0, #10]
    52e2:	e7ef      	b.n	52c4 <UpdateChannelIdStatusT4+0x74>
    52e4:	20001328 	.word	0x20001328
    52e8:	0000020e 	.word	0x0000020e
    52ec:	0000020f 	.word	0x0000020f
    52f0:	00008d6d 	.word	0x00008d6d
    52f4:	36f6211f 	.word	0x36f6211f
    52f8:	00000211 	.word	0x00000211

000052fc <UpdateChannelIdStatusT3>:
{
    52fc:	b570      	push	{r4, r5, r6, lr}
    52fe:	0005      	movs	r5, r0
	RegParams.pChParams[chid].status = statusNew;
    5300:	4c17      	ldr	r4, [pc, #92]	; (5360 <UpdateChannelIdStatusT3+0x64>)
    5302:	7923      	ldrb	r3, [r4, #4]
    5304:	7962      	ldrb	r2, [r4, #5]
    5306:	0212      	lsls	r2, r2, #8
    5308:	431a      	orrs	r2, r3
    530a:	79a3      	ldrb	r3, [r4, #6]
    530c:	041b      	lsls	r3, r3, #16
    530e:	431a      	orrs	r2, r3
    5310:	79e3      	ldrb	r3, [r4, #7]
    5312:	061b      	lsls	r3, r3, #24
    5314:	4313      	orrs	r3, r2
    5316:	0042      	lsls	r2, r0, #1
    5318:	54d1      	strb	r1, [r2, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    531a:	4b12      	ldr	r3, [pc, #72]	; (5364 <UpdateChannelIdStatusT3+0x68>)
    531c:	5ce3      	ldrb	r3, [r4, r3]
    531e:	4a12      	ldr	r2, [pc, #72]	; (5368 <UpdateChannelIdStatusT3+0x6c>)
    5320:	5ca0      	ldrb	r0, [r4, r2]
    5322:	0200      	lsls	r0, r0, #8
    5324:	4318      	orrs	r0, r3
    5326:	b2c1      	uxtb	r1, r0
    5328:	0a00      	lsrs	r0, r0, #8
    532a:	4e10      	ldr	r6, [pc, #64]	; (536c <UpdateChannelIdStatusT3+0x70>)
    532c:	47b0      	blx	r6
	PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    532e:	2384      	movs	r3, #132	; 0x84
    5330:	009b      	lsls	r3, r3, #2
    5332:	5ce3      	ldrb	r3, [r4, r3]
    5334:	4a0e      	ldr	r2, [pc, #56]	; (5370 <UpdateChannelIdStatusT3+0x74>)
    5336:	5ca0      	ldrb	r0, [r4, r2]
    5338:	0200      	lsls	r0, r0, #8
    533a:	4318      	orrs	r0, r3
    533c:	b2c1      	uxtb	r1, r0
    533e:	0a00      	lsrs	r0, r0, #8
    5340:	47b0      	blx	r6
	if( RegParams.band == ISM_JPN923)
    5342:	232e      	movs	r3, #46	; 0x2e
    5344:	5ce3      	ldrb	r3, [r4, r3]
    5346:	2b05      	cmp	r3, #5
    5348:	d000      	beq.n	534c <UpdateChannelIdStatusT3+0x50>
}
    534a:	bd70      	pop	{r4, r5, r6, pc}
		RegParams.cmnParams.paramsType2.channelTimer[chid] = 0;
    534c:	3558      	adds	r5, #88	; 0x58
    534e:	00ad      	lsls	r5, r5, #2
    5350:	4b03      	ldr	r3, [pc, #12]	; (5360 <UpdateChannelIdStatusT3+0x64>)
    5352:	195d      	adds	r5, r3, r5
    5354:	2300      	movs	r3, #0
    5356:	722b      	strb	r3, [r5, #8]
    5358:	726b      	strb	r3, [r5, #9]
    535a:	72ab      	strb	r3, [r5, #10]
    535c:	72eb      	strb	r3, [r5, #11]
}
    535e:	e7f4      	b.n	534a <UpdateChannelIdStatusT3+0x4e>
    5360:	20001328 	.word	0x20001328
    5364:	0000020e 	.word	0x0000020e
    5368:	0000020f 	.word	0x0000020f
    536c:	00008d6d 	.word	0x00008d6d
    5370:	00000211 	.word	0x00000211

00005374 <setChannelIdStatusT3>:
{
    5374:	b570      	push	{r4, r5, r6, lr}
    5376:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    5378:	780d      	ldrb	r5, [r1, #0]
    537a:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    537c:	a901      	add	r1, sp, #4
    537e:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    5380:	2301      	movs	r3, #1
    5382:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    5384:	2015      	movs	r0, #21
    5386:	4b0c      	ldr	r3, [pc, #48]	; (53b8 <setChannelIdStatusT3+0x44>)
    5388:	4798      	blx	r3
    538a:	0004      	movs	r4, r0
    538c:	2808      	cmp	r0, #8
    538e:	d003      	beq.n	5398 <setChannelIdStatusT3+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    5390:	240a      	movs	r4, #10
}
    5392:	0020      	movs	r0, r4
    5394:	b002      	add	sp, #8
    5396:	bd70      	pop	{r4, r5, r6, pc}
		if( RegParams.band == ISM_KR920)
    5398:	232e      	movs	r3, #46	; 0x2e
    539a:	4a08      	ldr	r2, [pc, #32]	; (53bc <setChannelIdStatusT3+0x48>)
    539c:	5cd3      	ldrb	r3, [r2, r3]
    539e:	2b04      	cmp	r3, #4
    53a0:	d004      	beq.n	53ac <setChannelIdStatusT3+0x38>
		    UpdateChannelIdStatusT3(updateChid.channelIndex,updateChid.statusNew);
    53a2:	0031      	movs	r1, r6
    53a4:	0028      	movs	r0, r5
    53a6:	4b06      	ldr	r3, [pc, #24]	; (53c0 <setChannelIdStatusT3+0x4c>)
    53a8:	4798      	blx	r3
    53aa:	e7f2      	b.n	5392 <setChannelIdStatusT3+0x1e>
			UpdateChannelIdStatusT4(updateChid.channelIndex,updateChid.statusNew);
    53ac:	0031      	movs	r1, r6
    53ae:	0028      	movs	r0, r5
    53b0:	4b04      	ldr	r3, [pc, #16]	; (53c4 <setChannelIdStatusT3+0x50>)
    53b2:	4798      	blx	r3
    53b4:	e7ed      	b.n	5392 <setChannelIdStatusT3+0x1e>
    53b6:	46c0      	nop			; (mov r8, r8)
    53b8:	00004a29 	.word	0x00004a29
    53bc:	20001328 	.word	0x20001328
    53c0:	000052fd 	.word	0x000052fd
    53c4:	00005251 	.word	0x00005251

000053c8 <LORAREG_GetAttr_JoinDutyCycleRemainingTime>:
{
    53c8:	b530      	push	{r4, r5, lr}
    53ca:	b083      	sub	sp, #12
    53cc:	0014      	movs	r4, r2
	uint32_t timeremaining =0;
    53ce:	2300      	movs	r3, #0
    53d0:	9301      	str	r3, [sp, #4]
	if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    53d2:	4920      	ldr	r1, [pc, #128]	; (5454 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x8c>)
    53d4:	7d0b      	ldrb	r3, [r1, #20]
    53d6:	7d4a      	ldrb	r2, [r1, #21]
    53d8:	0212      	lsls	r2, r2, #8
    53da:	431a      	orrs	r2, r3
    53dc:	7d8b      	ldrb	r3, [r1, #22]
    53de:	041b      	lsls	r3, r3, #16
    53e0:	431a      	orrs	r2, r3
    53e2:	7dcb      	ldrb	r3, [r1, #23]
    53e4:	061b      	lsls	r3, r3, #24
    53e6:	4313      	orrs	r3, r2
    53e8:	7a18      	ldrb	r0, [r3, #8]
    53ea:	4b1b      	ldr	r3, [pc, #108]	; (5458 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x90>)
    53ec:	4798      	blx	r3
    53ee:	2800      	cmp	r0, #0
    53f0:	d107      	bne.n	5402 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x3a>
	memcpy(attrOutput,&timeremaining,sizeof(uint32_t));
    53f2:	2204      	movs	r2, #4
    53f4:	a901      	add	r1, sp, #4
    53f6:	0020      	movs	r0, r4
    53f8:	4b18      	ldr	r3, [pc, #96]	; (545c <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x94>)
    53fa:	4798      	blx	r3
}
    53fc:	2008      	movs	r0, #8
    53fe:	b003      	add	sp, #12
    5400:	bd30      	pop	{r4, r5, pc}
		timeremaining = US_TO_MS(SwTimerReadValue (RegParams.pJoinDutyCycleTimer->timerId));
    5402:	4d14      	ldr	r5, [pc, #80]	; (5454 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x8c>)
    5404:	7d2b      	ldrb	r3, [r5, #20]
    5406:	7d6a      	ldrb	r2, [r5, #21]
    5408:	0212      	lsls	r2, r2, #8
    540a:	431a      	orrs	r2, r3
    540c:	7dab      	ldrb	r3, [r5, #22]
    540e:	041b      	lsls	r3, r3, #16
    5410:	431a      	orrs	r2, r3
    5412:	7deb      	ldrb	r3, [r5, #23]
    5414:	061b      	lsls	r3, r3, #24
    5416:	4313      	orrs	r3, r2
    5418:	7a18      	ldrb	r0, [r3, #8]
    541a:	4b11      	ldr	r3, [pc, #68]	; (5460 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x98>)
    541c:	4798      	blx	r3
		timeremaining = timeremaining + RegParams.pJoinDutyCycleTimer->remainingtime;
    541e:	7d2b      	ldrb	r3, [r5, #20]
    5420:	7d6a      	ldrb	r2, [r5, #21]
    5422:	0212      	lsls	r2, r2, #8
    5424:	431a      	orrs	r2, r3
    5426:	7dab      	ldrb	r3, [r5, #22]
    5428:	041b      	lsls	r3, r3, #16
    542a:	431a      	orrs	r2, r3
    542c:	7deb      	ldrb	r3, [r5, #23]
    542e:	061b      	lsls	r3, r3, #24
    5430:	4313      	orrs	r3, r2
    5432:	791d      	ldrb	r5, [r3, #4]
    5434:	795a      	ldrb	r2, [r3, #5]
    5436:	0212      	lsls	r2, r2, #8
    5438:	432a      	orrs	r2, r5
    543a:	799d      	ldrb	r5, [r3, #6]
    543c:	042d      	lsls	r5, r5, #16
    543e:	432a      	orrs	r2, r5
    5440:	79dd      	ldrb	r5, [r3, #7]
    5442:	062d      	lsls	r5, r5, #24
    5444:	4315      	orrs	r5, r2
		timeremaining = US_TO_MS(SwTimerReadValue (RegParams.pJoinDutyCycleTimer->timerId));
    5446:	21fa      	movs	r1, #250	; 0xfa
    5448:	0089      	lsls	r1, r1, #2
    544a:	4b06      	ldr	r3, [pc, #24]	; (5464 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x9c>)
    544c:	4798      	blx	r3
		timeremaining = timeremaining + RegParams.pJoinDutyCycleTimer->remainingtime;
    544e:	182d      	adds	r5, r5, r0
    5450:	9501      	str	r5, [sp, #4]
    5452:	e7ce      	b.n	53f2 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x2a>
    5454:	20001328 	.word	0x20001328
    5458:	0000992d 	.word	0x0000992d
    545c:	00013e5d 	.word	0x00013e5d
    5460:	00009941 	.word	0x00009941
    5464:	00010e0d 	.word	0x00010e0d

00005468 <LORAREG_GetAttr_Rx1WindowparamsType1>:
{
    5468:	b510      	push	{r4, lr}
    546a:	b082      	sub	sp, #8
    546c:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    546e:	784c      	ldrb	r4, [r1, #1]
    5470:	788b      	ldrb	r3, [r1, #2]
	if(rx1WindowParamReq->joining)
    5472:	780a      	ldrb	r2, [r1, #0]
    5474:	2a00      	cmp	r2, #0
    5476:	d007      	beq.n	5488 <LORAREG_GetAttr_Rx1WindowparamsType1+0x20>
		if (RegParams.lastUsedChannelIndex <= MAX_CHANNELS_BANDWIDTH_125_AU_NA) 
    5478:	232f      	movs	r3, #47	; 0x2f
    547a:	4a23      	ldr	r2, [pc, #140]	; (5508 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    547c:	5cd3      	ldrb	r3, [r2, r3]
    547e:	2b40      	cmp	r3, #64	; 0x40
    5480:	d819      	bhi.n	54b6 <LORAREG_GetAttr_Rx1WindowparamsType1+0x4e>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.minTxDR;
    5482:	2350      	movs	r3, #80	; 0x50
    5484:	33ff      	adds	r3, #255	; 0xff
    5486:	5cd3      	ldrb	r3, [r2, r3]
		            RegParams.cmnParams.paramsType1.RxParamWindowOffset1 - rx1WindowParamReq->drOffset;
    5488:	491f      	ldr	r1, [pc, #124]	; (5508 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    548a:	2256      	movs	r2, #86	; 0x56
    548c:	32ff      	adds	r2, #255	; 0xff
    548e:	5c8a      	ldrb	r2, [r1, r2]
    5490:	1b12      	subs	r2, r2, r4
    5492:	189b      	adds	r3, r3, r2
    5494:	b2db      	uxtb	r3, r3
	rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr + 
    5496:	466a      	mov	r2, sp
    5498:	7113      	strb	r3, [r2, #4]
	if(rx1WindowParams->rx1Dr > RegParams.cmnParams.paramsType1.maxRxDR)
    549a:	22a9      	movs	r2, #169	; 0xa9
    549c:	0052      	lsls	r2, r2, #1
    549e:	5c8a      	ldrb	r2, [r1, r2]
    54a0:	4293      	cmp	r3, r2
    54a2:	d80d      	bhi.n	54c0 <LORAREG_GetAttr_Rx1WindowparamsType1+0x58>
	else if(rx1WindowParams->rx1Dr < RegParams.cmnParams.paramsType1.minRxDR)
    54a4:	2252      	movs	r2, #82	; 0x52
    54a6:	32ff      	adds	r2, #255	; 0xff
    54a8:	4917      	ldr	r1, [pc, #92]	; (5508 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    54aa:	5c8a      	ldrb	r2, [r1, r2]
    54ac:	4293      	cmp	r3, r2
    54ae:	d209      	bcs.n	54c4 <LORAREG_GetAttr_Rx1WindowparamsType1+0x5c>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.minRxDR;
    54b0:	466b      	mov	r3, sp
    54b2:	711a      	strb	r2, [r3, #4]
    54b4:	e006      	b.n	54c4 <LORAREG_GetAttr_Rx1WindowparamsType1+0x5c>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.maxTxDR;
    54b6:	23a8      	movs	r3, #168	; 0xa8
    54b8:	005b      	lsls	r3, r3, #1
    54ba:	4a13      	ldr	r2, [pc, #76]	; (5508 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    54bc:	5cd3      	ldrb	r3, [r2, r3]
    54be:	e7e3      	b.n	5488 <LORAREG_GetAttr_Rx1WindowparamsType1+0x20>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.maxRxDR;
    54c0:	466b      	mov	r3, sp
    54c2:	711a      	strb	r2, [r3, #4]
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    54c4:	4910      	ldr	r1, [pc, #64]	; (5508 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    54c6:	232f      	movs	r3, #47	; 0x2f
    54c8:	5ccc      	ldrb	r4, [r1, r3]
	channelFrequency = RegParams.cmnParams.paramsType1.DownStreamCh0Freq + FREQ_600KHZ * channelIndex;
    54ca:	3b28      	subs	r3, #40	; 0x28
    54cc:	4023      	ands	r3, r4
    54ce:	4c0f      	ldr	r4, [pc, #60]	; (550c <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    54d0:	435c      	muls	r4, r3
    54d2:	234c      	movs	r3, #76	; 0x4c
    54d4:	33ff      	adds	r3, #255	; 0xff
    54d6:	5ccb      	ldrb	r3, [r1, r3]
    54d8:	22a6      	movs	r2, #166	; 0xa6
    54da:	0052      	lsls	r2, r2, #1
    54dc:	5c8a      	ldrb	r2, [r1, r2]
    54de:	0212      	lsls	r2, r2, #8
    54e0:	4313      	orrs	r3, r2
    54e2:	224e      	movs	r2, #78	; 0x4e
    54e4:	32ff      	adds	r2, #255	; 0xff
    54e6:	5c8a      	ldrb	r2, [r1, r2]
    54e8:	0412      	lsls	r2, r2, #16
    54ea:	431a      	orrs	r2, r3
    54ec:	23a7      	movs	r3, #167	; 0xa7
    54ee:	005b      	lsls	r3, r3, #1
    54f0:	5ccb      	ldrb	r3, [r1, r3]
    54f2:	061b      	lsls	r3, r3, #24
    54f4:	4313      	orrs	r3, r2
    54f6:	18e3      	adds	r3, r4, r3
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    54f8:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    54fa:	2208      	movs	r2, #8
    54fc:	4669      	mov	r1, sp
    54fe:	4b04      	ldr	r3, [pc, #16]	; (5510 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa8>)
    5500:	4798      	blx	r3
}
    5502:	2008      	movs	r0, #8
    5504:	b002      	add	sp, #8
    5506:	bd10      	pop	{r4, pc}
    5508:	20001328 	.word	0x20001328
    550c:	000927c0 	.word	0x000927c0
    5510:	00013e5d 	.word	0x00013e5d

00005514 <LORAREG_GetAttr_DRangeChBandT1>:
{
    5514:	b5f0      	push	{r4, r5, r6, r7, lr}
    5516:	46c6      	mov	lr, r8
    5518:	b500      	push	{lr}
    551a:	b084      	sub	sp, #16
    551c:	9201      	str	r2, [sp, #4]
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    551e:	2204      	movs	r2, #4
    5520:	a803      	add	r0, sp, #12
    5522:	4b43      	ldr	r3, [pc, #268]	; (5630 <LORAREG_GetAttr_DRangeChBandT1+0x11c>)
    5524:	4798      	blx	r3
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, (void *)&bandDrReq.chnlMaskCntl)	!= LORAWAN_SUCCESS)
    5526:	a903      	add	r1, sp, #12
    5528:	201b      	movs	r0, #27
    552a:	4b42      	ldr	r3, [pc, #264]	; (5634 <LORAREG_GetAttr_DRangeChBandT1+0x120>)
    552c:	4798      	blx	r3
    552e:	2808      	cmp	r0, #8
    5530:	d004      	beq.n	553c <LORAREG_GetAttr_DRangeChBandT1+0x28>
		result = LORAWAN_INVALID_PARAMETER;
    5532:	200a      	movs	r0, #10
}
    5534:	b004      	add	sp, #16
    5536:	bc04      	pop	{r2}
    5538:	4690      	mov	r8, r2
    553a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		chBandDr = getChBandDrT1(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    553c:	aa03      	add	r2, sp, #12
    553e:	7813      	ldrb	r3, [r2, #0]
    5540:	8857      	ldrh	r7, [r2, #2]
	if( RegParams.band == ISM_AU915)
    5542:	222e      	movs	r2, #46	; 0x2e
    5544:	493c      	ldr	r1, [pc, #240]	; (5638 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    5546:	5c89      	ldrb	r1, [r1, r2]
		auxMinDataRate = DR6;
    5548:	3903      	subs	r1, #3
    554a:	1e4a      	subs	r2, r1, #1
    554c:	4191      	sbcs	r1, r2
    554e:	3106      	adds	r1, #6
	switch (chMaskCntl)
    5550:	2b07      	cmp	r3, #7
    5552:	d869      	bhi.n	5628 <LORAREG_GetAttr_DRangeChBandT1+0x114>
    5554:	009a      	lsls	r2, r3, #2
    5556:	4d39      	ldr	r5, [pc, #228]	; (563c <LORAREG_GetAttr_DRangeChBandT1+0x128>)
    5558:	58aa      	ldr	r2, [r5, r2]
    555a:	4697      	mov	pc, r2
			startingIndex = chMaskCntl << SHIFT4;
    555c:	011b      	lsls	r3, r3, #4
    555e:	b2db      	uxtb	r3, r3
			endingIndex = startingIndex + 16;
    5560:	001a      	movs	r2, r3
    5562:	3210      	adds	r2, #16
    5564:	b2d2      	uxtb	r2, r2
    5566:	4690      	mov	r8, r2
			for (i = startingIndex; i < endingIndex; i++)
    5568:	4293      	cmp	r3, r2
    556a:	d25f      	bcs.n	562c <LORAREG_GetAttr_DRangeChBandT1+0x118>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    556c:	4e32      	ldr	r6, [pc, #200]	; (5638 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    556e:	7935      	ldrb	r5, [r6, #4]
    5570:	7972      	ldrb	r2, [r6, #5]
    5572:	0212      	lsls	r2, r2, #8
    5574:	4315      	orrs	r5, r2
    5576:	79b2      	ldrb	r2, [r6, #6]
    5578:	0412      	lsls	r2, r2, #16
    557a:	432a      	orrs	r2, r5
    557c:	79f5      	ldrb	r5, [r6, #7]
    557e:	062d      	lsls	r5, r5, #24
    5580:	4315      	orrs	r5, r2
    5582:	46ac      	mov	ip, r5
    5584:	2500      	movs	r5, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    5586:	2401      	movs	r4, #1
    5588:	e00c      	b.n	55a4 <LORAREG_GetAttr_DRangeChBandT1+0x90>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    558a:	0011      	movs	r1, r2
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    558c:	7872      	ldrb	r2, [r6, #1]
    558e:	0912      	lsrs	r2, r2, #4
    5590:	42aa      	cmp	r2, r5
    5592:	dd02      	ble.n	559a <LORAREG_GetAttr_DRangeChBandT1+0x86>
    5594:	423c      	tst	r4, r7
    5596:	d011      	beq.n	55bc <LORAREG_GetAttr_DRangeChBandT1+0xa8>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    5598:	0015      	movs	r5, r2
				auxChannelMask = auxChannelMask >> SHIFT1;
    559a:	087f      	lsrs	r7, r7, #1
			for (i = startingIndex; i < endingIndex; i++)
    559c:	3301      	adds	r3, #1
    559e:	b2db      	uxtb	r3, r3
    55a0:	4598      	cmp	r8, r3
    55a2:	d013      	beq.n	55cc <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    55a4:	005e      	lsls	r6, r3, #1
    55a6:	4466      	add	r6, ip
    55a8:	7872      	ldrb	r2, [r6, #1]
    55aa:	0712      	lsls	r2, r2, #28
    55ac:	0f12      	lsrs	r2, r2, #28
    55ae:	428a      	cmp	r2, r1
    55b0:	daec      	bge.n	558c <LORAREG_GetAttr_DRangeChBandT1+0x78>
    55b2:	423c      	tst	r4, r7
    55b4:	d1e9      	bne.n	558a <LORAREG_GetAttr_DRangeChBandT1+0x76>
    55b6:	2f00      	cmp	r7, #0
    55b8:	d1ef      	bne.n	559a <LORAREG_GetAttr_DRangeChBandT1+0x86>
    55ba:	e7e6      	b.n	558a <LORAREG_GetAttr_DRangeChBandT1+0x76>
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    55bc:	2f00      	cmp	r7, #0
    55be:	d0eb      	beq.n	5598 <LORAREG_GetAttr_DRangeChBandT1+0x84>
    55c0:	e7eb      	b.n	559a <LORAREG_GetAttr_DRangeChBandT1+0x86>
			auxMinDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    55c2:	23a8      	movs	r3, #168	; 0xa8
    55c4:	005b      	lsls	r3, r3, #1
    55c6:	4a1c      	ldr	r2, [pc, #112]	; (5638 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    55c8:	5cd1      	ldrb	r1, [r2, r3]
			auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    55ca:	000d      	movs	r5, r1
    55cc:	012d      	lsls	r5, r5, #4
    55ce:	230f      	movs	r3, #15
    55d0:	4019      	ands	r1, r3
    55d2:	430d      	orrs	r5, r1
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    55d4:	9b01      	ldr	r3, [sp, #4]
    55d6:	701d      	strb	r5, [r3, #0]
    55d8:	e7ac      	b.n	5534 <LORAREG_GetAttr_DRangeChBandT1+0x20>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    55da:	4d17      	ldr	r5, [pc, #92]	; (5638 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    55dc:	792b      	ldrb	r3, [r5, #4]
    55de:	796a      	ldrb	r2, [r5, #5]
    55e0:	0212      	lsls	r2, r2, #8
    55e2:	431a      	orrs	r2, r3
    55e4:	79ab      	ldrb	r3, [r5, #6]
    55e6:	041b      	lsls	r3, r3, #16
    55e8:	431a      	orrs	r2, r3
    55ea:	79eb      	ldrb	r3, [r5, #7]
    55ec:	061b      	lsls	r3, r3, #24
    55ee:	4313      	orrs	r3, r2
    55f0:	001a      	movs	r2, r3
    55f2:	3380      	adds	r3, #128	; 0x80
    55f4:	001c      	movs	r4, r3
    55f6:	2500      	movs	r5, #0
    55f8:	e002      	b.n	5600 <LORAREG_GetAttr_DRangeChBandT1+0xec>
    55fa:	3202      	adds	r2, #2
			for (i = 0; i < 64; i++)
    55fc:	42a2      	cmp	r2, r4
    55fe:	d00c      	beq.n	561a <LORAREG_GetAttr_DRangeChBandT1+0x106>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    5600:	0016      	movs	r6, r2
    5602:	7853      	ldrb	r3, [r2, #1]
    5604:	071b      	lsls	r3, r3, #28
    5606:	0f1b      	lsrs	r3, r3, #28
    5608:	428b      	cmp	r3, r1
    560a:	da00      	bge.n	560e <LORAREG_GetAttr_DRangeChBandT1+0xfa>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    560c:	0019      	movs	r1, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    560e:	7873      	ldrb	r3, [r6, #1]
    5610:	091b      	lsrs	r3, r3, #4
    5612:	42ab      	cmp	r3, r5
    5614:	ddf1      	ble.n	55fa <LORAREG_GetAttr_DRangeChBandT1+0xe6>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    5616:	001d      	movs	r5, r3
    5618:	e7ef      	b.n	55fa <LORAREG_GetAttr_DRangeChBandT1+0xe6>
			if (channelMask != 0)    // if there is at least one channel enabled with DR4
    561a:	2f00      	cmp	r7, #0
    561c:	d0d6      	beq.n	55cc <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    561e:	23a8      	movs	r3, #168	; 0xa8
    5620:	005b      	lsls	r3, r3, #1
    5622:	4a05      	ldr	r2, [pc, #20]	; (5638 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    5624:	5cd5      	ldrb	r5, [r2, r3]
    5626:	e7d1      	b.n	55cc <LORAREG_GetAttr_DRangeChBandT1+0xb8>
	uint8_t auxMinDataRate = DR7, auxMaxDataRate = DR0, i;
    5628:	2500      	movs	r5, #0
    562a:	e7cf      	b.n	55cc <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    562c:	2500      	movs	r5, #0
    562e:	e7cd      	b.n	55cc <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    5630:	00013e5d 	.word	0x00013e5d
    5634:	00004b15 	.word	0x00004b15
    5638:	20001328 	.word	0x20001328
    563c:	000194d0 	.word	0x000194d0

00005640 <LORAREG_GetAttr_DefRx2Freq>:
{
    5640:	b510      	push	{r4, lr}
    5642:	0010      	movs	r0, r2
	memcpy(attrOutput,&RegParams.DefRx2Freq,sizeof(uint32_t));
    5644:	2204      	movs	r2, #4
    5646:	4902      	ldr	r1, [pc, #8]	; (5650 <LORAREG_GetAttr_DefRx2Freq+0x10>)
    5648:	4b02      	ldr	r3, [pc, #8]	; (5654 <LORAREG_GetAttr_DefRx2Freq+0x14>)
    564a:	4798      	blx	r3
}
    564c:	2008      	movs	r0, #8
    564e:	bd10      	pop	{r4, pc}
    5650:	20001344 	.word	0x20001344
    5654:	00013e5d 	.word	0x00013e5d

00005658 <LORAREG_GetAttr_DlFrequency>:
{
    5658:	b510      	push	{r4, lr}
    565a:	0013      	movs	r3, r2
	channelId = *(uint8_t *)attrInput;
    565c:	780a      	ldrb	r2, [r1, #0]
	if (channelId > RegParams.maxChannels)
    565e:	212a      	movs	r1, #42	; 0x2a
    5660:	480d      	ldr	r0, [pc, #52]	; (5698 <LORAREG_GetAttr_DlFrequency+0x40>)
    5662:	5641      	ldrsb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    5664:	200a      	movs	r0, #10
	if (channelId > RegParams.maxChannels)
    5666:	428a      	cmp	r2, r1
    5668:	dd00      	ble.n	566c <LORAREG_GetAttr_DlFrequency+0x14>
}
    566a:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,&(RegParams.pOtherChParams[channelId].rx1Frequency),sizeof(uint32_t));
    566c:	4c0a      	ldr	r4, [pc, #40]	; (5698 <LORAREG_GetAttr_DlFrequency+0x40>)
    566e:	7a21      	ldrb	r1, [r4, #8]
    5670:	7a60      	ldrb	r0, [r4, #9]
    5672:	0200      	lsls	r0, r0, #8
    5674:	4308      	orrs	r0, r1
    5676:	7aa1      	ldrb	r1, [r4, #10]
    5678:	0409      	lsls	r1, r1, #16
    567a:	4308      	orrs	r0, r1
    567c:	7ae1      	ldrb	r1, [r4, #11]
    567e:	0609      	lsls	r1, r1, #24
    5680:	4301      	orrs	r1, r0
    5682:	0050      	lsls	r0, r2, #1
    5684:	1882      	adds	r2, r0, r2
    5686:	0092      	lsls	r2, r2, #2
    5688:	1889      	adds	r1, r1, r2
    568a:	3104      	adds	r1, #4
    568c:	2204      	movs	r2, #4
    568e:	0018      	movs	r0, r3
    5690:	4b02      	ldr	r3, [pc, #8]	; (569c <LORAREG_GetAttr_DlFrequency+0x44>)
    5692:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5694:	2008      	movs	r0, #8
    5696:	e7e8      	b.n	566a <LORAREG_GetAttr_DlFrequency+0x12>
    5698:	20001328 	.word	0x20001328
    569c:	00013e5d 	.word	0x00013e5d

000056a0 <LORAREG_GetAttr_DutyCycleTimer>:
{
    56a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    56a2:	46d6      	mov	lr, sl
    56a4:	464f      	mov	r7, r9
    56a6:	4646      	mov	r6, r8
    56a8:	b5c0      	push	{r6, r7, lr}
    56aa:	b084      	sub	sp, #16
    56ac:	9200      	str	r2, [sp, #0]
    currentDataRate = *(uint8_t *)attrInput;
    56ae:	780b      	ldrb	r3, [r1, #0]
    56b0:	469c      	mov	ip, r3
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    56b2:	232a      	movs	r3, #42	; 0x2a
    56b4:	4a5b      	ldr	r2, [pc, #364]	; (5824 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    56b6:	56d6      	ldrsb	r6, [r2, r3]
    56b8:	2e00      	cmp	r6, #0
    56ba:	dd66      	ble.n	578a <LORAREG_GetAttr_DutyCycleTimer+0xea>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    56bc:	0013      	movs	r3, r2
    56be:	7910      	ldrb	r0, [r2, #4]
    56c0:	7952      	ldrb	r2, [r2, #5]
    56c2:	0212      	lsls	r2, r2, #8
    56c4:	4302      	orrs	r2, r0
    56c6:	7998      	ldrb	r0, [r3, #6]
    56c8:	0400      	lsls	r0, r0, #16
    56ca:	4302      	orrs	r2, r0
    56cc:	79d8      	ldrb	r0, [r3, #7]
    56ce:	0600      	lsls	r0, r0, #24
    56d0:	4310      	orrs	r0, r2
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    56d2:	7b1f      	ldrb	r7, [r3, #12]
    56d4:	7b5a      	ldrb	r2, [r3, #13]
    56d6:	0212      	lsls	r2, r2, #8
    56d8:	433a      	orrs	r2, r7
    56da:	7b9f      	ldrb	r7, [r3, #14]
    56dc:	043f      	lsls	r7, r7, #16
    56de:	433a      	orrs	r2, r7
    56e0:	7bdf      	ldrb	r7, [r3, #15]
    56e2:	063f      	lsls	r7, r7, #24
    56e4:	4317      	orrs	r7, r2
    56e6:	2500      	movs	r5, #0
    56e8:	2300      	movs	r3, #0
    56ea:	2201      	movs	r2, #1
    56ec:	4252      	negs	r2, r2
    56ee:	4691      	mov	r9, r2
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    56f0:	4a4c      	ldr	r2, [pc, #304]	; (5824 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    56f2:	4690      	mov	r8, r2
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    56f4:	4662      	mov	r2, ip
    56f6:	9201      	str	r2, [sp, #4]
    56f8:	e004      	b.n	5704 <LORAREG_GetAttr_DutyCycleTimer+0x64>
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    56fa:	3301      	adds	r3, #1
    56fc:	b2db      	uxtb	r3, r3
    56fe:	001d      	movs	r5, r3
    5700:	42b3      	cmp	r3, r6
    5702:	da27      	bge.n	5754 <LORAREG_GetAttr_DutyCycleTimer+0xb4>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    5704:	0059      	lsls	r1, r3, #1
    5706:	1841      	adds	r1, r0, r1
    5708:	780a      	ldrb	r2, [r1, #0]
    570a:	2a00      	cmp	r2, #0
    570c:	d0f5      	beq.n	56fa <LORAREG_GetAttr_DutyCycleTimer+0x5a>
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    570e:	006a      	lsls	r2, r5, #1
    5710:	1952      	adds	r2, r2, r5
    5712:	0092      	lsls	r2, r2, #2
    5714:	4442      	add	r2, r8
    5716:	32ab      	adds	r2, #171	; 0xab
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    5718:	7815      	ldrb	r5, [r2, #0]
    571a:	006a      	lsls	r2, r5, #1
    571c:	1952      	adds	r2, r2, r5
    571e:	0092      	lsls	r2, r2, #2
    5720:	18ba      	adds	r2, r7, r2
    5722:	7a15      	ldrb	r5, [r2, #8]
    5724:	7a54      	ldrb	r4, [r2, #9]
    5726:	0224      	lsls	r4, r4, #8
    5728:	4325      	orrs	r5, r4
    572a:	7a94      	ldrb	r4, [r2, #10]
    572c:	0424      	lsls	r4, r4, #16
    572e:	4325      	orrs	r5, r4
    5730:	7ad2      	ldrb	r2, [r2, #11]
    5732:	0612      	lsls	r2, r2, #24
    5734:	432a      	orrs	r2, r5
    5736:	d0e0      	beq.n	56fa <LORAREG_GetAttr_DutyCycleTimer+0x5a>
    5738:	454a      	cmp	r2, r9
    573a:	d8de      	bhi.n	56fa <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    573c:	784d      	ldrb	r5, [r1, #1]
    573e:	072d      	lsls	r5, r5, #28
    5740:	0f2d      	lsrs	r5, r5, #28
			   (RegParams.pSubBandParams[bandId].subBandTimeout <= minimSubBandTimer) && 
    5742:	45ac      	cmp	ip, r5
    5744:	dbd9      	blt.n	56fa <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			   (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    5746:	7849      	ldrb	r1, [r1, #1]
    5748:	0909      	lsrs	r1, r1, #4
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    574a:	9c01      	ldr	r4, [sp, #4]
    574c:	428c      	cmp	r4, r1
    574e:	dcd4      	bgt.n	56fa <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			    minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    5750:	4691      	mov	r9, r2
    5752:	e7d2      	b.n	56fa <LORAREG_GetAttr_DutyCycleTimer+0x5a>
    if((UINT32_MAX != minimSubBandTimer) && (minimSubBandTimer >= RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout))
    5754:	464b      	mov	r3, r9
    5756:	3301      	adds	r3, #1
    5758:	d017      	beq.n	578a <LORAREG_GetAttr_DutyCycleTimer+0xea>
    575a:	4932      	ldr	r1, [pc, #200]	; (5824 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    575c:	23ba      	movs	r3, #186	; 0xba
    575e:	33ff      	adds	r3, #255	; 0xff
    5760:	5ccb      	ldrb	r3, [r1, r3]
    5762:	22dd      	movs	r2, #221	; 0xdd
    5764:	0052      	lsls	r2, r2, #1
    5766:	5c8a      	ldrb	r2, [r1, r2]
    5768:	0212      	lsls	r2, r2, #8
    576a:	431a      	orrs	r2, r3
    576c:	23bc      	movs	r3, #188	; 0xbc
    576e:	33ff      	adds	r3, #255	; 0xff
    5770:	5ccb      	ldrb	r3, [r1, r3]
    5772:	041b      	lsls	r3, r3, #16
    5774:	431a      	orrs	r2, r3
    5776:	23de      	movs	r3, #222	; 0xde
    5778:	005b      	lsls	r3, r3, #1
    577a:	5ccb      	ldrb	r3, [r1, r3]
    577c:	061b      	lsls	r3, r3, #24
    577e:	4313      	orrs	r3, r2
    5780:	4599      	cmp	r9, r3
    5782:	d302      	bcc.n	578a <LORAREG_GetAttr_DutyCycleTimer+0xea>
	    minDutyCycleTimer = minimSubBandTimer;
    5784:	464b      	mov	r3, r9
    5786:	9303      	str	r3, [sp, #12]
    5788:	e013      	b.n	57b2 <LORAREG_GetAttr_DutyCycleTimer+0x112>
	    minDutyCycleTimer = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    578a:	4926      	ldr	r1, [pc, #152]	; (5824 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    578c:	23ba      	movs	r3, #186	; 0xba
    578e:	33ff      	adds	r3, #255	; 0xff
    5790:	5ccb      	ldrb	r3, [r1, r3]
    5792:	22dd      	movs	r2, #221	; 0xdd
    5794:	0052      	lsls	r2, r2, #1
    5796:	5c8a      	ldrb	r2, [r1, r2]
    5798:	0212      	lsls	r2, r2, #8
    579a:	431a      	orrs	r2, r3
    579c:	23bc      	movs	r3, #188	; 0xbc
    579e:	33ff      	adds	r3, #255	; 0xff
    57a0:	5ccb      	ldrb	r3, [r1, r3]
    57a2:	041b      	lsls	r3, r3, #16
    57a4:	431a      	orrs	r2, r3
    57a6:	23de      	movs	r3, #222	; 0xde
    57a8:	005b      	lsls	r3, r3, #1
    57aa:	5ccb      	ldrb	r3, [r1, r3]
    57ac:	061b      	lsls	r3, r3, #24
    57ae:	4313      	orrs	r3, r2
    57b0:	9303      	str	r3, [sp, #12]
    ticks = SwTimerReadValue (RegParams.pDutyCycleTimer->timerId);
    57b2:	491c      	ldr	r1, [pc, #112]	; (5824 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    57b4:	7c0b      	ldrb	r3, [r1, #16]
    57b6:	7c4a      	ldrb	r2, [r1, #17]
    57b8:	0212      	lsls	r2, r2, #8
    57ba:	431a      	orrs	r2, r3
    57bc:	7c8b      	ldrb	r3, [r1, #18]
    57be:	041b      	lsls	r3, r3, #16
    57c0:	431a      	orrs	r2, r3
    57c2:	7ccb      	ldrb	r3, [r1, #19]
    57c4:	061b      	lsls	r3, r3, #24
    57c6:	4313      	orrs	r3, r2
    57c8:	7918      	ldrb	r0, [r3, #4]
    57ca:	4b17      	ldr	r3, [pc, #92]	; (5828 <LORAREG_GetAttr_DutyCycleTimer+0x188>)
    57cc:	4798      	blx	r3
	if( minDutyCycleTimer != 0)
    57ce:	9e03      	ldr	r6, [sp, #12]
    57d0:	2e00      	cmp	r6, #0
    57d2:	d01b      	beq.n	580c <LORAREG_GetAttr_DutyCycleTimer+0x16c>
    delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    57d4:	4913      	ldr	r1, [pc, #76]	; (5824 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    57d6:	7c0b      	ldrb	r3, [r1, #16]
    57d8:	7c4a      	ldrb	r2, [r1, #17]
    57da:	0212      	lsls	r2, r2, #8
    57dc:	431a      	orrs	r2, r3
    57de:	7c8b      	ldrb	r3, [r1, #18]
    57e0:	041b      	lsls	r3, r3, #16
    57e2:	431a      	orrs	r2, r3
    57e4:	7ccb      	ldrb	r3, [r1, #19]
    57e6:	061b      	lsls	r3, r3, #24
    57e8:	4313      	orrs	r3, r2
    57ea:	781d      	ldrb	r5, [r3, #0]
    57ec:	785a      	ldrb	r2, [r3, #1]
    57ee:	0212      	lsls	r2, r2, #8
    57f0:	432a      	orrs	r2, r5
    57f2:	789d      	ldrb	r5, [r3, #2]
    57f4:	042d      	lsls	r5, r5, #16
    57f6:	432a      	orrs	r2, r5
    57f8:	78dd      	ldrb	r5, [r3, #3]
    57fa:	062d      	lsls	r5, r5, #24
    57fc:	4315      	orrs	r5, r2
    57fe:	21fa      	movs	r1, #250	; 0xfa
    5800:	0089      	lsls	r1, r1, #2
    5802:	4b0a      	ldr	r3, [pc, #40]	; (582c <LORAREG_GetAttr_DutyCycleTimer+0x18c>)
    5804:	4798      	blx	r3
    5806:	1a2d      	subs	r5, r5, r0
		minDutyCycleTimer = minDutyCycleTimer - delta; //Logically delta will not be greater than minDcTimer
    5808:	1b75      	subs	r5, r6, r5
    580a:	9503      	str	r5, [sp, #12]
    memcpy(attrOutput,&minDutyCycleTimer,sizeof(uint32_t));
    580c:	2204      	movs	r2, #4
    580e:	a903      	add	r1, sp, #12
    5810:	9800      	ldr	r0, [sp, #0]
    5812:	4b07      	ldr	r3, [pc, #28]	; (5830 <LORAREG_GetAttr_DutyCycleTimer+0x190>)
    5814:	4798      	blx	r3
}
    5816:	2008      	movs	r0, #8
    5818:	b004      	add	sp, #16
    581a:	bc1c      	pop	{r2, r3, r4}
    581c:	4690      	mov	r8, r2
    581e:	4699      	mov	r9, r3
    5820:	46a2      	mov	sl, r4
    5822:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5824:	20001328 	.word	0x20001328
    5828:	00009941 	.word	0x00009941
    582c:	00010e0d 	.word	0x00010e0d
    5830:	00013e5d 	.word	0x00013e5d

00005834 <LORAREG_GetAttr_Rx1WindowparamsType2>:
{
    5834:	b500      	push	{lr}
    5836:	b083      	sub	sp, #12
    5838:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    583a:	784a      	ldrb	r2, [r1, #1]
    583c:	788b      	ldrb	r3, [r1, #2]
    if (rx1WindowParamReq->currDr >= rx1WindowParamReq->drOffset)
    583e:	429a      	cmp	r2, r3
    5840:	d925      	bls.n	588e <LORAREG_GetAttr_Rx1WindowparamsType2+0x5a>
        rx1WindowParams->rx1Dr = DR0;
    5842:	2300      	movs	r3, #0
    5844:	466a      	mov	r2, sp
    5846:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    5848:	4913      	ldr	r1, [pc, #76]	; (5898 <LORAREG_GetAttr_Rx1WindowparamsType2+0x64>)
    584a:	7a0b      	ldrb	r3, [r1, #8]
    584c:	7a4a      	ldrb	r2, [r1, #9]
    584e:	0212      	lsls	r2, r2, #8
    5850:	4313      	orrs	r3, r2
    5852:	7a8a      	ldrb	r2, [r1, #10]
    5854:	0412      	lsls	r2, r2, #16
    5856:	431a      	orrs	r2, r3
    5858:	7acb      	ldrb	r3, [r1, #11]
    585a:	061b      	lsls	r3, r3, #24
    585c:	431a      	orrs	r2, r3
    585e:	232f      	movs	r3, #47	; 0x2f
    5860:	5cc9      	ldrb	r1, [r1, r3]
    5862:	004b      	lsls	r3, r1, #1
    5864:	185b      	adds	r3, r3, r1
    5866:	009b      	lsls	r3, r3, #2
    5868:	189b      	adds	r3, r3, r2
    586a:	7919      	ldrb	r1, [r3, #4]
    586c:	795a      	ldrb	r2, [r3, #5]
    586e:	0212      	lsls	r2, r2, #8
    5870:	4311      	orrs	r1, r2
    5872:	799a      	ldrb	r2, [r3, #6]
    5874:	0412      	lsls	r2, r2, #16
    5876:	430a      	orrs	r2, r1
    5878:	79db      	ldrb	r3, [r3, #7]
    587a:	061b      	lsls	r3, r3, #24
    587c:	4313      	orrs	r3, r2
    587e:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    5880:	2208      	movs	r2, #8
    5882:	4669      	mov	r1, sp
    5884:	4b05      	ldr	r3, [pc, #20]	; (589c <LORAREG_GetAttr_Rx1WindowparamsType2+0x68>)
    5886:	4798      	blx	r3
}
    5888:	2008      	movs	r0, #8
    588a:	b003      	add	sp, #12
    588c:	bd00      	pop	{pc}
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - rx1WindowParamReq->drOffset;
    588e:	1a9b      	subs	r3, r3, r2
    5890:	466a      	mov	r2, sp
    5892:	7113      	strb	r3, [r2, #4]
    5894:	e7d8      	b.n	5848 <LORAREG_GetAttr_Rx1WindowparamsType2+0x14>
    5896:	46c0      	nop			; (mov r8, r8)
    5898:	20001328 	.word	0x20001328
    589c:	00013e5d 	.word	0x00013e5d

000058a0 <LORAREG_GetAttr_DRangeChBandT2>:
{
    58a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    58a2:	46c6      	mov	lr, r8
    58a4:	b500      	push	{lr}
    58a6:	b082      	sub	sp, #8
    58a8:	4690      	mov	r8, r2
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    58aa:	ad01      	add	r5, sp, #4
    58ac:	2204      	movs	r2, #4
    58ae:	0028      	movs	r0, r5
    58b0:	4b38      	ldr	r3, [pc, #224]	; (5994 <LORAREG_GetAttr_DRangeChBandT2+0xf4>)
    58b2:	4798      	blx	r3
	switch (chMaskCntl)
    58b4:	782b      	ldrb	r3, [r5, #0]
    58b6:	2b00      	cmp	r3, #0
    58b8:	d017      	beq.n	58ea <LORAREG_GetAttr_DRangeChBandT2+0x4a>
    58ba:	2b06      	cmp	r3, #6
    58bc:	d159      	bne.n	5972 <LORAREG_GetAttr_DRangeChBandT2+0xd2>
			for (i = 0; i < RegParams.maxChannels; i++)
    58be:	3324      	adds	r3, #36	; 0x24
    58c0:	4a35      	ldr	r2, [pc, #212]	; (5998 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    58c2:	56d7      	ldrsb	r7, [r2, r3]
    58c4:	2000      	movs	r0, #0
    58c6:	2507      	movs	r5, #7
    58c8:	2f00      	cmp	r7, #0
    58ca:	dd54      	ble.n	5976 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    58cc:	4a32      	ldr	r2, [pc, #200]	; (5998 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    58ce:	7916      	ldrb	r6, [r2, #4]
    58d0:	7953      	ldrb	r3, [r2, #5]
    58d2:	021b      	lsls	r3, r3, #8
    58d4:	4333      	orrs	r3, r6
    58d6:	7996      	ldrb	r6, [r2, #6]
    58d8:	0436      	lsls	r6, r6, #16
    58da:	4333      	orrs	r3, r6
    58dc:	79d6      	ldrb	r6, [r2, #7]
    58de:	0636      	lsls	r6, r6, #24
    58e0:	431e      	orrs	r6, r3
    58e2:	2000      	movs	r0, #0
    58e4:	2507      	movs	r5, #7
    58e6:	2200      	movs	r2, #0
    58e8:	e035      	b.n	5956 <LORAREG_GetAttr_DRangeChBandT2+0xb6>
			for (i = 0; i < RegParams.maxChannels; i++)
    58ea:	232a      	movs	r3, #42	; 0x2a
    58ec:	4a2a      	ldr	r2, [pc, #168]	; (5998 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    58ee:	56d3      	ldrsb	r3, [r2, r3]
    58f0:	469c      	mov	ip, r3
    58f2:	2b00      	cmp	r3, #0
    58f4:	dd4a      	ble.n	598c <LORAREG_GetAttr_DRangeChBandT2+0xec>
		chBandDr = getChBandDrT2(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    58f6:	ab01      	add	r3, sp, #4
    58f8:	885e      	ldrh	r6, [r3, #2]
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    58fa:	7917      	ldrb	r7, [r2, #4]
    58fc:	7953      	ldrb	r3, [r2, #5]
    58fe:	021b      	lsls	r3, r3, #8
    5900:	433b      	orrs	r3, r7
    5902:	7997      	ldrb	r7, [r2, #6]
    5904:	043f      	lsls	r7, r7, #16
    5906:	433b      	orrs	r3, r7
    5908:	79d7      	ldrb	r7, [r2, #7]
    590a:	063f      	lsls	r7, r7, #24
    590c:	431f      	orrs	r7, r3
    590e:	2000      	movs	r0, #0
    5910:	2507      	movs	r5, #7
    5912:	2200      	movs	r2, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    5914:	2401      	movs	r4, #1
    5916:	e00b      	b.n	5930 <LORAREG_GetAttr_DRangeChBandT2+0x90>
    5918:	784b      	ldrb	r3, [r1, #1]
    591a:	091b      	lsrs	r3, r3, #4
    591c:	4283      	cmp	r3, r0
    591e:	dd02      	ble.n	5926 <LORAREG_GetAttr_DRangeChBandT2+0x86>
    5920:	4234      	tst	r4, r6
    5922:	d000      	beq.n	5926 <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    5924:	0018      	movs	r0, r3
				auxChannelMask = auxChannelMask >> SHIFT1;
    5926:	0876      	lsrs	r6, r6, #1
			for (i = 0; i < RegParams.maxChannels; i++)
    5928:	3201      	adds	r2, #1
    592a:	b2d2      	uxtb	r2, r2
    592c:	4562      	cmp	r2, ip
    592e:	da22      	bge.n	5976 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    5930:	0051      	lsls	r1, r2, #1
    5932:	1879      	adds	r1, r7, r1
    5934:	784b      	ldrb	r3, [r1, #1]
    5936:	071b      	lsls	r3, r3, #28
    5938:	0f1b      	lsrs	r3, r3, #28
    593a:	42ab      	cmp	r3, r5
    593c:	daec      	bge.n	5918 <LORAREG_GetAttr_DRangeChBandT2+0x78>
    593e:	4234      	tst	r4, r6
    5940:	d0f1      	beq.n	5926 <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    5942:	001d      	movs	r5, r3
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    5944:	784b      	ldrb	r3, [r1, #1]
    5946:	091b      	lsrs	r3, r3, #4
    5948:	4298      	cmp	r0, r3
    594a:	dbeb      	blt.n	5924 <LORAREG_GetAttr_DRangeChBandT2+0x84>
    594c:	e7eb      	b.n	5926 <LORAREG_GetAttr_DRangeChBandT2+0x86>
			for (i = 0; i < RegParams.maxChannels; i++)
    594e:	3201      	adds	r2, #1
    5950:	b2d2      	uxtb	r2, r2
    5952:	42ba      	cmp	r2, r7
    5954:	da0f      	bge.n	5976 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    5956:	0051      	lsls	r1, r2, #1
    5958:	1871      	adds	r1, r6, r1
    595a:	784b      	ldrb	r3, [r1, #1]
    595c:	071b      	lsls	r3, r3, #28
    595e:	0f1b      	lsrs	r3, r3, #28
    5960:	42ab      	cmp	r3, r5
    5962:	da00      	bge.n	5966 <LORAREG_GetAttr_DRangeChBandT2+0xc6>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    5964:	001d      	movs	r5, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    5966:	784b      	ldrb	r3, [r1, #1]
    5968:	091b      	lsrs	r3, r3, #4
    596a:	4283      	cmp	r3, r0
    596c:	ddef      	ble.n	594e <LORAREG_GetAttr_DRangeChBandT2+0xae>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    596e:	0018      	movs	r0, r3
    5970:	e7ed      	b.n	594e <LORAREG_GetAttr_DRangeChBandT2+0xae>
			auxMaxDataRate = 0xFF;
    5972:	20ff      	movs	r0, #255	; 0xff
			auxMinDataRate = 0xFF;
    5974:	25ff      	movs	r5, #255	; 0xff
    5976:	0100      	lsls	r0, r0, #4
    5978:	230f      	movs	r3, #15
    597a:	401d      	ands	r5, r3
    597c:	4328      	orrs	r0, r5
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    597e:	4643      	mov	r3, r8
    5980:	7018      	strb	r0, [r3, #0]
}
    5982:	2008      	movs	r0, #8
    5984:	b002      	add	sp, #8
    5986:	bc04      	pop	{r2}
    5988:	4690      	mov	r8, r2
    598a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for (i = 0; i < RegParams.maxChannels; i++)
    598c:	2000      	movs	r0, #0
    598e:	2507      	movs	r5, #7
    5990:	e7f1      	b.n	5976 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
    5992:	46c0      	nop			; (mov r8, r8)
    5994:	00013e5d 	.word	0x00013e5d
    5998:	20001328 	.word	0x20001328

0000599c <LORAREG_GetAttr_FreqT2>:
{
    599c:	b510      	push	{r4, lr}
    599e:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    59a0:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    59a2:	222a      	movs	r2, #42	; 0x2a
    59a4:	490d      	ldr	r1, [pc, #52]	; (59dc <LORAREG_GetAttr_FreqT2+0x40>)
    59a6:	568a      	ldrsb	r2, [r1, r2]
		return LORAWAN_INVALID_PARAMETER;
    59a8:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    59aa:	4293      	cmp	r3, r2
    59ac:	dd00      	ble.n	59b0 <LORAREG_GetAttr_FreqT2+0x14>
}
    59ae:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    59b0:	0008      	movs	r0, r1
    59b2:	7a09      	ldrb	r1, [r1, #8]
    59b4:	7a42      	ldrb	r2, [r0, #9]
    59b6:	0212      	lsls	r2, r2, #8
    59b8:	430a      	orrs	r2, r1
    59ba:	7a81      	ldrb	r1, [r0, #10]
    59bc:	0409      	lsls	r1, r1, #16
    59be:	430a      	orrs	r2, r1
    59c0:	7ac1      	ldrb	r1, [r0, #11]
    59c2:	0609      	lsls	r1, r1, #24
    59c4:	4311      	orrs	r1, r2
    59c6:	005a      	lsls	r2, r3, #1
    59c8:	18d3      	adds	r3, r2, r3
    59ca:	009b      	lsls	r3, r3, #2
    59cc:	18c9      	adds	r1, r1, r3
    59ce:	2204      	movs	r2, #4
    59d0:	0020      	movs	r0, r4
    59d2:	4b03      	ldr	r3, [pc, #12]	; (59e0 <LORAREG_GetAttr_FreqT2+0x44>)
    59d4:	4798      	blx	r3
	return result;
    59d6:	2008      	movs	r0, #8
    59d8:	e7e9      	b.n	59ae <LORAREG_GetAttr_FreqT2+0x12>
    59da:	46c0      	nop			; (mov r8, r8)
    59dc:	20001328 	.word	0x20001328
    59e0:	00013e5d 	.word	0x00013e5d

000059e4 <LORAREG_GetAttr_Rx1WindowparamsType4>:
{
    59e4:	b510      	push	{r4, lr}
    59e6:	b082      	sub	sp, #8
    59e8:	0010      	movs	r0, r2
	if((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923)) != 0) &&  rx1WindowParamReq->joining)
    59ea:	232e      	movs	r3, #46	; 0x2e
    59ec:	4a37      	ldr	r2, [pc, #220]	; (5acc <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    59ee:	5cd2      	ldrb	r2, [r2, r3]
    59f0:	4b37      	ldr	r3, [pc, #220]	; (5ad0 <LORAREG_GetAttr_Rx1WindowparamsType4+0xec>)
    59f2:	4113      	asrs	r3, r2
    59f4:	07db      	lsls	r3, r3, #31
    59f6:	d502      	bpl.n	59fe <LORAREG_GetAttr_Rx1WindowparamsType4+0x1a>
    59f8:	780b      	ldrb	r3, [r1, #0]
    59fa:	2b00      	cmp	r3, #0
    59fc:	d116      	bne.n	5a2c <LORAREG_GetAttr_Rx1WindowparamsType4+0x48>
	if(RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1)
    59fe:	23e1      	movs	r3, #225	; 0xe1
    5a00:	005b      	lsls	r3, r3, #1
    5a02:	4a32      	ldr	r2, [pc, #200]	; (5acc <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    5a04:	5cd4      	ldrb	r4, [r2, r3]
		minDR = DR2;
    5a06:	3bc1      	subs	r3, #193	; 0xc1
    5a08:	3bff      	subs	r3, #255	; 0xff
    5a0a:	401c      	ands	r4, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    5a0c:	784b      	ldrb	r3, [r1, #1]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    5a0e:	2b05      	cmp	r3, #5
    5a10:	d92c      	bls.n	5a6c <LORAREG_GetAttr_Rx1WindowparamsType4+0x88>
    5a12:	2205      	movs	r2, #5
    5a14:	1ad3      	subs	r3, r2, r3
    5a16:	b25b      	sxtb	r3, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    5a18:	788a      	ldrb	r2, [r1, #2]
	if (rx1WindowParamReq->currDr >= effectiveDROffset)
    5a1a:	429a      	cmp	r2, r3
    5a1c:	db31      	blt.n	5a82 <LORAREG_GetAttr_Rx1WindowparamsType4+0x9e>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    5a1e:	1ad3      	subs	r3, r2, r3
    5a20:	b2db      	uxtb	r3, r3
		if(rx1WindowParams->rx1Dr < minDR)
    5a22:	42a3      	cmp	r3, r4
    5a24:	d224      	bcs.n	5a70 <LORAREG_GetAttr_Rx1WindowparamsType4+0x8c>
			rx1WindowParams->rx1Dr = minDR;
    5a26:	466b      	mov	r3, sp
    5a28:	711c      	strb	r4, [r3, #4]
    5a2a:	e02c      	b.n	5a86 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = DR2;
    5a2c:	2302      	movs	r3, #2
    5a2e:	466a      	mov	r2, sp
    5a30:	7113      	strb	r3, [r2, #4]
		rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    5a32:	4926      	ldr	r1, [pc, #152]	; (5acc <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    5a34:	7a0b      	ldrb	r3, [r1, #8]
    5a36:	7a4a      	ldrb	r2, [r1, #9]
    5a38:	0212      	lsls	r2, r2, #8
    5a3a:	4313      	orrs	r3, r2
    5a3c:	7a8a      	ldrb	r2, [r1, #10]
    5a3e:	0412      	lsls	r2, r2, #16
    5a40:	431a      	orrs	r2, r3
    5a42:	7acb      	ldrb	r3, [r1, #11]
    5a44:	061b      	lsls	r3, r3, #24
    5a46:	431a      	orrs	r2, r3
    5a48:	232f      	movs	r3, #47	; 0x2f
    5a4a:	5cc9      	ldrb	r1, [r1, r3]
    5a4c:	004b      	lsls	r3, r1, #1
    5a4e:	185b      	adds	r3, r3, r1
    5a50:	009b      	lsls	r3, r3, #2
    5a52:	189b      	adds	r3, r3, r2
    5a54:	7919      	ldrb	r1, [r3, #4]
    5a56:	795a      	ldrb	r2, [r3, #5]
    5a58:	0212      	lsls	r2, r2, #8
    5a5a:	4311      	orrs	r1, r2
    5a5c:	799a      	ldrb	r2, [r3, #6]
    5a5e:	0412      	lsls	r2, r2, #16
    5a60:	430a      	orrs	r2, r1
    5a62:	79db      	ldrb	r3, [r3, #7]
    5a64:	061b      	lsls	r3, r3, #24
    5a66:	4313      	orrs	r3, r2
    5a68:	9300      	str	r3, [sp, #0]
    5a6a:	e028      	b.n	5abe <LORAREG_GetAttr_Rx1WindowparamsType4+0xda>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    5a6c:	b25b      	sxtb	r3, r3
    5a6e:	e7d3      	b.n	5a18 <LORAREG_GetAttr_Rx1WindowparamsType4+0x34>
		else if(rx1WindowParams->rx1Dr > maxDR)
    5a70:	2b05      	cmp	r3, #5
    5a72:	d802      	bhi.n	5a7a <LORAREG_GetAttr_Rx1WindowparamsType4+0x96>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    5a74:	466a      	mov	r2, sp
    5a76:	7113      	strb	r3, [r2, #4]
    5a78:	e005      	b.n	5a86 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
			rx1WindowParams->rx1Dr = maxDR;
    5a7a:	2305      	movs	r3, #5
    5a7c:	466a      	mov	r2, sp
    5a7e:	7113      	strb	r3, [r2, #4]
    5a80:	e001      	b.n	5a86 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = minDR;
    5a82:	466b      	mov	r3, sp
    5a84:	711c      	strb	r4, [r3, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    5a86:	4911      	ldr	r1, [pc, #68]	; (5acc <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    5a88:	7a0b      	ldrb	r3, [r1, #8]
    5a8a:	7a4a      	ldrb	r2, [r1, #9]
    5a8c:	0212      	lsls	r2, r2, #8
    5a8e:	4313      	orrs	r3, r2
    5a90:	7a8a      	ldrb	r2, [r1, #10]
    5a92:	0412      	lsls	r2, r2, #16
    5a94:	431a      	orrs	r2, r3
    5a96:	7acb      	ldrb	r3, [r1, #11]
    5a98:	061b      	lsls	r3, r3, #24
    5a9a:	431a      	orrs	r2, r3
    5a9c:	232f      	movs	r3, #47	; 0x2f
    5a9e:	5cc9      	ldrb	r1, [r1, r3]
    5aa0:	004b      	lsls	r3, r1, #1
    5aa2:	185b      	adds	r3, r3, r1
    5aa4:	009b      	lsls	r3, r3, #2
    5aa6:	189b      	adds	r3, r3, r2
    5aa8:	7919      	ldrb	r1, [r3, #4]
    5aaa:	795a      	ldrb	r2, [r3, #5]
    5aac:	0212      	lsls	r2, r2, #8
    5aae:	4311      	orrs	r1, r2
    5ab0:	799a      	ldrb	r2, [r3, #6]
    5ab2:	0412      	lsls	r2, r2, #16
    5ab4:	430a      	orrs	r2, r1
    5ab6:	79db      	ldrb	r3, [r3, #7]
    5ab8:	061b      	lsls	r3, r3, #24
    5aba:	4313      	orrs	r3, r2
    5abc:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    5abe:	2208      	movs	r2, #8
    5ac0:	4669      	mov	r1, sp
    5ac2:	4b04      	ldr	r3, [pc, #16]	; (5ad4 <LORAREG_GetAttr_Rx1WindowparamsType4+0xf0>)
    5ac4:	4798      	blx	r3
}
    5ac6:	2008      	movs	r0, #8
    5ac8:	b002      	add	sp, #8
    5aca:	bd10      	pop	{r4, pc}
    5acc:	20001328 	.word	0x20001328
    5ad0:	00007fe0 	.word	0x00007fe0
    5ad4:	00013e5d 	.word	0x00013e5d

00005ad8 <LORAREG_GetAttr_FreqT3>:
{
    5ad8:	b510      	push	{r4, lr}
    5ada:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    5adc:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels) 
    5ade:	222a      	movs	r2, #42	; 0x2a
    5ae0:	490d      	ldr	r1, [pc, #52]	; (5b18 <LORAREG_GetAttr_FreqT3+0x40>)
    5ae2:	568a      	ldrsb	r2, [r1, r2]
		result = LORAWAN_INVALID_PARAMETER;
    5ae4:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels) 
    5ae6:	4293      	cmp	r3, r2
    5ae8:	dd00      	ble.n	5aec <LORAREG_GetAttr_FreqT3+0x14>
}
    5aea:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    5aec:	0008      	movs	r0, r1
    5aee:	7a09      	ldrb	r1, [r1, #8]
    5af0:	7a42      	ldrb	r2, [r0, #9]
    5af2:	0212      	lsls	r2, r2, #8
    5af4:	430a      	orrs	r2, r1
    5af6:	7a81      	ldrb	r1, [r0, #10]
    5af8:	0409      	lsls	r1, r1, #16
    5afa:	430a      	orrs	r2, r1
    5afc:	7ac1      	ldrb	r1, [r0, #11]
    5afe:	0609      	lsls	r1, r1, #24
    5b00:	4311      	orrs	r1, r2
    5b02:	005a      	lsls	r2, r3, #1
    5b04:	18d3      	adds	r3, r2, r3
    5b06:	009b      	lsls	r3, r3, #2
    5b08:	18c9      	adds	r1, r1, r3
    5b0a:	2204      	movs	r2, #4
    5b0c:	0020      	movs	r0, r4
    5b0e:	4b03      	ldr	r3, [pc, #12]	; (5b1c <LORAREG_GetAttr_FreqT3+0x44>)
    5b10:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5b12:	2008      	movs	r0, #8
    5b14:	e7e9      	b.n	5aea <LORAREG_GetAttr_FreqT3+0x12>
    5b16:	46c0      	nop			; (mov r8, r8)
    5b18:	20001328 	.word	0x20001328
    5b1c:	00013e5d 	.word	0x00013e5d

00005b20 <LORAREG_GetAttr_Rx1WindowparamsType3>:
{
    5b20:	b500      	push	{lr}
    5b22:	b083      	sub	sp, #12
    5b24:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    5b26:	784b      	ldrb	r3, [r1, #1]
    5b28:	788a      	ldrb	r2, [r1, #2]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    5b2a:	2b05      	cmp	r3, #5
    5b2c:	d90b      	bls.n	5b46 <LORAREG_GetAttr_Rx1WindowparamsType3+0x26>
    5b2e:	2105      	movs	r1, #5
    5b30:	1acb      	subs	r3, r1, r3
    5b32:	b25b      	sxtb	r3, r3
    if (rx1WindowParamReq->currDr >= effectiveDROffset)
    5b34:	429a      	cmp	r2, r3
    5b36:	db0c      	blt.n	5b52 <LORAREG_GetAttr_Rx1WindowparamsType3+0x32>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    5b38:	1ad3      	subs	r3, r2, r3
    5b3a:	b2db      	uxtb	r3, r3
		else if(rx1WindowParams->rx1Dr > maxDR)
    5b3c:	2b05      	cmp	r3, #5
    5b3e:	d804      	bhi.n	5b4a <LORAREG_GetAttr_Rx1WindowparamsType3+0x2a>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    5b40:	466a      	mov	r2, sp
    5b42:	7113      	strb	r3, [r2, #4]
    5b44:	e008      	b.n	5b58 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    5b46:	b25b      	sxtb	r3, r3
    5b48:	e7f4      	b.n	5b34 <LORAREG_GetAttr_Rx1WindowparamsType3+0x14>
			rx1WindowParams->rx1Dr = maxDR;
    5b4a:	2305      	movs	r3, #5
    5b4c:	466a      	mov	r2, sp
    5b4e:	7113      	strb	r3, [r2, #4]
    5b50:	e002      	b.n	5b58 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
        rx1WindowParams->rx1Dr = minDR;
    5b52:	2300      	movs	r3, #0
    5b54:	466a      	mov	r2, sp
    5b56:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    5b58:	4911      	ldr	r1, [pc, #68]	; (5ba0 <LORAREG_GetAttr_Rx1WindowparamsType3+0x80>)
    5b5a:	7a0b      	ldrb	r3, [r1, #8]
    5b5c:	7a4a      	ldrb	r2, [r1, #9]
    5b5e:	0212      	lsls	r2, r2, #8
    5b60:	4313      	orrs	r3, r2
    5b62:	7a8a      	ldrb	r2, [r1, #10]
    5b64:	0412      	lsls	r2, r2, #16
    5b66:	431a      	orrs	r2, r3
    5b68:	7acb      	ldrb	r3, [r1, #11]
    5b6a:	061b      	lsls	r3, r3, #24
    5b6c:	431a      	orrs	r2, r3
    5b6e:	232f      	movs	r3, #47	; 0x2f
    5b70:	5cc9      	ldrb	r1, [r1, r3]
    5b72:	004b      	lsls	r3, r1, #1
    5b74:	185b      	adds	r3, r3, r1
    5b76:	009b      	lsls	r3, r3, #2
    5b78:	189b      	adds	r3, r3, r2
    5b7a:	7919      	ldrb	r1, [r3, #4]
    5b7c:	795a      	ldrb	r2, [r3, #5]
    5b7e:	0212      	lsls	r2, r2, #8
    5b80:	4311      	orrs	r1, r2
    5b82:	799a      	ldrb	r2, [r3, #6]
    5b84:	0412      	lsls	r2, r2, #16
    5b86:	430a      	orrs	r2, r1
    5b88:	79db      	ldrb	r3, [r3, #7]
    5b8a:	061b      	lsls	r3, r3, #24
    5b8c:	4313      	orrs	r3, r2
    5b8e:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    5b90:	2208      	movs	r2, #8
    5b92:	4669      	mov	r1, sp
    5b94:	4b03      	ldr	r3, [pc, #12]	; (5ba4 <LORAREG_GetAttr_Rx1WindowparamsType3+0x84>)
    5b96:	4798      	blx	r3
}
    5b98:	2008      	movs	r0, #8
    5b9a:	b003      	add	sp, #12
    5b9c:	bd00      	pop	{pc}
    5b9e:	46c0      	nop			; (mov r8, r8)
    5ba0:	20001328 	.word	0x20001328
    5ba4:	00013e5d 	.word	0x00013e5d

00005ba8 <LORAREG_GetAttr_minLBTChPauseTimer>:
{
    5ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5baa:	46de      	mov	lr, fp
    5bac:	4657      	mov	r7, sl
    5bae:	464e      	mov	r6, r9
    5bb0:	4645      	mov	r5, r8
    5bb2:	b5e0      	push	{r5, r6, r7, lr}
    5bb4:	b085      	sub	sp, #20
    5bb6:	9200      	str	r2, [sp, #0]
	uint32_t minim = UINT32_MAX;
    5bb8:	2301      	movs	r3, #1
    5bba:	425b      	negs	r3, r3
    5bbc:	9303      	str	r3, [sp, #12]
	currentDataRate = *(uint8_t *)attrInput;
    5bbe:	780b      	ldrb	r3, [r1, #0]
    5bc0:	4699      	mov	r9, r3
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    5bc2:	232a      	movs	r3, #42	; 0x2a
    5bc4:	4a2a      	ldr	r2, [pc, #168]	; (5c70 <LORAREG_GetAttr_minLBTChPauseTimer+0xc8>)
    5bc6:	56d7      	ldrsb	r7, [r2, r3]
    5bc8:	2f00      	cmp	r7, #0
    5bca:	dd40      	ble.n	5c4e <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    5bcc:	7916      	ldrb	r6, [r2, #4]
    5bce:	7953      	ldrb	r3, [r2, #5]
    5bd0:	021b      	lsls	r3, r3, #8
    5bd2:	4333      	orrs	r3, r6
    5bd4:	7996      	ldrb	r6, [r2, #6]
    5bd6:	0436      	lsls	r6, r6, #16
    5bd8:	4333      	orrs	r3, r6
    5bda:	79d6      	ldrb	r6, [r2, #7]
    5bdc:	0636      	lsls	r6, r6, #24
    5bde:	431e      	orrs	r6, r3
    5be0:	2300      	movs	r3, #0
    5be2:	469a      	mov	sl, r3
    5be4:	3b01      	subs	r3, #1
    5be6:	4698      	mov	r8, r3
    5be8:	2300      	movs	r3, #0
    5bea:	2100      	movs	r1, #0
    5bec:	4694      	mov	ip, r2
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    5bee:	464a      	mov	r2, r9
    5bf0:	9201      	str	r2, [sp, #4]
    5bf2:	46c3      	mov	fp, r8
    5bf4:	e004      	b.n	5c00 <LORAREG_GetAttr_minLBTChPauseTimer+0x58>
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    5bf6:	3101      	adds	r1, #1
    5bf8:	b2c9      	uxtb	r1, r1
    5bfa:	000b      	movs	r3, r1
    5bfc:	42b9      	cmp	r1, r7
    5bfe:	da23      	bge.n	5c48 <LORAREG_GetAttr_minLBTChPauseTimer+0xa0>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    5c00:	004a      	lsls	r2, r1, #1
    5c02:	18b2      	adds	r2, r6, r2
    5c04:	7814      	ldrb	r4, [r2, #0]
    5c06:	2c00      	cmp	r4, #0
    5c08:	d0f5      	beq.n	5bf6 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    5c0a:	3358      	adds	r3, #88	; 0x58
    5c0c:	009b      	lsls	r3, r3, #2
    5c0e:	4463      	add	r3, ip
    5c10:	7a18      	ldrb	r0, [r3, #8]
    5c12:	4680      	mov	r8, r0
    5c14:	7a58      	ldrb	r0, [r3, #9]
    5c16:	0200      	lsls	r0, r0, #8
    5c18:	4645      	mov	r5, r8
    5c1a:	4305      	orrs	r5, r0
    5c1c:	7a98      	ldrb	r0, [r3, #10]
    5c1e:	0400      	lsls	r0, r0, #16
    5c20:	4328      	orrs	r0, r5
    5c22:	7adb      	ldrb	r3, [r3, #11]
    5c24:	061b      	lsls	r3, r3, #24
    5c26:	4303      	orrs	r3, r0
    5c28:	d0e5      	beq.n	5bf6 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
		     && (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) 
    5c2a:	459b      	cmp	fp, r3
    5c2c:	d3e3      	bcc.n	5bf6 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    5c2e:	7850      	ldrb	r0, [r2, #1]
    5c30:	0700      	lsls	r0, r0, #28
    5c32:	0f00      	lsrs	r0, r0, #28
    5c34:	4581      	cmp	r9, r0
    5c36:	dbde      	blt.n	5bf6 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    5c38:	7852      	ldrb	r2, [r2, #1]
    5c3a:	0912      	lsrs	r2, r2, #4
    5c3c:	9801      	ldr	r0, [sp, #4]
    5c3e:	4290      	cmp	r0, r2
    5c40:	dcd9      	bgt.n	5bf6 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    5c42:	46a2      	mov	sl, r4
			minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    5c44:	469b      	mov	fp, r3
    5c46:	e7d6      	b.n	5bf6 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    5c48:	4653      	mov	r3, sl
    5c4a:	2b00      	cmp	r3, #0
    5c4c:	d10c      	bne.n	5c68 <LORAREG_GetAttr_minLBTChPauseTimer+0xc0>
	memcpy(attrOutput,&minim,sizeof(uint32_t));
    5c4e:	2204      	movs	r2, #4
    5c50:	a903      	add	r1, sp, #12
    5c52:	9800      	ldr	r0, [sp, #0]
    5c54:	4b07      	ldr	r3, [pc, #28]	; (5c74 <LORAREG_GetAttr_minLBTChPauseTimer+0xcc>)
    5c56:	4798      	blx	r3
}
    5c58:	2008      	movs	r0, #8
    5c5a:	b005      	add	sp, #20
    5c5c:	bc3c      	pop	{r2, r3, r4, r5}
    5c5e:	4690      	mov	r8, r2
    5c60:	4699      	mov	r9, r3
    5c62:	46a2      	mov	sl, r4
    5c64:	46ab      	mov	fp, r5
    5c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c68:	465b      	mov	r3, fp
    5c6a:	9303      	str	r3, [sp, #12]
    5c6c:	e7ef      	b.n	5c4e <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
    5c6e:	46c0      	nop			; (mov r8, r8)
    5c70:	20001328 	.word	0x20001328
    5c74:	00013e5d 	.word	0x00013e5d

00005c78 <ValidateTxFreqT2>:
{
    5c78:	b500      	push	{lr}
    5c7a:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    5c7c:	2208      	movs	r2, #8
    5c7e:	4668      	mov	r0, sp
    5c80:	4b04      	ldr	r3, [pc, #16]	; (5c94 <ValidateTxFreqT2+0x1c>)
    5c82:	4798      	blx	r3
	retVal = pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,(void *)&val_freqTx.frequencyNew);
    5c84:	4b04      	ldr	r3, [pc, #16]	; (5c98 <ValidateTxFreqT2+0x20>)
    5c86:	685b      	ldr	r3, [r3, #4]
    5c88:	4669      	mov	r1, sp
    5c8a:	2001      	movs	r0, #1
    5c8c:	4798      	blx	r3
}
    5c8e:	b003      	add	sp, #12
    5c90:	bd00      	pop	{pc}
    5c92:	46c0      	nop			; (mov r8, r8)
    5c94:	00013e5d 	.word	0x00013e5d
    5c98:	20000ce0 	.word	0x20000ce0

00005c9c <ValidateFreqIN>:
{
    5c9c:	b500      	push	{lr}
    5c9e:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    5ca0:	2204      	movs	r2, #4
    5ca2:	a801      	add	r0, sp, #4
    5ca4:	4b06      	ldr	r3, [pc, #24]	; (5cc0 <ValidateFreqIN+0x24>)
    5ca6:	4798      	blx	r3
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    5ca8:	9b01      	ldr	r3, [sp, #4]
    5caa:	4a06      	ldr	r2, [pc, #24]	; (5cc4 <ValidateFreqIN+0x28>)
    5cac:	4694      	mov	ip, r2
    5cae:	4463      	add	r3, ip
    5cb0:	4a05      	ldr	r2, [pc, #20]	; (5cc8 <ValidateFreqIN+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5cb2:	2008      	movs	r0, #8
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    5cb4:	4293      	cmp	r3, r2
    5cb6:	d900      	bls.n	5cba <ValidateFreqIN+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    5cb8:	3002      	adds	r0, #2
}
    5cba:	b003      	add	sp, #12
    5cbc:	bd00      	pop	{pc}
    5cbe:	46c0      	nop			; (mov r8, r8)
    5cc0:	00013e5d 	.word	0x00013e5d
    5cc4:	cc7125c0 	.word	0xcc7125c0
    5cc8:	001e8480 	.word	0x001e8480

00005ccc <ValidateFreqJP>:
{
    5ccc:	b500      	push	{lr}
    5cce:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    5cd0:	2204      	movs	r2, #4
    5cd2:	a801      	add	r0, sp, #4
    5cd4:	4b06      	ldr	r3, [pc, #24]	; (5cf0 <ValidateFreqJP+0x24>)
    5cd6:	4798      	blx	r3
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    5cd8:	9b01      	ldr	r3, [sp, #4]
    5cda:	4a06      	ldr	r2, [pc, #24]	; (5cf4 <ValidateFreqJP+0x28>)
    5cdc:	4694      	mov	ip, r2
    5cde:	4463      	add	r3, ip
    5ce0:	4a05      	ldr	r2, [pc, #20]	; (5cf8 <ValidateFreqJP+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5ce2:	2008      	movs	r0, #8
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    5ce4:	4293      	cmp	r3, r2
    5ce6:	d900      	bls.n	5cea <ValidateFreqJP+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    5ce8:	3002      	adds	r0, #2
}
    5cea:	b003      	add	sp, #12
    5cec:	bd00      	pop	{pc}
    5cee:	46c0      	nop			; (mov r8, r8)
    5cf0:	00013e5d 	.word	0x00013e5d
    5cf4:	c929ea00 	.word	0xc929ea00
    5cf8:	007a1200 	.word	0x007a1200

00005cfc <ValidateFreqKR>:
{
    5cfc:	b500      	push	{lr}
    5cfe:	b083      	sub	sp, #12
	memcpy(&freqNew,attrInput,sizeof(uint32_t));
    5d00:	2204      	movs	r2, #4
    5d02:	a801      	add	r0, sp, #4
    5d04:	4b0a      	ldr	r3, [pc, #40]	; (5d30 <ValidateFreqKR+0x34>)
    5d06:	4798      	blx	r3
		if(freq == freqNew)
    5d08:	9a01      	ldr	r2, [sp, #4]
    5d0a:	4b0a      	ldr	r3, [pc, #40]	; (5d34 <ValidateFreqKR+0x38>)
    5d0c:	429a      	cmp	r2, r3
    5d0e:	d00b      	beq.n	5d28 <ValidateFreqKR+0x2c>
    5d10:	4b09      	ldr	r3, [pc, #36]	; (5d38 <ValidateFreqKR+0x3c>)
	for(freq = FREQ_920900KHZ; freq <= FREQ_923300KHZ; freq += freqwidth)
    5d12:	490a      	ldr	r1, [pc, #40]	; (5d3c <ValidateFreqKR+0x40>)
		if(freq == freqNew)
    5d14:	429a      	cmp	r2, r3
    5d16:	d009      	beq.n	5d2c <ValidateFreqKR+0x30>
	for(freq = FREQ_920900KHZ; freq <= FREQ_923300KHZ; freq += freqwidth)
    5d18:	4809      	ldr	r0, [pc, #36]	; (5d40 <ValidateFreqKR+0x44>)
    5d1a:	4684      	mov	ip, r0
    5d1c:	4463      	add	r3, ip
    5d1e:	428b      	cmp	r3, r1
    5d20:	d1f8      	bne.n	5d14 <ValidateFreqKR+0x18>
    StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    5d22:	200a      	movs	r0, #10
}
    5d24:	b003      	add	sp, #12
    5d26:	bd00      	pop	{pc}
			result = LORAWAN_SUCCESS;
    5d28:	2008      	movs	r0, #8
    5d2a:	e7fb      	b.n	5d24 <ValidateFreqKR+0x28>
    5d2c:	2008      	movs	r0, #8
    5d2e:	e7f9      	b.n	5d24 <ValidateFreqKR+0x28>
    5d30:	00013e5d 	.word	0x00013e5d
    5d34:	36e3d1a0 	.word	0x36e3d1a0
    5d38:	36e6dee0 	.word	0x36e6dee0
    5d3c:	370b7de0 	.word	0x370b7de0
    5d40:	00030d40 	.word	0x00030d40

00005d44 <setNewChannelsT1>:
{
    5d44:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d46:	b083      	sub	sp, #12
	memcpy(&updateNewCh,attrInput,sizeof(UpdateNewCh_t));
    5d48:	ac01      	add	r4, sp, #4
    5d4a:	2204      	movs	r2, #4
    5d4c:	0020      	movs	r0, r4
    5d4e:	4b1f      	ldr	r3, [pc, #124]	; (5dcc <setNewChannelsT1+0x88>)
    5d50:	4798      	blx	r3
	chMask = updateNewCh.channelMask;
    5d52:	8827      	ldrh	r7, [r4, #0]
	chMaskCtrl = updateNewCh.channelMaskCntl;
    5d54:	78a6      	ldrb	r6, [r4, #2]
    5d56:	466b      	mov	r3, sp
    5d58:	1cd9      	adds	r1, r3, #3
    5d5a:	700e      	strb	r6, [r1, #0]
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, &chMaskCtrl) == LORAWAN_SUCCESS)
    5d5c:	201b      	movs	r0, #27
    5d5e:	4b1c      	ldr	r3, [pc, #112]	; (5dd0 <setNewChannelsT1+0x8c>)
    5d60:	4798      	blx	r3
    5d62:	0005      	movs	r5, r0
    5d64:	2808      	cmp	r0, #8
    5d66:	d003      	beq.n	5d70 <setNewChannelsT1+0x2c>
		retVal = LORAWAN_INVALID_PARAMETER;
    5d68:	250a      	movs	r5, #10
}
    5d6a:	0028      	movs	r0, r5
    5d6c:	b003      	add	sp, #12
    5d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch(chMaskCtrl)
    5d70:	2e06      	cmp	r6, #6
    5d72:	d01c      	beq.n	5dae <setNewChannelsT1+0x6a>
    5d74:	d80a      	bhi.n	5d8c <setNewChannelsT1+0x48>
    5d76:	2e04      	cmp	r6, #4
    5d78:	d8f7      	bhi.n	5d6a <setNewChannelsT1+0x26>
		channel = chMaskCtrl << SHIFT4;
    5d7a:	0136      	lsls	r6, r6, #4
    5d7c:	b2f0      	uxtb	r0, r6
				EnableChannels2(channel, channel + 15, chMask);
    5d7e:	0001      	movs	r1, r0
    5d80:	310f      	adds	r1, #15
    5d82:	b2c9      	uxtb	r1, r1
    5d84:	003a      	movs	r2, r7
    5d86:	4b13      	ldr	r3, [pc, #76]	; (5dd4 <setNewChannelsT1+0x90>)
    5d88:	4798      	blx	r3
				break;
    5d8a:	e7ee      	b.n	5d6a <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    5d8c:	2400      	movs	r4, #0
    5d8e:	2e07      	cmp	r6, #7
    5d90:	d1eb      	bne.n	5d6a <setNewChannelsT1+0x26>
					UpdateChannelIdStatus(i, DISABLED);
    5d92:	4e11      	ldr	r6, [pc, #68]	; (5dd8 <setNewChannelsT1+0x94>)
    5d94:	2100      	movs	r1, #0
    5d96:	0020      	movs	r0, r4
    5d98:	47b0      	blx	r6
				for(i = 0; i< 63; i++)
    5d9a:	3401      	adds	r4, #1
    5d9c:	b2e4      	uxtb	r4, r4
    5d9e:	2c3f      	cmp	r4, #63	; 0x3f
    5da0:	d1f8      	bne.n	5d94 <setNewChannelsT1+0x50>
				EnableChannels2(64, 71, chMask);
    5da2:	003a      	movs	r2, r7
    5da4:	2147      	movs	r1, #71	; 0x47
    5da6:	2040      	movs	r0, #64	; 0x40
    5da8:	4b0a      	ldr	r3, [pc, #40]	; (5dd4 <setNewChannelsT1+0x90>)
    5daa:	4798      	blx	r3
				break;
    5dac:	e7dd      	b.n	5d6a <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    5dae:	2400      	movs	r4, #0
					UpdateChannelIdStatus(i, ENABLED);
    5db0:	4e09      	ldr	r6, [pc, #36]	; (5dd8 <setNewChannelsT1+0x94>)
    5db2:	2101      	movs	r1, #1
    5db4:	0020      	movs	r0, r4
    5db6:	47b0      	blx	r6
				for(i = 0; i < 63; i++)
    5db8:	3401      	adds	r4, #1
    5dba:	b2e4      	uxtb	r4, r4
    5dbc:	2c3f      	cmp	r4, #63	; 0x3f
    5dbe:	d1f8      	bne.n	5db2 <setNewChannelsT1+0x6e>
				EnableChannels2(64, 71, chMask);
    5dc0:	003a      	movs	r2, r7
    5dc2:	2147      	movs	r1, #71	; 0x47
    5dc4:	2040      	movs	r0, #64	; 0x40
    5dc6:	4b03      	ldr	r3, [pc, #12]	; (5dd4 <setNewChannelsT1+0x90>)
    5dc8:	4798      	blx	r3
			    break;
    5dca:	e7ce      	b.n	5d6a <setNewChannelsT1+0x26>
    5dcc:	00013e5d 	.word	0x00013e5d
    5dd0:	00004b15 	.word	0x00004b15
    5dd4:	000050a5 	.word	0x000050a5
    5dd8:	00005041 	.word	0x00005041

00005ddc <setDlFrequency>:
{
    5ddc:	b530      	push	{r4, r5, lr}
    5dde:	b085      	sub	sp, #20
	memcpy(&updateDlFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    5de0:	ac02      	add	r4, sp, #8
    5de2:	2208      	movs	r2, #8
    5de4:	0020      	movs	r0, r4
    5de6:	4b20      	ldr	r3, [pc, #128]	; (5e68 <setDlFrequency+0x8c>)
    5de8:	4798      	blx	r3
	Chid.channelIndex = updateDlFreq.channelIndex;
    5dea:	ab01      	add	r3, sp, #4
    5dec:	7922      	ldrb	r2, [r4, #4]
    5dee:	701a      	strb	r2, [r3, #0]
		Chid.allowedForDefaultChannels = ALL_CHANNELS;
    5df0:	2201      	movs	r2, #1
    5df2:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    5df4:	4b1d      	ldr	r3, [pc, #116]	; (5e6c <setDlFrequency+0x90>)
    5df6:	685b      	ldr	r3, [r3, #4]
    5df8:	0021      	movs	r1, r4
    5dfa:	2001      	movs	r0, #1
    5dfc:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    5dfe:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    5e00:	2808      	cmp	r0, #8
    5e02:	d002      	beq.n	5e0a <setDlFrequency+0x2e>
}
    5e04:	0020      	movs	r0, r4
    5e06:	b005      	add	sp, #20
    5e08:	bd30      	pop	{r4, r5, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    5e0a:	a901      	add	r1, sp, #4
    5e0c:	300d      	adds	r0, #13
    5e0e:	4b18      	ldr	r3, [pc, #96]	; (5e70 <setDlFrequency+0x94>)
    5e10:	4798      	blx	r3
    5e12:	0004      	movs	r4, r0
    5e14:	2808      	cmp	r0, #8
    5e16:	d001      	beq.n	5e1c <setDlFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    5e18:	240a      	movs	r4, #10
    5e1a:	e7f3      	b.n	5e04 <setDlFrequency+0x28>
		RegParams.pOtherChParams[updateDlFreq.channelIndex].rx1Frequency = updateDlFreq.frequencyNew;
    5e1c:	4a15      	ldr	r2, [pc, #84]	; (5e74 <setDlFrequency+0x98>)
    5e1e:	7a13      	ldrb	r3, [r2, #8]
    5e20:	7a50      	ldrb	r0, [r2, #9]
    5e22:	0200      	lsls	r0, r0, #8
    5e24:	4303      	orrs	r3, r0
    5e26:	7a90      	ldrb	r0, [r2, #10]
    5e28:	0400      	lsls	r0, r0, #16
    5e2a:	4318      	orrs	r0, r3
    5e2c:	7ad3      	ldrb	r3, [r2, #11]
    5e2e:	061b      	lsls	r3, r3, #24
    5e30:	4318      	orrs	r0, r3
    5e32:	a902      	add	r1, sp, #8
    5e34:	790d      	ldrb	r5, [r1, #4]
    5e36:	006b      	lsls	r3, r5, #1
    5e38:	195b      	adds	r3, r3, r5
    5e3a:	009b      	lsls	r3, r3, #2
    5e3c:	181b      	adds	r3, r3, r0
    5e3e:	7808      	ldrb	r0, [r1, #0]
    5e40:	7118      	strb	r0, [r3, #4]
    5e42:	7848      	ldrb	r0, [r1, #1]
    5e44:	7158      	strb	r0, [r3, #5]
    5e46:	7888      	ldrb	r0, [r1, #2]
    5e48:	7198      	strb	r0, [r3, #6]
    5e4a:	78c9      	ldrb	r1, [r1, #3]
    5e4c:	71d9      	strb	r1, [r3, #7]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    5e4e:	2384      	movs	r3, #132	; 0x84
    5e50:	009b      	lsls	r3, r3, #2
    5e52:	5cd3      	ldrb	r3, [r2, r3]
    5e54:	4908      	ldr	r1, [pc, #32]	; (5e78 <setDlFrequency+0x9c>)
    5e56:	5c50      	ldrb	r0, [r2, r1]
    5e58:	0200      	lsls	r0, r0, #8
    5e5a:	4318      	orrs	r0, r3
    5e5c:	b2c1      	uxtb	r1, r0
    5e5e:	0a00      	lsrs	r0, r0, #8
    5e60:	4b06      	ldr	r3, [pc, #24]	; (5e7c <setDlFrequency+0xa0>)
    5e62:	4798      	blx	r3
    5e64:	e7ce      	b.n	5e04 <setDlFrequency+0x28>
    5e66:	46c0      	nop			; (mov r8, r8)
    5e68:	00013e5d 	.word	0x00013e5d
    5e6c:	20000ce0 	.word	0x20000ce0
    5e70:	00004a29 	.word	0x00004a29
    5e74:	20001328 	.word	0x20001328
    5e78:	00000211 	.word	0x00000211
    5e7c:	00008d6d 	.word	0x00008d6d

00005e80 <setFrequency>:
{
    5e80:	b570      	push	{r4, r5, r6, lr}
    5e82:	b084      	sub	sp, #16
	memcpy(&updateTxFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    5e84:	ac02      	add	r4, sp, #8
    5e86:	2208      	movs	r2, #8
    5e88:	0020      	movs	r0, r4
    5e8a:	4b3f      	ldr	r3, [pc, #252]	; (5f88 <setFrequency+0x108>)
    5e8c:	4798      	blx	r3
	valChid.channelIndex = updateTxFreq.channelIndex;
    5e8e:	ab01      	add	r3, sp, #4
    5e90:	7922      	ldrb	r2, [r4, #4]
    5e92:	701a      	strb	r2, [r3, #0]
	valChid.allowedForDefaultChannels = WITHOUT_DEFAULT_CHANNELS;
    5e94:	2200      	movs	r2, #0
    5e96:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    5e98:	4b3c      	ldr	r3, [pc, #240]	; (5f8c <setFrequency+0x10c>)
    5e9a:	685b      	ldr	r3, [r3, #4]
    5e9c:	0021      	movs	r1, r4
    5e9e:	2001      	movs	r0, #1
    5ea0:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    5ea2:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    5ea4:	2808      	cmp	r0, #8
    5ea6:	d002      	beq.n	5eae <setFrequency+0x2e>
}
    5ea8:	0020      	movs	r0, r4
    5eaa:	b004      	add	sp, #16
    5eac:	bd70      	pop	{r4, r5, r6, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    5eae:	a901      	add	r1, sp, #4
    5eb0:	300d      	adds	r0, #13
    5eb2:	4b37      	ldr	r3, [pc, #220]	; (5f90 <setFrequency+0x110>)
    5eb4:	4798      	blx	r3
    5eb6:	0004      	movs	r4, r0
    5eb8:	2808      	cmp	r0, #8
    5eba:	d001      	beq.n	5ec0 <setFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    5ebc:	240a      	movs	r4, #10
    5ebe:	e7f3      	b.n	5ea8 <setFrequency+0x28>
		uint8_t chIndx = updateTxFreq.channelIndex;
    5ec0:	ab02      	add	r3, sp, #8
    5ec2:	791d      	ldrb	r5, [r3, #4]
		if((((1 << RegParams.band) & ((ISM_EUBAND) | (1 << ISM_JPN923))) != 0))
    5ec4:	232e      	movs	r3, #46	; 0x2e
    5ec6:	4a33      	ldr	r2, [pc, #204]	; (5f94 <setFrequency+0x114>)
    5ec8:	5cd2      	ldrb	r2, [r2, r3]
    5eca:	3b0b      	subs	r3, #11
    5ecc:	4113      	asrs	r3, r2
    5ece:	07db      	lsls	r3, r3, #31
    5ed0:	d445      	bmi.n	5f5e <setFrequency+0xde>
		RegParams.pOtherChParams[chIndx].ulfrequency = updateTxFreq.frequencyNew;
    5ed2:	006a      	lsls	r2, r5, #1
    5ed4:	1952      	adds	r2, r2, r5
    5ed6:	0090      	lsls	r0, r2, #2
    5ed8:	a902      	add	r1, sp, #8
    5eda:	9d02      	ldr	r5, [sp, #8]
    5edc:	4b2d      	ldr	r3, [pc, #180]	; (5f94 <setFrequency+0x114>)
    5ede:	7a1a      	ldrb	r2, [r3, #8]
    5ee0:	7a5e      	ldrb	r6, [r3, #9]
    5ee2:	0236      	lsls	r6, r6, #8
    5ee4:	4316      	orrs	r6, r2
    5ee6:	7a9a      	ldrb	r2, [r3, #10]
    5ee8:	0412      	lsls	r2, r2, #16
    5eea:	4316      	orrs	r6, r2
    5eec:	7ada      	ldrb	r2, [r3, #11]
    5eee:	0612      	lsls	r2, r2, #24
    5ef0:	4332      	orrs	r2, r6
    5ef2:	5415      	strb	r5, [r2, r0]
    5ef4:	0a2e      	lsrs	r6, r5, #8
    5ef6:	1812      	adds	r2, r2, r0
    5ef8:	7056      	strb	r6, [r2, #1]
    5efa:	0c2e      	lsrs	r6, r5, #16
    5efc:	7096      	strb	r6, [r2, #2]
    5efe:	0e2d      	lsrs	r5, r5, #24
    5f00:	70d5      	strb	r5, [r2, #3]
		RegParams.pOtherChParams[chIndx].rx1Frequency = updateTxFreq.frequencyNew;
    5f02:	7a1a      	ldrb	r2, [r3, #8]
    5f04:	7a5d      	ldrb	r5, [r3, #9]
    5f06:	022d      	lsls	r5, r5, #8
    5f08:	4315      	orrs	r5, r2
    5f0a:	7a9a      	ldrb	r2, [r3, #10]
    5f0c:	0412      	lsls	r2, r2, #16
    5f0e:	4315      	orrs	r5, r2
    5f10:	7ada      	ldrb	r2, [r3, #11]
    5f12:	0612      	lsls	r2, r2, #24
    5f14:	432a      	orrs	r2, r5
    5f16:	1812      	adds	r2, r2, r0
    5f18:	780d      	ldrb	r5, [r1, #0]
    5f1a:	7115      	strb	r5, [r2, #4]
    5f1c:	784d      	ldrb	r5, [r1, #1]
    5f1e:	7155      	strb	r5, [r2, #5]
    5f20:	788d      	ldrb	r5, [r1, #2]
    5f22:	7195      	strb	r5, [r2, #6]
    5f24:	78c9      	ldrb	r1, [r1, #3]
    5f26:	71d1      	strb	r1, [r2, #7]
		RegParams.pOtherChParams[chIndx].parametersDefined |= FREQUENCY_DEFINED;
    5f28:	7a1a      	ldrb	r2, [r3, #8]
    5f2a:	7a59      	ldrb	r1, [r3, #9]
    5f2c:	0209      	lsls	r1, r1, #8
    5f2e:	4311      	orrs	r1, r2
    5f30:	7a9a      	ldrb	r2, [r3, #10]
    5f32:	0412      	lsls	r2, r2, #16
    5f34:	4311      	orrs	r1, r2
    5f36:	7ada      	ldrb	r2, [r3, #11]
    5f38:	0612      	lsls	r2, r2, #24
    5f3a:	430a      	orrs	r2, r1
    5f3c:	1812      	adds	r2, r2, r0
    5f3e:	7ad1      	ldrb	r1, [r2, #11]
    5f40:	2001      	movs	r0, #1
    5f42:	4301      	orrs	r1, r0
    5f44:	72d1      	strb	r1, [r2, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    5f46:	2284      	movs	r2, #132	; 0x84
    5f48:	0092      	lsls	r2, r2, #2
    5f4a:	5c9a      	ldrb	r2, [r3, r2]
    5f4c:	4912      	ldr	r1, [pc, #72]	; (5f98 <setFrequency+0x118>)
    5f4e:	5c58      	ldrb	r0, [r3, r1]
    5f50:	0200      	lsls	r0, r0, #8
    5f52:	4310      	orrs	r0, r2
    5f54:	b2c1      	uxtb	r1, r0
    5f56:	0a00      	lsrs	r0, r0, #8
    5f58:	4b10      	ldr	r3, [pc, #64]	; (5f9c <setFrequency+0x11c>)
    5f5a:	4798      	blx	r3
    5f5c:	e7a4      	b.n	5ea8 <setFrequency+0x28>
		    RegParams.pOtherChParams[chIndx].subBandId = getSubBandId(updateTxFreq.frequencyNew);
    5f5e:	4a0d      	ldr	r2, [pc, #52]	; (5f94 <setFrequency+0x114>)
    5f60:	7a16      	ldrb	r6, [r2, #8]
    5f62:	7a53      	ldrb	r3, [r2, #9]
    5f64:	021b      	lsls	r3, r3, #8
    5f66:	4333      	orrs	r3, r6
    5f68:	7a96      	ldrb	r6, [r2, #10]
    5f6a:	0436      	lsls	r6, r6, #16
    5f6c:	4333      	orrs	r3, r6
    5f6e:	7ad6      	ldrb	r6, [r2, #11]
    5f70:	0636      	lsls	r6, r6, #24
    5f72:	431e      	orrs	r6, r3
    5f74:	006b      	lsls	r3, r5, #1
    5f76:	195b      	adds	r3, r3, r5
    5f78:	009b      	lsls	r3, r3, #2
    5f7a:	18f6      	adds	r6, r6, r3
    5f7c:	9802      	ldr	r0, [sp, #8]
    5f7e:	4b08      	ldr	r3, [pc, #32]	; (5fa0 <setFrequency+0x120>)
    5f80:	4798      	blx	r3
    5f82:	7230      	strb	r0, [r6, #8]
    5f84:	e7a5      	b.n	5ed2 <setFrequency+0x52>
    5f86:	46c0      	nop			; (mov r8, r8)
    5f88:	00013e5d 	.word	0x00013e5d
    5f8c:	20000ce0 	.word	0x20000ce0
    5f90:	00004a29 	.word	0x00004a29
    5f94:	20001328 	.word	0x20001328
    5f98:	00000211 	.word	0x00000211
    5f9c:	00008d6d 	.word	0x00008d6d
    5fa0:	00004cc1 	.word	0x00004cc1

00005fa4 <setDutyCycle>:
{
    5fa4:	b570      	push	{r4, r5, r6, lr}
    5fa6:	b082      	sub	sp, #8
    memcpy(&updateDCycle,attrInput,sizeof(UpdateDutyCycle_t));
    5fa8:	ac01      	add	r4, sp, #4
    5faa:	2204      	movs	r2, #4
    5fac:	0020      	movs	r0, r4
    5fae:	4b2d      	ldr	r3, [pc, #180]	; (6064 <setDutyCycle+0xc0>)
    5fb0:	4798      	blx	r3
	val_chid.channelIndex = updateDCycle.channelIndex;
    5fb2:	78a5      	ldrb	r5, [r4, #2]
    5fb4:	466b      	mov	r3, sp
    5fb6:	701d      	strb	r5, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    5fb8:	2301      	movs	r3, #1
    5fba:	466a      	mov	r2, sp
    5fbc:	7053      	strb	r3, [r2, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    5fbe:	4669      	mov	r1, sp
    5fc0:	2015      	movs	r0, #21
    5fc2:	4b29      	ldr	r3, [pc, #164]	; (6068 <setDutyCycle+0xc4>)
    5fc4:	4798      	blx	r3
    5fc6:	0004      	movs	r4, r0
    5fc8:	2808      	cmp	r0, #8
    5fca:	d003      	beq.n	5fd4 <setDutyCycle+0x30>
		result = LORAWAN_INVALID_PARAMETER;
    5fcc:	240a      	movs	r4, #10
}
    5fce:	0020      	movs	r0, r4
    5fd0:	b002      	add	sp, #8
    5fd2:	bd70      	pop	{r4, r5, r6, pc}
		bandId = RegParams.pOtherChParams[updateDCycle.channelIndex].subBandId;
    5fd4:	0069      	lsls	r1, r5, #1
    5fd6:	1949      	adds	r1, r1, r5
    5fd8:	0089      	lsls	r1, r1, #2
    5fda:	4b24      	ldr	r3, [pc, #144]	; (606c <setDutyCycle+0xc8>)
    5fdc:	7a1a      	ldrb	r2, [r3, #8]
    5fde:	7a58      	ldrb	r0, [r3, #9]
    5fe0:	0200      	lsls	r0, r0, #8
    5fe2:	4310      	orrs	r0, r2
    5fe4:	7a9a      	ldrb	r2, [r3, #10]
    5fe6:	0412      	lsls	r2, r2, #16
    5fe8:	4310      	orrs	r0, r2
    5fea:	7ada      	ldrb	r2, [r3, #11]
    5fec:	0612      	lsls	r2, r2, #24
    5fee:	4302      	orrs	r2, r0
    5ff0:	1852      	adds	r2, r2, r1
    5ff2:	7a15      	ldrb	r5, [r2, #8]
		RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] = updateDCycle.dutyCycleNew;
    5ff4:	0028      	movs	r0, r5
    5ff6:	30d4      	adds	r0, #212	; 0xd4
    5ff8:	0040      	lsls	r0, r0, #1
    5ffa:	aa01      	add	r2, sp, #4
    5ffc:	1818      	adds	r0, r3, r0
    5ffe:	7816      	ldrb	r6, [r2, #0]
    6000:	7146      	strb	r6, [r0, #5]
    6002:	7852      	ldrb	r2, [r2, #1]
    6004:	7182      	strb	r2, [r0, #6]
		RegParams.pSubBandParams[bandId].subBandTimeout = 0;
    6006:	7b18      	ldrb	r0, [r3, #12]
    6008:	7b5a      	ldrb	r2, [r3, #13]
    600a:	0212      	lsls	r2, r2, #8
    600c:	4302      	orrs	r2, r0
    600e:	7b98      	ldrb	r0, [r3, #14]
    6010:	0400      	lsls	r0, r0, #16
    6012:	4302      	orrs	r2, r0
    6014:	7bd8      	ldrb	r0, [r3, #15]
    6016:	0600      	lsls	r0, r0, #24
    6018:	4310      	orrs	r0, r2
    601a:	006a      	lsls	r2, r5, #1
    601c:	1952      	adds	r2, r2, r5
    601e:	0092      	lsls	r2, r2, #2
    6020:	1812      	adds	r2, r2, r0
    6022:	2000      	movs	r0, #0
    6024:	7210      	strb	r0, [r2, #8]
    6026:	7250      	strb	r0, [r2, #9]
    6028:	7290      	strb	r0, [r2, #10]
    602a:	72d0      	strb	r0, [r2, #11]
		RegParams.pOtherChParams[updateDCycle.channelIndex].parametersDefined |= DUTY_CYCLE_DEFINED;
    602c:	7a1d      	ldrb	r5, [r3, #8]
    602e:	7a5a      	ldrb	r2, [r3, #9]
    6030:	0212      	lsls	r2, r2, #8
    6032:	432a      	orrs	r2, r5
    6034:	7a9d      	ldrb	r5, [r3, #10]
    6036:	042d      	lsls	r5, r5, #16
    6038:	432a      	orrs	r2, r5
    603a:	7add      	ldrb	r5, [r3, #11]
    603c:	062d      	lsls	r5, r5, #24
    603e:	4315      	orrs	r5, r2
    6040:	186d      	adds	r5, r5, r1
    6042:	7aea      	ldrb	r2, [r5, #11]
    6044:	2104      	movs	r1, #4
    6046:	430a      	orrs	r2, r1
    6048:	72ea      	strb	r2, [r5, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    604a:	2284      	movs	r2, #132	; 0x84
    604c:	0092      	lsls	r2, r2, #2
    604e:	5c9a      	ldrb	r2, [r3, r2]
    6050:	4907      	ldr	r1, [pc, #28]	; (6070 <setDutyCycle+0xcc>)
    6052:	5c58      	ldrb	r0, [r3, r1]
    6054:	0200      	lsls	r0, r0, #8
    6056:	4310      	orrs	r0, r2
    6058:	b2c1      	uxtb	r1, r0
    605a:	0a00      	lsrs	r0, r0, #8
    605c:	4b05      	ldr	r3, [pc, #20]	; (6074 <setDutyCycle+0xd0>)
    605e:	4798      	blx	r3
    6060:	e7b5      	b.n	5fce <setDutyCycle+0x2a>
    6062:	46c0      	nop			; (mov r8, r8)
    6064:	00013e5d 	.word	0x00013e5d
    6068:	00004a29 	.word	0x00004a29
    606c:	20001328 	.word	0x20001328
    6070:	00000211 	.word	0x00000211
    6074:	00008d6d 	.word	0x00008d6d

00006078 <SearchAvailableChannel2>:
{
    6078:	b5f0      	push	{r4, r5, r6, r7, lr}
    607a:	46de      	mov	lr, fp
    607c:	4657      	mov	r7, sl
    607e:	464e      	mov	r6, r9
    6080:	4645      	mov	r5, r8
    6082:	b5e0      	push	{r5, r6, r7, lr}
    6084:	b087      	sub	sp, #28
    6086:	af00      	add	r7, sp, #0
    6088:	0004      	movs	r4, r0
    608a:	4688      	mov	r8, r1
    608c:	60f9      	str	r1, [r7, #12]
    608e:	0015      	movs	r5, r2
    6090:	607b      	str	r3, [r7, #4]
	uint8_t ChList[maxChannels];
    6092:	1dc3      	adds	r3, r0, #7
    6094:	08db      	lsrs	r3, r3, #3
    6096:	00db      	lsls	r3, r3, #3
    6098:	466a      	mov	r2, sp
    609a:	1ad3      	subs	r3, r2, r3
    609c:	469d      	mov	sp, r3
    609e:	613b      	str	r3, [r7, #16]
	memset(ChList, 0, sizeof(ChList));
    60a0:	0002      	movs	r2, r0
    60a2:	2100      	movs	r1, #0
    60a4:	4668      	mov	r0, sp
    60a6:	4b5c      	ldr	r3, [pc, #368]	; (6218 <SearchAvailableChannel2+0x1a0>)
    60a8:	4798      	blx	r3
	bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    60aa:	232e      	movs	r3, #46	; 0x2e
    60ac:	4a5b      	ldr	r2, [pc, #364]	; (621c <SearchAvailableChannel2+0x1a4>)
    60ae:	5cd6      	ldrb	r6, [r2, r3]
    if(transmissionType == false)
    60b0:	4643      	mov	r3, r8
    60b2:	2b00      	cmp	r3, #0
    60b4:	d148      	bne.n	6148 <SearchAvailableChannel2+0xd0>
	    if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    60b6:	3320      	adds	r3, #32
    60b8:	5cd3      	ldrb	r3, [r2, r3]
    60ba:	069b      	lsls	r3, r3, #26
    60bc:	d431      	bmi.n	6122 <SearchAvailableChannel2+0xaa>
		result = LORAWAN_NO_CHANNELS_FOUND;
    60be:	2010      	movs	r0, #16
	for (i = 0; i < maxChannels; i++)
    60c0:	2c00      	cmp	r4, #0
    60c2:	d100      	bne.n	60c6 <SearchAvailableChannel2+0x4e>
    60c4:	e093      	b.n	61ee <SearchAvailableChannel2+0x176>
	bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    60c6:	4b56      	ldr	r3, [pc, #344]	; (6220 <SearchAvailableChannel2+0x1a8>)
    60c8:	4133      	asrs	r3, r6
    60ca:	2201      	movs	r2, #1
    60cc:	401a      	ands	r2, r3
    60ce:	4690      	mov	r8, r2
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    60d0:	4b52      	ldr	r3, [pc, #328]	; (621c <SearchAvailableChannel2+0x1a4>)
    60d2:	7b19      	ldrb	r1, [r3, #12]
    60d4:	7b5a      	ldrb	r2, [r3, #13]
    60d6:	0212      	lsls	r2, r2, #8
    60d8:	4311      	orrs	r1, r2
    60da:	7b9a      	ldrb	r2, [r3, #14]
    60dc:	0412      	lsls	r2, r2, #16
    60de:	430a      	orrs	r2, r1
    60e0:	7bd9      	ldrb	r1, [r3, #15]
    60e2:	0609      	lsls	r1, r1, #24
    60e4:	4311      	orrs	r1, r2
    60e6:	468c      	mov	ip, r1
    60e8:	7a18      	ldrb	r0, [r3, #8]
    60ea:	7a5a      	ldrb	r2, [r3, #9]
    60ec:	0212      	lsls	r2, r2, #8
    60ee:	4302      	orrs	r2, r0
    60f0:	7a98      	ldrb	r0, [r3, #10]
    60f2:	0400      	lsls	r0, r0, #16
    60f4:	4302      	orrs	r2, r0
    60f6:	7ad8      	ldrb	r0, [r3, #11]
    60f8:	0600      	lsls	r0, r0, #24
    60fa:	4310      	orrs	r0, r2
			if ((RegParams.pChParams[i].status == ENABLED) &&
    60fc:	791a      	ldrb	r2, [r3, #4]
    60fe:	7959      	ldrb	r1, [r3, #5]
    6100:	0209      	lsls	r1, r1, #8
    6102:	4311      	orrs	r1, r2
    6104:	799a      	ldrb	r2, [r3, #6]
    6106:	0412      	lsls	r2, r2, #16
    6108:	4311      	orrs	r1, r2
    610a:	79da      	ldrb	r2, [r3, #7]
    610c:	0612      	lsls	r2, r2, #24
    610e:	430a      	orrs	r2, r1
    6110:	0006      	movs	r6, r0
    6112:	3608      	adds	r6, #8
    6114:	3009      	adds	r0, #9
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    6116:	2300      	movs	r3, #0
    6118:	617b      	str	r3, [r7, #20]
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    611a:	46aa      	mov	sl, r5
    611c:	46a9      	mov	r9, r5
    611e:	0025      	movs	r5, r4
    6120:	e036      	b.n	6190 <SearchAvailableChannel2+0x118>
		    if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) //check timerrunning
    6122:	0011      	movs	r1, r2
    6124:	7d13      	ldrb	r3, [r2, #20]
    6126:	7d52      	ldrb	r2, [r2, #21]
    6128:	0212      	lsls	r2, r2, #8
    612a:	431a      	orrs	r2, r3
    612c:	7d8b      	ldrb	r3, [r1, #22]
    612e:	041b      	lsls	r3, r3, #16
    6130:	431a      	orrs	r2, r3
    6132:	7dcb      	ldrb	r3, [r1, #23]
    6134:	061b      	lsls	r3, r3, #24
    6136:	4313      	orrs	r3, r2
    6138:	7a18      	ldrb	r0, [r3, #8]
    613a:	4b3a      	ldr	r3, [pc, #232]	; (6224 <SearchAvailableChannel2+0x1ac>)
    613c:	4798      	blx	r3
    613e:	0003      	movs	r3, r0
			    return LORAWAN_NO_CHANNELS_FOUND;
    6140:	2010      	movs	r0, #16
		    if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) //check timerrunning
    6142:	2b00      	cmp	r3, #0
    6144:	d0bb      	beq.n	60be <SearchAvailableChannel2+0x46>
    6146:	e052      	b.n	61ee <SearchAvailableChannel2+0x176>
	    if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    6148:	4934      	ldr	r1, [pc, #208]	; (621c <SearchAvailableChannel2+0x1a4>)
    614a:	23ba      	movs	r3, #186	; 0xba
    614c:	33ff      	adds	r3, #255	; 0xff
    614e:	5ccb      	ldrb	r3, [r1, r3]
    6150:	22dd      	movs	r2, #221	; 0xdd
    6152:	0052      	lsls	r2, r2, #1
    6154:	5c8a      	ldrb	r2, [r1, r2]
    6156:	0212      	lsls	r2, r2, #8
    6158:	431a      	orrs	r2, r3
    615a:	23bc      	movs	r3, #188	; 0xbc
    615c:	33ff      	adds	r3, #255	; 0xff
    615e:	5ccb      	ldrb	r3, [r1, r3]
    6160:	041b      	lsls	r3, r3, #16
    6162:	431a      	orrs	r2, r3
    6164:	23de      	movs	r3, #222	; 0xde
    6166:	005b      	lsls	r3, r3, #1
    6168:	5ccb      	ldrb	r3, [r1, r3]
    616a:	061b      	lsls	r3, r3, #24
    616c:	4313      	orrs	r3, r2
		    return LORAWAN_NO_CHANNELS_FOUND;
    616e:	2010      	movs	r0, #16
	    if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    6170:	2b00      	cmp	r3, #0
    6172:	d0a4      	beq.n	60be <SearchAvailableChannel2+0x46>
    6174:	e03b      	b.n	61ee <SearchAvailableChannel2+0x176>
					ChList[num] = i;
    6176:	693c      	ldr	r4, [r7, #16]
    6178:	6979      	ldr	r1, [r7, #20]
    617a:	5463      	strb	r3, [r4, r1]
					num++;
    617c:	3101      	adds	r1, #1
    617e:	b2c9      	uxtb	r1, r1
    6180:	6179      	str	r1, [r7, #20]
	for (i = 0; i < maxChannels; i++)
    6182:	3301      	adds	r3, #1
    6184:	b2db      	uxtb	r3, r3
    6186:	3202      	adds	r2, #2
    6188:	360c      	adds	r6, #12
    618a:	300c      	adds	r0, #12
    618c:	429d      	cmp	r5, r3
    618e:	d02a      	beq.n	61e6 <SearchAvailableChannel2+0x16e>
			if ((RegParams.pChParams[i].status == ENABLED) &&
    6190:	7811      	ldrb	r1, [r2, #0]
    6192:	2900      	cmp	r1, #0
    6194:	d0f5      	beq.n	6182 <SearchAvailableChannel2+0x10a>
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    6196:	7851      	ldrb	r1, [r2, #1]
    6198:	0709      	lsls	r1, r1, #28
    619a:	0f09      	lsrs	r1, r1, #28
			if ((RegParams.pChParams[i].status == ENABLED) &&
    619c:	4589      	cmp	r9, r1
    619e:	dbf0      	blt.n	6182 <SearchAvailableChannel2+0x10a>
				(currDr <= RegParams.pChParams[i].dataRange.max)&&
    61a0:	7851      	ldrb	r1, [r2, #1]
    61a2:	0909      	lsrs	r1, r1, #4
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    61a4:	458a      	cmp	sl, r1
    61a6:	dcec      	bgt.n	6182 <SearchAvailableChannel2+0x10a>
				(currDr <= RegParams.pChParams[i].dataRange.max)&&
    61a8:	4641      	mov	r1, r8
    61aa:	2900      	cmp	r1, #0
    61ac:	d014      	beq.n	61d8 <SearchAvailableChannel2+0x160>
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    61ae:	7834      	ldrb	r4, [r6, #0]
    61b0:	0061      	lsls	r1, r4, #1
    61b2:	1909      	adds	r1, r1, r4
    61b4:	0089      	lsls	r1, r1, #2
    61b6:	4461      	add	r1, ip
    61b8:	7a0c      	ldrb	r4, [r1, #8]
    61ba:	46a3      	mov	fp, r4
    61bc:	60b9      	str	r1, [r7, #8]
    61be:	7a4c      	ldrb	r4, [r1, #9]
    61c0:	0224      	lsls	r4, r4, #8
    61c2:	4659      	mov	r1, fp
    61c4:	430c      	orrs	r4, r1
    61c6:	68b9      	ldr	r1, [r7, #8]
    61c8:	7a89      	ldrb	r1, [r1, #10]
    61ca:	0409      	lsls	r1, r1, #16
    61cc:	430c      	orrs	r4, r1
    61ce:	68b9      	ldr	r1, [r7, #8]
    61d0:	7ac9      	ldrb	r1, [r1, #11]
    61d2:	0609      	lsls	r1, r1, #24
    61d4:	4321      	orrs	r1, r4
    61d6:	d1d4      	bne.n	6182 <SearchAvailableChannel2+0x10a>
				if(((transmissionType == 0)  && (RegParams.pOtherChParams[i].joinRequestChannel == 1)) || (transmissionType != 0)) 
    61d8:	68f9      	ldr	r1, [r7, #12]
    61da:	2900      	cmp	r1, #0
    61dc:	d1cb      	bne.n	6176 <SearchAvailableChannel2+0xfe>
    61de:	7801      	ldrb	r1, [r0, #0]
    61e0:	2900      	cmp	r1, #0
    61e2:	d0ce      	beq.n	6182 <SearchAvailableChannel2+0x10a>
    61e4:	e7c7      	b.n	6176 <SearchAvailableChannel2+0xfe>
		result = LORAWAN_NO_CHANNELS_FOUND;
    61e6:	2010      	movs	r0, #16
	if(0 != num)
    61e8:	697c      	ldr	r4, [r7, #20]
    61ea:	2c00      	cmp	r4, #0
    61ec:	d107      	bne.n	61fe <SearchAvailableChannel2+0x186>
}
    61ee:	46bd      	mov	sp, r7
    61f0:	b007      	add	sp, #28
    61f2:	bc3c      	pop	{r2, r3, r4, r5}
    61f4:	4690      	mov	r8, r2
    61f6:	4699      	mov	r9, r3
    61f8:	46a2      	mov	sl, r4
    61fa:	46ab      	mov	fp, r5
    61fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		randomNumber = rand() % num;
    61fe:	4b0a      	ldr	r3, [pc, #40]	; (6228 <SearchAvailableChannel2+0x1b0>)
    6200:	4798      	blx	r3
    6202:	0021      	movs	r1, r4
    6204:	4b09      	ldr	r3, [pc, #36]	; (622c <SearchAvailableChannel2+0x1b4>)
    6206:	4798      	blx	r3
		*channelIndex = ChList[randomNumber];
    6208:	23ff      	movs	r3, #255	; 0xff
    620a:	4019      	ands	r1, r3
    620c:	693b      	ldr	r3, [r7, #16]
    620e:	5c5b      	ldrb	r3, [r3, r1]
    6210:	687a      	ldr	r2, [r7, #4]
    6212:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6214:	2008      	movs	r0, #8
    6216:	e7ea      	b.n	61ee <SearchAvailableChannel2+0x176>
    6218:	00013ee1 	.word	0x00013ee1
    621c:	20001328 	.word	0x20001328
    6220:	00007fe3 	.word	0x00007fe3
    6224:	0000992d 	.word	0x0000992d
    6228:	00014061 	.word	0x00014061
    622c:	000110ed 	.word	0x000110ed

00006230 <LORAREG_GetAttr_FreeChannel2>:
{
    6230:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    6232:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    6234:	202a      	movs	r0, #42	; 0x2a
    6236:	4d07      	ldr	r5, [pc, #28]	; (6254 <LORAREG_GetAttr_FreeChannel2+0x24>)
    6238:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    623a:	3820      	subs	r0, #32
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    623c:	42ac      	cmp	r4, r5
    623e:	dd00      	ble.n	6242 <LORAREG_GetAttr_FreeChannel2+0x12>
}
    6240:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel2(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    6242:	7888      	ldrb	r0, [r1, #2]
    6244:	7809      	ldrb	r1, [r1, #0]
    6246:	0013      	movs	r3, r2
    6248:	0002      	movs	r2, r0
    624a:	0020      	movs	r0, r4
    624c:	4c02      	ldr	r4, [pc, #8]	; (6258 <LORAREG_GetAttr_FreeChannel2+0x28>)
    624e:	47a0      	blx	r4
	return result;
    6250:	e7f6      	b.n	6240 <LORAREG_GetAttr_FreeChannel2+0x10>
    6252:	46c0      	nop			; (mov r8, r8)
    6254:	20001328 	.word	0x20001328
    6258:	00006079 	.word	0x00006079

0000625c <setJoinBackoffCntl>:
{   
    625c:	b500      	push	{lr}
    625e:	b083      	sub	sp, #12
	memcpy(&joinbackoffcntl,attrInput,sizeof(bool));
    6260:	780b      	ldrb	r3, [r1, #0]
    6262:	466a      	mov	r2, sp
    6264:	71d3      	strb	r3, [r2, #7]
	if(joinbackoffcntl == false)
    6266:	2b00      	cmp	r3, #0
    6268:	d145      	bne.n	62f6 <setJoinBackoffCntl+0x9a>
		if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    626a:	3320      	adds	r3, #32
    626c:	4a26      	ldr	r2, [pc, #152]	; (6308 <setJoinBackoffCntl+0xac>)
    626e:	5cd3      	ldrb	r3, [r2, r3]
    6270:	069a      	lsls	r2, r3, #26
    6272:	d546      	bpl.n	6302 <setJoinBackoffCntl+0xa6>
			RegParams.FeaturesSupport &= ~JOIN_BACKOFF_SUPPORT;
    6274:	4924      	ldr	r1, [pc, #144]	; (6308 <setJoinBackoffCntl+0xac>)
    6276:	2220      	movs	r2, #32
    6278:	4393      	bics	r3, r2
    627a:	548b      	strb	r3, [r1, r2]
			if (SwTimerIsRunning(RegParams.pJoinBackoffTimer->timerId))
    627c:	7e0b      	ldrb	r3, [r1, #24]
    627e:	7e4a      	ldrb	r2, [r1, #25]
    6280:	0212      	lsls	r2, r2, #8
    6282:	431a      	orrs	r2, r3
    6284:	7e8b      	ldrb	r3, [r1, #26]
    6286:	041b      	lsls	r3, r3, #16
    6288:	431a      	orrs	r2, r3
    628a:	7ecb      	ldrb	r3, [r1, #27]
    628c:	061b      	lsls	r3, r3, #24
    628e:	4313      	orrs	r3, r2
    6290:	7818      	ldrb	r0, [r3, #0]
    6292:	4b1e      	ldr	r3, [pc, #120]	; (630c <setJoinBackoffCntl+0xb0>)
    6294:	4798      	blx	r3
    6296:	2800      	cmp	r0, #0
    6298:	d11e      	bne.n	62d8 <setJoinBackoffCntl+0x7c>
			if (SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    629a:	491b      	ldr	r1, [pc, #108]	; (6308 <setJoinBackoffCntl+0xac>)
    629c:	7d0b      	ldrb	r3, [r1, #20]
    629e:	7d4a      	ldrb	r2, [r1, #21]
    62a0:	0212      	lsls	r2, r2, #8
    62a2:	431a      	orrs	r2, r3
    62a4:	7d8b      	ldrb	r3, [r1, #22]
    62a6:	041b      	lsls	r3, r3, #16
    62a8:	431a      	orrs	r2, r3
    62aa:	7dcb      	ldrb	r3, [r1, #23]
    62ac:	061b      	lsls	r3, r3, #24
    62ae:	4313      	orrs	r3, r2
    62b0:	7a18      	ldrb	r0, [r3, #8]
    62b2:	4b16      	ldr	r3, [pc, #88]	; (630c <setJoinBackoffCntl+0xb0>)
    62b4:	4798      	blx	r3
    62b6:	2800      	cmp	r0, #0
    62b8:	d023      	beq.n	6302 <setJoinBackoffCntl+0xa6>
				SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    62ba:	4913      	ldr	r1, [pc, #76]	; (6308 <setJoinBackoffCntl+0xac>)
    62bc:	7d0b      	ldrb	r3, [r1, #20]
    62be:	7d4a      	ldrb	r2, [r1, #21]
    62c0:	0212      	lsls	r2, r2, #8
    62c2:	431a      	orrs	r2, r3
    62c4:	7d8b      	ldrb	r3, [r1, #22]
    62c6:	041b      	lsls	r3, r3, #16
    62c8:	431a      	orrs	r2, r3
    62ca:	7dcb      	ldrb	r3, [r1, #23]
    62cc:	061b      	lsls	r3, r3, #24
    62ce:	4313      	orrs	r3, r2
    62d0:	7a18      	ldrb	r0, [r3, #8]
    62d2:	4b0f      	ldr	r3, [pc, #60]	; (6310 <setJoinBackoffCntl+0xb4>)
    62d4:	4798      	blx	r3
    62d6:	e014      	b.n	6302 <setJoinBackoffCntl+0xa6>
				SwTimerStop(RegParams.pJoinBackoffTimer->timerId);
    62d8:	490b      	ldr	r1, [pc, #44]	; (6308 <setJoinBackoffCntl+0xac>)
    62da:	7e0b      	ldrb	r3, [r1, #24]
    62dc:	7e4a      	ldrb	r2, [r1, #25]
    62de:	0212      	lsls	r2, r2, #8
    62e0:	431a      	orrs	r2, r3
    62e2:	7e8b      	ldrb	r3, [r1, #26]
    62e4:	041b      	lsls	r3, r3, #16
    62e6:	431a      	orrs	r2, r3
    62e8:	7ecb      	ldrb	r3, [r1, #27]
    62ea:	061b      	lsls	r3, r3, #24
    62ec:	4313      	orrs	r3, r2
    62ee:	7818      	ldrb	r0, [r3, #0]
    62f0:	4b07      	ldr	r3, [pc, #28]	; (6310 <setJoinBackoffCntl+0xb4>)
    62f2:	4798      	blx	r3
    62f4:	e7d1      	b.n	629a <setJoinBackoffCntl+0x3e>
		RegParams.FeaturesSupport |= JOIN_BACKOFF_SUPPORT;
    62f6:	4904      	ldr	r1, [pc, #16]	; (6308 <setJoinBackoffCntl+0xac>)
    62f8:	2220      	movs	r2, #32
    62fa:	5c8b      	ldrb	r3, [r1, r2]
    62fc:	2020      	movs	r0, #32
    62fe:	4303      	orrs	r3, r0
    6300:	548b      	strb	r3, [r1, r2]
}
    6302:	2008      	movs	r0, #8
    6304:	b003      	add	sp, #12
    6306:	bd00      	pop	{pc}
    6308:	20001328 	.word	0x20001328
    630c:	0000992d 	.word	0x0000992d
    6310:	00009aa1 	.word	0x00009aa1

00006314 <setJoinBackOffTimer>:
{
    6314:	b510      	push	{r4, lr}
    6316:	b084      	sub	sp, #16
	memcpy(&startJoinBackOffTimer,attrInput,sizeof(bool));
    6318:	780b      	ldrb	r3, [r1, #0]
    631a:	220f      	movs	r2, #15
    631c:	446a      	add	r2, sp
    631e:	7013      	strb	r3, [r2, #0]
	if(startJoinBackOffTimer == true)
    6320:	2b00      	cmp	r3, #0
    6322:	d113      	bne.n	634c <setJoinBackOffTimer+0x38>
		SwTimerStop(RegParams.pJoinBackoffTimer->timerId);
    6324:	4c13      	ldr	r4, [pc, #76]	; (6374 <setJoinBackOffTimer+0x60>)
    6326:	7e23      	ldrb	r3, [r4, #24]
    6328:	7e62      	ldrb	r2, [r4, #25]
    632a:	0212      	lsls	r2, r2, #8
    632c:	431a      	orrs	r2, r3
    632e:	7ea3      	ldrb	r3, [r4, #26]
    6330:	041b      	lsls	r3, r3, #16
    6332:	431a      	orrs	r2, r3
    6334:	7ee3      	ldrb	r3, [r4, #27]
    6336:	061b      	lsls	r3, r3, #24
    6338:	4313      	orrs	r3, r2
    633a:	7818      	ldrb	r0, [r3, #0]
    633c:	4b0e      	ldr	r3, [pc, #56]	; (6378 <setJoinBackOffTimer+0x64>)
    633e:	4798      	blx	r3
		RegParams.joinbccount = 0;
    6340:	2200      	movs	r2, #0
    6342:	2342      	movs	r3, #66	; 0x42
    6344:	54e2      	strb	r2, [r4, r3]
}
    6346:	2008      	movs	r0, #8
    6348:	b004      	add	sp, #16
    634a:	bd10      	pop	{r4, pc}
		SwTimerStart (RegParams.pJoinBackoffTimer->timerId, MS_TO_US(BACKOFF_BASE_TIME_IN_MS), SW_TIMEOUT_RELATIVE, (void *)JoinBackoffCallback, NULL);
    634c:	4909      	ldr	r1, [pc, #36]	; (6374 <setJoinBackOffTimer+0x60>)
    634e:	7e0b      	ldrb	r3, [r1, #24]
    6350:	7e4a      	ldrb	r2, [r1, #25]
    6352:	0212      	lsls	r2, r2, #8
    6354:	431a      	orrs	r2, r3
    6356:	7e8b      	ldrb	r3, [r1, #26]
    6358:	041b      	lsls	r3, r3, #16
    635a:	431a      	orrs	r2, r3
    635c:	7ecb      	ldrb	r3, [r1, #27]
    635e:	061b      	lsls	r3, r3, #24
    6360:	4313      	orrs	r3, r2
    6362:	7818      	ldrb	r0, [r3, #0]
    6364:	2300      	movs	r3, #0
    6366:	9300      	str	r3, [sp, #0]
    6368:	4b04      	ldr	r3, [pc, #16]	; (637c <setJoinBackOffTimer+0x68>)
    636a:	2200      	movs	r2, #0
    636c:	4904      	ldr	r1, [pc, #16]	; (6380 <setJoinBackOffTimer+0x6c>)
    636e:	4c05      	ldr	r4, [pc, #20]	; (6384 <setJoinBackOffTimer+0x70>)
    6370:	47a0      	blx	r4
    6372:	e7e8      	b.n	6346 <setJoinBackOffTimer+0x32>
    6374:	20001328 	.word	0x20001328
    6378:	00009aa1 	.word	0x00009aa1
    637c:	00006f95 	.word	0x00006f95
    6380:	6b49d200 	.word	0x6b49d200
    6384:	00009795 	.word	0x00009795

00006388 <setJoinDutyCycleTimer>:
{
    6388:	b530      	push	{r4, r5, lr}
    638a:	b085      	sub	sp, #20
	memcpy(&UpdateJoinDutyCycleTimer,attrInput,sizeof(UpdateJoinDutyCycleTimer_t));
    638c:	ac02      	add	r4, sp, #8
    638e:	2208      	movs	r2, #8
    6390:	0020      	movs	r0, r4
    6392:	4b93      	ldr	r3, [pc, #588]	; (65e0 <setJoinDutyCycleTimer+0x258>)
    6394:	4798      	blx	r3
	if(UpdateJoinDutyCycleTimer.startJoinDutyCycleTimer == true)
    6396:	7923      	ldrb	r3, [r4, #4]
    6398:	2b00      	cmp	r3, #0
    639a:	d100      	bne.n	639e <setJoinDutyCycleTimer+0x16>
    639c:	e0f8      	b.n	6590 <setJoinDutyCycleTimer+0x208>
			if(RegParams.joinbccount < AGGREGATEDTIME_1HR)
    639e:	2342      	movs	r3, #66	; 0x42
    63a0:	4a90      	ldr	r2, [pc, #576]	; (65e4 <setJoinDutyCycleTimer+0x25c>)
    63a2:	5cd3      	ldrb	r3, [r2, r3]
    63a4:	2b01      	cmp	r3, #1
    63a6:	d800      	bhi.n	63aa <setJoinDutyCycleTimer+0x22>
    63a8:	e081      	b.n	64ae <setJoinDutyCycleTimer+0x126>
			else if (RegParams.joinbccount < AGGREGATEDTIME_10HR)
    63aa:	2b13      	cmp	r3, #19
    63ac:	d900      	bls.n	63b0 <setJoinDutyCycleTimer+0x28>
    63ae:	e08d      	b.n	64cc <setJoinDutyCycleTimer+0x144>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_10HR - 1);
    63b0:	4b8d      	ldr	r3, [pc, #564]	; (65e8 <setJoinDutyCycleTimer+0x260>)
    63b2:	9a02      	ldr	r2, [sp, #8]
    63b4:	4353      	muls	r3, r2
    63b6:	4a8b      	ldr	r2, [pc, #556]	; (65e4 <setJoinDutyCycleTimer+0x25c>)
    63b8:	323e      	adds	r2, #62	; 0x3e
    63ba:	7013      	strb	r3, [r2, #0]
    63bc:	0a19      	lsrs	r1, r3, #8
    63be:	7051      	strb	r1, [r2, #1]
    63c0:	0c19      	lsrs	r1, r3, #16
    63c2:	7091      	strb	r1, [r2, #2]
    63c4:	0e1b      	lsrs	r3, r3, #24
    63c6:	70d3      	strb	r3, [r2, #3]
		if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    63c8:	4986      	ldr	r1, [pc, #536]	; (65e4 <setJoinDutyCycleTimer+0x25c>)
    63ca:	7d0b      	ldrb	r3, [r1, #20]
    63cc:	7d4a      	ldrb	r2, [r1, #21]
    63ce:	0212      	lsls	r2, r2, #8
    63d0:	431a      	orrs	r2, r3
    63d2:	7d8b      	ldrb	r3, [r1, #22]
    63d4:	041b      	lsls	r3, r3, #16
    63d6:	431a      	orrs	r2, r3
    63d8:	7dcb      	ldrb	r3, [r1, #23]
    63da:	061b      	lsls	r3, r3, #24
    63dc:	4313      	orrs	r3, r2
    63de:	7a18      	ldrb	r0, [r3, #8]
    63e0:	4b82      	ldr	r3, [pc, #520]	; (65ec <setJoinDutyCycleTimer+0x264>)
    63e2:	4798      	blx	r3
	uint32_t delta = 0,ticks;
    63e4:	2400      	movs	r4, #0
		if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    63e6:	2800      	cmp	r0, #0
    63e8:	d17d      	bne.n	64e6 <setJoinDutyCycleTimer+0x15e>
		if(RegParams.joinDutyCycleTimeout != 0)
    63ea:	4b7e      	ldr	r3, [pc, #504]	; (65e4 <setJoinDutyCycleTimer+0x25c>)
    63ec:	213e      	movs	r1, #62	; 0x3e
    63ee:	5c59      	ldrb	r1, [r3, r1]
    63f0:	203f      	movs	r0, #63	; 0x3f
    63f2:	5c18      	ldrb	r0, [r3, r0]
    63f4:	0200      	lsls	r0, r0, #8
    63f6:	4308      	orrs	r0, r1
    63f8:	2140      	movs	r1, #64	; 0x40
    63fa:	5c59      	ldrb	r1, [r3, r1]
    63fc:	0409      	lsls	r1, r1, #16
    63fe:	4308      	orrs	r0, r1
    6400:	2141      	movs	r1, #65	; 0x41
    6402:	5c59      	ldrb	r1, [r3, r1]
    6404:	0609      	lsls	r1, r1, #24
    6406:	4301      	orrs	r1, r0
    6408:	d100      	bne.n	640c <setJoinDutyCycleTimer+0x84>
    640a:	e0e5      	b.n	65d8 <setJoinDutyCycleTimer+0x250>
			if(RegParams.joinDutyCycleTimeout > delta)
    640c:	428c      	cmp	r4, r1
    640e:	d300      	bcc.n	6412 <setJoinDutyCycleTimer+0x8a>
    6410:	e0b6      	b.n	6580 <setJoinDutyCycleTimer+0x1f8>
				RegParams.joinDutyCycleTimeout = RegParams.joinDutyCycleTimeout - delta;
    6412:	1b09      	subs	r1, r1, r4
    6414:	333e      	adds	r3, #62	; 0x3e
    6416:	7019      	strb	r1, [r3, #0]
    6418:	0a0a      	lsrs	r2, r1, #8
    641a:	705a      	strb	r2, [r3, #1]
    641c:	0c0a      	lsrs	r2, r1, #16
    641e:	709a      	strb	r2, [r3, #2]
    6420:	0e0a      	lsrs	r2, r1, #24
    6422:	70da      	strb	r2, [r3, #3]
				if(RegParams.joinDutyCycleTimeout > US_TO_MS(SWTIMER_MAX_TIMEOUT))
    6424:	4b72      	ldr	r3, [pc, #456]	; (65f0 <setJoinDutyCycleTimer+0x268>)
    6426:	4299      	cmp	r1, r3
    6428:	d800      	bhi.n	642c <setJoinDutyCycleTimer+0xa4>
    642a:	e093      	b.n	6554 <setJoinDutyCycleTimer+0x1cc>
					RegParams.pJoinDutyCycleTimer->remainingtime =RegParams.joinDutyCycleTimeout - (US_TO_MS(SWTIMER_MAX_TIMEOUT)) ;
    642c:	4c6d      	ldr	r4, [pc, #436]	; (65e4 <setJoinDutyCycleTimer+0x25c>)
    642e:	7d23      	ldrb	r3, [r4, #20]
    6430:	7d62      	ldrb	r2, [r4, #21]
    6432:	0212      	lsls	r2, r2, #8
    6434:	431a      	orrs	r2, r3
    6436:	7da3      	ldrb	r3, [r4, #22]
    6438:	041b      	lsls	r3, r3, #16
    643a:	431a      	orrs	r2, r3
    643c:	7de3      	ldrb	r3, [r4, #23]
    643e:	061b      	lsls	r3, r3, #24
    6440:	4313      	orrs	r3, r2
    6442:	4a6c      	ldr	r2, [pc, #432]	; (65f4 <setJoinDutyCycleTimer+0x26c>)
    6444:	4694      	mov	ip, r2
    6446:	4461      	add	r1, ip
    6448:	7119      	strb	r1, [r3, #4]
    644a:	0a0a      	lsrs	r2, r1, #8
    644c:	715a      	strb	r2, [r3, #5]
    644e:	0c0a      	lsrs	r2, r1, #16
    6450:	719a      	strb	r2, [r3, #6]
    6452:	0e09      	lsrs	r1, r1, #24
    6454:	71d9      	strb	r1, [r3, #7]
					SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, SWTIMER_MAX_TIMEOUT, SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    6456:	7d23      	ldrb	r3, [r4, #20]
    6458:	7d62      	ldrb	r2, [r4, #21]
    645a:	0212      	lsls	r2, r2, #8
    645c:	431a      	orrs	r2, r3
    645e:	7da3      	ldrb	r3, [r4, #22]
    6460:	041b      	lsls	r3, r3, #16
    6462:	431a      	orrs	r2, r3
    6464:	7de3      	ldrb	r3, [r4, #23]
    6466:	061b      	lsls	r3, r3, #24
    6468:	4313      	orrs	r3, r2
    646a:	7a18      	ldrb	r0, [r3, #8]
    646c:	2300      	movs	r3, #0
    646e:	9300      	str	r3, [sp, #0]
    6470:	4b61      	ldr	r3, [pc, #388]	; (65f8 <setJoinDutyCycleTimer+0x270>)
    6472:	2200      	movs	r2, #0
    6474:	4961      	ldr	r1, [pc, #388]	; (65fc <setJoinDutyCycleTimer+0x274>)
    6476:	4d62      	ldr	r5, [pc, #392]	; (6600 <setJoinDutyCycleTimer+0x278>)
    6478:	47a8      	blx	r5
					RegParams.joinDutyCycleTimeout = RegParams.joinDutyCycleTimeout - (US_TO_MS(SWTIMER_MAX_TIMEOUT));
    647a:	233e      	movs	r3, #62	; 0x3e
    647c:	5ce3      	ldrb	r3, [r4, r3]
    647e:	223f      	movs	r2, #63	; 0x3f
    6480:	5ca2      	ldrb	r2, [r4, r2]
    6482:	0212      	lsls	r2, r2, #8
    6484:	431a      	orrs	r2, r3
    6486:	2340      	movs	r3, #64	; 0x40
    6488:	5ce3      	ldrb	r3, [r4, r3]
    648a:	041b      	lsls	r3, r3, #16
    648c:	431a      	orrs	r2, r3
    648e:	2341      	movs	r3, #65	; 0x41
    6490:	5ce3      	ldrb	r3, [r4, r3]
    6492:	061b      	lsls	r3, r3, #24
    6494:	4313      	orrs	r3, r2
    6496:	4a57      	ldr	r2, [pc, #348]	; (65f4 <setJoinDutyCycleTimer+0x26c>)
    6498:	4694      	mov	ip, r2
    649a:	4463      	add	r3, ip
    649c:	343e      	adds	r4, #62	; 0x3e
    649e:	7023      	strb	r3, [r4, #0]
    64a0:	0a1a      	lsrs	r2, r3, #8
    64a2:	7062      	strb	r2, [r4, #1]
    64a4:	0c1a      	lsrs	r2, r3, #16
    64a6:	70a2      	strb	r2, [r4, #2]
    64a8:	0e1b      	lsrs	r3, r3, #24
    64aa:	70e3      	strb	r3, [r4, #3]
    64ac:	e094      	b.n	65d8 <setJoinDutyCycleTimer+0x250>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_1HR - 1);
    64ae:	9a02      	ldr	r2, [sp, #8]
    64b0:	0053      	lsls	r3, r2, #1
    64b2:	189b      	adds	r3, r3, r2
    64b4:	015a      	lsls	r2, r3, #5
    64b6:	189b      	adds	r3, r3, r2
    64b8:	4a4a      	ldr	r2, [pc, #296]	; (65e4 <setJoinDutyCycleTimer+0x25c>)
    64ba:	323e      	adds	r2, #62	; 0x3e
    64bc:	7013      	strb	r3, [r2, #0]
    64be:	0a19      	lsrs	r1, r3, #8
    64c0:	7051      	strb	r1, [r2, #1]
    64c2:	0c19      	lsrs	r1, r3, #16
    64c4:	7091      	strb	r1, [r2, #2]
    64c6:	0e1b      	lsrs	r3, r3, #24
    64c8:	70d3      	strb	r3, [r2, #3]
    64ca:	e77d      	b.n	63c8 <setJoinDutyCycleTimer+0x40>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_24HR - 1);
    64cc:	4b4d      	ldr	r3, [pc, #308]	; (6604 <setJoinDutyCycleTimer+0x27c>)
    64ce:	9a02      	ldr	r2, [sp, #8]
    64d0:	4353      	muls	r3, r2
    64d2:	4a44      	ldr	r2, [pc, #272]	; (65e4 <setJoinDutyCycleTimer+0x25c>)
    64d4:	323e      	adds	r2, #62	; 0x3e
    64d6:	7013      	strb	r3, [r2, #0]
    64d8:	0a19      	lsrs	r1, r3, #8
    64da:	7051      	strb	r1, [r2, #1]
    64dc:	0c19      	lsrs	r1, r3, #16
    64de:	7091      	strb	r1, [r2, #2]
    64e0:	0e1b      	lsrs	r3, r3, #24
    64e2:	70d3      	strb	r3, [r2, #3]
    64e4:	e770      	b.n	63c8 <setJoinDutyCycleTimer+0x40>
			ticks = SwTimerReadValue(RegParams.pJoinDutyCycleTimer->timerId);
    64e6:	4c3f      	ldr	r4, [pc, #252]	; (65e4 <setJoinDutyCycleTimer+0x25c>)
    64e8:	7d23      	ldrb	r3, [r4, #20]
    64ea:	7d62      	ldrb	r2, [r4, #21]
    64ec:	0212      	lsls	r2, r2, #8
    64ee:	431a      	orrs	r2, r3
    64f0:	7da3      	ldrb	r3, [r4, #22]
    64f2:	041b      	lsls	r3, r3, #16
    64f4:	431a      	orrs	r2, r3
    64f6:	7de3      	ldrb	r3, [r4, #23]
    64f8:	061b      	lsls	r3, r3, #24
    64fa:	4313      	orrs	r3, r2
    64fc:	7a18      	ldrb	r0, [r3, #8]
    64fe:	4b42      	ldr	r3, [pc, #264]	; (6608 <setJoinDutyCycleTimer+0x280>)
    6500:	4798      	blx	r3
    6502:	0005      	movs	r5, r0
			SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    6504:	7d23      	ldrb	r3, [r4, #20]
    6506:	7d62      	ldrb	r2, [r4, #21]
    6508:	0212      	lsls	r2, r2, #8
    650a:	431a      	orrs	r2, r3
    650c:	7da3      	ldrb	r3, [r4, #22]
    650e:	041b      	lsls	r3, r3, #16
    6510:	431a      	orrs	r2, r3
    6512:	7de3      	ldrb	r3, [r4, #23]
    6514:	061b      	lsls	r3, r3, #24
    6516:	4313      	orrs	r3, r2
    6518:	7a18      	ldrb	r0, [r3, #8]
    651a:	4b3c      	ldr	r3, [pc, #240]	; (660c <setJoinDutyCycleTimer+0x284>)
    651c:	4798      	blx	r3
			delta = RegParams.pJoinDutyCycleTimer->lastTimerInterval- US_TO_MS(ticks);
    651e:	7d23      	ldrb	r3, [r4, #20]
    6520:	7d62      	ldrb	r2, [r4, #21]
    6522:	0212      	lsls	r2, r2, #8
    6524:	431a      	orrs	r2, r3
    6526:	7da3      	ldrb	r3, [r4, #22]
    6528:	041b      	lsls	r3, r3, #16
    652a:	431a      	orrs	r2, r3
    652c:	7de3      	ldrb	r3, [r4, #23]
    652e:	061b      	lsls	r3, r3, #24
    6530:	4313      	orrs	r3, r2
    6532:	781a      	ldrb	r2, [r3, #0]
    6534:	785c      	ldrb	r4, [r3, #1]
    6536:	0224      	lsls	r4, r4, #8
    6538:	4322      	orrs	r2, r4
    653a:	789c      	ldrb	r4, [r3, #2]
    653c:	0424      	lsls	r4, r4, #16
    653e:	4314      	orrs	r4, r2
    6540:	78da      	ldrb	r2, [r3, #3]
    6542:	0612      	lsls	r2, r2, #24
    6544:	4314      	orrs	r4, r2
    6546:	21fa      	movs	r1, #250	; 0xfa
    6548:	0089      	lsls	r1, r1, #2
    654a:	0028      	movs	r0, r5
    654c:	4b30      	ldr	r3, [pc, #192]	; (6610 <setJoinDutyCycleTimer+0x288>)
    654e:	4798      	blx	r3
    6550:	1a24      	subs	r4, r4, r0
    6552:	e74a      	b.n	63ea <setJoinDutyCycleTimer+0x62>
				SwTimerStart (RegParams.pJoinDutyCycleTimer->timerId, MS_TO_US(RegParams.joinDutyCycleTimeout), SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    6554:	20fa      	movs	r0, #250	; 0xfa
    6556:	0080      	lsls	r0, r0, #2
    6558:	4341      	muls	r1, r0
    655a:	4c22      	ldr	r4, [pc, #136]	; (65e4 <setJoinDutyCycleTimer+0x25c>)
    655c:	7d23      	ldrb	r3, [r4, #20]
    655e:	7d62      	ldrb	r2, [r4, #21]
    6560:	0212      	lsls	r2, r2, #8
    6562:	431a      	orrs	r2, r3
    6564:	7da3      	ldrb	r3, [r4, #22]
    6566:	041b      	lsls	r3, r3, #16
    6568:	431a      	orrs	r2, r3
    656a:	7de3      	ldrb	r3, [r4, #23]
    656c:	061b      	lsls	r3, r3, #24
    656e:	4313      	orrs	r3, r2
    6570:	7a18      	ldrb	r0, [r3, #8]
    6572:	2300      	movs	r3, #0
    6574:	9300      	str	r3, [sp, #0]
    6576:	4b20      	ldr	r3, [pc, #128]	; (65f8 <setJoinDutyCycleTimer+0x270>)
    6578:	2200      	movs	r2, #0
    657a:	4c21      	ldr	r4, [pc, #132]	; (6600 <setJoinDutyCycleTimer+0x278>)
    657c:	47a0      	blx	r4
    657e:	e02b      	b.n	65d8 <setJoinDutyCycleTimer+0x250>
				RegParams.joinDutyCycleTimeout = 0;
    6580:	4b18      	ldr	r3, [pc, #96]	; (65e4 <setJoinDutyCycleTimer+0x25c>)
    6582:	333e      	adds	r3, #62	; 0x3e
    6584:	2200      	movs	r2, #0
    6586:	701a      	strb	r2, [r3, #0]
    6588:	705a      	strb	r2, [r3, #1]
    658a:	709a      	strb	r2, [r3, #2]
    658c:	70da      	strb	r2, [r3, #3]
    658e:	e023      	b.n	65d8 <setJoinDutyCycleTimer+0x250>
		SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    6590:	4c14      	ldr	r4, [pc, #80]	; (65e4 <setJoinDutyCycleTimer+0x25c>)
    6592:	7d23      	ldrb	r3, [r4, #20]
    6594:	7d62      	ldrb	r2, [r4, #21]
    6596:	0212      	lsls	r2, r2, #8
    6598:	431a      	orrs	r2, r3
    659a:	7da3      	ldrb	r3, [r4, #22]
    659c:	041b      	lsls	r3, r3, #16
    659e:	431a      	orrs	r2, r3
    65a0:	7de3      	ldrb	r3, [r4, #23]
    65a2:	061b      	lsls	r3, r3, #24
    65a4:	4313      	orrs	r3, r2
    65a6:	7a18      	ldrb	r0, [r3, #8]
    65a8:	4b18      	ldr	r3, [pc, #96]	; (660c <setJoinDutyCycleTimer+0x284>)
    65aa:	4798      	blx	r3
		RegParams.joinDutyCycleTimeout = 0;
    65ac:	0023      	movs	r3, r4
    65ae:	333e      	adds	r3, #62	; 0x3e
    65b0:	2200      	movs	r2, #0
    65b2:	701a      	strb	r2, [r3, #0]
    65b4:	705a      	strb	r2, [r3, #1]
    65b6:	709a      	strb	r2, [r3, #2]
    65b8:	70da      	strb	r2, [r3, #3]
		RegParams.pJoinDutyCycleTimer->remainingtime =0;
    65ba:	7d23      	ldrb	r3, [r4, #20]
    65bc:	7d62      	ldrb	r2, [r4, #21]
    65be:	0212      	lsls	r2, r2, #8
    65c0:	431a      	orrs	r2, r3
    65c2:	7da3      	ldrb	r3, [r4, #22]
    65c4:	041b      	lsls	r3, r3, #16
    65c6:	431a      	orrs	r2, r3
    65c8:	7de3      	ldrb	r3, [r4, #23]
    65ca:	061b      	lsls	r3, r3, #24
    65cc:	4313      	orrs	r3, r2
    65ce:	2200      	movs	r2, #0
    65d0:	711a      	strb	r2, [r3, #4]
    65d2:	715a      	strb	r2, [r3, #5]
    65d4:	719a      	strb	r2, [r3, #6]
    65d6:	71da      	strb	r2, [r3, #7]
}
    65d8:	2008      	movs	r0, #8
    65da:	b005      	add	sp, #20
    65dc:	bd30      	pop	{r4, r5, pc}
    65de:	46c0      	nop			; (mov r8, r8)
    65e0:	00013e5d 	.word	0x00013e5d
    65e4:	20001328 	.word	0x20001328
    65e8:	000003e7 	.word	0x000003e7
    65ec:	0000992d 	.word	0x0000992d
    65f0:	0020c49b 	.word	0x0020c49b
    65f4:	ffdf3b65 	.word	0xffdf3b65
    65f8:	00006eb9 	.word	0x00006eb9
    65fc:	7fffffff 	.word	0x7fffffff
    6600:	00009795 	.word	0x00009795
    6604:	0000270f 	.word	0x0000270f
    6608:	00009941 	.word	0x00009941
    660c:	00009aa1 	.word	0x00009aa1
    6610:	00010e0d 	.word	0x00010e0d

00006614 <setDutyCycleTimer>:
{
    6614:	b5f0      	push	{r4, r5, r6, r7, lr}
    6616:	46de      	mov	lr, fp
    6618:	4657      	mov	r7, sl
    661a:	464e      	mov	r6, r9
    661c:	4645      	mov	r5, r8
    661e:	b5e0      	push	{r5, r6, r7, lr}
    6620:	b087      	sub	sp, #28
	memcpy(&updateDCTimer,attrInput,sizeof(UpdateDutyCycleTimer_t));
    6622:	2206      	movs	r2, #6
    6624:	a804      	add	r0, sp, #16
    6626:	4bc9      	ldr	r3, [pc, #804]	; (694c <setDutyCycleTimer+0x338>)
    6628:	4798      	blx	r3
    bandId = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].subBandId;
    662a:	49c9      	ldr	r1, [pc, #804]	; (6950 <setDutyCycleTimer+0x33c>)
    662c:	7a0b      	ldrb	r3, [r1, #8]
    662e:	7a4a      	ldrb	r2, [r1, #9]
    6630:	0212      	lsls	r2, r2, #8
    6632:	4313      	orrs	r3, r2
    6634:	7a8a      	ldrb	r2, [r1, #10]
    6636:	0412      	lsls	r2, r2, #16
    6638:	431a      	orrs	r2, r3
    663a:	7acb      	ldrb	r3, [r1, #11]
    663c:	061b      	lsls	r3, r3, #24
    663e:	431a      	orrs	r2, r3
    6640:	232f      	movs	r3, #47	; 0x2f
    6642:	5cc9      	ldrb	r1, [r1, r3]
    6644:	004b      	lsls	r3, r1, #1
    6646:	185b      	adds	r3, r3, r1
    6648:	009b      	lsls	r3, r3, #2
    664a:	189b      	adds	r3, r3, r2
    664c:	7a1e      	ldrb	r6, [r3, #8]
	if (bandId == 0 && RegParams.band == ISM_JPN923)
    664e:	2e00      	cmp	r6, #0
    6650:	d105      	bne.n	665e <setDutyCycleTimer+0x4a>
    6652:	232e      	movs	r3, #46	; 0x2e
    6654:	4abe      	ldr	r2, [pc, #760]	; (6950 <setDutyCycleTimer+0x33c>)
    6656:	5cd3      	ldrb	r3, [r2, r3]
    6658:	2b05      	cmp	r3, #5
    665a:	d100      	bne.n	665e <setDutyCycleTimer+0x4a>
    665c:	e162      	b.n	6924 <setDutyCycleTimer+0x310>
	if(updateDCTimer.joining != 1)
    665e:	ab04      	add	r3, sp, #16
    6660:	791b      	ldrb	r3, [r3, #4]
    6662:	2b00      	cmp	r3, #0
    6664:	d16a      	bne.n	673c <setDutyCycleTimer+0x128>
		RegParams.pSubBandParams[bandId].subBandTimeout = ((uint32_t)updateDCTimer.timeOnAir * ((uint32_t)RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] - 1));
    6666:	a904      	add	r1, sp, #16
    6668:	880a      	ldrh	r2, [r1, #0]
    666a:	48b9      	ldr	r0, [pc, #740]	; (6950 <setDutyCycleTimer+0x33c>)
    666c:	7b07      	ldrb	r7, [r0, #12]
    666e:	7b43      	ldrb	r3, [r0, #13]
    6670:	021b      	lsls	r3, r3, #8
    6672:	433b      	orrs	r3, r7
    6674:	7b87      	ldrb	r7, [r0, #14]
    6676:	043f      	lsls	r7, r7, #16
    6678:	431f      	orrs	r7, r3
    667a:	7bc4      	ldrb	r4, [r0, #15]
    667c:	0624      	lsls	r4, r4, #24
    667e:	4327      	orrs	r7, r4
    6680:	0074      	lsls	r4, r6, #1
    6682:	19a4      	adds	r4, r4, r6
    6684:	00a4      	lsls	r4, r4, #2
    6686:	0035      	movs	r5, r6
    6688:	35d4      	adds	r5, #212	; 0xd4
    668a:	006d      	lsls	r5, r5, #1
    668c:	1945      	adds	r5, r0, r5
    668e:	796b      	ldrb	r3, [r5, #5]
    6690:	469c      	mov	ip, r3
    6692:	79ab      	ldrb	r3, [r5, #6]
    6694:	021b      	lsls	r3, r3, #8
    6696:	4665      	mov	r5, ip
    6698:	432b      	orrs	r3, r5
    669a:	3b01      	subs	r3, #1
    669c:	4353      	muls	r3, r2
    669e:	19e4      	adds	r4, r4, r7
    66a0:	7223      	strb	r3, [r4, #8]
    66a2:	0a1d      	lsrs	r5, r3, #8
    66a4:	7265      	strb	r5, [r4, #9]
    66a6:	0c1d      	lsrs	r5, r3, #16
    66a8:	72a5      	strb	r5, [r4, #10]
    66aa:	0e1b      	lsrs	r3, r3, #24
    66ac:	72e3      	strb	r3, [r4, #11]
		RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
    66ae:	884b      	ldrh	r3, [r1, #2]
    66b0:	3b01      	subs	r3, #1
    66b2:	435a      	muls	r2, r3
    66b4:	23ba      	movs	r3, #186	; 0xba
    66b6:	33ff      	adds	r3, #255	; 0xff
    66b8:	54c2      	strb	r2, [r0, r3]
    66ba:	0a11      	lsrs	r1, r2, #8
    66bc:	18c0      	adds	r0, r0, r3
    66be:	7041      	strb	r1, [r0, #1]
    66c0:	0c11      	lsrs	r1, r2, #16
    66c2:	7081      	strb	r1, [r0, #2]
    66c4:	0e12      	lsrs	r2, r2, #24
    66c6:	70c2      	strb	r2, [r0, #3]
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    66c8:	49a1      	ldr	r1, [pc, #644]	; (6950 <setDutyCycleTimer+0x33c>)
    66ca:	7c0b      	ldrb	r3, [r1, #16]
    66cc:	7c4a      	ldrb	r2, [r1, #17]
    66ce:	0212      	lsls	r2, r2, #8
    66d0:	431a      	orrs	r2, r3
    66d2:	7c8b      	ldrb	r3, [r1, #18]
    66d4:	041b      	lsls	r3, r3, #16
    66d6:	431a      	orrs	r2, r3
    66d8:	7ccb      	ldrb	r3, [r1, #19]
    66da:	061b      	lsls	r3, r3, #24
    66dc:	4313      	orrs	r3, r2
    66de:	7918      	ldrb	r0, [r3, #4]
    66e0:	4b9c      	ldr	r3, [pc, #624]	; (6954 <setDutyCycleTimer+0x340>)
    66e2:	4798      	blx	r3
    uint32_t delta = 0, minimSubBandTimer = UINT32_MAX, ticks,nextTimer;
    66e4:	2300      	movs	r3, #0
    66e6:	4699      	mov	r9, r3
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    66e8:	2800      	cmp	r0, #0
    66ea:	d136      	bne.n	675a <setDutyCycleTimer+0x146>
	minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    66ec:	4a98      	ldr	r2, [pc, #608]	; (6950 <setDutyCycleTimer+0x33c>)
    66ee:	7b13      	ldrb	r3, [r2, #12]
    66f0:	7b51      	ldrb	r1, [r2, #13]
    66f2:	0209      	lsls	r1, r1, #8
    66f4:	430b      	orrs	r3, r1
    66f6:	7b91      	ldrb	r1, [r2, #14]
    66f8:	0409      	lsls	r1, r1, #16
    66fa:	4319      	orrs	r1, r3
    66fc:	7bd3      	ldrb	r3, [r2, #15]
    66fe:	061b      	lsls	r3, r3, #24
    6700:	4319      	orrs	r1, r3
    6702:	0073      	lsls	r3, r6, #1
    6704:	199b      	adds	r3, r3, r6
    6706:	009b      	lsls	r3, r3, #2
    6708:	185b      	adds	r3, r3, r1
    670a:	7a18      	ldrb	r0, [r3, #8]
    670c:	7a59      	ldrb	r1, [r3, #9]
    670e:	0209      	lsls	r1, r1, #8
    6710:	4301      	orrs	r1, r0
    6712:	7a98      	ldrb	r0, [r3, #10]
    6714:	0400      	lsls	r0, r0, #16
    6716:	4301      	orrs	r1, r0
    6718:	7ad8      	ldrb	r0, [r3, #11]
    671a:	0600      	lsls	r0, r0, #24
    671c:	4308      	orrs	r0, r1
    671e:	9003      	str	r0, [sp, #12]
	for(i = 0; i < RegParams.maxSubBands; i++)
    6720:	2329      	movs	r3, #41	; 0x29
    6722:	5cd3      	ldrb	r3, [r2, r3]
    6724:	2b00      	cmp	r3, #0
    6726:	d100      	bne.n	672a <setDutyCycleTimer+0x116>
    6728:	e09c      	b.n	6864 <setDutyCycleTimer+0x250>
    672a:	2200      	movs	r2, #0
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    672c:	4d88      	ldr	r5, [pc, #544]	; (6950 <setDutyCycleTimer+0x33c>)
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    672e:	002f      	movs	r7, r5
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    6730:	2300      	movs	r3, #0
    6732:	469a      	mov	sl, r3
	for(i = 0; i < RegParams.maxSubBands; i++)
    6734:	46a8      	mov	r8, r5
    6736:	2329      	movs	r3, #41	; 0x29
    6738:	469c      	mov	ip, r3
    673a:	e051      	b.n	67e0 <setDutyCycleTimer+0x1cc>
		RegParams.joinDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
    673c:	a904      	add	r1, sp, #16
    673e:	884a      	ldrh	r2, [r1, #2]
    6740:	3a01      	subs	r2, #1
    6742:	880b      	ldrh	r3, [r1, #0]
    6744:	4353      	muls	r3, r2
    6746:	4a82      	ldr	r2, [pc, #520]	; (6950 <setDutyCycleTimer+0x33c>)
    6748:	323e      	adds	r2, #62	; 0x3e
    674a:	7013      	strb	r3, [r2, #0]
    674c:	0a19      	lsrs	r1, r3, #8
    674e:	7051      	strb	r1, [r2, #1]
    6750:	0c19      	lsrs	r1, r3, #16
    6752:	7091      	strb	r1, [r2, #2]
    6754:	0e1b      	lsrs	r3, r3, #24
    6756:	70d3      	strb	r3, [r2, #3]
    6758:	e7b6      	b.n	66c8 <setDutyCycleTimer+0xb4>
		SwTimerStop(RegParams.pDutyCycleTimer->timerId);
    675a:	4c7d      	ldr	r4, [pc, #500]	; (6950 <setDutyCycleTimer+0x33c>)
    675c:	7c23      	ldrb	r3, [r4, #16]
    675e:	7c62      	ldrb	r2, [r4, #17]
    6760:	0212      	lsls	r2, r2, #8
    6762:	431a      	orrs	r2, r3
    6764:	7ca3      	ldrb	r3, [r4, #18]
    6766:	041b      	lsls	r3, r3, #16
    6768:	431a      	orrs	r2, r3
    676a:	7ce3      	ldrb	r3, [r4, #19]
    676c:	061b      	lsls	r3, r3, #24
    676e:	4313      	orrs	r3, r2
    6770:	7918      	ldrb	r0, [r3, #4]
    6772:	4b79      	ldr	r3, [pc, #484]	; (6958 <setDutyCycleTimer+0x344>)
    6774:	4798      	blx	r3
		ticks = SwTimerReadValue(RegParams.pDutyCycleTimer->timerId);
    6776:	7c23      	ldrb	r3, [r4, #16]
    6778:	7c62      	ldrb	r2, [r4, #17]
    677a:	0212      	lsls	r2, r2, #8
    677c:	431a      	orrs	r2, r3
    677e:	7ca3      	ldrb	r3, [r4, #18]
    6780:	041b      	lsls	r3, r3, #16
    6782:	431a      	orrs	r2, r3
    6784:	7ce3      	ldrb	r3, [r4, #19]
    6786:	061b      	lsls	r3, r3, #24
    6788:	4313      	orrs	r3, r2
    678a:	7918      	ldrb	r0, [r3, #4]
    678c:	4b73      	ldr	r3, [pc, #460]	; (695c <setDutyCycleTimer+0x348>)
    678e:	4798      	blx	r3
		delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    6790:	7c23      	ldrb	r3, [r4, #16]
    6792:	7c62      	ldrb	r2, [r4, #17]
    6794:	0212      	lsls	r2, r2, #8
    6796:	431a      	orrs	r2, r3
    6798:	7ca3      	ldrb	r3, [r4, #18]
    679a:	041b      	lsls	r3, r3, #16
    679c:	431a      	orrs	r2, r3
    679e:	7ce3      	ldrb	r3, [r4, #19]
    67a0:	061b      	lsls	r3, r3, #24
    67a2:	4313      	orrs	r3, r2
    67a4:	781c      	ldrb	r4, [r3, #0]
    67a6:	785a      	ldrb	r2, [r3, #1]
    67a8:	0212      	lsls	r2, r2, #8
    67aa:	4322      	orrs	r2, r4
    67ac:	789c      	ldrb	r4, [r3, #2]
    67ae:	0424      	lsls	r4, r4, #16
    67b0:	4322      	orrs	r2, r4
    67b2:	78dc      	ldrb	r4, [r3, #3]
    67b4:	0624      	lsls	r4, r4, #24
    67b6:	4314      	orrs	r4, r2
    67b8:	21fa      	movs	r1, #250	; 0xfa
    67ba:	0089      	lsls	r1, r1, #2
    67bc:	4b68      	ldr	r3, [pc, #416]	; (6960 <setDutyCycleTimer+0x34c>)
    67be:	4798      	blx	r3
    67c0:	1a23      	subs	r3, r4, r0
    67c2:	4699      	mov	r9, r3
    67c4:	e792      	b.n	66ec <setDutyCycleTimer+0xd8>
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    67c6:	4651      	mov	r1, sl
    67c8:	7219      	strb	r1, [r3, #8]
    67ca:	7259      	strb	r1, [r3, #9]
    67cc:	7299      	strb	r1, [r3, #10]
    67ce:	72d9      	strb	r1, [r3, #11]
    67d0:	e02c      	b.n	682c <setDutyCycleTimer+0x218>
	for(i = 0; i < RegParams.maxSubBands; i++)
    67d2:	3201      	adds	r2, #1
    67d4:	b2d2      	uxtb	r2, r2
    67d6:	4643      	mov	r3, r8
    67d8:	4661      	mov	r1, ip
    67da:	5c5b      	ldrb	r3, [r3, r1]
    67dc:	4293      	cmp	r3, r2
    67de:	d941      	bls.n	6864 <setDutyCycleTimer+0x250>
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    67e0:	4296      	cmp	r6, r2
    67e2:	d0f6      	beq.n	67d2 <setDutyCycleTimer+0x1be>
    67e4:	0054      	lsls	r4, r2, #1
    67e6:	18a4      	adds	r4, r4, r2
    67e8:	00a4      	lsls	r4, r4, #2
    67ea:	7b2b      	ldrb	r3, [r5, #12]
    67ec:	7b69      	ldrb	r1, [r5, #13]
    67ee:	0209      	lsls	r1, r1, #8
    67f0:	4319      	orrs	r1, r3
    67f2:	7bab      	ldrb	r3, [r5, #14]
    67f4:	041b      	lsls	r3, r3, #16
    67f6:	4319      	orrs	r1, r3
    67f8:	7beb      	ldrb	r3, [r5, #15]
    67fa:	061b      	lsls	r3, r3, #24
    67fc:	430b      	orrs	r3, r1
    67fe:	191b      	adds	r3, r3, r4
    6800:	7a18      	ldrb	r0, [r3, #8]
    6802:	7a59      	ldrb	r1, [r3, #9]
    6804:	0209      	lsls	r1, r1, #8
    6806:	4301      	orrs	r1, r0
    6808:	7a98      	ldrb	r0, [r3, #10]
    680a:	0400      	lsls	r0, r0, #16
    680c:	4308      	orrs	r0, r1
    680e:	7ad9      	ldrb	r1, [r3, #11]
    6810:	0609      	lsls	r1, r1, #24
    6812:	4301      	orrs	r1, r0
    6814:	d0dd      	beq.n	67d2 <setDutyCycleTimer+0x1be>
			if(RegParams.pSubBandParams[i].subBandTimeout > delta)
    6816:	4589      	cmp	r9, r1
    6818:	d2d5      	bcs.n	67c6 <setDutyCycleTimer+0x1b2>
				          RegParams.pSubBandParams[i].subBandTimeout - delta;
    681a:	4648      	mov	r0, r9
    681c:	1a09      	subs	r1, r1, r0
				RegParams.pSubBandParams[i].subBandTimeout = 
    681e:	7219      	strb	r1, [r3, #8]
    6820:	0a08      	lsrs	r0, r1, #8
    6822:	7258      	strb	r0, [r3, #9]
    6824:	0c08      	lsrs	r0, r1, #16
    6826:	7298      	strb	r0, [r3, #10]
    6828:	0e09      	lsrs	r1, r1, #24
    682a:	72d9      	strb	r1, [r3, #11]
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    682c:	7b3b      	ldrb	r3, [r7, #12]
    682e:	7b79      	ldrb	r1, [r7, #13]
    6830:	0209      	lsls	r1, r1, #8
    6832:	4319      	orrs	r1, r3
    6834:	7bbb      	ldrb	r3, [r7, #14]
    6836:	041b      	lsls	r3, r3, #16
    6838:	4319      	orrs	r1, r3
    683a:	7bfb      	ldrb	r3, [r7, #15]
    683c:	061b      	lsls	r3, r3, #24
    683e:	430b      	orrs	r3, r1
    6840:	191c      	adds	r4, r3, r4
    6842:	7a23      	ldrb	r3, [r4, #8]
    6844:	7a61      	ldrb	r1, [r4, #9]
    6846:	0209      	lsls	r1, r1, #8
    6848:	4319      	orrs	r1, r3
    684a:	7aa3      	ldrb	r3, [r4, #10]
    684c:	041b      	lsls	r3, r3, #16
    684e:	4319      	orrs	r1, r3
    6850:	7ae3      	ldrb	r3, [r4, #11]
    6852:	061b      	lsls	r3, r3, #24
    6854:	430b      	orrs	r3, r1
    6856:	9903      	ldr	r1, [sp, #12]
    6858:	428b      	cmp	r3, r1
    685a:	d8ba      	bhi.n	67d2 <setDutyCycleTimer+0x1be>
    685c:	2b00      	cmp	r3, #0
    685e:	d0b8      	beq.n	67d2 <setDutyCycleTimer+0x1be>
				minimSubBandTimer = RegParams.pSubBandParams[i].subBandTimeout;
    6860:	9303      	str	r3, [sp, #12]
    6862:	e7b6      	b.n	67d2 <setDutyCycleTimer+0x1be>
	if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout != 0)
    6864:	493a      	ldr	r1, [pc, #232]	; (6950 <setDutyCycleTimer+0x33c>)
    6866:	23ba      	movs	r3, #186	; 0xba
    6868:	33ff      	adds	r3, #255	; 0xff
    686a:	5ccb      	ldrb	r3, [r1, r3]
    686c:	22dd      	movs	r2, #221	; 0xdd
    686e:	0052      	lsls	r2, r2, #1
    6870:	5c8a      	ldrb	r2, [r1, r2]
    6872:	0212      	lsls	r2, r2, #8
    6874:	431a      	orrs	r2, r3
    6876:	23bc      	movs	r3, #188	; 0xbc
    6878:	33ff      	adds	r3, #255	; 0xff
    687a:	5ccb      	ldrb	r3, [r1, r3]
    687c:	041b      	lsls	r3, r3, #16
    687e:	431a      	orrs	r2, r3
    6880:	23de      	movs	r3, #222	; 0xde
    6882:	005b      	lsls	r3, r3, #1
    6884:	5ccb      	ldrb	r3, [r1, r3]
    6886:	061b      	lsls	r3, r3, #24
    6888:	4313      	orrs	r3, r2
    688a:	d00f      	beq.n	68ac <setDutyCycleTimer+0x298>
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout > delta)
    688c:	4599      	cmp	r9, r3
    688e:	d251      	bcs.n	6934 <setDutyCycleTimer+0x320>
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout - delta;
    6890:	000a      	movs	r2, r1
    6892:	4649      	mov	r1, r9
    6894:	1a5b      	subs	r3, r3, r1
    6896:	21ba      	movs	r1, #186	; 0xba
    6898:	31ff      	adds	r1, #255	; 0xff
    689a:	5453      	strb	r3, [r2, r1]
    689c:	0a19      	lsrs	r1, r3, #8
    689e:	32ba      	adds	r2, #186	; 0xba
    68a0:	32ff      	adds	r2, #255	; 0xff
    68a2:	7051      	strb	r1, [r2, #1]
    68a4:	0c19      	lsrs	r1, r3, #16
    68a6:	7091      	strb	r1, [r2, #2]
    68a8:	0e1b      	lsrs	r3, r3, #24
    68aa:	70d3      	strb	r3, [r2, #3]
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout >= minimSubBandTimer)
    68ac:	4a28      	ldr	r2, [pc, #160]	; (6950 <setDutyCycleTimer+0x33c>)
    68ae:	23ba      	movs	r3, #186	; 0xba
    68b0:	33ff      	adds	r3, #255	; 0xff
    68b2:	5cd1      	ldrb	r1, [r2, r3]
    68b4:	3301      	adds	r3, #1
    68b6:	5cd3      	ldrb	r3, [r2, r3]
    68b8:	021b      	lsls	r3, r3, #8
    68ba:	430b      	orrs	r3, r1
    68bc:	21bc      	movs	r1, #188	; 0xbc
    68be:	31ff      	adds	r1, #255	; 0xff
    68c0:	5c51      	ldrb	r1, [r2, r1]
    68c2:	0409      	lsls	r1, r1, #16
    68c4:	430b      	orrs	r3, r1
    68c6:	21de      	movs	r1, #222	; 0xde
    68c8:	0049      	lsls	r1, r1, #1
    68ca:	5c51      	ldrb	r1, [r2, r1]
    68cc:	0609      	lsls	r1, r1, #24
    68ce:	4319      	orrs	r1, r3
    68d0:	9a03      	ldr	r2, [sp, #12]
    68d2:	4291      	cmp	r1, r2
    68d4:	d200      	bcs.n	68d8 <setDutyCycleTimer+0x2c4>
    68d6:	0011      	movs	r1, r2
		RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    68d8:	4b1d      	ldr	r3, [pc, #116]	; (6950 <setDutyCycleTimer+0x33c>)
    68da:	7c1a      	ldrb	r2, [r3, #16]
    68dc:	7c58      	ldrb	r0, [r3, #17]
    68de:	0200      	lsls	r0, r0, #8
    68e0:	4310      	orrs	r0, r2
    68e2:	7c9a      	ldrb	r2, [r3, #18]
    68e4:	0412      	lsls	r2, r2, #16
    68e6:	4310      	orrs	r0, r2
    68e8:	7cda      	ldrb	r2, [r3, #19]
    68ea:	0612      	lsls	r2, r2, #24
    68ec:	4302      	orrs	r2, r0
    68ee:	7011      	strb	r1, [r2, #0]
    68f0:	0a08      	lsrs	r0, r1, #8
    68f2:	7050      	strb	r0, [r2, #1]
    68f4:	0c08      	lsrs	r0, r1, #16
    68f6:	7090      	strb	r0, [r2, #2]
    68f8:	0e08      	lsrs	r0, r1, #24
    68fa:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    68fc:	22fa      	movs	r2, #250	; 0xfa
    68fe:	0092      	lsls	r2, r2, #2
    6900:	4351      	muls	r1, r2
    6902:	7c18      	ldrb	r0, [r3, #16]
    6904:	7c5a      	ldrb	r2, [r3, #17]
    6906:	0212      	lsls	r2, r2, #8
    6908:	4310      	orrs	r0, r2
    690a:	7c9a      	ldrb	r2, [r3, #18]
    690c:	0412      	lsls	r2, r2, #16
    690e:	4302      	orrs	r2, r0
    6910:	7cdb      	ldrb	r3, [r3, #19]
    6912:	061b      	lsls	r3, r3, #24
    6914:	4313      	orrs	r3, r2
    6916:	7918      	ldrb	r0, [r3, #4]
    6918:	2300      	movs	r3, #0
    691a:	9300      	str	r3, [sp, #0]
    691c:	4b11      	ldr	r3, [pc, #68]	; (6964 <setDutyCycleTimer+0x350>)
    691e:	2200      	movs	r2, #0
    6920:	4c11      	ldr	r4, [pc, #68]	; (6968 <setDutyCycleTimer+0x354>)
    6922:	47a0      	blx	r4
}
    6924:	2008      	movs	r0, #8
    6926:	b007      	add	sp, #28
    6928:	bc3c      	pop	{r2, r3, r4, r5}
    692a:	4690      	mov	r8, r2
    692c:	4699      	mov	r9, r3
    692e:	46a2      	mov	sl, r4
    6930:	46ab      	mov	fp, r5
    6932:	bdf0      	pop	{r4, r5, r6, r7, pc}
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    6934:	4b06      	ldr	r3, [pc, #24]	; (6950 <setDutyCycleTimer+0x33c>)
    6936:	2100      	movs	r1, #0
    6938:	22ba      	movs	r2, #186	; 0xba
    693a:	32ff      	adds	r2, #255	; 0xff
    693c:	5499      	strb	r1, [r3, r2]
    693e:	189b      	adds	r3, r3, r2
    6940:	2200      	movs	r2, #0
    6942:	705a      	strb	r2, [r3, #1]
    6944:	709a      	strb	r2, [r3, #2]
    6946:	70da      	strb	r2, [r3, #3]
    6948:	e7b0      	b.n	68ac <setDutyCycleTimer+0x298>
    694a:	46c0      	nop			; (mov r8, r8)
    694c:	00013e5d 	.word	0x00013e5d
    6950:	20001328 	.word	0x20001328
    6954:	0000992d 	.word	0x0000992d
    6958:	00009aa1 	.word	0x00009aa1
    695c:	00009941 	.word	0x00009941
    6960:	00010e0d 	.word	0x00010e0d
    6964:	0000696d 	.word	0x0000696d
    6968:	00009795 	.word	0x00009795

0000696c <DutyCycleCallback>:
{
    696c:	b5f0      	push	{r4, r5, r6, r7, lr}
    696e:	46de      	mov	lr, fp
    6970:	4657      	mov	r7, sl
    6972:	464e      	mov	r6, r9
    6974:	4645      	mov	r5, r8
    6976:	b5e0      	push	{r5, r6, r7, lr}
    6978:	b087      	sub	sp, #28
	uint32_t DutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    697a:	4980      	ldr	r1, [pc, #512]	; (6b7c <DutyCycleCallback+0x210>)
    697c:	23ba      	movs	r3, #186	; 0xba
    697e:	33ff      	adds	r3, #255	; 0xff
    6980:	5cca      	ldrb	r2, [r1, r3]
    6982:	3301      	adds	r3, #1
    6984:	5ccb      	ldrb	r3, [r1, r3]
    6986:	021b      	lsls	r3, r3, #8
    6988:	431a      	orrs	r2, r3
    698a:	23bc      	movs	r3, #188	; 0xbc
    698c:	33ff      	adds	r3, #255	; 0xff
    698e:	5ccb      	ldrb	r3, [r1, r3]
    6990:	041b      	lsls	r3, r3, #16
    6992:	4313      	orrs	r3, r2
    6994:	22de      	movs	r2, #222	; 0xde
    6996:	0052      	lsls	r2, r2, #1
    6998:	5c8a      	ldrb	r2, [r1, r2]
    699a:	0612      	lsls	r2, r2, #24
    699c:	431a      	orrs	r2, r3
    699e:	9205      	str	r2, [sp, #20]
    for (i=0; i < RegParams.maxSubBands; i++)
    69a0:	2329      	movs	r3, #41	; 0x29
    69a2:	5ccb      	ldrb	r3, [r1, r3]
    69a4:	2b00      	cmp	r3, #0
    69a6:	d100      	bne.n	69aa <DutyCycleCallback+0x3e>
    69a8:	e0df      	b.n	6b6a <DutyCycleCallback+0x1fe>
    69aa:	2600      	movs	r6, #0
    69ac:	2300      	movs	r3, #0
    69ae:	9304      	str	r3, [sp, #16]
    69b0:	3b01      	subs	r3, #1
    69b2:	9303      	str	r3, [sp, #12]
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    69b4:	000f      	movs	r7, r1
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    69b6:	4688      	mov	r8, r1
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    69b8:	468c      	mov	ip, r1
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    69ba:	2300      	movs	r3, #0
    69bc:	469b      	mov	fp, r3
    for (i=0; i < RegParams.maxSubBands; i++)
    69be:	468a      	mov	sl, r1
    69c0:	2329      	movs	r3, #41	; 0x29
    69c2:	4699      	mov	r9, r3
    69c4:	e00c      	b.n	69e0 <DutyCycleCallback+0x74>
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    69c6:	465a      	mov	r2, fp
    69c8:	721a      	strb	r2, [r3, #8]
    69ca:	725a      	strb	r2, [r3, #9]
    69cc:	729a      	strb	r2, [r3, #10]
    69ce:	72da      	strb	r2, [r3, #11]
    69d0:	e03f      	b.n	6a52 <DutyCycleCallback+0xe6>
    for (i=0; i < RegParams.maxSubBands; i++)
    69d2:	3601      	adds	r6, #1
    69d4:	b2f6      	uxtb	r6, r6
    69d6:	4653      	mov	r3, sl
    69d8:	464a      	mov	r2, r9
    69da:	5c9b      	ldrb	r3, [r3, r2]
    69dc:	42b3      	cmp	r3, r6
    69de:	d95a      	bls.n	6a96 <DutyCycleCallback+0x12a>
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    69e0:	0071      	lsls	r1, r6, #1
    69e2:	1989      	adds	r1, r1, r6
    69e4:	0089      	lsls	r1, r1, #2
    69e6:	7b3b      	ldrb	r3, [r7, #12]
    69e8:	7b7a      	ldrb	r2, [r7, #13]
    69ea:	0212      	lsls	r2, r2, #8
    69ec:	431a      	orrs	r2, r3
    69ee:	7bbb      	ldrb	r3, [r7, #14]
    69f0:	041b      	lsls	r3, r3, #16
    69f2:	431a      	orrs	r2, r3
    69f4:	7bfb      	ldrb	r3, [r7, #15]
    69f6:	061b      	lsls	r3, r3, #24
    69f8:	4313      	orrs	r3, r2
    69fa:	185b      	adds	r3, r3, r1
    69fc:	7a1a      	ldrb	r2, [r3, #8]
    69fe:	7a58      	ldrb	r0, [r3, #9]
    6a00:	0200      	lsls	r0, r0, #8
    6a02:	4310      	orrs	r0, r2
    6a04:	7a9a      	ldrb	r2, [r3, #10]
    6a06:	0412      	lsls	r2, r2, #16
    6a08:	4310      	orrs	r0, r2
    6a0a:	7ada      	ldrb	r2, [r3, #11]
    6a0c:	0612      	lsls	r2, r2, #24
    6a0e:	4302      	orrs	r2, r0
    6a10:	d0df      	beq.n	69d2 <DutyCycleCallback+0x66>
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    6a12:	4640      	mov	r0, r8
    6a14:	7c05      	ldrb	r5, [r0, #16]
    6a16:	7c44      	ldrb	r4, [r0, #17]
    6a18:	0224      	lsls	r4, r4, #8
    6a1a:	4325      	orrs	r5, r4
    6a1c:	7c80      	ldrb	r0, [r0, #18]
    6a1e:	0400      	lsls	r0, r0, #16
    6a20:	4305      	orrs	r5, r0
    6a22:	4640      	mov	r0, r8
    6a24:	7cc0      	ldrb	r0, [r0, #19]
    6a26:	0600      	lsls	r0, r0, #24
    6a28:	4328      	orrs	r0, r5
    6a2a:	7804      	ldrb	r4, [r0, #0]
    6a2c:	7845      	ldrb	r5, [r0, #1]
    6a2e:	022d      	lsls	r5, r5, #8
    6a30:	4325      	orrs	r5, r4
    6a32:	7884      	ldrb	r4, [r0, #2]
    6a34:	0424      	lsls	r4, r4, #16
    6a36:	4325      	orrs	r5, r4
    6a38:	78c4      	ldrb	r4, [r0, #3]
    6a3a:	0624      	lsls	r4, r4, #24
    6a3c:	432c      	orrs	r4, r5
    6a3e:	42a2      	cmp	r2, r4
    6a40:	d9c1      	bls.n	69c6 <DutyCycleCallback+0x5a>
                RegParams.pSubBandParams[i].subBandTimeout = RegParams.pSubBandParams[i].subBandTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    6a42:	1b12      	subs	r2, r2, r4
    6a44:	721a      	strb	r2, [r3, #8]
    6a46:	0a10      	lsrs	r0, r2, #8
    6a48:	7258      	strb	r0, [r3, #9]
    6a4a:	0c10      	lsrs	r0, r2, #16
    6a4c:	7298      	strb	r0, [r3, #10]
    6a4e:	0e12      	lsrs	r2, r2, #24
    6a50:	72da      	strb	r2, [r3, #11]
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    6a52:	4663      	mov	r3, ip
    6a54:	7b1b      	ldrb	r3, [r3, #12]
    6a56:	4662      	mov	r2, ip
    6a58:	7b52      	ldrb	r2, [r2, #13]
    6a5a:	0212      	lsls	r2, r2, #8
    6a5c:	431a      	orrs	r2, r3
    6a5e:	4663      	mov	r3, ip
    6a60:	7b9b      	ldrb	r3, [r3, #14]
    6a62:	041b      	lsls	r3, r3, #16
    6a64:	431a      	orrs	r2, r3
    6a66:	4663      	mov	r3, ip
    6a68:	7bdb      	ldrb	r3, [r3, #15]
    6a6a:	061b      	lsls	r3, r3, #24
    6a6c:	4313      	orrs	r3, r2
    6a6e:	1859      	adds	r1, r3, r1
    6a70:	7a0b      	ldrb	r3, [r1, #8]
    6a72:	7a4a      	ldrb	r2, [r1, #9]
    6a74:	0212      	lsls	r2, r2, #8
    6a76:	431a      	orrs	r2, r3
    6a78:	7a8b      	ldrb	r3, [r1, #10]
    6a7a:	041b      	lsls	r3, r3, #16
    6a7c:	431a      	orrs	r2, r3
    6a7e:	7acb      	ldrb	r3, [r1, #11]
    6a80:	061b      	lsls	r3, r3, #24
    6a82:	4313      	orrs	r3, r2
    6a84:	9a03      	ldr	r2, [sp, #12]
    6a86:	4293      	cmp	r3, r2
    6a88:	d8a3      	bhi.n	69d2 <DutyCycleCallback+0x66>
    6a8a:	2b00      	cmp	r3, #0
    6a8c:	d0a1      	beq.n	69d2 <DutyCycleCallback+0x66>
                minimSubBandTimer  = RegParams.pSubBandParams[i].subBandTimeout;
    6a8e:	9303      	str	r3, [sp, #12]
                found = 1;
    6a90:	2301      	movs	r3, #1
    6a92:	9304      	str	r3, [sp, #16]
    6a94:	e79d      	b.n	69d2 <DutyCycleCallback+0x66>
    if (( DutyCycleTimeout != 0 ))
    6a96:	9b05      	ldr	r3, [sp, #20]
    6a98:	2b00      	cmp	r3, #0
    6a9a:	d031      	beq.n	6b00 <DutyCycleCallback+0x194>
	    if (DutyCycleTimeout > RegParams.pDutyCycleTimer->lastTimerValue)
    6a9c:	4937      	ldr	r1, [pc, #220]	; (6b7c <DutyCycleCallback+0x210>)
    6a9e:	7c0b      	ldrb	r3, [r1, #16]
    6aa0:	7c4a      	ldrb	r2, [r1, #17]
    6aa2:	0212      	lsls	r2, r2, #8
    6aa4:	431a      	orrs	r2, r3
    6aa6:	7c8b      	ldrb	r3, [r1, #18]
    6aa8:	041b      	lsls	r3, r3, #16
    6aaa:	431a      	orrs	r2, r3
    6aac:	7ccb      	ldrb	r3, [r1, #19]
    6aae:	061b      	lsls	r3, r3, #24
    6ab0:	4313      	orrs	r3, r2
    6ab2:	7819      	ldrb	r1, [r3, #0]
    6ab4:	785a      	ldrb	r2, [r3, #1]
    6ab6:	0212      	lsls	r2, r2, #8
    6ab8:	430a      	orrs	r2, r1
    6aba:	7899      	ldrb	r1, [r3, #2]
    6abc:	0409      	lsls	r1, r1, #16
    6abe:	430a      	orrs	r2, r1
    6ac0:	78d9      	ldrb	r1, [r3, #3]
    6ac2:	0609      	lsls	r1, r1, #24
    6ac4:	4311      	orrs	r1, r2
    6ac6:	9a05      	ldr	r2, [sp, #20]
    6ac8:	428a      	cmp	r2, r1
    6aca:	d90f      	bls.n	6aec <DutyCycleCallback+0x180>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = DutyCycleTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    6acc:	1a51      	subs	r1, r2, r1
    6ace:	4b2b      	ldr	r3, [pc, #172]	; (6b7c <DutyCycleCallback+0x210>)
    6ad0:	22ba      	movs	r2, #186	; 0xba
    6ad2:	32ff      	adds	r2, #255	; 0xff
    6ad4:	5499      	strb	r1, [r3, r2]
    6ad6:	0a0a      	lsrs	r2, r1, #8
    6ad8:	33ba      	adds	r3, #186	; 0xba
    6ada:	33ff      	adds	r3, #255	; 0xff
    6adc:	705a      	strb	r2, [r3, #1]
    6ade:	0c0a      	lsrs	r2, r1, #16
    6ae0:	709a      	strb	r2, [r3, #2]
    6ae2:	0e0a      	lsrs	r2, r1, #24
    6ae4:	70da      	strb	r2, [r3, #3]
		if(DutyCycleTimeout)
    6ae6:	2900      	cmp	r1, #0
    6ae8:	d10e      	bne.n	6b08 <DutyCycleCallback+0x19c>
    6aea:	e009      	b.n	6b00 <DutyCycleCallback+0x194>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    6aec:	4b23      	ldr	r3, [pc, #140]	; (6b7c <DutyCycleCallback+0x210>)
    6aee:	2100      	movs	r1, #0
    6af0:	22ba      	movs	r2, #186	; 0xba
    6af2:	32ff      	adds	r2, #255	; 0xff
    6af4:	5499      	strb	r1, [r3, r2]
    6af6:	189b      	adds	r3, r3, r2
    6af8:	2200      	movs	r2, #0
    6afa:	705a      	strb	r2, [r3, #1]
    6afc:	709a      	strb	r2, [r3, #2]
    6afe:	70da      	strb	r2, [r3, #3]
    if ( found == 1 )
    6b00:	9b04      	ldr	r3, [sp, #16]
    6b02:	2b00      	cmp	r3, #0
    6b04:	d02a      	beq.n	6b5c <DutyCycleCallback+0x1f0>
    6b06:	2100      	movs	r1, #0
    6b08:	9a03      	ldr	r2, [sp, #12]
    6b0a:	4291      	cmp	r1, r2
    6b0c:	d200      	bcs.n	6b10 <DutyCycleCallback+0x1a4>
    6b0e:	0011      	movs	r1, r2
        RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    6b10:	4b1a      	ldr	r3, [pc, #104]	; (6b7c <DutyCycleCallback+0x210>)
    6b12:	7c1a      	ldrb	r2, [r3, #16]
    6b14:	7c58      	ldrb	r0, [r3, #17]
    6b16:	0200      	lsls	r0, r0, #8
    6b18:	4310      	orrs	r0, r2
    6b1a:	7c9a      	ldrb	r2, [r3, #18]
    6b1c:	0412      	lsls	r2, r2, #16
    6b1e:	4310      	orrs	r0, r2
    6b20:	7cda      	ldrb	r2, [r3, #19]
    6b22:	0612      	lsls	r2, r2, #24
    6b24:	4302      	orrs	r2, r0
    6b26:	7011      	strb	r1, [r2, #0]
    6b28:	0a08      	lsrs	r0, r1, #8
    6b2a:	7050      	strb	r0, [r2, #1]
    6b2c:	0c08      	lsrs	r0, r1, #16
    6b2e:	7090      	strb	r0, [r2, #2]
    6b30:	0e08      	lsrs	r0, r1, #24
    6b32:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    6b34:	22fa      	movs	r2, #250	; 0xfa
    6b36:	0092      	lsls	r2, r2, #2
    6b38:	4351      	muls	r1, r2
    6b3a:	7c18      	ldrb	r0, [r3, #16]
    6b3c:	7c5a      	ldrb	r2, [r3, #17]
    6b3e:	0212      	lsls	r2, r2, #8
    6b40:	4310      	orrs	r0, r2
    6b42:	7c9a      	ldrb	r2, [r3, #18]
    6b44:	0412      	lsls	r2, r2, #16
    6b46:	4302      	orrs	r2, r0
    6b48:	7cdb      	ldrb	r3, [r3, #19]
    6b4a:	061b      	lsls	r3, r3, #24
    6b4c:	4313      	orrs	r3, r2
    6b4e:	7918      	ldrb	r0, [r3, #4]
    6b50:	2300      	movs	r3, #0
    6b52:	9300      	str	r3, [sp, #0]
    6b54:	4b0a      	ldr	r3, [pc, #40]	; (6b80 <DutyCycleCallback+0x214>)
    6b56:	2200      	movs	r2, #0
    6b58:	4c0a      	ldr	r4, [pc, #40]	; (6b84 <DutyCycleCallback+0x218>)
    6b5a:	47a0      	blx	r4
}
    6b5c:	b007      	add	sp, #28
    6b5e:	bc3c      	pop	{r2, r3, r4, r5}
    6b60:	4690      	mov	r8, r2
    6b62:	4699      	mov	r9, r3
    6b64:	46a2      	mov	sl, r4
    6b66:	46ab      	mov	fp, r5
    6b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (( DutyCycleTimeout != 0 ))
    6b6a:	9b05      	ldr	r3, [sp, #20]
    6b6c:	2b00      	cmp	r3, #0
    6b6e:	d0f5      	beq.n	6b5c <DutyCycleCallback+0x1f0>
    bool found = 0;
    6b70:	2300      	movs	r3, #0
    6b72:	9304      	str	r3, [sp, #16]
    uint32_t minimSubBandTimer = UINT32_MAX;
    6b74:	3b01      	subs	r3, #1
    6b76:	9303      	str	r3, [sp, #12]
    6b78:	e790      	b.n	6a9c <DutyCycleCallback+0x130>
    6b7a:	46c0      	nop			; (mov r8, r8)
    6b7c:	20001328 	.word	0x20001328
    6b80:	0000696d 	.word	0x0000696d
    6b84:	00009795 	.word	0x00009795

00006b88 <setLBTTimer>:
{
    6b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b8a:	46de      	mov	lr, fp
    6b8c:	4657      	mov	r7, sl
    6b8e:	464e      	mov	r6, r9
    6b90:	4645      	mov	r5, r8
    6b92:	b5e0      	push	{r5, r6, r7, lr}
    6b94:	b085      	sub	sp, #20
    i = RegParams.lastUsedChannelIndex;
    6b96:	4a70      	ldr	r2, [pc, #448]	; (6d58 <setLBTTimer+0x1d0>)
    6b98:	232f      	movs	r3, #47	; 0x2f
	RegParams.cmnParams.paramsType2.channelTimer[i] = LBT_TRANSMIT_CHANNEL_PAUSE_DURATION;
    6b9a:	5cd4      	ldrb	r4, [r2, r3]
    6b9c:	0023      	movs	r3, r4
    6b9e:	3358      	adds	r3, #88	; 0x58
    6ba0:	009b      	lsls	r3, r3, #2
    6ba2:	18d3      	adds	r3, r2, r3
    6ba4:	2132      	movs	r1, #50	; 0x32
    6ba6:	7219      	strb	r1, [r3, #8]
    6ba8:	2100      	movs	r1, #0
    6baa:	7259      	strb	r1, [r3, #9]
    6bac:	7299      	strb	r1, [r3, #10]
    6bae:	72d9      	strb	r1, [r3, #11]
	if(SwTimerIsRunning(pLBTTimer->timerId))
    6bb0:	23d6      	movs	r3, #214	; 0xd6
    6bb2:	005b      	lsls	r3, r3, #1
    6bb4:	5cd0      	ldrb	r0, [r2, r3]
    6bb6:	4b69      	ldr	r3, [pc, #420]	; (6d5c <setLBTTimer+0x1d4>)
    6bb8:	4798      	blx	r3
    6bba:	2800      	cmp	r0, #0
    6bbc:	d12f      	bne.n	6c1e <setLBTTimer+0x96>
		minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    6bbe:	4866      	ldr	r0, [pc, #408]	; (6d58 <setLBTTimer+0x1d0>)
    6bc0:	0023      	movs	r3, r4
    6bc2:	3358      	adds	r3, #88	; 0x58
    6bc4:	009b      	lsls	r3, r3, #2
    6bc6:	18c3      	adds	r3, r0, r3
    6bc8:	7a19      	ldrb	r1, [r3, #8]
    6bca:	7a5a      	ldrb	r2, [r3, #9]
    6bcc:	0212      	lsls	r2, r2, #8
    6bce:	4311      	orrs	r1, r2
    6bd0:	7a9a      	ldrb	r2, [r3, #10]
    6bd2:	0412      	lsls	r2, r2, #16
    6bd4:	430a      	orrs	r2, r1
    6bd6:	7ad9      	ldrb	r1, [r3, #11]
    6bd8:	0609      	lsls	r1, r1, #24
    6bda:	4311      	orrs	r1, r2
    6bdc:	4689      	mov	r9, r1
	for(i = 0; i < RegParams.maxChannels; i++)
    6bde:	232a      	movs	r3, #42	; 0x2a
    6be0:	56c3      	ldrsb	r3, [r0, r3]
    6be2:	4698      	mov	r8, r3
    6be4:	2b00      	cmp	r3, #0
    6be6:	dc00      	bgt.n	6bea <setLBTTimer+0x62>
    6be8:	e08b      	b.n	6d02 <setLBTTimer+0x17a>
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    6bea:	2300      	movs	r3, #0
    6bec:	469a      	mov	sl, r3
		found = 1;
    6bee:	3301      	adds	r3, #1
    6bf0:	9303      	str	r3, [sp, #12]
		if(i != RegParams.lastUsedChannelIndex)
    6bf2:	4a59      	ldr	r2, [pc, #356]	; (6d58 <setLBTTimer+0x1d0>)
    6bf4:	232f      	movs	r3, #47	; 0x2f
    6bf6:	5cd0      	ldrb	r0, [r2, r3]
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    6bf8:	7911      	ldrb	r1, [r2, #4]
    6bfa:	7953      	ldrb	r3, [r2, #5]
    6bfc:	021b      	lsls	r3, r3, #8
    6bfe:	430b      	orrs	r3, r1
    6c00:	7991      	ldrb	r1, [r2, #6]
    6c02:	0409      	lsls	r1, r1, #16
    6c04:	430b      	orrs	r3, r1
    6c06:	79d1      	ldrb	r1, [r2, #7]
    6c08:	0609      	lsls	r1, r1, #24
    6c0a:	4319      	orrs	r1, r3
    6c0c:	2600      	movs	r6, #0
    6c0e:	2200      	movs	r2, #0
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    6c10:	2300      	movs	r3, #0
    6c12:	469c      	mov	ip, r3
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    6c14:	4653      	mov	r3, sl
    6c16:	9302      	str	r3, [sp, #8]
    6c18:	468b      	mov	fp, r1
    6c1a:	4645      	mov	r5, r8
    6c1c:	e03b      	b.n	6c96 <setLBTTimer+0x10e>
		SwTimerStop(pLBTTimer->timerId);
    6c1e:	4c4e      	ldr	r4, [pc, #312]	; (6d58 <setLBTTimer+0x1d0>)
    6c20:	25d6      	movs	r5, #214	; 0xd6
    6c22:	006d      	lsls	r5, r5, #1
    6c24:	5d60      	ldrb	r0, [r4, r5]
    6c26:	4b4e      	ldr	r3, [pc, #312]	; (6d60 <setLBTTimer+0x1d8>)
    6c28:	4798      	blx	r3
		ticks = SwTimerReadValue(pLBTTimer->timerId);
    6c2a:	5d60      	ldrb	r0, [r4, r5]
    6c2c:	4b4d      	ldr	r3, [pc, #308]	; (6d64 <setLBTTimer+0x1dc>)
    6c2e:	4798      	blx	r3
	for(i = 0; i < RegParams.maxChannels; i++)
    6c30:	232a      	movs	r3, #42	; 0x2a
    6c32:	56e3      	ldrsb	r3, [r4, r3]
    6c34:	4698      	mov	r8, r3
    6c36:	2b00      	cmp	r3, #0
    6c38:	dd66      	ble.n	6d08 <setLBTTimer+0x180>
		delta = pLBTTimer->lastTimerValue - US_TO_MS(ticks);
    6c3a:	4a47      	ldr	r2, [pc, #284]	; (6d58 <setLBTTimer+0x1d0>)
    6c3c:	23d4      	movs	r3, #212	; 0xd4
    6c3e:	005b      	lsls	r3, r3, #1
    6c40:	5cd4      	ldrb	r4, [r2, r3]
    6c42:	23aa      	movs	r3, #170	; 0xaa
    6c44:	33ff      	adds	r3, #255	; 0xff
    6c46:	5cd3      	ldrb	r3, [r2, r3]
    6c48:	021b      	lsls	r3, r3, #8
    6c4a:	4323      	orrs	r3, r4
    6c4c:	21d5      	movs	r1, #213	; 0xd5
    6c4e:	0049      	lsls	r1, r1, #1
    6c50:	5c54      	ldrb	r4, [r2, r1]
    6c52:	0424      	lsls	r4, r4, #16
    6c54:	4323      	orrs	r3, r4
    6c56:	21ac      	movs	r1, #172	; 0xac
    6c58:	31ff      	adds	r1, #255	; 0xff
    6c5a:	5c54      	ldrb	r4, [r2, r1]
    6c5c:	0624      	lsls	r4, r4, #24
    6c5e:	431c      	orrs	r4, r3
    6c60:	21fa      	movs	r1, #250	; 0xfa
    6c62:	0089      	lsls	r1, r1, #2
    6c64:	4b40      	ldr	r3, [pc, #256]	; (6d68 <setLBTTimer+0x1e0>)
    6c66:	4798      	blx	r3
    6c68:	1a23      	subs	r3, r4, r0
    6c6a:	469a      	mov	sl, r3
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    6c6c:	2301      	movs	r3, #1
    6c6e:	425b      	negs	r3, r3
    6c70:	4699      	mov	r9, r3
    bool found = 0;
    6c72:	2300      	movs	r3, #0
    6c74:	9303      	str	r3, [sp, #12]
    6c76:	e7bc      	b.n	6bf2 <setLBTTimer+0x6a>
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    6c78:	3658      	adds	r6, #88	; 0x58
    6c7a:	00b6      	lsls	r6, r6, #2
    6c7c:	4b36      	ldr	r3, [pc, #216]	; (6d58 <setLBTTimer+0x1d0>)
    6c7e:	4698      	mov	r8, r3
    6c80:	4446      	add	r6, r8
    6c82:	4663      	mov	r3, ip
    6c84:	7233      	strb	r3, [r6, #8]
    6c86:	7273      	strb	r3, [r6, #9]
    6c88:	72b3      	strb	r3, [r6, #10]
    6c8a:	72f3      	strb	r3, [r6, #11]
	for(i = 0; i < RegParams.maxChannels; i++)
    6c8c:	3201      	adds	r2, #1
    6c8e:	b2d2      	uxtb	r2, r2
    6c90:	0016      	movs	r6, r2
    6c92:	42aa      	cmp	r2, r5
    6c94:	da32      	bge.n	6cfc <setLBTTimer+0x174>
		if(i != RegParams.lastUsedChannelIndex)
    6c96:	4290      	cmp	r0, r2
    6c98:	d0f8      	beq.n	6c8c <setLBTTimer+0x104>
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    6c9a:	0053      	lsls	r3, r2, #1
    6c9c:	4659      	mov	r1, fp
    6c9e:	5c5c      	ldrb	r4, [r3, r1]
    6ca0:	2c00      	cmp	r4, #0
    6ca2:	d0f3      	beq.n	6c8c <setLBTTimer+0x104>
    6ca4:	0033      	movs	r3, r6
    6ca6:	3358      	adds	r3, #88	; 0x58
    6ca8:	009b      	lsls	r3, r3, #2
    6caa:	4f2b      	ldr	r7, [pc, #172]	; (6d58 <setLBTTimer+0x1d0>)
    6cac:	46b8      	mov	r8, r7
    6cae:	4443      	add	r3, r8
    6cb0:	7a1f      	ldrb	r7, [r3, #8]
    6cb2:	46ba      	mov	sl, r7
    6cb4:	7a5f      	ldrb	r7, [r3, #9]
    6cb6:	023f      	lsls	r7, r7, #8
    6cb8:	46b8      	mov	r8, r7
    6cba:	4657      	mov	r7, sl
    6cbc:	4641      	mov	r1, r8
    6cbe:	430f      	orrs	r7, r1
    6cc0:	7a99      	ldrb	r1, [r3, #10]
    6cc2:	0409      	lsls	r1, r1, #16
    6cc4:	430f      	orrs	r7, r1
    6cc6:	7adb      	ldrb	r3, [r3, #11]
    6cc8:	061b      	lsls	r3, r3, #24
    6cca:	433b      	orrs	r3, r7
    6ccc:	d0de      	beq.n	6c8c <setLBTTimer+0x104>
				if(RegParams.cmnParams.paramsType2.channelTimer[i] > delta)
    6cce:	9f02      	ldr	r7, [sp, #8]
    6cd0:	42bb      	cmp	r3, r7
    6cd2:	d9d1      	bls.n	6c78 <setLBTTimer+0xf0>
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    6cd4:	1bdb      	subs	r3, r3, r7
    6cd6:	3658      	adds	r6, #88	; 0x58
    6cd8:	00b6      	lsls	r6, r6, #2
    6cda:	491f      	ldr	r1, [pc, #124]	; (6d58 <setLBTTimer+0x1d0>)
    6cdc:	4688      	mov	r8, r1
    6cde:	4446      	add	r6, r8
    6ce0:	7233      	strb	r3, [r6, #8]
    6ce2:	0a19      	lsrs	r1, r3, #8
    6ce4:	7271      	strb	r1, [r6, #9]
    6ce6:	0c19      	lsrs	r1, r3, #16
    6ce8:	72b1      	strb	r1, [r6, #10]
    6cea:	0e19      	lsrs	r1, r3, #24
    6cec:	72f1      	strb	r1, [r6, #11]
				if((RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    6cee:	454b      	cmp	r3, r9
    6cf0:	d8cc      	bhi.n	6c8c <setLBTTimer+0x104>
    6cf2:	2b00      	cmp	r3, #0
    6cf4:	d0ca      	beq.n	6c8c <setLBTTimer+0x104>
    6cf6:	4699      	mov	r9, r3
					found = 1;
    6cf8:	9403      	str	r4, [sp, #12]
    6cfa:	e7c7      	b.n	6c8c <setLBTTimer+0x104>
	if((found == 1) && minim)
    6cfc:	9b03      	ldr	r3, [sp, #12]
    6cfe:	2b00      	cmp	r3, #0
    6d00:	d002      	beq.n	6d08 <setLBTTimer+0x180>
    6d02:	464b      	mov	r3, r9
    6d04:	2b00      	cmp	r3, #0
    6d06:	d107      	bne.n	6d18 <setLBTTimer+0x190>
}
    6d08:	2008      	movs	r0, #8
    6d0a:	b005      	add	sp, #20
    6d0c:	bc3c      	pop	{r2, r3, r4, r5}
    6d0e:	4690      	mov	r8, r2
    6d10:	4699      	mov	r9, r3
    6d12:	46a2      	mov	sl, r4
    6d14:	46ab      	mov	fp, r5
    6d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pLBTTimer->lastTimerValue = minim;
    6d18:	4b0f      	ldr	r3, [pc, #60]	; (6d58 <setLBTTimer+0x1d0>)
    6d1a:	22d4      	movs	r2, #212	; 0xd4
    6d1c:	0052      	lsls	r2, r2, #1
    6d1e:	4649      	mov	r1, r9
    6d20:	5499      	strb	r1, [r3, r2]
    6d22:	464a      	mov	r2, r9
    6d24:	0a11      	lsrs	r1, r2, #8
    6d26:	001a      	movs	r2, r3
    6d28:	32a9      	adds	r2, #169	; 0xa9
    6d2a:	32ff      	adds	r2, #255	; 0xff
    6d2c:	7051      	strb	r1, [r2, #1]
    6d2e:	4649      	mov	r1, r9
    6d30:	0c09      	lsrs	r1, r1, #16
    6d32:	7091      	strb	r1, [r2, #2]
    6d34:	4649      	mov	r1, r9
    6d36:	0e09      	lsrs	r1, r1, #24
    6d38:	70d1      	strb	r1, [r2, #3]
		SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    6d3a:	21fa      	movs	r1, #250	; 0xfa
    6d3c:	0089      	lsls	r1, r1, #2
    6d3e:	464a      	mov	r2, r9
    6d40:	4351      	muls	r1, r2
    6d42:	22d6      	movs	r2, #214	; 0xd6
    6d44:	0052      	lsls	r2, r2, #1
    6d46:	5c98      	ldrb	r0, [r3, r2]
    6d48:	2300      	movs	r3, #0
    6d4a:	9300      	str	r3, [sp, #0]
    6d4c:	4b07      	ldr	r3, [pc, #28]	; (6d6c <setLBTTimer+0x1e4>)
    6d4e:	2200      	movs	r2, #0
    6d50:	4c07      	ldr	r4, [pc, #28]	; (6d70 <setLBTTimer+0x1e8>)
    6d52:	47a0      	blx	r4
    6d54:	e7d8      	b.n	6d08 <setLBTTimer+0x180>
    6d56:	46c0      	nop			; (mov r8, r8)
    6d58:	20001328 	.word	0x20001328
    6d5c:	0000992d 	.word	0x0000992d
    6d60:	00009aa1 	.word	0x00009aa1
    6d64:	00009941 	.word	0x00009941
    6d68:	00010e0d 	.word	0x00010e0d
    6d6c:	00006d75 	.word	0x00006d75
    6d70:	00009795 	.word	0x00009795

00006d74 <LBTChannelPauseCallback>:
{
    6d74:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d76:	46de      	mov	lr, fp
    6d78:	4657      	mov	r7, sl
    6d7a:	464e      	mov	r6, r9
    6d7c:	4645      	mov	r5, r8
    6d7e:	b5e0      	push	{r5, r6, r7, lr}
    6d80:	b085      	sub	sp, #20
    for (i=0; i < RegParams.maxChannels; i++)
    6d82:	232a      	movs	r3, #42	; 0x2a
    6d84:	4a49      	ldr	r2, [pc, #292]	; (6eac <LBTChannelPauseCallback+0x138>)
    6d86:	56d6      	ldrsb	r6, [r2, r3]
    6d88:	2e00      	cmp	r6, #0
    6d8a:	dd68      	ble.n	6e5e <LBTChannelPauseCallback+0xea>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    6d8c:	0013      	movs	r3, r2
    6d8e:	7915      	ldrb	r5, [r2, #4]
    6d90:	7952      	ldrb	r2, [r2, #5]
    6d92:	0212      	lsls	r2, r2, #8
    6d94:	432a      	orrs	r2, r5
    6d96:	799d      	ldrb	r5, [r3, #6]
    6d98:	042d      	lsls	r5, r5, #16
    6d9a:	432a      	orrs	r2, r5
    6d9c:	79dd      	ldrb	r5, [r3, #7]
    6d9e:	062d      	lsls	r5, r5, #24
    6da0:	4315      	orrs	r5, r2
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    6da2:	22d4      	movs	r2, #212	; 0xd4
    6da4:	0052      	lsls	r2, r2, #1
    6da6:	5c9f      	ldrb	r7, [r3, r2]
    6da8:	22aa      	movs	r2, #170	; 0xaa
    6daa:	32ff      	adds	r2, #255	; 0xff
    6dac:	5c9a      	ldrb	r2, [r3, r2]
    6dae:	0212      	lsls	r2, r2, #8
    6db0:	433a      	orrs	r2, r7
    6db2:	21d5      	movs	r1, #213	; 0xd5
    6db4:	0049      	lsls	r1, r1, #1
    6db6:	5c5f      	ldrb	r7, [r3, r1]
    6db8:	043f      	lsls	r7, r7, #16
    6dba:	433a      	orrs	r2, r7
    6dbc:	21ac      	movs	r1, #172	; 0xac
    6dbe:	31ff      	adds	r1, #255	; 0xff
    6dc0:	5c5f      	ldrb	r7, [r3, r1]
    6dc2:	063f      	lsls	r7, r7, #24
    6dc4:	4317      	orrs	r7, r2
    6dc6:	9703      	str	r7, [sp, #12]
    6dc8:	2000      	movs	r0, #0
    6dca:	2300      	movs	r3, #0
    6dcc:	2200      	movs	r2, #0
    6dce:	4691      	mov	r9, r2
    6dd0:	3a01      	subs	r2, #1
    6dd2:	4690      	mov	r8, r2
                RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    6dd4:	2200      	movs	r2, #0
    6dd6:	4694      	mov	ip, r2
    6dd8:	e00e      	b.n	6df8 <LBTChannelPauseCallback+0x84>
    6dda:	3058      	adds	r0, #88	; 0x58
    6ddc:	0080      	lsls	r0, r0, #2
    6dde:	4a33      	ldr	r2, [pc, #204]	; (6eac <LBTChannelPauseCallback+0x138>)
    6de0:	4692      	mov	sl, r2
    6de2:	4450      	add	r0, sl
    6de4:	4662      	mov	r2, ip
    6de6:	7202      	strb	r2, [r0, #8]
    6de8:	7242      	strb	r2, [r0, #9]
    6dea:	7282      	strb	r2, [r0, #10]
    6dec:	72c2      	strb	r2, [r0, #11]
    for (i=0; i < RegParams.maxChannels; i++)
    6dee:	3301      	adds	r3, #1
    6df0:	b2db      	uxtb	r3, r3
    6df2:	0018      	movs	r0, r3
    6df4:	42b3      	cmp	r3, r6
    6df6:	da2f      	bge.n	6e58 <LBTChannelPauseCallback+0xe4>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    6df8:	005a      	lsls	r2, r3, #1
    6dfa:	5d54      	ldrb	r4, [r2, r5]
    6dfc:	2c00      	cmp	r4, #0
    6dfe:	d0f6      	beq.n	6dee <LBTChannelPauseCallback+0x7a>
    6e00:	0002      	movs	r2, r0
    6e02:	3258      	adds	r2, #88	; 0x58
    6e04:	0092      	lsls	r2, r2, #2
    6e06:	4929      	ldr	r1, [pc, #164]	; (6eac <LBTChannelPauseCallback+0x138>)
    6e08:	468a      	mov	sl, r1
    6e0a:	4452      	add	r2, sl
    6e0c:	7a17      	ldrb	r7, [r2, #8]
    6e0e:	46bb      	mov	fp, r7
    6e10:	7a57      	ldrb	r7, [r2, #9]
    6e12:	023f      	lsls	r7, r7, #8
    6e14:	46ba      	mov	sl, r7
    6e16:	465f      	mov	r7, fp
    6e18:	4651      	mov	r1, sl
    6e1a:	430f      	orrs	r7, r1
    6e1c:	7a91      	ldrb	r1, [r2, #10]
    6e1e:	0409      	lsls	r1, r1, #16
    6e20:	430f      	orrs	r7, r1
    6e22:	7ad2      	ldrb	r2, [r2, #11]
    6e24:	0612      	lsls	r2, r2, #24
    6e26:	433a      	orrs	r2, r7
    6e28:	d0e1      	beq.n	6dee <LBTChannelPauseCallback+0x7a>
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    6e2a:	9f03      	ldr	r7, [sp, #12]
    6e2c:	42ba      	cmp	r2, r7
    6e2e:	d9d4      	bls.n	6dda <LBTChannelPauseCallback+0x66>
                RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - pLBTTimer->lastTimerValue;
    6e30:	1bd2      	subs	r2, r2, r7
    6e32:	3058      	adds	r0, #88	; 0x58
    6e34:	0080      	lsls	r0, r0, #2
    6e36:	491d      	ldr	r1, [pc, #116]	; (6eac <LBTChannelPauseCallback+0x138>)
    6e38:	468a      	mov	sl, r1
    6e3a:	4450      	add	r0, sl
    6e3c:	7202      	strb	r2, [r0, #8]
    6e3e:	0a11      	lsrs	r1, r2, #8
    6e40:	7241      	strb	r1, [r0, #9]
    6e42:	0c11      	lsrs	r1, r2, #16
    6e44:	7281      	strb	r1, [r0, #10]
    6e46:	0e11      	lsrs	r1, r2, #24
    6e48:	72c1      	strb	r1, [r0, #11]
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    6e4a:	4542      	cmp	r2, r8
    6e4c:	d8cf      	bhi.n	6dee <LBTChannelPauseCallback+0x7a>
    6e4e:	2a00      	cmp	r2, #0
    6e50:	d0cd      	beq.n	6dee <LBTChannelPauseCallback+0x7a>
                found = 1;
    6e52:	46a1      	mov	r9, r4
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    6e54:	4690      	mov	r8, r2
    6e56:	e7ca      	b.n	6dee <LBTChannelPauseCallback+0x7a>
    if ( found == 1 )
    6e58:	464b      	mov	r3, r9
    6e5a:	2b00      	cmp	r3, #0
    6e5c:	d106      	bne.n	6e6c <LBTChannelPauseCallback+0xf8>
}
    6e5e:	b005      	add	sp, #20
    6e60:	bc3c      	pop	{r2, r3, r4, r5}
    6e62:	4690      	mov	r8, r2
    6e64:	4699      	mov	r9, r3
    6e66:	46a2      	mov	sl, r4
    6e68:	46ab      	mov	fp, r5
    6e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pLBTTimer->lastTimerValue = minim;
    6e6c:	4b0f      	ldr	r3, [pc, #60]	; (6eac <LBTChannelPauseCallback+0x138>)
    6e6e:	22d4      	movs	r2, #212	; 0xd4
    6e70:	0052      	lsls	r2, r2, #1
    6e72:	4641      	mov	r1, r8
    6e74:	5499      	strb	r1, [r3, r2]
    6e76:	4642      	mov	r2, r8
    6e78:	0a11      	lsrs	r1, r2, #8
    6e7a:	001a      	movs	r2, r3
    6e7c:	32a9      	adds	r2, #169	; 0xa9
    6e7e:	32ff      	adds	r2, #255	; 0xff
    6e80:	7051      	strb	r1, [r2, #1]
    6e82:	4641      	mov	r1, r8
    6e84:	0c09      	lsrs	r1, r1, #16
    6e86:	7091      	strb	r1, [r2, #2]
    6e88:	4641      	mov	r1, r8
    6e8a:	0e09      	lsrs	r1, r1, #24
    6e8c:	70d1      	strb	r1, [r2, #3]
        SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    6e8e:	21fa      	movs	r1, #250	; 0xfa
    6e90:	0089      	lsls	r1, r1, #2
    6e92:	4642      	mov	r2, r8
    6e94:	4351      	muls	r1, r2
    6e96:	22d6      	movs	r2, #214	; 0xd6
    6e98:	0052      	lsls	r2, r2, #1
    6e9a:	5c98      	ldrb	r0, [r3, r2]
    6e9c:	2300      	movs	r3, #0
    6e9e:	9300      	str	r3, [sp, #0]
    6ea0:	4b03      	ldr	r3, [pc, #12]	; (6eb0 <LBTChannelPauseCallback+0x13c>)
    6ea2:	2200      	movs	r2, #0
    6ea4:	4c03      	ldr	r4, [pc, #12]	; (6eb4 <LBTChannelPauseCallback+0x140>)
    6ea6:	47a0      	blx	r4
}
    6ea8:	e7d9      	b.n	6e5e <LBTChannelPauseCallback+0xea>
    6eaa:	46c0      	nop			; (mov r8, r8)
    6eac:	20001328 	.word	0x20001328
    6eb0:	00006d75 	.word	0x00006d75
    6eb4:	00009795 	.word	0x00009795

00006eb8 <JoinDutyCycleCallback>:
{   
    6eb8:	b510      	push	{r4, lr}
    6eba:	b082      	sub	sp, #8
	if(RegParams.pJoinDutyCycleTimer->remainingtime!=0)
    6ebc:	492e      	ldr	r1, [pc, #184]	; (6f78 <JoinDutyCycleCallback+0xc0>)
    6ebe:	7d0b      	ldrb	r3, [r1, #20]
    6ec0:	7d4a      	ldrb	r2, [r1, #21]
    6ec2:	0212      	lsls	r2, r2, #8
    6ec4:	431a      	orrs	r2, r3
    6ec6:	7d8b      	ldrb	r3, [r1, #22]
    6ec8:	041b      	lsls	r3, r3, #16
    6eca:	431a      	orrs	r2, r3
    6ecc:	7dcb      	ldrb	r3, [r1, #23]
    6ece:	061b      	lsls	r3, r3, #24
    6ed0:	4313      	orrs	r3, r2
    6ed2:	7919      	ldrb	r1, [r3, #4]
    6ed4:	795a      	ldrb	r2, [r3, #5]
    6ed6:	0212      	lsls	r2, r2, #8
    6ed8:	430a      	orrs	r2, r1
    6eda:	7999      	ldrb	r1, [r3, #6]
    6edc:	0409      	lsls	r1, r1, #16
    6ede:	430a      	orrs	r2, r1
    6ee0:	79d9      	ldrb	r1, [r3, #7]
    6ee2:	0609      	lsls	r1, r1, #24
    6ee4:	4311      	orrs	r1, r2
    6ee6:	d03c      	beq.n	6f62 <JoinDutyCycleCallback+0xaa>
		if(RegParams.pJoinDutyCycleTimer->remainingtime>US_TO_MS(SWTIMER_MAX_TIMEOUT))
    6ee8:	4a24      	ldr	r2, [pc, #144]	; (6f7c <JoinDutyCycleCallback+0xc4>)
    6eea:	4291      	cmp	r1, r2
    6eec:	d91e      	bls.n	6f2c <JoinDutyCycleCallback+0x74>
			RegParams.pJoinDutyCycleTimer->remainingtime = RegParams.pJoinDutyCycleTimer->remainingtime-(US_TO_MS(SWTIMER_MAX_TIMEOUT));
    6eee:	4a24      	ldr	r2, [pc, #144]	; (6f80 <JoinDutyCycleCallback+0xc8>)
    6ef0:	4694      	mov	ip, r2
    6ef2:	4461      	add	r1, ip
    6ef4:	7119      	strb	r1, [r3, #4]
    6ef6:	0a0a      	lsrs	r2, r1, #8
    6ef8:	715a      	strb	r2, [r3, #5]
    6efa:	0c0a      	lsrs	r2, r1, #16
    6efc:	719a      	strb	r2, [r3, #6]
    6efe:	0e09      	lsrs	r1, r1, #24
    6f00:	71d9      	strb	r1, [r3, #7]
			SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, SWTIMER_MAX_TIMEOUT, SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    6f02:	491d      	ldr	r1, [pc, #116]	; (6f78 <JoinDutyCycleCallback+0xc0>)
    6f04:	7d0b      	ldrb	r3, [r1, #20]
    6f06:	7d4a      	ldrb	r2, [r1, #21]
    6f08:	0212      	lsls	r2, r2, #8
    6f0a:	431a      	orrs	r2, r3
    6f0c:	7d8b      	ldrb	r3, [r1, #22]
    6f0e:	041b      	lsls	r3, r3, #16
    6f10:	431a      	orrs	r2, r3
    6f12:	7dcb      	ldrb	r3, [r1, #23]
    6f14:	061b      	lsls	r3, r3, #24
    6f16:	4313      	orrs	r3, r2
    6f18:	7a18      	ldrb	r0, [r3, #8]
    6f1a:	2300      	movs	r3, #0
    6f1c:	9300      	str	r3, [sp, #0]
    6f1e:	4b19      	ldr	r3, [pc, #100]	; (6f84 <JoinDutyCycleCallback+0xcc>)
    6f20:	2200      	movs	r2, #0
    6f22:	4919      	ldr	r1, [pc, #100]	; (6f88 <JoinDutyCycleCallback+0xd0>)
    6f24:	4c19      	ldr	r4, [pc, #100]	; (6f8c <JoinDutyCycleCallback+0xd4>)
    6f26:	47a0      	blx	r4
}
    6f28:	b002      	add	sp, #8
    6f2a:	bd10      	pop	{r4, pc}
			SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, MS_TO_US(RegParams.pJoinDutyCycleTimer->remainingtime), SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    6f2c:	22fa      	movs	r2, #250	; 0xfa
    6f2e:	0092      	lsls	r2, r2, #2
    6f30:	4351      	muls	r1, r2
    6f32:	7a18      	ldrb	r0, [r3, #8]
    6f34:	2300      	movs	r3, #0
    6f36:	9300      	str	r3, [sp, #0]
    6f38:	4b12      	ldr	r3, [pc, #72]	; (6f84 <JoinDutyCycleCallback+0xcc>)
    6f3a:	2200      	movs	r2, #0
    6f3c:	4c13      	ldr	r4, [pc, #76]	; (6f8c <JoinDutyCycleCallback+0xd4>)
    6f3e:	47a0      	blx	r4
			RegParams.pJoinDutyCycleTimer->remainingtime =0;
    6f40:	490d      	ldr	r1, [pc, #52]	; (6f78 <JoinDutyCycleCallback+0xc0>)
    6f42:	7d0b      	ldrb	r3, [r1, #20]
    6f44:	7d4a      	ldrb	r2, [r1, #21]
    6f46:	0212      	lsls	r2, r2, #8
    6f48:	431a      	orrs	r2, r3
    6f4a:	7d8b      	ldrb	r3, [r1, #22]
    6f4c:	041b      	lsls	r3, r3, #16
    6f4e:	431a      	orrs	r2, r3
    6f50:	7dcb      	ldrb	r3, [r1, #23]
    6f52:	061b      	lsls	r3, r3, #24
    6f54:	4313      	orrs	r3, r2
    6f56:	2200      	movs	r2, #0
    6f58:	711a      	strb	r2, [r3, #4]
    6f5a:	715a      	strb	r2, [r3, #5]
    6f5c:	719a      	strb	r2, [r3, #6]
    6f5e:	71da      	strb	r2, [r3, #7]
    6f60:	e7e2      	b.n	6f28 <JoinDutyCycleCallback+0x70>
	SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    6f62:	7a18      	ldrb	r0, [r3, #8]
    6f64:	4b0a      	ldr	r3, [pc, #40]	; (6f90 <JoinDutyCycleCallback+0xd8>)
    6f66:	4798      	blx	r3
	RegParams.joinDutyCycleTimeout = 0;
    6f68:	4b03      	ldr	r3, [pc, #12]	; (6f78 <JoinDutyCycleCallback+0xc0>)
    6f6a:	333e      	adds	r3, #62	; 0x3e
    6f6c:	2200      	movs	r2, #0
    6f6e:	701a      	strb	r2, [r3, #0]
    6f70:	705a      	strb	r2, [r3, #1]
    6f72:	709a      	strb	r2, [r3, #2]
    6f74:	70da      	strb	r2, [r3, #3]
}
    6f76:	e7d7      	b.n	6f28 <JoinDutyCycleCallback+0x70>
    6f78:	20001328 	.word	0x20001328
    6f7c:	0020c49b 	.word	0x0020c49b
    6f80:	ffdf3b65 	.word	0xffdf3b65
    6f84:	00006eb9 	.word	0x00006eb9
    6f88:	7fffffff 	.word	0x7fffffff
    6f8c:	00009795 	.word	0x00009795
    6f90:	00009aa1 	.word	0x00009aa1

00006f94 <JoinBackoffCallback>:
{
    6f94:	b510      	push	{r4, lr}
    6f96:	b082      	sub	sp, #8
	RegParams.joinbccount ++;
    6f98:	4b0c      	ldr	r3, [pc, #48]	; (6fcc <JoinBackoffCallback+0x38>)
    6f9a:	2142      	movs	r1, #66	; 0x42
    6f9c:	5c5a      	ldrb	r2, [r3, r1]
    6f9e:	3201      	adds	r2, #1
    6fa0:	545a      	strb	r2, [r3, r1]
	SwTimerStart (RegParams.pJoinBackoffTimer->timerId, MS_TO_US(BACKOFF_BASE_TIME_IN_MS), SW_TIMEOUT_RELATIVE, (void *)JoinBackoffCallback, NULL);
    6fa2:	7e19      	ldrb	r1, [r3, #24]
    6fa4:	7e5a      	ldrb	r2, [r3, #25]
    6fa6:	0212      	lsls	r2, r2, #8
    6fa8:	4311      	orrs	r1, r2
    6faa:	7e9a      	ldrb	r2, [r3, #26]
    6fac:	0412      	lsls	r2, r2, #16
    6fae:	430a      	orrs	r2, r1
    6fb0:	7edb      	ldrb	r3, [r3, #27]
    6fb2:	061b      	lsls	r3, r3, #24
    6fb4:	4313      	orrs	r3, r2
    6fb6:	7818      	ldrb	r0, [r3, #0]
    6fb8:	2300      	movs	r3, #0
    6fba:	9300      	str	r3, [sp, #0]
    6fbc:	4b04      	ldr	r3, [pc, #16]	; (6fd0 <JoinBackoffCallback+0x3c>)
    6fbe:	2200      	movs	r2, #0
    6fc0:	4904      	ldr	r1, [pc, #16]	; (6fd4 <JoinBackoffCallback+0x40>)
    6fc2:	4c05      	ldr	r4, [pc, #20]	; (6fd8 <JoinBackoffCallback+0x44>)
    6fc4:	47a0      	blx	r4
}
    6fc6:	b002      	add	sp, #8
    6fc8:	bd10      	pop	{r4, pc}
    6fca:	46c0      	nop			; (mov r8, r8)
    6fcc:	20001328 	.word	0x20001328
    6fd0:	00006f95 	.word	0x00006f95
    6fd4:	6b49d200 	.word	0x6b49d200
    6fd8:	00009795 	.word	0x00009795

00006fdc <ValidateDataRangeT2>:
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    6fdc:	784a      	ldrb	r2, [r1, #1]
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    6fde:	230f      	movs	r3, #15
    6fe0:	4013      	ands	r3, r2
    if ( dataRate > RegParams.minDataRate )
    6fe2:	2124      	movs	r1, #36	; 0x24
    6fe4:	4807      	ldr	r0, [pc, #28]	; (7004 <ValidateDataRangeT2+0x28>)
    6fe6:	5c41      	ldrb	r1, [r0, r1]
		retVal = LORAWAN_INVALID_PARAMETER;
    6fe8:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    6fea:	428b      	cmp	r3, r1
    6fec:	d900      	bls.n	6ff0 <ValidateDataRangeT2+0x14>
}
    6fee:	4770      	bx	lr
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    6ff0:	0912      	lsrs	r2, r2, #4
		retVal = LORAWAN_INVALID_PARAMETER;
    6ff2:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    6ff4:	428a      	cmp	r2, r1
    6ff6:	d8fa      	bhi.n	6fee <ValidateDataRangeT2+0x12>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    6ff8:	3802      	subs	r0, #2
	   || (dataRateMax < dataRateMin) )
    6ffa:	4293      	cmp	r3, r2
    6ffc:	d9f7      	bls.n	6fee <ValidateDataRangeT2+0x12>
		retVal = LORAWAN_INVALID_PARAMETER;
    6ffe:	3002      	adds	r0, #2
	return retVal;
    7000:	e7f5      	b.n	6fee <ValidateDataRangeT2+0x12>
    7002:	46c0      	nop			; (mov r8, r8)
    7004:	20001328 	.word	0x20001328

00007008 <setDataRangeT2>:
{
    7008:	b5f0      	push	{r4, r5, r6, r7, lr}
    700a:	46c6      	mov	lr, r8
    700c:	b500      	push	{lr}
    700e:	b082      	sub	sp, #8
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    7010:	780d      	ldrb	r5, [r1, #0]
    7012:	784e      	ldrb	r6, [r1, #1]
	val_chid.channelIndex = update_dr.channelIndex;
    7014:	ab01      	add	r3, sp, #4
    7016:	701d      	strb	r5, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    7018:	2201      	movs	r2, #1
    701a:	705a      	strb	r2, [r3, #1]
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    701c:	2012      	movs	r0, #18
    701e:	4b24      	ldr	r3, [pc, #144]	; (70b0 <setDataRangeT2+0xa8>)
    7020:	4798      	blx	r3
		retVal = LORAWAN_INVALID_PARAMETER;
    7022:	240a      	movs	r4, #10
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    7024:	2808      	cmp	r0, #8
    7026:	d004      	beq.n	7032 <setDataRangeT2+0x2a>
}
    7028:	0020      	movs	r0, r4
    702a:	b002      	add	sp, #8
    702c:	bc04      	pop	{r2}
    702e:	4690      	mov	r8, r2
    7030:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    7032:	a901      	add	r1, sp, #4
    7034:	300d      	adds	r0, #13
    7036:	4b1f      	ldr	r3, [pc, #124]	; (70b4 <setDataRangeT2+0xac>)
    7038:	4798      	blx	r3
    703a:	0004      	movs	r4, r0
    703c:	2808      	cmp	r0, #8
    703e:	d001      	beq.n	7044 <setDataRangeT2+0x3c>
		retVal = LORAWAN_INVALID_PARAMETER;
    7040:	240a      	movs	r4, #10
    7042:	e7f1      	b.n	7028 <setDataRangeT2+0x20>
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    7044:	4f1c      	ldr	r7, [pc, #112]	; (70b8 <setDataRangeT2+0xb0>)
    7046:	793b      	ldrb	r3, [r7, #4]
    7048:	797a      	ldrb	r2, [r7, #5]
    704a:	0212      	lsls	r2, r2, #8
    704c:	431a      	orrs	r2, r3
    704e:	79bb      	ldrb	r3, [r7, #6]
    7050:	041b      	lsls	r3, r3, #16
    7052:	431a      	orrs	r2, r3
    7054:	79fb      	ldrb	r3, [r7, #7]
    7056:	061b      	lsls	r3, r3, #24
    7058:	4313      	orrs	r3, r2
    705a:	006a      	lsls	r2, r5, #1
    705c:	4690      	mov	r8, r2
    705e:	4443      	add	r3, r8
    7060:	705e      	strb	r6, [r3, #1]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    7062:	4b16      	ldr	r3, [pc, #88]	; (70bc <setDataRangeT2+0xb4>)
    7064:	5cfb      	ldrb	r3, [r7, r3]
    7066:	4a16      	ldr	r2, [pc, #88]	; (70c0 <setDataRangeT2+0xb8>)
    7068:	5cb8      	ldrb	r0, [r7, r2]
    706a:	0200      	lsls	r0, r0, #8
    706c:	4318      	orrs	r0, r3
    706e:	b2c1      	uxtb	r1, r0
    7070:	0a00      	lsrs	r0, r0, #8
    7072:	4e14      	ldr	r6, [pc, #80]	; (70c4 <setDataRangeT2+0xbc>)
    7074:	47b0      	blx	r6
		RegParams.pOtherChParams[update_dr.channelIndex].parametersDefined |= DATA_RANGE_DEFINED;
    7076:	7a3b      	ldrb	r3, [r7, #8]
    7078:	7a7a      	ldrb	r2, [r7, #9]
    707a:	0212      	lsls	r2, r2, #8
    707c:	431a      	orrs	r2, r3
    707e:	7abb      	ldrb	r3, [r7, #10]
    7080:	041b      	lsls	r3, r3, #16
    7082:	431a      	orrs	r2, r3
    7084:	7afb      	ldrb	r3, [r7, #11]
    7086:	061b      	lsls	r3, r3, #24
    7088:	4313      	orrs	r3, r2
    708a:	4445      	add	r5, r8
    708c:	00ad      	lsls	r5, r5, #2
    708e:	195d      	adds	r5, r3, r5
    7090:	7aeb      	ldrb	r3, [r5, #11]
    7092:	2202      	movs	r2, #2
    7094:	4313      	orrs	r3, r2
    7096:	72eb      	strb	r3, [r5, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    7098:	2384      	movs	r3, #132	; 0x84
    709a:	009b      	lsls	r3, r3, #2
    709c:	5cfb      	ldrb	r3, [r7, r3]
    709e:	4a0a      	ldr	r2, [pc, #40]	; (70c8 <setDataRangeT2+0xc0>)
    70a0:	5cb8      	ldrb	r0, [r7, r2]
    70a2:	0200      	lsls	r0, r0, #8
    70a4:	4318      	orrs	r0, r3
    70a6:	b2c1      	uxtb	r1, r0
    70a8:	0a00      	lsrs	r0, r0, #8
    70aa:	47b0      	blx	r6
    70ac:	e7bc      	b.n	7028 <setDataRangeT2+0x20>
    70ae:	46c0      	nop			; (mov r8, r8)
    70b0:	00006fdd 	.word	0x00006fdd
    70b4:	00004a29 	.word	0x00004a29
    70b8:	20001328 	.word	0x20001328
    70bc:	0000020e 	.word	0x0000020e
    70c0:	0000020f 	.word	0x0000020f
    70c4:	00008d6d 	.word	0x00008d6d
    70c8:	00000211 	.word	0x00000211

000070cc <LORAREG_GetAttr_MaxPayloadT3>:
{
    70cc:	b530      	push	{r4, r5, lr}
	dataRate = *(uint8_t *)attrInput;
    70ce:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    70d0:	2124      	movs	r1, #36	; 0x24
    70d2:	4816      	ldr	r0, [pc, #88]	; (712c <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    70d4:	5c41      	ldrb	r1, [r0, r1]
		result =  LORAWAN_INVALID_PARAMETER;
    70d6:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    70d8:	4299      	cmp	r1, r3
    70da:	d215      	bcs.n	7108 <LORAREG_GetAttr_MaxPayloadT3+0x3c>
	if(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1)
    70dc:	21e1      	movs	r1, #225	; 0xe1
    70de:	0049      	lsls	r1, r1, #1
    70e0:	4c12      	ldr	r4, [pc, #72]	; (712c <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    70e2:	5c61      	ldrb	r1, [r4, r1]
    70e4:	07c9      	lsls	r1, r1, #31
    70e6:	d411      	bmi.n	710c <LORAREG_GetAttr_MaxPayloadT3+0x40>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    70e8:	4d10      	ldr	r5, [pc, #64]	; (712c <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    70ea:	7829      	ldrb	r1, [r5, #0]
    70ec:	786c      	ldrb	r4, [r5, #1]
    70ee:	0224      	lsls	r4, r4, #8
    70f0:	430c      	orrs	r4, r1
    70f2:	78a9      	ldrb	r1, [r5, #2]
    70f4:	0409      	lsls	r1, r1, #16
    70f6:	430c      	orrs	r4, r1
    70f8:	78e9      	ldrb	r1, [r5, #3]
    70fa:	0609      	lsls	r1, r1, #24
    70fc:	4321      	orrs	r1, r4
    70fe:	00db      	lsls	r3, r3, #3
    7100:	185b      	adds	r3, r3, r1
    7102:	789b      	ldrb	r3, [r3, #2]
    7104:	7013      	strb	r3, [r2, #0]
}
    7106:	bd30      	pop	{r4, r5, pc}
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7108:	3802      	subs	r0, #2
    710a:	e7e7      	b.n	70dc <LORAREG_GetAttr_MaxPayloadT3+0x10>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt1;
    710c:	0025      	movs	r5, r4
    710e:	7821      	ldrb	r1, [r4, #0]
    7110:	7864      	ldrb	r4, [r4, #1]
    7112:	0224      	lsls	r4, r4, #8
    7114:	430c      	orrs	r4, r1
    7116:	78a9      	ldrb	r1, [r5, #2]
    7118:	0409      	lsls	r1, r1, #16
    711a:	430c      	orrs	r4, r1
    711c:	78e9      	ldrb	r1, [r5, #3]
    711e:	0609      	lsls	r1, r1, #24
    7120:	4321      	orrs	r1, r4
    7122:	00db      	lsls	r3, r3, #3
    7124:	1859      	adds	r1, r3, r1
    7126:	78cb      	ldrb	r3, [r1, #3]
    7128:	7013      	strb	r3, [r2, #0]
    712a:	e7ec      	b.n	7106 <LORAREG_GetAttr_MaxPayloadT3+0x3a>
    712c:	20001328 	.word	0x20001328

00007130 <LORAREG_GetAttr_RxWindowSizeT2>:
{
    7130:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    7132:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    7134:	2124      	movs	r1, #36	; 0x24
    7136:	480d      	ldr	r0, [pc, #52]	; (716c <LORAREG_GetAttr_RxWindowSizeT2+0x3c>)
    7138:	5c41      	ldrb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    713a:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    713c:	4299      	cmp	r1, r3
    713e:	d200      	bcs.n	7142 <LORAREG_GetAttr_RxWindowSizeT2+0x12>
}
    7140:	bd10      	pop	{r4, pc}
		*(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;
    7142:	4c0a      	ldr	r4, [pc, #40]	; (716c <LORAREG_GetAttr_RxWindowSizeT2+0x3c>)
    7144:	7821      	ldrb	r1, [r4, #0]
    7146:	7860      	ldrb	r0, [r4, #1]
    7148:	0200      	lsls	r0, r0, #8
    714a:	4308      	orrs	r0, r1
    714c:	78a1      	ldrb	r1, [r4, #2]
    714e:	0409      	lsls	r1, r1, #16
    7150:	4308      	orrs	r0, r1
    7152:	78e1      	ldrb	r1, [r4, #3]
    7154:	0609      	lsls	r1, r1, #24
    7156:	4301      	orrs	r1, r0
    7158:	00db      	lsls	r3, r3, #3
    715a:	5c58      	ldrb	r0, [r3, r1]
    715c:	185b      	adds	r3, r3, r1
    715e:	785b      	ldrb	r3, [r3, #1]
    7160:	021b      	lsls	r3, r3, #8
    7162:	4303      	orrs	r3, r0
    7164:	8013      	strh	r3, [r2, #0]
	return result;
    7166:	2008      	movs	r0, #8
    7168:	e7ea      	b.n	7140 <LORAREG_GetAttr_RxWindowSizeT2+0x10>
    716a:	46c0      	nop			; (mov r8, r8)
    716c:	20001328 	.word	0x20001328

00007170 <LORAREG_GetAttr_RxWindowOffsetT2>:
{
    7170:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    7172:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    7174:	2124      	movs	r1, #36	; 0x24
    7176:	480c      	ldr	r0, [pc, #48]	; (71a8 <LORAREG_GetAttr_RxWindowOffsetT2+0x38>)
    7178:	5c41      	ldrb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    717a:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    717c:	4299      	cmp	r1, r3
    717e:	d200      	bcs.n	7182 <LORAREG_GetAttr_RxWindowOffsetT2+0x12>
}
    7180:	bd10      	pop	{r4, pc}
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    7182:	4c09      	ldr	r4, [pc, #36]	; (71a8 <LORAREG_GetAttr_RxWindowOffsetT2+0x38>)
    7184:	7821      	ldrb	r1, [r4, #0]
    7186:	7860      	ldrb	r0, [r4, #1]
    7188:	0200      	lsls	r0, r0, #8
    718a:	4308      	orrs	r0, r1
    718c:	78a1      	ldrb	r1, [r4, #2]
    718e:	0409      	lsls	r1, r1, #16
    7190:	4308      	orrs	r0, r1
    7192:	78e1      	ldrb	r1, [r4, #3]
    7194:	0609      	lsls	r1, r1, #24
    7196:	4301      	orrs	r1, r0
    7198:	00db      	lsls	r3, r3, #3
    719a:	185b      	adds	r3, r3, r1
    719c:	791b      	ldrb	r3, [r3, #4]
    719e:	b25b      	sxtb	r3, r3
    71a0:	7013      	strb	r3, [r2, #0]
	return result;
    71a2:	2008      	movs	r0, #8
    71a4:	e7ec      	b.n	7180 <LORAREG_GetAttr_RxWindowOffsetT2+0x10>
    71a6:	46c0      	nop			; (mov r8, r8)
    71a8:	20001328 	.word	0x20001328

000071ac <LORAREG_GetAttr_MaxPayloadT2>:
{
    71ac:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    71ae:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    71b0:	2124      	movs	r1, #36	; 0x24
    71b2:	480b      	ldr	r0, [pc, #44]	; (71e0 <LORAREG_GetAttr_MaxPayloadT2+0x34>)
    71b4:	5c41      	ldrb	r1, [r0, r1]
		result =  LORAWAN_INVALID_PARAMETER;
    71b6:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    71b8:	4299      	cmp	r1, r3
    71ba:	d200      	bcs.n	71be <LORAREG_GetAttr_MaxPayloadT2+0x12>
}
    71bc:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    71be:	4c08      	ldr	r4, [pc, #32]	; (71e0 <LORAREG_GetAttr_MaxPayloadT2+0x34>)
    71c0:	7821      	ldrb	r1, [r4, #0]
    71c2:	7860      	ldrb	r0, [r4, #1]
    71c4:	0200      	lsls	r0, r0, #8
    71c6:	4308      	orrs	r0, r1
    71c8:	78a1      	ldrb	r1, [r4, #2]
    71ca:	0409      	lsls	r1, r1, #16
    71cc:	4308      	orrs	r0, r1
    71ce:	78e1      	ldrb	r1, [r4, #3]
    71d0:	0609      	lsls	r1, r1, #24
    71d2:	4301      	orrs	r1, r0
    71d4:	00db      	lsls	r3, r3, #3
    71d6:	185b      	adds	r3, r3, r1
    71d8:	789b      	ldrb	r3, [r3, #2]
    71da:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    71dc:	2008      	movs	r0, #8
	return result;
    71de:	e7ed      	b.n	71bc <LORAREG_GetAttr_MaxPayloadT2+0x10>
    71e0:	20001328 	.word	0x20001328

000071e4 <LORAREG_GetAttr_ModulationAttrT2>:
{
    71e4:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    71e6:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    71e8:	2124      	movs	r1, #36	; 0x24
    71ea:	480b      	ldr	r0, [pc, #44]	; (7218 <LORAREG_GetAttr_ModulationAttrT2+0x34>)
    71ec:	5c41      	ldrb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    71ee:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    71f0:	4299      	cmp	r1, r3
    71f2:	d200      	bcs.n	71f6 <LORAREG_GetAttr_ModulationAttrT2+0x12>
}
    71f4:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    71f6:	4c08      	ldr	r4, [pc, #32]	; (7218 <LORAREG_GetAttr_ModulationAttrT2+0x34>)
    71f8:	7821      	ldrb	r1, [r4, #0]
    71fa:	7860      	ldrb	r0, [r4, #1]
    71fc:	0200      	lsls	r0, r0, #8
    71fe:	4308      	orrs	r0, r1
    7200:	78a1      	ldrb	r1, [r4, #2]
    7202:	0409      	lsls	r1, r1, #16
    7204:	4308      	orrs	r0, r1
    7206:	78e1      	ldrb	r1, [r4, #3]
    7208:	0609      	lsls	r1, r1, #24
    720a:	4301      	orrs	r1, r0
    720c:	00db      	lsls	r3, r3, #3
    720e:	185b      	adds	r3, r3, r1
    7210:	79db      	ldrb	r3, [r3, #7]
    7212:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7214:	2008      	movs	r0, #8
	return result;
    7216:	e7ed      	b.n	71f4 <LORAREG_GetAttr_ModulationAttrT2+0x10>
    7218:	20001328 	.word	0x20001328

0000721c <LORAREG_GetAttr_BandwidthAttrT2>:
{
    721c:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    721e:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    7220:	2124      	movs	r1, #36	; 0x24
    7222:	480b      	ldr	r0, [pc, #44]	; (7250 <LORAREG_GetAttr_BandwidthAttrT2+0x34>)
    7224:	5c41      	ldrb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    7226:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7228:	4299      	cmp	r1, r3
    722a:	d200      	bcs.n	722e <LORAREG_GetAttr_BandwidthAttrT2+0x12>
}
    722c:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    722e:	4c08      	ldr	r4, [pc, #32]	; (7250 <LORAREG_GetAttr_BandwidthAttrT2+0x34>)
    7230:	7821      	ldrb	r1, [r4, #0]
    7232:	7860      	ldrb	r0, [r4, #1]
    7234:	0200      	lsls	r0, r0, #8
    7236:	4308      	orrs	r0, r1
    7238:	78a1      	ldrb	r1, [r4, #2]
    723a:	0409      	lsls	r1, r1, #16
    723c:	4308      	orrs	r0, r1
    723e:	78e1      	ldrb	r1, [r4, #3]
    7240:	0609      	lsls	r1, r1, #24
    7242:	4301      	orrs	r1, r0
    7244:	00db      	lsls	r3, r3, #3
    7246:	185b      	adds	r3, r3, r1
    7248:	799b      	ldrb	r3, [r3, #6]
    724a:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    724c:	2008      	movs	r0, #8
	return result;
    724e:	e7ed      	b.n	722c <LORAREG_GetAttr_BandwidthAttrT2+0x10>
    7250:	20001328 	.word	0x20001328

00007254 <LORAREG_GetAttr_SpreadFactorT2>:
{
    7254:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    7256:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    7258:	2124      	movs	r1, #36	; 0x24
    725a:	480b      	ldr	r0, [pc, #44]	; (7288 <LORAREG_GetAttr_SpreadFactorT2+0x34>)
    725c:	5c41      	ldrb	r1, [r0, r1]
		result =  LORAWAN_INVALID_PARAMETER;
    725e:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7260:	4299      	cmp	r1, r3
    7262:	d200      	bcs.n	7266 <LORAREG_GetAttr_SpreadFactorT2+0x12>
}
    7264:	bd10      	pop	{r4, pc}
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    7266:	4c08      	ldr	r4, [pc, #32]	; (7288 <LORAREG_GetAttr_SpreadFactorT2+0x34>)
    7268:	7821      	ldrb	r1, [r4, #0]
    726a:	7860      	ldrb	r0, [r4, #1]
    726c:	0200      	lsls	r0, r0, #8
    726e:	4308      	orrs	r0, r1
    7270:	78a1      	ldrb	r1, [r4, #2]
    7272:	0409      	lsls	r1, r1, #16
    7274:	4308      	orrs	r0, r1
    7276:	78e1      	ldrb	r1, [r4, #3]
    7278:	0609      	lsls	r1, r1, #24
    727a:	4301      	orrs	r1, r0
    727c:	00db      	lsls	r3, r3, #3
    727e:	185b      	adds	r3, r3, r1
    7280:	795b      	ldrb	r3, [r3, #5]
    7282:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7284:	2008      	movs	r0, #8
	return result;
    7286:	e7ed      	b.n	7264 <LORAREG_GetAttr_SpreadFactorT2+0x10>
    7288:	20001328 	.word	0x20001328

0000728c <ValidateChMaskChCntl>:
{
    728c:	b510      	push	{r4, lr}
    728e:	b082      	sub	sp, #8
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    7290:	ac01      	add	r4, sp, #4
    7292:	2204      	movs	r2, #4
    7294:	0020      	movs	r0, r4
    7296:	4b09      	ldr	r3, [pc, #36]	; (72bc <ValidateChMaskChCntl+0x30>)
    7298:	4798      	blx	r3
    if(chMaskchCntl.chnlMask == 0 && chMaskchCntl.chnlMaskCntl == 7)
    729a:	8863      	ldrh	r3, [r4, #2]
    729c:	2b00      	cmp	r3, #0
    729e:	d104      	bne.n	72aa <ValidateChMaskChCntl+0x1e>
    72a0:	ab01      	add	r3, sp, #4
    72a2:	781b      	ldrb	r3, [r3, #0]
        result = LORAWAN_INVALID_PARAMETER;
    72a4:	200a      	movs	r0, #10
    if(chMaskchCntl.chnlMask == 0 && chMaskchCntl.chnlMaskCntl == 7)
    72a6:	2b07      	cmp	r3, #7
    72a8:	d006      	beq.n	72b8 <ValidateChMaskChCntl+0x2c>
		result = ((ValidateChannelMask(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) | (ValidateChannelMaskCntl(CHANNEL_MASK_CNTL,  (void *)&chMaskchCntl.chnlMaskCntl)));
    72aa:	a901      	add	r1, sp, #4
    72ac:	201b      	movs	r0, #27
    72ae:	4b04      	ldr	r3, [pc, #16]	; (72c0 <ValidateChMaskChCntl+0x34>)
    72b0:	4798      	blx	r3
    72b2:	2308      	movs	r3, #8
    72b4:	4318      	orrs	r0, r3
    72b6:	b2c0      	uxtb	r0, r0
}
    72b8:	b002      	add	sp, #8
    72ba:	bd10      	pop	{r4, pc}
    72bc:	00013e5d 	.word	0x00013e5d
    72c0:	00004b15 	.word	0x00004b15

000072c4 <LORAREG_GetAttr_NewTxChConfigT2>:
{
    72c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    72c6:	b083      	sub	sp, #12
    72c8:	0015      	movs	r5, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    72ca:	788c      	ldrb	r4, [r1, #2]
    if ( dataRate > RegParams.minDataRate )
    72cc:	2324      	movs	r3, #36	; 0x24
    72ce:	4a2e      	ldr	r2, [pc, #184]	; (7388 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    72d0:	5cd3      	ldrb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    72d2:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    72d4:	42a3      	cmp	r3, r4
    72d6:	d205      	bcs.n	72e4 <LORAREG_GetAttr_NewTxChConfigT2+0x20>
}
    72d8:	b003      	add	sp, #12
    72da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    72dc:	2900      	cmp	r1, #0
    72de:	d10f      	bne.n	7300 <LORAREG_GetAttr_NewTxChConfigT2+0x3c>
		currDr = DR2;
    72e0:	2402      	movs	r4, #2
    72e2:	e00d      	b.n	7300 <LORAREG_GetAttr_NewTxChConfigT2+0x3c>
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    72e4:	784e      	ldrb	r6, [r1, #1]
	if (txPowerNew > RegParams.maxTxPwrIndx)
    72e6:	232d      	movs	r3, #45	; 0x2d
    72e8:	4a27      	ldr	r2, [pc, #156]	; (7388 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    72ea:	56d3      	ldrsb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    72ec:	200a      	movs	r0, #10
	if (txPowerNew > RegParams.maxTxPwrIndx)
    72ee:	429e      	cmp	r6, r3
    72f0:	dcf2      	bgt.n	72d8 <LORAREG_GetAttr_NewTxChConfigT2+0x14>
		result = GetTxChannelConfig2(newTxChannelReq.transmissionType,newTxChannelReq.txPwr,newTxChannelReq.currDr,(radioConfig_t*)attrOutput);
    72f2:	7809      	ldrb	r1, [r1, #0]
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    72f4:	232e      	movs	r3, #46	; 0x2e
    72f6:	5cd2      	ldrb	r2, [r2, r3]
    72f8:	4b24      	ldr	r3, [pc, #144]	; (738c <LORAREG_GetAttr_NewTxChConfigT2+0xc8>)
    72fa:	4113      	asrs	r3, r2
    72fc:	07db      	lsls	r3, r3, #31
    72fe:	d4ed      	bmi.n	72dc <LORAREG_GetAttr_NewTxChConfigT2+0x18>
	result = SearchAvailableChannel2 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    7300:	232a      	movs	r3, #42	; 0x2a
    7302:	4a21      	ldr	r2, [pc, #132]	; (7388 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    7304:	5cd0      	ldrb	r0, [r2, r3]
    7306:	466b      	mov	r3, sp
    7308:	3307      	adds	r3, #7
    730a:	0022      	movs	r2, r4
    730c:	4f20      	ldr	r7, [pc, #128]	; (7390 <LORAREG_GetAttr_NewTxChConfigT2+0xcc>)
    730e:	47b8      	blx	r7
	if (result == LORAWAN_SUCCESS)
    7310:	2808      	cmp	r0, #8
    7312:	d1e1      	bne.n	72d8 <LORAREG_GetAttr_NewTxChConfigT2+0x14>
		RegParams.lastUsedChannelIndex = channelIndex;
    7314:	466b      	mov	r3, sp
    7316:	79df      	ldrb	r7, [r3, #7]
    7318:	4b1b      	ldr	r3, [pc, #108]	; (7388 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    731a:	222f      	movs	r2, #47	; 0x2f
    731c:	549f      	strb	r7, [r3, r2]
		radioConfig->frequency = RegParams.pOtherChParams[channelIndex].ulfrequency;
    731e:	7a19      	ldrb	r1, [r3, #8]
    7320:	7a5a      	ldrb	r2, [r3, #9]
    7322:	0212      	lsls	r2, r2, #8
    7324:	430a      	orrs	r2, r1
    7326:	7a99      	ldrb	r1, [r3, #10]
    7328:	0409      	lsls	r1, r1, #16
    732a:	430a      	orrs	r2, r1
    732c:	7ad9      	ldrb	r1, [r3, #11]
    732e:	0609      	lsls	r1, r1, #24
    7330:	4311      	orrs	r1, r2
    7332:	007a      	lsls	r2, r7, #1
    7334:	19d2      	adds	r2, r2, r7
    7336:	0092      	lsls	r2, r2, #2
    7338:	5c57      	ldrb	r7, [r2, r1]
    733a:	1852      	adds	r2, r2, r1
    733c:	7851      	ldrb	r1, [r2, #1]
    733e:	0209      	lsls	r1, r1, #8
    7340:	430f      	orrs	r7, r1
    7342:	7891      	ldrb	r1, [r2, #2]
    7344:	0409      	lsls	r1, r1, #16
    7346:	4339      	orrs	r1, r7
    7348:	78d2      	ldrb	r2, [r2, #3]
    734a:	0612      	lsls	r2, r2, #24
    734c:	430a      	orrs	r2, r1
    734e:	602a      	str	r2, [r5, #0]
		radioConfig->txPower = RegParams.maxTxPwr - 2 *txPwrIndx;
    7350:	0076      	lsls	r6, r6, #1
    7352:	2228      	movs	r2, #40	; 0x28
    7354:	5c9a      	ldrb	r2, [r3, r2]
    7356:	1b96      	subs	r6, r2, r6
    7358:	722e      	strb	r6, [r5, #8]
		radioConfig->freq_hop_period = DISABLED ;
    735a:	2200      	movs	r2, #0
    735c:	80aa      	strh	r2, [r5, #4]
		radioConfig->modulation = RegParams.pDrParams[currDr].modulation;
    735e:	7819      	ldrb	r1, [r3, #0]
    7360:	785a      	ldrb	r2, [r3, #1]
    7362:	0212      	lsls	r2, r2, #8
    7364:	4311      	orrs	r1, r2
    7366:	789a      	ldrb	r2, [r3, #2]
    7368:	0412      	lsls	r2, r2, #16
    736a:	430a      	orrs	r2, r1
    736c:	78db      	ldrb	r3, [r3, #3]
    736e:	061b      	lsls	r3, r3, #24
    7370:	4313      	orrs	r3, r2
    7372:	00e4      	lsls	r4, r4, #3
    7374:	191c      	adds	r4, r3, r4
    7376:	79e3      	ldrb	r3, [r4, #7]
    7378:	726b      	strb	r3, [r5, #9]
		radioConfig->bandwidth = RegParams.pDrParams[currDr].bandwidth;
    737a:	79a3      	ldrb	r3, [r4, #6]
    737c:	72ab      	strb	r3, [r5, #10]
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    737e:	7963      	ldrb	r3, [r4, #5]
    7380:	72eb      	strb	r3, [r5, #11]
		radioConfig->ecrConfig.override = false;
    7382:	2300      	movs	r3, #0
    7384:	71eb      	strb	r3, [r5, #7]
    7386:	e7a7      	b.n	72d8 <LORAREG_GetAttr_NewTxChConfigT2+0x14>
    7388:	20001328 	.word	0x20001328
    738c:	00007fe0 	.word	0x00007fe0
    7390:	00006079 	.word	0x00006079

00007394 <setChannelIdStatus>:
{
    7394:	b510      	push	{r4, lr}
    uint8_t channelId = *(uint8_t *)attrInput;
    7396:	7808      	ldrb	r0, [r1, #0]
    if (channelId >= RegParams.maxChannels)
    7398:	232a      	movs	r3, #42	; 0x2a
    739a:	4a05      	ldr	r2, [pc, #20]	; (73b0 <setChannelIdStatus+0x1c>)
    739c:	56d3      	ldrsb	r3, [r2, r3]
    739e:	4298      	cmp	r0, r3
    73a0:	db01      	blt.n	73a6 <setChannelIdStatus+0x12>
		retVal = LORAWAN_INVALID_PARAMETER;
    73a2:	200a      	movs	r0, #10
}
    73a4:	bd10      	pop	{r4, pc}
		UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    73a6:	7849      	ldrb	r1, [r1, #1]
    73a8:	4b02      	ldr	r3, [pc, #8]	; (73b4 <setChannelIdStatus+0x20>)
    73aa:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    73ac:	2008      	movs	r0, #8
	return retVal;
    73ae:	e7f9      	b.n	73a4 <setChannelIdStatus+0x10>
    73b0:	20001328 	.word	0x20001328
    73b4:	00005041 	.word	0x00005041

000073b8 <ValidateDataRange>:
{
    73b8:	b530      	push	{r4, r5, lr}
	uint8_t maxTxDR = RegParams.cmnParams.paramsType1.maxTxDR;
    73ba:	23a8      	movs	r3, #168	; 0xa8
    73bc:	005b      	lsls	r3, r3, #1
    73be:	4a17      	ldr	r2, [pc, #92]	; (741c <ValidateDataRange+0x64>)
    73c0:	5cd3      	ldrb	r3, [r2, r3]
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    73c2:	784a      	ldrb	r2, [r1, #1]
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    73c4:	0914      	lsrs	r4, r2, #4
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    73c6:	200a      	movs	r0, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    73c8:	42a3      	cmp	r3, r4
    73ca:	d213      	bcs.n	73f4 <ValidateDataRange+0x3c>
}
    73cc:	bd30      	pop	{r4, r5, pc}
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    73ce:	202a      	movs	r0, #42	; 0x2a
    73d0:	4d12      	ldr	r5, [pc, #72]	; (741c <ValidateDataRange+0x64>)
    73d2:	562d      	ldrsb	r5, [r5, r0]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    73d4:	3822      	subs	r0, #34	; 0x22
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    73d6:	42a9      	cmp	r1, r5
    73d8:	daf8      	bge.n	73cc <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    73da:	3002      	adds	r0, #2
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    73dc:	4293      	cmp	r3, r2
    73de:	d1f5      	bne.n	73cc <ValidateDataRange+0x14>
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMax != maxTxDR)))
    73e0:	42a3      	cmp	r3, r4
    73e2:	d005      	beq.n	73f0 <ValidateDataRange+0x38>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    73e4:	200a      	movs	r0, #10
	return retVal;
    73e6:	e7f1      	b.n	73cc <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    73e8:	200a      	movs	r0, #10
    73ea:	e7ef      	b.n	73cc <ValidateDataRange+0x14>
    73ec:	200a      	movs	r0, #10
    73ee:	e7ed      	b.n	73cc <ValidateDataRange+0x14>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    73f0:	2008      	movs	r0, #8
    73f2:	e7eb      	b.n	73cc <ValidateDataRange+0x14>
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    73f4:	200f      	movs	r0, #15
    73f6:	4002      	ands	r2, r0
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    73f8:	3805      	subs	r0, #5
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    73fa:	4293      	cmp	r3, r2
    73fc:	d3e6      	bcc.n	73cc <ValidateDataRange+0x14>
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    73fe:	42a2      	cmp	r2, r4
    7400:	d8e4      	bhi.n	73cc <ValidateDataRange+0x14>
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    7402:	7809      	ldrb	r1, [r1, #0]
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    7404:	2054      	movs	r0, #84	; 0x54
    7406:	30ff      	adds	r0, #255	; 0xff
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    7408:	4d04      	ldr	r5, [pc, #16]	; (741c <ValidateDataRange+0x64>)
    740a:	5c28      	ldrb	r0, [r5, r0]
    740c:	4288      	cmp	r0, r1
    740e:	d9de      	bls.n	73ce <ValidateDataRange+0x16>
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    7410:	4293      	cmp	r3, r2
    7412:	d0e9      	beq.n	73e8 <ValidateDataRange+0x30>
    7414:	42a3      	cmp	r3, r4
    7416:	d0e9      	beq.n	73ec <ValidateDataRange+0x34>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    7418:	2008      	movs	r0, #8
    741a:	e7d7      	b.n	73cc <ValidateDataRange+0x14>
    741c:	20001328 	.word	0x20001328

00007420 <setDataRange>:
{
    7420:	b570      	push	{r4, r5, r6, lr}
    7422:	000d      	movs	r5, r1
	if((ValidateDataRange(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelId(CHANNEL_ID, &update_dr.channelIndex) != LORAWAN_SUCCESS))
    7424:	2012      	movs	r0, #18
    7426:	4b15      	ldr	r3, [pc, #84]	; (747c <setDataRange+0x5c>)
    7428:	4798      	blx	r3
    742a:	0004      	movs	r4, r0
    742c:	2808      	cmp	r0, #8
    742e:	d002      	beq.n	7436 <setDataRange+0x16>
		retVal = LORAWAN_INVALID_PARAMETER;
    7430:	240a      	movs	r4, #10
}
    7432:	0020      	movs	r0, r4
    7434:	bd70      	pop	{r4, r5, r6, pc}
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    7436:	782b      	ldrb	r3, [r5, #0]
    if (channelId >= RegParams.maxChannels)
    7438:	222a      	movs	r2, #42	; 0x2a
    743a:	4911      	ldr	r1, [pc, #68]	; (7480 <setDataRange+0x60>)
    743c:	568a      	ldrsb	r2, [r1, r2]
    743e:	4293      	cmp	r3, r2
    7440:	db01      	blt.n	7446 <setDataRange+0x26>
		retVal = LORAWAN_INVALID_PARAMETER;
    7442:	3402      	adds	r4, #2
    7444:	e7f5      	b.n	7432 <setDataRange+0x12>
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    7446:	786d      	ldrb	r5, [r5, #1]
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    7448:	4a0d      	ldr	r2, [pc, #52]	; (7480 <setDataRange+0x60>)
    744a:	7911      	ldrb	r1, [r2, #4]
    744c:	7950      	ldrb	r0, [r2, #5]
    744e:	0200      	lsls	r0, r0, #8
    7450:	4308      	orrs	r0, r1
    7452:	7991      	ldrb	r1, [r2, #6]
    7454:	0409      	lsls	r1, r1, #16
    7456:	4308      	orrs	r0, r1
    7458:	79d1      	ldrb	r1, [r2, #7]
    745a:	0609      	lsls	r1, r1, #24
    745c:	4301      	orrs	r1, r0
    745e:	005b      	lsls	r3, r3, #1
    7460:	185b      	adds	r3, r3, r1
    7462:	705d      	strb	r5, [r3, #1]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    7464:	4b07      	ldr	r3, [pc, #28]	; (7484 <setDataRange+0x64>)
    7466:	5cd3      	ldrb	r3, [r2, r3]
    7468:	4907      	ldr	r1, [pc, #28]	; (7488 <setDataRange+0x68>)
    746a:	5c50      	ldrb	r0, [r2, r1]
    746c:	0200      	lsls	r0, r0, #8
    746e:	4318      	orrs	r0, r3
    7470:	b2c1      	uxtb	r1, r0
    7472:	0a00      	lsrs	r0, r0, #8
    7474:	4b05      	ldr	r3, [pc, #20]	; (748c <setDataRange+0x6c>)
    7476:	4798      	blx	r3
	return retVal;
    7478:	e7db      	b.n	7432 <setDataRange+0x12>
    747a:	46c0      	nop			; (mov r8, r8)
    747c:	000073b9 	.word	0x000073b9
    7480:	20001328 	.word	0x20001328
    7484:	0000020e 	.word	0x0000020e
    7488:	0000020f 	.word	0x0000020f
    748c:	00008d6d 	.word	0x00008d6d

00007490 <LORAREG_GetAttr_RxWindowSizeT1>:
{
    7490:	b570      	push	{r4, r5, r6, lr}
    7492:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    7494:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7496:	23a8      	movs	r3, #168	; 0xa8
    7498:	005b      	lsls	r3, r3, #1
    749a:	4a0f      	ldr	r2, [pc, #60]	; (74d8 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    749c:	5cd3      	ldrb	r3, [r2, r3]
    749e:	42a3      	cmp	r3, r4
    74a0:	d205      	bcs.n	74ae <LORAREG_GetAttr_RxWindowSizeT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    74a2:	200f      	movs	r0, #15
    74a4:	4b0d      	ldr	r3, [pc, #52]	; (74dc <LORAREG_GetAttr_RxWindowSizeT1+0x4c>)
    74a6:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    74a8:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    74aa:	2808      	cmp	r0, #8
    74ac:	d112      	bne.n	74d4 <LORAREG_GetAttr_RxWindowSizeT1+0x44>
	    *(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;	
    74ae:	490a      	ldr	r1, [pc, #40]	; (74d8 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    74b0:	780b      	ldrb	r3, [r1, #0]
    74b2:	784a      	ldrb	r2, [r1, #1]
    74b4:	0212      	lsls	r2, r2, #8
    74b6:	431a      	orrs	r2, r3
    74b8:	788b      	ldrb	r3, [r1, #2]
    74ba:	041b      	lsls	r3, r3, #16
    74bc:	431a      	orrs	r2, r3
    74be:	78cb      	ldrb	r3, [r1, #3]
    74c0:	061b      	lsls	r3, r3, #24
    74c2:	4313      	orrs	r3, r2
    74c4:	00e4      	lsls	r4, r4, #3
    74c6:	5ce2      	ldrb	r2, [r4, r3]
    74c8:	18e4      	adds	r4, r4, r3
    74ca:	7863      	ldrb	r3, [r4, #1]
    74cc:	021b      	lsls	r3, r3, #8
    74ce:	4313      	orrs	r3, r2
    74d0:	802b      	strh	r3, [r5, #0]
	return result;
    74d2:	2308      	movs	r3, #8
}
    74d4:	0018      	movs	r0, r3
    74d6:	bd70      	pop	{r4, r5, r6, pc}
    74d8:	20001328 	.word	0x20001328
    74dc:	000049c1 	.word	0x000049c1

000074e0 <LORAREG_GetAttr_RxWindowOffsetT1>:
{
    74e0:	b570      	push	{r4, r5, r6, lr}
    74e2:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    74e4:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    74e6:	23a8      	movs	r3, #168	; 0xa8
    74e8:	005b      	lsls	r3, r3, #1
    74ea:	4a0e      	ldr	r2, [pc, #56]	; (7524 <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    74ec:	5cd3      	ldrb	r3, [r2, r3]
    74ee:	42a3      	cmp	r3, r4
    74f0:	d205      	bcs.n	74fe <LORAREG_GetAttr_RxWindowOffsetT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    74f2:	200f      	movs	r0, #15
    74f4:	4b0c      	ldr	r3, [pc, #48]	; (7528 <LORAREG_GetAttr_RxWindowOffsetT1+0x48>)
    74f6:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    74f8:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    74fa:	2808      	cmp	r0, #8
    74fc:	d110      	bne.n	7520 <LORAREG_GetAttr_RxWindowOffsetT1+0x40>
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    74fe:	4909      	ldr	r1, [pc, #36]	; (7524 <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    7500:	780b      	ldrb	r3, [r1, #0]
    7502:	784a      	ldrb	r2, [r1, #1]
    7504:	0212      	lsls	r2, r2, #8
    7506:	431a      	orrs	r2, r3
    7508:	788b      	ldrb	r3, [r1, #2]
    750a:	041b      	lsls	r3, r3, #16
    750c:	431a      	orrs	r2, r3
    750e:	78cb      	ldrb	r3, [r1, #3]
    7510:	061b      	lsls	r3, r3, #24
    7512:	4313      	orrs	r3, r2
    7514:	00e4      	lsls	r4, r4, #3
    7516:	18e3      	adds	r3, r4, r3
    7518:	791b      	ldrb	r3, [r3, #4]
    751a:	b25b      	sxtb	r3, r3
    751c:	702b      	strb	r3, [r5, #0]
	return result;
    751e:	2308      	movs	r3, #8
}
    7520:	0018      	movs	r0, r3
    7522:	bd70      	pop	{r4, r5, r6, pc}
    7524:	20001328 	.word	0x20001328
    7528:	000049c1 	.word	0x000049c1

0000752c <LORAREG_GetAttr_MaxPayloadT1>:
{
    752c:	b570      	push	{r4, r5, r6, lr}
    752e:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    7530:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7532:	23a8      	movs	r3, #168	; 0xa8
    7534:	005b      	lsls	r3, r3, #1
    7536:	4a0e      	ldr	r2, [pc, #56]	; (7570 <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    7538:	5cd3      	ldrb	r3, [r2, r3]
    753a:	42a3      	cmp	r3, r4
    753c:	d205      	bcs.n	754a <LORAREG_GetAttr_MaxPayloadT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    753e:	200f      	movs	r0, #15
    7540:	4b0c      	ldr	r3, [pc, #48]	; (7574 <LORAREG_GetAttr_MaxPayloadT1+0x48>)
    7542:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    7544:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7546:	2808      	cmp	r0, #8
    7548:	d10f      	bne.n	756a <LORAREG_GetAttr_MaxPayloadT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    754a:	4909      	ldr	r1, [pc, #36]	; (7570 <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    754c:	780b      	ldrb	r3, [r1, #0]
    754e:	784a      	ldrb	r2, [r1, #1]
    7550:	0212      	lsls	r2, r2, #8
    7552:	431a      	orrs	r2, r3
    7554:	788b      	ldrb	r3, [r1, #2]
    7556:	041b      	lsls	r3, r3, #16
    7558:	431a      	orrs	r2, r3
    755a:	78cb      	ldrb	r3, [r1, #3]
    755c:	061b      	lsls	r3, r3, #24
    755e:	4313      	orrs	r3, r2
    7560:	00e4      	lsls	r4, r4, #3
    7562:	18e3      	adds	r3, r4, r3
    7564:	789b      	ldrb	r3, [r3, #2]
    7566:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7568:	2308      	movs	r3, #8
}
    756a:	0018      	movs	r0, r3
    756c:	bd70      	pop	{r4, r5, r6, pc}
    756e:	46c0      	nop			; (mov r8, r8)
    7570:	20001328 	.word	0x20001328
    7574:	000049c1 	.word	0x000049c1

00007578 <LORAREG_GetAttr_ModulationAttrT1>:
{
    7578:	b570      	push	{r4, r5, r6, lr}
    757a:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    757c:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    757e:	23a8      	movs	r3, #168	; 0xa8
    7580:	005b      	lsls	r3, r3, #1
    7582:	4a0e      	ldr	r2, [pc, #56]	; (75bc <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    7584:	5cd3      	ldrb	r3, [r2, r3]
    7586:	42a3      	cmp	r3, r4
    7588:	d205      	bcs.n	7596 <LORAREG_GetAttr_ModulationAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    758a:	200f      	movs	r0, #15
    758c:	4b0c      	ldr	r3, [pc, #48]	; (75c0 <LORAREG_GetAttr_ModulationAttrT1+0x48>)
    758e:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    7590:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7592:	2808      	cmp	r0, #8
    7594:	d10f      	bne.n	75b6 <LORAREG_GetAttr_ModulationAttrT1+0x3e>
	    *(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    7596:	4909      	ldr	r1, [pc, #36]	; (75bc <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    7598:	780b      	ldrb	r3, [r1, #0]
    759a:	784a      	ldrb	r2, [r1, #1]
    759c:	0212      	lsls	r2, r2, #8
    759e:	431a      	orrs	r2, r3
    75a0:	788b      	ldrb	r3, [r1, #2]
    75a2:	041b      	lsls	r3, r3, #16
    75a4:	431a      	orrs	r2, r3
    75a6:	78cb      	ldrb	r3, [r1, #3]
    75a8:	061b      	lsls	r3, r3, #24
    75aa:	4313      	orrs	r3, r2
    75ac:	00e4      	lsls	r4, r4, #3
    75ae:	18e3      	adds	r3, r4, r3
    75b0:	79db      	ldrb	r3, [r3, #7]
    75b2:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    75b4:	2308      	movs	r3, #8
}
    75b6:	0018      	movs	r0, r3
    75b8:	bd70      	pop	{r4, r5, r6, pc}
    75ba:	46c0      	nop			; (mov r8, r8)
    75bc:	20001328 	.word	0x20001328
    75c0:	000049c1 	.word	0x000049c1

000075c4 <LORAREG_GetAttr_BandwidthAttrT1>:
{
    75c4:	b570      	push	{r4, r5, r6, lr}
    75c6:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    75c8:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    75ca:	23a8      	movs	r3, #168	; 0xa8
    75cc:	005b      	lsls	r3, r3, #1
    75ce:	4a0e      	ldr	r2, [pc, #56]	; (7608 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    75d0:	5cd3      	ldrb	r3, [r2, r3]
    75d2:	42a3      	cmp	r3, r4
    75d4:	d205      	bcs.n	75e2 <LORAREG_GetAttr_BandwidthAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    75d6:	200f      	movs	r0, #15
    75d8:	4b0c      	ldr	r3, [pc, #48]	; (760c <LORAREG_GetAttr_BandwidthAttrT1+0x48>)
    75da:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    75dc:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    75de:	2808      	cmp	r0, #8
    75e0:	d10f      	bne.n	7602 <LORAREG_GetAttr_BandwidthAttrT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    75e2:	4909      	ldr	r1, [pc, #36]	; (7608 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    75e4:	780b      	ldrb	r3, [r1, #0]
    75e6:	784a      	ldrb	r2, [r1, #1]
    75e8:	0212      	lsls	r2, r2, #8
    75ea:	431a      	orrs	r2, r3
    75ec:	788b      	ldrb	r3, [r1, #2]
    75ee:	041b      	lsls	r3, r3, #16
    75f0:	431a      	orrs	r2, r3
    75f2:	78cb      	ldrb	r3, [r1, #3]
    75f4:	061b      	lsls	r3, r3, #24
    75f6:	4313      	orrs	r3, r2
    75f8:	00e4      	lsls	r4, r4, #3
    75fa:	18e3      	adds	r3, r4, r3
    75fc:	799b      	ldrb	r3, [r3, #6]
    75fe:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7600:	2308      	movs	r3, #8
}
    7602:	0018      	movs	r0, r3
    7604:	bd70      	pop	{r4, r5, r6, pc}
    7606:	46c0      	nop			; (mov r8, r8)
    7608:	20001328 	.word	0x20001328
    760c:	000049c1 	.word	0x000049c1

00007610 <LORAREG_GetAttr_SpreadFactorT1>:
{
    7610:	b570      	push	{r4, r5, r6, lr}
    7612:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    7614:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7616:	23a8      	movs	r3, #168	; 0xa8
    7618:	005b      	lsls	r3, r3, #1
    761a:	4a0e      	ldr	r2, [pc, #56]	; (7654 <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    761c:	5cd3      	ldrb	r3, [r2, r3]
    761e:	42a3      	cmp	r3, r4
    7620:	d205      	bcs.n	762e <LORAREG_GetAttr_SpreadFactorT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7622:	200f      	movs	r0, #15
    7624:	4b0c      	ldr	r3, [pc, #48]	; (7658 <LORAREG_GetAttr_SpreadFactorT1+0x48>)
    7626:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    7628:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    762a:	2808      	cmp	r0, #8
    762c:	d10f      	bne.n	764e <LORAREG_GetAttr_SpreadFactorT1+0x3e>
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    762e:	4909      	ldr	r1, [pc, #36]	; (7654 <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    7630:	780b      	ldrb	r3, [r1, #0]
    7632:	784a      	ldrb	r2, [r1, #1]
    7634:	0212      	lsls	r2, r2, #8
    7636:	431a      	orrs	r2, r3
    7638:	788b      	ldrb	r3, [r1, #2]
    763a:	041b      	lsls	r3, r3, #16
    763c:	431a      	orrs	r2, r3
    763e:	78cb      	ldrb	r3, [r1, #3]
    7640:	061b      	lsls	r3, r3, #24
    7642:	4313      	orrs	r3, r2
    7644:	00e4      	lsls	r4, r4, #3
    7646:	18e3      	adds	r3, r4, r3
    7648:	795b      	ldrb	r3, [r3, #5]
    764a:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    764c:	2308      	movs	r3, #8
}
    764e:	0018      	movs	r0, r3
    7650:	bd70      	pop	{r4, r5, r6, pc}
    7652:	46c0      	nop			; (mov r8, r8)
    7654:	20001328 	.word	0x20001328
    7658:	000049c1 	.word	0x000049c1

0000765c <ValidateTxFreqT1>:
{
    765c:	b530      	push	{r4, r5, lr}
    765e:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    7660:	2208      	movs	r2, #8
    7662:	4668      	mov	r0, sp
    7664:	4b20      	ldr	r3, [pc, #128]	; (76e8 <ValidateTxFreqT1+0x8c>)
    7666:	4798      	blx	r3
	if(ChIndex > RegParams.maxChannels)
    7668:	466b      	mov	r3, sp
    766a:	7919      	ldrb	r1, [r3, #4]
    766c:	232a      	movs	r3, #42	; 0x2a
    766e:	4a1f      	ldr	r2, [pc, #124]	; (76ec <ValidateTxFreqT1+0x90>)
    7670:	56d3      	ldrsb	r3, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7672:	2008      	movs	r0, #8
	if(ChIndex > RegParams.maxChannels)
    7674:	4299      	cmp	r1, r3
    7676:	dd00      	ble.n	767a <ValidateTxFreqT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    7678:	3002      	adds	r0, #2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    767a:	9c00      	ldr	r4, [sp, #0]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    767c:	4d1b      	ldr	r5, [pc, #108]	; (76ec <ValidateTxFreqT1+0x90>)
    767e:	2344      	movs	r3, #68	; 0x44
    7680:	33ff      	adds	r3, #255	; 0xff
    7682:	5ceb      	ldrb	r3, [r5, r3]
    7684:	22a2      	movs	r2, #162	; 0xa2
    7686:	0052      	lsls	r2, r2, #1
    7688:	5caa      	ldrb	r2, [r5, r2]
    768a:	0212      	lsls	r2, r2, #8
    768c:	431a      	orrs	r2, r3
    768e:	2346      	movs	r3, #70	; 0x46
    7690:	33ff      	adds	r3, #255	; 0xff
    7692:	5ceb      	ldrb	r3, [r5, r3]
    7694:	041b      	lsls	r3, r3, #16
    7696:	431a      	orrs	r2, r3
    7698:	23a3      	movs	r3, #163	; 0xa3
    769a:	005b      	lsls	r3, r3, #1
    769c:	5ceb      	ldrb	r3, [r5, r3]
    769e:	061b      	lsls	r3, r3, #24
    76a0:	4313      	orrs	r3, r2
    76a2:	4a13      	ldr	r2, [pc, #76]	; (76f0 <ValidateTxFreqT1+0x94>)
    76a4:	434a      	muls	r2, r1
    76a6:	189b      	adds	r3, r3, r2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    76a8:	429c      	cmp	r4, r3
    76aa:	d01b      	beq.n	76e4 <ValidateTxFreqT1+0x88>
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    76ac:	2354      	movs	r3, #84	; 0x54
    76ae:	33ff      	adds	r3, #255	; 0xff
    76b0:	5ceb      	ldrb	r3, [r5, r3]
    76b2:	1ac9      	subs	r1, r1, r3
    76b4:	4b0f      	ldr	r3, [pc, #60]	; (76f4 <ValidateTxFreqT1+0x98>)
    76b6:	4359      	muls	r1, r3
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    76b8:	2348      	movs	r3, #72	; 0x48
    76ba:	33ff      	adds	r3, #255	; 0xff
    76bc:	5ceb      	ldrb	r3, [r5, r3]
    76be:	22a4      	movs	r2, #164	; 0xa4
    76c0:	0052      	lsls	r2, r2, #1
    76c2:	5caa      	ldrb	r2, [r5, r2]
    76c4:	0212      	lsls	r2, r2, #8
    76c6:	4313      	orrs	r3, r2
    76c8:	224a      	movs	r2, #74	; 0x4a
    76ca:	32ff      	adds	r2, #255	; 0xff
    76cc:	5caa      	ldrb	r2, [r5, r2]
    76ce:	0412      	lsls	r2, r2, #16
    76d0:	431a      	orrs	r2, r3
    76d2:	23a5      	movs	r3, #165	; 0xa5
    76d4:	005b      	lsls	r3, r3, #1
    76d6:	5ceb      	ldrb	r3, [r5, r3]
    76d8:	061b      	lsls	r3, r3, #24
    76da:	4313      	orrs	r3, r2
    76dc:	18cb      	adds	r3, r1, r3
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    76de:	429c      	cmp	r4, r3
    76e0:	d000      	beq.n	76e4 <ValidateTxFreqT1+0x88>
		result = LORAWAN_INVALID_PARAMETER;
    76e2:	200a      	movs	r0, #10
}
    76e4:	b003      	add	sp, #12
    76e6:	bd30      	pop	{r4, r5, pc}
    76e8:	00013e5d 	.word	0x00013e5d
    76ec:	20001328 	.word	0x20001328
    76f0:	00030d40 	.word	0x00030d40
    76f4:	00186a00 	.word	0x00186a00

000076f8 <LORAREG_GetAttr_NewTxChConfigT1>:
{
    76f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    76fa:	46ce      	mov	lr, r9
    76fc:	4647      	mov	r7, r8
    76fe:	b580      	push	{r7, lr}
    7700:	b083      	sub	sp, #12
    7702:	0016      	movs	r6, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    7704:	788d      	ldrb	r5, [r1, #2]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7706:	23a8      	movs	r3, #168	; 0xa8
    7708:	005b      	lsls	r3, r3, #1
    770a:	4a63      	ldr	r2, [pc, #396]	; (7898 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    770c:	5cd3      	ldrb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    770e:	240a      	movs	r4, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7710:	42ab      	cmp	r3, r5
    7712:	d300      	bcc.n	7716 <LORAREG_GetAttr_NewTxChConfigT1+0x1e>
    7714:	e09a      	b.n	784c <LORAREG_GetAttr_NewTxChConfigT1+0x154>
}
    7716:	0020      	movs	r0, r4
    7718:	b003      	add	sp, #12
    771a:	bc0c      	pop	{r2, r3}
    771c:	4690      	mov	r8, r2
    771e:	4699      	mov	r9, r3
    7720:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result = SearchAvailableChannel1 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    7722:	4b5d      	ldr	r3, [pc, #372]	; (7898 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    7724:	4699      	mov	r9, r3
    7726:	232a      	movs	r3, #42	; 0x2a
    7728:	464a      	mov	r2, r9
    772a:	5cd0      	ldrb	r0, [r2, r3]
    772c:	466b      	mov	r3, sp
    772e:	3307      	adds	r3, #7
    7730:	002a      	movs	r2, r5
    7732:	2101      	movs	r1, #1
    7734:	4c59      	ldr	r4, [pc, #356]	; (789c <LORAREG_GetAttr_NewTxChConfigT1+0x1a4>)
    7736:	47a0      	blx	r4
    7738:	0004      	movs	r4, r0
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    773a:	464b      	mov	r3, r9
    773c:	781b      	ldrb	r3, [r3, #0]
    773e:	464a      	mov	r2, r9
    7740:	7852      	ldrb	r2, [r2, #1]
    7742:	0212      	lsls	r2, r2, #8
    7744:	431a      	orrs	r2, r3
    7746:	464b      	mov	r3, r9
    7748:	789b      	ldrb	r3, [r3, #2]
    774a:	041b      	lsls	r3, r3, #16
    774c:	431a      	orrs	r2, r3
    774e:	464b      	mov	r3, r9
    7750:	78db      	ldrb	r3, [r3, #3]
    7752:	061b      	lsls	r3, r3, #24
    7754:	4313      	orrs	r3, r2
    7756:	00ed      	lsls	r5, r5, #3
    7758:	18eb      	adds	r3, r5, r3
    775a:	795b      	ldrb	r3, [r3, #5]
    775c:	72f3      	strb	r3, [r6, #11]
	if (result == LORAWAN_SUCCESS)
    775e:	2c08      	cmp	r4, #8
    7760:	d1d9      	bne.n	7716 <LORAREG_GetAttr_NewTxChConfigT1+0x1e>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    7762:	007f      	lsls	r7, r7, #1
    7764:	4643      	mov	r3, r8
    7766:	1bdb      	subs	r3, r3, r7
    7768:	b2db      	uxtb	r3, r3
		if (channelIndex < RegParams.cmnParams.paramsType1.Max_125khzChan)
    776a:	466a      	mov	r2, sp
    776c:	3207      	adds	r2, #7
    776e:	7812      	ldrb	r2, [r2, #0]
    7770:	2154      	movs	r1, #84	; 0x54
    7772:	31ff      	adds	r1, #255	; 0xff
    7774:	4848      	ldr	r0, [pc, #288]	; (7898 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    7776:	5c41      	ldrb	r1, [r0, r1]
    7778:	4291      	cmp	r1, r2
    777a:	d93c      	bls.n	77f6 <LORAREG_GetAttr_NewTxChConfigT1+0xfe>
			radioConfig->bandwidth = BW_125KHZ;
    777c:	2107      	movs	r1, #7
    777e:	72b1      	strb	r1, [r6, #10]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    7780:	2144      	movs	r1, #68	; 0x44
    7782:	31ff      	adds	r1, #255	; 0xff
    7784:	5c41      	ldrb	r1, [r0, r1]
    7786:	25a2      	movs	r5, #162	; 0xa2
    7788:	006d      	lsls	r5, r5, #1
    778a:	5d45      	ldrb	r5, [r0, r5]
    778c:	022d      	lsls	r5, r5, #8
    778e:	430d      	orrs	r5, r1
    7790:	2146      	movs	r1, #70	; 0x46
    7792:	31ff      	adds	r1, #255	; 0xff
    7794:	5c41      	ldrb	r1, [r0, r1]
    7796:	0409      	lsls	r1, r1, #16
    7798:	430d      	orrs	r5, r1
    779a:	21a3      	movs	r1, #163	; 0xa3
    779c:	0049      	lsls	r1, r1, #1
    779e:	5c41      	ldrb	r1, [r0, r1]
    77a0:	0609      	lsls	r1, r1, #24
    77a2:	4329      	orrs	r1, r5
    77a4:	4d3e      	ldr	r5, [pc, #248]	; (78a0 <LORAREG_GetAttr_NewTxChConfigT1+0x1a8>)
    77a6:	436a      	muls	r2, r5
    77a8:	188a      	adds	r2, r1, r2
			radioConfig->frequency = GenerateFrequency1 (channelIndex);
    77aa:	6032      	str	r2, [r6, #0]
			radioConfig->txPower = txPower;
    77ac:	7233      	strb	r3, [r6, #8]
			if(RegParams.band == ISM_NA915)
    77ae:	232e      	movs	r3, #46	; 0x2e
    77b0:	5cc3      	ldrb	r3, [r0, r3]
    77b2:	2b02      	cmp	r3, #2
    77b4:	d01b      	beq.n	77ee <LORAREG_GetAttr_NewTxChConfigT1+0xf6>
		radioConfig->freq_hop_period = DISABLED;
    77b6:	2300      	movs	r3, #0
    77b8:	80b3      	strh	r3, [r6, #4]
		radioConfig->modulation = MODULATION_LORA;
    77ba:	3301      	adds	r3, #1
    77bc:	7273      	strb	r3, [r6, #9]
		RegParams.lastUsedChannelIndex = channelIndex;
    77be:	466b      	mov	r3, sp
    77c0:	79d9      	ldrb	r1, [r3, #7]
    77c2:	232f      	movs	r3, #47	; 0x2f
    77c4:	4a34      	ldr	r2, [pc, #208]	; (7898 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    77c6:	54d1      	strb	r1, [r2, r3]
    77c8:	e7a5      	b.n	7716 <LORAREG_GetAttr_NewTxChConfigT1+0x1e>
				radioConfig->sf = SF_10;
    77ca:	3308      	adds	r3, #8
    77cc:	72f3      	strb	r3, [r6, #11]
    77ce:	e001      	b.n	77d4 <LORAREG_GetAttr_NewTxChConfigT1+0xdc>
			radioConfig->sf = SF_8;
    77d0:	2308      	movs	r3, #8
    77d2:	72f3      	strb	r3, [r6, #11]
		PDS_STORE(RegParams.regParamItems.lastUsedSB);
    77d4:	4b30      	ldr	r3, [pc, #192]	; (7898 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    77d6:	2283      	movs	r2, #131	; 0x83
    77d8:	0092      	lsls	r2, r2, #2
    77da:	5c9a      	ldrb	r2, [r3, r2]
    77dc:	4931      	ldr	r1, [pc, #196]	; (78a4 <LORAREG_GetAttr_NewTxChConfigT1+0x1ac>)
    77de:	5c58      	ldrb	r0, [r3, r1]
    77e0:	0200      	lsls	r0, r0, #8
    77e2:	4310      	orrs	r0, r2
    77e4:	b2c1      	uxtb	r1, r0
    77e6:	0a00      	lsrs	r0, r0, #8
    77e8:	4b2f      	ldr	r3, [pc, #188]	; (78a8 <LORAREG_GetAttr_NewTxChConfigT1+0x1b0>)
    77ea:	4798      	blx	r3
    77ec:	e7b7      	b.n	775e <LORAREG_GetAttr_NewTxChConfigT1+0x66>
    			radioConfig->ecrConfig.override = true;
    77ee:	3b01      	subs	r3, #1
    77f0:	71f3      	strb	r3, [r6, #7]
			    radioConfig->ecrConfig.ecr = CR_4_5;	 
    77f2:	71b3      	strb	r3, [r6, #6]
    77f4:	e7df      	b.n	77b6 <LORAREG_GetAttr_NewTxChConfigT1+0xbe>
			radioConfig->bandwidth = BW_500KHZ;
    77f6:	2109      	movs	r1, #9
    77f8:	72b1      	strb	r1, [r6, #10]
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    77fa:	4927      	ldr	r1, [pc, #156]	; (7898 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    77fc:	2054      	movs	r0, #84	; 0x54
    77fe:	30ff      	adds	r0, #255	; 0xff
    7800:	5c08      	ldrb	r0, [r1, r0]
    7802:	1a12      	subs	r2, r2, r0
    7804:	4829      	ldr	r0, [pc, #164]	; (78ac <LORAREG_GetAttr_NewTxChConfigT1+0x1b4>)
    7806:	4342      	muls	r2, r0
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    7808:	2048      	movs	r0, #72	; 0x48
    780a:	30ff      	adds	r0, #255	; 0xff
    780c:	5c08      	ldrb	r0, [r1, r0]
    780e:	25a4      	movs	r5, #164	; 0xa4
    7810:	006d      	lsls	r5, r5, #1
    7812:	5d4d      	ldrb	r5, [r1, r5]
    7814:	022d      	lsls	r5, r5, #8
    7816:	4305      	orrs	r5, r0
    7818:	204a      	movs	r0, #74	; 0x4a
    781a:	30ff      	adds	r0, #255	; 0xff
    781c:	5c08      	ldrb	r0, [r1, r0]
    781e:	0400      	lsls	r0, r0, #16
    7820:	4305      	orrs	r5, r0
    7822:	20a5      	movs	r0, #165	; 0xa5
    7824:	0040      	lsls	r0, r0, #1
    7826:	5c08      	ldrb	r0, [r1, r0]
    7828:	0600      	lsls	r0, r0, #24
    782a:	4328      	orrs	r0, r5
    782c:	1812      	adds	r2, r2, r0
			radioConfig->frequency = GenerateFrequency2 (channelIndex);
    782e:	6032      	str	r2, [r6, #0]
			if( RegParams.band == ISM_NA915)
    7830:	222e      	movs	r2, #46	; 0x2e
    7832:	5c8a      	ldrb	r2, [r1, r2]
    7834:	2a02      	cmp	r2, #2
    7836:	d003      	beq.n	7840 <LORAREG_GetAttr_NewTxChConfigT1+0x148>
			if (txPower <= 26)
    7838:	2b1a      	cmp	r3, #26
    783a:	d804      	bhi.n	7846 <LORAREG_GetAttr_NewTxChConfigT1+0x14e>
				radioConfig->txPower = txPower;
    783c:	7233      	strb	r3, [r6, #8]
    783e:	e7ba      	b.n	77b6 <LORAREG_GetAttr_NewTxChConfigT1+0xbe>
			    radioConfig->ecrConfig.override = false;
    7840:	2200      	movs	r2, #0
    7842:	71f2      	strb	r2, [r6, #7]
    7844:	e7f8      	b.n	7838 <LORAREG_GetAttr_NewTxChConfigT1+0x140>
				radioConfig->txPower = 26;
    7846:	231a      	movs	r3, #26
    7848:	7233      	strb	r3, [r6, #8]
    784a:	e7b4      	b.n	77b6 <LORAREG_GetAttr_NewTxChConfigT1+0xbe>
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    784c:	784f      	ldrb	r7, [r1, #1]
	if (txPowerNew > RegParams.maxTxPwrIndx)
    784e:	232d      	movs	r3, #45	; 0x2d
    7850:	4a11      	ldr	r2, [pc, #68]	; (7898 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    7852:	56d3      	ldrsb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    7854:	240a      	movs	r4, #10
	if (txPowerNew > RegParams.maxTxPwrIndx)
    7856:	429f      	cmp	r7, r3
    7858:	dd00      	ble.n	785c <LORAREG_GetAttr_NewTxChConfigT1+0x164>
    785a:	e75c      	b.n	7716 <LORAREG_GetAttr_NewTxChConfigT1+0x1e>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    785c:	2328      	movs	r3, #40	; 0x28
    785e:	5cd3      	ldrb	r3, [r2, r3]
    7860:	4698      	mov	r8, r3
	if (transmissionType == 1) // data message (not join request), it should search in all
    7862:	780b      	ldrb	r3, [r1, #0]
    7864:	2b00      	cmp	r3, #0
    7866:	d000      	beq.n	786a <LORAREG_GetAttr_NewTxChConfigT1+0x172>
    7868:	e75b      	b.n	7722 <LORAREG_GetAttr_NewTxChConfigT1+0x2a>
		result = SearchAvailableChannel1 (RegParams.cmnParams.paramsType1.Max_125khzChan, transmissionType,DR0, &channelIndex);
    786a:	466b      	mov	r3, sp
    786c:	1ddd      	adds	r5, r3, #7
    786e:	2354      	movs	r3, #84	; 0x54
    7870:	33ff      	adds	r3, #255	; 0xff
    7872:	4a09      	ldr	r2, [pc, #36]	; (7898 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    7874:	5cd0      	ldrb	r0, [r2, r3]
    7876:	002b      	movs	r3, r5
    7878:	2200      	movs	r2, #0
    787a:	2100      	movs	r1, #0
    787c:	4c07      	ldr	r4, [pc, #28]	; (789c <LORAREG_GetAttr_NewTxChConfigT1+0x1a4>)
    787e:	47a0      	blx	r4
    7880:	0004      	movs	r4, r0
		if(channelIndex < MAX_CHANNELS_BANDWIDTH_125_AU_NA)
    7882:	782b      	ldrb	r3, [r5, #0]
    7884:	2b3f      	cmp	r3, #63	; 0x3f
    7886:	d8a3      	bhi.n	77d0 <LORAREG_GetAttr_NewTxChConfigT1+0xd8>
			if( RegParams.band == ISM_NA915)
    7888:	232e      	movs	r3, #46	; 0x2e
    788a:	4a03      	ldr	r2, [pc, #12]	; (7898 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    788c:	5cd3      	ldrb	r3, [r2, r3]
    788e:	2b02      	cmp	r3, #2
    7890:	d09b      	beq.n	77ca <LORAREG_GetAttr_NewTxChConfigT1+0xd2>
				radioConfig->sf = SF_12;
    7892:	230c      	movs	r3, #12
    7894:	72f3      	strb	r3, [r6, #11]
    7896:	e79d      	b.n	77d4 <LORAREG_GetAttr_NewTxChConfigT1+0xdc>
    7898:	20001328 	.word	0x20001328
    789c:	00004e81 	.word	0x00004e81
    78a0:	00030d40 	.word	0x00030d40
    78a4:	0000020d 	.word	0x0000020d
    78a8:	00008d6d 	.word	0x00008d6d
    78ac:	00186a00 	.word	0x00186a00

000078b0 <LORAREG_InitGetAttrFnPtrsNA>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    78b0:	4b2b      	ldr	r3, [pc, #172]	; (7960 <LORAREG_InitGetAttrFnPtrsNA+0xb0>)
    78b2:	4a2c      	ldr	r2, [pc, #176]	; (7964 <LORAREG_InitGetAttrFnPtrsNA+0xb4>)
    78b4:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    78b6:	4a2c      	ldr	r2, [pc, #176]	; (7968 <LORAREG_InitGetAttrFnPtrsNA+0xb8>)
    78b8:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    78ba:	4a2c      	ldr	r2, [pc, #176]	; (796c <LORAREG_InitGetAttrFnPtrsNA+0xbc>)
    78bc:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    78be:	4a2c      	ldr	r2, [pc, #176]	; (7970 <LORAREG_InitGetAttrFnPtrsNA+0xc0>)
    78c0:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    78c2:	4a2c      	ldr	r2, [pc, #176]	; (7974 <LORAREG_InitGetAttrFnPtrsNA+0xc4>)
    78c4:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    78c6:	4a2c      	ldr	r2, [pc, #176]	; (7978 <LORAREG_InitGetAttrFnPtrsNA+0xc8>)
    78c8:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    78ca:	4a2c      	ldr	r2, [pc, #176]	; (797c <LORAREG_InitGetAttrFnPtrsNA+0xcc>)
    78cc:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    78ce:	4a2c      	ldr	r2, [pc, #176]	; (7980 <LORAREG_InitGetAttrFnPtrsNA+0xd0>)
    78d0:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    78d2:	4a2c      	ldr	r2, [pc, #176]	; (7984 <LORAREG_InitGetAttrFnPtrsNA+0xd4>)
    78d4:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    78d6:	4a2c      	ldr	r2, [pc, #176]	; (7988 <LORAREG_InitGetAttrFnPtrsNA+0xd8>)
    78d8:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    78da:	4a2c      	ldr	r2, [pc, #176]	; (798c <LORAREG_InitGetAttrFnPtrsNA+0xdc>)
    78dc:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    78de:	4a2c      	ldr	r2, [pc, #176]	; (7990 <LORAREG_InitGetAttrFnPtrsNA+0xe0>)
    78e0:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    78e2:	4a2c      	ldr	r2, [pc, #176]	; (7994 <LORAREG_InitGetAttrFnPtrsNA+0xe4>)
    78e4:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    78e6:	4a2c      	ldr	r2, [pc, #176]	; (7998 <LORAREG_InitGetAttrFnPtrsNA+0xe8>)
    78e8:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    78ea:	4a2c      	ldr	r2, [pc, #176]	; (799c <LORAREG_InitGetAttrFnPtrsNA+0xec>)
    78ec:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    78ee:	492c      	ldr	r1, [pc, #176]	; (79a0 <LORAREG_InitGetAttrFnPtrsNA+0xf0>)
    78f0:	2280      	movs	r2, #128	; 0x80
    78f2:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    78f4:	4a2b      	ldr	r2, [pc, #172]	; (79a4 <LORAREG_InitGetAttrFnPtrsNA+0xf4>)
    78f6:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    78f8:	492b      	ldr	r1, [pc, #172]	; (79a8 <LORAREG_InitGetAttrFnPtrsNA+0xf8>)
    78fa:	228c      	movs	r2, #140	; 0x8c
    78fc:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    78fe:	492b      	ldr	r1, [pc, #172]	; (79ac <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    7900:	3204      	adds	r2, #4
    7902:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    7904:	492a      	ldr	r1, [pc, #168]	; (79b0 <LORAREG_InitGetAttrFnPtrsNA+0x100>)
    7906:	3204      	adds	r2, #4
    7908:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;
    790a:	492a      	ldr	r1, [pc, #168]	; (79b4 <LORAREG_InitGetAttrFnPtrsNA+0x104>)
    790c:	3204      	adds	r2, #4
    790e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    7910:	4929      	ldr	r1, [pc, #164]	; (79b8 <LORAREG_InitGetAttrFnPtrsNA+0x108>)
    7912:	3204      	adds	r2, #4
    7914:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    7916:	4929      	ldr	r1, [pc, #164]	; (79bc <LORAREG_InitGetAttrFnPtrsNA+0x10c>)
    7918:	3204      	adds	r2, #4
    791a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    791c:	4928      	ldr	r1, [pc, #160]	; (79c0 <LORAREG_InitGetAttrFnPtrsNA+0x110>)
    791e:	3204      	adds	r2, #4
    7920:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    7922:	4928      	ldr	r1, [pc, #160]	; (79c4 <LORAREG_InitGetAttrFnPtrsNA+0x114>)
    7924:	3204      	adds	r2, #4
    7926:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    7928:	4927      	ldr	r1, [pc, #156]	; (79c8 <LORAREG_InitGetAttrFnPtrsNA+0x118>)
    792a:	3204      	adds	r2, #4
    792c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    792e:	4927      	ldr	r1, [pc, #156]	; (79cc <LORAREG_InitGetAttrFnPtrsNA+0x11c>)
    7930:	3204      	adds	r2, #4
    7932:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    7934:	4926      	ldr	r1, [pc, #152]	; (79d0 <LORAREG_InitGetAttrFnPtrsNA+0x120>)
    7936:	3204      	adds	r2, #4
    7938:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    793a:	4926      	ldr	r1, [pc, #152]	; (79d4 <LORAREG_InitGetAttrFnPtrsNA+0x124>)
    793c:	3204      	adds	r2, #4
    793e:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    7940:	4925      	ldr	r1, [pc, #148]	; (79d8 <LORAREG_InitGetAttrFnPtrsNA+0x128>)
    7942:	3204      	adds	r2, #4
    7944:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    7946:	4925      	ldr	r1, [pc, #148]	; (79dc <LORAREG_InitGetAttrFnPtrsNA+0x12c>)
    7948:	3204      	adds	r2, #4
    794a:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    794c:	4924      	ldr	r1, [pc, #144]	; (79e0 <LORAREG_InitGetAttrFnPtrsNA+0x130>)
    794e:	3204      	adds	r2, #4
    7950:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    7952:	4924      	ldr	r1, [pc, #144]	; (79e4 <LORAREG_InitGetAttrFnPtrsNA+0x134>)
    7954:	3214      	adds	r2, #20
    7956:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    7958:	4923      	ldr	r1, [pc, #140]	; (79e8 <LORAREG_InitGetAttrFnPtrsNA+0x138>)
    795a:	3204      	adds	r2, #4
    795c:	5099      	str	r1, [r3, r2]
}
    795e:	4770      	bx	lr
    7960:	20000af8 	.word	0x20000af8
    7964:	000048e9 	.word	0x000048e9
    7968:	00007491 	.word	0x00007491
    796c:	000074e1 	.word	0x000074e1
    7970:	0000752d 	.word	0x0000752d
    7974:	00004731 	.word	0x00004731
    7978:	00004741 	.word	0x00004741
    797c:	0000475d 	.word	0x0000475d
    7980:	0000476d 	.word	0x0000476d
    7984:	00005641 	.word	0x00005641
    7988:	0000477d 	.word	0x0000477d
    798c:	0000478d 	.word	0x0000478d
    7990:	00005515 	.word	0x00005515
    7994:	00004a9d 	.word	0x00004a9d
    7998:	000047dd 	.word	0x000047dd
    799c:	00005469 	.word	0x00005469
    79a0:	000053c9 	.word	0x000053c9
    79a4:	00004829 	.word	0x00004829
    79a8:	00007579 	.word	0x00007579
    79ac:	000075c5 	.word	0x000075c5
    79b0:	00007611 	.word	0x00007611
    79b4:	00004833 	.word	0x00004833
    79b8:	0000483d 	.word	0x0000483d
    79bc:	00004847 	.word	0x00004847
    79c0:	00004851 	.word	0x00004851
    79c4:	0000485d 	.word	0x0000485d
    79c8:	00004869 	.word	0x00004869
    79cc:	00004873 	.word	0x00004873
    79d0:	0000487b 	.word	0x0000487b
    79d4:	00004883 	.word	0x00004883
    79d8:	000076f9 	.word	0x000076f9
    79dc:	00005015 	.word	0x00005015
    79e0:	000048ad 	.word	0x000048ad
    79e4:	0000488d 	.word	0x0000488d
    79e8:	0000489d 	.word	0x0000489d

000079ec <LORAREG_InitGetAttrFnPtrsEU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    79ec:	4b2d      	ldr	r3, [pc, #180]	; (7aa4 <LORAREG_InitGetAttrFnPtrsEU+0xb8>)
    79ee:	4a2e      	ldr	r2, [pc, #184]	; (7aa8 <LORAREG_InitGetAttrFnPtrsEU+0xbc>)
    79f0:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    79f2:	4a2e      	ldr	r2, [pc, #184]	; (7aac <LORAREG_InitGetAttrFnPtrsEU+0xc0>)
    79f4:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    79f6:	4a2e      	ldr	r2, [pc, #184]	; (7ab0 <LORAREG_InitGetAttrFnPtrsEU+0xc4>)
    79f8:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    79fa:	4a2e      	ldr	r2, [pc, #184]	; (7ab4 <LORAREG_InitGetAttrFnPtrsEU+0xc8>)
    79fc:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    79fe:	4a2e      	ldr	r2, [pc, #184]	; (7ab8 <LORAREG_InitGetAttrFnPtrsEU+0xcc>)
    7a00:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    7a02:	4a2e      	ldr	r2, [pc, #184]	; (7abc <LORAREG_InitGetAttrFnPtrsEU+0xd0>)
    7a04:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    7a06:	4a2e      	ldr	r2, [pc, #184]	; (7ac0 <LORAREG_InitGetAttrFnPtrsEU+0xd4>)
    7a08:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    7a0a:	4a2e      	ldr	r2, [pc, #184]	; (7ac4 <LORAREG_InitGetAttrFnPtrsEU+0xd8>)
    7a0c:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    7a0e:	4a2e      	ldr	r2, [pc, #184]	; (7ac8 <LORAREG_InitGetAttrFnPtrsEU+0xdc>)
    7a10:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    7a12:	4a2e      	ldr	r2, [pc, #184]	; (7acc <LORAREG_InitGetAttrFnPtrsEU+0xe0>)
    7a14:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    7a16:	4a2e      	ldr	r2, [pc, #184]	; (7ad0 <LORAREG_InitGetAttrFnPtrsEU+0xe4>)
    7a18:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    7a1a:	4a2e      	ldr	r2, [pc, #184]	; (7ad4 <LORAREG_InitGetAttrFnPtrsEU+0xe8>)
    7a1c:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    7a1e:	4a2e      	ldr	r2, [pc, #184]	; (7ad8 <LORAREG_InitGetAttrFnPtrsEU+0xec>)
    7a20:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    7a22:	4a2e      	ldr	r2, [pc, #184]	; (7adc <LORAREG_InitGetAttrFnPtrsEU+0xf0>)
    7a24:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    7a26:	4a2e      	ldr	r2, [pc, #184]	; (7ae0 <LORAREG_InitGetAttrFnPtrsEU+0xf4>)
    7a28:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    7a2a:	492e      	ldr	r1, [pc, #184]	; (7ae4 <LORAREG_InitGetAttrFnPtrsEU+0xf8>)
    7a2c:	2280      	movs	r2, #128	; 0x80
    7a2e:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    7a30:	4a2d      	ldr	r2, [pc, #180]	; (7ae8 <LORAREG_InitGetAttrFnPtrsEU+0xfc>)
    7a32:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    7a34:	492d      	ldr	r1, [pc, #180]	; (7aec <LORAREG_InitGetAttrFnPtrsEU+0x100>)
    7a36:	228c      	movs	r2, #140	; 0x8c
    7a38:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    7a3a:	492d      	ldr	r1, [pc, #180]	; (7af0 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    7a3c:	3204      	adds	r2, #4
    7a3e:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    7a40:	492c      	ldr	r1, [pc, #176]	; (7af4 <LORAREG_InitGetAttrFnPtrsEU+0x108>)
    7a42:	3204      	adds	r2, #4
    7a44:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    7a46:	492c      	ldr	r1, [pc, #176]	; (7af8 <LORAREG_InitGetAttrFnPtrsEU+0x10c>)
    7a48:	3204      	adds	r2, #4
    7a4a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    7a4c:	492b      	ldr	r1, [pc, #172]	; (7afc <LORAREG_InitGetAttrFnPtrsEU+0x110>)
    7a4e:	3204      	adds	r2, #4
    7a50:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    7a52:	492b      	ldr	r1, [pc, #172]	; (7b00 <LORAREG_InitGetAttrFnPtrsEU+0x114>)
    7a54:	3204      	adds	r2, #4
    7a56:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    7a58:	492a      	ldr	r1, [pc, #168]	; (7b04 <LORAREG_InitGetAttrFnPtrsEU+0x118>)
    7a5a:	3204      	adds	r2, #4
    7a5c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    7a5e:	492a      	ldr	r1, [pc, #168]	; (7b08 <LORAREG_InitGetAttrFnPtrsEU+0x11c>)
    7a60:	3204      	adds	r2, #4
    7a62:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    7a64:	4929      	ldr	r1, [pc, #164]	; (7b0c <LORAREG_InitGetAttrFnPtrsEU+0x120>)
    7a66:	3204      	adds	r2, #4
    7a68:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    7a6a:	4929      	ldr	r1, [pc, #164]	; (7b10 <LORAREG_InitGetAttrFnPtrsEU+0x124>)
    7a6c:	3204      	adds	r2, #4
    7a6e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    7a70:	4928      	ldr	r1, [pc, #160]	; (7b14 <LORAREG_InitGetAttrFnPtrsEU+0x128>)
    7a72:	3204      	adds	r2, #4
    7a74:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    7a76:	4928      	ldr	r1, [pc, #160]	; (7b18 <LORAREG_InitGetAttrFnPtrsEU+0x12c>)
    7a78:	3204      	adds	r2, #4
    7a7a:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    7a7c:	4927      	ldr	r1, [pc, #156]	; (7b1c <LORAREG_InitGetAttrFnPtrsEU+0x130>)
    7a7e:	3204      	adds	r2, #4
    7a80:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    7a82:	4927      	ldr	r1, [pc, #156]	; (7b20 <LORAREG_InitGetAttrFnPtrsEU+0x134>)
    7a84:	3204      	adds	r2, #4
    7a86:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    7a88:	4926      	ldr	r1, [pc, #152]	; (7b24 <LORAREG_InitGetAttrFnPtrsEU+0x138>)
    7a8a:	3204      	adds	r2, #4
    7a8c:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    7a8e:	4926      	ldr	r1, [pc, #152]	; (7b28 <LORAREG_InitGetAttrFnPtrsEU+0x13c>)
    7a90:	320c      	adds	r2, #12
    7a92:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    7a94:	4925      	ldr	r1, [pc, #148]	; (7b2c <LORAREG_InitGetAttrFnPtrsEU+0x140>)
    7a96:	3208      	adds	r2, #8
    7a98:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    7a9a:	4925      	ldr	r1, [pc, #148]	; (7b30 <LORAREG_InitGetAttrFnPtrsEU+0x144>)
    7a9c:	3204      	adds	r2, #4
    7a9e:	5099      	str	r1, [r3, r2]
}
    7aa0:	4770      	bx	lr
    7aa2:	46c0      	nop			; (mov r8, r8)
    7aa4:	20000af8 	.word	0x20000af8
    7aa8:	0000599d 	.word	0x0000599d
    7aac:	00007131 	.word	0x00007131
    7ab0:	00007171 	.word	0x00007171
    7ab4:	000071ad 	.word	0x000071ad
    7ab8:	00004731 	.word	0x00004731
    7abc:	00004741 	.word	0x00004741
    7ac0:	0000475d 	.word	0x0000475d
    7ac4:	0000476d 	.word	0x0000476d
    7ac8:	00005641 	.word	0x00005641
    7acc:	0000477d 	.word	0x0000477d
    7ad0:	0000478d 	.word	0x0000478d
    7ad4:	000058a1 	.word	0x000058a1
    7ad8:	00004a9d 	.word	0x00004a9d
    7adc:	000047dd 	.word	0x000047dd
    7ae0:	00005835 	.word	0x00005835
    7ae4:	000053c9 	.word	0x000053c9
    7ae8:	00004a55 	.word	0x00004a55
    7aec:	000071e5 	.word	0x000071e5
    7af0:	0000721d 	.word	0x0000721d
    7af4:	00007255 	.word	0x00007255
    7af8:	000056a1 	.word	0x000056a1
    7afc:	0000483d 	.word	0x0000483d
    7b00:	00004847 	.word	0x00004847
    7b04:	00004851 	.word	0x00004851
    7b08:	0000485d 	.word	0x0000485d
    7b0c:	00004869 	.word	0x00004869
    7b10:	00004873 	.word	0x00004873
    7b14:	0000487b 	.word	0x0000487b
    7b18:	00004883 	.word	0x00004883
    7b1c:	000072c5 	.word	0x000072c5
    7b20:	00006231 	.word	0x00006231
    7b24:	000048ad 	.word	0x000048ad
    7b28:	00005659 	.word	0x00005659
    7b2c:	0000488d 	.word	0x0000488d
    7b30:	0000489d 	.word	0x0000489d

00007b34 <LORAREG_InitGetAttrFnPtrsAS>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    7b34:	4b2d      	ldr	r3, [pc, #180]	; (7bec <LORAREG_InitGetAttrFnPtrsAS+0xb8>)
    7b36:	4a2e      	ldr	r2, [pc, #184]	; (7bf0 <LORAREG_InitGetAttrFnPtrsAS+0xbc>)
    7b38:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    7b3a:	4a2e      	ldr	r2, [pc, #184]	; (7bf4 <LORAREG_InitGetAttrFnPtrsAS+0xc0>)
    7b3c:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    7b3e:	4a2e      	ldr	r2, [pc, #184]	; (7bf8 <LORAREG_InitGetAttrFnPtrsAS+0xc4>)
    7b40:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    7b42:	4a2e      	ldr	r2, [pc, #184]	; (7bfc <LORAREG_InitGetAttrFnPtrsAS+0xc8>)
    7b44:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    7b46:	4a2e      	ldr	r2, [pc, #184]	; (7c00 <LORAREG_InitGetAttrFnPtrsAS+0xcc>)
    7b48:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    7b4a:	4a2e      	ldr	r2, [pc, #184]	; (7c04 <LORAREG_InitGetAttrFnPtrsAS+0xd0>)
    7b4c:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    7b4e:	4a2e      	ldr	r2, [pc, #184]	; (7c08 <LORAREG_InitGetAttrFnPtrsAS+0xd4>)
    7b50:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    7b52:	4a2e      	ldr	r2, [pc, #184]	; (7c0c <LORAREG_InitGetAttrFnPtrsAS+0xd8>)
    7b54:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    7b56:	4a2e      	ldr	r2, [pc, #184]	; (7c10 <LORAREG_InitGetAttrFnPtrsAS+0xdc>)
    7b58:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    7b5a:	4a2e      	ldr	r2, [pc, #184]	; (7c14 <LORAREG_InitGetAttrFnPtrsAS+0xe0>)
    7b5c:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    7b5e:	4a2e      	ldr	r2, [pc, #184]	; (7c18 <LORAREG_InitGetAttrFnPtrsAS+0xe4>)
    7b60:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    7b62:	4a2e      	ldr	r2, [pc, #184]	; (7c1c <LORAREG_InitGetAttrFnPtrsAS+0xe8>)
    7b64:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    7b66:	4a2e      	ldr	r2, [pc, #184]	; (7c20 <LORAREG_InitGetAttrFnPtrsAS+0xec>)
    7b68:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    7b6a:	4a2e      	ldr	r2, [pc, #184]	; (7c24 <LORAREG_InitGetAttrFnPtrsAS+0xf0>)
    7b6c:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    7b6e:	4a2e      	ldr	r2, [pc, #184]	; (7c28 <LORAREG_InitGetAttrFnPtrsAS+0xf4>)
    7b70:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    7b72:	492e      	ldr	r1, [pc, #184]	; (7c2c <LORAREG_InitGetAttrFnPtrsAS+0xf8>)
    7b74:	2280      	movs	r2, #128	; 0x80
    7b76:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    7b78:	492d      	ldr	r1, [pc, #180]	; (7c30 <LORAREG_InitGetAttrFnPtrsAS+0xfc>)
    7b7a:	320c      	adds	r2, #12
    7b7c:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    7b7e:	492d      	ldr	r1, [pc, #180]	; (7c34 <LORAREG_InitGetAttrFnPtrsAS+0x100>)
    7b80:	3204      	adds	r2, #4
    7b82:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    7b84:	492c      	ldr	r1, [pc, #176]	; (7c38 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    7b86:	3204      	adds	r2, #4
    7b88:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    7b8a:	492c      	ldr	r1, [pc, #176]	; (7c3c <LORAREG_InitGetAttrFnPtrsAS+0x108>)
    7b8c:	3208      	adds	r2, #8
    7b8e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    7b90:	492b      	ldr	r1, [pc, #172]	; (7c40 <LORAREG_InitGetAttrFnPtrsAS+0x10c>)
    7b92:	3204      	adds	r2, #4
    7b94:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    7b96:	492b      	ldr	r1, [pc, #172]	; (7c44 <LORAREG_InitGetAttrFnPtrsAS+0x110>)
    7b98:	3204      	adds	r2, #4
    7b9a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    7b9c:	492a      	ldr	r1, [pc, #168]	; (7c48 <LORAREG_InitGetAttrFnPtrsAS+0x114>)
    7b9e:	3204      	adds	r2, #4
    7ba0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    7ba2:	492a      	ldr	r1, [pc, #168]	; (7c4c <LORAREG_InitGetAttrFnPtrsAS+0x118>)
    7ba4:	3204      	adds	r2, #4
    7ba6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    7ba8:	4929      	ldr	r1, [pc, #164]	; (7c50 <LORAREG_InitGetAttrFnPtrsAS+0x11c>)
    7baa:	3204      	adds	r2, #4
    7bac:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    7bae:	4929      	ldr	r1, [pc, #164]	; (7c54 <LORAREG_InitGetAttrFnPtrsAS+0x120>)
    7bb0:	3204      	adds	r2, #4
    7bb2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    7bb4:	4928      	ldr	r1, [pc, #160]	; (7c58 <LORAREG_InitGetAttrFnPtrsAS+0x124>)
    7bb6:	3204      	adds	r2, #4
    7bb8:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    7bba:	4928      	ldr	r1, [pc, #160]	; (7c5c <LORAREG_InitGetAttrFnPtrsAS+0x128>)
    7bbc:	3204      	adds	r2, #4
    7bbe:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    7bc0:	4927      	ldr	r1, [pc, #156]	; (7c60 <LORAREG_InitGetAttrFnPtrsAS+0x12c>)
    7bc2:	3204      	adds	r2, #4
    7bc4:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    7bc6:	4927      	ldr	r1, [pc, #156]	; (7c64 <LORAREG_InitGetAttrFnPtrsAS+0x130>)
    7bc8:	3204      	adds	r2, #4
    7bca:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    7bcc:	4926      	ldr	r1, [pc, #152]	; (7c68 <LORAREG_InitGetAttrFnPtrsAS+0x134>)
    7bce:	320c      	adds	r2, #12
    7bd0:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    7bd2:	4926      	ldr	r1, [pc, #152]	; (7c6c <LORAREG_InitGetAttrFnPtrsAS+0x138>)
    7bd4:	3208      	adds	r2, #8
    7bd6:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    7bd8:	4925      	ldr	r1, [pc, #148]	; (7c70 <LORAREG_InitGetAttrFnPtrsAS+0x13c>)
    7bda:	3204      	adds	r2, #4
    7bdc:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    7bde:	4a25      	ldr	r2, [pc, #148]	; (7c74 <LORAREG_InitGetAttrFnPtrsAS+0x140>)
    7be0:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    7be2:	4925      	ldr	r1, [pc, #148]	; (7c78 <LORAREG_InitGetAttrFnPtrsAS+0x144>)
    7be4:	2298      	movs	r2, #152	; 0x98
    7be6:	5099      	str	r1, [r3, r2]
}
    7be8:	4770      	bx	lr
    7bea:	46c0      	nop			; (mov r8, r8)
    7bec:	20000af8 	.word	0x20000af8
    7bf0:	00005ad9 	.word	0x00005ad9
    7bf4:	00007131 	.word	0x00007131
    7bf8:	00007171 	.word	0x00007171
    7bfc:	000070cd 	.word	0x000070cd
    7c00:	00004731 	.word	0x00004731
    7c04:	00004741 	.word	0x00004741
    7c08:	0000475d 	.word	0x0000475d
    7c0c:	0000476d 	.word	0x0000476d
    7c10:	00005641 	.word	0x00005641
    7c14:	0000477d 	.word	0x0000477d
    7c18:	0000478d 	.word	0x0000478d
    7c1c:	000058a1 	.word	0x000058a1
    7c20:	00004a9d 	.word	0x00004a9d
    7c24:	000047dd 	.word	0x000047dd
    7c28:	000059e5 	.word	0x000059e5
    7c2c:	000053c9 	.word	0x000053c9
    7c30:	000071e5 	.word	0x000071e5
    7c34:	0000721d 	.word	0x0000721d
    7c38:	00007255 	.word	0x00007255
    7c3c:	0000483d 	.word	0x0000483d
    7c40:	00004847 	.word	0x00004847
    7c44:	00004851 	.word	0x00004851
    7c48:	0000485d 	.word	0x0000485d
    7c4c:	00004869 	.word	0x00004869
    7c50:	00004873 	.word	0x00004873
    7c54:	0000487b 	.word	0x0000487b
    7c58:	00004883 	.word	0x00004883
    7c5c:	000072c5 	.word	0x000072c5
    7c60:	00006231 	.word	0x00006231
    7c64:	000048ad 	.word	0x000048ad
    7c68:	00005659 	.word	0x00005659
    7c6c:	0000488d 	.word	0x0000488d
    7c70:	0000489d 	.word	0x0000489d
    7c74:	00004a55 	.word	0x00004a55
    7c78:	000056a1 	.word	0x000056a1

00007c7c <LORAREG_InitGetAttrFnPtrsAU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    7c7c:	4b2b      	ldr	r3, [pc, #172]	; (7d2c <LORAREG_InitGetAttrFnPtrsAU+0xb0>)
    7c7e:	4a2c      	ldr	r2, [pc, #176]	; (7d30 <LORAREG_InitGetAttrFnPtrsAU+0xb4>)
    7c80:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    7c82:	4a2c      	ldr	r2, [pc, #176]	; (7d34 <LORAREG_InitGetAttrFnPtrsAU+0xb8>)
    7c84:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    7c86:	4a2c      	ldr	r2, [pc, #176]	; (7d38 <LORAREG_InitGetAttrFnPtrsAU+0xbc>)
    7c88:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    7c8a:	4a2c      	ldr	r2, [pc, #176]	; (7d3c <LORAREG_InitGetAttrFnPtrsAU+0xc0>)
    7c8c:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    7c8e:	4a2c      	ldr	r2, [pc, #176]	; (7d40 <LORAREG_InitGetAttrFnPtrsAU+0xc4>)
    7c90:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    7c92:	4a2c      	ldr	r2, [pc, #176]	; (7d44 <LORAREG_InitGetAttrFnPtrsAU+0xc8>)
    7c94:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    7c96:	4a2c      	ldr	r2, [pc, #176]	; (7d48 <LORAREG_InitGetAttrFnPtrsAU+0xcc>)
    7c98:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    7c9a:	4a2c      	ldr	r2, [pc, #176]	; (7d4c <LORAREG_InitGetAttrFnPtrsAU+0xd0>)
    7c9c:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    7c9e:	4a2c      	ldr	r2, [pc, #176]	; (7d50 <LORAREG_InitGetAttrFnPtrsAU+0xd4>)
    7ca0:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    7ca2:	4a2c      	ldr	r2, [pc, #176]	; (7d54 <LORAREG_InitGetAttrFnPtrsAU+0xd8>)
    7ca4:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    7ca6:	4a2c      	ldr	r2, [pc, #176]	; (7d58 <LORAREG_InitGetAttrFnPtrsAU+0xdc>)
    7ca8:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    7caa:	4a2c      	ldr	r2, [pc, #176]	; (7d5c <LORAREG_InitGetAttrFnPtrsAU+0xe0>)
    7cac:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    7cae:	4a2c      	ldr	r2, [pc, #176]	; (7d60 <LORAREG_InitGetAttrFnPtrsAU+0xe4>)
    7cb0:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    7cb2:	4a2c      	ldr	r2, [pc, #176]	; (7d64 <LORAREG_InitGetAttrFnPtrsAU+0xe8>)
    7cb4:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    7cb6:	4a2c      	ldr	r2, [pc, #176]	; (7d68 <LORAREG_InitGetAttrFnPtrsAU+0xec>)
    7cb8:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    7cba:	492c      	ldr	r1, [pc, #176]	; (7d6c <LORAREG_InitGetAttrFnPtrsAU+0xf0>)
    7cbc:	2280      	movs	r2, #128	; 0x80
    7cbe:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    7cc0:	4a2b      	ldr	r2, [pc, #172]	; (7d70 <LORAREG_InitGetAttrFnPtrsAU+0xf4>)
    7cc2:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;	
    7cc4:	4a2b      	ldr	r2, [pc, #172]	; (7d74 <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    7cc6:	67da      	str	r2, [r3, #124]	; 0x7c
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    7cc8:	492b      	ldr	r1, [pc, #172]	; (7d78 <LORAREG_InitGetAttrFnPtrsAU+0xfc>)
    7cca:	228c      	movs	r2, #140	; 0x8c
    7ccc:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    7cce:	492b      	ldr	r1, [pc, #172]	; (7d7c <LORAREG_InitGetAttrFnPtrsAU+0x100>)
    7cd0:	3204      	adds	r2, #4
    7cd2:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    7cd4:	492a      	ldr	r1, [pc, #168]	; (7d80 <LORAREG_InitGetAttrFnPtrsAU+0x104>)
    7cd6:	3204      	adds	r2, #4
    7cd8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    7cda:	492a      	ldr	r1, [pc, #168]	; (7d84 <LORAREG_InitGetAttrFnPtrsAU+0x108>)
    7cdc:	3208      	adds	r2, #8
    7cde:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    7ce0:	4929      	ldr	r1, [pc, #164]	; (7d88 <LORAREG_InitGetAttrFnPtrsAU+0x10c>)
    7ce2:	3204      	adds	r2, #4
    7ce4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    7ce6:	4929      	ldr	r1, [pc, #164]	; (7d8c <LORAREG_InitGetAttrFnPtrsAU+0x110>)
    7ce8:	3204      	adds	r2, #4
    7cea:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    7cec:	4928      	ldr	r1, [pc, #160]	; (7d90 <LORAREG_InitGetAttrFnPtrsAU+0x114>)
    7cee:	3204      	adds	r2, #4
    7cf0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    7cf2:	4928      	ldr	r1, [pc, #160]	; (7d94 <LORAREG_InitGetAttrFnPtrsAU+0x118>)
    7cf4:	3204      	adds	r2, #4
    7cf6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    7cf8:	4927      	ldr	r1, [pc, #156]	; (7d98 <LORAREG_InitGetAttrFnPtrsAU+0x11c>)
    7cfa:	3204      	adds	r2, #4
    7cfc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    7cfe:	4927      	ldr	r1, [pc, #156]	; (7d9c <LORAREG_InitGetAttrFnPtrsAU+0x120>)
    7d00:	3204      	adds	r2, #4
    7d02:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    7d04:	4926      	ldr	r1, [pc, #152]	; (7da0 <LORAREG_InitGetAttrFnPtrsAU+0x124>)
    7d06:	3204      	adds	r2, #4
    7d08:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    7d0a:	4926      	ldr	r1, [pc, #152]	; (7da4 <LORAREG_InitGetAttrFnPtrsAU+0x128>)
    7d0c:	3204      	adds	r2, #4
    7d0e:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    7d10:	4925      	ldr	r1, [pc, #148]	; (7da8 <LORAREG_InitGetAttrFnPtrsAU+0x12c>)
    7d12:	3204      	adds	r2, #4
    7d14:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    7d16:	4925      	ldr	r1, [pc, #148]	; (7dac <LORAREG_InitGetAttrFnPtrsAU+0x130>)
    7d18:	3204      	adds	r2, #4
    7d1a:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    7d1c:	4924      	ldr	r1, [pc, #144]	; (7db0 <LORAREG_InitGetAttrFnPtrsAU+0x134>)
    7d1e:	3214      	adds	r2, #20
    7d20:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    7d22:	4924      	ldr	r1, [pc, #144]	; (7db4 <LORAREG_InitGetAttrFnPtrsAU+0x138>)
    7d24:	3204      	adds	r2, #4
    7d26:	5099      	str	r1, [r3, r2]
}
    7d28:	4770      	bx	lr
    7d2a:	46c0      	nop			; (mov r8, r8)
    7d2c:	20000af8 	.word	0x20000af8
    7d30:	000048e9 	.word	0x000048e9
    7d34:	00007491 	.word	0x00007491
    7d38:	000074e1 	.word	0x000074e1
    7d3c:	0000752d 	.word	0x0000752d
    7d40:	00004731 	.word	0x00004731
    7d44:	00004741 	.word	0x00004741
    7d48:	0000475d 	.word	0x0000475d
    7d4c:	0000476d 	.word	0x0000476d
    7d50:	00005641 	.word	0x00005641
    7d54:	0000477d 	.word	0x0000477d
    7d58:	0000478d 	.word	0x0000478d
    7d5c:	00005515 	.word	0x00005515
    7d60:	00004a9d 	.word	0x00004a9d
    7d64:	000047dd 	.word	0x000047dd
    7d68:	00005469 	.word	0x00005469
    7d6c:	000053c9 	.word	0x000053c9
    7d70:	00004829 	.word	0x00004829
    7d74:	00004833 	.word	0x00004833
    7d78:	00007579 	.word	0x00007579
    7d7c:	000075c5 	.word	0x000075c5
    7d80:	00007611 	.word	0x00007611
    7d84:	0000483d 	.word	0x0000483d
    7d88:	00004847 	.word	0x00004847
    7d8c:	00004851 	.word	0x00004851
    7d90:	0000485d 	.word	0x0000485d
    7d94:	00004869 	.word	0x00004869
    7d98:	00004873 	.word	0x00004873
    7d9c:	0000487b 	.word	0x0000487b
    7da0:	00004883 	.word	0x00004883
    7da4:	000076f9 	.word	0x000076f9
    7da8:	00005015 	.word	0x00005015
    7dac:	000048ad 	.word	0x000048ad
    7db0:	0000488d 	.word	0x0000488d
    7db4:	0000489d 	.word	0x0000489d

00007db8 <LORAREG_InitGetAttrFnPtrsIN>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    7db8:	4b2a      	ldr	r3, [pc, #168]	; (7e64 <LORAREG_InitGetAttrFnPtrsIN+0xac>)
    7dba:	4a2b      	ldr	r2, [pc, #172]	; (7e68 <LORAREG_InitGetAttrFnPtrsIN+0xb0>)
    7dbc:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    7dbe:	4a2b      	ldr	r2, [pc, #172]	; (7e6c <LORAREG_InitGetAttrFnPtrsIN+0xb4>)
    7dc0:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    7dc2:	4a2b      	ldr	r2, [pc, #172]	; (7e70 <LORAREG_InitGetAttrFnPtrsIN+0xb8>)
    7dc4:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    7dc6:	4a2b      	ldr	r2, [pc, #172]	; (7e74 <LORAREG_InitGetAttrFnPtrsIN+0xbc>)
    7dc8:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    7dca:	4a2b      	ldr	r2, [pc, #172]	; (7e78 <LORAREG_InitGetAttrFnPtrsIN+0xc0>)
    7dcc:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    7dce:	4a2b      	ldr	r2, [pc, #172]	; (7e7c <LORAREG_InitGetAttrFnPtrsIN+0xc4>)
    7dd0:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    7dd2:	4a2b      	ldr	r2, [pc, #172]	; (7e80 <LORAREG_InitGetAttrFnPtrsIN+0xc8>)
    7dd4:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    7dd6:	4a2b      	ldr	r2, [pc, #172]	; (7e84 <LORAREG_InitGetAttrFnPtrsIN+0xcc>)
    7dd8:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    7dda:	4a2b      	ldr	r2, [pc, #172]	; (7e88 <LORAREG_InitGetAttrFnPtrsIN+0xd0>)
    7ddc:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    7dde:	4a2b      	ldr	r2, [pc, #172]	; (7e8c <LORAREG_InitGetAttrFnPtrsIN+0xd4>)
    7de0:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    7de2:	4a2b      	ldr	r2, [pc, #172]	; (7e90 <LORAREG_InitGetAttrFnPtrsIN+0xd8>)
    7de4:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    7de6:	4a2b      	ldr	r2, [pc, #172]	; (7e94 <LORAREG_InitGetAttrFnPtrsIN+0xdc>)
    7de8:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    7dea:	4a2b      	ldr	r2, [pc, #172]	; (7e98 <LORAREG_InitGetAttrFnPtrsIN+0xe0>)
    7dec:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    7dee:	4a2b      	ldr	r2, [pc, #172]	; (7e9c <LORAREG_InitGetAttrFnPtrsIN+0xe4>)
    7df0:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType3;
    7df2:	4a2b      	ldr	r2, [pc, #172]	; (7ea0 <LORAREG_InitGetAttrFnPtrsIN+0xe8>)
    7df4:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    7df6:	492b      	ldr	r1, [pc, #172]	; (7ea4 <LORAREG_InitGetAttrFnPtrsIN+0xec>)
    7df8:	2280      	movs	r2, #128	; 0x80
    7dfa:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    7dfc:	492a      	ldr	r1, [pc, #168]	; (7ea8 <LORAREG_InitGetAttrFnPtrsIN+0xf0>)
    7dfe:	320c      	adds	r2, #12
    7e00:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    7e02:	492a      	ldr	r1, [pc, #168]	; (7eac <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    7e04:	3204      	adds	r2, #4
    7e06:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    7e08:	4929      	ldr	r1, [pc, #164]	; (7eb0 <LORAREG_InitGetAttrFnPtrsIN+0xf8>)
    7e0a:	3204      	adds	r2, #4
    7e0c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    7e0e:	4929      	ldr	r1, [pc, #164]	; (7eb4 <LORAREG_InitGetAttrFnPtrsIN+0xfc>)
    7e10:	3208      	adds	r2, #8
    7e12:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    7e14:	4928      	ldr	r1, [pc, #160]	; (7eb8 <LORAREG_InitGetAttrFnPtrsIN+0x100>)
    7e16:	3204      	adds	r2, #4
    7e18:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    7e1a:	4928      	ldr	r1, [pc, #160]	; (7ebc <LORAREG_InitGetAttrFnPtrsIN+0x104>)
    7e1c:	3204      	adds	r2, #4
    7e1e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    7e20:	4927      	ldr	r1, [pc, #156]	; (7ec0 <LORAREG_InitGetAttrFnPtrsIN+0x108>)
    7e22:	3204      	adds	r2, #4
    7e24:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    7e26:	4927      	ldr	r1, [pc, #156]	; (7ec4 <LORAREG_InitGetAttrFnPtrsIN+0x10c>)
    7e28:	3204      	adds	r2, #4
    7e2a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    7e2c:	4926      	ldr	r1, [pc, #152]	; (7ec8 <LORAREG_InitGetAttrFnPtrsIN+0x110>)
    7e2e:	3204      	adds	r2, #4
    7e30:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    7e32:	4926      	ldr	r1, [pc, #152]	; (7ecc <LORAREG_InitGetAttrFnPtrsIN+0x114>)
    7e34:	3204      	adds	r2, #4
    7e36:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    7e38:	4925      	ldr	r1, [pc, #148]	; (7ed0 <LORAREG_InitGetAttrFnPtrsIN+0x118>)
    7e3a:	3204      	adds	r2, #4
    7e3c:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    7e3e:	4925      	ldr	r1, [pc, #148]	; (7ed4 <LORAREG_InitGetAttrFnPtrsIN+0x11c>)
    7e40:	3204      	adds	r2, #4
    7e42:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    7e44:	4924      	ldr	r1, [pc, #144]	; (7ed8 <LORAREG_InitGetAttrFnPtrsIN+0x120>)
    7e46:	3204      	adds	r2, #4
    7e48:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    7e4a:	4924      	ldr	r1, [pc, #144]	; (7edc <LORAREG_InitGetAttrFnPtrsIN+0x124>)
    7e4c:	3204      	adds	r2, #4
    7e4e:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    7e50:	4923      	ldr	r1, [pc, #140]	; (7ee0 <LORAREG_InitGetAttrFnPtrsIN+0x128>)
    7e52:	320c      	adds	r2, #12
    7e54:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    7e56:	4923      	ldr	r1, [pc, #140]	; (7ee4 <LORAREG_InitGetAttrFnPtrsIN+0x12c>)
    7e58:	3208      	adds	r2, #8
    7e5a:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    7e5c:	4922      	ldr	r1, [pc, #136]	; (7ee8 <LORAREG_InitGetAttrFnPtrsIN+0x130>)
    7e5e:	3204      	adds	r2, #4
    7e60:	5099      	str	r1, [r3, r2]
}
    7e62:	4770      	bx	lr
    7e64:	20000af8 	.word	0x20000af8
    7e68:	0000599d 	.word	0x0000599d
    7e6c:	00007131 	.word	0x00007131
    7e70:	00007171 	.word	0x00007171
    7e74:	000071ad 	.word	0x000071ad
    7e78:	00004731 	.word	0x00004731
    7e7c:	00004741 	.word	0x00004741
    7e80:	0000475d 	.word	0x0000475d
    7e84:	0000476d 	.word	0x0000476d
    7e88:	00005641 	.word	0x00005641
    7e8c:	0000477d 	.word	0x0000477d
    7e90:	0000478d 	.word	0x0000478d
    7e94:	000058a1 	.word	0x000058a1
    7e98:	00004a9d 	.word	0x00004a9d
    7e9c:	000047dd 	.word	0x000047dd
    7ea0:	00005b21 	.word	0x00005b21
    7ea4:	000053c9 	.word	0x000053c9
    7ea8:	000071e5 	.word	0x000071e5
    7eac:	0000721d 	.word	0x0000721d
    7eb0:	00007255 	.word	0x00007255
    7eb4:	0000483d 	.word	0x0000483d
    7eb8:	00004847 	.word	0x00004847
    7ebc:	00004851 	.word	0x00004851
    7ec0:	0000485d 	.word	0x0000485d
    7ec4:	00004869 	.word	0x00004869
    7ec8:	00004873 	.word	0x00004873
    7ecc:	0000487b 	.word	0x0000487b
    7ed0:	00004883 	.word	0x00004883
    7ed4:	000072c5 	.word	0x000072c5
    7ed8:	00006231 	.word	0x00006231
    7edc:	000048ad 	.word	0x000048ad
    7ee0:	00005659 	.word	0x00005659
    7ee4:	0000488d 	.word	0x0000488d
    7ee8:	0000489d 	.word	0x0000489d

00007eec <LORAREG_InitGetAttrFnPtrsJP>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    7eec:	4b30      	ldr	r3, [pc, #192]	; (7fb0 <LORAREG_InitGetAttrFnPtrsJP+0xc4>)
    7eee:	4a31      	ldr	r2, [pc, #196]	; (7fb4 <LORAREG_InitGetAttrFnPtrsJP+0xc8>)
    7ef0:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    7ef2:	4a31      	ldr	r2, [pc, #196]	; (7fb8 <LORAREG_InitGetAttrFnPtrsJP+0xcc>)
    7ef4:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    7ef6:	4a31      	ldr	r2, [pc, #196]	; (7fbc <LORAREG_InitGetAttrFnPtrsJP+0xd0>)
    7ef8:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    7efa:	4a31      	ldr	r2, [pc, #196]	; (7fc0 <LORAREG_InitGetAttrFnPtrsJP+0xd4>)
    7efc:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    7efe:	4a31      	ldr	r2, [pc, #196]	; (7fc4 <LORAREG_InitGetAttrFnPtrsJP+0xd8>)
    7f00:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    7f02:	4a31      	ldr	r2, [pc, #196]	; (7fc8 <LORAREG_InitGetAttrFnPtrsJP+0xdc>)
    7f04:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    7f06:	4a31      	ldr	r2, [pc, #196]	; (7fcc <LORAREG_InitGetAttrFnPtrsJP+0xe0>)
    7f08:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    7f0a:	4a31      	ldr	r2, [pc, #196]	; (7fd0 <LORAREG_InitGetAttrFnPtrsJP+0xe4>)
    7f0c:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    7f0e:	4a31      	ldr	r2, [pc, #196]	; (7fd4 <LORAREG_InitGetAttrFnPtrsJP+0xe8>)
    7f10:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    7f12:	4a31      	ldr	r2, [pc, #196]	; (7fd8 <LORAREG_InitGetAttrFnPtrsJP+0xec>)
    7f14:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    7f16:	4a31      	ldr	r2, [pc, #196]	; (7fdc <LORAREG_InitGetAttrFnPtrsJP+0xf0>)
    7f18:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    7f1a:	4a31      	ldr	r2, [pc, #196]	; (7fe0 <LORAREG_InitGetAttrFnPtrsJP+0xf4>)
    7f1c:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    7f1e:	4a31      	ldr	r2, [pc, #196]	; (7fe4 <LORAREG_InitGetAttrFnPtrsJP+0xf8>)
    7f20:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    7f22:	4a31      	ldr	r2, [pc, #196]	; (7fe8 <LORAREG_InitGetAttrFnPtrsJP+0xfc>)
    7f24:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    7f26:	4a31      	ldr	r2, [pc, #196]	; (7fec <LORAREG_InitGetAttrFnPtrsJP+0x100>)
    7f28:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    7f2a:	4931      	ldr	r1, [pc, #196]	; (7ff0 <LORAREG_InitGetAttrFnPtrsJP+0x104>)
    7f2c:	2280      	movs	r2, #128	; 0x80
    7f2e:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    7f30:	4930      	ldr	r1, [pc, #192]	; (7ff4 <LORAREG_InitGetAttrFnPtrsJP+0x108>)
    7f32:	320c      	adds	r2, #12
    7f34:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    7f36:	4930      	ldr	r1, [pc, #192]	; (7ff8 <LORAREG_InitGetAttrFnPtrsJP+0x10c>)
    7f38:	3204      	adds	r2, #4
    7f3a:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    7f3c:	492f      	ldr	r1, [pc, #188]	; (7ffc <LORAREG_InitGetAttrFnPtrsJP+0x110>)
    7f3e:	3204      	adds	r2, #4
    7f40:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    7f42:	492f      	ldr	r1, [pc, #188]	; (8000 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    7f44:	3208      	adds	r2, #8
    7f46:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    7f48:	492e      	ldr	r1, [pc, #184]	; (8004 <LORAREG_InitGetAttrFnPtrsJP+0x118>)
    7f4a:	3204      	adds	r2, #4
    7f4c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    7f4e:	492e      	ldr	r1, [pc, #184]	; (8008 <LORAREG_InitGetAttrFnPtrsJP+0x11c>)
    7f50:	3204      	adds	r2, #4
    7f52:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    7f54:	492d      	ldr	r1, [pc, #180]	; (800c <LORAREG_InitGetAttrFnPtrsJP+0x120>)
    7f56:	3204      	adds	r2, #4
    7f58:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    7f5a:	492d      	ldr	r1, [pc, #180]	; (8010 <LORAREG_InitGetAttrFnPtrsJP+0x124>)
    7f5c:	3204      	adds	r2, #4
    7f5e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    7f60:	492c      	ldr	r1, [pc, #176]	; (8014 <LORAREG_InitGetAttrFnPtrsJP+0x128>)
    7f62:	3204      	adds	r2, #4
    7f64:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    7f66:	492c      	ldr	r1, [pc, #176]	; (8018 <LORAREG_InitGetAttrFnPtrsJP+0x12c>)
    7f68:	3204      	adds	r2, #4
    7f6a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    7f6c:	492b      	ldr	r1, [pc, #172]	; (801c <LORAREG_InitGetAttrFnPtrsJP+0x130>)
    7f6e:	3204      	adds	r2, #4
    7f70:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    7f72:	492b      	ldr	r1, [pc, #172]	; (8020 <LORAREG_InitGetAttrFnPtrsJP+0x134>)
    7f74:	3204      	adds	r2, #4
    7f76:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    7f78:	492a      	ldr	r1, [pc, #168]	; (8024 <LORAREG_InitGetAttrFnPtrsJP+0x138>)
    7f7a:	3204      	adds	r2, #4
    7f7c:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    7f7e:	492a      	ldr	r1, [pc, #168]	; (8028 <LORAREG_InitGetAttrFnPtrsJP+0x13c>)
    7f80:	3204      	adds	r2, #4
    7f82:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    7f84:	4929      	ldr	r1, [pc, #164]	; (802c <LORAREG_InitGetAttrFnPtrsJP+0x140>)
    7f86:	3204      	adds	r2, #4
    7f88:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    7f8a:	4929      	ldr	r1, [pc, #164]	; (8030 <LORAREG_InitGetAttrFnPtrsJP+0x144>)
    7f8c:	3204      	adds	r2, #4
    7f8e:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    7f90:	4928      	ldr	r1, [pc, #160]	; (8034 <LORAREG_InitGetAttrFnPtrsJP+0x148>)
    7f92:	3204      	adds	r2, #4
    7f94:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    7f96:	4928      	ldr	r1, [pc, #160]	; (8038 <LORAREG_InitGetAttrFnPtrsJP+0x14c>)
    7f98:	3208      	adds	r2, #8
    7f9a:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    7f9c:	4927      	ldr	r1, [pc, #156]	; (803c <LORAREG_InitGetAttrFnPtrsJP+0x150>)
    7f9e:	3204      	adds	r2, #4
    7fa0:	5099      	str	r1, [r3, r2]
	pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    7fa2:	4a27      	ldr	r2, [pc, #156]	; (8040 <LORAREG_InitGetAttrFnPtrsJP+0x154>)
    7fa4:	679a      	str	r2, [r3, #120]	; 0x78
	pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    7fa6:	4927      	ldr	r1, [pc, #156]	; (8044 <LORAREG_InitGetAttrFnPtrsJP+0x158>)
    7fa8:	2298      	movs	r2, #152	; 0x98
    7faa:	5099      	str	r1, [r3, r2]
}
    7fac:	4770      	bx	lr
    7fae:	46c0      	nop			; (mov r8, r8)
    7fb0:	20000af8 	.word	0x20000af8
    7fb4:	00005ad9 	.word	0x00005ad9
    7fb8:	00007131 	.word	0x00007131
    7fbc:	00007171 	.word	0x00007171
    7fc0:	000070cd 	.word	0x000070cd
    7fc4:	00004731 	.word	0x00004731
    7fc8:	00004741 	.word	0x00004741
    7fcc:	0000475d 	.word	0x0000475d
    7fd0:	0000476d 	.word	0x0000476d
    7fd4:	00005641 	.word	0x00005641
    7fd8:	0000477d 	.word	0x0000477d
    7fdc:	0000478d 	.word	0x0000478d
    7fe0:	000058a1 	.word	0x000058a1
    7fe4:	00004a9d 	.word	0x00004a9d
    7fe8:	000047dd 	.word	0x000047dd
    7fec:	000059e5 	.word	0x000059e5
    7ff0:	000053c9 	.word	0x000053c9
    7ff4:	000071e5 	.word	0x000071e5
    7ff8:	0000721d 	.word	0x0000721d
    7ffc:	00007255 	.word	0x00007255
    8000:	0000483d 	.word	0x0000483d
    8004:	00004847 	.word	0x00004847
    8008:	00004851 	.word	0x00004851
    800c:	0000485d 	.word	0x0000485d
    8010:	00004869 	.word	0x00004869
    8014:	00004873 	.word	0x00004873
    8018:	0000487b 	.word	0x0000487b
    801c:	00004883 	.word	0x00004883
    8020:	000072c5 	.word	0x000072c5
    8024:	00006231 	.word	0x00006231
    8028:	000048ad 	.word	0x000048ad
    802c:	000048bd 	.word	0x000048bd
    8030:	00005ba9 	.word	0x00005ba9
    8034:	00005659 	.word	0x00005659
    8038:	0000488d 	.word	0x0000488d
    803c:	0000489d 	.word	0x0000489d
    8040:	00004a55 	.word	0x00004a55
    8044:	000056a1 	.word	0x000056a1

00008048 <LORAREG_InitGetAttrFnPtrsKR>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    8048:	4b2d      	ldr	r3, [pc, #180]	; (8100 <LORAREG_InitGetAttrFnPtrsKR+0xb8>)
    804a:	4a2e      	ldr	r2, [pc, #184]	; (8104 <LORAREG_InitGetAttrFnPtrsKR+0xbc>)
    804c:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    804e:	4a2e      	ldr	r2, [pc, #184]	; (8108 <LORAREG_InitGetAttrFnPtrsKR+0xc0>)
    8050:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    8052:	4a2e      	ldr	r2, [pc, #184]	; (810c <LORAREG_InitGetAttrFnPtrsKR+0xc4>)
    8054:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    8056:	4a2e      	ldr	r2, [pc, #184]	; (8110 <LORAREG_InitGetAttrFnPtrsKR+0xc8>)
    8058:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    805a:	4a2e      	ldr	r2, [pc, #184]	; (8114 <LORAREG_InitGetAttrFnPtrsKR+0xcc>)
    805c:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    805e:	4a2e      	ldr	r2, [pc, #184]	; (8118 <LORAREG_InitGetAttrFnPtrsKR+0xd0>)
    8060:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    8062:	4a2e      	ldr	r2, [pc, #184]	; (811c <LORAREG_InitGetAttrFnPtrsKR+0xd4>)
    8064:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    8066:	4a2e      	ldr	r2, [pc, #184]	; (8120 <LORAREG_InitGetAttrFnPtrsKR+0xd8>)
    8068:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    806a:	4a2e      	ldr	r2, [pc, #184]	; (8124 <LORAREG_InitGetAttrFnPtrsKR+0xdc>)
    806c:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    806e:	4a2e      	ldr	r2, [pc, #184]	; (8128 <LORAREG_InitGetAttrFnPtrsKR+0xe0>)
    8070:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    8072:	4a2e      	ldr	r2, [pc, #184]	; (812c <LORAREG_InitGetAttrFnPtrsKR+0xe4>)
    8074:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    8076:	4a2e      	ldr	r2, [pc, #184]	; (8130 <LORAREG_InitGetAttrFnPtrsKR+0xe8>)
    8078:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    807a:	4a2e      	ldr	r2, [pc, #184]	; (8134 <LORAREG_InitGetAttrFnPtrsKR+0xec>)
    807c:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    807e:	4a2e      	ldr	r2, [pc, #184]	; (8138 <LORAREG_InitGetAttrFnPtrsKR+0xf0>)
    8080:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    8082:	4a2e      	ldr	r2, [pc, #184]	; (813c <LORAREG_InitGetAttrFnPtrsKR+0xf4>)
    8084:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]=LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    8086:	492e      	ldr	r1, [pc, #184]	; (8140 <LORAREG_InitGetAttrFnPtrsKR+0xf8>)
    8088:	2280      	movs	r2, #128	; 0x80
    808a:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    808c:	492d      	ldr	r1, [pc, #180]	; (8144 <LORAREG_InitGetAttrFnPtrsKR+0xfc>)
    808e:	320c      	adds	r2, #12
    8090:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    8092:	492d      	ldr	r1, [pc, #180]	; (8148 <LORAREG_InitGetAttrFnPtrsKR+0x100>)
    8094:	3204      	adds	r2, #4
    8096:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    8098:	492c      	ldr	r1, [pc, #176]	; (814c <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    809a:	3204      	adds	r2, #4
    809c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    809e:	492c      	ldr	r1, [pc, #176]	; (8150 <LORAREG_InitGetAttrFnPtrsKR+0x108>)
    80a0:	3208      	adds	r2, #8
    80a2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    80a4:	492b      	ldr	r1, [pc, #172]	; (8154 <LORAREG_InitGetAttrFnPtrsKR+0x10c>)
    80a6:	3204      	adds	r2, #4
    80a8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    80aa:	492b      	ldr	r1, [pc, #172]	; (8158 <LORAREG_InitGetAttrFnPtrsKR+0x110>)
    80ac:	3204      	adds	r2, #4
    80ae:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    80b0:	492a      	ldr	r1, [pc, #168]	; (815c <LORAREG_InitGetAttrFnPtrsKR+0x114>)
    80b2:	3204      	adds	r2, #4
    80b4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    80b6:	492a      	ldr	r1, [pc, #168]	; (8160 <LORAREG_InitGetAttrFnPtrsKR+0x118>)
    80b8:	3204      	adds	r2, #4
    80ba:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    80bc:	4929      	ldr	r1, [pc, #164]	; (8164 <LORAREG_InitGetAttrFnPtrsKR+0x11c>)
    80be:	3204      	adds	r2, #4
    80c0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    80c2:	4929      	ldr	r1, [pc, #164]	; (8168 <LORAREG_InitGetAttrFnPtrsKR+0x120>)
    80c4:	3204      	adds	r2, #4
    80c6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    80c8:	4928      	ldr	r1, [pc, #160]	; (816c <LORAREG_InitGetAttrFnPtrsKR+0x124>)
    80ca:	3204      	adds	r2, #4
    80cc:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    80ce:	4928      	ldr	r1, [pc, #160]	; (8170 <LORAREG_InitGetAttrFnPtrsKR+0x128>)
    80d0:	3204      	adds	r2, #4
    80d2:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    80d4:	4927      	ldr	r1, [pc, #156]	; (8174 <LORAREG_InitGetAttrFnPtrsKR+0x12c>)
    80d6:	3204      	adds	r2, #4
    80d8:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    80da:	4927      	ldr	r1, [pc, #156]	; (8178 <LORAREG_InitGetAttrFnPtrsKR+0x130>)
    80dc:	3204      	adds	r2, #4
    80de:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    80e0:	4926      	ldr	r1, [pc, #152]	; (817c <LORAREG_InitGetAttrFnPtrsKR+0x134>)
    80e2:	3204      	adds	r2, #4
    80e4:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    80e6:	4926      	ldr	r1, [pc, #152]	; (8180 <LORAREG_InitGetAttrFnPtrsKR+0x138>)
    80e8:	3204      	adds	r2, #4
    80ea:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    80ec:	4925      	ldr	r1, [pc, #148]	; (8184 <LORAREG_InitGetAttrFnPtrsKR+0x13c>)
    80ee:	3204      	adds	r2, #4
    80f0:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    80f2:	4925      	ldr	r1, [pc, #148]	; (8188 <LORAREG_InitGetAttrFnPtrsKR+0x140>)
    80f4:	3208      	adds	r2, #8
    80f6:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    80f8:	4924      	ldr	r1, [pc, #144]	; (818c <LORAREG_InitGetAttrFnPtrsKR+0x144>)
    80fa:	3204      	adds	r2, #4
    80fc:	5099      	str	r1, [r3, r2]
}
    80fe:	4770      	bx	lr
    8100:	20000af8 	.word	0x20000af8
    8104:	0000599d 	.word	0x0000599d
    8108:	00007131 	.word	0x00007131
    810c:	00007171 	.word	0x00007171
    8110:	000071ad 	.word	0x000071ad
    8114:	00004731 	.word	0x00004731
    8118:	00004741 	.word	0x00004741
    811c:	0000475d 	.word	0x0000475d
    8120:	0000476d 	.word	0x0000476d
    8124:	00005641 	.word	0x00005641
    8128:	0000477d 	.word	0x0000477d
    812c:	0000478d 	.word	0x0000478d
    8130:	000058a1 	.word	0x000058a1
    8134:	00004a9d 	.word	0x00004a9d
    8138:	000047dd 	.word	0x000047dd
    813c:	00005835 	.word	0x00005835
    8140:	000053c9 	.word	0x000053c9
    8144:	000071e5 	.word	0x000071e5
    8148:	0000721d 	.word	0x0000721d
    814c:	00007255 	.word	0x00007255
    8150:	0000483d 	.word	0x0000483d
    8154:	00004847 	.word	0x00004847
    8158:	00004851 	.word	0x00004851
    815c:	0000485d 	.word	0x0000485d
    8160:	00004869 	.word	0x00004869
    8164:	00004873 	.word	0x00004873
    8168:	0000487b 	.word	0x0000487b
    816c:	00004883 	.word	0x00004883
    8170:	000072c5 	.word	0x000072c5
    8174:	00006231 	.word	0x00006231
    8178:	000048ad 	.word	0x000048ad
    817c:	000048bd 	.word	0x000048bd
    8180:	00005ba9 	.word	0x00005ba9
    8184:	00005659 	.word	0x00005659
    8188:	0000488d 	.word	0x0000488d
    818c:	0000489d 	.word	0x0000489d

00008190 <LORAREG_InitValidateAttrFnPtrsNA>:
    pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    8190:	4b0d      	ldr	r3, [pc, #52]	; (81c8 <LORAREG_InitValidateAttrFnPtrsNA+0x38>)
    8192:	4a0e      	ldr	r2, [pc, #56]	; (81cc <LORAREG_InitValidateAttrFnPtrsNA+0x3c>)
    8194:	605a      	str	r2, [r3, #4]
    pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    8196:	4a0e      	ldr	r2, [pc, #56]	; (81d0 <LORAREG_InitValidateAttrFnPtrsNA+0x40>)
    8198:	609a      	str	r2, [r3, #8]
    pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    819a:	4a0e      	ldr	r2, [pc, #56]	; (81d4 <LORAREG_InitValidateAttrFnPtrsNA+0x44>)
    819c:	63da      	str	r2, [r3, #60]	; 0x3c
    pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    819e:	490e      	ldr	r1, [pc, #56]	; (81d8 <LORAREG_InitValidateAttrFnPtrsNA+0x48>)
    81a0:	6419      	str	r1, [r3, #64]	; 0x40
    pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    81a2:	490e      	ldr	r1, [pc, #56]	; (81dc <LORAREG_InitValidateAttrFnPtrsNA+0x4c>)
    81a4:	6459      	str	r1, [r3, #68]	; 0x44
    pValidateAttr[DATA_RANGE] = ValidateDataRange;
    81a6:	490e      	ldr	r1, [pc, #56]	; (81e0 <LORAREG_InitValidateAttrFnPtrsNA+0x50>)
    81a8:	6499      	str	r1, [r3, #72]	; 0x48
    pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    81aa:	490e      	ldr	r1, [pc, #56]	; (81e4 <LORAREG_InitValidateAttrFnPtrsNA+0x54>)
    81ac:	6559      	str	r1, [r3, #84]	; 0x54
    pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    81ae:	65da      	str	r2, [r3, #92]	; 0x5c
    pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    81b0:	4a0d      	ldr	r2, [pc, #52]	; (81e8 <LORAREG_InitValidateAttrFnPtrsNA+0x58>)
    81b2:	661a      	str	r2, [r3, #96]	; 0x60
    pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    81b4:	4a0d      	ldr	r2, [pc, #52]	; (81ec <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    81b6:	669a      	str	r2, [r3, #104]	; 0x68
    pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    81b8:	4a0d      	ldr	r2, [pc, #52]	; (81f0 <LORAREG_InitValidateAttrFnPtrsNA+0x60>)
    81ba:	66da      	str	r2, [r3, #108]	; 0x6c
    pValidateAttr[TX_PWR] = ValidateTxPower;
    81bc:	4a0d      	ldr	r2, [pc, #52]	; (81f4 <LORAREG_InitValidateAttrFnPtrsNA+0x64>)
    81be:	675a      	str	r2, [r3, #116]	; 0x74
    pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    81c0:	490d      	ldr	r1, [pc, #52]	; (81f8 <LORAREG_InitValidateAttrFnPtrsNA+0x68>)
    81c2:	22e0      	movs	r2, #224	; 0xe0
    81c4:	5099      	str	r1, [r3, r2]
}
    81c6:	4770      	bx	lr
    81c8:	20000ce0 	.word	0x20000ce0
    81cc:	00004c75 	.word	0x00004c75
    81d0:	0000765d 	.word	0x0000765d
    81d4:	000049c1 	.word	0x000049c1
    81d8:	0000497d 	.word	0x0000497d
    81dc:	00004c19 	.word	0x00004c19
    81e0:	000073b9 	.word	0x000073b9
    81e4:	00004a11 	.word	0x00004a11
    81e8:	00004ca9 	.word	0x00004ca9
    81ec:	00004b41 	.word	0x00004b41
    81f0:	00004b15 	.word	0x00004b15
    81f4:	00004b29 	.word	0x00004b29
    81f8:	0000728d 	.word	0x0000728d

000081fc <LORAREG_InitValidateAttrFnPtrsEU>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreq;
    81fc:	4b0d      	ldr	r3, [pc, #52]	; (8234 <LORAREG_InitValidateAttrFnPtrsEU+0x38>)
    81fe:	4a0e      	ldr	r2, [pc, #56]	; (8238 <LORAREG_InitValidateAttrFnPtrsEU+0x3c>)
    8200:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    8202:	4a0e      	ldr	r2, [pc, #56]	; (823c <LORAREG_InitValidateAttrFnPtrsEU+0x40>)
    8204:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    8206:	4a0e      	ldr	r2, [pc, #56]	; (8240 <LORAREG_InitValidateAttrFnPtrsEU+0x44>)
    8208:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    820a:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    820c:	490d      	ldr	r1, [pc, #52]	; (8244 <LORAREG_InitValidateAttrFnPtrsEU+0x48>)
    820e:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    8210:	490d      	ldr	r1, [pc, #52]	; (8248 <LORAREG_InitValidateAttrFnPtrsEU+0x4c>)
    8212:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    8214:	490d      	ldr	r1, [pc, #52]	; (824c <LORAREG_InitValidateAttrFnPtrsEU+0x50>)
    8216:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    8218:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    821a:	4a0d      	ldr	r2, [pc, #52]	; (8250 <LORAREG_InitValidateAttrFnPtrsEU+0x54>)
    821c:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    821e:	4a0d      	ldr	r2, [pc, #52]	; (8254 <LORAREG_InitValidateAttrFnPtrsEU+0x58>)
    8220:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    8222:	4a0d      	ldr	r2, [pc, #52]	; (8258 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    8224:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    8226:	4a0d      	ldr	r2, [pc, #52]	; (825c <LORAREG_InitValidateAttrFnPtrsEU+0x60>)
    8228:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    822a:	490d      	ldr	r1, [pc, #52]	; (8260 <LORAREG_InitValidateAttrFnPtrsEU+0x64>)
    822c:	22e0      	movs	r2, #224	; 0xe0
    822e:	5099      	str	r1, [r3, r2]
}
    8230:	4770      	bx	lr
    8232:	46c0      	nop			; (mov r8, r8)
    8234:	20000ce0 	.word	0x20000ce0
    8238:	00004d31 	.word	0x00004d31
    823c:	00005c79 	.word	0x00005c79
    8240:	00004c01 	.word	0x00004c01
    8244:	00004c19 	.word	0x00004c19
    8248:	00006fdd 	.word	0x00006fdd
    824c:	00004a29 	.word	0x00004a29
    8250:	00004ca9 	.word	0x00004ca9
    8254:	00004b45 	.word	0x00004b45
    8258:	00004b99 	.word	0x00004b99
    825c:	00004b29 	.word	0x00004b29
    8260:	00004bad 	.word	0x00004bad

00008264 <LORAREG_InitValidateAttrFnPtrsAS>:
	pValidateAttr[RX_FREQUENCY] = ValidateFrequencyAS;
    8264:	4b0d      	ldr	r3, [pc, #52]	; (829c <LORAREG_InitValidateAttrFnPtrsAS+0x38>)
    8266:	4a0e      	ldr	r2, [pc, #56]	; (82a0 <LORAREG_InitValidateAttrFnPtrsAS+0x3c>)
    8268:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    826a:	4a0e      	ldr	r2, [pc, #56]	; (82a4 <LORAREG_InitValidateAttrFnPtrsAS+0x40>)
    826c:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    826e:	4a0e      	ldr	r2, [pc, #56]	; (82a8 <LORAREG_InitValidateAttrFnPtrsAS+0x44>)
    8270:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    8272:	490e      	ldr	r1, [pc, #56]	; (82ac <LORAREG_InitValidateAttrFnPtrsAS+0x48>)
    8274:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    8276:	490e      	ldr	r1, [pc, #56]	; (82b0 <LORAREG_InitValidateAttrFnPtrsAS+0x4c>)
    8278:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    827a:	490e      	ldr	r1, [pc, #56]	; (82b4 <LORAREG_InitValidateAttrFnPtrsAS+0x50>)
    827c:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    827e:	490e      	ldr	r1, [pc, #56]	; (82b8 <LORAREG_InitValidateAttrFnPtrsAS+0x54>)
    8280:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    8282:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    8284:	4a0d      	ldr	r2, [pc, #52]	; (82bc <LORAREG_InitValidateAttrFnPtrsAS+0x58>)
    8286:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    8288:	4a0d      	ldr	r2, [pc, #52]	; (82c0 <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    828a:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    828c:	4a0d      	ldr	r2, [pc, #52]	; (82c4 <LORAREG_InitValidateAttrFnPtrsAS+0x60>)
    828e:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    8290:	4a0d      	ldr	r2, [pc, #52]	; (82c8 <LORAREG_InitValidateAttrFnPtrsAS+0x64>)
    8292:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    8294:	490d      	ldr	r1, [pc, #52]	; (82cc <LORAREG_InitValidateAttrFnPtrsAS+0x68>)
    8296:	22e0      	movs	r2, #224	; 0xe0
    8298:	5099      	str	r1, [r3, r2]
}
    829a:	4770      	bx	lr
    829c:	20000ce0 	.word	0x20000ce0
    82a0:	00004d4d 	.word	0x00004d4d
    82a4:	00005c79 	.word	0x00005c79
    82a8:	000049e5 	.word	0x000049e5
    82ac:	00004995 	.word	0x00004995
    82b0:	00004c19 	.word	0x00004c19
    82b4:	00006fdd 	.word	0x00006fdd
    82b8:	00004a29 	.word	0x00004a29
    82bc:	00004ca9 	.word	0x00004ca9
    82c0:	00004b45 	.word	0x00004b45
    82c4:	00004b99 	.word	0x00004b99
    82c8:	00004b29 	.word	0x00004b29
    82cc:	00004bad 	.word	0x00004bad

000082d0 <LORAREG_InitValidateAttrFnPtrsAU>:
	pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    82d0:	4b0d      	ldr	r3, [pc, #52]	; (8308 <LORAREG_InitValidateAttrFnPtrsAU+0x38>)
    82d2:	4a0e      	ldr	r2, [pc, #56]	; (830c <LORAREG_InitValidateAttrFnPtrsAU+0x3c>)
    82d4:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    82d6:	4a0e      	ldr	r2, [pc, #56]	; (8310 <LORAREG_InitValidateAttrFnPtrsAU+0x40>)
    82d8:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    82da:	4a0e      	ldr	r2, [pc, #56]	; (8314 <LORAREG_InitValidateAttrFnPtrsAU+0x44>)
    82dc:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    82de:	490e      	ldr	r1, [pc, #56]	; (8318 <LORAREG_InitValidateAttrFnPtrsAU+0x48>)
    82e0:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    82e2:	490e      	ldr	r1, [pc, #56]	; (831c <LORAREG_InitValidateAttrFnPtrsAU+0x4c>)
    82e4:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRange;
    82e6:	490e      	ldr	r1, [pc, #56]	; (8320 <LORAREG_InitValidateAttrFnPtrsAU+0x50>)
    82e8:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    82ea:	490e      	ldr	r1, [pc, #56]	; (8324 <LORAREG_InitValidateAttrFnPtrsAU+0x54>)
    82ec:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    82ee:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    82f0:	4a0d      	ldr	r2, [pc, #52]	; (8328 <LORAREG_InitValidateAttrFnPtrsAU+0x58>)
    82f2:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    82f4:	4a0d      	ldr	r2, [pc, #52]	; (832c <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    82f6:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    82f8:	4a0d      	ldr	r2, [pc, #52]	; (8330 <LORAREG_InitValidateAttrFnPtrsAU+0x60>)
    82fa:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    82fc:	4a0d      	ldr	r2, [pc, #52]	; (8334 <LORAREG_InitValidateAttrFnPtrsAU+0x64>)
    82fe:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    8300:	490d      	ldr	r1, [pc, #52]	; (8338 <LORAREG_InitValidateAttrFnPtrsAU+0x68>)
    8302:	22e0      	movs	r2, #224	; 0xe0
    8304:	5099      	str	r1, [r3, r2]
}
    8306:	4770      	bx	lr
    8308:	20000ce0 	.word	0x20000ce0
    830c:	00004c75 	.word	0x00004c75
    8310:	0000765d 	.word	0x0000765d
    8314:	000049c1 	.word	0x000049c1
    8318:	0000497d 	.word	0x0000497d
    831c:	00004c19 	.word	0x00004c19
    8320:	000073b9 	.word	0x000073b9
    8324:	00004a11 	.word	0x00004a11
    8328:	00004ca9 	.word	0x00004ca9
    832c:	00004b41 	.word	0x00004b41
    8330:	00004b15 	.word	0x00004b15
    8334:	00004b29 	.word	0x00004b29
    8338:	0000728d 	.word	0x0000728d

0000833c <LORAREG_InitValidateAttrFnPtrsIN>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqIN;
    833c:	4b0d      	ldr	r3, [pc, #52]	; (8374 <LORAREG_InitValidateAttrFnPtrsIN+0x38>)
    833e:	4a0e      	ldr	r2, [pc, #56]	; (8378 <LORAREG_InitValidateAttrFnPtrsIN+0x3c>)
    8340:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    8342:	4a0e      	ldr	r2, [pc, #56]	; (837c <LORAREG_InitValidateAttrFnPtrsIN+0x40>)
    8344:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    8346:	4a0e      	ldr	r2, [pc, #56]	; (8380 <LORAREG_InitValidateAttrFnPtrsIN+0x44>)
    8348:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    834a:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    834c:	490d      	ldr	r1, [pc, #52]	; (8384 <LORAREG_InitValidateAttrFnPtrsIN+0x48>)
    834e:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    8350:	490d      	ldr	r1, [pc, #52]	; (8388 <LORAREG_InitValidateAttrFnPtrsIN+0x4c>)
    8352:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    8354:	490d      	ldr	r1, [pc, #52]	; (838c <LORAREG_InitValidateAttrFnPtrsIN+0x50>)
    8356:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    8358:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    835a:	4a0d      	ldr	r2, [pc, #52]	; (8390 <LORAREG_InitValidateAttrFnPtrsIN+0x54>)
    835c:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    835e:	4a0d      	ldr	r2, [pc, #52]	; (8394 <LORAREG_InitValidateAttrFnPtrsIN+0x58>)
    8360:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    8362:	4a0d      	ldr	r2, [pc, #52]	; (8398 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    8364:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    8366:	4a0d      	ldr	r2, [pc, #52]	; (839c <LORAREG_InitValidateAttrFnPtrsIN+0x60>)
    8368:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    836a:	490d      	ldr	r1, [pc, #52]	; (83a0 <LORAREG_InitValidateAttrFnPtrsIN+0x64>)
    836c:	22e0      	movs	r2, #224	; 0xe0
    836e:	5099      	str	r1, [r3, r2]
}
    8370:	4770      	bx	lr
    8372:	46c0      	nop			; (mov r8, r8)
    8374:	20000ce0 	.word	0x20000ce0
    8378:	00005c9d 	.word	0x00005c9d
    837c:	00005c79 	.word	0x00005c79
    8380:	00004c01 	.word	0x00004c01
    8384:	00004c19 	.word	0x00004c19
    8388:	00006fdd 	.word	0x00006fdd
    838c:	00004a29 	.word	0x00004a29
    8390:	00004ca9 	.word	0x00004ca9
    8394:	00004b45 	.word	0x00004b45
    8398:	00004b99 	.word	0x00004b99
    839c:	00004b29 	.word	0x00004b29
    83a0:	00004bad 	.word	0x00004bad

000083a4 <LORAREG_InitValidateAttrFnPtrsJP>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqJP;
    83a4:	4b0d      	ldr	r3, [pc, #52]	; (83dc <LORAREG_InitValidateAttrFnPtrsJP+0x38>)
    83a6:	4a0e      	ldr	r2, [pc, #56]	; (83e0 <LORAREG_InitValidateAttrFnPtrsJP+0x3c>)
    83a8:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    83aa:	4a0e      	ldr	r2, [pc, #56]	; (83e4 <LORAREG_InitValidateAttrFnPtrsJP+0x40>)
    83ac:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    83ae:	4a0e      	ldr	r2, [pc, #56]	; (83e8 <LORAREG_InitValidateAttrFnPtrsJP+0x44>)
    83b0:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    83b2:	490e      	ldr	r1, [pc, #56]	; (83ec <LORAREG_InitValidateAttrFnPtrsJP+0x48>)
    83b4:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    83b6:	490e      	ldr	r1, [pc, #56]	; (83f0 <LORAREG_InitValidateAttrFnPtrsJP+0x4c>)
    83b8:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    83ba:	490e      	ldr	r1, [pc, #56]	; (83f4 <LORAREG_InitValidateAttrFnPtrsJP+0x50>)
    83bc:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    83be:	490e      	ldr	r1, [pc, #56]	; (83f8 <LORAREG_InitValidateAttrFnPtrsJP+0x54>)
    83c0:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    83c2:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    83c4:	4a0d      	ldr	r2, [pc, #52]	; (83fc <LORAREG_InitValidateAttrFnPtrsJP+0x58>)
    83c6:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    83c8:	4a0d      	ldr	r2, [pc, #52]	; (8400 <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    83ca:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    83cc:	4a0d      	ldr	r2, [pc, #52]	; (8404 <LORAREG_InitValidateAttrFnPtrsJP+0x60>)
    83ce:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    83d0:	4a0d      	ldr	r2, [pc, #52]	; (8408 <LORAREG_InitValidateAttrFnPtrsJP+0x64>)
    83d2:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    83d4:	490d      	ldr	r1, [pc, #52]	; (840c <LORAREG_InitValidateAttrFnPtrsJP+0x68>)
    83d6:	22e0      	movs	r2, #224	; 0xe0
    83d8:	5099      	str	r1, [r3, r2]
}
    83da:	4770      	bx	lr
    83dc:	20000ce0 	.word	0x20000ce0
    83e0:	00005ccd 	.word	0x00005ccd
    83e4:	00005c79 	.word	0x00005c79
    83e8:	000049e5 	.word	0x000049e5
    83ec:	00004995 	.word	0x00004995
    83f0:	00004c19 	.word	0x00004c19
    83f4:	00006fdd 	.word	0x00006fdd
    83f8:	00004a29 	.word	0x00004a29
    83fc:	00004ca9 	.word	0x00004ca9
    8400:	00004b45 	.word	0x00004b45
    8404:	00004b99 	.word	0x00004b99
    8408:	00004b29 	.word	0x00004b29
    840c:	00004bad 	.word	0x00004bad

00008410 <LORAREG_InitValidateAttrFnPtrsKR>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqKR;
    8410:	4b0d      	ldr	r3, [pc, #52]	; (8448 <LORAREG_InitValidateAttrFnPtrsKR+0x38>)
    8412:	4a0e      	ldr	r2, [pc, #56]	; (844c <LORAREG_InitValidateAttrFnPtrsKR+0x3c>)
    8414:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    8416:	4a0e      	ldr	r2, [pc, #56]	; (8450 <LORAREG_InitValidateAttrFnPtrsKR+0x40>)
    8418:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    841a:	4a0e      	ldr	r2, [pc, #56]	; (8454 <LORAREG_InitValidateAttrFnPtrsKR+0x44>)
    841c:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    841e:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    8420:	490d      	ldr	r1, [pc, #52]	; (8458 <LORAREG_InitValidateAttrFnPtrsKR+0x48>)
    8422:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    8424:	490d      	ldr	r1, [pc, #52]	; (845c <LORAREG_InitValidateAttrFnPtrsKR+0x4c>)
    8426:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    8428:	490d      	ldr	r1, [pc, #52]	; (8460 <LORAREG_InitValidateAttrFnPtrsKR+0x50>)
    842a:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    842c:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    842e:	4a0d      	ldr	r2, [pc, #52]	; (8464 <LORAREG_InitValidateAttrFnPtrsKR+0x54>)
    8430:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    8432:	4a0d      	ldr	r2, [pc, #52]	; (8468 <LORAREG_InitValidateAttrFnPtrsKR+0x58>)
    8434:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    8436:	4a0d      	ldr	r2, [pc, #52]	; (846c <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    8438:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    843a:	4a0d      	ldr	r2, [pc, #52]	; (8470 <LORAREG_InitValidateAttrFnPtrsKR+0x60>)
    843c:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    843e:	490d      	ldr	r1, [pc, #52]	; (8474 <LORAREG_InitValidateAttrFnPtrsKR+0x64>)
    8440:	22e0      	movs	r2, #224	; 0xe0
    8442:	5099      	str	r1, [r3, r2]
}
    8444:	4770      	bx	lr
    8446:	46c0      	nop			; (mov r8, r8)
    8448:	20000ce0 	.word	0x20000ce0
    844c:	00005cfd 	.word	0x00005cfd
    8450:	00005c79 	.word	0x00005c79
    8454:	00004c01 	.word	0x00004c01
    8458:	00004c19 	.word	0x00004c19
    845c:	00006fdd 	.word	0x00006fdd
    8460:	00004a29 	.word	0x00004a29
    8464:	00004ca9 	.word	0x00004ca9
    8468:	00004b45 	.word	0x00004b45
    846c:	00004b99 	.word	0x00004b99
    8470:	00004b29 	.word	0x00004b29
    8474:	00004bad 	.word	0x00004bad

00008478 <LORAREG_InitSetAttrFnPtrsNA>:
	pSetAttr[DATA_RANGE] = setDataRange;
    8478:	4b0b      	ldr	r3, [pc, #44]	; (84a8 <LORAREG_InitSetAttrFnPtrsNA+0x30>)
    847a:	4a0c      	ldr	r2, [pc, #48]	; (84ac <LORAREG_InitSetAttrFnPtrsNA+0x34>)
    847c:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    847e:	4a0c      	ldr	r2, [pc, #48]	; (84b0 <LORAREG_InitSetAttrFnPtrsNA+0x38>)
    8480:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    8482:	4a0c      	ldr	r2, [pc, #48]	; (84b4 <LORAREG_InitSetAttrFnPtrsNA+0x3c>)
    8484:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[REG_JOIN_SUCCESS] = setJoinSuccess;
    8486:	490c      	ldr	r1, [pc, #48]	; (84b8 <LORAREG_InitSetAttrFnPtrsNA+0x40>)
    8488:	22e8      	movs	r2, #232	; 0xe8
    848a:	5099      	str	r1, [r3, r2]
	pSetAttr[REG_JOIN_ENABLE_ALL] = setEnableAllChs;
    848c:	490b      	ldr	r1, [pc, #44]	; (84bc <LORAREG_InitSetAttrFnPtrsNA+0x44>)
    848e:	3204      	adds	r2, #4
    8490:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_DUTY_CYCLE_TIMER] = setJoinDutyCycleTimer;
    8492:	490b      	ldr	r1, [pc, #44]	; (84c0 <LORAREG_InitSetAttrFnPtrsNA+0x48>)
    8494:	3a6c      	subs	r2, #108	; 0x6c
    8496:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    8498:	490a      	ldr	r1, [pc, #40]	; (84c4 <LORAREG_InitSetAttrFnPtrsNA+0x4c>)
    849a:	3204      	adds	r2, #4
    849c:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    849e:	490a      	ldr	r1, [pc, #40]	; (84c8 <LORAREG_InitSetAttrFnPtrsNA+0x50>)
    84a0:	3260      	adds	r2, #96	; 0x60
    84a2:	5099      	str	r1, [r3, r2]
}
    84a4:	4770      	bx	lr
    84a6:	46c0      	nop			; (mov r8, r8)
    84a8:	20000bec 	.word	0x20000bec
    84ac:	00007421 	.word	0x00007421
    84b0:	00007395 	.word	0x00007395
    84b4:	00005d45 	.word	0x00005d45
    84b8:	00004e11 	.word	0x00004e11
    84bc:	00004e15 	.word	0x00004e15
    84c0:	00006389 	.word	0x00006389
    84c4:	00006315 	.word	0x00006315
    84c8:	0000625d 	.word	0x0000625d

000084cc <LORAREG_InitSetAttrFnPtrsEU>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    84cc:	4b0e      	ldr	r3, [pc, #56]	; (8508 <LORAREG_InitSetAttrFnPtrsEU+0x3c>)
    84ce:	4a0f      	ldr	r2, [pc, #60]	; (850c <LORAREG_InitSetAttrFnPtrsEU+0x40>)
    84d0:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    84d2:	4a0f      	ldr	r2, [pc, #60]	; (8510 <LORAREG_InitSetAttrFnPtrsEU+0x44>)
    84d4:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    84d6:	4a0f      	ldr	r2, [pc, #60]	; (8514 <LORAREG_InitSetAttrFnPtrsEU+0x48>)
    84d8:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    84da:	4a0f      	ldr	r2, [pc, #60]	; (8518 <LORAREG_InitSetAttrFnPtrsEU+0x4c>)
    84dc:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[FREQUENCY] = setFrequency;
    84de:	4a0f      	ldr	r2, [pc, #60]	; (851c <LORAREG_InitSetAttrFnPtrsEU+0x50>)
    84e0:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    84e2:	4a0f      	ldr	r2, [pc, #60]	; (8520 <LORAREG_InitSetAttrFnPtrsEU+0x54>)
    84e4:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    84e6:	490f      	ldr	r1, [pc, #60]	; (8524 <LORAREG_InitSetAttrFnPtrsEU+0x58>)
    84e8:	2280      	movs	r2, #128	; 0x80
    84ea:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    84ec:	490e      	ldr	r1, [pc, #56]	; (8528 <LORAREG_InitSetAttrFnPtrsEU+0x5c>)
    84ee:	3204      	adds	r2, #4
    84f0:	5099      	str	r1, [r3, r2]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    84f2:	490e      	ldr	r1, [pc, #56]	; (852c <LORAREG_InitSetAttrFnPtrsEU+0x60>)
    84f4:	324c      	adds	r2, #76	; 0x4c
    84f6:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    84f8:	490d      	ldr	r1, [pc, #52]	; (8530 <LORAREG_InitSetAttrFnPtrsEU+0x64>)
    84fa:	3214      	adds	r2, #20
    84fc:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    84fe:	490d      	ldr	r1, [pc, #52]	; (8534 <LORAREG_InitSetAttrFnPtrsEU+0x68>)
    8500:	320c      	adds	r2, #12
    8502:	5099      	str	r1, [r3, r2]
}
    8504:	4770      	bx	lr
    8506:	46c0      	nop			; (mov r8, r8)
    8508:	20000bec 	.word	0x20000bec
    850c:	00007009 	.word	0x00007009
    8510:	000051fd 	.word	0x000051fd
    8514:	00005fa5 	.word	0x00005fa5
    8518:	00006615 	.word	0x00006615
    851c:	00005e81 	.word	0x00005e81
    8520:	0000878d 	.word	0x0000878d
    8524:	00006389 	.word	0x00006389
    8528:	00006315 	.word	0x00006315
    852c:	00005ddd 	.word	0x00005ddd
    8530:	0000625d 	.word	0x0000625d
    8534:	00004e19 	.word	0x00004e19

00008538 <LORAREG_InitSetAttrFnPtrsAS>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    8538:	4b0f      	ldr	r3, [pc, #60]	; (8578 <LORAREG_InitSetAttrFnPtrsAS+0x40>)
    853a:	4a10      	ldr	r2, [pc, #64]	; (857c <LORAREG_InitSetAttrFnPtrsAS+0x44>)
    853c:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    853e:	4a10      	ldr	r2, [pc, #64]	; (8580 <LORAREG_InitSetAttrFnPtrsAS+0x48>)
    8540:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    8542:	4a10      	ldr	r2, [pc, #64]	; (8584 <LORAREG_InitSetAttrFnPtrsAS+0x4c>)
    8544:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    8546:	4910      	ldr	r1, [pc, #64]	; (8588 <LORAREG_InitSetAttrFnPtrsAS+0x50>)
    8548:	22d0      	movs	r2, #208	; 0xd0
    854a:	5099      	str	r1, [r3, r2]
    pSetAttr[NEW_CHANNELS] = setNewChannel;
    854c:	4a0f      	ldr	r2, [pc, #60]	; (858c <LORAREG_InitSetAttrFnPtrsAS+0x54>)
    854e:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER] = setJoinDutyCycleTimer;
    8550:	490f      	ldr	r1, [pc, #60]	; (8590 <LORAREG_InitSetAttrFnPtrsAS+0x58>)
    8552:	2280      	movs	r2, #128	; 0x80
    8554:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    8556:	490f      	ldr	r1, [pc, #60]	; (8594 <LORAREG_InitSetAttrFnPtrsAS+0x5c>)
    8558:	3204      	adds	r2, #4
    855a:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    855c:	490e      	ldr	r1, [pc, #56]	; (8598 <LORAREG_InitSetAttrFnPtrsAS+0x60>)
    855e:	3250      	adds	r2, #80	; 0x50
    8560:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    8562:	4a0e      	ldr	r2, [pc, #56]	; (859c <LORAREG_InitSetAttrFnPtrsAS+0x64>)
    8564:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    8566:	4a0e      	ldr	r2, [pc, #56]	; (85a0 <LORAREG_InitSetAttrFnPtrsAS+0x68>)
    8568:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    856a:	490e      	ldr	r1, [pc, #56]	; (85a4 <LORAREG_InitSetAttrFnPtrsAS+0x6c>)
    856c:	22e4      	movs	r2, #228	; 0xe4
    856e:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    8570:	490d      	ldr	r1, [pc, #52]	; (85a8 <LORAREG_InitSetAttrFnPtrsAS+0x70>)
    8572:	320c      	adds	r2, #12
    8574:	5099      	str	r1, [r3, r2]
}
    8576:	4770      	bx	lr
    8578:	20000bec 	.word	0x20000bec
    857c:	00007009 	.word	0x00007009
    8580:	00005375 	.word	0x00005375
    8584:	00005e81 	.word	0x00005e81
    8588:	00005ddd 	.word	0x00005ddd
    858c:	0000878d 	.word	0x0000878d
    8590:	00006389 	.word	0x00006389
    8594:	00006315 	.word	0x00006315
    8598:	00004ddd 	.word	0x00004ddd
    859c:	00005fa5 	.word	0x00005fa5
    85a0:	00006615 	.word	0x00006615
    85a4:	0000625d 	.word	0x0000625d
    85a8:	00004e19 	.word	0x00004e19

000085ac <LORAREG_InitSetAttrFnPtrsAU>:
	pSetAttr[DATA_RANGE] = setDataRange;
    85ac:	4b0b      	ldr	r3, [pc, #44]	; (85dc <LORAREG_InitSetAttrFnPtrsAU+0x30>)
    85ae:	4a0c      	ldr	r2, [pc, #48]	; (85e0 <LORAREG_InitSetAttrFnPtrsAU+0x34>)
    85b0:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    85b2:	4a0c      	ldr	r2, [pc, #48]	; (85e4 <LORAREG_InitSetAttrFnPtrsAU+0x38>)
    85b4:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    85b6:	4a0c      	ldr	r2, [pc, #48]	; (85e8 <LORAREG_InitSetAttrFnPtrsAU+0x3c>)
    85b8:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[REG_JOIN_SUCCESS] = setJoinSuccess;
    85ba:	490c      	ldr	r1, [pc, #48]	; (85ec <LORAREG_InitSetAttrFnPtrsAU+0x40>)
    85bc:	22e8      	movs	r2, #232	; 0xe8
    85be:	5099      	str	r1, [r3, r2]
	pSetAttr[REG_JOIN_ENABLE_ALL] = setEnableAllChs;
    85c0:	490b      	ldr	r1, [pc, #44]	; (85f0 <LORAREG_InitSetAttrFnPtrsAU+0x44>)
    85c2:	3204      	adds	r2, #4
    85c4:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    85c6:	490b      	ldr	r1, [pc, #44]	; (85f4 <LORAREG_InitSetAttrFnPtrsAU+0x48>)
    85c8:	3a6c      	subs	r2, #108	; 0x6c
    85ca:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    85cc:	490a      	ldr	r1, [pc, #40]	; (85f8 <LORAREG_InitSetAttrFnPtrsAU+0x4c>)
    85ce:	3204      	adds	r2, #4
    85d0:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    85d2:	490a      	ldr	r1, [pc, #40]	; (85fc <LORAREG_InitSetAttrFnPtrsAU+0x50>)
    85d4:	3260      	adds	r2, #96	; 0x60
    85d6:	5099      	str	r1, [r3, r2]
}
    85d8:	4770      	bx	lr
    85da:	46c0      	nop			; (mov r8, r8)
    85dc:	20000bec 	.word	0x20000bec
    85e0:	00007421 	.word	0x00007421
    85e4:	00007395 	.word	0x00007395
    85e8:	00005d45 	.word	0x00005d45
    85ec:	00004e11 	.word	0x00004e11
    85f0:	00004e15 	.word	0x00004e15
    85f4:	00006389 	.word	0x00006389
    85f8:	00006315 	.word	0x00006315
    85fc:	0000625d 	.word	0x0000625d

00008600 <LORAREG_InitSetAttrFnPtrsIN>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    8600:	4b0d      	ldr	r3, [pc, #52]	; (8638 <LORAREG_InitSetAttrFnPtrsIN+0x38>)
    8602:	4a0e      	ldr	r2, [pc, #56]	; (863c <LORAREG_InitSetAttrFnPtrsIN+0x3c>)
    8604:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    8606:	4a0e      	ldr	r2, [pc, #56]	; (8640 <LORAREG_InitSetAttrFnPtrsIN+0x40>)
    8608:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    860a:	4a0e      	ldr	r2, [pc, #56]	; (8644 <LORAREG_InitSetAttrFnPtrsIN+0x44>)
    860c:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    860e:	4a0e      	ldr	r2, [pc, #56]	; (8648 <LORAREG_InitSetAttrFnPtrsIN+0x48>)
    8610:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    8612:	490e      	ldr	r1, [pc, #56]	; (864c <LORAREG_InitSetAttrFnPtrsIN+0x4c>)
    8614:	2280      	movs	r2, #128	; 0x80
    8616:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    8618:	490d      	ldr	r1, [pc, #52]	; (8650 <LORAREG_InitSetAttrFnPtrsIN+0x50>)
    861a:	3204      	adds	r2, #4
    861c:	5099      	str	r1, [r3, r2]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    861e:	490d      	ldr	r1, [pc, #52]	; (8654 <LORAREG_InitSetAttrFnPtrsIN+0x54>)
    8620:	324c      	adds	r2, #76	; 0x4c
    8622:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    8624:	490c      	ldr	r1, [pc, #48]	; (8658 <LORAREG_InitSetAttrFnPtrsIN+0x58>)
    8626:	3204      	adds	r2, #4
    8628:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    862a:	490c      	ldr	r1, [pc, #48]	; (865c <LORAREG_InitSetAttrFnPtrsIN+0x5c>)
    862c:	3210      	adds	r2, #16
    862e:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    8630:	490b      	ldr	r1, [pc, #44]	; (8660 <LORAREG_InitSetAttrFnPtrsIN+0x60>)
    8632:	320c      	adds	r2, #12
    8634:	5099      	str	r1, [r3, r2]
}
    8636:	4770      	bx	lr
    8638:	20000bec 	.word	0x20000bec
    863c:	00007009 	.word	0x00007009
    8640:	000051fd 	.word	0x000051fd
    8644:	00005e81 	.word	0x00005e81
    8648:	0000878d 	.word	0x0000878d
    864c:	00006389 	.word	0x00006389
    8650:	00006315 	.word	0x00006315
    8654:	00005ddd 	.word	0x00005ddd
    8658:	00004ddd 	.word	0x00004ddd
    865c:	0000625d 	.word	0x0000625d
    8660:	00004e19 	.word	0x00004e19

00008664 <LORAREG_InitSetAttrFnPtrsJP>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    8664:	4b11      	ldr	r3, [pc, #68]	; (86ac <LORAREG_InitSetAttrFnPtrsJP+0x48>)
    8666:	4a12      	ldr	r2, [pc, #72]	; (86b0 <LORAREG_InitSetAttrFnPtrsJP+0x4c>)
    8668:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    866a:	4a12      	ldr	r2, [pc, #72]	; (86b4 <LORAREG_InitSetAttrFnPtrsJP+0x50>)
    866c:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    866e:	4912      	ldr	r1, [pc, #72]	; (86b8 <LORAREG_InitSetAttrFnPtrsJP+0x54>)
    8670:	2288      	movs	r2, #136	; 0x88
    8672:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    8674:	4a11      	ldr	r2, [pc, #68]	; (86bc <LORAREG_InitSetAttrFnPtrsJP+0x58>)
    8676:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    8678:	4911      	ldr	r1, [pc, #68]	; (86c0 <LORAREG_InitSetAttrFnPtrsJP+0x5c>)
    867a:	22d0      	movs	r2, #208	; 0xd0
    867c:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    867e:	4a11      	ldr	r2, [pc, #68]	; (86c4 <LORAREG_InitSetAttrFnPtrsJP+0x60>)
    8680:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    8682:	4911      	ldr	r1, [pc, #68]	; (86c8 <LORAREG_InitSetAttrFnPtrsJP+0x64>)
    8684:	2280      	movs	r2, #128	; 0x80
    8686:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    8688:	4910      	ldr	r1, [pc, #64]	; (86cc <LORAREG_InitSetAttrFnPtrsJP+0x68>)
    868a:	3204      	adds	r2, #4
    868c:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    868e:	4910      	ldr	r1, [pc, #64]	; (86d0 <LORAREG_InitSetAttrFnPtrsJP+0x6c>)
    8690:	3250      	adds	r2, #80	; 0x50
    8692:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    8694:	4a0f      	ldr	r2, [pc, #60]	; (86d4 <LORAREG_InitSetAttrFnPtrsJP+0x70>)
    8696:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    8698:	4a0f      	ldr	r2, [pc, #60]	; (86d8 <LORAREG_InitSetAttrFnPtrsJP+0x74>)
    869a:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    869c:	490f      	ldr	r1, [pc, #60]	; (86dc <LORAREG_InitSetAttrFnPtrsJP+0x78>)
    869e:	22e4      	movs	r2, #228	; 0xe4
    86a0:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    86a2:	490f      	ldr	r1, [pc, #60]	; (86e0 <LORAREG_InitSetAttrFnPtrsJP+0x7c>)
    86a4:	320c      	adds	r2, #12
    86a6:	5099      	str	r1, [r3, r2]
}
    86a8:	4770      	bx	lr
    86aa:	46c0      	nop			; (mov r8, r8)
    86ac:	20000bec 	.word	0x20000bec
    86b0:	00007009 	.word	0x00007009
    86b4:	00005375 	.word	0x00005375
    86b8:	00006b89 	.word	0x00006b89
    86bc:	00005e81 	.word	0x00005e81
    86c0:	00005ddd 	.word	0x00005ddd
    86c4:	0000878d 	.word	0x0000878d
    86c8:	00006389 	.word	0x00006389
    86cc:	00006315 	.word	0x00006315
    86d0:	00004ddd 	.word	0x00004ddd
    86d4:	00005fa5 	.word	0x00005fa5
    86d8:	00006615 	.word	0x00006615
    86dc:	0000625d 	.word	0x0000625d
    86e0:	00004e19 	.word	0x00004e19

000086e4 <LORAREG_InitSetAttrFnPtrsKR>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    86e4:	4b0f      	ldr	r3, [pc, #60]	; (8724 <LORAREG_InitSetAttrFnPtrsKR+0x40>)
    86e6:	4a10      	ldr	r2, [pc, #64]	; (8728 <LORAREG_InitSetAttrFnPtrsKR+0x44>)
    86e8:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    86ea:	4a10      	ldr	r2, [pc, #64]	; (872c <LORAREG_InitSetAttrFnPtrsKR+0x48>)
    86ec:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    86ee:	4910      	ldr	r1, [pc, #64]	; (8730 <LORAREG_InitSetAttrFnPtrsKR+0x4c>)
    86f0:	2288      	movs	r2, #136	; 0x88
    86f2:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    86f4:	4a0f      	ldr	r2, [pc, #60]	; (8734 <LORAREG_InitSetAttrFnPtrsKR+0x50>)
    86f6:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    86f8:	490f      	ldr	r1, [pc, #60]	; (8738 <LORAREG_InitSetAttrFnPtrsKR+0x54>)
    86fa:	22d0      	movs	r2, #208	; 0xd0
    86fc:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    86fe:	4a0f      	ldr	r2, [pc, #60]	; (873c <LORAREG_InitSetAttrFnPtrsKR+0x58>)
    8700:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    8702:	490f      	ldr	r1, [pc, #60]	; (8740 <LORAREG_InitSetAttrFnPtrsKR+0x5c>)
    8704:	2280      	movs	r2, #128	; 0x80
    8706:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    8708:	490e      	ldr	r1, [pc, #56]	; (8744 <LORAREG_InitSetAttrFnPtrsKR+0x60>)
    870a:	3204      	adds	r2, #4
    870c:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    870e:	490e      	ldr	r1, [pc, #56]	; (8748 <LORAREG_InitSetAttrFnPtrsKR+0x64>)
    8710:	3250      	adds	r2, #80	; 0x50
    8712:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    8714:	490d      	ldr	r1, [pc, #52]	; (874c <LORAREG_InitSetAttrFnPtrsKR+0x68>)
    8716:	3210      	adds	r2, #16
    8718:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    871a:	490d      	ldr	r1, [pc, #52]	; (8750 <LORAREG_InitSetAttrFnPtrsKR+0x6c>)
    871c:	320c      	adds	r2, #12
    871e:	5099      	str	r1, [r3, r2]
}
    8720:	4770      	bx	lr
    8722:	46c0      	nop			; (mov r8, r8)
    8724:	20000bec 	.word	0x20000bec
    8728:	00007009 	.word	0x00007009
    872c:	00005375 	.word	0x00005375
    8730:	00006b89 	.word	0x00006b89
    8734:	00005e81 	.word	0x00005e81
    8738:	00005ddd 	.word	0x00005ddd
    873c:	0000878d 	.word	0x0000878d
    8740:	00006389 	.word	0x00006389
    8744:	00006315 	.word	0x00006315
    8748:	00004ddd 	.word	0x00004ddd
    874c:	0000625d 	.word	0x0000625d
    8750:	00004e19 	.word	0x00004e19

00008754 <LORAREG_GetAttr>:
{
    8754:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    8756:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    8758:	283c      	cmp	r0, #60	; 0x3c
    875a:	d901      	bls.n	8760 <LORAREG_GetAttr+0xc>
}
    875c:	0018      	movs	r0, r3
    875e:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    8760:	0084      	lsls	r4, r0, #2
    8762:	4b02      	ldr	r3, [pc, #8]	; (876c <LORAREG_GetAttr+0x18>)
    8764:	58e3      	ldr	r3, [r4, r3]
    8766:	4798      	blx	r3
    8768:	0003      	movs	r3, r0
    876a:	e7f7      	b.n	875c <LORAREG_GetAttr+0x8>
    876c:	20000af8 	.word	0x20000af8

00008770 <LORAREG_ValidateAttr>:
{
    8770:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    8772:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    8774:	283c      	cmp	r0, #60	; 0x3c
    8776:	d901      	bls.n	877c <LORAREG_ValidateAttr+0xc>
}
    8778:	0018      	movs	r0, r3
    877a:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
    877c:	0082      	lsls	r2, r0, #2
    877e:	4b02      	ldr	r3, [pc, #8]	; (8788 <LORAREG_ValidateAttr+0x18>)
    8780:	58d3      	ldr	r3, [r2, r3]
    8782:	4798      	blx	r3
    8784:	0003      	movs	r3, r0
    8786:	e7f7      	b.n	8778 <LORAREG_ValidateAttr+0x8>
    8788:	20000ce0 	.word	0x20000ce0

0000878c <setNewChannel>:
{
    878c:	b5f0      	push	{r4, r5, r6, r7, lr}
    878e:	46d6      	mov	lr, sl
    8790:	464f      	mov	r7, r9
    8792:	b580      	push	{r7, lr}
    8794:	b085      	sub	sp, #20
	if(((ISM_ASBAND) & (1 << RegParams.band)) != 0 || ((ISM_JPN923) == RegParams.band))
    8796:	232e      	movs	r3, #46	; 0x2e
    8798:	4a30      	ldr	r2, [pc, #192]	; (885c <setNewChannel+0xd0>)
    879a:	5cd2      	ldrb	r2, [r2, r3]
    879c:	4b30      	ldr	r3, [pc, #192]	; (8860 <setNewChannel+0xd4>)
    879e:	4113      	asrs	r3, r2
    87a0:	07db      	lsls	r3, r3, #31
    87a2:	d407      	bmi.n	87b4 <setNewChannel+0x28>
    87a4:	2a05      	cmp	r2, #5
    87a6:	d020      	beq.n	87ea <setNewChannel+0x5e>
	else if( ISM_KR920 == RegParams.band)
    87a8:	2a04      	cmp	r2, #4
    87aa:	d020      	beq.n	87ee <setNewChannel+0x62>
	else if( ISM_IND865 == RegParams.band)
    87ac:	2a0f      	cmp	r2, #15
    87ae:	d020      	beq.n	87f2 <setNewChannel+0x66>
		pUpdateChidStatus = UpdateChannelIdStatusT2;
    87b0:	4e2c      	ldr	r6, [pc, #176]	; (8864 <setNewChannel+0xd8>)
    87b2:	e000      	b.n	87b6 <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    87b4:	4e2c      	ldr	r6, [pc, #176]	; (8868 <setNewChannel+0xdc>)
	memcpy(&newCh, attrInput,sizeof(UpdateNewCh_t));
    87b6:	ac03      	add	r4, sp, #12
    87b8:	2204      	movs	r2, #4
    87ba:	0020      	movs	r0, r4
    87bc:	4b2b      	ldr	r3, [pc, #172]	; (886c <setNewChannel+0xe0>)
    87be:	4798      	blx	r3
	valchMaskCntl.chnlMask = newCh.channelMask;
    87c0:	8823      	ldrh	r3, [r4, #0]
    87c2:	aa02      	add	r2, sp, #8
    87c4:	8053      	strh	r3, [r2, #2]
	valchMaskCntl.chnlMaskCntl = newCh.channelMaskCntl;
    87c6:	78a4      	ldrb	r4, [r4, #2]
    87c8:	7014      	strb	r4, [r2, #0]
	if(LORAREG_ValidateAttr(CHMASK_CHCNTL,&valchMaskCntl) != LORAWAN_SUCCESS)
    87ca:	0011      	movs	r1, r2
    87cc:	2038      	movs	r0, #56	; 0x38
    87ce:	4b28      	ldr	r3, [pc, #160]	; (8870 <setNewChannel+0xe4>)
    87d0:	4798      	blx	r3
    87d2:	0003      	movs	r3, r0
    87d4:	9001      	str	r0, [sp, #4]
    87d6:	2808      	cmp	r0, #8
    87d8:	d00d      	beq.n	87f6 <setNewChannel+0x6a>
		result = LORAWAN_INVALID_PARAMETER;
    87da:	230a      	movs	r3, #10
    87dc:	9301      	str	r3, [sp, #4]
}
    87de:	9801      	ldr	r0, [sp, #4]
    87e0:	b005      	add	sp, #20
    87e2:	bc0c      	pop	{r2, r3}
    87e4:	4691      	mov	r9, r2
    87e6:	469a      	mov	sl, r3
    87e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    87ea:	4e1f      	ldr	r6, [pc, #124]	; (8868 <setNewChannel+0xdc>)
    87ec:	e7e3      	b.n	87b6 <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatusT4;
    87ee:	4e21      	ldr	r6, [pc, #132]	; (8874 <setNewChannel+0xe8>)
    87f0:	e7e1      	b.n	87b6 <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatus;
    87f2:	4e21      	ldr	r6, [pc, #132]	; (8878 <setNewChannel+0xec>)
    87f4:	e7df      	b.n	87b6 <setNewChannel+0x2a>
		if(newCh.channelMaskCntl == 6)
    87f6:	2c06      	cmp	r4, #6
    87f8:	d00b      	beq.n	8812 <setNewChannel+0x86>
		else if(newCh.channelMaskCntl == 0)
    87fa:	2c00      	cmp	r4, #0
    87fc:	d1ef      	bne.n	87de <setNewChannel+0x52>
			for(i = 0; i < RegParams.maxChannels; i++)
    87fe:	232a      	movs	r3, #42	; 0x2a
    8800:	4a16      	ldr	r2, [pc, #88]	; (885c <setNewChannel+0xd0>)
    8802:	56d3      	ldrsb	r3, [r2, r3]
    8804:	2b00      	cmp	r3, #0
    8806:	ddea      	ble.n	87de <setNewChannel+0x52>
				if((newCh.channelMask & BIT0) == BIT0)
    8808:	af03      	add	r7, sp, #12
    880a:	2301      	movs	r3, #1
    880c:	4699      	mov	r9, r3
			for(i = 0; i < RegParams.maxChannels; i++)
    880e:	4692      	mov	sl, r2
    8810:	e01c      	b.n	884c <setNewChannel+0xc0>
			for(i = 0; i < RegParams.maxChannels; i++)
    8812:	3322      	adds	r3, #34	; 0x22
    8814:	4a11      	ldr	r2, [pc, #68]	; (885c <setNewChannel+0xd0>)
    8816:	56d3      	ldrsb	r3, [r2, r3]
    8818:	2b00      	cmp	r3, #0
    881a:	dde0      	ble.n	87de <setNewChannel+0x52>
    881c:	2400      	movs	r4, #0
    881e:	0017      	movs	r7, r2
    8820:	252a      	movs	r5, #42	; 0x2a
				pUpdateChidStatus(i,ENABLED);
    8822:	2101      	movs	r1, #1
    8824:	0020      	movs	r0, r4
    8826:	47b0      	blx	r6
			for(i = 0; i < RegParams.maxChannels; i++)
    8828:	3401      	adds	r4, #1
    882a:	b2e4      	uxtb	r4, r4
    882c:	577b      	ldrsb	r3, [r7, r5]
    882e:	429c      	cmp	r4, r3
    8830:	dbf7      	blt.n	8822 <setNewChannel+0x96>
    8832:	e7d4      	b.n	87de <setNewChannel+0x52>
					pUpdateChidStatus(i,DISABLED);
    8834:	2100      	movs	r1, #0
    8836:	0020      	movs	r0, r4
    8838:	47b0      	blx	r6
				newCh.channelMask = newCh.channelMask >> SHIFT1;
    883a:	086d      	lsrs	r5, r5, #1
    883c:	803d      	strh	r5, [r7, #0]
			for(i = 0; i < RegParams.maxChannels; i++)
    883e:	3401      	adds	r4, #1
    8840:	b2e4      	uxtb	r4, r4
    8842:	232a      	movs	r3, #42	; 0x2a
    8844:	4652      	mov	r2, sl
    8846:	56d3      	ldrsb	r3, [r2, r3]
    8848:	429c      	cmp	r4, r3
    884a:	dac8      	bge.n	87de <setNewChannel+0x52>
				if((newCh.channelMask & BIT0) == BIT0)
    884c:	883d      	ldrh	r5, [r7, #0]
    884e:	464b      	mov	r3, r9
    8850:	422b      	tst	r3, r5
    8852:	d0ef      	beq.n	8834 <setNewChannel+0xa8>
					pUpdateChidStatus(i, ENABLED);
    8854:	4649      	mov	r1, r9
    8856:	0020      	movs	r0, r4
    8858:	47b0      	blx	r6
    885a:	e7ee      	b.n	883a <setNewChannel+0xae>
    885c:	20001328 	.word	0x20001328
    8860:	00007fc0 	.word	0x00007fc0
    8864:	000050e9 	.word	0x000050e9
    8868:	000052fd 	.word	0x000052fd
    886c:	00013e5d 	.word	0x00013e5d
    8870:	00008771 	.word	0x00008771
    8874:	00005251 	.word	0x00005251
    8878:	00005041 	.word	0x00005041

0000887c <LORAREG_SetAttr>:
{
    887c:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    887e:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    8880:	283c      	cmp	r0, #60	; 0x3c
    8882:	d901      	bls.n	8888 <LORAREG_SetAttr+0xc>
}
    8884:	0018      	movs	r0, r3
    8886:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
    8888:	0082      	lsls	r2, r0, #2
    888a:	4b02      	ldr	r3, [pc, #8]	; (8894 <LORAREG_SetAttr+0x18>)
    888c:	58d3      	ldr	r3, [r2, r3]
    888e:	4798      	blx	r3
    8890:	0003      	movs	r3, r0
    8892:	e7f7      	b.n	8884 <LORAREG_SetAttr+0x8>
    8894:	20000bec 	.word	0x20000bec

00008898 <CreateAllRegSoftwareTimers>:
{
    8898:	b510      	push	{r4, lr}
			status = SwTimerCreate(&regTimerId[i]);
    889a:	4809      	ldr	r0, [pc, #36]	; (88c0 <CreateAllRegSoftwareTimers+0x28>)
    889c:	4b09      	ldr	r3, [pc, #36]	; (88c4 <CreateAllRegSoftwareTimers+0x2c>)
    889e:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    88a0:	2808      	cmp	r0, #8
    88a2:	d10c      	bne.n	88be <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    88a4:	4808      	ldr	r0, [pc, #32]	; (88c8 <CreateAllRegSoftwareTimers+0x30>)
    88a6:	4b07      	ldr	r3, [pc, #28]	; (88c4 <CreateAllRegSoftwareTimers+0x2c>)
    88a8:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    88aa:	2808      	cmp	r0, #8
    88ac:	d107      	bne.n	88be <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    88ae:	4807      	ldr	r0, [pc, #28]	; (88cc <CreateAllRegSoftwareTimers+0x34>)
    88b0:	4b04      	ldr	r3, [pc, #16]	; (88c4 <CreateAllRegSoftwareTimers+0x2c>)
    88b2:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    88b4:	2808      	cmp	r0, #8
    88b6:	d102      	bne.n	88be <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    88b8:	4805      	ldr	r0, [pc, #20]	; (88d0 <CreateAllRegSoftwareTimers+0x38>)
    88ba:	4b02      	ldr	r3, [pc, #8]	; (88c4 <CreateAllRegSoftwareTimers+0x2c>)
    88bc:	4798      	blx	r3
}
    88be:	bd10      	pop	{r4, pc}
    88c0:	20001324 	.word	0x20001324
    88c4:	00009761 	.word	0x00009761
    88c8:	20001325 	.word	0x20001325
    88cc:	20001326 	.word	0x20001326
    88d0:	20001327 	.word	0x20001327

000088d4 <StopAllRegSoftwareTimers>:
{
    88d4:	b570      	push	{r4, r5, r6, lr}
    88d6:	2400      	movs	r4, #0
		SwTimerStop(regTimerId[i]);
    88d8:	4e03      	ldr	r6, [pc, #12]	; (88e8 <StopAllRegSoftwareTimers+0x14>)
    88da:	4d04      	ldr	r5, [pc, #16]	; (88ec <StopAllRegSoftwareTimers+0x18>)
    88dc:	5d30      	ldrb	r0, [r6, r4]
    88de:	47a8      	blx	r5
    88e0:	3401      	adds	r4, #1
	for (uint8_t i=0; i< REG_PARAMS_TIMERS_COUNT; i++)
    88e2:	2c04      	cmp	r4, #4
    88e4:	d1fa      	bne.n	88dc <StopAllRegSoftwareTimers+0x8>
}
    88e6:	bd70      	pop	{r4, r5, r6, pc}
    88e8:	20001324 	.word	0x20001324
    88ec:	00009aa1 	.word	0x00009aa1

000088f0 <LORAREG_Init>:
{	
    88f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    88f2:	0007      	movs	r7, r0
	if(!initialized)
    88f4:	4b24      	ldr	r3, [pc, #144]	; (8988 <LORAREG_Init+0x98>)
    88f6:	781b      	ldrb	r3, [r3, #0]
    88f8:	2b00      	cmp	r3, #0
    88fa:	d109      	bne.n	8910 <LORAREG_Init+0x20>
		if (LORAWAN_SUCCESS == CreateAllRegSoftwareTimers())
    88fc:	4b23      	ldr	r3, [pc, #140]	; (898c <LORAREG_Init+0x9c>)
    88fe:	4798      	blx	r3
    8900:	2808      	cmp	r0, #8
    8902:	d001      	beq.n	8908 <LORAREG_Init+0x18>
			result = LORAWAN_RESOURCE_UNAVAILABLE;
    8904:	2014      	movs	r0, #20
    8906:	e006      	b.n	8916 <LORAREG_Init+0x26>
			initialized = true;
    8908:	2201      	movs	r2, #1
    890a:	4b1f      	ldr	r3, [pc, #124]	; (8988 <LORAREG_Init+0x98>)
    890c:	701a      	strb	r2, [r3, #0]
    890e:	e002      	b.n	8916 <LORAREG_Init+0x26>
		StopAllRegSoftwareTimers();	
    8910:	4b1f      	ldr	r3, [pc, #124]	; (8990 <LORAREG_Init+0xa0>)
    8912:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8914:	2008      	movs	r0, #8
    8916:	2300      	movs	r3, #0
		pGetAttr[i] = InValidGetAttr;
    8918:	4e1e      	ldr	r6, [pc, #120]	; (8994 <LORAREG_Init+0xa4>)
    891a:	4d1f      	ldr	r5, [pc, #124]	; (8998 <LORAREG_Init+0xa8>)
		pValidateAttr[i] = InValidAttr;
    891c:	4c1f      	ldr	r4, [pc, #124]	; (899c <LORAREG_Init+0xac>)
    891e:	4a20      	ldr	r2, [pc, #128]	; (89a0 <LORAREG_Init+0xb0>)
		pSetAttr[i] = InValidAttr;
    8920:	4920      	ldr	r1, [pc, #128]	; (89a4 <LORAREG_Init+0xb4>)
		pGetAttr[i] = InValidGetAttr;
    8922:	519d      	str	r5, [r3, r6]
		pValidateAttr[i] = InValidAttr;
    8924:	511a      	str	r2, [r3, r4]
		pSetAttr[i] = InValidAttr;
    8926:	505a      	str	r2, [r3, r1]
    8928:	3304      	adds	r3, #4
	for(int i = 0; i < REG_NUM_ATTRIBUTES; i++)
    892a:	2bf4      	cmp	r3, #244	; 0xf4
    892c:	d1f9      	bne.n	8922 <LORAREG_Init+0x32>
	if(ismBand == ISM_NA915)
    892e:	2f02      	cmp	r7, #2
    8930:	d00d      	beq.n	894e <LORAREG_Init+0x5e>
	else if(ismBand == ISM_EU868 || ismBand == ISM_EU433)
    8932:	2f01      	cmp	r7, #1
    8934:	d90f      	bls.n	8956 <LORAREG_Init+0x66>
	else if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    8936:	1fbb      	subs	r3, r7, #6
    8938:	2b08      	cmp	r3, #8
    893a:	d910      	bls.n	895e <LORAREG_Init+0x6e>
	else if(ismBand == ISM_AU915)
    893c:	2f03      	cmp	r7, #3
    893e:	d012      	beq.n	8966 <LORAREG_Init+0x76>
	else if(ismBand == ISM_IND865)
    8940:	2f0f      	cmp	r7, #15
    8942:	d014      	beq.n	896e <LORAREG_Init+0x7e>
	else if(ismBand == ISM_JPN923)
    8944:	2f05      	cmp	r7, #5
    8946:	d016      	beq.n	8976 <LORAREG_Init+0x86>
	else if(ismBand == ISM_KR920)
    8948:	2f04      	cmp	r7, #4
    894a:	d018      	beq.n	897e <LORAREG_Init+0x8e>
}
    894c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    result = LORAReg_InitNA(ismBand);
    894e:	2002      	movs	r0, #2
    8950:	4b15      	ldr	r3, [pc, #84]	; (89a8 <LORAREG_Init+0xb8>)
    8952:	4798      	blx	r3
    8954:	e7fa      	b.n	894c <LORAREG_Init+0x5c>
	    result = LORAReg_InitEU(ismBand);		
    8956:	0038      	movs	r0, r7
    8958:	4b14      	ldr	r3, [pc, #80]	; (89ac <LORAREG_Init+0xbc>)
    895a:	4798      	blx	r3
    895c:	e7f6      	b.n	894c <LORAREG_Init+0x5c>
		result = LORAReg_InitAS(ismBand);
    895e:	0038      	movs	r0, r7
    8960:	4b13      	ldr	r3, [pc, #76]	; (89b0 <LORAREG_Init+0xc0>)
    8962:	4798      	blx	r3
    8964:	e7f2      	b.n	894c <LORAREG_Init+0x5c>
		result = LORAReg_InitAU(ismBand);
    8966:	2003      	movs	r0, #3
    8968:	4b12      	ldr	r3, [pc, #72]	; (89b4 <LORAREG_Init+0xc4>)
    896a:	4798      	blx	r3
    896c:	e7ee      	b.n	894c <LORAREG_Init+0x5c>
		result = LORAReg_InitIN(ismBand);
    896e:	200f      	movs	r0, #15
    8970:	4b11      	ldr	r3, [pc, #68]	; (89b8 <LORAREG_Init+0xc8>)
    8972:	4798      	blx	r3
    8974:	e7ea      	b.n	894c <LORAREG_Init+0x5c>
		result = LORAReg_InitJP(ismBand);
    8976:	2005      	movs	r0, #5
    8978:	4b10      	ldr	r3, [pc, #64]	; (89bc <LORAREG_Init+0xcc>)
    897a:	4798      	blx	r3
    897c:	e7e6      	b.n	894c <LORAREG_Init+0x5c>
		result = LORAReg_InitKR(ismBand);
    897e:	2004      	movs	r0, #4
    8980:	4b0f      	ldr	r3, [pc, #60]	; (89c0 <LORAREG_Init+0xd0>)
    8982:	4798      	blx	r3
    8984:	e7e2      	b.n	894c <LORAREG_Init+0x5c>
    8986:	46c0      	nop			; (mov r8, r8)
    8988:	20000af5 	.word	0x20000af5
    898c:	00008899 	.word	0x00008899
    8990:	000088d5 	.word	0x000088d5
    8994:	20000af8 	.word	0x20000af8
    8998:	00004729 	.word	0x00004729
    899c:	20000ce0 	.word	0x20000ce0
    89a0:	0000472d 	.word	0x0000472d
    89a4:	20000bec 	.word	0x20000bec
    89a8:	000044e5 	.word	0x000044e5
    89ac:	00003a35 	.word	0x00003a35
    89b0:	0000353d 	.word	0x0000353d
    89b4:	000037d5 	.word	0x000037d5
    89b8:	00003d25 	.word	0x00003d25
    89bc:	00003f39 	.word	0x00003f39
    89c0:	000041ed 	.word	0x000041ed

000089c4 <LORAREG_SupportedBands>:
	*bands = value;
    89c4:	2301      	movs	r3, #1
    89c6:	425b      	negs	r3, r3
    89c8:	8003      	strh	r3, [r0, #0]
}
    89ca:	2008      	movs	r0, #8
    89cc:	4770      	bx	lr
	...

000089d0 <LORAREG_UnInit>:
{
    89d0:	b510      	push	{r4, lr}
	StopAllRegSoftwareTimers();
    89d2:	4b0d      	ldr	r3, [pc, #52]	; (8a08 <LORAREG_UnInit+0x38>)
    89d4:	4798      	blx	r3
	if(RegParams.regParamItems.fileid)
    89d6:	4b0d      	ldr	r3, [pc, #52]	; (8a0c <LORAREG_UnInit+0x3c>)
    89d8:	4a0d      	ldr	r2, [pc, #52]	; (8a10 <LORAREG_UnInit+0x40>)
    89da:	5cd0      	ldrb	r0, [r2, r3]
    89dc:	2800      	cmp	r0, #0
    89de:	d107      	bne.n	89f0 <LORAREG_UnInit+0x20>
	memset(&RegParams,0,sizeof(RegParams_t));
    89e0:	2285      	movs	r2, #133	; 0x85
    89e2:	0092      	lsls	r2, r2, #2
    89e4:	2100      	movs	r1, #0
    89e6:	480a      	ldr	r0, [pc, #40]	; (8a10 <LORAREG_UnInit+0x40>)
    89e8:	4b0a      	ldr	r3, [pc, #40]	; (8a14 <LORAREG_UnInit+0x44>)
    89ea:	4798      	blx	r3
}
    89ec:	200a      	movs	r0, #10
    89ee:	bd10      	pop	{r4, pc}
	    PDS_UnRegFile(RegParams.regParamItems.fileid);
    89f0:	4b09      	ldr	r3, [pc, #36]	; (8a18 <LORAREG_UnInit+0x48>)
    89f2:	4798      	blx	r3
		if(RegParams.band == ISM_EU868)
    89f4:	232e      	movs	r3, #46	; 0x2e
    89f6:	4a06      	ldr	r2, [pc, #24]	; (8a10 <LORAREG_UnInit+0x40>)
    89f8:	5cd3      	ldrb	r3, [r2, r3]
    89fa:	2b00      	cmp	r3, #0
    89fc:	d1f0      	bne.n	89e0 <LORAREG_UnInit+0x10>
			PDS_UnRegFile(PDS_FILE_REG_EU868_12_IDX);
    89fe:	200b      	movs	r0, #11
    8a00:	4b05      	ldr	r3, [pc, #20]	; (8a18 <LORAREG_UnInit+0x48>)
    8a02:	4798      	blx	r3
    8a04:	e7ec      	b.n	89e0 <LORAREG_UnInit+0x10>
    8a06:	46c0      	nop			; (mov r8, r8)
    8a08:	000088d5 	.word	0x000088d5
    8a0c:	0000020b 	.word	0x0000020b
    8a10:	20001328 	.word	0x20001328
    8a14:	00013ee1 	.word	0x00013ee1
    8a18:	00008e11 	.word	0x00008e11

00008a1c <sal_FillSubKey>:
		}
	}
}

static void sal_FillSubKey( uint8_t *source, uint8_t *key, uint8_t size)
{
    8a1c:	b530      	push	{r4, r5, lr}
	uint8_t i = 0;
	uint8_t carry = 0;

	i=size;

	while(i--)
    8a1e:	1e53      	subs	r3, r2, #1
    8a20:	b2db      	uxtb	r3, r3
    8a22:	2a00      	cmp	r2, #0
    8a24:	d00b      	beq.n	8a3e <sal_FillSubKey+0x22>
    8a26:	2400      	movs	r4, #0
	{
		key[i] = (source[i] << 1) | carry;
    8a28:	18c5      	adds	r5, r0, r3
    8a2a:	782a      	ldrb	r2, [r5, #0]
    8a2c:	0052      	lsls	r2, r2, #1
    8a2e:	4322      	orrs	r2, r4
    8a30:	54ca      	strb	r2, [r1, r3]
		carry = !!(source[i] & 0x80);
    8a32:	782c      	ldrb	r4, [r5, #0]
    8a34:	09e4      	lsrs	r4, r4, #7
	while(i--)
    8a36:	3b01      	subs	r3, #1
    8a38:	b2db      	uxtb	r3, r3
    8a3a:	2bff      	cmp	r3, #255	; 0xff
    8a3c:	d1f4      	bne.n	8a28 <sal_FillSubKey+0xc>
	}
}
    8a3e:	bd30      	pop	{r4, r5, pc}

00008a40 <SAL_AESEncode>:
{
    8a40:	b510      	push	{r4, lr}
    8a42:	b084      	sub	sp, #16
    8a44:	0004      	movs	r4, r0
    8a46:	0011      	movs	r1, r2
	memcpy(useKey, key, sizeof(useKey));
    8a48:	2210      	movs	r2, #16
    8a4a:	4668      	mov	r0, sp
    8a4c:	4b04      	ldr	r3, [pc, #16]	; (8a60 <SAL_AESEncode+0x20>)
    8a4e:	4798      	blx	r3
	AESEncode(buffer, useKey);
    8a50:	4669      	mov	r1, sp
    8a52:	0020      	movs	r0, r4
    8a54:	4b03      	ldr	r3, [pc, #12]	; (8a64 <SAL_AESEncode+0x24>)
    8a56:	4798      	blx	r3
}
    8a58:	2000      	movs	r0, #0
    8a5a:	b004      	add	sp, #16
    8a5c:	bd10      	pop	{r4, pc}
    8a5e:	46c0      	nop			; (mov r8, r8)
    8a60:	00013e5d 	.word	0x00013e5d
    8a64:	00008c41 	.word	0x00008c41

00008a68 <SAL_DeriveSessionKey>:
{
    8a68:	b510      	push	{r4, lr}
	sal_status = SAL_AESEncode(block, src_key, key);
    8a6a:	4b01      	ldr	r3, [pc, #4]	; (8a70 <SAL_DeriveSessionKey+0x8>)
    8a6c:	4798      	blx	r3
}
    8a6e:	bd10      	pop	{r4, pc}
    8a70:	00008a41 	.word	0x00008a41

00008a74 <SAL_Read>:
}
    8a74:	2000      	movs	r0, #0
    8a76:	4770      	bx	lr

00008a78 <SAL_AESCmac>:
{
    8a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a7a:	46d6      	mov	lr, sl
    8a7c:	464f      	mov	r7, r9
    8a7e:	4646      	mov	r6, r8
    8a80:	b5c0      	push	{r6, r7, lr}
    8a82:	b0a4      	sub	sp, #144	; 0x90
    8a84:	9001      	str	r0, [sp, #4]
    8a86:	000f      	movs	r7, r1
    8a88:	9102      	str	r1, [sp, #8]
    8a8a:	9203      	str	r2, [sp, #12]
    8a8c:	469a      	mov	sl, r3
    8a8e:	ab2c      	add	r3, sp, #176	; 0xb0
    8a90:	781c      	ldrb	r4, [r3, #0]
	uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    8a92:	ae08      	add	r6, sp, #32
    8a94:	2210      	movs	r2, #16
    8a96:	2100      	movs	r1, #0
    8a98:	0030      	movs	r0, r6
    8a9a:	4d65      	ldr	r5, [pc, #404]	; (8c30 <SAL_AESCmac+0x1b8>)
    8a9c:	47a8      	blx	r5
    8a9e:	2387      	movs	r3, #135	; 0x87
    8aa0:	73f3      	strb	r3, [r6, #15]
	memset(l, 0, sizeof(l));
    8aa2:	2210      	movs	r2, #16
    8aa4:	2100      	movs	r1, #0
    8aa6:	a804      	add	r0, sp, #16
    8aa8:	47a8      	blx	r5
	SAL_AESEncode(l, key_type, key);
    8aaa:	9a01      	ldr	r2, [sp, #4]
    8aac:	0039      	movs	r1, r7
    8aae:	a804      	add	r0, sp, #16
    8ab0:	4b60      	ldr	r3, [pc, #384]	; (8c34 <SAL_AESCmac+0x1bc>)
    8ab2:	4798      	blx	r3
	if ( (l[0] & 0x80) == 0x00 )  // MSB( bufferLocal[0] ) is '0'
    8ab4:	ab04      	add	r3, sp, #16
    8ab6:	781b      	ldrb	r3, [r3, #0]
    8ab8:	2b7f      	cmp	r3, #127	; 0x7f
    8aba:	d82e      	bhi.n	8b1a <SAL_AESCmac+0xa2>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    8abc:	2210      	movs	r2, #16
    8abe:	a920      	add	r1, sp, #128	; 0x80
    8ac0:	a804      	add	r0, sp, #16
    8ac2:	4b5d      	ldr	r3, [pc, #372]	; (8c38 <SAL_AESCmac+0x1c0>)
    8ac4:	4798      	blx	r3
	if ( (k1[0] & 0x80) == 0x00 )   // MSB( k1[0] ) is '0'
    8ac6:	ab20      	add	r3, sp, #128	; 0x80
    8ac8:	781b      	ldrb	r3, [r3, #0]
    8aca:	2b7f      	cmp	r3, #127	; 0x7f
    8acc:	d835      	bhi.n	8b3a <SAL_AESCmac+0xc2>
		sal_FillSubKey( k1, k2, (sizeof(l)) );
    8ace:	2210      	movs	r2, #16
    8ad0:	a91c      	add	r1, sp, #112	; 0x70
    8ad2:	a820      	add	r0, sp, #128	; 0x80
    8ad4:	4b58      	ldr	r3, [pc, #352]	; (8c38 <SAL_AESCmac+0x1c0>)
    8ad6:	4798      	blx	r3
	n = (size + 15) >> 4;
    8ad8:	0023      	movs	r3, r4
    8ada:	330f      	adds	r3, #15
    8adc:	111d      	asrs	r5, r3, #4
    8ade:	b2ea      	uxtb	r2, r5
    8ae0:	4690      	mov	r8, r2
	if (n == 0)
    8ae2:	2a00      	cmp	r2, #0
    8ae4:	d039      	beq.n	8b5a <SAL_AESCmac+0xe2>
	if ( flag == 1 )
    8ae6:	0722      	lsls	r2, r4, #28
    8ae8:	d139      	bne.n	8b5e <SAL_AESCmac+0xe6>
		for (i=((n-1) << 4); i<(n << 4); i++)
    8aea:	4642      	mov	r2, r8
    8aec:	3a01      	subs	r2, #1
    8aee:	0112      	lsls	r2, r2, #4
    8af0:	b2d6      	uxtb	r6, r2
    8af2:	27ff      	movs	r7, #255	; 0xff
    8af4:	013f      	lsls	r7, r7, #4
    8af6:	401f      	ands	r7, r3
    8af8:	42be      	cmp	r6, r7
    8afa:	da54      	bge.n	8ba6 <SAL_AESCmac+0x12e>
    8afc:	0033      	movs	r3, r6
			mLast[j] = input[i] ^ k1[j];
    8afe:	a910      	add	r1, sp, #64	; 0x40
    8b00:	aa20      	add	r2, sp, #128	; 0x80
    8b02:	1b98      	subs	r0, r3, r6
    8b04:	b2c0      	uxtb	r0, r0
    8b06:	4654      	mov	r4, sl
    8b08:	5ce4      	ldrb	r4, [r4, r3]
    8b0a:	5c15      	ldrb	r5, [r2, r0]
    8b0c:	406c      	eors	r4, r5
    8b0e:	540c      	strb	r4, [r1, r0]
		for (i=((n-1) << 4); i<(n << 4); i++)
    8b10:	3301      	adds	r3, #1
    8b12:	b2db      	uxtb	r3, r3
    8b14:	42bb      	cmp	r3, r7
    8b16:	dbf4      	blt.n	8b02 <SAL_AESCmac+0x8a>
    8b18:	e045      	b.n	8ba6 <SAL_AESCmac+0x12e>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    8b1a:	2210      	movs	r2, #16
    8b1c:	a920      	add	r1, sp, #128	; 0x80
    8b1e:	a804      	add	r0, sp, #16
    8b20:	4b45      	ldr	r3, [pc, #276]	; (8c38 <SAL_AESCmac+0x1c0>)
    8b22:	4798      	blx	r3
    8b24:	2300      	movs	r3, #0
			k1[i] ^= const_Rb[i];
    8b26:	aa20      	add	r2, sp, #128	; 0x80
    8b28:	a908      	add	r1, sp, #32
    8b2a:	5c98      	ldrb	r0, [r3, r2]
    8b2c:	5c5d      	ldrb	r5, [r3, r1]
    8b2e:	4068      	eors	r0, r5
    8b30:	5498      	strb	r0, [r3, r2]
    8b32:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    8b34:	2b10      	cmp	r3, #16
    8b36:	d1f8      	bne.n	8b2a <SAL_AESCmac+0xb2>
    8b38:	e7c5      	b.n	8ac6 <SAL_AESCmac+0x4e>
		sal_FillSubKey( k1, k2, (sizeof(l) ) );
    8b3a:	2210      	movs	r2, #16
    8b3c:	a91c      	add	r1, sp, #112	; 0x70
    8b3e:	a820      	add	r0, sp, #128	; 0x80
    8b40:	4b3d      	ldr	r3, [pc, #244]	; (8c38 <SAL_AESCmac+0x1c0>)
    8b42:	4798      	blx	r3
    8b44:	2300      	movs	r3, #0
			k2[i] = k2[i] ^ const_Rb[i];
    8b46:	aa1c      	add	r2, sp, #112	; 0x70
    8b48:	a908      	add	r1, sp, #32
    8b4a:	5c98      	ldrb	r0, [r3, r2]
    8b4c:	5c5d      	ldrb	r5, [r3, r1]
    8b4e:	4068      	eors	r0, r5
    8b50:	5498      	strb	r0, [r3, r2]
    8b52:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    8b54:	2b10      	cmp	r3, #16
    8b56:	d1f8      	bne.n	8b4a <SAL_AESCmac+0xd2>
    8b58:	e7be      	b.n	8ad8 <SAL_AESCmac+0x60>
		n = 1;
    8b5a:	2301      	movs	r3, #1
    8b5c:	4698      	mov	r8, r3
		ptr = &input[size - (size%16)];
    8b5e:	230f      	movs	r3, #15
    8b60:	0020      	movs	r0, r4
    8b62:	4398      	bics	r0, r3
    8b64:	2300      	movs	r3, #0
			if ( i < (size%16) )
    8b66:	220f      	movs	r2, #15
    8b68:	4014      	ands	r4, r2
					padded[i] = 0x00;
    8b6a:	a90c      	add	r1, sp, #48	; 0x30
    8b6c:	2700      	movs	r7, #0
					padded[i] = 0x80;
    8b6e:	2680      	movs	r6, #128	; 0x80
				padded[i] = ptr[i];
    8b70:	4450      	add	r0, sl
    8b72:	e005      	b.n	8b80 <SAL_AESCmac+0x108>
				if ( i == (size%16) )
    8b74:	4294      	cmp	r4, r2
    8b76:	d009      	beq.n	8b8c <SAL_AESCmac+0x114>
					padded[i] = 0x00;
    8b78:	545f      	strb	r7, [r3, r1]
    8b7a:	3301      	adds	r3, #1
		for (i=0; i<16; i++)
    8b7c:	2b10      	cmp	r3, #16
    8b7e:	d007      	beq.n	8b90 <SAL_AESCmac+0x118>
    8b80:	b2da      	uxtb	r2, r3
			if ( i < (size%16) )
    8b82:	4294      	cmp	r4, r2
    8b84:	d9f6      	bls.n	8b74 <SAL_AESCmac+0xfc>
				padded[i] = ptr[i];
    8b86:	5cc2      	ldrb	r2, [r0, r3]
    8b88:	545a      	strb	r2, [r3, r1]
    8b8a:	e7f6      	b.n	8b7a <SAL_AESCmac+0x102>
					padded[i] = 0x80;
    8b8c:	545e      	strb	r6, [r3, r1]
    8b8e:	e7f4      	b.n	8b7a <SAL_AESCmac+0x102>
    8b90:	2300      	movs	r3, #0
			mLast[i] = padded[i] ^ k2[i];
    8b92:	a810      	add	r0, sp, #64	; 0x40
    8b94:	a90c      	add	r1, sp, #48	; 0x30
    8b96:	aa1c      	add	r2, sp, #112	; 0x70
    8b98:	5c5c      	ldrb	r4, [r3, r1]
    8b9a:	5c9d      	ldrb	r5, [r3, r2]
    8b9c:	406c      	eors	r4, r5
    8b9e:	541c      	strb	r4, [r3, r0]
    8ba0:	3301      	adds	r3, #1
		for (i=0; i<sizeof(mLast); i++)
    8ba2:	2b10      	cmp	r3, #16
    8ba4:	d1f8      	bne.n	8b98 <SAL_AESCmac+0x120>
	memset(x, 0, sizeof(x));
    8ba6:	2210      	movs	r2, #16
    8ba8:	2100      	movs	r1, #0
    8baa:	a818      	add	r0, sp, #96	; 0x60
    8bac:	4b20      	ldr	r3, [pc, #128]	; (8c30 <SAL_AESCmac+0x1b8>)
    8bae:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    8bb0:	2301      	movs	r3, #1
    8bb2:	425b      	negs	r3, r3
    8bb4:	4443      	add	r3, r8
    8bb6:	4699      	mov	r9, r3
    8bb8:	2000      	movs	r0, #0
    8bba:	2700      	movs	r7, #0
    8bbc:	2b00      	cmp	r3, #0
    8bbe:	dd1a      	ble.n	8bf6 <SAL_AESCmac+0x17e>
			y[j] = x[j] ^ input[(i << 4)+j];
    8bc0:	ad14      	add	r5, sp, #80	; 0x50
    8bc2:	ac18      	add	r4, sp, #96	; 0x60
		memcpy(x, y, sizeof(y));
    8bc4:	4e1d      	ldr	r6, [pc, #116]	; (8c3c <SAL_AESCmac+0x1c4>)
			y[j] = x[j] ^ input[(i << 4)+j];
    8bc6:	0100      	lsls	r0, r0, #4
    8bc8:	2300      	movs	r3, #0
    8bca:	4450      	add	r0, sl
    8bcc:	5cc2      	ldrb	r2, [r0, r3]
    8bce:	5d19      	ldrb	r1, [r3, r4]
    8bd0:	404a      	eors	r2, r1
    8bd2:	555a      	strb	r2, [r3, r5]
    8bd4:	3301      	adds	r3, #1
		for (j=0; j<16; j++)
    8bd6:	2b10      	cmp	r3, #16
    8bd8:	d1f8      	bne.n	8bcc <SAL_AESCmac+0x154>
		memcpy(x, y, sizeof(y));
    8bda:	2210      	movs	r2, #16
    8bdc:	0029      	movs	r1, r5
    8bde:	0020      	movs	r0, r4
    8be0:	47b0      	blx	r6
		SAL_AESEncode(x, key_type, key);
    8be2:	9a01      	ldr	r2, [sp, #4]
    8be4:	9902      	ldr	r1, [sp, #8]
    8be6:	0020      	movs	r0, r4
    8be8:	4b12      	ldr	r3, [pc, #72]	; (8c34 <SAL_AESCmac+0x1bc>)
    8bea:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    8bec:	3701      	adds	r7, #1
    8bee:	b2ff      	uxtb	r7, r7
    8bf0:	0038      	movs	r0, r7
    8bf2:	454f      	cmp	r7, r9
    8bf4:	dbe7      	blt.n	8bc6 <SAL_AESCmac+0x14e>
    8bf6:	2300      	movs	r3, #0
		y[i] = x[i] ^ mLast[i];
    8bf8:	ac14      	add	r4, sp, #80	; 0x50
    8bfa:	a818      	add	r0, sp, #96	; 0x60
    8bfc:	a910      	add	r1, sp, #64	; 0x40
    8bfe:	5c1a      	ldrb	r2, [r3, r0]
    8c00:	5c5d      	ldrb	r5, [r3, r1]
    8c02:	406a      	eors	r2, r5
    8c04:	551a      	strb	r2, [r3, r4]
    8c06:	3301      	adds	r3, #1
	for (i=0; i<sizeof(x); i++)
    8c08:	2b10      	cmp	r3, #16
    8c0a:	d1f8      	bne.n	8bfe <SAL_AESCmac+0x186>
	SAL_AESEncode(y, key_type, key);
    8c0c:	9a01      	ldr	r2, [sp, #4]
    8c0e:	9902      	ldr	r1, [sp, #8]
    8c10:	a814      	add	r0, sp, #80	; 0x50
    8c12:	4b08      	ldr	r3, [pc, #32]	; (8c34 <SAL_AESCmac+0x1bc>)
    8c14:	4798      	blx	r3
	memcpy(output, y, sizeof(y));
    8c16:	2210      	movs	r2, #16
    8c18:	a914      	add	r1, sp, #80	; 0x50
    8c1a:	9803      	ldr	r0, [sp, #12]
    8c1c:	4b07      	ldr	r3, [pc, #28]	; (8c3c <SAL_AESCmac+0x1c4>)
    8c1e:	4798      	blx	r3
}
    8c20:	2000      	movs	r0, #0
    8c22:	b024      	add	sp, #144	; 0x90
    8c24:	bc1c      	pop	{r2, r3, r4}
    8c26:	4690      	mov	r8, r2
    8c28:	4699      	mov	r9, r3
    8c2a:	46a2      	mov	sl, r4
    8c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8c2e:	46c0      	nop			; (mov r8, r8)
    8c30:	00013ee1 	.word	0x00013ee1
    8c34:	00008a41 	.word	0x00008a41
    8c38:	00008a1d 	.word	0x00008a1d
    8c3c:	00013e5d 	.word	0x00013e5d

00008c40 <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
    8c40:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c42:	b083      	sub	sp, #12
    8c44:	0004      	movs	r4, r0
    8c46:	000e      	movs	r6, r1
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
    8c48:	4a2b      	ldr	r2, [pc, #172]	; (8cf8 <AESEncode+0xb8>)
    8c4a:	2101      	movs	r1, #1
    8c4c:	7011      	strb	r1, [r2, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
    8c4e:	2300      	movs	r3, #0
    8c50:	7053      	strb	r3, [r2, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
    8c52:	7091      	strb	r1, [r2, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
    8c54:	70d3      	strb	r3, [r2, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
    8c56:	7113      	strb	r3, [r2, #4]
	g_aes_cfg.lod = false;
    8c58:	7213      	strb	r3, [r2, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
    8c5a:	4928      	ldr	r1, [pc, #160]	; (8cfc <AESEncode+0xbc>)
    8c5c:	4828      	ldr	r0, [pc, #160]	; (8d00 <AESEncode+0xc0>)
    8c5e:	4b29      	ldr	r3, [pc, #164]	; (8d04 <AESEncode+0xc4>)
    8c60:	4798      	blx	r3
    8c62:	2100      	movs	r1, #0
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
	{
		long_addr.u8[index] = *data++;
    8c64:	ad01      	add	r5, sp, #4
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
    8c66:	4f28      	ldr	r7, [pc, #160]	; (8d08 <AESEncode+0xc8>)
    8c68:	1870      	adds	r0, r6, r1
    8c6a:	2300      	movs	r3, #0
    8c6c:	5cc2      	ldrb	r2, [r0, r3]
    8c6e:	555a      	strb	r2, [r3, r5]
    8c70:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    8c72:	2b04      	cmp	r3, #4
    8c74:	d1fa      	bne.n	8c6c <AESEncode+0x2c>
    8c76:	9b01      	ldr	r3, [sp, #4]
    8c78:	51cb      	str	r3, [r1, r7]
    8c7a:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    8c7c:	2910      	cmp	r1, #16
    8c7e:	d1f3      	bne.n	8c68 <AESEncode+0x28>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
    8c80:	4d1f      	ldr	r5, [pc, #124]	; (8d00 <AESEncode+0xc0>)
    8c82:	4921      	ldr	r1, [pc, #132]	; (8d08 <AESEncode+0xc8>)
    8c84:	0028      	movs	r0, r5
    8c86:	4b21      	ldr	r3, [pc, #132]	; (8d0c <AESEncode+0xcc>)
    8c88:	4798      	blx	r3
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
    8c8a:	682a      	ldr	r2, [r5, #0]
    8c8c:	7913      	ldrb	r3, [r2, #4]
    8c8e:	2102      	movs	r1, #2
    8c90:	430b      	orrs	r3, r1
    8c92:	7113      	strb	r3, [r2, #4]
    8c94:	2100      	movs	r1, #0
		long_addr.u8[index] = *data++;
    8c96:	ad01      	add	r5, sp, #4
	
	aes_set_new_message(&aes_instance);
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
    8c98:	4e1b      	ldr	r6, [pc, #108]	; (8d08 <AESEncode+0xc8>)
    8c9a:	1860      	adds	r0, r4, r1
    8c9c:	2300      	movs	r3, #0
    8c9e:	5cc2      	ldrb	r2, [r0, r3]
    8ca0:	555a      	strb	r2, [r3, r5]
    8ca2:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    8ca4:	2b04      	cmp	r3, #4
    8ca6:	d1fa      	bne.n	8c9e <AESEncode+0x5e>
    8ca8:	9b01      	ldr	r3, [sp, #4]
    8caa:	518b      	str	r3, [r1, r6]
    8cac:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    8cae:	2910      	cmp	r1, #16
    8cb0:	d1f3      	bne.n	8c9a <AESEncode+0x5a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
    8cb2:	4d13      	ldr	r5, [pc, #76]	; (8d00 <AESEncode+0xc0>)
    8cb4:	4914      	ldr	r1, [pc, #80]	; (8d08 <AESEncode+0xc8>)
    8cb6:	0028      	movs	r0, r5
    8cb8:	4b15      	ldr	r3, [pc, #84]	; (8d10 <AESEncode+0xd0>)
    8cba:	4798      	blx	r3
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
    8cbc:	682d      	ldr	r5, [r5, #0]
    8cbe:	792b      	ldrb	r3, [r5, #4]
    8cc0:	2202      	movs	r2, #2
    8cc2:	4393      	bics	r3, r2
    8cc4:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
	uint32_t status_flags = 0;

	if (int_flags & AES_INTFLAG_ENCCMP) {
    8cc6:	2101      	movs	r1, #1
		status_flags |= AES_ENCRYPTION_COMPLETE;
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
    8cc8:	2002      	movs	r0, #2
    8cca:	e001      	b.n	8cd0 <AESEncode+0x90>
	aes_clear_new_message(&aes_instance);
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
    8ccc:	4211      	tst	r1, r2
    8cce:	d107      	bne.n	8ce0 <AESEncode+0xa0>
	uint32_t int_flags = module->hw->INTFLAG.reg;
    8cd0:	79eb      	ldrb	r3, [r5, #7]
    8cd2:	b2db      	uxtb	r3, r3
	if (int_flags & AES_INTFLAG_ENCCMP) {
    8cd4:	000a      	movs	r2, r1
    8cd6:	401a      	ands	r2, r3
	if (int_flags & AES_INTFLAG_GFMCMP) {
    8cd8:	4218      	tst	r0, r3
    8cda:	d0f7      	beq.n	8ccc <AESEncode+0x8c>
		status_flags |= AES_GF_MULTI_COMPLETE;
    8cdc:	4302      	orrs	r2, r0
    8cde:	e7f5      	b.n	8ccc <AESEncode+0x8c>
	}
	aes_read_output_data(&aes_instance,io_data);
    8ce0:	4d09      	ldr	r5, [pc, #36]	; (8d08 <AESEncode+0xc8>)
    8ce2:	0029      	movs	r1, r5
    8ce4:	4806      	ldr	r0, [pc, #24]	; (8d00 <AESEncode+0xc0>)
    8ce6:	4b0b      	ldr	r3, [pc, #44]	; (8d14 <AESEncode+0xd4>)
    8ce8:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
    8cea:	2210      	movs	r2, #16
    8cec:	0029      	movs	r1, r5
    8cee:	0020      	movs	r0, r4
    8cf0:	4b09      	ldr	r3, [pc, #36]	; (8d18 <AESEncode+0xd8>)
    8cf2:	4798      	blx	r3
#endif	
}
    8cf4:	b003      	add	sp, #12
    8cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8cf8:	2000153c 	.word	0x2000153c
    8cfc:	42003400 	.word	0x42003400
    8d00:	20001548 	.word	0x20001548
    8d04:	00000389 	.word	0x00000389
    8d08:	20000dd4 	.word	0x20000dd4
    8d0c:	0000041d 	.word	0x0000041d
    8d10:	00000451 	.word	0x00000451
    8d14:	000004a1 	.word	0x000004a1
    8d18:	00013e5d 	.word	0x00013e5d

00008d1c <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
    8d1c:	b570      	push	{r4, r5, r6, lr}
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
    8d1e:	4d07      	ldr	r5, [pc, #28]	; (8d3c <AESInit+0x20>)
    8d20:	0028      	movs	r0, r5
    8d22:	4b07      	ldr	r3, [pc, #28]	; (8d40 <AESInit+0x24>)
    8d24:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
    8d26:	4c07      	ldr	r4, [pc, #28]	; (8d44 <AESInit+0x28>)
    8d28:	002a      	movs	r2, r5
    8d2a:	4907      	ldr	r1, [pc, #28]	; (8d48 <AESInit+0x2c>)
    8d2c:	0020      	movs	r0, r4
    8d2e:	4b07      	ldr	r3, [pc, #28]	; (8d4c <AESInit+0x30>)
    8d30:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
    8d32:	0020      	movs	r0, r4
    8d34:	4b06      	ldr	r3, [pc, #24]	; (8d50 <AESInit+0x34>)
    8d36:	4798      	blx	r3
#endif	
}
    8d38:	bd70      	pop	{r4, r5, r6, pc}
    8d3a:	46c0      	nop			; (mov r8, r8)
    8d3c:	2000153c 	.word	0x2000153c
    8d40:	0000034d 	.word	0x0000034d
    8d44:	20001548 	.word	0x20001548
    8d48:	42003400 	.word	0x42003400
    8d4c:	000003fd 	.word	0x000003fd
    8d50:	00000367 	.word	0x00000367

00008d54 <PDS_Init>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Init(void)
{
    8d54:	b510      	push	{r4, lr}
#if (ENABLE_PDS == 1)	
	PdsStatus_t status = pdsWlInit();
    8d56:	4b03      	ldr	r3, [pc, #12]	; (8d64 <PDS_Init+0x10>)
    8d58:	4798      	blx	r3
	pdsUnInitFlag = false;
    8d5a:	2200      	movs	r2, #0
    8d5c:	4b02      	ldr	r3, [pc, #8]	; (8d68 <PDS_Init+0x14>)
    8d5e:	701a      	strb	r2, [r3, #0]
	return status;
#else
	return PDS_OK;
#endif
}
    8d60:	bd10      	pop	{r4, pc}
    8d62:	46c0      	nop			; (mov r8, r8)
    8d64:	000092d1 	.word	0x000092d1
    8d68:	20000de4 	.word	0x20000de4

00008d6c <PDS_Store>:
\param[in] pdsFileItemIdx - The file id to register file to PDS.
\param[in] item - The item id of the item in PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Store(PdsFileItemIdx_t pdsFileItemIdx, uint8_t item)
{
    8d6c:	b510      	push	{r4, lr}
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    8d6e:	4b14      	ldr	r3, [pc, #80]	; (8dc0 <PDS_Store+0x54>)
    8d70:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    8d72:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    8d74:	2a00      	cmp	r2, #0
    8d76:	d106      	bne.n	8d86 <PDS_Store+0x1a>
	{
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    8d78:	0102      	lsls	r2, r0, #4
    8d7a:	4b12      	ldr	r3, [pc, #72]	; (8dc4 <PDS_Store+0x58>)
    8d7c:	189b      	adds	r3, r3, r2
    8d7e:	791a      	ldrb	r2, [r3, #4]
				status = PDS_INVLIAD_FILE_IDX;
			}
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    8d80:	2305      	movs	r3, #5
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    8d82:	2a00      	cmp	r2, #0
    8d84:	d101      	bne.n	8d8a <PDS_Store+0x1e>
		}
	}
#endif	
	return status; 
}
    8d86:	0018      	movs	r0, r3
    8d88:	bd10      	pop	{r4, pc}
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    8d8a:	0103      	lsls	r3, r0, #4
    8d8c:	4a0d      	ldr	r2, [pc, #52]	; (8dc4 <PDS_Store+0x58>)
    8d8e:	589c      	ldr	r4, [r3, r2]
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    8d90:	2c00      	cmp	r4, #0
    8d92:	d011      	beq.n	8db8 <PDS_Store+0x4c>
				(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    8d94:	001a      	movs	r2, r3
    8d96:	4b0b      	ldr	r3, [pc, #44]	; (8dc4 <PDS_Store+0x58>)
    8d98:	189b      	adds	r3, r3, r2
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    8d9a:	689b      	ldr	r3, [r3, #8]
    8d9c:	2b00      	cmp	r3, #0
    8d9e:	d00d      	beq.n	8dbc <PDS_Store+0x50>
				status = PDS_INVLIAD_FILE_IDX;
    8da0:	2305      	movs	r3, #5
			if (PDS_MAX_FILE_IDX > pdsFileItemIdx)
    8da2:	280c      	cmp	r0, #12
    8da4:	d8ef      	bhi.n	8d86 <PDS_Store+0x1a>
				*((fileMarks[pdsFileItemIdx].fileMarkListAddr) + item) = PDS_OP_STORE;
    8da6:	3b04      	subs	r3, #4
    8da8:	5463      	strb	r3, [r4, r1]
				isFileSet[pdsFileItemIdx] = true;
    8daa:	4a07      	ldr	r2, [pc, #28]	; (8dc8 <PDS_Store+0x5c>)
    8dac:	5413      	strb	r3, [r2, r0]
				pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    8dae:	2001      	movs	r0, #1
    8db0:	4b06      	ldr	r3, [pc, #24]	; (8dcc <PDS_Store+0x60>)
    8db2:	4798      	blx	r3
	PdsStatus_t status = PDS_OK;
    8db4:	2300      	movs	r3, #0
    8db6:	e7e6      	b.n	8d86 <PDS_Store+0x1a>
			status = PDS_INVLIAD_FILE_IDX;
    8db8:	2305      	movs	r3, #5
    8dba:	e7e4      	b.n	8d86 <PDS_Store+0x1a>
    8dbc:	2305      	movs	r3, #5
    8dbe:	e7e2      	b.n	8d86 <PDS_Store+0x1a>
    8dc0:	20000de4 	.word	0x20000de4
    8dc4:	20001560 	.word	0x20001560
    8dc8:	20001550 	.word	0x20001550
    8dcc:	00008fa9 	.word	0x00008fa9

00008dd0 <PDS_RegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_RegFile(PdsFileItemIdx_t argFileId, PdsFileMarks_t argFileMarks)
{
    8dd0:	b084      	sub	sp, #16
    8dd2:	b510      	push	{r4, lr}
    8dd4:	9103      	str	r1, [sp, #12]
    8dd6:	9204      	str	r2, [sp, #16]
    8dd8:	9305      	str	r3, [sp, #20]
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    8dda:	4b0b      	ldr	r3, [pc, #44]	; (8e08 <PDS_RegFile+0x38>)
    8ddc:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    8dde:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    8de0:	2a00      	cmp	r2, #0
    8de2:	d102      	bne.n	8dea <PDS_RegFile+0x1a>
		{
			memcpy(&fileMarks[argFileId], &argFileMarks, sizeof(PdsFileMarks_t));
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    8de4:	3305      	adds	r3, #5
		if (PDS_MAX_FILE_IDX > argFileId)
    8de6:	280c      	cmp	r0, #12
    8de8:	d904      	bls.n	8df4 <PDS_RegFile+0x24>
		}
	}
#endif	
	return status;
}
    8dea:	0018      	movs	r0, r3
    8dec:	bc10      	pop	{r4}
    8dee:	bc08      	pop	{r3}
    8df0:	b004      	add	sp, #16
    8df2:	4718      	bx	r3
			memcpy(&fileMarks[argFileId], &argFileMarks, sizeof(PdsFileMarks_t));
    8df4:	0100      	lsls	r0, r0, #4
    8df6:	aa03      	add	r2, sp, #12
    8df8:	4b04      	ldr	r3, [pc, #16]	; (8e0c <PDS_RegFile+0x3c>)
    8dfa:	1818      	adds	r0, r3, r0
    8dfc:	ca1a      	ldmia	r2!, {r1, r3, r4}
    8dfe:	c01a      	stmia	r0!, {r1, r3, r4}
    8e00:	6813      	ldr	r3, [r2, #0]
    8e02:	6003      	str	r3, [r0, #0]
	PdsStatus_t status = PDS_OK;
    8e04:	2300      	movs	r3, #0
    8e06:	e7f0      	b.n	8dea <PDS_RegFile+0x1a>
    8e08:	20000de4 	.word	0x20000de4
    8e0c:	20001560 	.word	0x20001560

00008e10 <PDS_UnRegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_UnRegFile(PdsFileItemIdx_t argFileId)
{
    8e10:	b510      	push	{r4, lr}
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    8e12:	4b09      	ldr	r3, [pc, #36]	; (8e38 <PDS_UnRegFile+0x28>)
    8e14:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    8e16:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    8e18:	2a00      	cmp	r2, #0
    8e1a:	d102      	bne.n	8e22 <PDS_UnRegFile+0x12>
		{
			memset(&fileMarks[argFileId], 0, sizeof(PdsFileMarks_t));
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    8e1c:	3305      	adds	r3, #5
		if (PDS_MAX_FILE_IDX > argFileId)
    8e1e:	280c      	cmp	r0, #12
    8e20:	d901      	bls.n	8e26 <PDS_UnRegFile+0x16>
		}
	}
#endif
	return status;
}
    8e22:	0018      	movs	r0, r3
    8e24:	bd10      	pop	{r4, pc}
			memset(&fileMarks[argFileId], 0, sizeof(PdsFileMarks_t));
    8e26:	0100      	lsls	r0, r0, #4
    8e28:	4b04      	ldr	r3, [pc, #16]	; (8e3c <PDS_UnRegFile+0x2c>)
    8e2a:	18c0      	adds	r0, r0, r3
    8e2c:	3210      	adds	r2, #16
    8e2e:	2100      	movs	r1, #0
    8e30:	4b03      	ldr	r3, [pc, #12]	; (8e40 <PDS_UnRegFile+0x30>)
    8e32:	4798      	blx	r3
	PdsStatus_t status = PDS_OK;
    8e34:	2300      	movs	r3, #0
    8e36:	e7f4      	b.n	8e22 <PDS_UnRegFile+0x12>
    8e38:	20000de4 	.word	0x20000de4
    8e3c:	20001560 	.word	0x20001560
    8e40:	00013ee1 	.word	0x00013ee1

00008e44 <pdsNvmInit>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmInit(void)
{
    8e44:	b500      	push	{lr}
    8e46:	b085      	sub	sp, #20
	PdsStatus_t status = PDS_OK;
	status_code_t statusCode;
	struct nvm_parameters parameters;

	nvm_get_parameters(&parameters);
    8e48:	4668      	mov	r0, sp
    8e4a:	4b0b      	ldr	r3, [pc, #44]	; (8e78 <pdsNvmInit+0x34>)
    8e4c:	4798      	blx	r3
	
	statusCode = nvm_init(INT_FLASH);
    8e4e:	2000      	movs	r0, #0
    8e50:	4b0a      	ldr	r3, [pc, #40]	; (8e7c <pdsNvmInit+0x38>)
    8e52:	4798      	blx	r3
	if (STATUS_OK != (status_code_genare_t) statusCode)
	{
		return PDS_ERROR;
    8e54:	2302      	movs	r3, #2
	if (STATUS_OK != (status_code_genare_t) statusCode)
    8e56:	2800      	cmp	r0, #0
    8e58:	d002      	beq.n	8e60 <pdsNvmInit+0x1c>
	{
		return PDS_NOT_ENOUGH_MEMORY;
	}
	
	return status;
}
    8e5a:	0018      	movs	r0, r3
    8e5c:	b005      	add	sp, #20
    8e5e:	bd00      	pop	{pc}
	if (EEPROM_SIZE > ( (parameters.rww_eeprom_number_of_pages/NVMCTRL_ROW_PAGES) * NVMCTRL_ROW_SIZE) )
    8e60:	466b      	mov	r3, sp
    8e62:	899a      	ldrh	r2, [r3, #12]
    8e64:	0892      	lsrs	r2, r2, #2
    8e66:	0212      	lsls	r2, r2, #8
    8e68:	4905      	ldr	r1, [pc, #20]	; (8e80 <pdsNvmInit+0x3c>)
	return status;
    8e6a:	0fd3      	lsrs	r3, r2, #31
    8e6c:	17c8      	asrs	r0, r1, #31
    8e6e:	4291      	cmp	r1, r2
    8e70:	4143      	adcs	r3, r0
    8e72:	009b      	lsls	r3, r3, #2
    8e74:	e7f1      	b.n	8e5a <pdsNvmInit+0x16>
    8e76:	46c0      	nop			; (mov r8, r8)
    8e78:	00000a39 	.word	0x00000a39
    8e7c:	0000a369 	.word	0x0000a369
    8e80:	00001fff 	.word	0x00001fff

00008e84 <pdsNvmRead>:
\param[in] 	buffer - The buffer containing data to be read.
\param[in] 	size - The size of the data in the buffer.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmRead(uint16_t rowId, PdsMem_t *buffer, uint16_t size)
{
    8e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e86:	000c      	movs	r4, r1
\param[out] uint16_t - The calculated 16 bit CRC.
******************************************************************************/
static uint32_t nvmLogicalRowToPhysicalAddr(uint16_t logicalRow)
{
	//return (NVMCTRL_RWW_EEPROM_ADDR + (NVMCTRL_ROW_SIZE * logicalRow)); // PRVN
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    8e88:	2380      	movs	r3, #128	; 0x80
    8e8a:	01db      	lsls	r3, r3, #7
    8e8c:	469c      	mov	ip, r3
    8e8e:	4460      	add	r0, ip
    8e90:	0205      	lsls	r5, r0, #8
	if (EEPROM_ROW_SIZE == size)
    8e92:	2380      	movs	r3, #128	; 0x80
    8e94:	005b      	lsls	r3, r3, #1
    8e96:	429a      	cmp	r2, r3
    8e98:	d00e      	beq.n	8eb8 <pdsNvmRead+0x34>
		size += sizeof(PdsNvmHeader_t);
    8e9a:	3204      	adds	r2, #4
    8e9c:	b296      	uxth	r6, r2
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
    8e9e:	4f1e      	ldr	r7, [pc, #120]	; (8f18 <pdsNvmRead+0x94>)
    8ea0:	0033      	movs	r3, r6
    8ea2:	0022      	movs	r2, r4
    8ea4:	0029      	movs	r1, r5
    8ea6:	2000      	movs	r0, #0
    8ea8:	47b8      	blx	r7
    8eaa:	b2c3      	uxtb	r3, r0
		} while (statusCode == STATUS_BUSY);		
    8eac:	2b05      	cmp	r3, #5
    8eae:	d0f7      	beq.n	8ea0 <pdsNvmRead+0x1c>
		return PDS_ERROR;
    8eb0:	2002      	movs	r0, #2
	if (STATUS_OK != statusCode)
    8eb2:	2b00      	cmp	r3, #0
    8eb4:	d00b      	beq.n	8ece <pdsNvmRead+0x4a>
}
    8eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
    8eb8:	001e      	movs	r6, r3
    8eba:	4f17      	ldr	r7, [pc, #92]	; (8f18 <pdsNvmRead+0x94>)
    8ebc:	0033      	movs	r3, r6
    8ebe:	0022      	movs	r2, r4
    8ec0:	0029      	movs	r1, r5
    8ec2:	2000      	movs	r0, #0
    8ec4:	47b8      	blx	r7
    8ec6:	b2c3      	uxtb	r3, r0
		} while (statusCode == STATUS_BUSY);
    8ec8:	2b05      	cmp	r3, #5
    8eca:	d0f7      	beq.n	8ebc <pdsNvmRead+0x38>
    8ecc:	e7f0      	b.n	8eb0 <pdsNvmRead+0x2c>
	crc = buffer->NVM_Struct.pdsNvmHeader.crc;
    8ece:	7823      	ldrb	r3, [r4, #0]
    8ed0:	7860      	ldrb	r0, [r4, #1]
    8ed2:	0200      	lsls	r0, r0, #8
    8ed4:	4318      	orrs	r0, r3
	if (crc != calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)&(buffer->NVM_Struct.pdsNvmData))) 
    8ed6:	78a6      	ldrb	r6, [r4, #2]
    8ed8:	3404      	adds	r4, #4
  for (uint16_t i = 0; i < length; i++)
    8eda:	2e00      	cmp	r6, #0
    8edc:	d017      	beq.n	8f0e <pdsNvmRead+0x8a>
    8ede:	0025      	movs	r5, r4
    8ee0:	3e01      	subs	r6, #1
    8ee2:	b2b6      	uxth	r6, r6
    8ee4:	3601      	adds	r6, #1
    8ee6:	19a4      	adds	r4, r4, r6
    8ee8:	2600      	movs	r6, #0
  byte ^= initValue & 0xffU;
    8eea:	782b      	ldrb	r3, [r5, #0]
    8eec:	4073      	eors	r3, r6
    8eee:	b2d9      	uxtb	r1, r3
  byte ^= byte << 4U;
    8ef0:	010b      	lsls	r3, r1, #4
    8ef2:	404b      	eors	r3, r1
    8ef4:	b2db      	uxtb	r3, r3
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    8ef6:	b29a      	uxth	r2, r3
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    8ef8:	091b      	lsrs	r3, r3, #4
    8efa:	00d1      	lsls	r1, r2, #3
    8efc:	404b      	eors	r3, r1
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    8efe:	0212      	lsls	r2, r2, #8
    8f00:	0a36      	lsrs	r6, r6, #8
    8f02:	4332      	orrs	r2, r6
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    8f04:	4053      	eors	r3, r2
    8f06:	b29e      	uxth	r6, r3
    8f08:	3501      	adds	r5, #1
  for (uint16_t i = 0; i < length; i++)
    8f0a:	42a5      	cmp	r5, r4
    8f0c:	d1ed      	bne.n	8eea <pdsNvmRead+0x66>
	if (crc != calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)&(buffer->NVM_Struct.pdsNvmData))) 
    8f0e:	1b80      	subs	r0, r0, r6
    8f10:	1e46      	subs	r6, r0, #1
    8f12:	41b0      	sbcs	r0, r6
		return PDS_ERROR;
    8f14:	b2c0      	uxtb	r0, r0
    8f16:	e7ce      	b.n	8eb6 <pdsNvmRead+0x32>
    8f18:	0000a1f9 	.word	0x0000a1f9

00008f1c <pdsNvmWrite>:
{
    8f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f1e:	46c6      	mov	lr, r8
    8f20:	b500      	push	{lr}
    8f22:	4680      	mov	r8, r0
    8f24:	000c      	movs	r4, r1
	buffer->NVM_Struct.pdsNvmHeader.version = PDS_NVM_VERSION;
    8f26:	2301      	movs	r3, #1
    8f28:	70cb      	strb	r3, [r1, #3]
	buffer->NVM_Struct.pdsNvmHeader.size = size;
    8f2a:	708a      	strb	r2, [r1, #2]
    8f2c:	27ff      	movs	r7, #255	; 0xff
    8f2e:	4017      	ands	r7, r2
	buffer->NVM_Struct.pdsNvmHeader.crc = calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)(&(buffer->NVM_Struct.pdsNvmData)));
    8f30:	1d0e      	adds	r6, r1, #4
  for (uint16_t i = 0; i < length; i++)
    8f32:	2f00      	cmp	r7, #0
    8f34:	d017      	beq.n	8f66 <pdsNvmWrite+0x4a>
    8f36:	0030      	movs	r0, r6
    8f38:	3f01      	subs	r7, #1
    8f3a:	b2bf      	uxth	r7, r7
    8f3c:	3701      	adds	r7, #1
    8f3e:	19f6      	adds	r6, r6, r7
    8f40:	2700      	movs	r7, #0
  byte ^= initValue & 0xffU;
    8f42:	7803      	ldrb	r3, [r0, #0]
    8f44:	407b      	eors	r3, r7
    8f46:	b2d9      	uxtb	r1, r3
  byte ^= byte << 4U;
    8f48:	010b      	lsls	r3, r1, #4
    8f4a:	404b      	eors	r3, r1
    8f4c:	b2db      	uxtb	r3, r3
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    8f4e:	b299      	uxth	r1, r3
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    8f50:	091b      	lsrs	r3, r3, #4
    8f52:	00cd      	lsls	r5, r1, #3
    8f54:	406b      	eors	r3, r5
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    8f56:	0209      	lsls	r1, r1, #8
    8f58:	0a3f      	lsrs	r7, r7, #8
    8f5a:	4339      	orrs	r1, r7
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    8f5c:	404b      	eors	r3, r1
    8f5e:	b29f      	uxth	r7, r3
    8f60:	3001      	adds	r0, #1
  for (uint16_t i = 0; i < length; i++)
    8f62:	42b0      	cmp	r0, r6
    8f64:	d1ed      	bne.n	8f42 <pdsNvmWrite+0x26>
	buffer->NVM_Struct.pdsNvmHeader.crc = calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)(&(buffer->NVM_Struct.pdsNvmData)));
    8f66:	7027      	strb	r7, [r4, #0]
    8f68:	0a3f      	lsrs	r7, r7, #8
    8f6a:	7067      	strb	r7, [r4, #1]
	size += sizeof(PdsNvmHeader_t);
    8f6c:	3204      	adds	r2, #4
    8f6e:	b296      	uxth	r6, r2
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    8f70:	2180      	movs	r1, #128	; 0x80
    8f72:	01c9      	lsls	r1, r1, #7
    8f74:	4441      	add	r1, r8
    8f76:	0209      	lsls	r1, r1, #8
	statusCode = nvm_write(INT_FLASH, addr, (uint8_t *const)buffer, size);
    8f78:	0033      	movs	r3, r6
    8f7a:	0022      	movs	r2, r4
    8f7c:	2000      	movs	r0, #0
    8f7e:	4f08      	ldr	r7, [pc, #32]	; (8fa0 <pdsNvmWrite+0x84>)
    8f80:	47b8      	blx	r7
		return PDS_ERROR;
    8f82:	2302      	movs	r3, #2
	if (STATUS_OK != (status_code_genare_t) statusCode)
    8f84:	2800      	cmp	r0, #0
    8f86:	d003      	beq.n	8f90 <pdsNvmWrite+0x74>
}
    8f88:	0018      	movs	r0, r3
    8f8a:	bc04      	pop	{r2}
    8f8c:	4690      	mov	r8, r2
    8f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = pdsNvmRead(rowId, (PdsMem_t *const)buffer, size);
    8f90:	0032      	movs	r2, r6
    8f92:	0021      	movs	r1, r4
    8f94:	4640      	mov	r0, r8
    8f96:	4b03      	ldr	r3, [pc, #12]	; (8fa4 <pdsNvmWrite+0x88>)
    8f98:	4798      	blx	r3
    8f9a:	0003      	movs	r3, r0
	return status;
    8f9c:	e7f4      	b.n	8f88 <pdsNvmWrite+0x6c>
    8f9e:	46c0      	nop			; (mov r8, r8)
    8fa0:	0000a255 	.word	0x0000a255
    8fa4:	00008e85 	.word	0x00008e85

00008fa8 <pdsPostTask>:
\brief Set task for PDS task manager.

\param[in] id - a single value from the type PdsTaskIds_t
******************************************************************************/
void pdsPostTask(PdsTaskIds_t id)
{
    8fa8:	b510      	push	{r4, lr}
    8faa:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    8fac:	4b05      	ldr	r3, [pc, #20]	; (8fc4 <pdsPostTask+0x1c>)
    8fae:	4798      	blx	r3
    pdsTaskFlags |= id;
    8fb0:	4b05      	ldr	r3, [pc, #20]	; (8fc8 <pdsPostTask+0x20>)
    8fb2:	7818      	ldrb	r0, [r3, #0]
    8fb4:	4320      	orrs	r0, r4
    8fb6:	7018      	strb	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    8fb8:	4b04      	ldr	r3, [pc, #16]	; (8fcc <pdsPostTask+0x24>)
    8fba:	4798      	blx	r3

    /* Also post a PDS task to the system */
    SYSTEM_PostTask(PDS_TASK_ID);
    8fbc:	2008      	movs	r0, #8
    8fbe:	4b04      	ldr	r3, [pc, #16]	; (8fd0 <pdsPostTask+0x28>)
    8fc0:	4798      	blx	r3
}
    8fc2:	bd10      	pop	{r4, pc}
    8fc4:	00003389 	.word	0x00003389
    8fc8:	20000de5 	.word	0x20000de5
    8fcc:	00003395 	.word	0x00003395
    8fd0:	00009dc1 	.word	0x00009dc1

00008fd4 <pdsStoreDeleteHandler>:
		initiate store/delete operation.

\param[out] status - The return status of the function's operation.
******************************************************************************/
static SYSTEM_TaskStatus_t pdsStoreDeleteHandler(void)
{
    8fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8fd6:	46de      	mov	lr, fp
    8fd8:	4657      	mov	r7, sl
    8fda:	464e      	mov	r6, r9
    8fdc:	4645      	mov	r5, r8
    8fde:	b5e0      	push	{r5, r6, r7, lr}
    8fe0:	b0c5      	sub	sp, #276	; 0x114
	PdsStatus_t status = SYSTEM_TASK_SUCCESS;

	PdsFileItemIdx_t fileId = PDS_FILE_MAC_01_IDX;
	PdsMem_t buffer;

	memset(&buffer, 0, sizeof(PdsMem_t));
    8fe2:	2280      	movs	r2, #128	; 0x80
    8fe4:	0052      	lsls	r2, r2, #1
    8fe6:	2100      	movs	r1, #0
    8fe8:	a804      	add	r0, sp, #16
    8fea:	4b54      	ldr	r3, [pc, #336]	; (913c <pdsStoreDeleteHandler+0x168>)
    8fec:	4798      	blx	r3
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
	{
		if (true == isFileSet[fileId])
    8fee:	4b54      	ldr	r3, [pc, #336]	; (9140 <pdsStoreDeleteHandler+0x16c>)
    8ff0:	781b      	ldrb	r3, [r3, #0]
    8ff2:	2b00      	cmp	r3, #0
    8ff4:	d112      	bne.n	901c <pdsStoreDeleteHandler+0x48>
    8ff6:	2401      	movs	r4, #1
    8ff8:	4a51      	ldr	r2, [pc, #324]	; (9140 <pdsStoreDeleteHandler+0x16c>)
    8ffa:	9400      	str	r4, [sp, #0]
    8ffc:	5d13      	ldrb	r3, [r2, r4]
    8ffe:	2b00      	cmp	r3, #0
    9000:	d10f      	bne.n	9022 <pdsStoreDeleteHandler+0x4e>
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    9002:	3401      	adds	r4, #1
    9004:	b2e4      	uxtb	r4, r4
    9006:	2c0c      	cmp	r4, #12
    9008:	d9f7      	bls.n	8ffa <pdsStoreDeleteHandler+0x26>
	PdsStatus_t status = SYSTEM_TASK_SUCCESS;
    900a:	2500      	movs	r5, #0
			break;
		}
	}

	return status;
}
    900c:	0028      	movs	r0, r5
    900e:	b045      	add	sp, #276	; 0x114
    9010:	bc3c      	pop	{r2, r3, r4, r5}
    9012:	4690      	mov	r8, r2
    9014:	4699      	mov	r9, r3
    9016:	46a2      	mov	sl, r4
    9018:	46ab      	mov	fp, r5
    901a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (true == isFileSet[fileId])
    901c:	2300      	movs	r3, #0
    901e:	9300      	str	r3, [sp, #0]
	PdsFileItemIdx_t fileId = PDS_FILE_MAC_01_IDX;
    9020:	2400      	movs	r4, #0
	uint8_t *ptr;
	ItemMap_t itemInfo;
	ItemHeader_t itemHeader;
	uint16_t size;

	memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    9022:	9b00      	ldr	r3, [sp, #0]
    9024:	011a      	lsls	r2, r3, #4
    9026:	4b47      	ldr	r3, [pc, #284]	; (9144 <pdsStoreDeleteHandler+0x170>)
    9028:	189b      	adds	r3, r3, r2
    902a:	7919      	ldrb	r1, [r3, #4]
    902c:	4a46      	ldr	r2, [pc, #280]	; (9148 <pdsStoreDeleteHandler+0x174>)
    902e:	4694      	mov	ip, r2
    9030:	4461      	add	r1, ip
    9032:	00c9      	lsls	r1, r1, #3
    9034:	689b      	ldr	r3, [r3, #8]
    9036:	1859      	adds	r1, r3, r1
    9038:	2208      	movs	r2, #8
    903a:	a802      	add	r0, sp, #8
    903c:	4b43      	ldr	r3, [pc, #268]	; (914c <pdsStoreDeleteHandler+0x178>)
    903e:	4798      	blx	r3
	size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    9040:	ab02      	add	r3, sp, #8
    9042:	79da      	ldrb	r2, [r3, #7]
    9044:	799b      	ldrb	r3, [r3, #6]
    9046:	18d2      	adds	r2, r2, r3
	status = pdsWlRead(pdsFileItemIdx, (PdsMem_t *)buffer, size);
    9048:	3205      	adds	r2, #5
    904a:	a904      	add	r1, sp, #16
    904c:	0020      	movs	r0, r4
    904e:	4b40      	ldr	r3, [pc, #256]	; (9150 <pdsStoreDeleteHandler+0x17c>)
    9050:	4798      	blx	r3
    9052:	1e05      	subs	r5, r0, #0

	if ((PDS_OK != status) && (PDS_NOT_FOUND != status))
    9054:	d111      	bne.n	907a <pdsStoreDeleteHandler+0xa6>
	}

	itemHeader.magic = PDS_MAGIC;
	itemHeader.version = PDS_FILES_VERSION;

	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    9056:	9b00      	ldr	r3, [sp, #0]
    9058:	011a      	lsls	r2, r3, #4
    905a:	4b3a      	ldr	r3, [pc, #232]	; (9144 <pdsStoreDeleteHandler+0x170>)
    905c:	189b      	adds	r3, r3, r2
    905e:	791b      	ldrb	r3, [r3, #4]
    9060:	2500      	movs	r5, #0
    9062:	2b00      	cmp	r3, #0
    9064:	d04a      	beq.n	90fc <pdsStoreDeleteHandler+0x128>
	{

		memcpy((void *)&itemInfo, (fileMarks[pdsFileItemIdx].itemListAddr) + itemIdx, sizeof(ItemMap_t));
    9066:	4b37      	ldr	r3, [pc, #220]	; (9144 <pdsStoreDeleteHandler+0x170>)
    9068:	4699      	mov	r9, r3
    906a:	9b00      	ldr	r3, [sp, #0]
    906c:	011e      	lsls	r6, r3, #4
    906e:	46b3      	mov	fp, r6
    9070:	44cb      	add	fp, r9
    9072:	4b36      	ldr	r3, [pc, #216]	; (914c <pdsStoreDeleteHandler+0x178>)
    9074:	469a      	mov	sl, r3
	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    9076:	465f      	mov	r7, fp
    9078:	e01b      	b.n	90b2 <pdsStoreDeleteHandler+0xde>
	if ((PDS_OK != status) && (PDS_NOT_FOUND != status))
    907a:	2803      	cmp	r0, #3
    907c:	d144      	bne.n	9108 <pdsStoreDeleteHandler+0x134>
    907e:	e7ea      	b.n	9056 <pdsStoreDeleteHandler+0x82>
		ptr = (uint8_t *)(&(((PdsMem_t *)(buffer))->NVM_Struct.pdsNvmData.WL_Struct.pdsWlData));
		ptr += itemInfo.itemOffset;

		if (PDS_OP_STORE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
		{
			*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_NONE;
    9080:	2100      	movs	r1, #0
    9082:	7019      	strb	r1, [r3, #0]
			itemHeader.size = itemInfo.size;
    9084:	ab02      	add	r3, sp, #8
    9086:	799a      	ldrb	r2, [r3, #6]
			itemHeader.itemId = itemInfo.itemId;
    9088:	795b      	ldrb	r3, [r3, #5]
    908a:	4698      	mov	r8, r3
			itemHeader.delete = false;
			memcpy((void *)(ptr), (void *)&itemHeader, sizeof(ItemHeader_t));
    908c:	23a5      	movs	r3, #165	; 0xa5
    908e:	7003      	strb	r3, [r0, #0]
    9090:	2301      	movs	r3, #1
    9092:	7043      	strb	r3, [r0, #1]
    9094:	7082      	strb	r2, [r0, #2]
    9096:	4643      	mov	r3, r8
    9098:	70c3      	strb	r3, [r0, #3]
    909a:	7101      	strb	r1, [r0, #4]
			ptr += sizeof(ItemHeader_t);
    909c:	3005      	adds	r0, #5
			memcpy((void *)(ptr), (void *)itemInfo.ramAddress, itemInfo.size);
    909e:	9b02      	ldr	r3, [sp, #8]
    90a0:	9301      	str	r3, [sp, #4]
    90a2:	0019      	movs	r1, r3
    90a4:	4b29      	ldr	r3, [pc, #164]	; (914c <pdsStoreDeleteHandler+0x178>)
    90a6:	4798      	blx	r3
	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    90a8:	3501      	adds	r5, #1
    90aa:	b2ed      	uxtb	r5, r5
    90ac:	793b      	ldrb	r3, [r7, #4]
    90ae:	42ab      	cmp	r3, r5
    90b0:	d924      	bls.n	90fc <pdsStoreDeleteHandler+0x128>
		memcpy((void *)&itemInfo, (fileMarks[pdsFileItemIdx].itemListAddr) + itemIdx, sizeof(ItemMap_t));
    90b2:	00e9      	lsls	r1, r5, #3
    90b4:	465b      	mov	r3, fp
    90b6:	689b      	ldr	r3, [r3, #8]
    90b8:	469c      	mov	ip, r3
    90ba:	4461      	add	r1, ip
    90bc:	2208      	movs	r2, #8
    90be:	a802      	add	r0, sp, #8
    90c0:	47d0      	blx	sl
		ptr += itemInfo.itemOffset;
    90c2:	ab02      	add	r3, sp, #8
    90c4:	79d8      	ldrb	r0, [r3, #7]
    90c6:	2315      	movs	r3, #21
    90c8:	aa02      	add	r2, sp, #8
    90ca:	4694      	mov	ip, r2
    90cc:	4463      	add	r3, ip
    90ce:	469c      	mov	ip, r3
    90d0:	4460      	add	r0, ip
		if (PDS_OP_STORE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
    90d2:	464b      	mov	r3, r9
    90d4:	58f3      	ldr	r3, [r6, r3]
    90d6:	195b      	adds	r3, r3, r5
    90d8:	781a      	ldrb	r2, [r3, #0]
    90da:	2a01      	cmp	r2, #1
    90dc:	d0d0      	beq.n	9080 <pdsStoreDeleteHandler+0xac>
		}
		else if (PDS_OP_DELETE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
    90de:	2a02      	cmp	r2, #2
    90e0:	d1e2      	bne.n	90a8 <pdsStoreDeleteHandler+0xd4>
		{
			*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_NONE;
    90e2:	2200      	movs	r2, #0
    90e4:	701a      	strb	r2, [r3, #0]
			itemHeader.size = itemInfo.size;
    90e6:	ab02      	add	r3, sp, #8
    90e8:	7999      	ldrb	r1, [r3, #6]
			itemHeader.itemId = itemInfo.itemId;
    90ea:	795a      	ldrb	r2, [r3, #5]
			itemHeader.delete = true;
			memcpy((void *)(ptr), (void *)&itemHeader, sizeof(ItemHeader_t));
    90ec:	23a5      	movs	r3, #165	; 0xa5
    90ee:	7003      	strb	r3, [r0, #0]
    90f0:	3ba4      	subs	r3, #164	; 0xa4
    90f2:	7043      	strb	r3, [r0, #1]
    90f4:	7081      	strb	r1, [r0, #2]
    90f6:	70c2      	strb	r2, [r0, #3]
    90f8:	7103      	strb	r3, [r0, #4]
    90fa:	e7d5      	b.n	90a8 <pdsStoreDeleteHandler+0xd4>
		}
	}

	memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + fileMarks[pdsFileItemIdx].numItems), sizeof(ItemMap_t));
	size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
	status = pdsWlWrite(pdsFileItemIdx, (PdsMem_t *)buffer, PDS_WL_DATA_SIZE);
    90fc:	22f3      	movs	r2, #243	; 0xf3
    90fe:	a904      	add	r1, sp, #16
    9100:	0020      	movs	r0, r4
    9102:	4b14      	ldr	r3, [pc, #80]	; (9154 <pdsStoreDeleteHandler+0x180>)
    9104:	4798      	blx	r3
    9106:	0005      	movs	r5, r0
			isFileSet[fileId] = false;
    9108:	2200      	movs	r2, #0
    910a:	4b0d      	ldr	r3, [pc, #52]	; (9140 <pdsStoreDeleteHandler+0x16c>)
    910c:	9900      	ldr	r1, [sp, #0]
    910e:	545a      	strb	r2, [r3, r1]
			fileId++;
    9110:	3401      	adds	r4, #1
    9112:	b2e3      	uxtb	r3, r4
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    9114:	2b0c      	cmp	r3, #12
    9116:	d900      	bls.n	911a <pdsStoreDeleteHandler+0x146>
    9118:	e778      	b.n	900c <pdsStoreDeleteHandler+0x38>
		if (isFileSet[fileId])
    911a:	4a09      	ldr	r2, [pc, #36]	; (9140 <pdsStoreDeleteHandler+0x16c>)
    911c:	5cd2      	ldrb	r2, [r2, r3]
    911e:	2a00      	cmp	r2, #0
    9120:	d108      	bne.n	9134 <pdsStoreDeleteHandler+0x160>
    9122:	4907      	ldr	r1, [pc, #28]	; (9140 <pdsStoreDeleteHandler+0x16c>)
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    9124:	3301      	adds	r3, #1
    9126:	b2db      	uxtb	r3, r3
    9128:	2b0c      	cmp	r3, #12
    912a:	d900      	bls.n	912e <pdsStoreDeleteHandler+0x15a>
    912c:	e76e      	b.n	900c <pdsStoreDeleteHandler+0x38>
		if (isFileSet[fileId])
    912e:	5cca      	ldrb	r2, [r1, r3]
    9130:	2a00      	cmp	r2, #0
    9132:	d0f7      	beq.n	9124 <pdsStoreDeleteHandler+0x150>
			pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    9134:	2001      	movs	r0, #1
    9136:	4b08      	ldr	r3, [pc, #32]	; (9158 <pdsStoreDeleteHandler+0x184>)
    9138:	4798      	blx	r3
			break;
    913a:	e767      	b.n	900c <pdsStoreDeleteHandler+0x38>
    913c:	00013ee1 	.word	0x00013ee1
    9140:	20001550 	.word	0x20001550
    9144:	20001560 	.word	0x20001560
    9148:	1fffffff 	.word	0x1fffffff
    914c:	00013e5d 	.word	0x00013e5d
    9150:	0000946d 	.word	0x0000946d
    9154:	0000937d 	.word	0x0000937d
    9158:	00008fa9 	.word	0x00008fa9

0000915c <PDS_TaskHandler>:
{
    915c:	b510      	push	{r4, lr}
    if (pdsTaskFlags)
    915e:	4b0e      	ldr	r3, [pc, #56]	; (9198 <PDS_TaskHandler+0x3c>)
    9160:	781b      	ldrb	r3, [r3, #0]
    9162:	2b00      	cmp	r3, #0
    9164:	d003      	beq.n	916e <PDS_TaskHandler+0x12>
            if ((1 << taskId) & (pdsTaskFlags))
    9166:	4b0c      	ldr	r3, [pc, #48]	; (9198 <PDS_TaskHandler+0x3c>)
    9168:	781b      	ldrb	r3, [r3, #0]
    916a:	07db      	lsls	r3, r3, #31
    916c:	d401      	bmi.n	9172 <PDS_TaskHandler+0x16>
}
    916e:	2000      	movs	r0, #0
    9170:	bd10      	pop	{r4, pc}
                ATOMIC_SECTION_ENTER
    9172:	4b0a      	ldr	r3, [pc, #40]	; (919c <PDS_TaskHandler+0x40>)
    9174:	4798      	blx	r3
                pdsTaskFlags &= ~(1 << taskId);
    9176:	4c08      	ldr	r4, [pc, #32]	; (9198 <PDS_TaskHandler+0x3c>)
    9178:	7823      	ldrb	r3, [r4, #0]
    917a:	2201      	movs	r2, #1
    917c:	4393      	bics	r3, r2
    917e:	7023      	strb	r3, [r4, #0]
                ATOMIC_SECTION_EXIT
    9180:	4b07      	ldr	r3, [pc, #28]	; (91a0 <PDS_TaskHandler+0x44>)
    9182:	4798      	blx	r3
                pdsTaskHandlers[taskId]();
    9184:	4b07      	ldr	r3, [pc, #28]	; (91a4 <PDS_TaskHandler+0x48>)
    9186:	4798      	blx	r3
				if (pdsTaskFlags)
    9188:	7823      	ldrb	r3, [r4, #0]
    918a:	2b00      	cmp	r3, #0
    918c:	d0ef      	beq.n	916e <PDS_TaskHandler+0x12>
                    SYSTEM_PostTask(PDS_TASK_ID);
    918e:	2008      	movs	r0, #8
    9190:	4b05      	ldr	r3, [pc, #20]	; (91a8 <PDS_TaskHandler+0x4c>)
    9192:	4798      	blx	r3
    9194:	e7eb      	b.n	916e <PDS_TaskHandler+0x12>
    9196:	46c0      	nop			; (mov r8, r8)
    9198:	20000de5 	.word	0x20000de5
    919c:	00003389 	.word	0x00003389
    91a0:	00003395 	.word	0x00003395
    91a4:	00008fd5 	.word	0x00008fd5
    91a8:	00009dc1 	.word	0x00009dc1

000091ac <pdsUpdateRowMap>:
		in the row map.

\param[in] - return none
******************************************************************************/
static void pdsUpdateRowMap()
{
    91ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    91ae:	4e12      	ldr	r6, [pc, #72]	; (91f8 <pdsUpdateRowMap+0x4c>)
    91b0:	0037      	movs	r7, r6
    91b2:	371a      	adds	r7, #26
	uint16_t rowIdx = USHRT_MAX;
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
    {
		
        // make all the previous indexes of the max_counter_row_idx invalid by writing 0xFF
		if(USHRT_MAX != fileMap[memId].maxCounterRowIdx)
    91b4:	4d11      	ldr	r5, [pc, #68]	; (91fc <pdsUpdateRowMap+0x50>)
		{
			rowIdx = rowMap[fileMap[memId].maxCounterRowIdx].previousIdx;
    91b6:	4b12      	ldr	r3, [pc, #72]	; (9200 <pdsUpdateRowMap+0x54>)
    91b8:	469c      	mov	ip, r3
			rowMap[fileMap[memId].maxCounterRowIdx].previousIdx = USHRT_MAX;
    91ba:	2101      	movs	r1, #1
    91bc:	4249      	negs	r1, r1
			while(rowIdx != USHRT_MAX)
			{
				rowIdxLocal = rowMap[rowIdx].previousIdx;
    91be:	0018      	movs	r0, r3
    91c0:	e002      	b.n	91c8 <pdsUpdateRowMap+0x1c>
    91c2:	3602      	adds	r6, #2
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
    91c4:	42be      	cmp	r6, r7
    91c6:	d015      	beq.n	91f4 <pdsUpdateRowMap+0x48>
		if(USHRT_MAX != fileMap[memId].maxCounterRowIdx)
    91c8:	8833      	ldrh	r3, [r6, #0]
    91ca:	42ab      	cmp	r3, r5
    91cc:	d0f9      	beq.n	91c2 <pdsUpdateRowMap+0x16>
			rowIdx = rowMap[fileMap[memId].maxCounterRowIdx].previousIdx;
    91ce:	00db      	lsls	r3, r3, #3
    91d0:	4463      	add	r3, ip
    91d2:	001a      	movs	r2, r3
    91d4:	88db      	ldrh	r3, [r3, #6]
			rowMap[fileMap[memId].maxCounterRowIdx].previousIdx = USHRT_MAX;
    91d6:	80d1      	strh	r1, [r2, #6]
			while(rowIdx != USHRT_MAX)
    91d8:	42ab      	cmp	r3, r5
    91da:	d0f2      	beq.n	91c2 <pdsUpdateRowMap+0x16>
				rowIdxLocal = rowMap[rowIdx].previousIdx;
    91dc:	001a      	movs	r2, r3
    91de:	00db      	lsls	r3, r3, #3
    91e0:	18c3      	adds	r3, r0, r3
    91e2:	88db      	ldrh	r3, [r3, #6]
				rowMap[rowIdx].previousIdx = USHRT_MAX;
    91e4:	00d2      	lsls	r2, r2, #3
    91e6:	1884      	adds	r4, r0, r2
    91e8:	80e1      	strh	r1, [r4, #6]
				rowMap[rowIdx].counter = UINT_MAX;
    91ea:	5011      	str	r1, [r2, r0]
				rowMap[rowIdx].memId = USHRT_MAX;
    91ec:	80a1      	strh	r1, [r4, #4]
			while(rowIdx != USHRT_MAX)
    91ee:	42ab      	cmp	r3, r5
    91f0:	d1f4      	bne.n	91dc <pdsUpdateRowMap+0x30>
    91f2:	e7e6      	b.n	91c2 <pdsUpdateRowMap+0x16>
				rowIdx = rowIdxLocal;
			}
		}
    }
}
    91f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    91f6:	46c0      	nop			; (mov r8, r8)
    91f8:	20000de8 	.word	0x20000de8
    91fc:	0000ffff 	.word	0x0000ffff
    9200:	20000e04 	.word	0x20000e04

00009204 <pdsUpdateFileMap>:
\brief Updates the file map so that it points to the latest row index for a file id.

\param[out] - returns none
******************************************************************************/
static void pdsUpdateFileMap(UpdateFileMap_t *updateFileMap)
{
    9204:	b5f0      	push	{r4, r5, r6, r7, lr}
    9206:	46c6      	mov	lr, r8
    9208:	b500      	push	{lr}
    920a:	b082      	sub	sp, #8
    920c:	4684      	mov	ip, r0
    uint16_t *presentRowIdx;
    uint16_t *previousRowIdx;
    uint16_t *lastRowIdx;
    uint16_t prevTemp;
    if(USHRT_MAX == fileMap[updateFileMap->memId].maxCounterRowIdx)
    920e:	8881      	ldrh	r1, [r0, #4]
    9210:	004a      	lsls	r2, r1, #1
    9212:	4b2c      	ldr	r3, [pc, #176]	; (92c4 <pdsUpdateFileMap+0xc0>)
    9214:	5ad3      	ldrh	r3, [r2, r3]
    9216:	4a2c      	ldr	r2, [pc, #176]	; (92c8 <pdsUpdateFileMap+0xc4>)
    9218:	4293      	cmp	r3, r2
    921a:	d02c      	beq.n	9276 <pdsUpdateFileMap+0x72>
    {   
		/* If there is no entry in filemap update current rowidx as maxcounteridx*/
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;

    }
    else if(rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter < rowMap[updateFileMap->rowIdx].counter)
    921c:	4a2b      	ldr	r2, [pc, #172]	; (92cc <pdsUpdateFileMap+0xc8>)
    921e:	00d8      	lsls	r0, r3, #3
    9220:	5880      	ldr	r0, [r0, r2]
    9222:	4664      	mov	r4, ip
    9224:	88e4      	ldrh	r4, [r4, #6]
    9226:	46a0      	mov	r8, r4
    9228:	00e4      	lsls	r4, r4, #3
    922a:	58a6      	ldr	r6, [r4, r2]
    922c:	42b0      	cmp	r0, r6
    922e:	d327      	bcc.n	9280 <pdsUpdateFileMap+0x7c>
		// update the max counter rowIdx of the memId as previous_idx in the present row
        rowMap[updateFileMap->rowIdx].previousIdx = fileMap[updateFileMap->memId].maxCounterRowIdx;
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;

    }
	else if (rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter == rowMap[updateFileMap->rowIdx].counter)
    9230:	d02f      	beq.n	9292 <pdsUpdateFileMap+0x8e>

		return;
	}
    else
    {
        previousRowIdx = &rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].previousIdx;
    9232:	4a26      	ldr	r2, [pc, #152]	; (92cc <pdsUpdateFileMap+0xc8>)
    9234:	00dd      	lsls	r5, r3, #3
    9236:	3506      	adds	r5, #6
    9238:	1950      	adds	r0, r2, r5
    923a:	9001      	str	r0, [sp, #4]
    923c:	00db      	lsls	r3, r3, #3
    923e:	18d3      	adds	r3, r2, r3
    9240:	88da      	ldrh	r2, [r3, #6]
        presentRowIdx = &updateFileMap->rowIdx;
        lastRowIdx = &fileMap[updateFileMap->memId].maxCounterRowIdx;
		do
		{
			if (USHRT_MAX == *previousRowIdx)
    9242:	4b21      	ldr	r3, [pc, #132]	; (92c8 <pdsUpdateFileMap+0xc4>)
    9244:	429a      	cmp	r2, r3
    9246:	d028      	beq.n	929a <pdsUpdateFileMap+0x96>
			{
				*previousRowIdx = *presentRowIdx;
				break;
			}
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    9248:	0013      	movs	r3, r2
    924a:	00d0      	lsls	r0, r2, #3
    924c:	4c1f      	ldr	r4, [pc, #124]	; (92cc <pdsUpdateFileMap+0xc8>)
    924e:	5900      	ldr	r0, [r0, r4]
    9250:	4286      	cmp	r6, r0
    9252:	d226      	bcs.n	92a2 <pdsUpdateFileMap+0x9e>
			{
				lastRowIdx = previousRowIdx;
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    9254:	4c1d      	ldr	r4, [pc, #116]	; (92cc <pdsUpdateFileMap+0xc8>)
			if (USHRT_MAX == *previousRowIdx)
    9256:	4f1c      	ldr	r7, [pc, #112]	; (92c8 <pdsUpdateFileMap+0xc4>)
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    9258:	0020      	movs	r0, r4
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    925a:	00db      	lsls	r3, r3, #3
    925c:	1d99      	adds	r1, r3, #6
    925e:	1861      	adds	r1, r4, r1
    9260:	18e3      	adds	r3, r4, r3
    9262:	88da      	ldrh	r2, [r3, #6]
			if (USHRT_MAX == *previousRowIdx)
    9264:	42ba      	cmp	r2, r7
    9266:	d019      	beq.n	929c <pdsUpdateFileMap+0x98>
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    9268:	0013      	movs	r3, r2
    926a:	00d5      	lsls	r5, r2, #3
    926c:	582d      	ldr	r5, [r5, r0]
    926e:	42ae      	cmp	r6, r5
    9270:	d21b      	bcs.n	92aa <pdsUpdateFileMap+0xa6>
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    9272:	9101      	str	r1, [sp, #4]
    9274:	e7f1      	b.n	925a <pdsUpdateFileMap+0x56>
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
    9276:	88c2      	ldrh	r2, [r0, #6]
    9278:	0049      	lsls	r1, r1, #1
    927a:	4b12      	ldr	r3, [pc, #72]	; (92c4 <pdsUpdateFileMap+0xc0>)
    927c:	52ca      	strh	r2, [r1, r3]
    927e:	e008      	b.n	9292 <pdsUpdateFileMap+0x8e>
        rowMap[updateFileMap->rowIdx].previousIdx = fileMap[updateFileMap->memId].maxCounterRowIdx;
    9280:	4a12      	ldr	r2, [pc, #72]	; (92cc <pdsUpdateFileMap+0xc8>)
    9282:	1912      	adds	r2, r2, r4
    9284:	80d3      	strh	r3, [r2, #6]
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
    9286:	4663      	mov	r3, ip
    9288:	88d9      	ldrh	r1, [r3, #6]
    928a:	889b      	ldrh	r3, [r3, #4]
    928c:	005b      	lsls	r3, r3, #1
    928e:	4a0d      	ldr	r2, [pc, #52]	; (92c4 <pdsUpdateFileMap+0xc0>)
    9290:	5299      	strh	r1, [r3, r2]
				break;
			}
		} while(true);

    }
}
    9292:	b002      	add	sp, #8
    9294:	bc04      	pop	{r2}
    9296:	4690      	mov	r8, r2
    9298:	bdf0      	pop	{r4, r5, r6, r7, pc}
        previousRowIdx = &rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].previousIdx;
    929a:	9901      	ldr	r1, [sp, #4]
				*previousRowIdx = *presentRowIdx;
    929c:	4643      	mov	r3, r8
    929e:	800b      	strh	r3, [r1, #0]
				break;
    92a0:	e7f7      	b.n	9292 <pdsUpdateFileMap+0x8e>
        lastRowIdx = &fileMap[updateFileMap->memId].maxCounterRowIdx;
    92a2:	0049      	lsls	r1, r1, #1
    92a4:	4d07      	ldr	r5, [pc, #28]	; (92c4 <pdsUpdateFileMap+0xc0>)
    92a6:	186b      	adds	r3, r5, r1
    92a8:	9301      	str	r3, [sp, #4]
				rowMap[*lastRowIdx].previousIdx = *presentRowIdx;
    92aa:	4908      	ldr	r1, [pc, #32]	; (92cc <pdsUpdateFileMap+0xc8>)
    92ac:	9b01      	ldr	r3, [sp, #4]
    92ae:	881b      	ldrh	r3, [r3, #0]
    92b0:	00db      	lsls	r3, r3, #3
    92b2:	18cb      	adds	r3, r1, r3
    92b4:	4640      	mov	r0, r8
    92b6:	80d8      	strh	r0, [r3, #6]
				rowMap[*presentRowIdx].previousIdx = prevTemp;
    92b8:	4663      	mov	r3, ip
    92ba:	88db      	ldrh	r3, [r3, #6]
    92bc:	00db      	lsls	r3, r3, #3
    92be:	18c9      	adds	r1, r1, r3
    92c0:	80ca      	strh	r2, [r1, #6]
				break;
    92c2:	e7e6      	b.n	9292 <pdsUpdateFileMap+0x8e>
    92c4:	20000de8 	.word	0x20000de8
    92c8:	0000ffff 	.word	0x0000ffff
    92cc:	20000e04 	.word	0x20000e04

000092d0 <pdsWlInit>:
{
    92d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    92d2:	46c6      	mov	lr, r8
    92d4:	b500      	push	{lr}
    92d6:	b0c4      	sub	sp, #272	; 0x110
	PdsStatus_t status = pdsNvmInit();
    92d8:	4b21      	ldr	r3, [pc, #132]	; (9360 <pdsWlInit+0x90>)
    92da:	4798      	blx	r3
    92dc:	9001      	str	r0, [sp, #4]
	if (PDS_OK != status)
    92de:	2800      	cmp	r0, #0
    92e0:	d004      	beq.n	92ec <pdsWlInit+0x1c>
}
    92e2:	9801      	ldr	r0, [sp, #4]
    92e4:	b044      	add	sp, #272	; 0x110
    92e6:	bc04      	pop	{r2}
    92e8:	4690      	mov	r8, r2
    92ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(&rowMap, UCHAR_MAX, EEPROM_NUM_ROWS * sizeof(RowMap_t));
    92ec:	2680      	movs	r6, #128	; 0x80
    92ee:	0076      	lsls	r6, r6, #1
    92f0:	4d1c      	ldr	r5, [pc, #112]	; (9364 <pdsWlInit+0x94>)
    92f2:	0032      	movs	r2, r6
    92f4:	21ff      	movs	r1, #255	; 0xff
    92f6:	0028      	movs	r0, r5
    92f8:	4c1b      	ldr	r4, [pc, #108]	; (9368 <pdsWlInit+0x98>)
    92fa:	47a0      	blx	r4
    memset(&fileMap, UCHAR_MAX, PDS_MAX_FILE_IDX * sizeof(FileMap_t));
    92fc:	221a      	movs	r2, #26
    92fe:	21ff      	movs	r1, #255	; 0xff
    9300:	481a      	ldr	r0, [pc, #104]	; (936c <pdsWlInit+0x9c>)
    9302:	47a0      	blx	r4
	memset(&buffer, 0, sizeof(PdsMem_t));
    9304:	0032      	movs	r2, r6
    9306:	2100      	movs	r1, #0
    9308:	a804      	add	r0, sp, #16
    930a:	47a0      	blx	r4
    930c:	2400      	movs	r4, #0
		status = pdsNvmRead(rowIdx, &buffer, EEPROM_ROW_SIZE);
    930e:	4e18      	ldr	r6, [pc, #96]	; (9370 <pdsWlInit+0xa0>)
            pdsUpdateFileMap(&updateFileMap);
    9310:	4b18      	ldr	r3, [pc, #96]	; (9374 <pdsWlInit+0xa4>)
    9312:	4698      	mov	r8, r3
    9314:	e003      	b.n	931e <pdsWlInit+0x4e>
    9316:	3401      	adds	r4, #1
    9318:	3508      	adds	r5, #8
    for(uint8_t rowIdx = 0; rowIdx< EEPROM_NUM_ROWS; rowIdx++)
    931a:	2c20      	cmp	r4, #32
    931c:	d01d      	beq.n	935a <pdsWlInit+0x8a>
		status = pdsNvmRead(rowIdx, &buffer, EEPROM_ROW_SIZE);
    931e:	b2a7      	uxth	r7, r4
    9320:	2280      	movs	r2, #128	; 0x80
    9322:	0052      	lsls	r2, r2, #1
    9324:	a904      	add	r1, sp, #16
    9326:	0038      	movs	r0, r7
    9328:	47b0      	blx	r6
		if (PDS_OK == status)
    932a:	2800      	cmp	r0, #0
    932c:	d1f3      	bne.n	9316 <pdsWlInit+0x46>
			rowMap[rowIdx].counter = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
    932e:	a904      	add	r1, sp, #16
    9330:	9b06      	ldr	r3, [sp, #24]
    9332:	0a1b      	lsrs	r3, r3, #8
    9334:	7b0a      	ldrb	r2, [r1, #12]
    9336:	0612      	lsls	r2, r2, #24
    9338:	431a      	orrs	r2, r3
    933a:	602a      	str	r2, [r5, #0]
            rowMap[rowIdx].memId = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId;
    933c:	79c8      	ldrb	r0, [r1, #7]
    933e:	7a0b      	ldrb	r3, [r1, #8]
    9340:	021b      	lsls	r3, r3, #8
    9342:	4303      	orrs	r3, r0
    9344:	80ab      	strh	r3, [r5, #4]
            rowMap[rowIdx].previousIdx = USHRT_MAX;
    9346:	2101      	movs	r1, #1
    9348:	4249      	negs	r1, r1
    934a:	80e9      	strh	r1, [r5, #6]
            updateFileMap.counter = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
    934c:	9202      	str	r2, [sp, #8]
            updateFileMap.memId = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId;
    934e:	aa02      	add	r2, sp, #8
    9350:	8093      	strh	r3, [r2, #4]
            updateFileMap.rowIdx = rowIdx;
    9352:	80d7      	strh	r7, [r2, #6]
            pdsUpdateFileMap(&updateFileMap);
    9354:	0010      	movs	r0, r2
    9356:	47c0      	blx	r8
    9358:	e7dd      	b.n	9316 <pdsWlInit+0x46>
    pdsUpdateRowMap();
    935a:	4b07      	ldr	r3, [pc, #28]	; (9378 <pdsWlInit+0xa8>)
    935c:	4798      	blx	r3
	return PDS_OK;
    935e:	e7c0      	b.n	92e2 <pdsWlInit+0x12>
    9360:	00008e45 	.word	0x00008e45
    9364:	20000e04 	.word	0x20000e04
    9368:	00013ee1 	.word	0x00013ee1
    936c:	20000de8 	.word	0x20000de8
    9370:	00008e85 	.word	0x00008e85
    9374:	00009205 	.word	0x00009205
    9378:	000091ad 	.word	0x000091ad

0000937c <pdsWlWrite>:
{
    937c:	b5f0      	push	{r4, r5, r6, r7, lr}
    937e:	46ce      	mov	lr, r9
    9380:	4647      	mov	r7, r8
    9382:	b580      	push	{r7, lr}
    9384:	b083      	sub	sp, #12
    9386:	0005      	movs	r5, r0
    9388:	000f      	movs	r7, r1
    938a:	4690      	mov	r8, r2
    938c:	4e32      	ldr	r6, [pc, #200]	; (9458 <pdsWlWrite+0xdc>)
    938e:	0033      	movs	r3, r6
******************************************************************************/
static uint16_t pdsReturnFreeRowIdx(void)
{
    uint8_t rowIdx;
    bool found = 0;
    for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    9390:	2400      	movs	r4, #0
    {
        if( (UINT_MAX == rowMap[rowIdx].counter) &&
    9392:	4832      	ldr	r0, [pc, #200]	; (945c <pdsWlWrite+0xe0>)
    9394:	e004      	b.n	93a0 <pdsWlWrite+0x24>
    for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    9396:	3401      	adds	r4, #1
    9398:	b2e4      	uxtb	r4, r4
    939a:	3308      	adds	r3, #8
    939c:	2c20      	cmp	r4, #32
    939e:	d055      	beq.n	944c <pdsWlWrite+0xd0>
        if( (UINT_MAX == rowMap[rowIdx].counter) &&
    93a0:	6819      	ldr	r1, [r3, #0]
    93a2:	3101      	adds	r1, #1
    93a4:	d1f7      	bne.n	9396 <pdsWlWrite+0x1a>
    93a6:	88d9      	ldrh	r1, [r3, #6]
    93a8:	4281      	cmp	r1, r0
    93aa:	d1f4      	bne.n	9396 <pdsWlWrite+0x1a>
            (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
    93ac:	889a      	ldrh	r2, [r3, #4]
    93ae:	4282      	cmp	r2, r0
    93b0:	d1f1      	bne.n	9396 <pdsWlWrite+0x1a>
            {
                break;
            }
        }
    }
	return rowIdx;
    93b2:	b2a3      	uxth	r3, r4
    93b4:	4699      	mov	r9, r3
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter++;
    93b6:	7a7e      	ldrb	r6, [r7, #9]
    93b8:	7abb      	ldrb	r3, [r7, #10]
    93ba:	021b      	lsls	r3, r3, #8
    93bc:	4333      	orrs	r3, r6
    93be:	7afe      	ldrb	r6, [r7, #11]
    93c0:	0436      	lsls	r6, r6, #16
    93c2:	4333      	orrs	r3, r6
    93c4:	7b3e      	ldrb	r6, [r7, #12]
    93c6:	0636      	lsls	r6, r6, #24
    93c8:	431e      	orrs	r6, r3
    93ca:	3601      	adds	r6, #1
    93cc:	727e      	strb	r6, [r7, #9]
    93ce:	0a32      	lsrs	r2, r6, #8
    93d0:	72ba      	strb	r2, [r7, #10]
    93d2:	0c32      	lsrs	r2, r6, #16
    93d4:	72fa      	strb	r2, [r7, #11]
    93d6:	0e32      	lsrs	r2, r6, #24
    93d8:	733a      	strb	r2, [r7, #12]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId = pdsFileItemIdx;
    93da:	b2ad      	uxth	r5, r5
    93dc:	71fd      	strb	r5, [r7, #7]
    93de:	2200      	movs	r2, #0
    93e0:	723a      	strb	r2, [r7, #8]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.magicNo = PDS_MAGIC;
    93e2:	23a5      	movs	r3, #165	; 0xa5
    93e4:	713b      	strb	r3, [r7, #4]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.version = PDS_WL_VERSION;
    93e6:	3ba4      	subs	r3, #164	; 0xa4
    93e8:	717b      	strb	r3, [r7, #5]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.size = size;
    93ea:	4643      	mov	r3, r8
    93ec:	71bb      	strb	r3, [r7, #6]
	size += sizeof(PdsWlHeader_t);
    93ee:	4642      	mov	r2, r8
    93f0:	3209      	adds	r2, #9
	status = pdsNvmWrite(rowIdx, buffer, size);
    93f2:	b292      	uxth	r2, r2
    93f4:	0039      	movs	r1, r7
    93f6:	4648      	mov	r0, r9
    93f8:	4b19      	ldr	r3, [pc, #100]	; (9460 <pdsWlWrite+0xe4>)
    93fa:	4798      	blx	r3
    93fc:	1e07      	subs	r7, r0, #0
	if (PDS_OK == status)
    93fe:	d014      	beq.n	942a <pdsWlWrite+0xae>
}
    9400:	0038      	movs	r0, r7
    9402:	b003      	add	sp, #12
    9404:	bc0c      	pop	{r2, r3}
    9406:	4690      	mov	r8, r2
    9408:	4699      	mov	r9, r3
    940a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    940c:	3401      	adds	r4, #1
    940e:	b2e4      	uxtb	r4, r4
    9410:	3608      	adds	r6, #8
    9412:	2c20      	cmp	r4, #32
    9414:	d0cd      	beq.n	93b2 <pdsWlWrite+0x36>
            if( (UINT_MAX == rowMap[rowIdx].counter) &&
    9416:	6832      	ldr	r2, [r6, #0]
    9418:	3201      	adds	r2, #1
    941a:	d1f7      	bne.n	940c <pdsWlWrite+0x90>
    941c:	88f2      	ldrh	r2, [r6, #6]
    941e:	428a      	cmp	r2, r1
    9420:	d1f4      	bne.n	940c <pdsWlWrite+0x90>
                (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
    9422:	88b3      	ldrh	r3, [r6, #4]
    9424:	428b      	cmp	r3, r1
    9426:	d1f1      	bne.n	940c <pdsWlWrite+0x90>
    9428:	e7c3      	b.n	93b2 <pdsWlWrite+0x36>
		rowMap[rowIdx].counter = counter;
    942a:	4b0b      	ldr	r3, [pc, #44]	; (9458 <pdsWlWrite+0xdc>)
    942c:	00e4      	lsls	r4, r4, #3
    942e:	50e6      	str	r6, [r4, r3]
		rowMap[rowIdx].memId = pdsFileItemIdx;
    9430:	191c      	adds	r4, r3, r4
    9432:	80a5      	strh	r5, [r4, #4]
		rowMap[rowIdx].previousIdx = USHRT_MAX;
    9434:	2301      	movs	r3, #1
    9436:	425b      	negs	r3, r3
    9438:	80e3      	strh	r3, [r4, #6]
		updateFileMap.counter = rowMap[rowIdx].counter;
    943a:	9600      	str	r6, [sp, #0]
		updateFileMap.memId = rowMap[rowIdx].memId;
    943c:	466b      	mov	r3, sp
    943e:	809d      	strh	r5, [r3, #4]
		updateFileMap.rowIdx = rowIdx;
    9440:	464a      	mov	r2, r9
    9442:	80da      	strh	r2, [r3, #6]
		pdsUpdateFileMap(&updateFileMap);
    9444:	4668      	mov	r0, sp
    9446:	4b07      	ldr	r3, [pc, #28]	; (9464 <pdsWlWrite+0xe8>)
    9448:	4798      	blx	r3
	return status;
    944a:	e7d9      	b.n	9400 <pdsWlWrite+0x84>
        pdsUpdateRowMap();
    944c:	4b06      	ldr	r3, [pc, #24]	; (9468 <pdsWlWrite+0xec>)
    944e:	4798      	blx	r3
        for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    9450:	2400      	movs	r4, #0
            if( (UINT_MAX == rowMap[rowIdx].counter) &&
    9452:	4902      	ldr	r1, [pc, #8]	; (945c <pdsWlWrite+0xe0>)
    9454:	e7df      	b.n	9416 <pdsWlWrite+0x9a>
    9456:	46c0      	nop			; (mov r8, r8)
    9458:	20000e04 	.word	0x20000e04
    945c:	0000ffff 	.word	0x0000ffff
    9460:	00008f1d 	.word	0x00008f1d
    9464:	00009205 	.word	0x00009205
    9468:	000091ad 	.word	0x000091ad

0000946c <pdsWlRead>:
{
    946c:	b510      	push	{r4, lr}
	uint16_t rowIdx = fileMap[pdsFileItemIdx].maxCounterRowIdx;
    946e:	0040      	lsls	r0, r0, #1
    9470:	4b06      	ldr	r3, [pc, #24]	; (948c <pdsWlRead+0x20>)
    9472:	5ac3      	ldrh	r3, [r0, r3]
	if (USHRT_MAX == rowIdx)
    9474:	4c06      	ldr	r4, [pc, #24]	; (9490 <pdsWlRead+0x24>)
		return PDS_NOT_FOUND;
    9476:	2003      	movs	r0, #3
	if (USHRT_MAX == rowIdx)
    9478:	42a3      	cmp	r3, r4
    947a:	d100      	bne.n	947e <pdsWlRead+0x12>
}
    947c:	bd10      	pop	{r4, pc}
	size += sizeof(PdsWlHeader_t);
    947e:	3209      	adds	r2, #9
	status = pdsNvmRead(rowIdx, buffer, size);
    9480:	b292      	uxth	r2, r2
    9482:	0018      	movs	r0, r3
    9484:	4b03      	ldr	r3, [pc, #12]	; (9494 <pdsWlRead+0x28>)
    9486:	4798      	blx	r3
	return status;
    9488:	e7f8      	b.n	947c <pdsWlRead+0x10>
    948a:	46c0      	nop			; (mov r8, r8)
    948c:	20000de8 	.word	0x20000de8
    9490:	0000ffff 	.word	0x0000ffff
    9494:	00008e85 	.word	0x00008e85

00009498 <hwTimerExpiryCallback>:
    swtimerProcessOverflow();
}

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
    9498:	b510      	push	{r4, lr}
    if (0 < runningTimers)
    949a:	4b06      	ldr	r3, [pc, #24]	; (94b4 <hwTimerExpiryCallback+0x1c>)
    949c:	781b      	ldrb	r3, [r3, #0]
    949e:	2b00      	cmp	r3, #0
    94a0:	d100      	bne.n	94a4 <hwTimerExpiryCallback+0xc>
    {
        isTimerTriggered = true;
        SYSTEM_PostTask(TIMER_TASK_ID);
    }
}
    94a2:	bd10      	pop	{r4, pc}
        isTimerTriggered = true;
    94a4:	2201      	movs	r2, #1
    94a6:	4b04      	ldr	r3, [pc, #16]	; (94b8 <hwTimerExpiryCallback+0x20>)
    94a8:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
    94aa:	2001      	movs	r0, #1
    94ac:	4b03      	ldr	r3, [pc, #12]	; (94bc <hwTimerExpiryCallback+0x24>)
    94ae:	4798      	blx	r3
}
    94b0:	e7f7      	b.n	94a2 <hwTimerExpiryCallback+0xa>
    94b2:	46c0      	nop			; (mov r8, r8)
    94b4:	20000f14 	.word	0x20000f14
    94b8:	200017c2 	.word	0x200017c2
    94bc:	00009dc1 	.word	0x00009dc1

000094c0 <hwTimerOverflowCallback>:
{
    94c0:	b510      	push	{r4, lr}
    94c2:	b082      	sub	sp, #8
    uint16_t temp = sysTime;
    94c4:	4924      	ldr	r1, [pc, #144]	; (9558 <hwTimerOverflowCallback+0x98>)
    94c6:	880a      	ldrh	r2, [r1, #0]
    94c8:	b292      	uxth	r2, r2
    if (++sysTime < temp)
    94ca:	880b      	ldrh	r3, [r1, #0]
    94cc:	3301      	adds	r3, #1
    94ce:	b29b      	uxth	r3, r3
    94d0:	800b      	strh	r3, [r1, #0]
    94d2:	429a      	cmp	r2, r3
    94d4:	d903      	bls.n	94de <hwTimerOverflowCallback+0x1e>
        sysTimeOvf++;
    94d6:	4a21      	ldr	r2, [pc, #132]	; (955c <hwTimerOverflowCallback+0x9c>)
    94d8:	6813      	ldr	r3, [r2, #0]
    94da:	3301      	adds	r3, #1
    94dc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    94de:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    94e2:	425a      	negs	r2, r3
    94e4:	4153      	adcs	r3, r2
    94e6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    94e8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    94ea:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    94ee:	2200      	movs	r2, #0
    94f0:	4b1b      	ldr	r3, [pc, #108]	; (9560 <hwTimerOverflowCallback+0xa0>)
    94f2:	701a      	strb	r2, [r3, #0]
	return flags;
    94f4:	9c01      	ldr	r4, [sp, #4]
{
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
    94f6:	4b1b      	ldr	r3, [pc, #108]	; (9564 <hwTimerOverflowCallback+0xa4>)
    94f8:	681b      	ldr	r3, [r3, #0]
    94fa:	2bff      	cmp	r3, #255	; 0xff
    94fc:	d00d      	beq.n	951a <hwTimerOverflowCallback+0x5a>
    94fe:	0119      	lsls	r1, r3, #4
    9500:	4a19      	ldr	r2, [pc, #100]	; (9568 <hwTimerOverflowCallback+0xa8>)
    9502:	1852      	adds	r2, r2, r1
    9504:	7b52      	ldrb	r2, [r2, #13]
    9506:	2a00      	cmp	r2, #0
    9508:	d107      	bne.n	951a <hwTimerOverflowCallback+0x5a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
    950a:	4a17      	ldr	r2, [pc, #92]	; (9568 <hwTimerOverflowCallback+0xa8>)
    950c:	5888      	ldr	r0, [r1, r2]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);

        if (tmoHigh16 == sysTime)
    950e:	4b12      	ldr	r3, [pc, #72]	; (9558 <hwTimerOverflowCallback+0x98>)
    9510:	881b      	ldrh	r3, [r3, #0]
    9512:	b29b      	uxth	r3, r3
    9514:	0c02      	lsrs	r2, r0, #16
    9516:	429a      	cmp	r2, r3
    9518:	d00a      	beq.n	9530 <hwTimerOverflowCallback+0x70>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    951a:	23ff      	movs	r3, #255	; 0xff
    951c:	4223      	tst	r3, r4
    951e:	d005      	beq.n	952c <hwTimerOverflowCallback+0x6c>
		cpu_irq_enable();
    9520:	2201      	movs	r2, #1
    9522:	4b0f      	ldr	r3, [pc, #60]	; (9560 <hwTimerOverflowCallback+0xa0>)
    9524:	701a      	strb	r2, [r3, #0]
    9526:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    952a:	b662      	cpsie	i
}
    952c:	b002      	add	sp, #8
    952e:	bd10      	pop	{r4, pc}
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
    9530:	b280      	uxth	r0, r0
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
    9532:	28ff      	cmp	r0, #255	; 0xff
    9534:	d909      	bls.n	954a <hwTimerOverflowCallback+0x8a>
            {
                common_tc_delay(tmoLow16);
    9536:	4b0d      	ldr	r3, [pc, #52]	; (956c <hwTimerOverflowCallback+0xac>)
    9538:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
    953a:	4b0a      	ldr	r3, [pc, #40]	; (9564 <hwTimerOverflowCallback+0xa4>)
    953c:	681a      	ldr	r2, [r3, #0]
    953e:	0112      	lsls	r2, r2, #4
    9540:	4b09      	ldr	r3, [pc, #36]	; (9568 <hwTimerOverflowCallback+0xa8>)
    9542:	189b      	adds	r3, r3, r2
    9544:	2201      	movs	r2, #1
    9546:	735a      	strb	r2, [r3, #13]
    9548:	e7e7      	b.n	951a <hwTimerOverflowCallback+0x5a>
            }
            else
            {
                isTimerTriggered = true;
    954a:	2201      	movs	r2, #1
    954c:	4b08      	ldr	r3, [pc, #32]	; (9570 <hwTimerOverflowCallback+0xb0>)
    954e:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
    9550:	2001      	movs	r0, #1
    9552:	4b08      	ldr	r3, [pc, #32]	; (9574 <hwTimerOverflowCallback+0xb4>)
    9554:	4798      	blx	r3
    9556:	e7e0      	b.n	951a <hwTimerOverflowCallback+0x5a>
    9558:	200017c0 	.word	0x200017c0
    955c:	200017c4 	.word	0x200017c4
    9560:	20000008 	.word	0x20000008
    9564:	20000f10 	.word	0x20000f10
    9568:	20001630 	.word	0x20001630
    956c:	0000abc9 	.word	0x0000abc9
    9570:	200017c2 	.word	0x200017c2
    9574:	00009dc1 	.word	0x00009dc1

00009578 <loadHwTimer>:
{
    9578:	b570      	push	{r4, r5, r6, lr}
    957a:	0004      	movs	r4, r0
    if (SWTIMER_INVALID != timerId)
    957c:	28ff      	cmp	r0, #255	; 0xff
    957e:	d030      	beq.n	95e2 <loadHwTimer+0x6a>
    time |= ((uint64_t) sysTimeOvf) << 32;
    9580:	4b19      	ldr	r3, [pc, #100]	; (95e8 <loadHwTimer+0x70>)
    9582:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    9584:	4b19      	ldr	r3, [pc, #100]	; (95ec <loadHwTimer+0x74>)
    9586:	881d      	ldrh	r5, [r3, #0]
    9588:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    958a:	4b19      	ldr	r3, [pc, #100]	; (95f0 <loadHwTimer+0x78>)
    958c:	4798      	blx	r3
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
    958e:	0123      	lsls	r3, r4, #4
    time |= (uint64_t) common_tc_read_count();
    9590:	4328      	orrs	r0, r5
    return ((t2 - t1) < INT32_MAX);
    9592:	4a18      	ldr	r2, [pc, #96]	; (95f4 <loadHwTimer+0x7c>)
    9594:	589b      	ldr	r3, [r3, r2]
    9596:	1a18      	subs	r0, r3, r0
        if (swtimerCompareTime(now, expiryTime))
    9598:	4b17      	ldr	r3, [pc, #92]	; (95f8 <loadHwTimer+0x80>)
    959a:	4298      	cmp	r0, r3
    959c:	d81a      	bhi.n	95d4 <loadHwTimer+0x5c>
            if (!swTimers[timerId].loaded)
    959e:	0122      	lsls	r2, r4, #4
    95a0:	4b14      	ldr	r3, [pc, #80]	; (95f4 <loadHwTimer+0x7c>)
    95a2:	189b      	adds	r3, r3, r2
    95a4:	7b5b      	ldrb	r3, [r3, #13]
    95a6:	2b00      	cmp	r3, #0
    95a8:	d11d      	bne.n	95e6 <loadHwTimer+0x6e>
                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
    95aa:	28ff      	cmp	r0, #255	; 0xff
    95ac:	d90b      	bls.n	95c6 <loadHwTimer+0x4e>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
    95ae:	4b13      	ldr	r3, [pc, #76]	; (95fc <loadHwTimer+0x84>)
    95b0:	4298      	cmp	r0, r3
    95b2:	d818      	bhi.n	95e6 <loadHwTimer+0x6e>
                    common_tc_delay((uint16_t)timeDiff);
    95b4:	b280      	uxth	r0, r0
    95b6:	4b12      	ldr	r3, [pc, #72]	; (9600 <loadHwTimer+0x88>)
    95b8:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
    95ba:	0124      	lsls	r4, r4, #4
    95bc:	4b0d      	ldr	r3, [pc, #52]	; (95f4 <loadHwTimer+0x7c>)
    95be:	191c      	adds	r4, r3, r4
    95c0:	2301      	movs	r3, #1
    95c2:	7363      	strb	r3, [r4, #13]
    95c4:	e00f      	b.n	95e6 <loadHwTimer+0x6e>
                    isTimerTriggered = true;
    95c6:	2201      	movs	r2, #1
    95c8:	4b0e      	ldr	r3, [pc, #56]	; (9604 <loadHwTimer+0x8c>)
    95ca:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
    95cc:	2001      	movs	r0, #1
    95ce:	4b0e      	ldr	r3, [pc, #56]	; (9608 <loadHwTimer+0x90>)
    95d0:	4798      	blx	r3
    95d2:	e008      	b.n	95e6 <loadHwTimer+0x6e>
            isTimerTriggered = true;
    95d4:	2201      	movs	r2, #1
    95d6:	4b0b      	ldr	r3, [pc, #44]	; (9604 <loadHwTimer+0x8c>)
    95d8:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    95da:	2001      	movs	r0, #1
    95dc:	4b0a      	ldr	r3, [pc, #40]	; (9608 <loadHwTimer+0x90>)
    95de:	4798      	blx	r3
    95e0:	e001      	b.n	95e6 <loadHwTimer+0x6e>
        common_tc_compare_stop();
    95e2:	4b0a      	ldr	r3, [pc, #40]	; (960c <loadHwTimer+0x94>)
    95e4:	4798      	blx	r3
}
    95e6:	bd70      	pop	{r4, r5, r6, pc}
    95e8:	200017c4 	.word	0x200017c4
    95ec:	200017c0 	.word	0x200017c0
    95f0:	0000ab21 	.word	0x0000ab21
    95f4:	20001630 	.word	0x20001630
    95f8:	7ffffffe 	.word	0x7ffffffe
    95fc:	0000ffff 	.word	0x0000ffff
    9600:	0000abc9 	.word	0x0000abc9
    9604:	200017c2 	.word	0x200017c2
    9608:	00009dc1 	.word	0x00009dc1
    960c:	0000ab6d 	.word	0x0000ab6d

00009610 <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
    9610:	b510      	push	{r4, lr}
    if (isTimerTriggered)
    9612:	4b1d      	ldr	r3, [pc, #116]	; (9688 <swtimerInternalHandler+0x78>)
    9614:	781b      	ldrb	r3, [r3, #0]
    9616:	2b00      	cmp	r3, #0
    9618:	d027      	beq.n	966a <swtimerInternalHandler+0x5a>
    {
        isTimerTriggered = false;
    961a:	2200      	movs	r2, #0
    961c:	4b1a      	ldr	r3, [pc, #104]	; (9688 <swtimerInternalHandler+0x78>)
    961e:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
    9620:	4b1a      	ldr	r3, [pc, #104]	; (968c <swtimerInternalHandler+0x7c>)
    9622:	781b      	ldrb	r3, [r3, #0]
    9624:	2b00      	cmp	r3, #0
    9626:	d020      	beq.n	966a <swtimerInternalHandler+0x5a>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    9628:	4b19      	ldr	r3, [pc, #100]	; (9690 <swtimerInternalHandler+0x80>)
    962a:	681b      	ldr	r3, [r3, #0]
    962c:	2bff      	cmp	r3, #255	; 0xff
    962e:	d01d      	beq.n	966c <swtimerInternalHandler+0x5c>
                expiredTimerQueueHead = runningTimerQueueHead;
                expiredTimerQueueTail = runningTimerQueueHead;
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
    9630:	4b18      	ldr	r3, [pc, #96]	; (9694 <swtimerInternalHandler+0x84>)
    9632:	6818      	ldr	r0, [r3, #0]
    9634:	4918      	ldr	r1, [pc, #96]	; (9698 <swtimerInternalHandler+0x88>)
    9636:	680b      	ldr	r3, [r1, #0]
    9638:	011a      	lsls	r2, r3, #4
    963a:	4b18      	ldr	r3, [pc, #96]	; (969c <swtimerInternalHandler+0x8c>)
    963c:	189b      	adds	r3, r3, r2
    963e:	7318      	strb	r0, [r3, #12]
                expiredTimerQueueTail = runningTimerQueueHead;
    9640:	6008      	str	r0, [r1, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
    9642:	4a16      	ldr	r2, [pc, #88]	; (969c <swtimerInternalHandler+0x8c>)
    9644:	4913      	ldr	r1, [pc, #76]	; (9694 <swtimerInternalHandler+0x84>)
    9646:	680b      	ldr	r3, [r1, #0]
    9648:	011b      	lsls	r3, r3, #4
    964a:	18d3      	adds	r3, r2, r3
    964c:	7b18      	ldrb	r0, [r3, #12]
    964e:	6008      	str	r0, [r1, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
    9650:	4b11      	ldr	r3, [pc, #68]	; (9698 <swtimerInternalHandler+0x88>)
    9652:	681b      	ldr	r3, [r3, #0]
    9654:	011b      	lsls	r3, r3, #4
    9656:	18d2      	adds	r2, r2, r3
    9658:	23ff      	movs	r3, #255	; 0xff
    965a:	7313      	strb	r3, [r2, #12]

            if ((--runningTimers) > 0)
    965c:	4a0b      	ldr	r2, [pc, #44]	; (968c <swtimerInternalHandler+0x7c>)
    965e:	7813      	ldrb	r3, [r2, #0]
    9660:	3b01      	subs	r3, #1
    9662:	b2db      	uxtb	r3, r3
    9664:	7013      	strb	r3, [r2, #0]
    9666:	2b00      	cmp	r3, #0
    9668:	d10b      	bne.n	9682 <swtimerInternalHandler+0x72>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
            }
        }
    }
}
    966a:	bd10      	pop	{r4, pc}
                (expiredTimerQueueTail == SWTIMER_INVALID))
    966c:	4b0a      	ldr	r3, [pc, #40]	; (9698 <swtimerInternalHandler+0x88>)
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    966e:	681b      	ldr	r3, [r3, #0]
    9670:	2bff      	cmp	r3, #255	; 0xff
    9672:	d1dd      	bne.n	9630 <swtimerInternalHandler+0x20>
                expiredTimerQueueHead = runningTimerQueueHead;
    9674:	4b07      	ldr	r3, [pc, #28]	; (9694 <swtimerInternalHandler+0x84>)
    9676:	681b      	ldr	r3, [r3, #0]
    9678:	4a05      	ldr	r2, [pc, #20]	; (9690 <swtimerInternalHandler+0x80>)
    967a:	6013      	str	r3, [r2, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    967c:	4a06      	ldr	r2, [pc, #24]	; (9698 <swtimerInternalHandler+0x88>)
    967e:	6013      	str	r3, [r2, #0]
    9680:	e7df      	b.n	9642 <swtimerInternalHandler+0x32>
                loadHwTimer(runningTimerQueueHead);
    9682:	4b07      	ldr	r3, [pc, #28]	; (96a0 <swtimerInternalHandler+0x90>)
    9684:	4798      	blx	r3
}
    9686:	e7f0      	b.n	966a <swtimerInternalHandler+0x5a>
    9688:	200017c2 	.word	0x200017c2
    968c:	20000f14 	.word	0x20000f14
    9690:	20000f08 	.word	0x20000f08
    9694:	20000f10 	.word	0x20000f10
    9698:	20000f0c 	.word	0x20000f0c
    969c:	20001630 	.word	0x20001630
    96a0:	00009579 	.word	0x00009579

000096a4 <SwTimerReset>:
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
    96a4:	2300      	movs	r3, #0
    96a6:	4a0d      	ldr	r2, [pc, #52]	; (96dc <SwTimerReset+0x38>)
    96a8:	7013      	strb	r3, [r2, #0]
    isTimerTriggered = false;
    96aa:	4a0d      	ldr	r2, [pc, #52]	; (96e0 <SwTimerReset+0x3c>)
    96ac:	7013      	strb	r3, [r2, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
    96ae:	33ff      	adds	r3, #255	; 0xff
    96b0:	4a0c      	ldr	r2, [pc, #48]	; (96e4 <SwTimerReset+0x40>)
    96b2:	6013      	str	r3, [r2, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
    96b4:	4a0c      	ldr	r2, [pc, #48]	; (96e8 <SwTimerReset+0x44>)
    96b6:	6013      	str	r3, [r2, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
    96b8:	4a0c      	ldr	r2, [pc, #48]	; (96ec <SwTimerReset+0x48>)
    96ba:	6013      	str	r3, [r2, #0]
    96bc:	4b0c      	ldr	r3, [pc, #48]	; (96f0 <SwTimerReset+0x4c>)
    96be:	0018      	movs	r0, r3
    96c0:	3091      	adds	r0, #145	; 0x91
    96c2:	30ff      	adds	r0, #255	; 0xff

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
    96c4:	21ff      	movs	r1, #255	; 0xff
        swTimers[index].timerCb = NULL;
    96c6:	2200      	movs	r2, #0
        swTimers[index].nextTimer = SWTIMER_INVALID;
    96c8:	7219      	strb	r1, [r3, #8]
        swTimers[index].timerCb = NULL;
    96ca:	601a      	str	r2, [r3, #0]
    96cc:	3310      	adds	r3, #16
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    96ce:	4283      	cmp	r3, r0
    96d0:	d1fa      	bne.n	96c8 <SwTimerReset+0x24>
    }

    allocatedTimerId = 0u;
    96d2:	2200      	movs	r2, #0
    96d4:	4b07      	ldr	r3, [pc, #28]	; (96f4 <SwTimerReset+0x50>)
    96d6:	701a      	strb	r2, [r3, #0]
}
    96d8:	4770      	bx	lr
    96da:	46c0      	nop			; (mov r8, r8)
    96dc:	20000f14 	.word	0x20000f14
    96e0:	200017c2 	.word	0x200017c2
    96e4:	20000f10 	.word	0x20000f10
    96e8:	20000f08 	.word	0x20000f08
    96ec:	20000f0c 	.word	0x20000f0c
    96f0:	20001634 	.word	0x20001634
    96f4:	20000f04 	.word	0x20000f04

000096f8 <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
    96f8:	b510      	push	{r4, lr}
    SwTimerReset();
    96fa:	4b08      	ldr	r3, [pc, #32]	; (971c <SystemTimerInit+0x24>)
    96fc:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = sysTime = 0u;
    96fe:	2300      	movs	r3, #0
    9700:	4a07      	ldr	r2, [pc, #28]	; (9720 <SystemTimerInit+0x28>)
    9702:	8013      	strh	r3, [r2, #0]
    9704:	4a07      	ldr	r2, [pc, #28]	; (9724 <SystemTimerInit+0x2c>)
    9706:	6013      	str	r3, [r2, #0]

    common_tc_init();
    9708:	4b07      	ldr	r3, [pc, #28]	; (9728 <SystemTimerInit+0x30>)
    970a:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    970c:	4807      	ldr	r0, [pc, #28]	; (972c <SystemTimerInit+0x34>)
    970e:	4b08      	ldr	r3, [pc, #32]	; (9730 <SystemTimerInit+0x38>)
    9710:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    9712:	4808      	ldr	r0, [pc, #32]	; (9734 <SystemTimerInit+0x3c>)
    9714:	4b08      	ldr	r3, [pc, #32]	; (9738 <SystemTimerInit+0x40>)
    9716:	4798      	blx	r3
}
    9718:	bd10      	pop	{r4, pc}
    971a:	46c0      	nop			; (mov r8, r8)
    971c:	000096a5 	.word	0x000096a5
    9720:	200017c0 	.word	0x200017c0
    9724:	200017c4 	.word	0x200017c4
    9728:	0000ac35 	.word	0x0000ac35
    972c:	000094c1 	.word	0x000094c1
    9730:	0000acb9 	.word	0x0000acb9
    9734:	00009499 	.word	0x00009499
    9738:	0000acc5 	.word	0x0000acc5

0000973c <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
    973c:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    973e:	4b05      	ldr	r3, [pc, #20]	; (9754 <SwTimerGetTime+0x18>)
    9740:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    9742:	4b05      	ldr	r3, [pc, #20]	; (9758 <SwTimerGetTime+0x1c>)
    9744:	881d      	ldrh	r5, [r3, #0]
    9746:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    9748:	4b04      	ldr	r3, [pc, #16]	; (975c <SwTimerGetTime+0x20>)
    974a:	4798      	blx	r3
    974c:	4328      	orrs	r0, r5
    return gettime();
}
    974e:	0021      	movs	r1, r4
    9750:	bd70      	pop	{r4, r5, r6, pc}
    9752:	46c0      	nop			; (mov r8, r8)
    9754:	200017c4 	.word	0x200017c4
    9758:	200017c0 	.word	0x200017c0
    975c:	0000ab21 	.word	0x0000ab21

00009760 <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
    9760:	b510      	push	{r4, lr}
    9762:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    9764:	4b08      	ldr	r3, [pc, #32]	; (9788 <SwTimerCreate+0x28>)
    9766:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    9768:	2014      	movs	r0, #20
    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    976a:	2b18      	cmp	r3, #24
    976c:	d900      	bls.n	9770 <SwTimerCreate+0x10>
    }

    return retVal;
}
    976e:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    9770:	4b06      	ldr	r3, [pc, #24]	; (978c <SwTimerCreate+0x2c>)
    9772:	4798      	blx	r3
        *timerId = allocatedTimerId;
    9774:	4a04      	ldr	r2, [pc, #16]	; (9788 <SwTimerCreate+0x28>)
    9776:	7813      	ldrb	r3, [r2, #0]
    9778:	7023      	strb	r3, [r4, #0]
        allocatedTimerId++;
    977a:	3301      	adds	r3, #1
    977c:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    977e:	4b04      	ldr	r3, [pc, #16]	; (9790 <SwTimerCreate+0x30>)
    9780:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    9782:	2008      	movs	r0, #8
    9784:	e7f3      	b.n	976e <SwTimerCreate+0xe>
    9786:	46c0      	nop			; (mov r8, r8)
    9788:	20000f04 	.word	0x20000f04
    978c:	00003389 	.word	0x00003389
    9790:	00003395 	.word	0x00003395

00009794 <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
    9794:	b5f0      	push	{r4, r5, r6, r7, lr}
    9796:	46d6      	mov	lr, sl
    9798:	464f      	mov	r7, r9
    979a:	4646      	mov	r6, r8
    979c:	b5c0      	push	{r6, r7, lr}
    979e:	b084      	sub	sp, #16
    97a0:	0007      	movs	r7, r0
    97a2:	000d      	movs	r5, r1
    97a4:	0016      	movs	r6, r2
    97a6:	001c      	movs	r4, r3
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    97a8:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    97aa:	2f18      	cmp	r7, #24
    97ac:	d809      	bhi.n	97c2 <SwTimerStart+0x2e>
    97ae:	2b00      	cmp	r3, #0
    97b0:	d100      	bne.n	97b4 <SwTimerStart+0x20>
    97b2:	e08c      	b.n	98ce <SwTimerStart+0x13a>
    }

    if (NULL != swTimers[timerId].timerCb)
    97b4:	013a      	lsls	r2, r7, #4
    97b6:	4b52      	ldr	r3, [pc, #328]	; (9900 <SwTimerStart+0x16c>)
    97b8:	189b      	adds	r3, r3, r2
    97ba:	685b      	ldr	r3, [r3, #4]
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
    97bc:	300b      	adds	r0, #11
    if (NULL != swTimers[timerId].timerCb)
    97be:	2b00      	cmp	r3, #0
    97c0:	d005      	beq.n	97ce <SwTimerStart+0x3a>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    return LORAWAN_SUCCESS;
}
    97c2:	b004      	add	sp, #16
    97c4:	bc1c      	pop	{r2, r3, r4}
    97c6:	4690      	mov	r8, r2
    97c8:	4699      	mov	r9, r3
    97ca:	46a2      	mov	sl, r4
    97cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time |= ((uint64_t) sysTimeOvf) << 32;
    97ce:	4b4d      	ldr	r3, [pc, #308]	; (9904 <SwTimerStart+0x170>)
    97d0:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    97d2:	4b4d      	ldr	r3, [pc, #308]	; (9908 <SwTimerStart+0x174>)
    97d4:	8818      	ldrh	r0, [r3, #0]
    97d6:	0403      	lsls	r3, r0, #16
    97d8:	4698      	mov	r8, r3
    time |= (uint64_t) common_tc_read_count();
    97da:	4b4c      	ldr	r3, [pc, #304]	; (990c <SwTimerStart+0x178>)
    97dc:	4798      	blx	r3
    97de:	4643      	mov	r3, r8
    97e0:	4303      	orrs	r3, r0
    switch (timeoutType)
    97e2:	2e00      	cmp	r6, #0
    97e4:	d003      	beq.n	97ee <SwTimerStart+0x5a>
    97e6:	2e01      	cmp	r6, #1
    97e8:	d038      	beq.n	985c <SwTimerStart+0xc8>
            return LORAWAN_INVALID_PARAMETER;
    97ea:	200a      	movs	r0, #10
    97ec:	e7e9      	b.n	97c2 <SwTimerStart+0x2e>
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    97ee:	4948      	ldr	r1, [pc, #288]	; (9910 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    97f0:	200a      	movs	r0, #10
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    97f2:	002a      	movs	r2, r5
    97f4:	3aff      	subs	r2, #255	; 0xff
            pointInTime = ADD_TIME(timerCount, now);
    97f6:	18ed      	adds	r5, r5, r3
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    97f8:	428a      	cmp	r2, r1
    97fa:	d8e2      	bhi.n	97c2 <SwTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    97fc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    9800:	425a      	negs	r2, r3
    9802:	4153      	adcs	r3, r2
    9804:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    9806:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    9808:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    980c:	2600      	movs	r6, #0
    980e:	4b41      	ldr	r3, [pc, #260]	; (9914 <SwTimerStart+0x180>)
    9810:	701e      	strb	r6, [r3, #0]
	return flags;
    9812:	9b03      	ldr	r3, [sp, #12]
    9814:	4699      	mov	r9, r3
    swtimerInternalHandler();
    9816:	4b40      	ldr	r3, [pc, #256]	; (9918 <SwTimerStart+0x184>)
    9818:	4798      	blx	r3
    swTimers[timerId].absoluteExpiryTime = pointInTime;
    981a:	4b39      	ldr	r3, [pc, #228]	; (9900 <SwTimerStart+0x16c>)
    981c:	013a      	lsls	r2, r7, #4
    981e:	50d5      	str	r5, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
    9820:	189b      	adds	r3, r3, r2
    9822:	605c      	str	r4, [r3, #4]
    swTimers[timerId].paramCb = parameter;
    9824:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9826:	609a      	str	r2, [r3, #8]
    swTimers[timerId].loaded = false;
    9828:	735e      	strb	r6, [r3, #13]
    runningTimers++;
    982a:	4a3c      	ldr	r2, [pc, #240]	; (991c <SwTimerStart+0x188>)
    982c:	7813      	ldrb	r3, [r2, #0]
    982e:	3301      	adds	r3, #1
    9830:	b2db      	uxtb	r3, r3
    9832:	7013      	strb	r3, [r2, #0]
    if (SWTIMER_INVALID == runningTimerQueueHead)
    9834:	4b3a      	ldr	r3, [pc, #232]	; (9920 <SwTimerStart+0x18c>)
    9836:	681b      	ldr	r3, [r3, #0]
    9838:	469a      	mov	sl, r3
    983a:	2bff      	cmp	r3, #255	; 0xff
    983c:	d016      	beq.n	986c <SwTimerStart+0xd8>
        uint8_t currIndex = runningTimerQueueHead;
    983e:	466a      	mov	r2, sp
    9840:	7013      	strb	r3, [r2, #0]
    9842:	7812      	ldrb	r2, [r2, #0]
        for (index = 0; index < runningTimers; index++)
    9844:	4b35      	ldr	r3, [pc, #212]	; (991c <SwTimerStart+0x188>)
    9846:	781b      	ldrb	r3, [r3, #0]
    9848:	2b00      	cmp	r3, #0
    984a:	d042      	beq.n	98d2 <SwTimerStart+0x13e>
    984c:	9200      	str	r2, [sp, #0]
    984e:	2300      	movs	r3, #0
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    9850:	492b      	ldr	r1, [pc, #172]	; (9900 <SwTimerStart+0x16c>)
    9852:	4688      	mov	r8, r1
    9854:	4833      	ldr	r0, [pc, #204]	; (9924 <SwTimerStart+0x190>)
                    currIndex = swTimers[currIndex].nextTimer;
    9856:	468c      	mov	ip, r1
        for (index = 0; index < runningTimers; index++)
    9858:	4c30      	ldr	r4, [pc, #192]	; (991c <SwTimerStart+0x188>)
    985a:	e02a      	b.n	98b2 <SwTimerStart+0x11e>
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    985c:	0028      	movs	r0, r5
    985e:	38ff      	subs	r0, #255	; 0xff
    9860:	1ac3      	subs	r3, r0, r3
    9862:	4a2b      	ldr	r2, [pc, #172]	; (9910 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    9864:	200a      	movs	r0, #10
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    9866:	4293      	cmp	r3, r2
    9868:	d9c8      	bls.n	97fc <SwTimerStart+0x68>
    986a:	e7aa      	b.n	97c2 <SwTimerStart+0x2e>
        runningTimerQueueHead = timerId;
    986c:	4b2c      	ldr	r3, [pc, #176]	; (9920 <SwTimerStart+0x18c>)
    986e:	601f      	str	r7, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
    9870:	0038      	movs	r0, r7
    9872:	4b2d      	ldr	r3, [pc, #180]	; (9928 <SwTimerStart+0x194>)
    9874:	4798      	blx	r3
    9876:	e036      	b.n	98e6 <SwTimerStart+0x152>
                    swTimers[timerId].nextTimer = currIndex;
    9878:	4b21      	ldr	r3, [pc, #132]	; (9900 <SwTimerStart+0x16c>)
    987a:	013c      	lsls	r4, r7, #4
    987c:	191c      	adds	r4, r3, r4
    987e:	7322      	strb	r2, [r4, #12]
                    swTimers[currIndex].loaded = false;
    9880:	9901      	ldr	r1, [sp, #4]
    9882:	0109      	lsls	r1, r1, #4
    9884:	1859      	adds	r1, r3, r1
    9886:	2300      	movs	r3, #0
    9888:	734b      	strb	r3, [r1, #13]
                    if (runningTimerQueueHead == currIndex)
    988a:	4592      	cmp	sl, r2
    988c:	d005      	beq.n	989a <SwTimerStart+0x106>
                        swTimers[prevIndex].nextTimer = timerId;
    988e:	9b00      	ldr	r3, [sp, #0]
    9890:	0118      	lsls	r0, r3, #4
    9892:	4b1b      	ldr	r3, [pc, #108]	; (9900 <SwTimerStart+0x16c>)
    9894:	1818      	adds	r0, r3, r0
    9896:	7307      	strb	r7, [r0, #12]
    9898:	e025      	b.n	98e6 <SwTimerStart+0x152>
                        runningTimerQueueHead = timerId;
    989a:	4b21      	ldr	r3, [pc, #132]	; (9920 <SwTimerStart+0x18c>)
    989c:	601f      	str	r7, [r3, #0]
                        loadHwTimer(runningTimerQueueHead);
    989e:	0038      	movs	r0, r7
    98a0:	4b21      	ldr	r3, [pc, #132]	; (9928 <SwTimerStart+0x194>)
    98a2:	4798      	blx	r3
    98a4:	e01f      	b.n	98e6 <SwTimerStart+0x152>
        for (index = 0; index < runningTimers; index++)
    98a6:	3301      	adds	r3, #1
    98a8:	b2db      	uxtb	r3, r3
    98aa:	7821      	ldrb	r1, [r4, #0]
    98ac:	b2c9      	uxtb	r1, r1
    98ae:	428b      	cmp	r3, r1
    98b0:	d210      	bcs.n	98d4 <SwTimerStart+0x140>
            if (SWTIMER_INVALID != currIndex)
    98b2:	2aff      	cmp	r2, #255	; 0xff
    98b4:	d0f7      	beq.n	98a6 <SwTimerStart+0x112>
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    98b6:	9201      	str	r2, [sp, #4]
    98b8:	0111      	lsls	r1, r2, #4
    return ((t2 - t1) < INT32_MAX);
    98ba:	4646      	mov	r6, r8
    98bc:	5989      	ldr	r1, [r1, r6]
    98be:	1a69      	subs	r1, r5, r1
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    98c0:	4281      	cmp	r1, r0
    98c2:	d8d9      	bhi.n	9878 <SwTimerStart+0xe4>
                    currIndex = swTimers[currIndex].nextTimer;
    98c4:	0111      	lsls	r1, r2, #4
    98c6:	4461      	add	r1, ip
    98c8:	9200      	str	r2, [sp, #0]
    98ca:	7b0a      	ldrb	r2, [r1, #12]
    98cc:	e7eb      	b.n	98a6 <SwTimerStart+0x112>
        return LORAWAN_INVALID_PARAMETER;
    98ce:	200a      	movs	r0, #10
    98d0:	e777      	b.n	97c2 <SwTimerStart+0x2e>
        uint8_t prevIndex = runningTimerQueueHead;
    98d2:	9200      	str	r2, [sp, #0]
            swTimers[prevIndex].nextTimer = timerId;
    98d4:	4b0a      	ldr	r3, [pc, #40]	; (9900 <SwTimerStart+0x16c>)
    98d6:	9a00      	ldr	r2, [sp, #0]
    98d8:	0110      	lsls	r0, r2, #4
    98da:	1818      	adds	r0, r3, r0
    98dc:	7307      	strb	r7, [r0, #12]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
    98de:	013f      	lsls	r7, r7, #4
    98e0:	19df      	adds	r7, r3, r7
    98e2:	23ff      	movs	r3, #255	; 0xff
    98e4:	733b      	strb	r3, [r7, #12]
	if (cpu_irq_is_enabled_flags(flags))
    98e6:	23ff      	movs	r3, #255	; 0xff
    return LORAWAN_SUCCESS;
    98e8:	2008      	movs	r0, #8
    98ea:	464a      	mov	r2, r9
    98ec:	4213      	tst	r3, r2
    98ee:	d100      	bne.n	98f2 <SwTimerStart+0x15e>
    98f0:	e767      	b.n	97c2 <SwTimerStart+0x2e>
		cpu_irq_enable();
    98f2:	2201      	movs	r2, #1
    98f4:	4b07      	ldr	r3, [pc, #28]	; (9914 <SwTimerStart+0x180>)
    98f6:	701a      	strb	r2, [r3, #0]
    98f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    98fc:	b662      	cpsie	i
    98fe:	e760      	b.n	97c2 <SwTimerStart+0x2e>
    9900:	20001630 	.word	0x20001630
    9904:	200017c4 	.word	0x200017c4
    9908:	200017c0 	.word	0x200017c0
    990c:	0000ab21 	.word	0x0000ab21
    9910:	7fffff00 	.word	0x7fffff00
    9914:	20000008 	.word	0x20000008
    9918:	00009611 	.word	0x00009611
    991c:	20000f14 	.word	0x20000f14
    9920:	20000f10 	.word	0x20000f10
    9924:	7ffffffe 	.word	0x7ffffffe
    9928:	00009579 	.word	0x00009579

0000992c <SwTimerIsRunning>:
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
    if (NULL == swTimers[timerId].timerCb)
    992c:	0103      	lsls	r3, r0, #4
    992e:	4803      	ldr	r0, [pc, #12]	; (993c <SwTimerIsRunning+0x10>)
    9930:	18c0      	adds	r0, r0, r3
    9932:	6840      	ldr	r0, [r0, #4]
    9934:	1e43      	subs	r3, r0, #1
    9936:	4198      	sbcs	r0, r3
    9938:	b2c0      	uxtb	r0, r0
    {
        return false;
    }

    return true;
}
    993a:	4770      	bx	lr
    993c:	20001630 	.word	0x20001630

00009940 <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
    9940:	b570      	push	{r4, r5, r6, lr}
    uint32_t remainingTime = 0u;
    uint32_t timerExpiryTime = 0u;
    uint32_t currentSysTime = 0u;
    
    if ( NULL != swTimers[timerId].timerCb )
    9942:	0102      	lsls	r2, r0, #4
    9944:	4b0b      	ldr	r3, [pc, #44]	; (9974 <SwTimerReadValue+0x34>)
    9946:	189b      	adds	r3, r3, r2
    9948:	685b      	ldr	r3, [r3, #4]
    994a:	2b00      	cmp	r3, #0
    994c:	d010      	beq.n	9970 <SwTimerReadValue+0x30>
    {
	    timerExpiryTime = swTimers[timerId].absoluteExpiryTime;
    994e:	4b09      	ldr	r3, [pc, #36]	; (9974 <SwTimerReadValue+0x34>)
    9950:	58d4      	ldr	r4, [r2, r3]
    time |= ((uint64_t) sysTimeOvf) << 32;
    9952:	4b09      	ldr	r3, [pc, #36]	; (9978 <SwTimerReadValue+0x38>)
    9954:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    9956:	4b09      	ldr	r3, [pc, #36]	; (997c <SwTimerReadValue+0x3c>)
    9958:	881d      	ldrh	r5, [r3, #0]
    995a:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    995c:	4b08      	ldr	r3, [pc, #32]	; (9980 <SwTimerReadValue+0x40>)
    995e:	4798      	blx	r3
    9960:	4328      	orrs	r0, r5
	    currentSysTime = (uint32_t) gettime();

	    if ( currentSysTime <= timerExpiryTime )
    9962:	4284      	cmp	r4, r0
    9964:	d202      	bcs.n	996c <SwTimerReadValue+0x2c>
	    {
		    remainingTime = timerExpiryTime - currentSysTime;
	    }
	    else if ( currentSysTime > timerExpiryTime )
	    {
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
    9966:	3c01      	subs	r4, #1
    9968:	1a20      	subs	r0, r4, r0
	    }
    }
    
    return remainingTime;
}
    996a:	bd70      	pop	{r4, r5, r6, pc}
		    remainingTime = timerExpiryTime - currentSysTime;
    996c:	1a20      	subs	r0, r4, r0
    996e:	e7fc      	b.n	996a <SwTimerReadValue+0x2a>
    uint32_t remainingTime = 0u;
    9970:	2000      	movs	r0, #0
    return remainingTime;
    9972:	e7fa      	b.n	996a <SwTimerReadValue+0x2a>
    9974:	20001630 	.word	0x20001630
    9978:	200017c4 	.word	0x200017c4
    997c:	200017c0 	.word	0x200017c0
    9980:	0000ab21 	.word	0x0000ab21

00009984 <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
    9984:	b510      	push	{r4, lr}
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;

    if (SWTIMER_INVALID != runningTimerQueueHead)
    9986:	4b05      	ldr	r3, [pc, #20]	; (999c <SwTimerNextExpiryDuration+0x18>)
    9988:	6818      	ldr	r0, [r3, #0]
    998a:	28ff      	cmp	r0, #255	; 0xff
    998c:	d102      	bne.n	9994 <SwTimerNextExpiryDuration+0x10>
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
    998e:	2001      	movs	r0, #1
    9990:	4240      	negs	r0, r0
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    }

    return duration;
}
    9992:	bd10      	pop	{r4, pc}
        duration = SwTimerReadValue(runningTimerQueueHead);
    9994:	b2c0      	uxtb	r0, r0
    9996:	4b02      	ldr	r3, [pc, #8]	; (99a0 <SwTimerNextExpiryDuration+0x1c>)
    9998:	4798      	blx	r3
    999a:	e7fa      	b.n	9992 <SwTimerNextExpiryDuration+0xe>
    999c:	20000f10 	.word	0x20000f10
    99a0:	00009941 	.word	0x00009941

000099a4 <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
    99a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    99a6:	46de      	mov	lr, fp
    99a8:	4657      	mov	r7, sl
    99aa:	464e      	mov	r6, r9
    99ac:	4645      	mov	r5, r8
    99ae:	b5e0      	push	{r5, r6, r7, lr}
    99b0:	b083      	sub	sp, #12
    time |= ((uint64_t) sysTimeOvf) << 32;
    99b2:	4b2f      	ldr	r3, [pc, #188]	; (9a70 <SwTimersExecute+0xcc>)
    99b4:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    99b6:	4b2f      	ldr	r3, [pc, #188]	; (9a74 <SwTimersExecute+0xd0>)
    99b8:	881b      	ldrh	r3, [r3, #0]
    time |= (uint64_t) common_tc_read_count();
    99ba:	4b2f      	ldr	r3, [pc, #188]	; (9a78 <SwTimersExecute+0xd4>)
    99bc:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    99be:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    99c2:	4253      	negs	r3, r2
    99c4:	4153      	adcs	r3, r2
    99c6:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    99c8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    99ca:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    99ce:	2200      	movs	r2, #0
    99d0:	4b2a      	ldr	r3, [pc, #168]	; (9a7c <SwTimersExecute+0xd8>)
    99d2:	701a      	strb	r2, [r3, #0]
	return flags;
    99d4:	9c00      	ldr	r4, [sp, #0]
    uint64_t now = gettime();

    uint8_t flags = cpu_irq_save();
    swtimerInternalHandler();
    99d6:	4b2a      	ldr	r3, [pc, #168]	; (9a80 <SwTimersExecute+0xdc>)
    99d8:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    99da:	23ff      	movs	r3, #255	; 0xff
    99dc:	4223      	tst	r3, r4
    99de:	d005      	beq.n	99ec <SwTimersExecute+0x48>
		cpu_irq_enable();
    99e0:	2201      	movs	r2, #1
    99e2:	4b26      	ldr	r3, [pc, #152]	; (9a7c <SwTimersExecute+0xd8>)
    99e4:	701a      	strb	r2, [r3, #0]
    99e6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    99ea:	b662      	cpsie	i
	cpu_irq_disable();
    99ec:	4b23      	ldr	r3, [pc, #140]	; (9a7c <SwTimersExecute+0xd8>)
    99ee:	469a      	mov	sl, r3
        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
        {
            flags = cpu_irq_save();

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    99f0:	4c24      	ldr	r4, [pc, #144]	; (9a84 <SwTimersExecute+0xe0>)
    99f2:	4b25      	ldr	r3, [pc, #148]	; (9a88 <SwTimersExecute+0xe4>)
    99f4:	4699      	mov	r9, r3
    99f6:	2200      	movs	r2, #0

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    99f8:	20ff      	movs	r0, #255	; 0xff
            */
            expiredTimerQueueHead = nextExpiredTimer;

            if (SWTIMER_INVALID == expiredTimerQueueHead)
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
    99fa:	4b24      	ldr	r3, [pc, #144]	; (9a8c <SwTimersExecute+0xe8>)
    99fc:	4698      	mov	r8, r3
		cpu_irq_enable();
    99fe:	4b1f      	ldr	r3, [pc, #124]	; (9a7c <SwTimersExecute+0xd8>)
    9a00:	469c      	mov	ip, r3
    9a02:	e004      	b.n	9a0e <SwTimersExecute+0x6a>
    9a04:	4643      	mov	r3, r8
    9a06:	6018      	str	r0, [r3, #0]
    9a08:	e01e      	b.n	9a48 <SwTimersExecute+0xa4>
            }

            cpu_irq_restore(flags);

            if (NULL != callback)
    9a0a:	2e00      	cmp	r6, #0
    9a0c:	d125      	bne.n	9a5a <SwTimersExecute+0xb6>
        while (SWTIMER_INVALID != expiredTimerQueueHead)
    9a0e:	4b1d      	ldr	r3, [pc, #116]	; (9a84 <SwTimersExecute+0xe0>)
    9a10:	681b      	ldr	r3, [r3, #0]
    9a12:	2bff      	cmp	r3, #255	; 0xff
    9a14:	d024      	beq.n	9a60 <SwTimersExecute+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    9a16:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    9a1a:	424b      	negs	r3, r1
    9a1c:	414b      	adcs	r3, r1
    9a1e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    9a20:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    9a22:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    9a26:	4653      	mov	r3, sl
    9a28:	701a      	strb	r2, [r3, #0]
	return flags;
    9a2a:	9f01      	ldr	r7, [sp, #4]
            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    9a2c:	6823      	ldr	r3, [r4, #0]
    9a2e:	011b      	lsls	r3, r3, #4
    9a30:	444b      	add	r3, r9
    9a32:	7b19      	ldrb	r1, [r3, #12]
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
    9a34:	685e      	ldr	r6, [r3, #4]
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
    9a36:	689d      	ldr	r5, [r3, #8]
    9a38:	46ab      	mov	fp, r5
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    9a3a:	7318      	strb	r0, [r3, #12]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
    9a3c:	605a      	str	r2, [r3, #4]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
    9a3e:	609a      	str	r2, [r3, #8]
            swTimers[expiredTimerQueueHead].loaded = false;
    9a40:	735a      	strb	r2, [r3, #13]
            expiredTimerQueueHead = nextExpiredTimer;
    9a42:	6021      	str	r1, [r4, #0]
            if (SWTIMER_INVALID == expiredTimerQueueHead)
    9a44:	29ff      	cmp	r1, #255	; 0xff
    9a46:	d0dd      	beq.n	9a04 <SwTimersExecute+0x60>
	if (cpu_irq_is_enabled_flags(flags))
    9a48:	4238      	tst	r0, r7
    9a4a:	d0de      	beq.n	9a0a <SwTimersExecute+0x66>
		cpu_irq_enable();
    9a4c:	2301      	movs	r3, #1
    9a4e:	4661      	mov	r1, ip
    9a50:	700b      	strb	r3, [r1, #0]
    9a52:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    9a56:	b662      	cpsie	i
    9a58:	e7d7      	b.n	9a0a <SwTimersExecute+0x66>
            {
                /* Callback function is called */
                callback(cbParam);
    9a5a:	4658      	mov	r0, fp
    9a5c:	47b0      	blx	r6
    9a5e:	e7ca      	b.n	99f6 <SwTimersExecute+0x52>
                (void)now;
            }
        }
    }
}
    9a60:	b003      	add	sp, #12
    9a62:	bc3c      	pop	{r2, r3, r4, r5}
    9a64:	4690      	mov	r8, r2
    9a66:	4699      	mov	r9, r3
    9a68:	46a2      	mov	sl, r4
    9a6a:	46ab      	mov	fp, r5
    9a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9a6e:	46c0      	nop			; (mov r8, r8)
    9a70:	200017c4 	.word	0x200017c4
    9a74:	200017c0 	.word	0x200017c0
    9a78:	0000ab21 	.word	0x0000ab21
    9a7c:	20000008 	.word	0x20000008
    9a80:	00009611 	.word	0x00009611
    9a84:	20000f08 	.word	0x20000f08
    9a88:	20001630 	.word	0x20001630
    9a8c:	20000f0c 	.word	0x20000f0c

00009a90 <TIMER_TaskHandler>:
{
    9a90:	b510      	push	{r4, lr}
    SwTimersExecute();
    9a92:	4b02      	ldr	r3, [pc, #8]	; (9a9c <TIMER_TaskHandler+0xc>)
    9a94:	4798      	blx	r3
}
    9a96:	2000      	movs	r0, #0
    9a98:	bd10      	pop	{r4, pc}
    9a9a:	46c0      	nop			; (mov r8, r8)
    9a9c:	000099a5 	.word	0x000099a5

00009aa0 <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
    9aa0:	b570      	push	{r4, r5, r6, lr}
    9aa2:	b082      	sub	sp, #8
    9aa4:	0004      	movs	r4, r0
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    9aa6:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    9aa8:	2c18      	cmp	r4, #24
    9aaa:	d901      	bls.n	9ab0 <SwTimerStop+0x10>
        return LORAWAN_SUCCESS;
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
}
    9aac:	b002      	add	sp, #8
    9aae:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    9ab0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    9ab4:	425a      	negs	r2, r3
    9ab6:	4153      	adcs	r3, r2
    9ab8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    9aba:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    9abc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    9ac0:	2200      	movs	r2, #0
    9ac2:	4b47      	ldr	r3, [pc, #284]	; (9be0 <SwTimerStop+0x140>)
    9ac4:	701a      	strb	r2, [r3, #0]
	return flags;
    9ac6:	9d01      	ldr	r5, [sp, #4]
    swtimerInternalHandler();
    9ac8:	4b46      	ldr	r3, [pc, #280]	; (9be4 <SwTimerStop+0x144>)
    9aca:	4798      	blx	r3
    if (runningTimers > 0)
    9acc:	4b46      	ldr	r3, [pc, #280]	; (9be8 <SwTimerStop+0x148>)
    9ace:	781b      	ldrb	r3, [r3, #0]
    9ad0:	2b00      	cmp	r3, #0
    9ad2:	d040      	beq.n	9b56 <SwTimerStop+0xb6>
        uint8_t timer_count = runningTimers;
    9ad4:	4b44      	ldr	r3, [pc, #272]	; (9be8 <SwTimerStop+0x148>)
    9ad6:	781b      	ldrb	r3, [r3, #0]
    9ad8:	b2db      	uxtb	r3, r3
        prevIndex = currIndex = runningTimerQueueHead;
    9ada:	4a44      	ldr	r2, [pc, #272]	; (9bec <SwTimerStop+0x14c>)
    9adc:	6816      	ldr	r6, [r2, #0]
    9ade:	b2f1      	uxtb	r1, r6
        while (timer_count > 0)
    9ae0:	2b00      	cmp	r3, #0
    9ae2:	d038      	beq.n	9b56 <SwTimerStop+0xb6>
            if (timerId == currIndex)
    9ae4:	428c      	cmp	r4, r1
    9ae6:	d00b      	beq.n	9b00 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    9ae8:	4841      	ldr	r0, [pc, #260]	; (9bf0 <SwTimerStop+0x150>)
    9aea:	010a      	lsls	r2, r1, #4
    9aec:	1882      	adds	r2, r0, r2
    9aee:	7b12      	ldrb	r2, [r2, #12]
            timer_count--;
    9af0:	3b01      	subs	r3, #1
    9af2:	b2db      	uxtb	r3, r3
        while (timer_count > 0)
    9af4:	2b00      	cmp	r3, #0
    9af6:	d02e      	beq.n	9b56 <SwTimerStop+0xb6>
            if (timerId == currIndex)
    9af8:	4294      	cmp	r4, r2
    9afa:	d001      	beq.n	9b00 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    9afc:	0011      	movs	r1, r2
    9afe:	e7f4      	b.n	9aea <SwTimerStop+0x4a>
                if (timerId == runningTimerQueueHead)
    9b00:	42a6      	cmp	r6, r4
    9b02:	d01d      	beq.n	9b40 <SwTimerStop+0xa0>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    9b04:	4b3a      	ldr	r3, [pc, #232]	; (9bf0 <SwTimerStop+0x150>)
    9b06:	0122      	lsls	r2, r4, #4
    9b08:	189a      	adds	r2, r3, r2
    9b0a:	7b12      	ldrb	r2, [r2, #12]
    9b0c:	0109      	lsls	r1, r1, #4
    9b0e:	1859      	adds	r1, r3, r1
    9b10:	730a      	strb	r2, [r1, #12]
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
    9b12:	0122      	lsls	r2, r4, #4
    9b14:	4b36      	ldr	r3, [pc, #216]	; (9bf0 <SwTimerStop+0x150>)
    9b16:	189b      	adds	r3, r3, r2
    9b18:	22ff      	movs	r2, #255	; 0xff
    9b1a:	731a      	strb	r2, [r3, #12]
            runningTimers--;
    9b1c:	4a32      	ldr	r2, [pc, #200]	; (9be8 <SwTimerStop+0x148>)
    9b1e:	7813      	ldrb	r3, [r2, #0]
    9b20:	3b01      	subs	r3, #1
    9b22:	b2db      	uxtb	r3, r3
    9b24:	7013      	strb	r3, [r2, #0]
        swTimers[timerId].timerCb = NULL;
    9b26:	0124      	lsls	r4, r4, #4
    9b28:	4b31      	ldr	r3, [pc, #196]	; (9bf0 <SwTimerStop+0x150>)
    9b2a:	191c      	adds	r4, r3, r4
    9b2c:	2300      	movs	r3, #0
    9b2e:	6063      	str	r3, [r4, #4]
        swTimers[timerId].paramCb = NULL;
    9b30:	60a3      	str	r3, [r4, #8]
        swTimers[timerId].loaded = false;
    9b32:	7363      	strb	r3, [r4, #13]
	if (cpu_irq_is_enabled_flags(flags))
    9b34:	33ff      	adds	r3, #255	; 0xff
        return LORAWAN_SUCCESS;
    9b36:	2008      	movs	r0, #8
    9b38:	422b      	tst	r3, r5
    9b3a:	d0b7      	beq.n	9aac <SwTimerStop+0xc>
    9b3c:	2301      	movs	r3, #1
    9b3e:	e040      	b.n	9bc2 <SwTimerStop+0x122>
                    common_tc_compare_stop();
    9b40:	4b2c      	ldr	r3, [pc, #176]	; (9bf4 <SwTimerStop+0x154>)
    9b42:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
    9b44:	0122      	lsls	r2, r4, #4
    9b46:	4b2a      	ldr	r3, [pc, #168]	; (9bf0 <SwTimerStop+0x150>)
    9b48:	189b      	adds	r3, r3, r2
    9b4a:	7b18      	ldrb	r0, [r3, #12]
    9b4c:	4b27      	ldr	r3, [pc, #156]	; (9bec <SwTimerStop+0x14c>)
    9b4e:	6018      	str	r0, [r3, #0]
                    loadHwTimer(runningTimerQueueHead);
    9b50:	4b29      	ldr	r3, [pc, #164]	; (9bf8 <SwTimerStop+0x158>)
    9b52:	4798      	blx	r3
    9b54:	e7dd      	b.n	9b12 <SwTimerStop+0x72>
        prevIndex = currIndex = expiredTimerQueueHead;
    9b56:	4b29      	ldr	r3, [pc, #164]	; (9bfc <SwTimerStop+0x15c>)
    9b58:	6818      	ldr	r0, [r3, #0]
    9b5a:	b2c2      	uxtb	r2, r0
        while (SWTIMER_INVALID != currIndex)
    9b5c:	2aff      	cmp	r2, #255	; 0xff
    9b5e:	d02c      	beq.n	9bba <SwTimerStop+0x11a>
            if (timerId == currIndex)
    9b60:	4294      	cmp	r4, r2
    9b62:	d009      	beq.n	9b78 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    9b64:	4922      	ldr	r1, [pc, #136]	; (9bf0 <SwTimerStop+0x150>)
    9b66:	0113      	lsls	r3, r2, #4
    9b68:	18cb      	adds	r3, r1, r3
    9b6a:	7b1b      	ldrb	r3, [r3, #12]
        while (SWTIMER_INVALID != currIndex)
    9b6c:	2bff      	cmp	r3, #255	; 0xff
    9b6e:	d024      	beq.n	9bba <SwTimerStop+0x11a>
            if (timerId == currIndex)
    9b70:	429c      	cmp	r4, r3
    9b72:	d001      	beq.n	9b78 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    9b74:	001a      	movs	r2, r3
    9b76:	e7f6      	b.n	9b66 <SwTimerStop+0xc6>
                if (timerId == expiredTimerQueueHead)
    9b78:	42a0      	cmp	r0, r4
    9b7a:	d00d      	beq.n	9b98 <SwTimerStop+0xf8>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    9b7c:	4b1c      	ldr	r3, [pc, #112]	; (9bf0 <SwTimerStop+0x150>)
    9b7e:	0121      	lsls	r1, r4, #4
    9b80:	1859      	adds	r1, r3, r1
    9b82:	7b09      	ldrb	r1, [r1, #12]
    9b84:	0110      	lsls	r0, r2, #4
    9b86:	181b      	adds	r3, r3, r0
    9b88:	7319      	strb	r1, [r3, #12]
                    if (timerId == expiredTimerQueueTail)
    9b8a:	4b1d      	ldr	r3, [pc, #116]	; (9c00 <SwTimerStop+0x160>)
    9b8c:	681b      	ldr	r3, [r3, #0]
    9b8e:	429c      	cmp	r4, r3
    9b90:	d1c9      	bne.n	9b26 <SwTimerStop+0x86>
                        expiredTimerQueueTail = prevIndex;
    9b92:	4b1b      	ldr	r3, [pc, #108]	; (9c00 <SwTimerStop+0x160>)
    9b94:	601a      	str	r2, [r3, #0]
    9b96:	e7c6      	b.n	9b26 <SwTimerStop+0x86>
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
    9b98:	4b19      	ldr	r3, [pc, #100]	; (9c00 <SwTimerStop+0x160>)
    9b9a:	681b      	ldr	r3, [r3, #0]
    9b9c:	4298      	cmp	r0, r3
    9b9e:	d006      	beq.n	9bae <SwTimerStop+0x10e>
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
    9ba0:	0100      	lsls	r0, r0, #4
    9ba2:	4b13      	ldr	r3, [pc, #76]	; (9bf0 <SwTimerStop+0x150>)
    9ba4:	1818      	adds	r0, r3, r0
    9ba6:	7b02      	ldrb	r2, [r0, #12]
    9ba8:	4b14      	ldr	r3, [pc, #80]	; (9bfc <SwTimerStop+0x15c>)
    9baa:	601a      	str	r2, [r3, #0]
    9bac:	e7bb      	b.n	9b26 <SwTimerStop+0x86>
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
    9bae:	23ff      	movs	r3, #255	; 0xff
    9bb0:	4a13      	ldr	r2, [pc, #76]	; (9c00 <SwTimerStop+0x160>)
    9bb2:	6013      	str	r3, [r2, #0]
    9bb4:	4a11      	ldr	r2, [pc, #68]	; (9bfc <SwTimerStop+0x15c>)
    9bb6:	6013      	str	r3, [r2, #0]
    9bb8:	e7b5      	b.n	9b26 <SwTimerStop+0x86>
    9bba:	23ff      	movs	r3, #255	; 0xff
    9bbc:	422b      	tst	r3, r5
    9bbe:	d00a      	beq.n	9bd6 <SwTimerStop+0x136>
    9bc0:	2300      	movs	r3, #0
		cpu_irq_enable();
    9bc2:	2101      	movs	r1, #1
    9bc4:	4a06      	ldr	r2, [pc, #24]	; (9be0 <SwTimerStop+0x140>)
    9bc6:	7011      	strb	r1, [r2, #0]
    9bc8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    9bcc:	b662      	cpsie	i
    if (timerStopReqStatus)
    9bce:	2b00      	cmp	r3, #0
    9bd0:	d103      	bne.n	9bda <SwTimerStop+0x13a>
    return LORAWAN_INVALID_REQUEST;
    9bd2:	2015      	movs	r0, #21
    9bd4:	e76a      	b.n	9aac <SwTimerStop+0xc>
    9bd6:	2015      	movs	r0, #21
    9bd8:	e768      	b.n	9aac <SwTimerStop+0xc>
        return LORAWAN_SUCCESS;
    9bda:	2008      	movs	r0, #8
    9bdc:	e766      	b.n	9aac <SwTimerStop+0xc>
    9bde:	46c0      	nop			; (mov r8, r8)
    9be0:	20000008 	.word	0x20000008
    9be4:	00009611 	.word	0x00009611
    9be8:	20000f14 	.word	0x20000f14
    9bec:	20000f10 	.word	0x20000f10
    9bf0:	20001630 	.word	0x20001630
    9bf4:	0000ab6d 	.word	0x0000ab6d
    9bf8:	00009579 	.word	0x00009579
    9bfc:	20000f08 	.word	0x20000f08
    9c00:	20000f0c 	.word	0x20000f0c

00009c04 <SwTimerRunRemainingTime>:
{
    9c04:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c06:	b083      	sub	sp, #12
    9c08:	0005      	movs	r5, r0
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
    9c0a:	4b0b      	ldr	r3, [pc, #44]	; (9c38 <SwTimerRunRemainingTime+0x34>)
    9c0c:	681c      	ldr	r4, [r3, #0]
    9c0e:	0122      	lsls	r2, r4, #4
    9c10:	4b0a      	ldr	r3, [pc, #40]	; (9c3c <SwTimerRunRemainingTime+0x38>)
    9c12:	189b      	adds	r3, r3, r2
    9c14:	685e      	ldr	r6, [r3, #4]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
    9c16:	689f      	ldr	r7, [r3, #8]
    uint8_t timerId = runningTimerQueueHead;
    9c18:	b2e4      	uxtb	r4, r4
    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
    9c1a:	0020      	movs	r0, r4
    9c1c:	4b08      	ldr	r3, [pc, #32]	; (9c40 <SwTimerRunRemainingTime+0x3c>)
    9c1e:	4798      	blx	r3
    9c20:	2808      	cmp	r0, #8
    9c22:	d001      	beq.n	9c28 <SwTimerRunRemainingTime+0x24>
}
    9c24:	b003      	add	sp, #12
    9c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
    9c28:	9700      	str	r7, [sp, #0]
    9c2a:	0033      	movs	r3, r6
    9c2c:	2200      	movs	r2, #0
    9c2e:	0029      	movs	r1, r5
    9c30:	0020      	movs	r0, r4
    9c32:	4c04      	ldr	r4, [pc, #16]	; (9c44 <SwTimerRunRemainingTime+0x40>)
    9c34:	47a0      	blx	r4
}
    9c36:	e7f5      	b.n	9c24 <SwTimerRunRemainingTime+0x20>
    9c38:	20000f10 	.word	0x20000f10
    9c3c:	20001630 	.word	0x20001630
    9c40:	00009aa1 	.word	0x00009aa1
    9c44:	00009795 	.word	0x00009795

00009c48 <SystemTimerSuspend>:

/**************************************************************************//**
\brief Suspends the software timer
******************************************************************************/
void SystemTimerSuspend(void)
{
    9c48:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    9c4a:	4b07      	ldr	r3, [pc, #28]	; (9c68 <SystemTimerSuspend+0x20>)
    9c4c:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    9c4e:	4b07      	ldr	r3, [pc, #28]	; (9c6c <SystemTimerSuspend+0x24>)
    9c50:	881d      	ldrh	r5, [r3, #0]
    9c52:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    9c54:	4b06      	ldr	r3, [pc, #24]	; (9c70 <SystemTimerSuspend+0x28>)
    9c56:	4798      	blx	r3
    sysTimeLastKnown = gettime();
    9c58:	4b06      	ldr	r3, [pc, #24]	; (9c74 <SystemTimerSuspend+0x2c>)
    time |= (uint64_t) common_tc_read_count();
    9c5a:	4328      	orrs	r0, r5
    9c5c:	6018      	str	r0, [r3, #0]
    9c5e:	605c      	str	r4, [r3, #4]
    common_tc_stop();
    9c60:	4b05      	ldr	r3, [pc, #20]	; (9c78 <SystemTimerSuspend+0x30>)
    9c62:	4798      	blx	r3
}
    9c64:	bd70      	pop	{r4, r5, r6, pc}
    9c66:	46c0      	nop			; (mov r8, r8)
    9c68:	200017c4 	.word	0x200017c4
    9c6c:	200017c0 	.word	0x200017c0
    9c70:	0000ab21 	.word	0x0000ab21
    9c74:	20000f18 	.word	0x20000f18
    9c78:	0000abad 	.word	0x0000abad

00009c7c <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
    9c7c:	b570      	push	{r4, r5, r6, lr}
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
    9c7e:	4b22      	ldr	r3, [pc, #136]	; (9d08 <SystemTimerSync+0x8c>)
    9c80:	681c      	ldr	r4, [r3, #0]
    9c82:	685d      	ldr	r5, [r3, #4]
    9c84:	1900      	adds	r0, r0, r4
    9c86:	4169      	adcs	r1, r5
    9c88:	6018      	str	r0, [r3, #0]
    9c8a:	6059      	str	r1, [r3, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
    9c8c:	4b1f      	ldr	r3, [pc, #124]	; (9d0c <SystemTimerSync+0x90>)
    9c8e:	6019      	str	r1, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
    9c90:	0c02      	lsrs	r2, r0, #16
    9c92:	4b1f      	ldr	r3, [pc, #124]	; (9d10 <SystemTimerSync+0x94>)
    9c94:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
    9c96:	b280      	uxth	r0, r0
    timerId = runningTimerQueueHead;
    9c98:	4b1e      	ldr	r3, [pc, #120]	; (9d14 <SystemTimerSync+0x98>)
    9c9a:	781b      	ldrb	r3, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    9c9c:	4a1e      	ldr	r2, [pc, #120]	; (9d18 <SystemTimerSync+0x9c>)
    9c9e:	7812      	ldrb	r2, [r2, #0]
    9ca0:	2a00      	cmp	r2, #0
    9ca2:	d012      	beq.n	9cca <SystemTimerSync+0x4e>
    9ca4:	2200      	movs	r2, #0
    {
        if (SWTIMER_INVALID != timerId)
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    9ca6:	4c1d      	ldr	r4, [pc, #116]	; (9d1c <SystemTimerSync+0xa0>)
    for (uint8_t index = 0; index < runningTimers; index++)
    9ca8:	4d1b      	ldr	r5, [pc, #108]	; (9d18 <SystemTimerSync+0x9c>)
    9caa:	e005      	b.n	9cb8 <SystemTimerSync+0x3c>
    9cac:	3201      	adds	r2, #1
    9cae:	b2d2      	uxtb	r2, r2
    9cb0:	7829      	ldrb	r1, [r5, #0]
    9cb2:	b2c9      	uxtb	r1, r1
    9cb4:	4291      	cmp	r1, r2
    9cb6:	d908      	bls.n	9cca <SystemTimerSync+0x4e>
        if (SWTIMER_INVALID != timerId)
    9cb8:	2bff      	cmp	r3, #255	; 0xff
    9cba:	d0f7      	beq.n	9cac <SystemTimerSync+0x30>
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    9cbc:	011b      	lsls	r3, r3, #4
    9cbe:	5919      	ldr	r1, [r3, r4]
    9cc0:	1a09      	subs	r1, r1, r0
    9cc2:	5119      	str	r1, [r3, r4]
            timerId = swTimers[timerId].nextTimer;
    9cc4:	18e3      	adds	r3, r4, r3
    9cc6:	7b1b      	ldrb	r3, [r3, #12]
    9cc8:	e7f0      	b.n	9cac <SystemTimerSync+0x30>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
    9cca:	4b15      	ldr	r3, [pc, #84]	; (9d20 <SystemTimerSync+0xa4>)
    9ccc:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    9cce:	4815      	ldr	r0, [pc, #84]	; (9d24 <SystemTimerSync+0xa8>)
    9cd0:	4b15      	ldr	r3, [pc, #84]	; (9d28 <SystemTimerSync+0xac>)
    9cd2:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    9cd4:	4815      	ldr	r0, [pc, #84]	; (9d2c <SystemTimerSync+0xb0>)
    9cd6:	4b16      	ldr	r3, [pc, #88]	; (9d30 <SystemTimerSync+0xb4>)
    9cd8:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
    9cda:	4b0f      	ldr	r3, [pc, #60]	; (9d18 <SystemTimerSync+0x9c>)
    9cdc:	781b      	ldrb	r3, [r3, #0]
    9cde:	2b00      	cmp	r3, #0
    9ce0:	d009      	beq.n	9cf6 <SystemTimerSync+0x7a>
    9ce2:	4b0c      	ldr	r3, [pc, #48]	; (9d14 <SystemTimerSync+0x98>)
    9ce4:	681b      	ldr	r3, [r3, #0]
    9ce6:	2bff      	cmp	r3, #255	; 0xff
    9ce8:	d005      	beq.n	9cf6 <SystemTimerSync+0x7a>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
    9cea:	4b12      	ldr	r3, [pc, #72]	; (9d34 <SystemTimerSync+0xb8>)
    9cec:	4798      	blx	r3

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
    9cee:	28fe      	cmp	r0, #254	; 0xfe
    9cf0:	d902      	bls.n	9cf8 <SystemTimerSync+0x7c>
        else
        {
            /*
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
    9cf2:	4b11      	ldr	r3, [pc, #68]	; (9d38 <SystemTimerSync+0xbc>)
    9cf4:	4798      	blx	r3
        }
    }
}
    9cf6:	bd70      	pop	{r4, r5, r6, pc}
            isTimerTriggered = true;
    9cf8:	2201      	movs	r2, #1
    9cfa:	4b10      	ldr	r3, [pc, #64]	; (9d3c <SystemTimerSync+0xc0>)
    9cfc:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    9cfe:	2001      	movs	r0, #1
    9d00:	4b0f      	ldr	r3, [pc, #60]	; (9d40 <SystemTimerSync+0xc4>)
    9d02:	4798      	blx	r3
    9d04:	e7f7      	b.n	9cf6 <SystemTimerSync+0x7a>
    9d06:	46c0      	nop			; (mov r8, r8)
    9d08:	20000f18 	.word	0x20000f18
    9d0c:	200017c4 	.word	0x200017c4
    9d10:	200017c0 	.word	0x200017c0
    9d14:	20000f10 	.word	0x20000f10
    9d18:	20000f14 	.word	0x20000f14
    9d1c:	20001630 	.word	0x20001630
    9d20:	0000ac35 	.word	0x0000ac35
    9d24:	000094c1 	.word	0x000094c1
    9d28:	0000acb9 	.word	0x0000acb9
    9d2c:	00009499 	.word	0x00009499
    9d30:	0000acc5 	.word	0x0000acc5
    9d34:	00009985 	.word	0x00009985
    9d38:	00009c05 	.word	0x00009c05
    9d3c:	200017c2 	.word	0x200017c2
    9d40:	00009dc1 	.word	0x00009dc1

00009d44 <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
    9d44:	b510      	push	{r4, lr}
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
    9d46:	2010      	movs	r0, #16
    9d48:	4b01      	ldr	r3, [pc, #4]	; (9d50 <Stack_Init+0xc>)
    9d4a:	4798      	blx	r3
}
    9d4c:	bd10      	pop	{r4, pc}
    9d4e:	46c0      	nop			; (mov r8, r8)
    9d50:	00009dc1 	.word	0x00009dc1

00009d54 <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
    9d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
    9d56:	4b16      	ldr	r3, [pc, #88]	; (9db0 <SYSTEM_RunTasks+0x5c>)
    9d58:	881b      	ldrh	r3, [r3, #0]
    9d5a:	b29b      	uxth	r3, r3
    9d5c:	2b1f      	cmp	r3, #31
    9d5e:	d922      	bls.n	9da6 <SYSTEM_RunTasks+0x52>
    9d60:	e7fe      	b.n	9d60 <SYSTEM_RunTasks+0xc>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
            {
                if ((1 << taskId) & sysTaskFlag)
    9d62:	2500      	movs	r5, #0
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
    9d64:	4b13      	ldr	r3, [pc, #76]	; (9db4 <SYSTEM_RunTasks+0x60>)
    9d66:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
    9d68:	4911      	ldr	r1, [pc, #68]	; (9db0 <SYSTEM_RunTasks+0x5c>)
    9d6a:	880b      	ldrh	r3, [r1, #0]
    9d6c:	2201      	movs	r2, #1
    9d6e:	40aa      	lsls	r2, r5
    9d70:	4393      	bics	r3, r2
    9d72:	800b      	strh	r3, [r1, #0]
                    ATOMIC_SECTION_EXIT
    9d74:	4b10      	ldr	r3, [pc, #64]	; (9db8 <SYSTEM_RunTasks+0x64>)
    9d76:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId]();
    9d78:	00ad      	lsls	r5, r5, #2
    9d7a:	4b10      	ldr	r3, [pc, #64]	; (9dbc <SYSTEM_RunTasks+0x68>)
    9d7c:	58eb      	ldr	r3, [r5, r3]
    9d7e:	4798      	blx	r3
                if ((1 << taskId) & sysTaskFlag)
    9d80:	2101      	movs	r1, #1
        while (sysTaskFlag)
    9d82:	883b      	ldrh	r3, [r7, #0]
    9d84:	b29b      	uxth	r3, r3
    9d86:	2b00      	cmp	r3, #0
    9d88:	d011      	beq.n	9dae <SYSTEM_RunTasks+0x5a>
                if ((1 << taskId) & sysTaskFlag)
    9d8a:	8823      	ldrh	r3, [r4, #0]
    9d8c:	420b      	tst	r3, r1
    9d8e:	d1e8      	bne.n	9d62 <SYSTEM_RunTasks+0xe>
    9d90:	2201      	movs	r2, #1
    9d92:	8833      	ldrh	r3, [r6, #0]
    9d94:	b29b      	uxth	r3, r3
    9d96:	0015      	movs	r5, r2
    9d98:	4113      	asrs	r3, r2
    9d9a:	4219      	tst	r1, r3
    9d9c:	d1e2      	bne.n	9d64 <SYSTEM_RunTasks+0x10>
    9d9e:	3201      	adds	r2, #1
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
    9da0:	2a05      	cmp	r2, #5
    9da2:	d1f6      	bne.n	9d92 <SYSTEM_RunTasks+0x3e>
    9da4:	e7ed      	b.n	9d82 <SYSTEM_RunTasks+0x2e>
        while (sysTaskFlag)
    9da6:	4f02      	ldr	r7, [pc, #8]	; (9db0 <SYSTEM_RunTasks+0x5c>)
                if ((1 << taskId) & sysTaskFlag)
    9da8:	003c      	movs	r4, r7
    9daa:	003e      	movs	r6, r7
    9dac:	e7e8      	b.n	9d80 <SYSTEM_RunTasks+0x2c>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
    9dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9db0:	20000f20 	.word	0x20000f20
    9db4:	00003389 	.word	0x00003389
    9db8:	00003395 	.word	0x00003395
    9dbc:	000194f0 	.word	0x000194f0

00009dc0 <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
    9dc0:	b510      	push	{r4, lr}
    9dc2:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    9dc4:	4b04      	ldr	r3, [pc, #16]	; (9dd8 <SYSTEM_PostTask+0x18>)
    9dc6:	4798      	blx	r3
    sysTaskFlag |= task;
    9dc8:	4b04      	ldr	r3, [pc, #16]	; (9ddc <SYSTEM_PostTask+0x1c>)
    9dca:	8818      	ldrh	r0, [r3, #0]
    9dcc:	4320      	orrs	r0, r4
    9dce:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    9dd0:	4b03      	ldr	r3, [pc, #12]	; (9de0 <SYSTEM_PostTask+0x20>)
    9dd2:	4798      	blx	r3
}
    9dd4:	bd10      	pop	{r4, pc}
    9dd6:	46c0      	nop			; (mov r8, r8)
    9dd8:	00003389 	.word	0x00003389
    9ddc:	20000f20 	.word	0x20000f20
    9de0:	00003395 	.word	0x00003395

00009de4 <SYSTEM_ReadyToSleep>:

\return 'true' if the system is ready, 'false' otherwise
*************************************************************************/
bool SYSTEM_ReadyToSleep(void)
{
    return !(sysTaskFlag & 0xffff);
    9de4:	4b03      	ldr	r3, [pc, #12]	; (9df4 <SYSTEM_ReadyToSleep+0x10>)
    9de6:	8818      	ldrh	r0, [r3, #0]
    9de8:	b280      	uxth	r0, r0
    9dea:	4243      	negs	r3, r0
    9dec:	4158      	adcs	r0, r3
    9dee:	b2c0      	uxtb	r0, r0
}
    9df0:	4770      	bx	lr
    9df2:	46c0      	nop			; (mov r8, r8)
    9df4:	20000f20 	.word	0x20000f20

00009df8 <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
    9df8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9dfa:	46d6      	mov	lr, sl
    9dfc:	464f      	mov	r7, r9
    9dfe:	b580      	push	{r7, lr}
    9e00:	b083      	sub	sp, #12
    9e02:	9201      	str	r2, [sp, #4]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
    9e04:	2900      	cmp	r1, #0
    9e06:	d102      	bne.n	9e0e <Radio_WriteMode+0x16>
    9e08:	1f83      	subs	r3, r0, #6
    9e0a:	2b01      	cmp	r3, #1
    9e0c:	d92a      	bls.n	9e64 <Radio_WriteMode+0x6c>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
    9e0e:	2307      	movs	r3, #7
    9e10:	4699      	mov	r9, r3
    9e12:	001c      	movs	r4, r3
    9e14:	4004      	ands	r4, r0
    newModulation &= 0x01;
    9e16:	2601      	movs	r6, #1
    9e18:	400e      	ands	r6, r1

    opMode = RADIO_RegisterRead(REG_OPMODE);
    9e1a:	2001      	movs	r0, #1
    9e1c:	4b2b      	ldr	r3, [pc, #172]	; (9ecc <Radio_WriteMode+0xd4>)
    9e1e:	4798      	blx	r3
    9e20:	0005      	movs	r5, r0
    9e22:	0007      	movs	r7, r0

    if ((opMode & 0x80) != 0)
    9e24:	b243      	sxtb	r3, r0
    9e26:	469a      	mov	sl, r3
    else
    {
        currentModulation = MODULATION_FSK;
    }

    currentMode = opMode & 0x07;
    9e28:	464b      	mov	r3, r9
    9e2a:	4003      	ands	r3, r0

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
    9e2c:	4652      	mov	r2, sl
    9e2e:	0fd2      	lsrs	r2, r2, #31
    9e30:	4296      	cmp	r6, r2
    9e32:	d00a      	beq.n	9e4a <Radio_WriteMode+0x52>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
    9e34:	2b00      	cmp	r3, #0
    9e36:	d11a      	bne.n	9e6e <Radio_WriteMode+0x76>
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
            currentMode = MODE_SLEEP;
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
    9e38:	2e00      	cmp	r6, #0
    9e3a:	d11e      	bne.n	9e7a <Radio_WriteMode+0x82>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
    9e3c:	2778      	movs	r7, #120	; 0x78
    9e3e:	402f      	ands	r7, r5
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    9e40:	0039      	movs	r1, r7
    9e42:	2001      	movs	r0, #1
    9e44:	4b22      	ldr	r3, [pc, #136]	; (9ed0 <Radio_WriteMode+0xd8>)
    9e46:	4798      	blx	r3
    9e48:	2300      	movs	r3, #0

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
    9e4a:	42a3      	cmp	r3, r4
    9e4c:	d00a      	beq.n	9e64 <Radio_WriteMode+0x6c>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
    9e4e:	2c00      	cmp	r4, #0
    9e50:	d030      	beq.n	9eb4 <Radio_WriteMode+0xbc>
    9e52:	9b01      	ldr	r3, [sp, #4]
    9e54:	2b01      	cmp	r3, #1
    9e56:	d016      	beq.n	9e86 <Radio_WriteMode+0x8e>
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
    9e58:	21f8      	movs	r1, #248	; 0xf8
    9e5a:	4039      	ands	r1, r7
        opMode |= newMode;              // Set new mode bits
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    9e5c:	4321      	orrs	r1, r4
    9e5e:	2001      	movs	r0, #1
    9e60:	4b1b      	ldr	r3, [pc, #108]	; (9ed0 <Radio_WriteMode+0xd8>)
    9e62:	4798      	blx	r3
                SystemBlockingWaitMs(1);
            }
        }
    }
#endif
}
    9e64:	b003      	add	sp, #12
    9e66:	bc0c      	pop	{r2, r3}
    9e68:	4691      	mov	r9, r2
    9e6a:	469a      	mov	sl, r3
    9e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
    9e6e:	21f8      	movs	r1, #248	; 0xf8
    9e70:	4001      	ands	r1, r0
    9e72:	2001      	movs	r0, #1
    9e74:	4b16      	ldr	r3, [pc, #88]	; (9ed0 <Radio_WriteMode+0xd8>)
    9e76:	4798      	blx	r3
    9e78:	e7de      	b.n	9e38 <Radio_WriteMode+0x40>
            opMode = 0x80 | (opMode & (~0x87));
    9e7a:	2778      	movs	r7, #120	; 0x78
    9e7c:	4653      	mov	r3, sl
    9e7e:	401f      	ands	r7, r3
    9e80:	2180      	movs	r1, #128	; 0x80
    9e82:	430f      	orrs	r7, r1
    9e84:	e7dc      	b.n	9e40 <Radio_WriteMode+0x48>
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
    9e86:	2041      	movs	r0, #65	; 0x41
    9e88:	4b10      	ldr	r3, [pc, #64]	; (9ecc <Radio_WriteMode+0xd4>)
    9e8a:	4798      	blx	r3
            if (MODULATION_FSK == newModulation)
    9e8c:	2e00      	cmp	r6, #0
    9e8e:	d10e      	bne.n	9eae <Radio_WriteMode+0xb6>
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
    9e90:	2130      	movs	r1, #48	; 0x30
    9e92:	4301      	orrs	r1, r0
    9e94:	b2c9      	uxtb	r1, r1
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
    9e96:	2041      	movs	r0, #65	; 0x41
    9e98:	4d0d      	ldr	r5, [pc, #52]	; (9ed0 <Radio_WriteMode+0xd8>)
    9e9a:	47a8      	blx	r5
        opMode &= ~0x07;                // Clear old mode bits
    9e9c:	21f8      	movs	r1, #248	; 0xf8
    9e9e:	4039      	ands	r1, r7
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    9ea0:	4321      	orrs	r1, r4
    9ea2:	2001      	movs	r0, #1
    9ea4:	47a8      	blx	r5
			   delay_ms(1);
    9ea6:	2001      	movs	r0, #1
    9ea8:	4b0a      	ldr	r3, [pc, #40]	; (9ed4 <Radio_WriteMode+0xdc>)
    9eaa:	4798      	blx	r3
    9eac:	e7da      	b.n	9e64 <Radio_WriteMode+0x6c>
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
    9eae:	21cf      	movs	r1, #207	; 0xcf
    9eb0:	4001      	ands	r1, r0
    9eb2:	e7f0      	b.n	9e96 <Radio_WriteMode+0x9e>
        opMode &= ~0x07;                // Clear old mode bits
    9eb4:	21f8      	movs	r1, #248	; 0xf8
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    9eb6:	4039      	ands	r1, r7
    9eb8:	2001      	movs	r0, #1
    9eba:	4b05      	ldr	r3, [pc, #20]	; (9ed0 <Radio_WriteMode+0xd8>)
    9ebc:	4798      	blx	r3
        if (1 == blocking)
    9ebe:	9b01      	ldr	r3, [sp, #4]
    9ec0:	2b01      	cmp	r3, #1
    9ec2:	d1cf      	bne.n	9e64 <Radio_WriteMode+0x6c>
                SystemBlockingWaitMs(1);
    9ec4:	2001      	movs	r0, #1
    9ec6:	4b04      	ldr	r3, [pc, #16]	; (9ed8 <Radio_WriteMode+0xe0>)
    9ec8:	4798      	blx	r3
    9eca:	e7cb      	b.n	9e64 <Radio_WriteMode+0x6c>
    9ecc:	00003139 	.word	0x00003139
    9ed0:	00003111 	.word	0x00003111
    9ed4:	00000181 	.word	0x00000181
    9ed8:	0000336d 	.word	0x0000336d

00009edc <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
    9edc:	b500      	push	{lr}
    9ede:	b083      	sub	sp, #12
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    9ee0:	2012      	movs	r0, #18
    9ee2:	4b0d      	ldr	r3, [pc, #52]	; (9f18 <RADIO_FHSSChangeChannel+0x3c>)
    9ee4:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
    9ee6:	4b0d      	ldr	r3, [pc, #52]	; (9f1c <RADIO_FHSSChangeChannel+0x40>)
    9ee8:	8adb      	ldrh	r3, [r3, #22]
    9eea:	2b00      	cmp	r3, #0
    9eec:	d007      	beq.n	9efe <RADIO_FHSSChangeChannel+0x22>
    {
        if ((radioConfiguration.radioCallback) &&
    9eee:	4b0b      	ldr	r3, [pc, #44]	; (9f1c <RADIO_FHSSChangeChannel+0x40>)
    9ef0:	691b      	ldr	r3, [r3, #16]
    9ef2:	2b00      	cmp	r3, #0
    9ef4:	d003      	beq.n	9efe <RADIO_FHSSChangeChannel+0x22>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
    9ef6:	4a0a      	ldr	r2, [pc, #40]	; (9f20 <RADIO_FHSSChangeChannel+0x44>)
    9ef8:	7812      	ldrb	r2, [r2, #0]
        if ((radioConfiguration.radioCallback) &&
    9efa:	0692      	lsls	r2, r2, #26
    9efc:	d405      	bmi.n	9f0a <RADIO_FHSSChangeChannel+0x2e>
            Radio_WriteFrequency(freq);
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
    9efe:	2102      	movs	r1, #2
    9f00:	2012      	movs	r0, #18
    9f02:	4b08      	ldr	r3, [pc, #32]	; (9f24 <RADIO_FHSSChangeChannel+0x48>)
    9f04:	4798      	blx	r3
}
    9f06:	b003      	add	sp, #12
    9f08:	bd00      	pop	{pc}
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
    9f0a:	a901      	add	r1, sp, #4
    9f0c:	2020      	movs	r0, #32
    9f0e:	4798      	blx	r3
            Radio_WriteFrequency(freq);
    9f10:	9801      	ldr	r0, [sp, #4]
    9f12:	4b05      	ldr	r3, [pc, #20]	; (9f28 <RADIO_FHSSChangeChannel+0x4c>)
    9f14:	4798      	blx	r3
    9f16:	e7f2      	b.n	9efe <RADIO_FHSSChangeChannel+0x22>
    9f18:	00003139 	.word	0x00003139
    9f1c:	200017c8 	.word	0x200017c8
    9f20:	20001dc2 	.word	0x20001dc2
    9f24:	00003111 	.word	0x00003111
    9f28:	0000f665 	.word	0x0000f665

00009f2c <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
    9f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    9f2e:	2000      	movs	r0, #0
    9f30:	4b1a      	ldr	r3, [pc, #104]	; (9f9c <RADIO_ReadRandom+0x70>)
    9f32:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
    9f34:	4b1a      	ldr	r3, [pc, #104]	; (9fa0 <RADIO_ReadRandom+0x74>)
    9f36:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    9f38:	2201      	movs	r2, #1
    9f3a:	2101      	movs	r1, #1
    9f3c:	2000      	movs	r0, #0
    9f3e:	4c19      	ldr	r4, [pc, #100]	; (9fa4 <RADIO_ReadRandom+0x78>)
    9f40:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
    9f42:	21ff      	movs	r1, #255	; 0xff
    9f44:	2011      	movs	r0, #17
    9f46:	4b18      	ldr	r3, [pc, #96]	; (9fa8 <RADIO_ReadRandom+0x7c>)
    9f48:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
    9f4a:	2201      	movs	r2, #1
    9f4c:	2101      	movs	r1, #1
    9f4e:	2005      	movs	r0, #5
    9f50:	47a0      	blx	r4
    9f52:	2410      	movs	r4, #16
    retVal = 0;
    9f54:	2500      	movs	r5, #0
    for (i = 0; i < 16; i++)
    {
        SystemBlockingWaitMs(1);
    9f56:	4f15      	ldr	r7, [pc, #84]	; (9fac <RADIO_ReadRandom+0x80>)
        retVal <<= SHIFT1;
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    9f58:	4e15      	ldr	r6, [pc, #84]	; (9fb0 <RADIO_ReadRandom+0x84>)
        SystemBlockingWaitMs(1);
    9f5a:	2001      	movs	r0, #1
    9f5c:	47b8      	blx	r7
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    9f5e:	202c      	movs	r0, #44	; 0x2c
    9f60:	47b0      	blx	r6
    9f62:	2301      	movs	r3, #1
    9f64:	4018      	ands	r0, r3
        retVal <<= SHIFT1;
    9f66:	006d      	lsls	r5, r5, #1
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    9f68:	4305      	orrs	r5, r0
    9f6a:	b2ad      	uxth	r5, r5
    9f6c:	3c01      	subs	r4, #1
    9f6e:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 16; i++)
    9f70:	2c00      	cmp	r4, #0
    9f72:	d1f2      	bne.n	9f5a <RADIO_ReadRandom+0x2e>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    9f74:	2000      	movs	r0, #0
    9f76:	4b0f      	ldr	r3, [pc, #60]	; (9fb4 <RADIO_ReadRandom+0x88>)
    9f78:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    9f7a:	2201      	movs	r2, #1
    9f7c:	2101      	movs	r1, #1
    9f7e:	2000      	movs	r0, #0
    9f80:	4b08      	ldr	r3, [pc, #32]	; (9fa4 <RADIO_ReadRandom+0x78>)
    9f82:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    9f84:	21ff      	movs	r1, #255	; 0xff
    9f86:	2012      	movs	r0, #18
    9f88:	4c07      	ldr	r4, [pc, #28]	; (9fa8 <RADIO_ReadRandom+0x7c>)
    9f8a:	47a0      	blx	r4
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
    9f8c:	2100      	movs	r1, #0
    9f8e:	2011      	movs	r0, #17
    9f90:	47a0      	blx	r4
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
    9f92:	4b09      	ldr	r3, [pc, #36]	; (9fb8 <RADIO_ReadRandom+0x8c>)
    9f94:	4798      	blx	r3
	
    return retVal;
}
    9f96:	0028      	movs	r0, r5
    9f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9f9a:	46c0      	nop			; (mov r8, r8)
    9f9c:	0000ff21 	.word	0x0000ff21
    9fa0:	000103d1 	.word	0x000103d1
    9fa4:	00009df9 	.word	0x00009df9
    9fa8:	00003111 	.word	0x00003111
    9fac:	0000336d 	.word	0x0000336d
    9fb0:	00003139 	.word	0x00003139
    9fb4:	00010049 	.word	0x00010049
    9fb8:	00010405 	.word	0x00010405

00009fbc <Radio_ReadFSKRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadFSKRssi(int16_t *rssi)
{	
    9fbc:	b510      	push	{r4, lr}
    9fbe:	0004      	movs	r4, r0
#ifdef UT
	*rssi = testRssi;
#else // UT
	*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    9fc0:	2011      	movs	r0, #17
    9fc2:	4b04      	ldr	r3, [pc, #16]	; (9fd4 <Radio_ReadFSKRssi+0x18>)
    9fc4:	4798      	blx	r3
    9fc6:	0840      	lsrs	r0, r0, #1
    9fc8:	b2c0      	uxtb	r0, r0
    9fca:	4240      	negs	r0, r0
    9fcc:	8020      	strh	r0, [r4, #0]
#endif // UT
	
	return ERR_NONE;
}
    9fce:	2000      	movs	r0, #0
    9fd0:	bd10      	pop	{r4, pc}
    9fd2:	46c0      	nop			; (mov r8, r8)
    9fd4:	00003139 	.word	0x00003139

00009fd8 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    9fd8:	b510      	push	{r4, lr}
	tmr_cca_callback();
    9fda:	4b01      	ldr	r3, [pc, #4]	; (9fe0 <tc_cca_callback+0x8>)
    9fdc:	4798      	blx	r3
}
    9fde:	bd10      	pop	{r4, pc}
    9fe0:	0000ac9d 	.word	0x0000ac9d

00009fe4 <tc_ovf_callback>:
{
    9fe4:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    9fe6:	4b01      	ldr	r3, [pc, #4]	; (9fec <tc_ovf_callback+0x8>)
    9fe8:	4798      	blx	r3
}
    9fea:	bd10      	pop	{r4, pc}
    9fec:	0000ac55 	.word	0x0000ac55

00009ff0 <tmr_read_count>:
{
    9ff0:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    9ff2:	4802      	ldr	r0, [pc, #8]	; (9ffc <tmr_read_count+0xc>)
    9ff4:	4b02      	ldr	r3, [pc, #8]	; (a000 <tmr_read_count+0x10>)
    9ff6:	4798      	blx	r3
    9ff8:	b280      	uxth	r0, r0
}
    9ffa:	bd10      	pop	{r4, pc}
    9ffc:	2000185c 	.word	0x2000185c
    a000:	00002939 	.word	0x00002939

0000a004 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    a004:	4b03      	ldr	r3, [pc, #12]	; (a014 <tmr_disable_cc_interrupt+0x10>)
    a006:	2110      	movs	r1, #16
    a008:	681a      	ldr	r2, [r3, #0]
    a00a:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    a00c:	7e5a      	ldrb	r2, [r3, #25]
    a00e:	438a      	bics	r2, r1
    a010:	765a      	strb	r2, [r3, #25]
}
    a012:	4770      	bx	lr
    a014:	2000185c 	.word	0x2000185c

0000a018 <tmr_enable_cc_interrupt>:
{
    a018:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    a01a:	4c0b      	ldr	r4, [pc, #44]	; (a048 <tmr_enable_cc_interrupt+0x30>)
	if (status_flags & TC_STATUS_COUNT_OVERFLOW) {
		int_flags |= TC_INTFLAG_OVF;
	}

	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = int_flags;
    a01c:	2510      	movs	r5, #16
    a01e:	6823      	ldr	r3, [r4, #0]
    a020:	729d      	strb	r5, [r3, #10]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    a022:	0018      	movs	r0, r3
    a024:	4b09      	ldr	r3, [pc, #36]	; (a04c <tmr_enable_cc_interrupt+0x34>)
    a026:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    a028:	4b09      	ldr	r3, [pc, #36]	; (a050 <tmr_enable_cc_interrupt+0x38>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a02a:	5c1b      	ldrb	r3, [r3, r0]
    a02c:	221f      	movs	r2, #31
    a02e:	401a      	ands	r2, r3
    a030:	2301      	movs	r3, #1
    a032:	4093      	lsls	r3, r2
    a034:	4a07      	ldr	r2, [pc, #28]	; (a054 <tmr_enable_cc_interrupt+0x3c>)
    a036:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    a038:	7e63      	ldrb	r3, [r4, #25]
    a03a:	2210      	movs	r2, #16
    a03c:	4313      	orrs	r3, r2
    a03e:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    a040:	6823      	ldr	r3, [r4, #0]
    a042:	725d      	strb	r5, [r3, #9]
}
    a044:	bd70      	pop	{r4, r5, r6, pc}
    a046:	46c0      	nop			; (mov r8, r8)
    a048:	2000185c 	.word	0x2000185c
    a04c:	0000260d 	.word	0x0000260d
    a050:	00019504 	.word	0x00019504
    a054:	e000e100 	.word	0xe000e100

0000a058 <tmr_disable_ovf_interrupt>:
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    a058:	4b03      	ldr	r3, [pc, #12]	; (a068 <tmr_disable_ovf_interrupt+0x10>)
    a05a:	2101      	movs	r1, #1
    a05c:	681a      	ldr	r2, [r3, #0]
    a05e:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
    a060:	7e5a      	ldrb	r2, [r3, #25]
    a062:	438a      	bics	r2, r1
    a064:	765a      	strb	r2, [r3, #25]
}
    a066:	4770      	bx	lr
    a068:	2000185c 	.word	0x2000185c

0000a06c <tmr_stop>:
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    a06c:	4b06      	ldr	r3, [pc, #24]	; (a088 <tmr_stop+0x1c>)
    a06e:	681a      	ldr	r2, [r3, #0]
	return (tc_module->SYNCBUSY.reg);
    a070:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    a072:	2b00      	cmp	r3, #0
    a074:	d1fc      	bne.n	a070 <tmr_stop+0x4>
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    a076:	3333      	adds	r3, #51	; 0x33
    a078:	7213      	strb	r3, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    a07a:	7293      	strb	r3, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    a07c:	6813      	ldr	r3, [r2, #0]
    a07e:	2102      	movs	r1, #2
    a080:	438b      	bics	r3, r1
    a082:	6013      	str	r3, [r2, #0]
}
    a084:	4770      	bx	lr
    a086:	46c0      	nop			; (mov r8, r8)
    a088:	2000185c 	.word	0x2000185c

0000a08c <tmr_write_cmpreg>:
{
    a08c:	b510      	push	{r4, lr}
    a08e:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    a090:	2100      	movs	r1, #0
    a092:	4802      	ldr	r0, [pc, #8]	; (a09c <tmr_write_cmpreg+0x10>)
    a094:	4b02      	ldr	r3, [pc, #8]	; (a0a0 <tmr_write_cmpreg+0x14>)
    a096:	4798      	blx	r3
}
    a098:	bd10      	pop	{r4, pc}
    a09a:	46c0      	nop			; (mov r8, r8)
    a09c:	2000185c 	.word	0x2000185c
    a0a0:	00002979 	.word	0x00002979

0000a0a4 <save_cpu_interrupt>:
{
    a0a4:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a0a6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    a0aa:	425a      	negs	r2, r3
    a0ac:	4153      	adcs	r3, r2
    a0ae:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    a0b0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    a0b2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    a0b6:	2200      	movs	r2, #0
    a0b8:	4b02      	ldr	r3, [pc, #8]	; (a0c4 <save_cpu_interrupt+0x20>)
    a0ba:	701a      	strb	r2, [r3, #0]
	return flags;
    a0bc:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    a0be:	b2c0      	uxtb	r0, r0
}
    a0c0:	b002      	add	sp, #8
    a0c2:	4770      	bx	lr
    a0c4:	20000008 	.word	0x20000008

0000a0c8 <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
    a0c8:	2800      	cmp	r0, #0
    a0ca:	d005      	beq.n	a0d8 <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    a0cc:	2201      	movs	r2, #1
    a0ce:	4b03      	ldr	r3, [pc, #12]	; (a0dc <restore_cpu_interrupt+0x14>)
    a0d0:	701a      	strb	r2, [r3, #0]
    a0d2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    a0d6:	b662      	cpsie	i
}
    a0d8:	4770      	bx	lr
    a0da:	46c0      	nop			; (mov r8, r8)
    a0dc:	20000008 	.word	0x20000008

0000a0e0 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    a0e0:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    a0e2:	4a33      	ldr	r2, [pc, #204]	; (a1b0 <tmr_init+0xd0>)
    a0e4:	2100      	movs	r1, #0
    a0e6:	2300      	movs	r3, #0
    a0e8:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    a0ea:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    a0ec:	2000      	movs	r0, #0
    a0ee:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    a0f0:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    a0f2:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    a0f4:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    a0f6:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    a0f8:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    a0fa:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    a0fc:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    a0fe:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    a100:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    a102:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    a104:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    a106:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    a108:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    a10a:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    a10c:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    a10e:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    a110:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    a112:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    a114:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    a116:	2334      	movs	r3, #52	; 0x34
    a118:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    a11a:	3b35      	subs	r3, #53	; 0x35
    a11c:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    a11e:	4c25      	ldr	r4, [pc, #148]	; (a1b4 <tmr_init+0xd4>)
    a120:	4925      	ldr	r1, [pc, #148]	; (a1b8 <tmr_init+0xd8>)
    a122:	0020      	movs	r0, r4
    a124:	4b25      	ldr	r3, [pc, #148]	; (a1bc <tmr_init+0xdc>)
    a126:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    a128:	2200      	movs	r2, #0
    a12a:	4925      	ldr	r1, [pc, #148]	; (a1c0 <tmr_init+0xe0>)
    a12c:	0020      	movs	r0, r4
    a12e:	4d25      	ldr	r5, [pc, #148]	; (a1c4 <tmr_init+0xe4>)
    a130:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    a132:	2202      	movs	r2, #2
    a134:	4924      	ldr	r1, [pc, #144]	; (a1c8 <tmr_init+0xe8>)
    a136:	0020      	movs	r0, r4
    a138:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    a13a:	6820      	ldr	r0, [r4, #0]
    a13c:	4b23      	ldr	r3, [pc, #140]	; (a1cc <tmr_init+0xec>)
    a13e:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    a140:	4b23      	ldr	r3, [pc, #140]	; (a1d0 <tmr_init+0xf0>)
    a142:	5c1a      	ldrb	r2, [r3, r0]
    a144:	231f      	movs	r3, #31
    a146:	4013      	ands	r3, r2
    a148:	2101      	movs	r1, #1
    a14a:	000a      	movs	r2, r1
    a14c:	409a      	lsls	r2, r3
    a14e:	4b21      	ldr	r3, [pc, #132]	; (a1d4 <tmr_init+0xf4>)
    a150:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    a152:	7e63      	ldrb	r3, [r4, #25]
    a154:	2201      	movs	r2, #1
    a156:	4313      	orrs	r3, r2
    a158:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    a15a:	6822      	ldr	r2, [r4, #0]
    a15c:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    a15e:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    a160:	2b00      	cmp	r3, #0
    a162:	d1fc      	bne.n	a15e <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    a164:	6813      	ldr	r3, [r2, #0]
    a166:	2102      	movs	r1, #2
    a168:	430b      	orrs	r3, r1
    a16a:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    a16c:	2000      	movs	r0, #0
    a16e:	4b1a      	ldr	r3, [pc, #104]	; (a1d8 <tmr_init+0xf8>)
    a170:	4798      	blx	r3
    a172:	4d1a      	ldr	r5, [pc, #104]	; (a1dc <tmr_init+0xfc>)
    a174:	47a8      	blx	r5
    a176:	491a      	ldr	r1, [pc, #104]	; (a1e0 <tmr_init+0x100>)
    a178:	4b1a      	ldr	r3, [pc, #104]	; (a1e4 <tmr_init+0x104>)
    a17a:	4798      	blx	r3
    a17c:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    a17e:	4b1a      	ldr	r3, [pc, #104]	; (a1e8 <tmr_init+0x108>)
    a180:	4798      	blx	r3
    a182:	47a8      	blx	r5
    a184:	1c01      	adds	r1, r0, #0
    a186:	1c20      	adds	r0, r4, #0
    a188:	4b18      	ldr	r3, [pc, #96]	; (a1ec <tmr_init+0x10c>)
    a18a:	4798      	blx	r3
    a18c:	21fc      	movs	r1, #252	; 0xfc
    a18e:	0589      	lsls	r1, r1, #22
    a190:	4b17      	ldr	r3, [pc, #92]	; (a1f0 <tmr_init+0x110>)
    a192:	4798      	blx	r3
    a194:	2800      	cmp	r0, #0
    a196:	d005      	beq.n	a1a4 <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    a198:	21fe      	movs	r1, #254	; 0xfe
    a19a:	0589      	lsls	r1, r1, #22
    a19c:	1c20      	adds	r0, r4, #0
    a19e:	4b15      	ldr	r3, [pc, #84]	; (a1f4 <tmr_init+0x114>)
    a1a0:	4798      	blx	r3
    a1a2:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    a1a4:	1c20      	adds	r0, r4, #0
    a1a6:	4b10      	ldr	r3, [pc, #64]	; (a1e8 <tmr_init+0x108>)
    a1a8:	4798      	blx	r3
    a1aa:	b2c0      	uxtb	r0, r0
}
    a1ac:	bd70      	pop	{r4, r5, r6, pc}
    a1ae:	46c0      	nop			; (mov r8, r8)
    a1b0:	20001824 	.word	0x20001824
    a1b4:	2000185c 	.word	0x2000185c
    a1b8:	42002000 	.word	0x42002000
    a1bc:	00002649 	.word	0x00002649
    a1c0:	00009fe5 	.word	0x00009fe5
    a1c4:	00002525 	.word	0x00002525
    a1c8:	00009fd9 	.word	0x00009fd9
    a1cc:	0000260d 	.word	0x0000260d
    a1d0:	00019504 	.word	0x00019504
    a1d4:	e000e100 	.word	0xe000e100
    a1d8:	000022ed 	.word	0x000022ed
    a1dc:	0001214d 	.word	0x0001214d
    a1e0:	49742400 	.word	0x49742400
    a1e4:	00011715 	.word	0x00011715
    a1e8:	00011201 	.word	0x00011201
    a1ec:	00011d35 	.word	0x00011d35
    a1f0:	00011159 	.word	0x00011159
    a1f4:	000113f1 	.word	0x000113f1

0000a1f8 <nvm_read>:
 * \internal Pointer to the NVM MEMORY region start address
 */
#define NVM_MEMORY        ((volatile uint16_t *)FLASH_ADDR)
status_code_t nvm_read(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    a1f8:	b570      	push	{r4, r5, r6, lr}

status_code_t nvm_sam0_read(mem_type_t mem, uint32_t address,
		uint8_t *const buffer,
		uint32_t len)
{
	switch (mem) {
    a1fa:	2800      	cmp	r0, #0
    a1fc:	d122      	bne.n	a244 <nvm_read+0x4c>
    a1fe:	4814      	ldr	r0, [pc, #80]	; (a250 <nvm_read+0x58>)
    a200:	7d04      	ldrb	r4, [r0, #20]
    {
		/* Get a pointer to the module hardware instance */
		Nvmctrl *const nvm_module = NVMCTRL;
		/* Check if the module is busy */
		if (!nvm_is_ready()) {
			return STATUS_BUSY;
    a202:	2005      	movs	r0, #5
		if (!nvm_is_ready()) {
    a204:	07e4      	lsls	r4, r4, #31
    a206:	d400      	bmi.n	a20a <nvm_read+0x12>
}
    a208:	bd70      	pop	{r4, r5, r6, pc}
		}

		/* Clear error flags */
		nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    a20a:	2420      	movs	r4, #32
    a20c:	34ff      	adds	r4, #255	; 0xff
    a20e:	4810      	ldr	r0, [pc, #64]	; (a250 <nvm_read+0x58>)
    a210:	8304      	strh	r4, [r0, #24]
		uint32_t page_address = address / 2;

		/* NVM _must_ be accessed as a series of 16-bit words, perform
		 * manual copy
		 * to ensure alignment */
		for (uint16_t i = 0; i < len; i += 2) {
    a212:	2b00      	cmp	r3, #0
    a214:	d019      	beq.n	a24a <nvm_read+0x52>
    a216:	2001      	movs	r0, #1
    a218:	4381      	bics	r1, r0
    a21a:	2000      	movs	r0, #0
    a21c:	2500      	movs	r5, #0
			buffer[i] = (data & 0xFF);

			/* If we are not at the end of a read request with an
			 * odd byte count,
			 * store the next byte of data as well */
			if (i < (len - 1)) {
    a21e:	1e5e      	subs	r6, r3, #1
    a220:	e005      	b.n	a22e <nvm_read+0x36>
		for (uint16_t i = 0; i < len; i += 2) {
    a222:	3002      	adds	r0, #2
    a224:	b280      	uxth	r0, r0
    a226:	0005      	movs	r5, r0
    a228:	3102      	adds	r1, #2
    a22a:	4283      	cmp	r3, r0
    a22c:	d908      	bls.n	a240 <nvm_read+0x48>
			uint16_t data = NVM_MEMORY[page_address++];
    a22e:	880c      	ldrh	r4, [r1, #0]
    a230:	b2a4      	uxth	r4, r4
			buffer[i] = (data & 0xFF);
    a232:	5554      	strb	r4, [r2, r5]
			if (i < (len - 1)) {
    a234:	42ae      	cmp	r6, r5
    a236:	d9f4      	bls.n	a222 <nvm_read+0x2a>
				buffer[i + 1] = (data >> 8);
    a238:	1955      	adds	r5, r2, r5
    a23a:	0a24      	lsrs	r4, r4, #8
    a23c:	706c      	strb	r4, [r5, #1]
    a23e:	e7f0      	b.n	a222 <nvm_read+0x2a>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    a240:	2000      	movs	r0, #0
    a242:	e7e1      	b.n	a208 <nvm_read+0x10>
		return ERR_INVALID_ARG;
    a244:	2008      	movs	r0, #8
    a246:	4240      	negs	r0, r0
    a248:	e7de      	b.n	a208 <nvm_read+0x10>
	return STATUS_OK;
    a24a:	2000      	movs	r0, #0
    a24c:	e7dc      	b.n	a208 <nvm_read+0x10>
    a24e:	46c0      	nop			; (mov r8, r8)
    a250:	41004000 	.word	0x41004000

0000a254 <nvm_write>:
	return error_code;
}

status_code_t nvm_write(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    a254:	b5f0      	push	{r4, r5, r6, r7, lr}
    a256:	46de      	mov	lr, fp
    a258:	4657      	mov	r7, sl
    a25a:	464e      	mov	r6, r9
    a25c:	4645      	mov	r5, r8
    a25e:	b5e0      	push	{r5, r6, r7, lr}
    a260:	b0c5      	sub	sp, #276	; 0x114
	switch (mem) {
    a262:	2800      	cmp	r0, #0
    a264:	d168      	bne.n	a338 <nvm_write+0xe4>
	case INT_FLASH:

		if (STATUS_OK != nvm_memcpy(address, buffer, len, true))
    a266:	b29b      	uxth	r3, r3
    a268:	469a      	mov	sl, r3
	volatile uint8_t *dest_add = (uint8_t *)destination_address;
    a26a:	4688      	mov	r8, r1
	uint32_t row_start_address
    a26c:	23ff      	movs	r3, #255	; 0xff
    a26e:	4399      	bics	r1, r3
    a270:	9100      	str	r1, [sp, #0]
	while (length) {
    a272:	4653      	mov	r3, sl
    a274:	2b00      	cmp	r3, #0
    a276:	d06b      	beq.n	a350 <nvm_write+0xfc>
    a278:	ab04      	add	r3, sp, #16
    a27a:	1a5b      	subs	r3, r3, r1
    a27c:	9302      	str	r3, [sp, #8]
				error_code = nvm_read_buffer(
    a27e:	4e35      	ldr	r6, [pc, #212]	; (a354 <nvm_write+0x100>)
				error_code = nvm_erase_row(row_start_address);
    a280:	4b35      	ldr	r3, [pc, #212]	; (a358 <nvm_write+0x104>)
    a282:	469b      	mov	fp, r3
    a284:	9203      	str	r2, [sp, #12]
    a286:	e03a      	b.n	a2fe <nvm_write+0xaa>
				(FLASH_PAGE_SIZE * NVMCTRL_ROW_PAGES); i++) {
    a288:	3301      	adds	r3, #1
		for (i = row_start_address;
    a28a:	42bb      	cmp	r3, r7
    a28c:	d20e      	bcs.n	a2ac <nvm_write+0x58>
			if (length && ((uint8_t *)i == dest_add)) {
    a28e:	2a00      	cmp	r2, #0
    a290:	d0fa      	beq.n	a288 <nvm_write+0x34>
    a292:	4299      	cmp	r1, r3
    a294:	d1f8      	bne.n	a288 <nvm_write+0x34>
				row_buffer[i - row_start_address] = *src_buf++;
    a296:	9d03      	ldr	r5, [sp, #12]
    a298:	7828      	ldrb	r0, [r5, #0]
    a29a:	9c02      	ldr	r4, [sp, #8]
    a29c:	54e0      	strb	r0, [r4, r3]
				dest_add++;
    a29e:	3101      	adds	r1, #1
				length--;
    a2a0:	3a01      	subs	r2, #1
    a2a2:	b292      	uxth	r2, r2
				row_buffer[i - row_start_address] = *src_buf++;
    a2a4:	0028      	movs	r0, r5
    a2a6:	3001      	adds	r0, #1
    a2a8:	9003      	str	r0, [sp, #12]
    a2aa:	e7ed      	b.n	a288 <nvm_write+0x34>
    a2ac:	4692      	mov	sl, r2
    a2ae:	4688      	mov	r8, r1
    a2b0:	9c01      	ldr	r4, [sp, #4]
	cpu_irq_enter_critical();
    a2b2:	4b2a      	ldr	r3, [pc, #168]	; (a35c <nvm_write+0x108>)
    a2b4:	4798      	blx	r3
				error_code = nvm_erase_row(row_start_address);
    a2b6:	9800      	ldr	r0, [sp, #0]
    a2b8:	47d8      	blx	fp
			} while (error_code == STATUS_BUSY);
    a2ba:	2805      	cmp	r0, #5
    a2bc:	d0fb      	beq.n	a2b6 <nvm_write+0x62>
			if (error_code != STATUS_OK) {
    a2be:	2800      	cmp	r0, #0
    a2c0:	d13d      	bne.n	a33e <nvm_write+0xea>
    a2c2:	9d00      	ldr	r5, [sp, #0]
				error_code = nvm_write_buffer(
    a2c4:	4f26      	ldr	r7, [pc, #152]	; (a360 <nvm_write+0x10c>)
    a2c6:	9401      	str	r4, [sp, #4]
    a2c8:	9b00      	ldr	r3, [sp, #0]
    a2ca:	1aec      	subs	r4, r5, r3
    a2cc:	ab04      	add	r3, sp, #16
    a2ce:	469c      	mov	ip, r3
    a2d0:	4464      	add	r4, ip
    a2d2:	2240      	movs	r2, #64	; 0x40
    a2d4:	0021      	movs	r1, r4
    a2d6:	0028      	movs	r0, r5
    a2d8:	47b8      	blx	r7
			} while (error_code == STATUS_BUSY);
    a2da:	2805      	cmp	r0, #5
    a2dc:	d0f9      	beq.n	a2d2 <nvm_write+0x7e>
			if (error_code != STATUS_OK) {
    a2de:	2800      	cmp	r0, #0
    a2e0:	d12d      	bne.n	a33e <nvm_write+0xea>
    a2e2:	3540      	adds	r5, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    a2e4:	9b01      	ldr	r3, [sp, #4]
    a2e6:	42ab      	cmp	r3, r5
    a2e8:	d1ee      	bne.n	a2c8 <nvm_write+0x74>
	cpu_irq_leave_critical();
    a2ea:	4b1e      	ldr	r3, [pc, #120]	; (a364 <nvm_write+0x110>)
    a2ec:	4798      	blx	r3
    a2ee:	9b02      	ldr	r3, [sp, #8]
    a2f0:	3b01      	subs	r3, #1
    a2f2:	3bff      	subs	r3, #255	; 0xff
    a2f4:	9302      	str	r3, [sp, #8]
    a2f6:	9500      	str	r5, [sp, #0]
	while (length) {
    a2f8:	4653      	mov	r3, sl
    a2fa:	2b00      	cmp	r3, #0
    a2fc:	d028      	beq.n	a350 <nvm_write+0xfc>
    a2fe:	9b00      	ldr	r3, [sp, #0]
    a300:	1c5f      	adds	r7, r3, #1
    a302:	37ff      	adds	r7, #255	; 0xff
{
    a304:	001c      	movs	r4, r3
    a306:	46b9      	mov	r9, r7
    a308:	001f      	movs	r7, r3
    a30a:	1be5      	subs	r5, r4, r7
    a30c:	ab04      	add	r3, sp, #16
    a30e:	469c      	mov	ip, r3
    a310:	4465      	add	r5, ip
				error_code = nvm_read_buffer(
    a312:	2240      	movs	r2, #64	; 0x40
    a314:	0029      	movs	r1, r5
    a316:	0020      	movs	r0, r4
    a318:	47b0      	blx	r6
			} while (error_code == STATUS_BUSY);
    a31a:	2805      	cmp	r0, #5
    a31c:	d0f9      	beq.n	a312 <nvm_write+0xbe>
			if (error_code != STATUS_OK) {
    a31e:	2800      	cmp	r0, #0
    a320:	d10d      	bne.n	a33e <nvm_write+0xea>
    a322:	3440      	adds	r4, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    a324:	454c      	cmp	r4, r9
    a326:	d1f0      	bne.n	a30a <nvm_write+0xb6>
    a328:	464f      	mov	r7, r9
		for (i = row_start_address;
    a32a:	9b00      	ldr	r3, [sp, #0]
    a32c:	429f      	cmp	r7, r3
    a32e:	d9c0      	bls.n	a2b2 <nvm_write+0x5e>
    a330:	4652      	mov	r2, sl
    a332:	4641      	mov	r1, r8
    a334:	9401      	str	r4, [sp, #4]
    a336:	e7aa      	b.n	a28e <nvm_write+0x3a>
			return ERR_INVALID_ARG;
		}
		break;

	default:
		return ERR_INVALID_ARG;
    a338:	2008      	movs	r0, #8
    a33a:	4240      	negs	r0, r0
    a33c:	e001      	b.n	a342 <nvm_write+0xee>
			return ERR_INVALID_ARG;
    a33e:	2008      	movs	r0, #8
    a340:	4240      	negs	r0, r0
	}

	return STATUS_OK;
}
    a342:	b045      	add	sp, #276	; 0x114
    a344:	bc3c      	pop	{r2, r3, r4, r5}
    a346:	4690      	mov	r8, r2
    a348:	4699      	mov	r9, r3
    a34a:	46a2      	mov	sl, r4
    a34c:	46ab      	mov	fp, r5
    a34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
    a350:	2000      	movs	r0, #0
    a352:	e7f6      	b.n	a342 <nvm_write+0xee>
    a354:	00000911 	.word	0x00000911
    a358:	00000991 	.word	0x00000991
    a35c:	000001ad 	.word	0x000001ad
    a360:	00000839 	.word	0x00000839
    a364:	000001ed 	.word	0x000001ed

0000a368 <nvm_init>:

status_code_t nvm_init(mem_type_t mem)
{
    a368:	b500      	push	{lr}
    a36a:	b083      	sub	sp, #12
	if (INT_FLASH == mem) {
    a36c:	2800      	cmp	r0, #0
    a36e:	d110      	bne.n	a392 <nvm_init+0x2a>
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    a370:	2300      	movs	r3, #0
    a372:	466a      	mov	r2, sp
    a374:	7013      	strb	r3, [r2, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    a376:	4a08      	ldr	r2, [pc, #32]	; (a398 <nvm_init+0x30>)
    a378:	6852      	ldr	r2, [r2, #4]
	config->disable_cache     = false;
    a37a:	466a      	mov	r2, sp
    a37c:	70d3      	strb	r3, [r2, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    a37e:	7113      	strb	r3, [r2, #4]
		struct nvm_config config;
		/* Get the default configuration */
		nvm_get_config_defaults(&config);

		/* Enable automatic page write mode */
		config.manual_page_write = false;
    a380:	7053      	strb	r3, [r2, #1]

		/* Set wait state to 1 */
		config.wait_states = 2;
    a382:	3302      	adds	r3, #2
    a384:	7093      	strb	r3, [r2, #2]

		/* Set the NVM configuration */
		nvm_set_config(&config);
    a386:	4668      	mov	r0, sp
    a388:	4b04      	ldr	r3, [pc, #16]	; (a39c <nvm_init+0x34>)
    a38a:	4798      	blx	r3

		return STATUS_OK;
    a38c:	2000      	movs	r0, #0
	}

	return ERR_INVALID_ARG;
}
    a38e:	b003      	add	sp, #12
    a390:	bd00      	pop	{pc}
	return ERR_INVALID_ARG;
    a392:	2008      	movs	r0, #8
    a394:	4240      	negs	r0, r0
    a396:	e7fa      	b.n	a38e <nvm_init+0x26>
    a398:	41004000 	.word	0x41004000
    a39c:	000006d1 	.word	0x000006d1

0000a3a0 <EER34_statusCallback>:
 *	@param	sts			status de EER34
 *	@param	loraSts		status del stack LoRaWan
 */
void EER34_statusCallback(EER34_status_t sts, StackRetStatus_t LoraSts)
{
	if (sts == EER34_STATUS_JOIN_SUCCSESS) {
    a3a0:	2801      	cmp	r0, #1
    a3a2:	d006      	beq.n	a3b2 <EER34_statusCallback+0x12>
		if (fsm == APP_FSM_JOINING)
			fsm = APP_FSM_JOINED;
	}
	else if (sts == EER34_STATUS_JOIN_ERROR) {
    a3a4:	2802      	cmp	r0, #2
    a3a6:	d00c      	beq.n	a3c2 <EER34_statusCallback+0x22>
		if (fsm == APP_FSM_JOINING)
			fsm = APP_FSM_JOINFAILED;
	}
	else if (sts == EER34_STATUS_TX_SUCCSESS) {
    a3a8:	2803      	cmp	r0, #3
    a3aa:	d012      	beq.n	a3d2 <EER34_statusCallback+0x32>
		if (fsm == APP_FSM_TXWAIT)
			fsm = APP_FSM_TXOK;
	}
	else if (sts == EER34_STATUS_TX_TIMEOUT) {
    a3ac:	2805      	cmp	r0, #5
    a3ae:	d018      	beq.n	a3e2 <EER34_statusCallback+0x42>
		if (fsm == APP_FSM_TXWAIT)
		fsm = APP_FSM_TXERROR;
	}
}
    a3b0:	4770      	bx	lr
		if (fsm == APP_FSM_JOINING)
    a3b2:	4b10      	ldr	r3, [pc, #64]	; (a3f4 <EER34_statusCallback+0x54>)
    a3b4:	781b      	ldrb	r3, [r3, #0]
    a3b6:	2b01      	cmp	r3, #1
    a3b8:	d1fa      	bne.n	a3b0 <EER34_statusCallback+0x10>
			fsm = APP_FSM_JOINED;
    a3ba:	2203      	movs	r2, #3
    a3bc:	4b0d      	ldr	r3, [pc, #52]	; (a3f4 <EER34_statusCallback+0x54>)
    a3be:	701a      	strb	r2, [r3, #0]
    a3c0:	e7f6      	b.n	a3b0 <EER34_statusCallback+0x10>
		if (fsm == APP_FSM_JOINING)
    a3c2:	4b0c      	ldr	r3, [pc, #48]	; (a3f4 <EER34_statusCallback+0x54>)
    a3c4:	781b      	ldrb	r3, [r3, #0]
    a3c6:	2b01      	cmp	r3, #1
    a3c8:	d1f2      	bne.n	a3b0 <EER34_statusCallback+0x10>
			fsm = APP_FSM_JOINFAILED;
    a3ca:	2202      	movs	r2, #2
    a3cc:	4b09      	ldr	r3, [pc, #36]	; (a3f4 <EER34_statusCallback+0x54>)
    a3ce:	701a      	strb	r2, [r3, #0]
    a3d0:	e7ee      	b.n	a3b0 <EER34_statusCallback+0x10>
		if (fsm == APP_FSM_TXWAIT)
    a3d2:	4b08      	ldr	r3, [pc, #32]	; (a3f4 <EER34_statusCallback+0x54>)
    a3d4:	781b      	ldrb	r3, [r3, #0]
    a3d6:	2b04      	cmp	r3, #4
    a3d8:	d1ea      	bne.n	a3b0 <EER34_statusCallback+0x10>
			fsm = APP_FSM_TXOK;
    a3da:	2205      	movs	r2, #5
    a3dc:	4b05      	ldr	r3, [pc, #20]	; (a3f4 <EER34_statusCallback+0x54>)
    a3de:	701a      	strb	r2, [r3, #0]
    a3e0:	e7e6      	b.n	a3b0 <EER34_statusCallback+0x10>
		if (fsm == APP_FSM_TXWAIT)
    a3e2:	4b04      	ldr	r3, [pc, #16]	; (a3f4 <EER34_statusCallback+0x54>)
    a3e4:	781b      	ldrb	r3, [r3, #0]
    a3e6:	2b04      	cmp	r3, #4
    a3e8:	d1e2      	bne.n	a3b0 <EER34_statusCallback+0x10>
		fsm = APP_FSM_TXERROR;
    a3ea:	2206      	movs	r2, #6
    a3ec:	4b01      	ldr	r3, [pc, #4]	; (a3f4 <EER34_statusCallback+0x54>)
    a3ee:	701a      	strb	r2, [r3, #0]
}
    a3f0:	e7de      	b.n	a3b0 <EER34_statusCallback+0x10>
    a3f2:	46c0      	nop			; (mov r8, r8)
    a3f4:	20000f28 	.word	0x20000f28

0000a3f8 <EER34_rxDataCallback>:
 *	@param	data		puntero a los datos
 *	@param	len			cantidad de bytes de datos
 */
void EER34_rxDataCallback(int port, uint8_t *data, int len)
{
}
    a3f8:	4770      	bx	lr
	...

0000a3fc <EES34_enterLowPower>:
 *
 *  Sirve para que la aplicacion deinicialice y/o apague lo que haga falta
 *  al entrar en el modo de bajo consumo.
 */
void EES34_enterLowPower(void)
{
    a3fc:	b510      	push	{r4, lr}
	// Hay que detener el tick sino no entra en bajo consumo
	EER34_tickStop();
    a3fe:	4b01      	ldr	r3, [pc, #4]	; (a404 <EES34_enterLowPower+0x8>)
    a400:	4798      	blx	r3
}
    a402:	bd10      	pop	{r4, pc}
    a404:	0000a839 	.word	0x0000a839

0000a408 <EES34_exitLowPower>:
 *  Sirve para que la aplicacion reponga los recursos al despertar del modo 
 *  de bajo consumo, volviendo a configurar y/o encender los recursos
 *  que deinicializo y/o apago al entrar en el modo de bajo consumo.
 */
void EES34_exitLowPower(void)
{
    a408:	b510      	push	{r4, lr}
	// Vuelve a enceder el tick que lo apago al entrar en bajo consumo
	EER34_tickStart(10);
    a40a:	200a      	movs	r0, #10
    a40c:	4b01      	ldr	r3, [pc, #4]	; (a414 <EES34_exitLowPower+0xc>)
    a40e:	4798      	blx	r3
}
    a410:	bd10      	pop	{r4, pc}
    a412:	46c0      	nop			; (mov r8, r8)
    a414:	0000a805 	.word	0x0000a805

0000a418 <EES34_appInit>:

/** 
 *	Funcion de inicializacion de la aplicacion
 */
void EES34_appInit(void)
{
    a418:	b5f0      	push	{r4, r5, r6, r7, lr}
    a41a:	46c6      	mov	lr, r8
    a41c:	b500      	push	{lr}
    a41e:	b088      	sub	sp, #32
	static volatile int res;
	uint8_t devEuix[] = {0xDE, 0xAF, 0xFA, 0xCE, 0xDE, 0xAF, 0x55, 0x20};
    a420:	af06      	add	r7, sp, #24
    a422:	4b18      	ldr	r3, [pc, #96]	; (a484 <EES34_appInit+0x6c>)
    a424:	003a      	movs	r2, r7
    a426:	cb03      	ldmia	r3!, {r0, r1}
    a428:	c203      	stmia	r2!, {r0, r1}
	uint8_t appEuix[] = {0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11};
    a42a:	ae04      	add	r6, sp, #16
    a42c:	0032      	movs	r2, r6
    a42e:	cb03      	ldmia	r3!, {r0, r1}
    a430:	c203      	stmia	r2!, {r0, r1}
	uint8_t appKeyx[] = {0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
    a432:	466a      	mov	r2, sp
    a434:	cb13      	ldmia	r3!, {r0, r1, r4}
    a436:	c213      	stmia	r2!, {r0, r1, r4}
    a438:	681b      	ldr	r3, [r3, #0]
    a43a:	6013      	str	r3, [r2, #0]
		0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11};
		
	printf("\r\n\r\nEESAMR34\r\nInitializing\r\n");
    a43c:	4812      	ldr	r0, [pc, #72]	; (a488 <EES34_appInit+0x70>)
    a43e:	4b13      	ldr	r3, [pc, #76]	; (a48c <EES34_appInit+0x74>)
    a440:	4698      	mov	r8, r3
    a442:	4798      	blx	r3

	// Este seteo debe ir primero porque inicia el stack LoRaWan
	res = EER34_setBand(ISM_AU915, 1);
    a444:	2101      	movs	r1, #1
    a446:	2003      	movs	r0, #3
    a448:	4b11      	ldr	r3, [pc, #68]	; (a490 <EES34_appInit+0x78>)
    a44a:	4798      	blx	r3
    a44c:	4c11      	ldr	r4, [pc, #68]	; (a494 <EES34_appInit+0x7c>)
    a44e:	6020      	str	r0, [r4, #0]

	// Estos seteos pueden ir en cualqueir orden pero siempre
	// despues de setear la banda (sino dan error)
	res = EER34_setDevEui(devEuix);
    a450:	0038      	movs	r0, r7
    a452:	4b11      	ldr	r3, [pc, #68]	; (a498 <EES34_appInit+0x80>)
    a454:	4798      	blx	r3
    a456:	6020      	str	r0, [r4, #0]
	res = EER34_setAppEui(appEuix);
    a458:	0030      	movs	r0, r6
    a45a:	4b10      	ldr	r3, [pc, #64]	; (a49c <EES34_appInit+0x84>)
    a45c:	4798      	blx	r3
    a45e:	6020      	str	r0, [r4, #0]
	res = EER34_setAppKey(appKeyx);
    a460:	4668      	mov	r0, sp
    a462:	4b0f      	ldr	r3, [pc, #60]	; (a4a0 <EES34_appInit+0x88>)
    a464:	4798      	blx	r3
    a466:	6020      	str	r0, [r4, #0]
	res = EER32_setDeviceClass(CLASS_A);
    a468:	2001      	movs	r0, #1
    a46a:	4b0e      	ldr	r3, [pc, #56]	; (a4a4 <EES34_appInit+0x8c>)
    a46c:	4798      	blx	r3
    a46e:	6020      	str	r0, [r4, #0]
	
	// Arranca tick de 10ms
	EER34_tickStart(10);	// arranca tick de 10ms
    a470:	200a      	movs	r0, #10
    a472:	4b0d      	ldr	r3, [pc, #52]	; (a4a8 <EES34_appInit+0x90>)
    a474:	4798      	blx	r3

	printf("Initialization Done\r\n\r\n");
    a476:	480d      	ldr	r0, [pc, #52]	; (a4ac <EES34_appInit+0x94>)
    a478:	47c0      	blx	r8
}
    a47a:	b008      	add	sp, #32
    a47c:	bc04      	pop	{r2}
    a47e:	4690      	mov	r8, r2
    a480:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a482:	46c0      	nop			; (mov r8, r8)
    a484:	00019534 	.word	0x00019534
    a488:	00019554 	.word	0x00019554
    a48c:	00014039 	.word	0x00014039
    a490:	0000a75d 	.word	0x0000a75d
    a494:	20000f2c 	.word	0x20000f2c
    a498:	0000a6d5 	.word	0x0000a6d5
    a49c:	0000a6f5 	.word	0x0000a6f5
    a4a0:	0000a715 	.word	0x0000a715
    a4a4:	0000a735 	.word	0x0000a735
    a4a8:	0000a805 	.word	0x0000a805
    a4ac:	00019570 	.word	0x00019570

0000a4b0 <EER34_tickCallback>:
/** 
 *	@brief	Callback del tick de la aplicacion
 */
void EER34_tickCallback(void)
{
	if (timer1)	timer1--;
    a4b0:	4b03      	ldr	r3, [pc, #12]	; (a4c0 <EER34_tickCallback+0x10>)
    a4b2:	681b      	ldr	r3, [r3, #0]
    a4b4:	2b00      	cmp	r3, #0
    a4b6:	d002      	beq.n	a4be <EER34_tickCallback+0xe>
    a4b8:	3b01      	subs	r3, #1
    a4ba:	4a01      	ldr	r2, [pc, #4]	; (a4c0 <EER34_tickCallback+0x10>)
    a4bc:	6013      	str	r3, [r2, #0]
}
    a4be:	4770      	bx	lr
    a4c0:	20001878 	.word	0x20001878

0000a4c4 <EES34_appTask>:

/** 
 *	Task de la aplicacion
 */
void EES34_appTask(void)
{
    a4c4:	b510      	push	{r4, lr}
    a4c6:	b082      	sub	sp, #8
	unsigned char data[] = {"ABCD"};
    a4c8:	4b4f      	ldr	r3, [pc, #316]	; (a608 <EES34_appTask+0x144>)
    a4ca:	681a      	ldr	r2, [r3, #0]
    a4cc:	9200      	str	r2, [sp, #0]
    a4ce:	791b      	ldrb	r3, [r3, #4]
    a4d0:	466a      	mov	r2, sp
    a4d2:	7113      	strb	r3, [r2, #4]
	static int count;
		
	switch(fsm) {
    a4d4:	4b4d      	ldr	r3, [pc, #308]	; (a60c <EES34_appTask+0x148>)
    a4d6:	781a      	ldrb	r2, [r3, #0]
    a4d8:	2a09      	cmp	r2, #9
    a4da:	d80e      	bhi.n	a4fa <EES34_appTask+0x36>
    a4dc:	0093      	lsls	r3, r2, #2
    a4de:	4a4c      	ldr	r2, [pc, #304]	; (a610 <EES34_appTask+0x14c>)
    a4e0:	58d3      	ldr	r3, [r2, r3]
    a4e2:	469f      	mov	pc, r3
	case APP_FSM_JOINFAILED:
		printf("Join failed\r\n\r\n");
    a4e4:	484b      	ldr	r0, [pc, #300]	; (a614 <EES34_appTask+0x150>)
    a4e6:	4b4c      	ldr	r3, [pc, #304]	; (a618 <EES34_appTask+0x154>)
    a4e8:	4798      	blx	r3
	case APP_FSM_INIT:
		printf("Sending join request\r\n");
    a4ea:	484c      	ldr	r0, [pc, #304]	; (a61c <EES34_appTask+0x158>)
    a4ec:	4b4a      	ldr	r3, [pc, #296]	; (a618 <EES34_appTask+0x154>)
    a4ee:	4798      	blx	r3
		EER34_joinOTAA();
    a4f0:	4b4b      	ldr	r3, [pc, #300]	; (a620 <EES34_appTask+0x15c>)
    a4f2:	4798      	blx	r3
		fsm = APP_FSM_JOINING;
    a4f4:	2201      	movs	r2, #1
    a4f6:	4b45      	ldr	r3, [pc, #276]	; (a60c <EES34_appTask+0x148>)
    a4f8:	701a      	strb	r2, [r3, #0]
		}
		break;
	default:
		break;
	}
}
    a4fa:	b002      	add	sp, #8
    a4fc:	bd10      	pop	{r4, pc}
		count = 1;
    a4fe:	2201      	movs	r2, #1
    a500:	4b48      	ldr	r3, [pc, #288]	; (a624 <EES34_appTask+0x160>)
    a502:	601a      	str	r2, [r3, #0]
		printf("Joined\r\n\r\n");
    a504:	4848      	ldr	r0, [pc, #288]	; (a628 <EES34_appTask+0x164>)
    a506:	4b44      	ldr	r3, [pc, #272]	; (a618 <EES34_appTask+0x154>)
    a508:	4798      	blx	r3
		if (EER34_tx(EER34_TXMODE_UNCONF, 1, data, 4)) {
    a50a:	2304      	movs	r3, #4
    a50c:	466a      	mov	r2, sp
    a50e:	2101      	movs	r1, #1
    a510:	2000      	movs	r0, #0
    a512:	4c46      	ldr	r4, [pc, #280]	; (a62c <EES34_appTask+0x168>)
    a514:	47a0      	blx	r4
    a516:	2800      	cmp	r0, #0
    a518:	d006      	beq.n	a528 <EES34_appTask+0x64>
			printf("Transmitting ...\r\n");
    a51a:	4845      	ldr	r0, [pc, #276]	; (a630 <EES34_appTask+0x16c>)
    a51c:	4b3e      	ldr	r3, [pc, #248]	; (a618 <EES34_appTask+0x154>)
    a51e:	4798      	blx	r3
			fsm = APP_FSM_TXWAIT;
    a520:	2204      	movs	r2, #4
    a522:	4b3a      	ldr	r3, [pc, #232]	; (a60c <EES34_appTask+0x148>)
    a524:	701a      	strb	r2, [r3, #0]
    a526:	e7e8      	b.n	a4fa <EES34_appTask+0x36>
			printf("Transmit Error\r\n");
    a528:	4842      	ldr	r0, [pc, #264]	; (a634 <EES34_appTask+0x170>)
    a52a:	4b3b      	ldr	r3, [pc, #236]	; (a618 <EES34_appTask+0x154>)
    a52c:	4798      	blx	r3
			timer1 = 500;
    a52e:	22fa      	movs	r2, #250	; 0xfa
    a530:	0052      	lsls	r2, r2, #1
    a532:	4b41      	ldr	r3, [pc, #260]	; (a638 <EES34_appTask+0x174>)
    a534:	601a      	str	r2, [r3, #0]
			fsm = APP_FSM_IDLE;
    a536:	3aee      	subs	r2, #238	; 0xee
    a538:	3aff      	subs	r2, #255	; 0xff
    a53a:	4b34      	ldr	r3, [pc, #208]	; (a60c <EES34_appTask+0x148>)
    a53c:	701a      	strb	r2, [r3, #0]
    a53e:	e7dc      	b.n	a4fa <EES34_appTask+0x36>
		printf("Transmit OK\r\n");
    a540:	483e      	ldr	r0, [pc, #248]	; (a63c <EES34_appTask+0x178>)
    a542:	4b35      	ldr	r3, [pc, #212]	; (a618 <EES34_appTask+0x154>)
    a544:	4798      	blx	r3
		timer1 = 500;
    a546:	22fa      	movs	r2, #250	; 0xfa
    a548:	0052      	lsls	r2, r2, #1
    a54a:	4b3b      	ldr	r3, [pc, #236]	; (a638 <EES34_appTask+0x174>)
    a54c:	601a      	str	r2, [r3, #0]
		fsm = APP_FSM_IDLE;
    a54e:	3aee      	subs	r2, #238	; 0xee
    a550:	3aff      	subs	r2, #255	; 0xff
    a552:	4b2e      	ldr	r3, [pc, #184]	; (a60c <EES34_appTask+0x148>)
    a554:	701a      	strb	r2, [r3, #0]
		break;
    a556:	e7d0      	b.n	a4fa <EES34_appTask+0x36>
		printf("Transmit Timeout\r\n");
    a558:	4839      	ldr	r0, [pc, #228]	; (a640 <EES34_appTask+0x17c>)
    a55a:	4b2f      	ldr	r3, [pc, #188]	; (a618 <EES34_appTask+0x154>)
    a55c:	4798      	blx	r3
		timer1 = 500;
    a55e:	22fa      	movs	r2, #250	; 0xfa
    a560:	0052      	lsls	r2, r2, #1
    a562:	4b35      	ldr	r3, [pc, #212]	; (a638 <EES34_appTask+0x174>)
    a564:	601a      	str	r2, [r3, #0]
		fsm = APP_FSM_IDLE;
    a566:	3aee      	subs	r2, #238	; 0xee
    a568:	3aff      	subs	r2, #255	; 0xff
    a56a:	4b28      	ldr	r3, [pc, #160]	; (a60c <EES34_appTask+0x148>)
    a56c:	701a      	strb	r2, [r3, #0]
		break;
    a56e:	e7c4      	b.n	a4fa <EES34_appTask+0x36>
		if (count % 3 == 0) {
    a570:	4b2c      	ldr	r3, [pc, #176]	; (a624 <EES34_appTask+0x160>)
    a572:	6818      	ldr	r0, [r3, #0]
    a574:	2103      	movs	r1, #3
    a576:	4b33      	ldr	r3, [pc, #204]	; (a644 <EES34_appTask+0x180>)
    a578:	4798      	blx	r3
    a57a:	2900      	cmp	r1, #0
    a57c:	d003      	beq.n	a586 <EES34_appTask+0xc2>
			fsm = APP_FSM_IDLE_TX;
    a57e:	2208      	movs	r2, #8
    a580:	4b22      	ldr	r3, [pc, #136]	; (a60c <EES34_appTask+0x148>)
    a582:	701a      	strb	r2, [r3, #0]
    a584:	e7b9      	b.n	a4fa <EES34_appTask+0x36>
			printf("\r\nGoing to sleep ...\r\n");
    a586:	4830      	ldr	r0, [pc, #192]	; (a648 <EES34_appTask+0x184>)
    a588:	4b23      	ldr	r3, [pc, #140]	; (a618 <EES34_appTask+0x154>)
    a58a:	4798      	blx	r3
			timer1 = 0;
    a58c:	2200      	movs	r2, #0
    a58e:	4b2a      	ldr	r3, [pc, #168]	; (a638 <EES34_appTask+0x174>)
    a590:	601a      	str	r2, [r3, #0]
			fsm = APP_FSM_SLEEP;
    a592:	3209      	adds	r2, #9
    a594:	4b1d      	ldr	r3, [pc, #116]	; (a60c <EES34_appTask+0x148>)
    a596:	701a      	strb	r2, [r3, #0]
    a598:	e7af      	b.n	a4fa <EES34_appTask+0x36>
		if (!timer1) {
    a59a:	4b27      	ldr	r3, [pc, #156]	; (a638 <EES34_appTask+0x174>)
    a59c:	681b      	ldr	r3, [r3, #0]
    a59e:	2b00      	cmp	r3, #0
    a5a0:	d1ab      	bne.n	a4fa <EES34_appTask+0x36>
			if (EER34_tx(EER34_TXMODE_CONF, 1, data, 4)) {
    a5a2:	3304      	adds	r3, #4
    a5a4:	466a      	mov	r2, sp
    a5a6:	2101      	movs	r1, #1
    a5a8:	2001      	movs	r0, #1
    a5aa:	4c20      	ldr	r4, [pc, #128]	; (a62c <EES34_appTask+0x168>)
    a5ac:	47a0      	blx	r4
    a5ae:	2800      	cmp	r0, #0
    a5b0:	d00e      	beq.n	a5d0 <EES34_appTask+0x10c>
				count++;
    a5b2:	4a1c      	ldr	r2, [pc, #112]	; (a624 <EES34_appTask+0x160>)
    a5b4:	6813      	ldr	r3, [r2, #0]
    a5b6:	3301      	adds	r3, #1
    a5b8:	6013      	str	r3, [r2, #0]
				printf("Transmitting ...\r\n");
    a5ba:	481d      	ldr	r0, [pc, #116]	; (a630 <EES34_appTask+0x16c>)
    a5bc:	4b16      	ldr	r3, [pc, #88]	; (a618 <EES34_appTask+0x154>)
    a5be:	4798      	blx	r3
				fsm = APP_FSM_TXWAIT;
    a5c0:	2204      	movs	r2, #4
    a5c2:	4b12      	ldr	r3, [pc, #72]	; (a60c <EES34_appTask+0x148>)
    a5c4:	701a      	strb	r2, [r3, #0]
			timer1 = 500;
    a5c6:	22fa      	movs	r2, #250	; 0xfa
    a5c8:	0052      	lsls	r2, r2, #1
    a5ca:	4b1b      	ldr	r3, [pc, #108]	; (a638 <EES34_appTask+0x174>)
    a5cc:	601a      	str	r2, [r3, #0]
    a5ce:	e794      	b.n	a4fa <EES34_appTask+0x36>
				printf("Transmit Error\r\n");
    a5d0:	4818      	ldr	r0, [pc, #96]	; (a634 <EES34_appTask+0x170>)
    a5d2:	4b11      	ldr	r3, [pc, #68]	; (a618 <EES34_appTask+0x154>)
    a5d4:	4798      	blx	r3
    a5d6:	e7f6      	b.n	a5c6 <EES34_appTask+0x102>
		if (!timer1) {
    a5d8:	4b17      	ldr	r3, [pc, #92]	; (a638 <EES34_appTask+0x174>)
    a5da:	681b      	ldr	r3, [r3, #0]
    a5dc:	2b00      	cmp	r3, #0
    a5de:	d000      	beq.n	a5e2 <EES34_appTask+0x11e>
    a5e0:	e78b      	b.n	a4fa <EES34_appTask+0x36>
			if (EER34_sleep(15000)) {
    a5e2:	481a      	ldr	r0, [pc, #104]	; (a64c <EES34_appTask+0x188>)
    a5e4:	4b1a      	ldr	r3, [pc, #104]	; (a650 <EES34_appTask+0x18c>)
    a5e6:	4798      	blx	r3
    a5e8:	2800      	cmp	r0, #0
    a5ea:	d106      	bne.n	a5fa <EES34_appTask+0x136>
				printf("Sleep failed\r\n");
    a5ec:	4819      	ldr	r0, [pc, #100]	; (a654 <EES34_appTask+0x190>)
    a5ee:	4b0a      	ldr	r3, [pc, #40]	; (a618 <EES34_appTask+0x154>)
    a5f0:	4798      	blx	r3
				timer1 = 50;
    a5f2:	2232      	movs	r2, #50	; 0x32
    a5f4:	4b10      	ldr	r3, [pc, #64]	; (a638 <EES34_appTask+0x174>)
    a5f6:	601a      	str	r2, [r3, #0]
}
    a5f8:	e77f      	b.n	a4fa <EES34_appTask+0x36>
				printf("Slept OK, woken-up!\r\n\r\n");
    a5fa:	4817      	ldr	r0, [pc, #92]	; (a658 <EES34_appTask+0x194>)
    a5fc:	4b06      	ldr	r3, [pc, #24]	; (a618 <EES34_appTask+0x154>)
    a5fe:	4798      	blx	r3
				fsm = APP_FSM_IDLE_TX;
    a600:	2208      	movs	r2, #8
    a602:	4b02      	ldr	r3, [pc, #8]	; (a60c <EES34_appTask+0x148>)
    a604:	701a      	strb	r2, [r3, #0]
    a606:	e778      	b.n	a4fa <EES34_appTask+0x36>
    a608:	000196e0 	.word	0x000196e0
    a60c:	20000f28 	.word	0x20000f28
    a610:	0001950c 	.word	0x0001950c
    a614:	00019624 	.word	0x00019624
    a618:	00014039 	.word	0x00014039
    a61c:	00019634 	.word	0x00019634
    a620:	0000a7e9 	.word	0x0000a7e9
    a624:	20000f24 	.word	0x20000f24
    a628:	0001964c 	.word	0x0001964c
    a62c:	0000a84d 	.word	0x0000a84d
    a630:	00019658 	.word	0x00019658
    a634:	0001966c 	.word	0x0001966c
    a638:	20001878 	.word	0x20001878
    a63c:	0001967c 	.word	0x0001967c
    a640:	0001968c 	.word	0x0001968c
    a644:	000110ed 	.word	0x000110ed
    a648:	000196a0 	.word	0x000196a0
    a64c:	00003a98 	.word	0x00003a98
    a650:	0000aa19 	.word	0x0000aa19
    a654:	000196d0 	.word	0x000196d0
    a658:	000196b8 	.word	0x000196b8

0000a65c <EES34_appResetCallback>:

/** 
 *	Callback de procesamiento de la causa de reset
 */
void EES34_appResetCallback(unsigned int rcause)
{
    a65c:	b510      	push	{r4, lr}
    a65e:	0004      	movs	r4, r0
	printf("Last reset cause: ");
    a660:	4813      	ldr	r0, [pc, #76]	; (a6b0 <EES34_appResetCallback+0x54>)
    a662:	4b14      	ldr	r3, [pc, #80]	; (a6b4 <EES34_appResetCallback+0x58>)
    a664:	4798      	blx	r3
	if(rcause & (1 << 6)) {
    a666:	0663      	lsls	r3, r4, #25
    a668:	d40a      	bmi.n	a680 <EES34_appResetCallback+0x24>
		printf("System Reset Request\r\n");
	}
	if(rcause & (1 << 5)) {
    a66a:	06a3      	lsls	r3, r4, #26
    a66c:	d40c      	bmi.n	a688 <EES34_appResetCallback+0x2c>
		printf("Watchdog Reset\r\n");
	}
	if(rcause & (1 << 4)) {
    a66e:	06e3      	lsls	r3, r4, #27
    a670:	d40e      	bmi.n	a690 <EES34_appResetCallback+0x34>
		printf("External Reset\r\n");
	}
	if(rcause & (1 << 2)) {
    a672:	0763      	lsls	r3, r4, #29
    a674:	d410      	bmi.n	a698 <EES34_appResetCallback+0x3c>
		printf("Brown Out 33 Detector Reset\r\n");
	}
	if(rcause & (1 << 1)) {
    a676:	07a3      	lsls	r3, r4, #30
    a678:	d412      	bmi.n	a6a0 <EES34_appResetCallback+0x44>
		printf("Brown Out 12 Detector Reset\r\n");
	}
	if(rcause & (1 << 0)) {
    a67a:	07e3      	lsls	r3, r4, #31
    a67c:	d414      	bmi.n	a6a8 <EES34_appResetCallback+0x4c>
		printf("Power-On Reset\r\n");
	}
}
    a67e:	bd10      	pop	{r4, pc}
		printf("System Reset Request\r\n");
    a680:	480d      	ldr	r0, [pc, #52]	; (a6b8 <EES34_appResetCallback+0x5c>)
    a682:	4b0e      	ldr	r3, [pc, #56]	; (a6bc <EES34_appResetCallback+0x60>)
    a684:	4798      	blx	r3
    a686:	e7f0      	b.n	a66a <EES34_appResetCallback+0xe>
		printf("Watchdog Reset\r\n");
    a688:	480d      	ldr	r0, [pc, #52]	; (a6c0 <EES34_appResetCallback+0x64>)
    a68a:	4b0c      	ldr	r3, [pc, #48]	; (a6bc <EES34_appResetCallback+0x60>)
    a68c:	4798      	blx	r3
    a68e:	e7ee      	b.n	a66e <EES34_appResetCallback+0x12>
		printf("External Reset\r\n");
    a690:	480c      	ldr	r0, [pc, #48]	; (a6c4 <EES34_appResetCallback+0x68>)
    a692:	4b0a      	ldr	r3, [pc, #40]	; (a6bc <EES34_appResetCallback+0x60>)
    a694:	4798      	blx	r3
    a696:	e7ec      	b.n	a672 <EES34_appResetCallback+0x16>
		printf("Brown Out 33 Detector Reset\r\n");
    a698:	480b      	ldr	r0, [pc, #44]	; (a6c8 <EES34_appResetCallback+0x6c>)
    a69a:	4b08      	ldr	r3, [pc, #32]	; (a6bc <EES34_appResetCallback+0x60>)
    a69c:	4798      	blx	r3
    a69e:	e7ea      	b.n	a676 <EES34_appResetCallback+0x1a>
		printf("Brown Out 12 Detector Reset\r\n");
    a6a0:	480a      	ldr	r0, [pc, #40]	; (a6cc <EES34_appResetCallback+0x70>)
    a6a2:	4b06      	ldr	r3, [pc, #24]	; (a6bc <EES34_appResetCallback+0x60>)
    a6a4:	4798      	blx	r3
    a6a6:	e7e8      	b.n	a67a <EES34_appResetCallback+0x1e>
		printf("Power-On Reset\r\n");
    a6a8:	4809      	ldr	r0, [pc, #36]	; (a6d0 <EES34_appResetCallback+0x74>)
    a6aa:	4b04      	ldr	r3, [pc, #16]	; (a6bc <EES34_appResetCallback+0x60>)
    a6ac:	4798      	blx	r3
}
    a6ae:	e7e6      	b.n	a67e <EES34_appResetCallback+0x22>
    a6b0:	00019588 	.word	0x00019588
    a6b4:	00013f75 	.word	0x00013f75
    a6b8:	0001959c 	.word	0x0001959c
    a6bc:	00014039 	.word	0x00014039
    a6c0:	000195b4 	.word	0x000195b4
    a6c4:	000195c4 	.word	0x000195c4
    a6c8:	000195d4 	.word	0x000195d4
    a6cc:	000195f4 	.word	0x000195f4
    a6d0:	00019614 	.word	0x00019614

0000a6d4 <EER34_setDevEui>:
 *	@brief	Setea el Device EUI
 *	@param	devEui	vector de 8 bytes de Device EUI (en el orden en que se lee)
 *	@return	1 si OK, 0 si fallo
 */
int EER34_setDevEui(uint8_t *devEui)
{
    a6d4:	b510      	push	{r4, lr}
    a6d6:	0001      	movs	r1, r0
	EER34_res = LORAWAN_SetAttr(DEV_EUI, devEui);
    a6d8:	2000      	movs	r0, #0
    a6da:	4b04      	ldr	r3, [pc, #16]	; (a6ec <EER34_setDevEui+0x18>)
    a6dc:	4798      	blx	r3
    a6de:	4b04      	ldr	r3, [pc, #16]	; (a6f0 <EER34_setDevEui+0x1c>)
    a6e0:	7018      	strb	r0, [r3, #0]
	
	if (EER34_res == LORAWAN_SUCCESS)
    a6e2:	3808      	subs	r0, #8
    a6e4:	4243      	negs	r3, r0
    a6e6:	4158      	adcs	r0, r3
		return 1;
		
	return 0;
}
    a6e8:	bd10      	pop	{r4, pc}
    a6ea:	46c0      	nop			; (mov r8, r8)
    a6ec:	0000e35d 	.word	0x0000e35d
    a6f0:	2000187c 	.word	0x2000187c

0000a6f4 <EER34_setAppEui>:
 *	@brief	Setea el Application EUI
 *	@param	appEui	vector de 8 bytes de Application EUI (en el orden en que se lee)
 *	@return	1 si OK, 0 si fallo
 */
int EER34_setAppEui(uint8_t *appEui)
{
    a6f4:	b510      	push	{r4, lr}
    a6f6:	0001      	movs	r1, r0
	EER34_res = LORAWAN_SetAttr(APP_EUI, appEui);
    a6f8:	2001      	movs	r0, #1
    a6fa:	4b04      	ldr	r3, [pc, #16]	; (a70c <EER34_setAppEui+0x18>)
    a6fc:	4798      	blx	r3
    a6fe:	4b04      	ldr	r3, [pc, #16]	; (a710 <EER34_setAppEui+0x1c>)
    a700:	7018      	strb	r0, [r3, #0]
	
	if (EER34_res == LORAWAN_SUCCESS)
    a702:	3808      	subs	r0, #8
    a704:	4243      	negs	r3, r0
    a706:	4158      	adcs	r0, r3
		return 1;
		
	return 0;
}
    a708:	bd10      	pop	{r4, pc}
    a70a:	46c0      	nop			; (mov r8, r8)
    a70c:	0000e35d 	.word	0x0000e35d
    a710:	2000187c 	.word	0x2000187c

0000a714 <EER34_setAppKey>:
 *	@brief	Setea el Application Key
 *	@param	appKey	vector de 16 bytes de Application Key (en el orden en que se lee)
 *	@return	1 si OK, 0 si fallo
 */
int EER34_setAppKey(uint8_t *appKey)
{
    a714:	b510      	push	{r4, lr}
    a716:	0001      	movs	r1, r0
	EER34_res = LORAWAN_SetAttr(APP_KEY, appKey);
    a718:	2003      	movs	r0, #3
    a71a:	4b04      	ldr	r3, [pc, #16]	; (a72c <EER34_setAppKey+0x18>)
    a71c:	4798      	blx	r3
    a71e:	4b04      	ldr	r3, [pc, #16]	; (a730 <EER34_setAppKey+0x1c>)
    a720:	7018      	strb	r0, [r3, #0]
	
	if (EER34_res == LORAWAN_SUCCESS)
    a722:	3808      	subs	r0, #8
    a724:	4243      	negs	r3, r0
    a726:	4158      	adcs	r0, r3
		return 1;
		
	return 0;
}
    a728:	bd10      	pop	{r4, pc}
    a72a:	46c0      	nop			; (mov r8, r8)
    a72c:	0000e35d 	.word	0x0000e35d
    a730:	2000187c 	.word	0x2000187c

0000a734 <EER32_setDeviceClass>:
 *	@brief	Setea la clase de dispositivo
 *	@param	class	CLASS_A, CLASS_B, CLASS_C
 *	@return	1 si OK, 0 si fallo
 */
int EER32_setDeviceClass(EdClass_t class)
{
    a734:	b500      	push	{lr}
    a736:	b083      	sub	sp, #12
    a738:	466b      	mov	r3, sp
    a73a:	1dd9      	adds	r1, r3, #7
    a73c:	7008      	strb	r0, [r1, #0]
    EER34_res = LORAWAN_SetAttr(EDCLASS, &class);
    a73e:	2019      	movs	r0, #25
    a740:	4b04      	ldr	r3, [pc, #16]	; (a754 <EER32_setDeviceClass+0x20>)
    a742:	4798      	blx	r3
    a744:	4b04      	ldr	r3, [pc, #16]	; (a758 <EER32_setDeviceClass+0x24>)
    a746:	7018      	strb	r0, [r3, #0]

	if (EER34_res == LORAWAN_SUCCESS)
    a748:	3808      	subs	r0, #8
    a74a:	4243      	negs	r3, r0
    a74c:	4158      	adcs	r0, r3
		return 1;
	
	return 0;
}
    a74e:	b003      	add	sp, #12
    a750:	bd00      	pop	{pc}
    a752:	46c0      	nop			; (mov r8, r8)
    a754:	0000e35d 	.word	0x0000e35d
    a758:	2000187c 	.word	0x2000187c

0000a75c <EER34_setBand>:
 *	@param	band		banda	(enum del stack LoraWan)
 *	@param	subBand		sub-banda	(1 a 8))
 *	@return	1 si OK, 0 si fallo
 */
int EER34_setBand(IsmBand_t band, int subBand)
{
    a75c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a75e:	46ce      	mov	lr, r9
    a760:	4647      	mov	r7, r8
    a762:	b580      	push	{r7, lr}
    a764:	b085      	sub	sp, #20
    a766:	000e      	movs	r6, r1
    ChannelParameters_t chParams;
    uint8_t allowedMin125khzCh, allowedMax125khzCh,allowed500khzChannel;
    bool joinBackoffEnable = false;
    a768:	2200      	movs	r2, #0
    a76a:	466b      	mov	r3, sp
    a76c:	71da      	strb	r2, [r3, #7]
	
	if (LORAWAN_Reset(band) != LORAWAN_SUCCESS)
    a76e:	4b1c      	ldr	r3, [pc, #112]	; (a7e0 <EER34_setBand+0x84>)
    a770:	4798      	blx	r3
		return 0;
    a772:	2300      	movs	r3, #0
	if (LORAWAN_Reset(band) != LORAWAN_SUCCESS)
    a774:	2808      	cmp	r0, #8
    a776:	d005      	beq.n	a784 <EER34_setBand+0x28>
	
	/// @todo	terminar de implementar 
	/// @see	processRunDemoApp(), mote_set_parameters(), processRunRestoreBand()

	return 1;
}
    a778:	0018      	movs	r0, r3
    a77a:	b005      	add	sp, #20
    a77c:	bc0c      	pop	{r2, r3}
    a77e:	4690      	mov	r8, r2
    a780:	4699      	mov	r9, r3
    a782:	bdf0      	pop	{r4, r5, r6, r7, pc}
	allowedMin125khzCh = (subBand-1)*EER34_MAX_SUBBAND_CHANNELS;
    a784:	1e75      	subs	r5, r6, #1
    a786:	00ed      	lsls	r5, r5, #3
    a788:	b2ed      	uxtb	r5, r5
	allowedMax125khzCh = ((subBand-1)*EER34_MAX_SUBBAND_CHANNELS) + 7 ;
    a78a:	1deb      	adds	r3, r5, #7
    a78c:	b2db      	uxtb	r3, r3
    a78e:	4698      	mov	r8, r3
	allowed500khzChannel = subBand + 63;
    a790:	363f      	adds	r6, #63	; 0x3f
    a792:	b2f6      	uxtb	r6, r6
    for (chParams.channelId = 0; chParams.channelId < EER34_MAX_NA_CHANNELS; chParams.channelId++)
    a794:	2200      	movs	r2, #0
    a796:	ab02      	add	r3, sp, #8
    a798:	701a      	strb	r2, [r3, #0]
    a79a:	2300      	movs	r3, #0
		    chParams.channelAttr.status = false;
    a79c:	ac02      	add	r4, sp, #8
    a79e:	4691      	mov	r9, r2
	    LORAWAN_SetAttr(CH_PARAM_STATUS, &chParams);
    a7a0:	4f10      	ldr	r7, [pc, #64]	; (a7e4 <EER34_setBand+0x88>)
    a7a2:	e00c      	b.n	a7be <EER34_setBand+0x62>
	    else if(chParams.channelId == allowed500khzChannel)
    a7a4:	429e      	cmp	r6, r3
    a7a6:	d011      	beq.n	a7cc <EER34_setBand+0x70>
		    chParams.channelAttr.status = false;
    a7a8:	464b      	mov	r3, r9
    a7aa:	7123      	strb	r3, [r4, #4]
	    LORAWAN_SetAttr(CH_PARAM_STATUS, &chParams);
    a7ac:	0021      	movs	r1, r4
    a7ae:	201c      	movs	r0, #28
    a7b0:	47b8      	blx	r7
    for (chParams.channelId = 0; chParams.channelId < EER34_MAX_NA_CHANNELS; chParams.channelId++)
    a7b2:	7823      	ldrb	r3, [r4, #0]
    a7b4:	3301      	adds	r3, #1
    a7b6:	b2db      	uxtb	r3, r3
    a7b8:	7023      	strb	r3, [r4, #0]
    a7ba:	2b47      	cmp	r3, #71	; 0x47
    a7bc:	d809      	bhi.n	a7d2 <EER34_setBand+0x76>
	    if((chParams.channelId >= allowedMin125khzCh) && (chParams.channelId <= allowedMax125khzCh))
    a7be:	429d      	cmp	r5, r3
    a7c0:	d8f0      	bhi.n	a7a4 <EER34_setBand+0x48>
    a7c2:	4598      	cmp	r8, r3
    a7c4:	d3ee      	bcc.n	a7a4 <EER34_setBand+0x48>
		    chParams.channelAttr.status = true;
    a7c6:	2301      	movs	r3, #1
    a7c8:	7123      	strb	r3, [r4, #4]
    a7ca:	e7ef      	b.n	a7ac <EER34_setBand+0x50>
		    chParams.channelAttr.status = true;
    a7cc:	2301      	movs	r3, #1
    a7ce:	7123      	strb	r3, [r4, #4]
    a7d0:	e7ec      	b.n	a7ac <EER34_setBand+0x50>
    LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE, &joinBackoffEnable);
    a7d2:	466b      	mov	r3, sp
    a7d4:	1dd9      	adds	r1, r3, #7
    a7d6:	202e      	movs	r0, #46	; 0x2e
    a7d8:	4b02      	ldr	r3, [pc, #8]	; (a7e4 <EER34_setBand+0x88>)
    a7da:	4798      	blx	r3
	return 1;
    a7dc:	2301      	movs	r3, #1
    a7de:	e7cb      	b.n	a778 <EER34_setBand+0x1c>
    a7e0:	0000e83d 	.word	0x0000e83d
    a7e4:	0000e35d 	.word	0x0000e35d

0000a7e8 <EER34_joinOTAA>:
/** 
 *	@brief	Inicia el Join por Over-The-Air-Activation (OTAA)
 *	@return	1 si OK, 0 si fallo
 */
int EER34_joinOTAA(void)
{
    a7e8:	b510      	push	{r4, lr}
	EER34_res = LORAWAN_Join(LORAWAN_OTAA);
    a7ea:	2000      	movs	r0, #0
    a7ec:	4b03      	ldr	r3, [pc, #12]	; (a7fc <EER34_joinOTAA+0x14>)
    a7ee:	4798      	blx	r3
    a7f0:	4b03      	ldr	r3, [pc, #12]	; (a800 <EER34_joinOTAA+0x18>)
    a7f2:	7018      	strb	r0, [r3, #0]
	
	if (EER34_res == LORAWAN_SUCCESS)
    a7f4:	3808      	subs	r0, #8
    a7f6:	4243      	negs	r3, r0
    a7f8:	4158      	adcs	r0, r3
		return 1;
		
	return 0;
}
    a7fa:	bd10      	pop	{r4, pc}
    a7fc:	0000c02d 	.word	0x0000c02d
    a800:	2000187c 	.word	0x2000187c

0000a804 <EER34_tickStart>:

/** 
 *	@brief	Arranca el tick de aplicacion
 */
void EER34_tickStart(int t)
{
    a804:	b510      	push	{r4, lr}
    a806:	b082      	sub	sp, #8
	tickInterval = t;
    a808:	4b07      	ldr	r3, [pc, #28]	; (a828 <EER34_tickStart+0x24>)
    a80a:	6018      	str	r0, [r3, #0]
	
    SwTimerStart(tickTimerId, MS_TO_US(tickInterval),
    a80c:	21fa      	movs	r1, #250	; 0xfa
    a80e:	0089      	lsls	r1, r1, #2
    a810:	4341      	muls	r1, r0
    a812:	4b06      	ldr	r3, [pc, #24]	; (a82c <EER34_tickStart+0x28>)
    a814:	7818      	ldrb	r0, [r3, #0]
    a816:	2300      	movs	r3, #0
    a818:	9300      	str	r3, [sp, #0]
    a81a:	4b05      	ldr	r3, [pc, #20]	; (a830 <EER34_tickStart+0x2c>)
    a81c:	2200      	movs	r2, #0
    a81e:	4c05      	ldr	r4, [pc, #20]	; (a834 <EER34_tickStart+0x30>)
    a820:	47a0      	blx	r4
		SW_TIMEOUT_RELATIVE, (void *)tickTimerCb, NULL);
}
    a822:	b002      	add	sp, #8
    a824:	bd10      	pop	{r4, pc}
    a826:	46c0      	nop			; (mov r8, r8)
    a828:	20000f3c 	.word	0x20000f3c
    a82c:	20000009 	.word	0x20000009
    a830:	0000a969 	.word	0x0000a969
    a834:	00009795 	.word	0x00009795

0000a838 <EER34_tickStop>:

/** 
 *	@brief	Detiene el tick de aplicacion
 */
void EER34_tickStop(void)
{
    a838:	b510      	push	{r4, lr}
    SwTimerStop(tickTimerId);
    a83a:	4b02      	ldr	r3, [pc, #8]	; (a844 <EER34_tickStop+0xc>)
    a83c:	7818      	ldrb	r0, [r3, #0]
    a83e:	4b02      	ldr	r3, [pc, #8]	; (a848 <EER34_tickStop+0x10>)
    a840:	4798      	blx	r3
}
    a842:	bd10      	pop	{r4, pc}
    a844:	20000009 	.word	0x20000009
    a848:	00009aa1 	.word	0x00009aa1

0000a84c <EER34_tx>:
 *	@return	1 si OK, 0 si fallo
 *
 *	En caso de falla el status del stack LoRaWan queda en EER34_txStatus.
 */
int EER34_tx(EER34_txMode_t mode, int port, uint8_t *data, int len)
{
    a84c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a84e:	b083      	sub	sp, #12
    a850:	0007      	movs	r7, r0
    a852:	000e      	movs	r6, r1
    a854:	0011      	movs	r1, r2
    a856:	001c      	movs	r4, r3
	// Copia los datos al buffer
	memcpy(txBuffer, data, len);
    a858:	4d15      	ldr	r5, [pc, #84]	; (a8b0 <EER34_tx+0x64>)
    a85a:	001a      	movs	r2, r3
    a85c:	0028      	movs	r0, r5
    a85e:	4b15      	ldr	r3, [pc, #84]	; (a8b4 <EER34_tx+0x68>)
    a860:	4798      	blx	r3
	
	// Prepara el request
    lorawanSendReq.buffer = txBuffer;
    a862:	4b15      	ldr	r3, [pc, #84]	; (a8b8 <EER34_tx+0x6c>)
    a864:	605d      	str	r5, [r3, #4]
    lorawanSendReq.bufferLength = len;
    a866:	721c      	strb	r4, [r3, #8]
	if (mode == EER34_TXMODE_CONF)
    a868:	2f01      	cmp	r7, #1
    a86a:	d00e      	beq.n	a88a <EER34_tx+0x3e>
		lorawanSendReq.confirmed = LORAWAN_CNF;
	else
		lorawanSendReq.confirmed = LORAWAN_UNCNF;
    a86c:	2200      	movs	r2, #0
    a86e:	4b12      	ldr	r3, [pc, #72]	; (a8b8 <EER34_tx+0x6c>)
    a870:	701a      	strb	r2, [r3, #0]
    lorawanSendReq.port = port;
    a872:	4811      	ldr	r0, [pc, #68]	; (a8b8 <EER34_tx+0x6c>)
    a874:	7046      	strb	r6, [r0, #1]
	
	// Manda el comando de tramsision y recibe la respuesta (que la deja guardada)
    EER34_txStatus = LORAWAN_Send(&lorawanSendReq);
    a876:	4b11      	ldr	r3, [pc, #68]	; (a8bc <EER34_tx+0x70>)
    a878:	4798      	blx	r3
    a87a:	4b11      	ldr	r3, [pc, #68]	; (a8c0 <EER34_tx+0x74>)
    a87c:	7018      	strb	r0, [r3, #0]
        SwTimerStart(txTimerId, MS_TO_US(EER34_txTimeout), 
			SW_TIMEOUT_RELATIVE, (void *)txTimerCb, NULL);
		return 1;
	}
	
	return 0;
    a87e:	2300      	movs	r3, #0
    if (EER34_txStatus == LORAWAN_SUCCESS) {
    a880:	2808      	cmp	r0, #8
    a882:	d005      	beq.n	a890 <EER34_tx+0x44>
}
    a884:	0018      	movs	r0, r3
    a886:	b003      	add	sp, #12
    a888:	bdf0      	pop	{r4, r5, r6, r7, pc}
		lorawanSendReq.confirmed = LORAWAN_CNF;
    a88a:	2201      	movs	r2, #1
    a88c:	701a      	strb	r2, [r3, #0]
    a88e:	e7f0      	b.n	a872 <EER34_tx+0x26>
        SwTimerStart(txTimerId, MS_TO_US(EER34_txTimeout), 
    a890:	4b0c      	ldr	r3, [pc, #48]	; (a8c4 <EER34_tx+0x78>)
    a892:	681b      	ldr	r3, [r3, #0]
    a894:	21fa      	movs	r1, #250	; 0xfa
    a896:	0089      	lsls	r1, r1, #2
    a898:	4359      	muls	r1, r3
    a89a:	4b0b      	ldr	r3, [pc, #44]	; (a8c8 <EER34_tx+0x7c>)
    a89c:	7818      	ldrb	r0, [r3, #0]
    a89e:	2300      	movs	r3, #0
    a8a0:	9300      	str	r3, [sp, #0]
    a8a2:	4b0a      	ldr	r3, [pc, #40]	; (a8cc <EER34_tx+0x80>)
    a8a4:	2200      	movs	r2, #0
    a8a6:	4c0a      	ldr	r4, [pc, #40]	; (a8d0 <EER34_tx+0x84>)
    a8a8:	47a0      	blx	r4
		return 1;
    a8aa:	2301      	movs	r3, #1
    a8ac:	e7ea      	b.n	a884 <EER34_tx+0x38>
    a8ae:	46c0      	nop			; (mov r8, r8)
    a8b0:	20000f40 	.word	0x20000f40
    a8b4:	00013e5d 	.word	0x00013e5d
    a8b8:	20000f30 	.word	0x20000f30
    a8bc:	0000b3e5 	.word	0x0000b3e5
    a8c0:	20001884 	.word	0x20001884
    a8c4:	20001880 	.word	0x20001880
    a8c8:	2000000a 	.word	0x2000000a
    a8cc:	0000a8ed 	.word	0x0000a8ed
    a8d0:	00009795 	.word	0x00009795

0000a8d4 <joinResponseCallback>:

/** 
 *	Callback de respuesta del Join Request del stack LoRaWan
 */
static void joinResponseCallback(StackRetStatus_t status)
{
    a8d4:	b510      	push	{r4, lr}
    a8d6:	0001      	movs	r1, r0
	EER34_status_t sts;
	
	if (status == LORAWAN_SUCCESS)	sts = EER34_STATUS_JOIN_SUCCSESS;
	else	sts = EER34_STATUS_JOIN_ERROR;
    a8d8:	3808      	subs	r0, #8
    a8da:	1e43      	subs	r3, r0, #1
    a8dc:	4198      	sbcs	r0, r3
    a8de:	3001      	adds	r0, #1
	
	EER34_statusCallback(sts, status);
    a8e0:	4b01      	ldr	r3, [pc, #4]	; (a8e8 <joinResponseCallback+0x14>)
    a8e2:	4798      	blx	r3
}
    a8e4:	bd10      	pop	{r4, pc}
    a8e6:	46c0      	nop			; (mov r8, r8)
    a8e8:	0000a3a1 	.word	0x0000a3a1

0000a8ec <txTimerCb>:
{
    a8ec:	b510      	push	{r4, lr}
	EER34_statusCallback(EER34_STATUS_TX_TIMEOUT, 0);
    a8ee:	2100      	movs	r1, #0
    a8f0:	2005      	movs	r0, #5
    a8f2:	4b01      	ldr	r3, [pc, #4]	; (a8f8 <txTimerCb+0xc>)
    a8f4:	4798      	blx	r3
}
    a8f6:	bd10      	pop	{r4, pc}
    a8f8:	0000a3a1 	.word	0x0000a3a1

0000a8fc <appDataCallback>:

/** 
 *	Callback de datos del stack LoRaWan
 */
static void appDataCallback(void *appHandle, appCbParams_t *appdata)
{
    a8fc:	b510      	push	{r4, lr}
    a8fe:	000c      	movs	r4, r1
	EER34_status_t sts = EER34_STATUS_UNKNOWN;
    StackRetStatus_t loraSts = LORAWAN_INVALID_REQUEST;

    SwTimerStop(txTimerId);
    a900:	4b15      	ldr	r3, [pc, #84]	; (a958 <appDataCallback+0x5c>)
    a902:	7818      	ldrb	r0, [r3, #0]
    a904:	4b15      	ldr	r3, [pc, #84]	; (a95c <appDataCallback+0x60>)
    a906:	4798      	blx	r3

    if (appdata->evt == LORAWAN_EVT_RX_DATA_AVAILABLE) {
    a908:	7823      	ldrb	r3, [r4, #0]
    a90a:	2b02      	cmp	r3, #2
    a90c:	d006      	beq.n	a91c <appDataCallback+0x20>
			}
			sts = EER34_STATUS_TX_ACK;
		}
	}
	
    else if (appdata->evt == LORAWAN_EVT_TRANSACTION_COMPLETE) {
    a90e:	2b04      	cmp	r3, #4
    a910:	d014      	beq.n	a93c <appDataCallback+0x40>
    StackRetStatus_t loraSts = LORAWAN_INVALID_REQUEST;
    a912:	2115      	movs	r1, #21
	EER34_status_t sts = EER34_STATUS_UNKNOWN;
    a914:	2000      	movs	r0, #0
        loraSts = appdata->param.rxData.status;
		if (loraSts == LORAWAN_SUCCESS || loraSts == LORAWAN_RADIO_SUCCESS)
			sts = EER34_STATUS_TX_SUCCSESS;
	}

	EER34_statusCallback(sts, loraSts);
    a916:	4b12      	ldr	r3, [pc, #72]	; (a960 <appDataCallback+0x64>)
    a918:	4798      	blx	r3
}
    a91a:	bd10      	pop	{r4, pc}
        loraSts = appdata->param.rxData.status;
    a91c:	7b61      	ldrb	r1, [r4, #13]
	EER34_status_t sts = EER34_STATUS_UNKNOWN;
    a91e:	2000      	movs	r0, #0
		if (loraSts == LORAWAN_SUCCESS) {
    a920:	2908      	cmp	r1, #8
    a922:	d1f8      	bne.n	a916 <appDataCallback+0x1a>
		    if((appdata->param.rxData.dataLength > 0) && (appdata->param.rxData.pData != NULL)) {
    a924:	7b22      	ldrb	r2, [r4, #12]
    a926:	2a00      	cmp	r2, #0
    a928:	d011      	beq.n	a94e <appDataCallback+0x52>
    a92a:	68a3      	ldr	r3, [r4, #8]
    a92c:	2b00      	cmp	r3, #0
    a92e:	d010      	beq.n	a952 <appDataCallback+0x56>
				EER34_rxDataCallback(appdata->param.rxData.pData[0],
    a930:	3a01      	subs	r2, #1
    a932:	1c59      	adds	r1, r3, #1
    a934:	7818      	ldrb	r0, [r3, #0]
    a936:	4b0b      	ldr	r3, [pc, #44]	; (a964 <appDataCallback+0x68>)
    a938:	4798      	blx	r3
				return;
    a93a:	e7ee      	b.n	a91a <appDataCallback+0x1e>
        loraSts = appdata->param.rxData.status;
    a93c:	7b61      	ldrb	r1, [r4, #13]
		if (loraSts == LORAWAN_SUCCESS || loraSts == LORAWAN_RADIO_SUCCESS)
    a93e:	3304      	adds	r3, #4
    a940:	000a      	movs	r2, r1
    a942:	439a      	bics	r2, r3
	EER34_status_t sts = EER34_STATUS_UNKNOWN;
    a944:	2000      	movs	r0, #0
		if (loraSts == LORAWAN_SUCCESS || loraSts == LORAWAN_RADIO_SUCCESS)
    a946:	2a00      	cmp	r2, #0
    a948:	d1e5      	bne.n	a916 <appDataCallback+0x1a>
			sts = EER34_STATUS_TX_SUCCSESS;
    a94a:	3003      	adds	r0, #3
    a94c:	e7e3      	b.n	a916 <appDataCallback+0x1a>
			sts = EER34_STATUS_TX_ACK;
    a94e:	2004      	movs	r0, #4
    a950:	e7e1      	b.n	a916 <appDataCallback+0x1a>
    a952:	2004      	movs	r0, #4
    a954:	e7df      	b.n	a916 <appDataCallback+0x1a>
    a956:	46c0      	nop			; (mov r8, r8)
    a958:	2000000a 	.word	0x2000000a
    a95c:	00009aa1 	.word	0x00009aa1
    a960:	0000a3a1 	.word	0x0000a3a1
    a964:	0000a3f9 	.word	0x0000a3f9

0000a968 <tickTimerCb>:
{
    a968:	b510      	push	{r4, lr}
    a96a:	b082      	sub	sp, #8
    SwTimerStart(tickTimerId, MS_TO_US(tickInterval),
    a96c:	4b08      	ldr	r3, [pc, #32]	; (a990 <tickTimerCb+0x28>)
    a96e:	681b      	ldr	r3, [r3, #0]
    a970:	21fa      	movs	r1, #250	; 0xfa
    a972:	0089      	lsls	r1, r1, #2
    a974:	4359      	muls	r1, r3
    a976:	4b07      	ldr	r3, [pc, #28]	; (a994 <tickTimerCb+0x2c>)
    a978:	7818      	ldrb	r0, [r3, #0]
    a97a:	2300      	movs	r3, #0
    a97c:	9300      	str	r3, [sp, #0]
    a97e:	4b06      	ldr	r3, [pc, #24]	; (a998 <tickTimerCb+0x30>)
    a980:	2200      	movs	r2, #0
    a982:	4c06      	ldr	r4, [pc, #24]	; (a99c <tickTimerCb+0x34>)
    a984:	47a0      	blx	r4
	EER34_tickCallback();
    a986:	4b06      	ldr	r3, [pc, #24]	; (a9a0 <tickTimerCb+0x38>)
    a988:	4798      	blx	r3
}
    a98a:	b002      	add	sp, #8
    a98c:	bd10      	pop	{r4, pc}
    a98e:	46c0      	nop			; (mov r8, r8)
    a990:	20000f3c 	.word	0x20000f3c
    a994:	20000009 	.word	0x20000009
    a998:	0000a969 	.word	0x0000a969
    a99c:	00009795 	.word	0x00009795
    a9a0:	0000a4b1 	.word	0x0000a4b1

0000a9a4 <EER34_init>:
{
    a9a4:	b510      	push	{r4, lr}
	EER34_txTimeout = EER34_DEF_TX_TIMEOUT;
    a9a6:	4a07      	ldr	r2, [pc, #28]	; (a9c4 <EER34_init+0x20>)
    a9a8:	4b07      	ldr	r3, [pc, #28]	; (a9c8 <EER34_init+0x24>)
    a9aa:	601a      	str	r2, [r3, #0]
    SwTimerCreate(&txTimerId);
    a9ac:	4807      	ldr	r0, [pc, #28]	; (a9cc <EER34_init+0x28>)
    a9ae:	4c08      	ldr	r4, [pc, #32]	; (a9d0 <EER34_init+0x2c>)
    a9b0:	47a0      	blx	r4
    SwTimerCreate(&tickTimerId);
    a9b2:	4808      	ldr	r0, [pc, #32]	; (a9d4 <EER34_init+0x30>)
    a9b4:	47a0      	blx	r4
	LORAWAN_Init(appDataCallback, joinResponseCallback);
    a9b6:	4908      	ldr	r1, [pc, #32]	; (a9d8 <EER34_init+0x34>)
    a9b8:	4808      	ldr	r0, [pc, #32]	; (a9dc <EER34_init+0x38>)
    a9ba:	4b09      	ldr	r3, [pc, #36]	; (a9e0 <EER34_init+0x3c>)
    a9bc:	4798      	blx	r3
	EES34_appInit();
    a9be:	4b09      	ldr	r3, [pc, #36]	; (a9e4 <EER34_init+0x40>)
    a9c0:	4798      	blx	r3
}
    a9c2:	bd10      	pop	{r4, pc}
    a9c4:	00004e20 	.word	0x00004e20
    a9c8:	20001880 	.word	0x20001880
    a9cc:	2000000a 	.word	0x2000000a
    a9d0:	00009761 	.word	0x00009761
    a9d4:	20000009 	.word	0x20000009
    a9d8:	0000a8d5 	.word	0x0000a8d5
    a9dc:	0000a8fd 	.word	0x0000a8fd
    a9e0:	0000b26d 	.word	0x0000b26d
    a9e4:	0000a419 	.word	0x0000a419

0000a9e8 <APP_TaskHandler>:

/** 
 *	Task de la aplicacion (weak para que compile en el ejemplo original)
 */
SYSTEM_TaskStatus_t  __attribute__((weak)) APP_TaskHandler(void)
{
    a9e8:	b510      	push	{r4, lr}
	EES34_appTask();
    a9ea:	4b03      	ldr	r3, [pc, #12]	; (a9f8 <APP_TaskHandler+0x10>)
    a9ec:	4798      	blx	r3
	
    SYSTEM_PostTask(APP_TASK_ID);
    a9ee:	2010      	movs	r0, #16
    a9f0:	4b02      	ldr	r3, [pc, #8]	; (a9fc <APP_TaskHandler+0x14>)
    a9f2:	4798      	blx	r3
	
    return SYSTEM_TASK_SUCCESS;
}
    a9f4:	2000      	movs	r0, #0
    a9f6:	bd10      	pop	{r4, pc}
    a9f8:	0000a4c5 	.word	0x0000a4c5
    a9fc:	00009dc1 	.word	0x00009dc1

0000aa00 <EES34_reset>:

/** 
 *	Funcion de procesamiento de la causa de reset
 */
void EES34_reset(void)
{
    aa00:	b510      	push	{r4, lr}
 *
 * \return An enum value indicating the cause of the last system reset.
 */
static inline enum system_reset_cause system_get_reset_cause(void)
{
	return (enum system_reset_cause)RSTC->RCAUSE.reg;
    aa02:	4b03      	ldr	r3, [pc, #12]	; (aa10 <EES34_reset+0x10>)
    aa04:	7818      	ldrb	r0, [r3, #0]
    aa06:	b2c0      	uxtb	r0, r0
	enum system_reset_cause rcause = system_get_reset_cause();
	
	EES34_appResetCallback(rcause);
    aa08:	4b02      	ldr	r3, [pc, #8]	; (aa14 <EES34_reset+0x14>)
    aa0a:	4798      	blx	r3
}
    aa0c:	bd10      	pop	{r4, pc}
    aa0e:	46c0      	nop			; (mov r8, r8)
    aa10:	40000800 	.word	0x40000800
    aa14:	0000a65d 	.word	0x0000a65d

0000aa18 <EER34_sleep>:
{
    aa18:	b500      	push	{lr}
    aa1a:	b085      	sub	sp, #20
	sleepReq.sleepTimeMs = time;
    aa1c:	ab01      	add	r3, sp, #4
    aa1e:	9001      	str	r0, [sp, #4]
	sleepReq.pmmWakeupCallback = appWakeupCallback;
    aa20:	4a10      	ldr	r2, [pc, #64]	; (aa64 <EER34_sleep+0x4c>)
    aa22:	9203      	str	r2, [sp, #12]
	sleepReq.sleep_mode = CONF_PMM_SLEEPMODE_WHEN_IDLE;
    aa24:	2201      	movs	r2, #1
    aa26:	711a      	strb	r2, [r3, #4]
	if (true == LORAWAN_ReadyToSleep(deviceResetsForWakeup))
    aa28:	2000      	movs	r0, #0
    aa2a:	4b0f      	ldr	r3, [pc, #60]	; (aa68 <EER34_sleep+0x50>)
    aa2c:	4798      	blx	r3
	return 0;
    aa2e:	2300      	movs	r3, #0
	if (true == LORAWAN_ReadyToSleep(deviceResetsForWakeup))
    aa30:	2800      	cmp	r0, #0
    aa32:	d102      	bne.n	aa3a <EER34_sleep+0x22>
}
    aa34:	0018      	movs	r0, r3
    aa36:	b005      	add	sp, #20
    aa38:	bd00      	pop	{pc}
		sio2host_deinit();
    aa3a:	4b0c      	ldr	r3, [pc, #48]	; (aa6c <EER34_sleep+0x54>)
    aa3c:	4798      	blx	r3
		HAL_RadioDeInit();
    aa3e:	4b0c      	ldr	r3, [pc, #48]	; (aa70 <EER34_sleep+0x58>)
    aa40:	4798      	blx	r3
		EES34_enterLowPower();
    aa42:	4b0c      	ldr	r3, [pc, #48]	; (aa74 <EER34_sleep+0x5c>)
    aa44:	4798      	blx	r3
		if (PMM_SLEEP_REQ_DENIED == PMM_Sleep(&sleepReq))
    aa46:	a801      	add	r0, sp, #4
    aa48:	4b0b      	ldr	r3, [pc, #44]	; (aa78 <EER34_sleep+0x60>)
    aa4a:	4798      	blx	r3
		return 1;
    aa4c:	2301      	movs	r3, #1
		if (PMM_SLEEP_REQ_DENIED == PMM_Sleep(&sleepReq))
    aa4e:	2800      	cmp	r0, #0
    aa50:	d1f0      	bne.n	aa34 <EER34_sleep+0x1c>
			EES34_exitLowPower();
    aa52:	4b0a      	ldr	r3, [pc, #40]	; (aa7c <EER34_sleep+0x64>)
    aa54:	4798      	blx	r3
			HAL_Radio_resources_init();
    aa56:	4b0a      	ldr	r3, [pc, #40]	; (aa80 <EER34_sleep+0x68>)
    aa58:	4798      	blx	r3
			sio2host_init();
    aa5a:	4b0a      	ldr	r3, [pc, #40]	; (aa84 <EER34_sleep+0x6c>)
    aa5c:	4798      	blx	r3
			return 0;
    aa5e:	2300      	movs	r3, #0
    aa60:	e7e8      	b.n	aa34 <EER34_sleep+0x1c>
    aa62:	46c0      	nop			; (mov r8, r8)
    aa64:	0000aa89 	.word	0x0000aa89
    aa68:	0000eab1 	.word	0x0000eab1
    aa6c:	00002d5d 	.word	0x00002d5d
    aa70:	000030b1 	.word	0x000030b1
    aa74:	0000a3fd 	.word	0x0000a3fd
    aa78:	00003425 	.word	0x00003425
    aa7c:	0000a409 	.word	0x0000a409
    aa80:	0000308d 	.word	0x0000308d
    aa84:	00002c11 	.word	0x00002c11

0000aa88 <appWakeupCallback>:
{
    aa88:	b510      	push	{r4, lr}
	EES34_exitLowPower();
    aa8a:	4b03      	ldr	r3, [pc, #12]	; (aa98 <appWakeupCallback+0x10>)
    aa8c:	4798      	blx	r3
	HAL_Radio_resources_init();
    aa8e:	4b03      	ldr	r3, [pc, #12]	; (aa9c <appWakeupCallback+0x14>)
    aa90:	4798      	blx	r3
	sio2host_init();
    aa92:	4b03      	ldr	r3, [pc, #12]	; (aaa0 <appWakeupCallback+0x18>)
    aa94:	4798      	blx	r3
}
    aa96:	bd10      	pop	{r4, pc}
    aa98:	0000a409 	.word	0x0000a409
    aa9c:	0000308d 	.word	0x0000308d
    aaa0:	00002c11 	.word	0x00002c11

0000aaa4 <main>:
 * \mainpage
 * \section preface Preface
 * This is the reference manual for the LORAWAN Demo Application of EU Band
 */
int main(void)
{
    aaa4:	b510      	push	{r4, lr}
    /* System Initialization */
    system_init();
    aaa6:	4b10      	ldr	r3, [pc, #64]	; (aae8 <main+0x44>)
    aaa8:	4798      	blx	r3
    /* Initialize the delay driver */
    delay_init();
    aaaa:	4b10      	ldr	r3, [pc, #64]	; (aaec <main+0x48>)
    aaac:	4798      	blx	r3
    /* Initialize the board target resources */
    board_init();
    aaae:	4b10      	ldr	r3, [pc, #64]	; (aaf0 <main+0x4c>)
    aab0:	4798      	blx	r3

    INTERRUPT_GlobalInterruptEnable();
    aab2:	2201      	movs	r2, #1
    aab4:	4b0f      	ldr	r3, [pc, #60]	; (aaf4 <main+0x50>)
    aab6:	701a      	strb	r2, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    aab8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    aabc:	b662      	cpsie	i

/* Initializes all the hardware and software modules used for Stack operation */
static void driver_init(void)
{
    /* Initialize the Radio Hardware */
    HAL_RadioInit();
    aabe:	4b0e      	ldr	r3, [pc, #56]	; (aaf8 <main+0x54>)
    aac0:	4798      	blx	r3
    /* Initialize the AES Hardware Engine */
    AESInit();
    aac2:	4b0e      	ldr	r3, [pc, #56]	; (aafc <main+0x58>)
    aac4:	4798      	blx	r3
    /* Initialize the Software Timer Module */
    SystemTimerInit();
    aac6:	4b0e      	ldr	r3, [pc, #56]	; (ab00 <main+0x5c>)
    aac8:	4798      	blx	r3
#ifdef CONF_PMM_ENABLE
    /* Initialize the Sleep Timer Module */
    SleepTimerInit();
    aaca:	4b0e      	ldr	r3, [pc, #56]	; (ab04 <main+0x60>)
    aacc:	4798      	blx	r3
#endif
#if (ENABLE_PDS == 1)
    /* PDS Module Init */
    PDS_Init();
    aace:	4b0e      	ldr	r3, [pc, #56]	; (ab08 <main+0x64>)
    aad0:	4798      	blx	r3
    sio2host_init();
    aad2:	4b0e      	ldr	r3, [pc, #56]	; (ab0c <main+0x68>)
    aad4:	4798      	blx	r3
    EES34_reset();
    aad6:	4b0e      	ldr	r3, [pc, #56]	; (ab10 <main+0x6c>)
    aad8:	4798      	blx	r3
    Stack_Init();
    aada:	4b0e      	ldr	r3, [pc, #56]	; (ab14 <main+0x70>)
    aadc:	4798      	blx	r3
	EER34_init();
    aade:	4b0e      	ldr	r3, [pc, #56]	; (ab18 <main+0x74>)
    aae0:	4798      	blx	r3
        SYSTEM_RunTasks();
    aae2:	4c0e      	ldr	r4, [pc, #56]	; (ab1c <main+0x78>)
    aae4:	47a0      	blx	r4
    aae6:	e7fd      	b.n	aae4 <main+0x40>
    aae8:	000024f9 	.word	0x000024f9
    aaec:	00000115 	.word	0x00000115
    aaf0:	0000021d 	.word	0x0000021d
    aaf4:	20000008 	.word	0x20000008
    aaf8:	00002ed5 	.word	0x00002ed5
    aafc:	00008d1d 	.word	0x00008d1d
    ab00:	000096f9 	.word	0x000096f9
    ab04:	000032c1 	.word	0x000032c1
    ab08:	00008d55 	.word	0x00008d55
    ab0c:	00002c11 	.word	0x00002c11
    ab10:	0000aa01 	.word	0x0000aa01
    ab14:	00009d45 	.word	0x00009d45
    ab18:	0000a9a5 	.word	0x0000a9a5
    ab1c:	00009d55 	.word	0x00009d55

0000ab20 <common_tc_read_count>:
    ab20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab22:	4b0d      	ldr	r3, [pc, #52]	; (ab58 <common_tc_read_count+0x38>)
    ab24:	4798      	blx	r3
    ab26:	4b0d      	ldr	r3, [pc, #52]	; (ab5c <common_tc_read_count+0x3c>)
    ab28:	781b      	ldrb	r3, [r3, #0]
    ab2a:	2b00      	cmp	r3, #0
    ab2c:	d00e      	beq.n	ab4c <common_tc_read_count+0x2c>
    ab2e:	4b0c      	ldr	r3, [pc, #48]	; (ab60 <common_tc_read_count+0x40>)
    ab30:	781d      	ldrb	r5, [r3, #0]
    ab32:	4b0a      	ldr	r3, [pc, #40]	; (ab5c <common_tc_read_count+0x3c>)
    ab34:	781f      	ldrb	r7, [r3, #0]
    ab36:	4c0b      	ldr	r4, [pc, #44]	; (ab64 <common_tc_read_count+0x44>)
    ab38:	1c29      	adds	r1, r5, #0
    ab3a:	47a0      	blx	r4
    ab3c:	1c06      	adds	r6, r0, #0
    ab3e:	480a      	ldr	r0, [pc, #40]	; (ab68 <common_tc_read_count+0x48>)
    ab40:	1c29      	adds	r1, r5, #0
    ab42:	47a0      	blx	r4
    ab44:	4378      	muls	r0, r7
    ab46:	1830      	adds	r0, r6, r0
    ab48:	b280      	uxth	r0, r0
    ab4a:	e004      	b.n	ab56 <common_tc_read_count+0x36>
    ab4c:	4b04      	ldr	r3, [pc, #16]	; (ab60 <common_tc_read_count+0x40>)
    ab4e:	7819      	ldrb	r1, [r3, #0]
    ab50:	4b04      	ldr	r3, [pc, #16]	; (ab64 <common_tc_read_count+0x44>)
    ab52:	4798      	blx	r3
    ab54:	b280      	uxth	r0, r0
    ab56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ab58:	00009ff1 	.word	0x00009ff1
    ab5c:	20000fc0 	.word	0x20000fc0
    ab60:	20001885 	.word	0x20001885
    ab64:	00010f21 	.word	0x00010f21
    ab68:	0000ffff 	.word	0x0000ffff

0000ab6c <common_tc_compare_stop>:
    ab6c:	b508      	push	{r3, lr}
    ab6e:	4b05      	ldr	r3, [pc, #20]	; (ab84 <common_tc_compare_stop+0x18>)
    ab70:	4798      	blx	r3
    ab72:	4b05      	ldr	r3, [pc, #20]	; (ab88 <common_tc_compare_stop+0x1c>)
    ab74:	4798      	blx	r3
    ab76:	4b05      	ldr	r3, [pc, #20]	; (ab8c <common_tc_compare_stop+0x20>)
    ab78:	2200      	movs	r2, #0
    ab7a:	605a      	str	r2, [r3, #4]
    ab7c:	811a      	strh	r2, [r3, #8]
    ab7e:	4b04      	ldr	r3, [pc, #16]	; (ab90 <common_tc_compare_stop+0x24>)
    ab80:	4798      	blx	r3
    ab82:	bd08      	pop	{r3, pc}
    ab84:	0000a005 	.word	0x0000a005
    ab88:	0000a0a5 	.word	0x0000a0a5
    ab8c:	20000fc0 	.word	0x20000fc0
    ab90:	0000a0c9 	.word	0x0000a0c9

0000ab94 <common_tc_overflow_stop>:
    ab94:	b508      	push	{r3, lr}
    ab96:	4b03      	ldr	r3, [pc, #12]	; (aba4 <common_tc_overflow_stop+0x10>)
    ab98:	4798      	blx	r3
    ab9a:	2200      	movs	r2, #0
    ab9c:	4b02      	ldr	r3, [pc, #8]	; (aba8 <common_tc_overflow_stop+0x14>)
    ab9e:	701a      	strb	r2, [r3, #0]
    aba0:	bd08      	pop	{r3, pc}
    aba2:	46c0      	nop			; (mov r8, r8)
    aba4:	0000a059 	.word	0x0000a059
    aba8:	20000fc0 	.word	0x20000fc0

0000abac <common_tc_stop>:
    abac:	b508      	push	{r3, lr}
    abae:	4b03      	ldr	r3, [pc, #12]	; (abbc <common_tc_stop+0x10>)
    abb0:	4798      	blx	r3
    abb2:	4b03      	ldr	r3, [pc, #12]	; (abc0 <common_tc_stop+0x14>)
    abb4:	4798      	blx	r3
    abb6:	4b03      	ldr	r3, [pc, #12]	; (abc4 <common_tc_stop+0x18>)
    abb8:	4798      	blx	r3
    abba:	bd08      	pop	{r3, pc}
    abbc:	0000ab6d 	.word	0x0000ab6d
    abc0:	0000ab95 	.word	0x0000ab95
    abc4:	0000a06d 	.word	0x0000a06d

0000abc8 <common_tc_delay>:
    abc8:	b510      	push	{r4, lr}
    abca:	1c04      	adds	r4, r0, #0
    abcc:	4b13      	ldr	r3, [pc, #76]	; (ac1c <common_tc_delay+0x54>)
    abce:	4798      	blx	r3
    abd0:	4b13      	ldr	r3, [pc, #76]	; (ac20 <common_tc_delay+0x58>)
    abd2:	781a      	ldrb	r2, [r3, #0]
    abd4:	4362      	muls	r2, r4
    abd6:	1881      	adds	r1, r0, r2
    abd8:	4b12      	ldr	r3, [pc, #72]	; (ac24 <common_tc_delay+0x5c>)
    abda:	6059      	str	r1, [r3, #4]
    abdc:	6859      	ldr	r1, [r3, #4]
    abde:	0c09      	lsrs	r1, r1, #16
    abe0:	6059      	str	r1, [r3, #4]
    abe2:	685b      	ldr	r3, [r3, #4]
    abe4:	2b00      	cmp	r3, #0
    abe6:	d007      	beq.n	abf8 <common_tc_delay+0x30>
    abe8:	4b0e      	ldr	r3, [pc, #56]	; (ac24 <common_tc_delay+0x5c>)
    abea:	6859      	ldr	r1, [r3, #4]
    abec:	3201      	adds	r2, #1
    abee:	1880      	adds	r0, r0, r2
    abf0:	8118      	strh	r0, [r3, #8]
    abf2:	4b0d      	ldr	r3, [pc, #52]	; (ac28 <common_tc_delay+0x60>)
    abf4:	4798      	blx	r3
    abf6:	e004      	b.n	ac02 <common_tc_delay+0x3a>
    abf8:	1882      	adds	r2, r0, r2
    abfa:	4b0a      	ldr	r3, [pc, #40]	; (ac24 <common_tc_delay+0x5c>)
    abfc:	811a      	strh	r2, [r3, #8]
    abfe:	4b0b      	ldr	r3, [pc, #44]	; (ac2c <common_tc_delay+0x64>)
    ac00:	4798      	blx	r3
    ac02:	4b08      	ldr	r3, [pc, #32]	; (ac24 <common_tc_delay+0x5c>)
    ac04:	891b      	ldrh	r3, [r3, #8]
    ac06:	2b63      	cmp	r3, #99	; 0x63
    ac08:	d802      	bhi.n	ac10 <common_tc_delay+0x48>
    ac0a:	3364      	adds	r3, #100	; 0x64
    ac0c:	4a05      	ldr	r2, [pc, #20]	; (ac24 <common_tc_delay+0x5c>)
    ac0e:	8113      	strh	r3, [r2, #8]
    ac10:	4b04      	ldr	r3, [pc, #16]	; (ac24 <common_tc_delay+0x5c>)
    ac12:	8918      	ldrh	r0, [r3, #8]
    ac14:	4b06      	ldr	r3, [pc, #24]	; (ac30 <common_tc_delay+0x68>)
    ac16:	4798      	blx	r3
    ac18:	bd10      	pop	{r4, pc}
    ac1a:	46c0      	nop			; (mov r8, r8)
    ac1c:	00009ff1 	.word	0x00009ff1
    ac20:	20001885 	.word	0x20001885
    ac24:	20000fc0 	.word	0x20000fc0
    ac28:	0000a005 	.word	0x0000a005
    ac2c:	0000a019 	.word	0x0000a019
    ac30:	0000a08d 	.word	0x0000a08d

0000ac34 <common_tc_init>:
    ac34:	b508      	push	{r3, lr}
    ac36:	2200      	movs	r2, #0
    ac38:	4b03      	ldr	r3, [pc, #12]	; (ac48 <common_tc_init+0x14>)
    ac3a:	701a      	strb	r2, [r3, #0]
    ac3c:	4b03      	ldr	r3, [pc, #12]	; (ac4c <common_tc_init+0x18>)
    ac3e:	4798      	blx	r3
    ac40:	4b03      	ldr	r3, [pc, #12]	; (ac50 <common_tc_init+0x1c>)
    ac42:	7018      	strb	r0, [r3, #0]
    ac44:	bd08      	pop	{r3, pc}
    ac46:	46c0      	nop			; (mov r8, r8)
    ac48:	20000fc0 	.word	0x20000fc0
    ac4c:	0000a0e1 	.word	0x0000a0e1
    ac50:	20001885 	.word	0x20001885

0000ac54 <tmr_ovf_callback>:
    ac54:	b508      	push	{r3, lr}
    ac56:	4b0e      	ldr	r3, [pc, #56]	; (ac90 <tmr_ovf_callback+0x3c>)
    ac58:	685b      	ldr	r3, [r3, #4]
    ac5a:	2b00      	cmp	r3, #0
    ac5c:	d007      	beq.n	ac6e <tmr_ovf_callback+0x1a>
    ac5e:	4a0c      	ldr	r2, [pc, #48]	; (ac90 <tmr_ovf_callback+0x3c>)
    ac60:	6853      	ldr	r3, [r2, #4]
    ac62:	3b01      	subs	r3, #1
    ac64:	6053      	str	r3, [r2, #4]
    ac66:	2b00      	cmp	r3, #0
    ac68:	d101      	bne.n	ac6e <tmr_ovf_callback+0x1a>
    ac6a:	4b0a      	ldr	r3, [pc, #40]	; (ac94 <tmr_ovf_callback+0x40>)
    ac6c:	4798      	blx	r3
    ac6e:	4a08      	ldr	r2, [pc, #32]	; (ac90 <tmr_ovf_callback+0x3c>)
    ac70:	7813      	ldrb	r3, [r2, #0]
    ac72:	3301      	adds	r3, #1
    ac74:	b2db      	uxtb	r3, r3
    ac76:	7013      	strb	r3, [r2, #0]
    ac78:	4a07      	ldr	r2, [pc, #28]	; (ac98 <tmr_ovf_callback+0x44>)
    ac7a:	7812      	ldrb	r2, [r2, #0]
    ac7c:	429a      	cmp	r2, r3
    ac7e:	d806      	bhi.n	ac8e <tmr_ovf_callback+0x3a>
    ac80:	4b03      	ldr	r3, [pc, #12]	; (ac90 <tmr_ovf_callback+0x3c>)
    ac82:	2200      	movs	r2, #0
    ac84:	701a      	strb	r2, [r3, #0]
    ac86:	68db      	ldr	r3, [r3, #12]
    ac88:	2b00      	cmp	r3, #0
    ac8a:	d000      	beq.n	ac8e <tmr_ovf_callback+0x3a>
    ac8c:	4798      	blx	r3
    ac8e:	bd08      	pop	{r3, pc}
    ac90:	20000fc0 	.word	0x20000fc0
    ac94:	0000a019 	.word	0x0000a019
    ac98:	20001885 	.word	0x20001885

0000ac9c <tmr_cca_callback>:
    ac9c:	b508      	push	{r3, lr}
    ac9e:	4b04      	ldr	r3, [pc, #16]	; (acb0 <tmr_cca_callback+0x14>)
    aca0:	4798      	blx	r3
    aca2:	4b04      	ldr	r3, [pc, #16]	; (acb4 <tmr_cca_callback+0x18>)
    aca4:	691b      	ldr	r3, [r3, #16]
    aca6:	2b00      	cmp	r3, #0
    aca8:	d000      	beq.n	acac <tmr_cca_callback+0x10>
    acaa:	4798      	blx	r3
    acac:	bd08      	pop	{r3, pc}
    acae:	46c0      	nop			; (mov r8, r8)
    acb0:	0000a005 	.word	0x0000a005
    acb4:	20000fc0 	.word	0x20000fc0

0000acb8 <set_common_tc_overflow_callback>:
    acb8:	4b01      	ldr	r3, [pc, #4]	; (acc0 <set_common_tc_overflow_callback+0x8>)
    acba:	60d8      	str	r0, [r3, #12]
    acbc:	4770      	bx	lr
    acbe:	46c0      	nop			; (mov r8, r8)
    acc0:	20000fc0 	.word	0x20000fc0

0000acc4 <set_common_tc_expiry_callback>:
    acc4:	4b01      	ldr	r3, [pc, #4]	; (accc <set_common_tc_expiry_callback+0x8>)
    acc6:	6118      	str	r0, [r3, #16]
    acc8:	4770      	bx	lr
    acca:	46c0      	nop			; (mov r8, r8)
    accc:	20000fc0 	.word	0x20000fc0

0000acd0 <MacClearCommands>:
    acd0:	490e      	ldr	r1, [pc, #56]	; (ad0c <MacClearCommands+0x3c>)
    acd2:	b570      	push	{r4, r5, r6, lr}
    acd4:	000b      	movs	r3, r1
    acd6:	33d8      	adds	r3, #216	; 0xd8
    acd8:	7818      	ldrb	r0, [r3, #0]
    acda:	2303      	movs	r3, #3
    acdc:	25a4      	movs	r5, #164	; 0xa4
    acde:	4343      	muls	r3, r0
    ace0:	2401      	movs	r4, #1
    ace2:	20ff      	movs	r0, #255	; 0xff
    ace4:	3391      	adds	r3, #145	; 0x91
    ace6:	4a0a      	ldr	r2, [pc, #40]	; (ad10 <MacClearCommands+0x40>)
    ace8:	185b      	adds	r3, r3, r1
    acea:	00ed      	lsls	r5, r5, #3
    acec:	429a      	cmp	r2, r3
    acee:	d100      	bne.n	acf2 <MacClearCommands+0x22>
    acf0:	bd70      	pop	{r4, r5, r6, pc}
    acf2:	7811      	ldrb	r1, [r2, #0]
    acf4:	29ff      	cmp	r1, #255	; 0xff
    acf6:	d006      	beq.n	ad06 <MacClearCommands+0x36>
    acf8:	290a      	cmp	r1, #10
    acfa:	d803      	bhi.n	ad04 <MacClearCommands+0x34>
    acfc:	0026      	movs	r6, r4
    acfe:	408e      	lsls	r6, r1
    ad00:	422e      	tst	r6, r5
    ad02:	d100      	bne.n	ad06 <MacClearCommands+0x36>
    ad04:	7010      	strb	r0, [r2, #0]
    ad06:	3203      	adds	r2, #3
    ad08:	e7f0      	b.n	acec <MacClearCommands+0x1c>
    ad0a:	46c0      	nop			; (mov r8, r8)
    ad0c:	200019b0 	.word	0x200019b0
    ad10:	20001a41 	.word	0x20001a41

0000ad14 <CountfOptsLength>:
    ad14:	2200      	movs	r2, #0
    ad16:	490d      	ldr	r1, [pc, #52]	; (ad4c <CountfOptsLength+0x38>)
    ad18:	b570      	push	{r4, r5, r6, lr}
    ad1a:	000b      	movs	r3, r1
    ad1c:	0010      	movs	r0, r2
    ad1e:	2503      	movs	r5, #3
    ad20:	33d8      	adds	r3, #216	; 0xd8
    ad22:	781c      	ldrb	r4, [r3, #0]
    ad24:	4e0a      	ldr	r6, [pc, #40]	; (ad50 <CountfOptsLength+0x3c>)
    ad26:	b2d3      	uxtb	r3, r2
    ad28:	429c      	cmp	r4, r3
    ad2a:	d800      	bhi.n	ad2e <CountfOptsLength+0x1a>
    ad2c:	bd70      	pop	{r4, r5, r6, pc}
    ad2e:	002b      	movs	r3, r5
    ad30:	4353      	muls	r3, r2
    ad32:	3391      	adds	r3, #145	; 0x91
    ad34:	5ccb      	ldrb	r3, [r1, r3]
    ad36:	2bff      	cmp	r3, #255	; 0xff
    ad38:	d006      	beq.n	ad48 <CountfOptsLength+0x34>
    ad3a:	18f3      	adds	r3, r6, r3
    ad3c:	3b02      	subs	r3, #2
    ad3e:	781b      	ldrb	r3, [r3, #0]
    ad40:	18c3      	adds	r3, r0, r3
    ad42:	2b0f      	cmp	r3, #15
    ad44:	dcf2      	bgt.n	ad2c <CountfOptsLength+0x18>
    ad46:	b2d8      	uxtb	r0, r3
    ad48:	3201      	adds	r2, #1
    ad4a:	e7ec      	b.n	ad26 <CountfOptsLength+0x12>
    ad4c:	200019b0 	.word	0x200019b0
    ad50:	000196e9 	.word	0x000196e9

0000ad54 <StopAllSoftwareTimers>:
    ad54:	b570      	push	{r4, r5, r6, lr}
    ad56:	4c17      	ldr	r4, [pc, #92]	; (adb4 <StopAllSoftwareTimers+0x60>)
    ad58:	4d17      	ldr	r5, [pc, #92]	; (adb8 <StopAllSoftwareTimers+0x64>)
    ad5a:	0023      	movs	r3, r4
    ad5c:	33e2      	adds	r3, #226	; 0xe2
    ad5e:	7818      	ldrb	r0, [r3, #0]
    ad60:	47a8      	blx	r5
    ad62:	0023      	movs	r3, r4
    ad64:	33e3      	adds	r3, #227	; 0xe3
    ad66:	7818      	ldrb	r0, [r3, #0]
    ad68:	47a8      	blx	r5
    ad6a:	0023      	movs	r3, r4
    ad6c:	33e7      	adds	r3, #231	; 0xe7
    ad6e:	7818      	ldrb	r0, [r3, #0]
    ad70:	47a8      	blx	r5
    ad72:	0023      	movs	r3, r4
    ad74:	33e4      	adds	r3, #228	; 0xe4
    ad76:	7818      	ldrb	r0, [r3, #0]
    ad78:	47a8      	blx	r5
    ad7a:	0023      	movs	r3, r4
    ad7c:	33e5      	adds	r3, #229	; 0xe5
    ad7e:	7818      	ldrb	r0, [r3, #0]
    ad80:	47a8      	blx	r5
    ad82:	0023      	movs	r3, r4
    ad84:	33e8      	adds	r3, #232	; 0xe8
    ad86:	7818      	ldrb	r0, [r3, #0]
    ad88:	47a8      	blx	r5
    ad8a:	0023      	movs	r3, r4
    ad8c:	33e6      	adds	r3, #230	; 0xe6
    ad8e:	7818      	ldrb	r0, [r3, #0]
    ad90:	47a8      	blx	r5
    ad92:	0023      	movs	r3, r4
    ad94:	33e9      	adds	r3, #233	; 0xe9
    ad96:	7818      	ldrb	r0, [r3, #0]
    ad98:	47a8      	blx	r5
    ad9a:	0023      	movs	r3, r4
    ad9c:	33f2      	adds	r3, #242	; 0xf2
    ad9e:	7818      	ldrb	r0, [r3, #0]
    ada0:	47a8      	blx	r5
    ada2:	0023      	movs	r3, r4
    ada4:	33f3      	adds	r3, #243	; 0xf3
    ada6:	7818      	ldrb	r0, [r3, #0]
    ada8:	34ff      	adds	r4, #255	; 0xff
    adaa:	47a8      	blx	r5
    adac:	7f60      	ldrb	r0, [r4, #29]
    adae:	47a8      	blx	r5
    adb0:	bd70      	pop	{r4, r5, r6, pc}
    adb2:	46c0      	nop			; (mov r8, r8)
    adb4:	200019b0 	.word	0x200019b0
    adb8:	00009aa1 	.word	0x00009aa1

0000adbc <LorawanGetMaxPayloadSize>:
    adbc:	b513      	push	{r0, r1, r4, lr}
    adbe:	466b      	mov	r3, sp
    adc0:	1ddc      	adds	r4, r3, #7
    adc2:	2300      	movs	r3, #0
    adc4:	0022      	movs	r2, r4
    adc6:	7023      	strb	r3, [r4, #0]
    adc8:	4902      	ldr	r1, [pc, #8]	; (add4 <LorawanGetMaxPayloadSize+0x18>)
    adca:	4b03      	ldr	r3, [pc, #12]	; (add8 <LorawanGetMaxPayloadSize+0x1c>)
    adcc:	2005      	movs	r0, #5
    adce:	4798      	blx	r3
    add0:	7820      	ldrb	r0, [r4, #0]
    add2:	bd16      	pop	{r1, r2, r4, pc}
    add4:	20001a8f 	.word	0x20001a8f
    add8:	00008755 	.word	0x00008755

0000addc <UpdateReceiveDelays>:
    addc:	23fa      	movs	r3, #250	; 0xfa
    adde:	b570      	push	{r4, r5, r6, lr}
    ade0:	009b      	lsls	r3, r3, #2
    ade2:	4c0b      	ldr	r4, [pc, #44]	; (ae10 <UpdateReceiveDelays+0x34>)
    ade4:	2800      	cmp	r0, #0
    ade6:	d000      	beq.n	adea <UpdateReceiveDelays+0xe>
    ade8:	4343      	muls	r3, r0
    adea:	0022      	movs	r2, r4
    adec:	4d09      	ldr	r5, [pc, #36]	; (ae14 <UpdateReceiveDelays+0x38>)
    adee:	32c8      	adds	r2, #200	; 0xc8
    adf0:	210c      	movs	r1, #12
    adf2:	2000      	movs	r0, #0
    adf4:	8013      	strh	r3, [r2, #0]
    adf6:	47a8      	blx	r5
    adf8:	0023      	movs	r3, r4
    adfa:	22fa      	movs	r2, #250	; 0xfa
    adfc:	33c8      	adds	r3, #200	; 0xc8
    adfe:	881b      	ldrh	r3, [r3, #0]
    ae00:	0092      	lsls	r2, r2, #2
    ae02:	189b      	adds	r3, r3, r2
    ae04:	34ca      	adds	r4, #202	; 0xca
    ae06:	210d      	movs	r1, #13
    ae08:	2000      	movs	r0, #0
    ae0a:	8023      	strh	r3, [r4, #0]
    ae0c:	47a8      	blx	r5
    ae0e:	bd70      	pop	{r4, r5, r6, pc}
    ae10:	200019b0 	.word	0x200019b0
    ae14:	00008d6d 	.word	0x00008d6d

0000ae18 <IncludeMacCommandsResponse>:
    ae18:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae1a:	0005      	movs	r5, r0
    ae1c:	2600      	movs	r6, #0
    ae1e:	b087      	sub	sp, #28
    ae20:	880c      	ldrh	r4, [r1, #0]
    ae22:	9101      	str	r1, [sp, #4]
    ae24:	9203      	str	r2, [sp, #12]
    ae26:	4a67      	ldr	r2, [pc, #412]	; (afc4 <IncludeMacCommandsResponse+0x1ac>)
    ae28:	0013      	movs	r3, r2
    ae2a:	33d8      	adds	r3, #216	; 0xd8
    ae2c:	781b      	ldrb	r3, [r3, #0]
    ae2e:	42b3      	cmp	r3, r6
    ae30:	d913      	bls.n	ae5a <IncludeMacCommandsResponse+0x42>
    ae32:	9b03      	ldr	r3, [sp, #12]
    ae34:	2b00      	cmp	r3, #0
    ae36:	d019      	beq.n	ae6c <IncludeMacCommandsResponse+0x54>
    ae38:	2303      	movs	r3, #3
    ae3a:	4373      	muls	r3, r6
    ae3c:	18d3      	adds	r3, r2, r3
    ae3e:	3391      	adds	r3, #145	; 0x91
    ae40:	7818      	ldrb	r0, [r3, #0]
    ae42:	28ff      	cmp	r0, #255	; 0xff
    ae44:	d012      	beq.n	ae6c <IncludeMacCommandsResponse+0x54>
    ae46:	9b01      	ldr	r3, [sp, #4]
    ae48:	8819      	ldrh	r1, [r3, #0]
    ae4a:	4b5f      	ldr	r3, [pc, #380]	; (afc8 <IncludeMacCommandsResponse+0x1b0>)
    ae4c:	1a61      	subs	r1, r4, r1
    ae4e:	181b      	adds	r3, r3, r0
    ae50:	3b02      	subs	r3, #2
    ae52:	781b      	ldrb	r3, [r3, #0]
    ae54:	18cb      	adds	r3, r1, r3
    ae56:	2b0f      	cmp	r3, #15
    ae58:	dd08      	ble.n	ae6c <IncludeMacCommandsResponse+0x54>
    ae5a:	2207      	movs	r2, #7
    ae5c:	2100      	movs	r1, #0
    ae5e:	4b5b      	ldr	r3, [pc, #364]	; (afcc <IncludeMacCommandsResponse+0x1b4>)
    ae60:	485b      	ldr	r0, [pc, #364]	; (afd0 <IncludeMacCommandsResponse+0x1b8>)
    ae62:	4798      	blx	r3
    ae64:	9b01      	ldr	r3, [sp, #4]
    ae66:	801c      	strh	r4, [r3, #0]
    ae68:	b007      	add	sp, #28
    ae6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae6c:	2303      	movs	r3, #3
    ae6e:	4373      	muls	r3, r6
    ae70:	18d3      	adds	r3, r2, r3
    ae72:	3391      	adds	r3, #145	; 0x91
    ae74:	7819      	ldrb	r1, [r3, #0]
    ae76:	1e88      	subs	r0, r1, #2
    ae78:	2808      	cmp	r0, #8
    ae7a:	d862      	bhi.n	af42 <IncludeMacCommandsResponse+0x12a>
    ae7c:	1c63      	adds	r3, r4, #1
    ae7e:	f005 ffb1 	bl	10de4 <__gnu_thumb1_case_uqi>
    ae82:	0594      	.short	0x0594
    ae84:	6646269e 	.word	0x6646269e
    ae88:	7b9e      	.short	0x7b9e
    ae8a:	7f          	.byte	0x7f
    ae8b:	00          	.byte	0x00
    ae8c:	2203      	movs	r2, #3
    ae8e:	20d8      	movs	r0, #216	; 0xd8
    ae90:	552a      	strb	r2, [r5, r4]
    ae92:	2200      	movs	r2, #0
    ae94:	b29b      	uxth	r3, r3
    ae96:	18eb      	adds	r3, r5, r3
    ae98:	4f4a      	ldr	r7, [pc, #296]	; (afc4 <IncludeMacCommandsResponse+0x1ac>)
    ae9a:	701a      	strb	r2, [r3, #0]
    ae9c:	30ff      	adds	r0, #255	; 0xff
    ae9e:	5c39      	ldrb	r1, [r7, r0]
    aea0:	3201      	adds	r2, #1
    aea2:	4011      	ands	r1, r2
    aea4:	466a      	mov	r2, sp
    aea6:	9102      	str	r1, [sp, #8]
    aea8:	7a12      	ldrb	r2, [r2, #8]
    aeaa:	701a      	strb	r2, [r3, #0]
    aeac:	5c3a      	ldrb	r2, [r7, r0]
    aeae:	4694      	mov	ip, r2
    aeb0:	2202      	movs	r2, #2
    aeb2:	4661      	mov	r1, ip
    aeb4:	4211      	tst	r1, r2
    aeb6:	d002      	beq.n	aebe <IncludeMacCommandsResponse+0xa6>
    aeb8:	9902      	ldr	r1, [sp, #8]
    aeba:	430a      	orrs	r2, r1
    aebc:	701a      	strb	r2, [r3, #0]
    aebe:	2204      	movs	r2, #4
    aec0:	5c39      	ldrb	r1, [r7, r0]
    aec2:	4211      	tst	r1, r2
    aec4:	d06e      	beq.n	afa4 <IncludeMacCommandsResponse+0x18c>
    aec6:	7819      	ldrb	r1, [r3, #0]
    aec8:	430a      	orrs	r2, r1
    aeca:	701a      	strb	r2, [r3, #0]
    aecc:	e06a      	b.n	afa4 <IncludeMacCommandsResponse+0x18c>
    aece:	2205      	movs	r2, #5
    aed0:	2103      	movs	r1, #3
    aed2:	552a      	strb	r2, [r5, r4]
    aed4:	2200      	movs	r2, #0
    aed6:	b29b      	uxth	r3, r3
    aed8:	4371      	muls	r1, r6
    aeda:	18eb      	adds	r3, r5, r3
    aedc:	701a      	strb	r2, [r3, #0]
    aede:	4a39      	ldr	r2, [pc, #228]	; (afc4 <IncludeMacCommandsResponse+0x1ac>)
    aee0:	1851      	adds	r1, r2, r1
    aee2:	3190      	adds	r1, #144	; 0x90
    aee4:	7888      	ldrb	r0, [r1, #2]
    aee6:	0700      	lsls	r0, r0, #28
    aee8:	0fc0      	lsrs	r0, r0, #31
    aeea:	7018      	strb	r0, [r3, #0]
    aeec:	7889      	ldrb	r1, [r1, #2]
    aeee:	b2c7      	uxtb	r7, r0
    aef0:	06c9      	lsls	r1, r1, #27
    aef2:	d502      	bpl.n	aefa <IncludeMacCommandsResponse+0xe2>
    aef4:	2102      	movs	r1, #2
    aef6:	4339      	orrs	r1, r7
    aef8:	7019      	strb	r1, [r3, #0]
    aefa:	2103      	movs	r1, #3
    aefc:	4371      	muls	r1, r6
    aefe:	1852      	adds	r2, r2, r1
    af00:	3290      	adds	r2, #144	; 0x90
    af02:	7892      	ldrb	r2, [r2, #2]
    af04:	0692      	lsls	r2, r2, #26
    af06:	d54d      	bpl.n	afa4 <IncludeMacCommandsResponse+0x18c>
    af08:	7819      	ldrb	r1, [r3, #0]
    af0a:	2204      	movs	r2, #4
    af0c:	e7dc      	b.n	aec8 <IncludeMacCommandsResponse+0xb0>
    af0e:	ab04      	add	r3, sp, #16
    af10:	1ddf      	adds	r7, r3, #7
    af12:	0039      	movs	r1, r7
    af14:	4b2f      	ldr	r3, [pc, #188]	; (afd4 <IncludeMacCommandsResponse+0x1bc>)
    af16:	200e      	movs	r0, #14
    af18:	4798      	blx	r3
    af1a:	2306      	movs	r3, #6
    af1c:	4a29      	ldr	r2, [pc, #164]	; (afc4 <IncludeMacCommandsResponse+0x1ac>)
    af1e:	552b      	strb	r3, [r5, r4]
    af20:	32e0      	adds	r2, #224	; 0xe0
    af22:	7811      	ldrb	r1, [r2, #0]
    af24:	1c62      	adds	r2, r4, #1
    af26:	b292      	uxth	r2, r2
    af28:	54a9      	strb	r1, [r5, r2]
    af2a:	783a      	ldrb	r2, [r7, #0]
    af2c:	1ca3      	adds	r3, r4, #2
    af2e:	0011      	movs	r1, r2
    af30:	3120      	adds	r1, #32
    af32:	3403      	adds	r4, #3
    af34:	b2c9      	uxtb	r1, r1
    af36:	b29b      	uxth	r3, r3
    af38:	b2a4      	uxth	r4, r4
    af3a:	293f      	cmp	r1, #63	; 0x3f
    af3c:	d904      	bls.n	af48 <IncludeMacCommandsResponse+0x130>
    af3e:	2220      	movs	r2, #32
    af40:	54ea      	strb	r2, [r5, r3]
    af42:	3601      	adds	r6, #1
    af44:	b2f6      	uxtb	r6, r6
    af46:	e76e      	b.n	ae26 <IncludeMacCommandsResponse+0xe>
    af48:	213f      	movs	r1, #63	; 0x3f
    af4a:	400a      	ands	r2, r1
    af4c:	e7f8      	b.n	af40 <IncludeMacCommandsResponse+0x128>
    af4e:	2207      	movs	r2, #7
    af50:	2103      	movs	r1, #3
    af52:	552a      	strb	r2, [r5, r4]
    af54:	2200      	movs	r2, #0
    af56:	4371      	muls	r1, r6
    af58:	b29b      	uxth	r3, r3
    af5a:	18eb      	adds	r3, r5, r3
    af5c:	701a      	strb	r2, [r3, #0]
    af5e:	4a19      	ldr	r2, [pc, #100]	; (afc4 <IncludeMacCommandsResponse+0x1ac>)
    af60:	1852      	adds	r2, r2, r1
    af62:	3290      	adds	r2, #144	; 0x90
    af64:	7891      	ldrb	r1, [r2, #2]
    af66:	09c9      	lsrs	r1, r1, #7
    af68:	7019      	strb	r1, [r3, #0]
    af6a:	7892      	ldrb	r2, [r2, #2]
    af6c:	b2c8      	uxtb	r0, r1
    af6e:	0652      	lsls	r2, r2, #25
    af70:	d518      	bpl.n	afa4 <IncludeMacCommandsResponse+0x18c>
    af72:	2202      	movs	r2, #2
    af74:	4302      	orrs	r2, r0
    af76:	e7a8      	b.n	aeca <IncludeMacCommandsResponse+0xb2>
    af78:	2209      	movs	r2, #9
    af7a:	552a      	strb	r2, [r5, r4]
    af7c:	b29c      	uxth	r4, r3
    af7e:	e7e0      	b.n	af42 <IncludeMacCommandsResponse+0x12a>
    af80:	220a      	movs	r2, #10
    af82:	2103      	movs	r1, #3
    af84:	552a      	strb	r2, [r5, r4]
    af86:	2200      	movs	r2, #0
    af88:	4371      	muls	r1, r6
    af8a:	b29b      	uxth	r3, r3
    af8c:	18eb      	adds	r3, r5, r3
    af8e:	701a      	strb	r2, [r3, #0]
    af90:	4a0c      	ldr	r2, [pc, #48]	; (afc4 <IncludeMacCommandsResponse+0x1ac>)
    af92:	1852      	adds	r2, r2, r1
    af94:	3290      	adds	r2, #144	; 0x90
    af96:	7891      	ldrb	r1, [r2, #2]
    af98:	09c9      	lsrs	r1, r1, #7
    af9a:	7019      	strb	r1, [r3, #0]
    af9c:	78d2      	ldrb	r2, [r2, #3]
    af9e:	b2c8      	uxtb	r0, r1
    afa0:	07d2      	lsls	r2, r2, #31
    afa2:	d4e6      	bmi.n	af72 <IncludeMacCommandsResponse+0x15a>
    afa4:	3402      	adds	r4, #2
    afa6:	b2a4      	uxth	r4, r4
    afa8:	e7cb      	b.n	af42 <IncludeMacCommandsResponse+0x12a>
    afaa:	0013      	movs	r3, r2
    afac:	21ff      	movs	r1, #255	; 0xff
    afae:	33dd      	adds	r3, #221	; 0xdd
    afb0:	7019      	strb	r1, [r3, #0]
    afb2:	2300      	movs	r3, #0
    afb4:	32de      	adds	r2, #222	; 0xde
    afb6:	7013      	strb	r3, [r2, #0]
    afb8:	1c63      	adds	r3, r4, #1
    afba:	2202      	movs	r2, #2
    afbc:	e7dd      	b.n	af7a <IncludeMacCommandsResponse+0x162>
    afbe:	5529      	strb	r1, [r5, r4]
    afc0:	e7dc      	b.n	af7c <IncludeMacCommandsResponse+0x164>
    afc2:	46c0      	nop			; (mov r8, r8)
    afc4:	200019b0 	.word	0x200019b0
    afc8:	000196e9 	.word	0x000196e9
    afcc:	00013ee1 	.word	0x00013ee1
    afd0:	20001b87 	.word	0x20001b87
    afd4:	0000f301 	.word	0x0000f301

0000afd8 <UpdateJoinSuccessState>:
    afd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    afda:	4c35      	ldr	r4, [pc, #212]	; (b0b0 <UpdateJoinSuccessState+0xd8>)
    afdc:	2104      	movs	r1, #4
    afde:	0022      	movs	r2, r4
    afe0:	328c      	adds	r2, #140	; 0x8c
    afe2:	7813      	ldrb	r3, [r2, #0]
    afe4:	2001      	movs	r0, #1
    afe6:	438b      	bics	r3, r1
    afe8:	7013      	strb	r3, [r2, #0]
    afea:	0022      	movs	r2, r4
    afec:	2500      	movs	r5, #0
    afee:	327c      	adds	r2, #124	; 0x7c
    aff0:	7813      	ldrb	r3, [r2, #0]
    aff2:	b087      	sub	sp, #28
    aff4:	4303      	orrs	r3, r0
    aff6:	3107      	adds	r1, #7
    aff8:	4f2e      	ldr	r7, [pc, #184]	; (b0b4 <UpdateJoinSuccessState+0xdc>)
    affa:	7013      	strb	r3, [r2, #0]
    affc:	47b8      	blx	r7
    affe:	1d23      	adds	r3, r4, #4
    b000:	2116      	movs	r1, #22
    b002:	0028      	movs	r0, r5
    b004:	67dd      	str	r5, [r3, #124]	; 0x7c
    b006:	47b8      	blx	r7
    b008:	0023      	movs	r3, r4
    b00a:	2020      	movs	r0, #32
    b00c:	33ff      	adds	r3, #255	; 0xff
    b00e:	7c5b      	ldrb	r3, [r3, #17]
    b010:	4e29      	ldr	r6, [pc, #164]	; (b0b8 <UpdateJoinSuccessState+0xe0>)
    b012:	4203      	tst	r3, r0
    b014:	d014      	beq.n	b040 <UpdateJoinSuccessState+0x68>
    b016:	0023      	movs	r3, r4
    b018:	337b      	adds	r3, #123	; 0x7b
    b01a:	701d      	strb	r5, [r3, #0]
    b01c:	0023      	movs	r3, r4
    b01e:	a904      	add	r1, sp, #16
    b020:	336f      	adds	r3, #111	; 0x6f
    b022:	710d      	strb	r5, [r1, #4]
    b024:	701d      	strb	r5, [r3, #0]
    b026:	705d      	strb	r5, [r3, #1]
    b028:	709d      	strb	r5, [r3, #2]
    b02a:	70dd      	strb	r5, [r3, #3]
    b02c:	711d      	strb	r5, [r3, #4]
    b02e:	715d      	strb	r5, [r3, #5]
    b030:	719d      	strb	r5, [r3, #6]
    b032:	71dd      	strb	r5, [r3, #7]
    b034:	47b0      	blx	r6
    b036:	210f      	movs	r1, #15
    b038:	2021      	movs	r0, #33	; 0x21
    b03a:	4469      	add	r1, sp
    b03c:	700d      	strb	r5, [r1, #0]
    b03e:	47b0      	blx	r6
    b040:	0023      	movs	r3, r4
    b042:	2500      	movs	r5, #0
    b044:	3308      	adds	r3, #8
    b046:	210a      	movs	r1, #10
    b048:	2001      	movs	r0, #1
    b04a:	67dd      	str	r5, [r3, #124]	; 0x7c
    b04c:	47b8      	blx	r7
    b04e:	0023      	movs	r3, r4
    b050:	33c2      	adds	r3, #194	; 0xc2
    b052:	801d      	strh	r5, [r3, #0]
    b054:	0022      	movs	r2, r4
    b056:	0023      	movs	r3, r4
    b058:	210e      	movs	r1, #14
    b05a:	327c      	adds	r2, #124	; 0x7c
    b05c:	33ed      	adds	r3, #237	; 0xed
    b05e:	701d      	strb	r5, [r3, #0]
    b060:	7813      	ldrb	r3, [r2, #0]
    b062:	203a      	movs	r0, #58	; 0x3a
    b064:	438b      	bics	r3, r1
    b066:	0029      	movs	r1, r5
    b068:	7013      	strb	r3, [r2, #0]
    b06a:	47b0      	blx	r6
    b06c:	0023      	movs	r3, r4
    b06e:	337d      	adds	r3, #125	; 0x7d
    b070:	781b      	ldrb	r3, [r3, #0]
    b072:	079b      	lsls	r3, r3, #30
    b074:	d50c      	bpl.n	b090 <UpdateJoinSuccessState+0xb8>
    b076:	0023      	movs	r3, r4
    b078:	21fa      	movs	r1, #250	; 0xfa
    b07a:	3388      	adds	r3, #136	; 0x88
    b07c:	681b      	ldr	r3, [r3, #0]
    b07e:	34e7      	adds	r4, #231	; 0xe7
    b080:	0089      	lsls	r1, r1, #2
    b082:	7820      	ldrb	r0, [r4, #0]
    b084:	4359      	muls	r1, r3
    b086:	9500      	str	r5, [sp, #0]
    b088:	4b0c      	ldr	r3, [pc, #48]	; (b0bc <UpdateJoinSuccessState+0xe4>)
    b08a:	002a      	movs	r2, r5
    b08c:	4c0c      	ldr	r4, [pc, #48]	; (b0c0 <UpdateJoinSuccessState+0xe8>)
    b08e:	47a0      	blx	r4
    b090:	490c      	ldr	r1, [pc, #48]	; (b0c4 <UpdateJoinSuccessState+0xec>)
    b092:	794a      	ldrb	r2, [r1, #5]
    b094:	790b      	ldrb	r3, [r1, #4]
    b096:	0212      	lsls	r2, r2, #8
    b098:	431a      	orrs	r2, r3
    b09a:	798b      	ldrb	r3, [r1, #6]
    b09c:	041b      	lsls	r3, r3, #16
    b09e:	431a      	orrs	r2, r3
    b0a0:	79cb      	ldrb	r3, [r1, #7]
    b0a2:	061b      	lsls	r3, r3, #24
    b0a4:	4313      	orrs	r3, r2
    b0a6:	d001      	beq.n	b0ac <UpdateJoinSuccessState+0xd4>
    b0a8:	2008      	movs	r0, #8
    b0aa:	4798      	blx	r3
    b0ac:	b007      	add	sp, #28
    b0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b0b0:	200019b0 	.word	0x200019b0
    b0b4:	00008d6d 	.word	0x00008d6d
    b0b8:	0000887d 	.word	0x0000887d
    b0bc:	0000b205 	.word	0x0000b205
    b0c0:	00009795 	.word	0x00009795
    b0c4:	20001ca8 	.word	0x20001ca8

0000b0c8 <PrepareSessionKeys>:
    b0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b0ca:	0004      	movs	r4, r0
    b0cc:	2603      	movs	r6, #3
    b0ce:	000d      	movs	r5, r1
    b0d0:	0017      	movs	r7, r2
    b0d2:	4b09      	ldr	r3, [pc, #36]	; (b0f8 <PrepareSessionKeys+0x30>)
    b0d4:	2210      	movs	r2, #16
    b0d6:	2100      	movs	r1, #0
    b0d8:	4798      	blx	r3
    b0da:	0032      	movs	r2, r6
    b0dc:	0029      	movs	r1, r5
    b0de:	1c60      	adds	r0, r4, #1
    b0e0:	4d06      	ldr	r5, [pc, #24]	; (b0fc <PrepareSessionKeys+0x34>)
    b0e2:	47a8      	blx	r5
    b0e4:	0032      	movs	r2, r6
    b0e6:	0039      	movs	r1, r7
    b0e8:	1d20      	adds	r0, r4, #4
    b0ea:	47a8      	blx	r5
    b0ec:	1de0      	adds	r0, r4, #7
    b0ee:	2202      	movs	r2, #2
    b0f0:	4903      	ldr	r1, [pc, #12]	; (b100 <PrepareSessionKeys+0x38>)
    b0f2:	47a8      	blx	r5
    b0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b0f6:	46c0      	nop			; (mov r8, r8)
    b0f8:	00013ee1 	.word	0x00013ee1
    b0fc:	00013e5d 	.word	0x00013e5d
    b100:	20001a74 	.word	0x20001a74

0000b104 <AssembleEncryptionBlock>:
    b104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b106:	001e      	movs	r6, r3
    b108:	4c0b      	ldr	r4, [pc, #44]	; (b138 <AssembleEncryptionBlock+0x34>)
    b10a:	0017      	movs	r7, r2
    b10c:	4b0b      	ldr	r3, [pc, #44]	; (b13c <AssembleEncryptionBlock+0x38>)
    b10e:	0005      	movs	r5, r0
    b110:	9101      	str	r1, [sp, #4]
    b112:	2210      	movs	r2, #16
    b114:	2100      	movs	r1, #0
    b116:	0020      	movs	r0, r4
    b118:	4798      	blx	r3
    b11a:	7026      	strb	r6, [r4, #0]
    b11c:	2604      	movs	r6, #4
    b11e:	7165      	strb	r5, [r4, #5]
    b120:	0032      	movs	r2, r6
    b122:	4d07      	ldr	r5, [pc, #28]	; (b140 <AssembleEncryptionBlock+0x3c>)
    b124:	a908      	add	r1, sp, #32
    b126:	1da0      	adds	r0, r4, #6
    b128:	47a8      	blx	r5
    b12a:	0020      	movs	r0, r4
    b12c:	0032      	movs	r2, r6
    b12e:	a901      	add	r1, sp, #4
    b130:	300a      	adds	r0, #10
    b132:	47a8      	blx	r5
    b134:	73e7      	strb	r7, [r4, #15]
    b136:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    b138:	20000fd4 	.word	0x20000fd4
    b13c:	00013ee1 	.word	0x00013ee1
    b140:	00013e5d 	.word	0x00013e5d

0000b144 <ConfigureRadio>:
    b144:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b146:	0001      	movs	r1, r0
    b148:	0005      	movs	r5, r0
    b14a:	4c11      	ldr	r4, [pc, #68]	; (b190 <ConfigureRadio+0x4c>)
    b14c:	3109      	adds	r1, #9
    b14e:	2009      	movs	r0, #9
    b150:	47a0      	blx	r4
    b152:	0029      	movs	r1, r5
    b154:	2001      	movs	r0, #1
    b156:	47a0      	blx	r4
    b158:	1d29      	adds	r1, r5, #4
    b15a:	200a      	movs	r0, #10
    b15c:	47a0      	blx	r4
    b15e:	7a6b      	ldrb	r3, [r5, #9]
    b160:	2b01      	cmp	r3, #1
    b162:	d10b      	bne.n	b17c <ConfigureRadio+0x38>
    b164:	0029      	movs	r1, r5
    b166:	2016      	movs	r0, #22
    b168:	310b      	adds	r1, #11
    b16a:	47a0      	blx	r4
    b16c:	0029      	movs	r1, r5
    b16e:	2007      	movs	r0, #7
    b170:	310a      	adds	r1, #10
    b172:	47a0      	blx	r4
    b174:	2000      	movs	r0, #0
    b176:	4907      	ldr	r1, [pc, #28]	; (b194 <ConfigureRadio+0x50>)
    b178:	47a0      	blx	r4
    b17a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    b17c:	466b      	mov	r3, sp
    b17e:	1dd9      	adds	r1, r3, #7
    b180:	2303      	movs	r3, #3
    b182:	2013      	movs	r0, #19
    b184:	700b      	strb	r3, [r1, #0]
    b186:	47a0      	blx	r4
    b188:	4903      	ldr	r1, [pc, #12]	; (b198 <ConfigureRadio+0x54>)
    b18a:	2012      	movs	r0, #18
    b18c:	e7f4      	b.n	b178 <ConfigureRadio+0x34>
    b18e:	46c0      	nop			; (mov r8, r8)
    b190:	0000f3f1 	.word	0x0000f3f1
    b194:	20001aa7 	.word	0x20001aa7
    b198:	000196e6 	.word	0x000196e6

0000b19c <StopReceiveWindow2Timer>:
    b19c:	b510      	push	{r4, lr}
    b19e:	4c0b      	ldr	r4, [pc, #44]	; (b1cc <StopReceiveWindow2Timer+0x30>)
    b1a0:	0022      	movs	r2, r4
    b1a2:	32f4      	adds	r2, #244	; 0xf4
    b1a4:	7812      	ldrb	r2, [r2, #0]
    b1a6:	2a01      	cmp	r2, #1
    b1a8:	d10e      	bne.n	b1c8 <StopReceiveWindow2Timer+0x2c>
    b1aa:	0021      	movs	r1, r4
    b1ac:	200e      	movs	r0, #14
    b1ae:	317c      	adds	r1, #124	; 0x7c
    b1b0:	780a      	ldrb	r2, [r1, #0]
    b1b2:	34e5      	adds	r4, #229	; 0xe5
    b1b4:	4382      	bics	r2, r0
    b1b6:	700a      	strb	r2, [r1, #0]
    b1b8:	7820      	ldrb	r0, [r4, #0]
    b1ba:	4b05      	ldr	r3, [pc, #20]	; (b1d0 <StopReceiveWindow2Timer+0x34>)
    b1bc:	4798      	blx	r3
    b1be:	2800      	cmp	r0, #0
    b1c0:	d002      	beq.n	b1c8 <StopReceiveWindow2Timer+0x2c>
    b1c2:	7820      	ldrb	r0, [r4, #0]
    b1c4:	4b03      	ldr	r3, [pc, #12]	; (b1d4 <StopReceiveWindow2Timer+0x38>)
    b1c6:	4798      	blx	r3
    b1c8:	bd10      	pop	{r4, pc}
    b1ca:	46c0      	nop			; (mov r8, r8)
    b1cc:	200019b0 	.word	0x200019b0
    b1d0:	0000992d 	.word	0x0000992d
    b1d4:	00009aa1 	.word	0x00009aa1

0000b1d8 <LorawanLinkCheckCallback.part.1>:
    b1d8:	4b07      	ldr	r3, [pc, #28]	; (b1f8 <LorawanLinkCheckCallback.part.1+0x20>)
    b1da:	b513      	push	{r0, r1, r4, lr}
    b1dc:	001a      	movs	r2, r3
    b1de:	21fa      	movs	r1, #250	; 0xfa
    b1e0:	3288      	adds	r2, #136	; 0x88
    b1e2:	6812      	ldr	r2, [r2, #0]
    b1e4:	0089      	lsls	r1, r1, #2
    b1e6:	4351      	muls	r1, r2
    b1e8:	2200      	movs	r2, #0
    b1ea:	33e7      	adds	r3, #231	; 0xe7
    b1ec:	7818      	ldrb	r0, [r3, #0]
    b1ee:	4c03      	ldr	r4, [pc, #12]	; (b1fc <LorawanLinkCheckCallback.part.1+0x24>)
    b1f0:	9200      	str	r2, [sp, #0]
    b1f2:	4b03      	ldr	r3, [pc, #12]	; (b200 <LorawanLinkCheckCallback.part.1+0x28>)
    b1f4:	47a0      	blx	r4
    b1f6:	bd13      	pop	{r0, r1, r4, pc}
    b1f8:	200019b0 	.word	0x200019b0
    b1fc:	00009795 	.word	0x00009795
    b200:	0000b205 	.word	0x0000b205

0000b204 <LorawanLinkCheckCallback>:
    b204:	4b17      	ldr	r3, [pc, #92]	; (b264 <LorawanLinkCheckCallback+0x60>)
    b206:	20a0      	movs	r0, #160	; 0xa0
    b208:	001a      	movs	r2, r3
    b20a:	2180      	movs	r1, #128	; 0x80
    b20c:	b510      	push	{r4, lr}
    b20e:	327c      	adds	r2, #124	; 0x7c
    b210:	8812      	ldrh	r2, [r2, #0]
    b212:	0080      	lsls	r0, r0, #2
    b214:	0089      	lsls	r1, r1, #2
    b216:	4002      	ands	r2, r0
    b218:	428a      	cmp	r2, r1
    b21a:	d11c      	bne.n	b256 <LorawanLinkCheckCallback+0x52>
    b21c:	001a      	movs	r2, r3
    b21e:	32d8      	adds	r2, #216	; 0xd8
    b220:	7810      	ldrb	r0, [r2, #0]
    b222:	2403      	movs	r4, #3
    b224:	2200      	movs	r2, #0
    b226:	b2d1      	uxtb	r1, r2
    b228:	4281      	cmp	r1, r0
    b22a:	d30d      	bcc.n	b248 <LorawanLinkCheckCallback+0x44>
    b22c:	d113      	bne.n	b256 <LorawanLinkCheckCallback+0x52>
    b22e:	2203      	movs	r2, #3
    b230:	434a      	muls	r2, r1
    b232:	2102      	movs	r1, #2
    b234:	189a      	adds	r2, r3, r2
    b236:	3291      	adds	r2, #145	; 0x91
    b238:	7011      	strb	r1, [r2, #0]
    b23a:	280f      	cmp	r0, #15
    b23c:	d80b      	bhi.n	b256 <LorawanLinkCheckCallback+0x52>
    b23e:	001a      	movs	r2, r3
    b240:	3001      	adds	r0, #1
    b242:	32d8      	adds	r2, #216	; 0xd8
    b244:	7010      	strb	r0, [r2, #0]
    b246:	e006      	b.n	b256 <LorawanLinkCheckCallback+0x52>
    b248:	0021      	movs	r1, r4
    b24a:	3201      	adds	r2, #1
    b24c:	4351      	muls	r1, r2
    b24e:	318e      	adds	r1, #142	; 0x8e
    b250:	5c59      	ldrb	r1, [r3, r1]
    b252:	2902      	cmp	r1, #2
    b254:	d1e7      	bne.n	b226 <LorawanLinkCheckCallback+0x22>
    b256:	337d      	adds	r3, #125	; 0x7d
    b258:	781b      	ldrb	r3, [r3, #0]
    b25a:	079b      	lsls	r3, r3, #30
    b25c:	d501      	bpl.n	b262 <LorawanLinkCheckCallback+0x5e>
    b25e:	4b02      	ldr	r3, [pc, #8]	; (b268 <LorawanLinkCheckCallback+0x64>)
    b260:	4798      	blx	r3
    b262:	bd10      	pop	{r4, pc}
    b264:	200019b0 	.word	0x200019b0
    b268:	0000b1d9 	.word	0x0000b1d9

0000b26c <LORAWAN_Init>:
    b26c:	2270      	movs	r2, #112	; 0x70
    b26e:	b5f0      	push	{r4, r5, r6, r7, lr}
    b270:	4b3e      	ldr	r3, [pc, #248]	; (b36c <LORAWAN_Init+0x100>)
    b272:	b087      	sub	sp, #28
    b274:	781b      	ldrb	r3, [r3, #0]
    b276:	0005      	movs	r5, r0
    b278:	011b      	lsls	r3, r3, #4
    b27a:	4013      	ands	r3, r2
    b27c:	4a3c      	ldr	r2, [pc, #240]	; (b370 <LORAWAN_Init+0x104>)
    b27e:	000e      	movs	r6, r1
    b280:	7812      	ldrb	r2, [r2, #0]
    b282:	0912      	lsrs	r2, r2, #4
    b284:	4313      	orrs	r3, r2
    b286:	2b1f      	cmp	r3, #31
    b288:	d000      	beq.n	b28c <LORAWAN_Init+0x20>
    b28a:	e7fe      	b.n	b28a <LORAWAN_Init+0x1e>
    b28c:	4f39      	ldr	r7, [pc, #228]	; (b374 <LORAWAN_Init+0x108>)
    b28e:	003b      	movs	r3, r7
    b290:	33ef      	adds	r3, #239	; 0xef
    b292:	781b      	ldrb	r3, [r3, #0]
    b294:	2b00      	cmp	r3, #0
    b296:	d166      	bne.n	b366 <LORAWAN_Init+0xfa>
    b298:	4837      	ldr	r0, [pc, #220]	; (b378 <LORAWAN_Init+0x10c>)
    b29a:	4c38      	ldr	r4, [pc, #224]	; (b37c <LORAWAN_Init+0x110>)
    b29c:	47a0      	blx	r4
    b29e:	2808      	cmp	r0, #8
    b2a0:	d034      	beq.n	b30c <LORAWAN_Init+0xa0>
    b2a2:	4b37      	ldr	r3, [pc, #220]	; (b380 <LORAWAN_Init+0x114>)
    b2a4:	4798      	blx	r3
    b2a6:	37ef      	adds	r7, #239	; 0xef
    b2a8:	783b      	ldrb	r3, [r7, #0]
    b2aa:	2b00      	cmp	r3, #0
    b2ac:	d018      	beq.n	b2e0 <LORAWAN_Init+0x74>
    b2ae:	4b35      	ldr	r3, [pc, #212]	; (b384 <LORAWAN_Init+0x118>)
    b2b0:	0a2a      	lsrs	r2, r5, #8
    b2b2:	705a      	strb	r2, [r3, #1]
    b2b4:	0c2a      	lsrs	r2, r5, #16
    b2b6:	709a      	strb	r2, [r3, #2]
    b2b8:	0a32      	lsrs	r2, r6, #8
    b2ba:	701d      	strb	r5, [r3, #0]
    b2bc:	711e      	strb	r6, [r3, #4]
    b2be:	715a      	strb	r2, [r3, #5]
    b2c0:	0e2d      	lsrs	r5, r5, #24
    b2c2:	0c32      	lsrs	r2, r6, #16
    b2c4:	0e36      	lsrs	r6, r6, #24
    b2c6:	719a      	strb	r2, [r3, #6]
    b2c8:	70dd      	strb	r5, [r3, #3]
    b2ca:	71de      	strb	r6, [r3, #7]
    b2cc:	4b2e      	ldr	r3, [pc, #184]	; (b388 <LORAWAN_Init+0x11c>)
    b2ce:	4798      	blx	r3
    b2d0:	492e      	ldr	r1, [pc, #184]	; (b38c <LORAWAN_Init+0x120>)
    b2d2:	4b2f      	ldr	r3, [pc, #188]	; (b390 <LORAWAN_Init+0x124>)
    b2d4:	201a      	movs	r0, #26
    b2d6:	4798      	blx	r3
    b2d8:	4b2e      	ldr	r3, [pc, #184]	; (b394 <LORAWAN_Init+0x128>)
    b2da:	4798      	blx	r3
    b2dc:	4b2e      	ldr	r3, [pc, #184]	; (b398 <LORAWAN_Init+0x12c>)
    b2de:	4798      	blx	r3
    b2e0:	2317      	movs	r3, #23
    b2e2:	ac02      	add	r4, sp, #8
    b2e4:	7123      	strb	r3, [r4, #4]
    b2e6:	4b2d      	ldr	r3, [pc, #180]	; (b39c <LORAWAN_Init+0x130>)
    b2e8:	9a03      	ldr	r2, [sp, #12]
    b2ea:	9300      	str	r3, [sp, #0]
    b2ec:	4d2c      	ldr	r5, [pc, #176]	; (b3a0 <LORAWAN_Init+0x134>)
    b2ee:	492d      	ldr	r1, [pc, #180]	; (b3a4 <LORAWAN_Init+0x138>)
    b2f0:	4b2d      	ldr	r3, [pc, #180]	; (b3a8 <LORAWAN_Init+0x13c>)
    b2f2:	2000      	movs	r0, #0
    b2f4:	47a8      	blx	r5
    b2f6:	230f      	movs	r3, #15
    b2f8:	7123      	strb	r3, [r4, #4]
    b2fa:	4b2c      	ldr	r3, [pc, #176]	; (b3ac <LORAWAN_Init+0x140>)
    b2fc:	492c      	ldr	r1, [pc, #176]	; (b3b0 <LORAWAN_Init+0x144>)
    b2fe:	9300      	str	r3, [sp, #0]
    b300:	6862      	ldr	r2, [r4, #4]
    b302:	4b2c      	ldr	r3, [pc, #176]	; (b3b4 <LORAWAN_Init+0x148>)
    b304:	2001      	movs	r0, #1
    b306:	47a8      	blx	r5
    b308:	b007      	add	sp, #28
    b30a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b30c:	482a      	ldr	r0, [pc, #168]	; (b3b8 <LORAWAN_Init+0x14c>)
    b30e:	47a0      	blx	r4
    b310:	2808      	cmp	r0, #8
    b312:	d1c6      	bne.n	b2a2 <LORAWAN_Init+0x36>
    b314:	4829      	ldr	r0, [pc, #164]	; (b3bc <LORAWAN_Init+0x150>)
    b316:	47a0      	blx	r4
    b318:	2808      	cmp	r0, #8
    b31a:	d1c2      	bne.n	b2a2 <LORAWAN_Init+0x36>
    b31c:	4828      	ldr	r0, [pc, #160]	; (b3c0 <LORAWAN_Init+0x154>)
    b31e:	47a0      	blx	r4
    b320:	2808      	cmp	r0, #8
    b322:	d1be      	bne.n	b2a2 <LORAWAN_Init+0x36>
    b324:	4827      	ldr	r0, [pc, #156]	; (b3c4 <LORAWAN_Init+0x158>)
    b326:	47a0      	blx	r4
    b328:	2808      	cmp	r0, #8
    b32a:	d1ba      	bne.n	b2a2 <LORAWAN_Init+0x36>
    b32c:	4826      	ldr	r0, [pc, #152]	; (b3c8 <LORAWAN_Init+0x15c>)
    b32e:	47a0      	blx	r4
    b330:	2808      	cmp	r0, #8
    b332:	d1b6      	bne.n	b2a2 <LORAWAN_Init+0x36>
    b334:	4825      	ldr	r0, [pc, #148]	; (b3cc <LORAWAN_Init+0x160>)
    b336:	47a0      	blx	r4
    b338:	2808      	cmp	r0, #8
    b33a:	d1b2      	bne.n	b2a2 <LORAWAN_Init+0x36>
    b33c:	4824      	ldr	r0, [pc, #144]	; (b3d0 <LORAWAN_Init+0x164>)
    b33e:	47a0      	blx	r4
    b340:	2808      	cmp	r0, #8
    b342:	d1ae      	bne.n	b2a2 <LORAWAN_Init+0x36>
    b344:	4823      	ldr	r0, [pc, #140]	; (b3d4 <LORAWAN_Init+0x168>)
    b346:	47a0      	blx	r4
    b348:	2808      	cmp	r0, #8
    b34a:	d1aa      	bne.n	b2a2 <LORAWAN_Init+0x36>
    b34c:	4822      	ldr	r0, [pc, #136]	; (b3d8 <LORAWAN_Init+0x16c>)
    b34e:	47a0      	blx	r4
    b350:	2808      	cmp	r0, #8
    b352:	d1a6      	bne.n	b2a2 <LORAWAN_Init+0x36>
    b354:	4821      	ldr	r0, [pc, #132]	; (b3dc <LORAWAN_Init+0x170>)
    b356:	47a0      	blx	r4
    b358:	2808      	cmp	r0, #8
    b35a:	d1a2      	bne.n	b2a2 <LORAWAN_Init+0x36>
    b35c:	003b      	movs	r3, r7
    b35e:	2201      	movs	r2, #1
    b360:	33ef      	adds	r3, #239	; 0xef
    b362:	701a      	strb	r2, [r3, #0]
    b364:	e79f      	b.n	b2a6 <LORAWAN_Init+0x3a>
    b366:	4b1e      	ldr	r3, [pc, #120]	; (b3e0 <LORAWAN_Init+0x174>)
    b368:	4798      	blx	r3
    b36a:	e79c      	b.n	b2a6 <LORAWAN_Init+0x3a>
    b36c:	41003fe8 	.word	0x41003fe8
    b370:	41003fe4 	.word	0x41003fe4
    b374:	200019b0 	.word	0x200019b0
    b378:	20001a92 	.word	0x20001a92
    b37c:	00009761 	.word	0x00009761
    b380:	000096a5 	.word	0x000096a5
    b384:	20001ca8 	.word	0x20001ca8
    b388:	0000f60d 	.word	0x0000f60d
    b38c:	0000cf11 	.word	0x0000cf11
    b390:	0000f3f1 	.word	0x0000f3f1
    b394:	00009f2d 	.word	0x00009f2d
    b398:	0001404d 	.word	0x0001404d
    b39c:	0000efc1 	.word	0x0000efc1
    b3a0:	00008dd1 	.word	0x00008dd1
    b3a4:	20001997 	.word	0x20001997
    b3a8:	00019704 	.word	0x00019704
    b3ac:	0000efc5 	.word	0x0000efc5
    b3b0:	20001888 	.word	0x20001888
    b3b4:	000197bc 	.word	0x000197bc
    b3b8:	20001a93 	.word	0x20001a93
    b3bc:	20001a94 	.word	0x20001a94
    b3c0:	20001a95 	.word	0x20001a95
    b3c4:	20001a97 	.word	0x20001a97
    b3c8:	20001a98 	.word	0x20001a98
    b3cc:	20001a96 	.word	0x20001a96
    b3d0:	20001a99 	.word	0x20001a99
    b3d4:	20001aa2 	.word	0x20001aa2
    b3d8:	20001aa3 	.word	0x20001aa3
    b3dc:	20001acc 	.word	0x20001acc
    b3e0:	0000ad55 	.word	0x0000ad55

0000b3e4 <LORAWAN_Send>:
    b3e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b3e6:	4c37      	ldr	r4, [pc, #220]	; (b4c4 <LORAWAN_Send+0xe0>)
    b3e8:	0006      	movs	r6, r0
    b3ea:	0023      	movs	r3, r4
    b3ec:	337c      	adds	r3, #124	; 0x7c
    b3ee:	781b      	ldrb	r3, [r3, #0]
    b3f0:	250f      	movs	r5, #15
    b3f2:	b25a      	sxtb	r2, r3
    b3f4:	2a00      	cmp	r2, #0
    b3f6:	db0b      	blt.n	b410 <LORAWAN_Send+0x2c>
    b3f8:	3d03      	subs	r5, #3
    b3fa:	065a      	lsls	r2, r3, #25
    b3fc:	d408      	bmi.n	b410 <LORAWAN_Send+0x2c>
    b3fe:	3d03      	subs	r5, #3
    b400:	07db      	lsls	r3, r3, #31
    b402:	d505      	bpl.n	b410 <LORAWAN_Send+0x2c>
    b404:	23ea      	movs	r3, #234	; 0xea
    b406:	005b      	lsls	r3, r3, #1
    b408:	5ce7      	ldrb	r7, [r4, r3]
    b40a:	2f00      	cmp	r7, #0
    b40c:	d102      	bne.n	b414 <LORAWAN_Send+0x30>
    b40e:	2511      	movs	r5, #17
    b410:	0028      	movs	r0, r5
    b412:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b414:	2800      	cmp	r0, #0
    b416:	d10e      	bne.n	b436 <LORAWAN_Send+0x52>
    b418:	2700      	movs	r7, #0
    b41a:	1d23      	adds	r3, r4, #4
    b41c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    b41e:	3301      	adds	r3, #1
    b420:	d123      	bne.n	b46a <LORAWAN_Send+0x86>
    b422:	2001      	movs	r0, #1
    b424:	347c      	adds	r4, #124	; 0x7c
    b426:	78a3      	ldrb	r3, [r4, #2]
    b428:	210b      	movs	r1, #11
    b42a:	4303      	orrs	r3, r0
    b42c:	70a3      	strb	r3, [r4, #2]
    b42e:	4b26      	ldr	r3, [pc, #152]	; (b4c8 <LORAWAN_Send+0xe4>)
    b430:	4798      	blx	r3
    b432:	250d      	movs	r5, #13
    b434:	e7ec      	b.n	b410 <LORAWAN_Send+0x2c>
    b436:	7843      	ldrb	r3, [r0, #1]
    b438:	7a02      	ldrb	r2, [r0, #8]
    b43a:	3b01      	subs	r3, #1
    b43c:	b2db      	uxtb	r3, r3
    b43e:	9201      	str	r2, [sp, #4]
    b440:	2bdf      	cmp	r3, #223	; 0xdf
    b442:	d902      	bls.n	b44a <LORAWAN_Send+0x66>
    b444:	250a      	movs	r5, #10
    b446:	2a00      	cmp	r2, #0
    b448:	d1e2      	bne.n	b410 <LORAWAN_Send+0x2c>
    b44a:	4b20      	ldr	r3, [pc, #128]	; (b4cc <LORAWAN_Send+0xe8>)
    b44c:	4798      	blx	r3
    b44e:	4684      	mov	ip, r0
    b450:	9b01      	ldr	r3, [sp, #4]
    b452:	9000      	str	r0, [sp, #0]
    b454:	4463      	add	r3, ip
    b456:	001d      	movs	r5, r3
    b458:	4b1d      	ldr	r3, [pc, #116]	; (b4d0 <LORAWAN_Send+0xec>)
    b45a:	4798      	blx	r3
    b45c:	4285      	cmp	r5, r0
    b45e:	dddb      	ble.n	b418 <LORAWAN_Send+0x34>
    b460:	9b00      	ldr	r3, [sp, #0]
    b462:	250e      	movs	r5, #14
    b464:	2b00      	cmp	r3, #0
    b466:	d0d3      	beq.n	b410 <LORAWAN_Send+0x2c>
    b468:	e7d7      	b.n	b41a <LORAWAN_Send+0x36>
    b46a:	0023      	movs	r3, r4
    b46c:	33f4      	adds	r3, #244	; 0xf4
    b46e:	781b      	ldrb	r3, [r3, #0]
    b470:	2b04      	cmp	r3, #4
    b472:	d01d      	beq.n	b4b0 <LORAWAN_Send+0xcc>
    b474:	0023      	movs	r3, r4
    b476:	33f4      	adds	r3, #244	; 0xf4
    b478:	781b      	ldrb	r3, [r3, #0]
    b47a:	2b01      	cmp	r3, #1
    b47c:	d105      	bne.n	b48a <LORAWAN_Send+0xa6>
    b47e:	0023      	movs	r3, r4
    b480:	337c      	adds	r3, #124	; 0x7c
    b482:	781a      	ldrb	r2, [r3, #0]
    b484:	230e      	movs	r3, #14
    b486:	421a      	tst	r2, r3
    b488:	d1c1      	bne.n	b40e <LORAWAN_Send+0x2a>
    b48a:	0023      	movs	r3, r4
    b48c:	33fc      	adds	r3, #252	; 0xfc
    b48e:	2f00      	cmp	r7, #0
    b490:	d113      	bne.n	b4ba <LORAWAN_Send+0xd6>
    b492:	2508      	movs	r5, #8
    b494:	601e      	str	r6, [r3, #0]
    b496:	23ea      	movs	r3, #234	; 0xea
    b498:	2200      	movs	r2, #0
    b49a:	005b      	lsls	r3, r3, #1
    b49c:	54e2      	strb	r2, [r4, r3]
    b49e:	2001      	movs	r0, #1
    b4a0:	4b0c      	ldr	r3, [pc, #48]	; (b4d4 <LORAWAN_Send+0xf0>)
    b4a2:	4798      	blx	r3
    b4a4:	2320      	movs	r3, #32
    b4a6:	348c      	adds	r4, #140	; 0x8c
    b4a8:	7822      	ldrb	r2, [r4, #0]
    b4aa:	4313      	orrs	r3, r2
    b4ac:	7023      	strb	r3, [r4, #0]
    b4ae:	e7af      	b.n	b410 <LORAWAN_Send+0x2c>
    b4b0:	4b09      	ldr	r3, [pc, #36]	; (b4d8 <LORAWAN_Send+0xf4>)
    b4b2:	4798      	blx	r3
    b4b4:	2808      	cmp	r0, #8
    b4b6:	d1aa      	bne.n	b40e <LORAWAN_Send+0x2a>
    b4b8:	e7dc      	b.n	b474 <LORAWAN_Send+0x90>
    b4ba:	2200      	movs	r2, #0
    b4bc:	2511      	movs	r5, #17
    b4be:	601a      	str	r2, [r3, #0]
    b4c0:	e7e9      	b.n	b496 <LORAWAN_Send+0xb2>
    b4c2:	46c0      	nop			; (mov r8, r8)
    b4c4:	200019b0 	.word	0x200019b0
    b4c8:	00008d6d 	.word	0x00008d6d
    b4cc:	0000ad15 	.word	0x0000ad15
    b4d0:	0000adbd 	.word	0x0000adbd
    b4d4:	0000f27d 	.word	0x0000f27d
    b4d8:	0000eaed 	.word	0x0000eaed

0000b4dc <AutomaticReplyCallback>:
    b4dc:	b510      	push	{r4, lr}
    b4de:	4c0d      	ldr	r4, [pc, #52]	; (b514 <AutomaticReplyCallback+0x38>)
    b4e0:	0023      	movs	r3, r4
    b4e2:	33f4      	adds	r3, #244	; 0xf4
    b4e4:	781b      	ldrb	r3, [r3, #0]
    b4e6:	2b01      	cmp	r3, #1
    b4e8:	d10e      	bne.n	b508 <AutomaticReplyCallback+0x2c>
    b4ea:	0022      	movs	r2, r4
    b4ec:	210e      	movs	r1, #14
    b4ee:	327c      	adds	r2, #124	; 0x7c
    b4f0:	7813      	ldrb	r3, [r2, #0]
    b4f2:	438b      	bics	r3, r1
    b4f4:	7013      	strb	r3, [r2, #0]
    b4f6:	4b08      	ldr	r3, [pc, #32]	; (b518 <AutomaticReplyCallback+0x3c>)
    b4f8:	2000      	movs	r0, #0
    b4fa:	4798      	blx	r3
    b4fc:	2208      	movs	r2, #8
    b4fe:	348c      	adds	r4, #140	; 0x8c
    b500:	7823      	ldrb	r3, [r4, #0]
    b502:	4393      	bics	r3, r2
    b504:	7023      	strb	r3, [r4, #0]
    b506:	bd10      	pop	{r4, pc}
    b508:	2b04      	cmp	r3, #4
    b50a:	d1f4      	bne.n	b4f6 <AutomaticReplyCallback+0x1a>
    b50c:	4b03      	ldr	r3, [pc, #12]	; (b51c <AutomaticReplyCallback+0x40>)
    b50e:	4798      	blx	r3
    b510:	e7f1      	b.n	b4f6 <AutomaticReplyCallback+0x1a>
    b512:	46c0      	nop			; (mov r8, r8)
    b514:	200019b0 	.word	0x200019b0
    b518:	0000b3e5 	.word	0x0000b3e5
    b51c:	0000fd25 	.word	0x0000fd25

0000b520 <LorawanLinkCheckConfigure>:
    b520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b522:	23fa      	movs	r3, #250	; 0xfa
    b524:	4c21      	ldr	r4, [pc, #132]	; (b5ac <LorawanLinkCheckConfigure+0x8c>)
    b526:	009b      	lsls	r3, r3, #2
    b528:	0022      	movs	r2, r4
    b52a:	0025      	movs	r5, r4
    b52c:	4343      	muls	r3, r0
    b52e:	3288      	adds	r2, #136	; 0x88
    b530:	0006      	movs	r6, r0
    b532:	2102      	movs	r1, #2
    b534:	2000      	movs	r0, #0
    b536:	4f1e      	ldr	r7, [pc, #120]	; (b5b0 <LorawanLinkCheckConfigure+0x90>)
    b538:	6013      	str	r3, [r2, #0]
    b53a:	357c      	adds	r5, #124	; 0x7c
    b53c:	47b8      	blx	r7
    b53e:	2e00      	cmp	r6, #0
    b540:	d127      	bne.n	b592 <LorawanLinkCheckConfigure+0x72>
    b542:	0023      	movs	r3, r4
    b544:	33e7      	adds	r3, #231	; 0xe7
    b546:	7818      	ldrb	r0, [r3, #0]
    b548:	4b1a      	ldr	r3, [pc, #104]	; (b5b4 <LorawanLinkCheckConfigure+0x94>)
    b54a:	4798      	blx	r3
    b54c:	2202      	movs	r2, #2
    b54e:	786b      	ldrb	r3, [r5, #1]
    b550:	210b      	movs	r1, #11
    b552:	4393      	bics	r3, r2
    b554:	706b      	strb	r3, [r5, #1]
    b556:	2001      	movs	r0, #1
    b558:	47b8      	blx	r7
    b55a:	0023      	movs	r3, r4
    b55c:	2701      	movs	r7, #1
    b55e:	33d8      	adds	r3, #216	; 0xd8
    b560:	781b      	ldrb	r3, [r3, #0]
    b562:	0030      	movs	r0, r6
    b564:	0032      	movs	r2, r6
    b566:	36ff      	adds	r6, #255	; 0xff
    b568:	429a      	cmp	r2, r3
    b56a:	d304      	bcc.n	b576 <LorawanLinkCheckConfigure+0x56>
    b56c:	2800      	cmp	r0, #0
    b56e:	d001      	beq.n	b574 <LorawanLinkCheckConfigure+0x54>
    b570:	34d8      	adds	r4, #216	; 0xd8
    b572:	7023      	strb	r3, [r4, #0]
    b574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b576:	2103      	movs	r1, #3
    b578:	4351      	muls	r1, r2
    b57a:	1861      	adds	r1, r4, r1
    b57c:	3191      	adds	r1, #145	; 0x91
    b57e:	780d      	ldrb	r5, [r1, #0]
    b580:	2d02      	cmp	r5, #2
    b582:	d103      	bne.n	b58c <LorawanLinkCheckConfigure+0x6c>
    b584:	0038      	movs	r0, r7
    b586:	3b01      	subs	r3, #1
    b588:	700e      	strb	r6, [r1, #0]
    b58a:	b2db      	uxtb	r3, r3
    b58c:	3201      	adds	r2, #1
    b58e:	b2d2      	uxtb	r2, r2
    b590:	e7ea      	b.n	b568 <LorawanLinkCheckConfigure+0x48>
    b592:	2302      	movs	r3, #2
    b594:	786a      	ldrb	r2, [r5, #1]
    b596:	210b      	movs	r1, #11
    b598:	4313      	orrs	r3, r2
    b59a:	706b      	strb	r3, [r5, #1]
    b59c:	2001      	movs	r0, #1
    b59e:	47b8      	blx	r7
    b5a0:	782b      	ldrb	r3, [r5, #0]
    b5a2:	07db      	lsls	r3, r3, #31
    b5a4:	d5e6      	bpl.n	b574 <LorawanLinkCheckConfigure+0x54>
    b5a6:	4b04      	ldr	r3, [pc, #16]	; (b5b8 <LorawanLinkCheckConfigure+0x98>)
    b5a8:	4798      	blx	r3
    b5aa:	e7e3      	b.n	b574 <LorawanLinkCheckConfigure+0x54>
    b5ac:	200019b0 	.word	0x200019b0
    b5b0:	00008d6d 	.word	0x00008d6d
    b5b4:	00009aa1 	.word	0x00009aa1
    b5b8:	0000b1d9 	.word	0x0000b1d9

0000b5bc <UpdateCurrentDataRate>:
    b5bc:	b510      	push	{r4, lr}
    b5be:	4b04      	ldr	r3, [pc, #16]	; (b5d0 <UpdateCurrentDataRate+0x14>)
    b5c0:	210c      	movs	r1, #12
    b5c2:	33df      	adds	r3, #223	; 0xdf
    b5c4:	7018      	strb	r0, [r3, #0]
    b5c6:	2001      	movs	r0, #1
    b5c8:	4b02      	ldr	r3, [pc, #8]	; (b5d4 <UpdateCurrentDataRate+0x18>)
    b5ca:	4798      	blx	r3
    b5cc:	bd10      	pop	{r4, pc}
    b5ce:	46c0      	nop			; (mov r8, r8)
    b5d0:	200019b0 	.word	0x200019b0
    b5d4:	00008d6d 	.word	0x00008d6d

0000b5d8 <UpdateDLSettings>:
    b5d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b5da:	466b      	mov	r3, sp
    b5dc:	1dde      	adds	r6, r3, #7
    b5de:	1d9c      	adds	r4, r3, #6
    b5e0:	71d8      	strb	r0, [r3, #7]
    b5e2:	7021      	strb	r1, [r4, #0]
    b5e4:	2017      	movs	r0, #23
    b5e6:	0031      	movs	r1, r6
    b5e8:	4d0c      	ldr	r5, [pc, #48]	; (b61c <UpdateDLSettings+0x44>)
    b5ea:	47a8      	blx	r5
    b5ec:	2808      	cmp	r0, #8
    b5ee:	d107      	bne.n	b600 <UpdateDLSettings+0x28>
    b5f0:	4b0b      	ldr	r3, [pc, #44]	; (b620 <UpdateDLSettings+0x48>)
    b5f2:	7832      	ldrb	r2, [r6, #0]
    b5f4:	336e      	adds	r3, #110	; 0x6e
    b5f6:	701a      	strb	r2, [r3, #0]
    b5f8:	2100      	movs	r1, #0
    b5fa:	3807      	subs	r0, #7
    b5fc:	4b09      	ldr	r3, [pc, #36]	; (b624 <UpdateDLSettings+0x4c>)
    b5fe:	4798      	blx	r3
    b600:	0021      	movs	r1, r4
    b602:	2018      	movs	r0, #24
    b604:	47a8      	blx	r5
    b606:	2808      	cmp	r0, #8
    b608:	d107      	bne.n	b61a <UpdateDLSettings+0x42>
    b60a:	2101      	movs	r1, #1
    b60c:	4b04      	ldr	r3, [pc, #16]	; (b620 <UpdateDLSettings+0x48>)
    b60e:	7822      	ldrb	r2, [r4, #0]
    b610:	33ee      	adds	r3, #238	; 0xee
    b612:	701a      	strb	r2, [r3, #0]
    b614:	0008      	movs	r0, r1
    b616:	4b03      	ldr	r3, [pc, #12]	; (b624 <UpdateDLSettings+0x4c>)
    b618:	4798      	blx	r3
    b61a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    b61c:	00008771 	.word	0x00008771
    b620:	200019b0 	.word	0x200019b0
    b624:	00008d6d 	.word	0x00008d6d

0000b628 <UpdateTxPower>:
    b628:	b510      	push	{r4, lr}
    b62a:	4b04      	ldr	r3, [pc, #16]	; (b63c <UpdateTxPower+0x14>)
    b62c:	210a      	movs	r1, #10
    b62e:	33e1      	adds	r3, #225	; 0xe1
    b630:	7018      	strb	r0, [r3, #0]
    b632:	2000      	movs	r0, #0
    b634:	4b02      	ldr	r3, [pc, #8]	; (b640 <UpdateTxPower+0x18>)
    b636:	4798      	blx	r3
    b638:	bd10      	pop	{r4, pc}
    b63a:	46c0      	nop			; (mov r8, r8)
    b63c:	200019b0 	.word	0x200019b0
    b640:	00008d6d 	.word	0x00008d6d

0000b644 <UpdateRetransmissionAckTimeoutState>:
    b644:	4b10      	ldr	r3, [pc, #64]	; (b688 <UpdateRetransmissionAckTimeoutState+0x44>)
    b646:	b513      	push	{r0, r1, r4, lr}
    b648:	001a      	movs	r2, r3
    b64a:	32f4      	adds	r2, #244	; 0xf4
    b64c:	7812      	ldrb	r2, [r2, #0]
    b64e:	2a01      	cmp	r2, #1
    b650:	d108      	bne.n	b664 <UpdateRetransmissionAckTimeoutState+0x20>
    b652:	0018      	movs	r0, r3
    b654:	210e      	movs	r1, #14
    b656:	307c      	adds	r0, #124	; 0x7c
    b658:	7802      	ldrb	r2, [r0, #0]
    b65a:	438a      	bics	r2, r1
    b65c:	0011      	movs	r1, r2
    b65e:	220c      	movs	r2, #12
    b660:	430a      	orrs	r2, r1
    b662:	7002      	strb	r2, [r0, #0]
    b664:	001a      	movs	r2, r3
    b666:	32d2      	adds	r2, #210	; 0xd2
    b668:	8811      	ldrh	r1, [r2, #0]
    b66a:	22e0      	movs	r2, #224	; 0xe0
    b66c:	32ff      	adds	r2, #255	; 0xff
    b66e:	5c9a      	ldrb	r2, [r3, r2]
    b670:	33e8      	adds	r3, #232	; 0xe8
    b672:	1a8a      	subs	r2, r1, r2
    b674:	21fa      	movs	r1, #250	; 0xfa
    b676:	0089      	lsls	r1, r1, #2
    b678:	4351      	muls	r1, r2
    b67a:	2200      	movs	r2, #0
    b67c:	7818      	ldrb	r0, [r3, #0]
    b67e:	4c03      	ldr	r4, [pc, #12]	; (b68c <UpdateRetransmissionAckTimeoutState+0x48>)
    b680:	9200      	str	r2, [sp, #0]
    b682:	4b03      	ldr	r3, [pc, #12]	; (b690 <UpdateRetransmissionAckTimeoutState+0x4c>)
    b684:	47a0      	blx	r4
    b686:	bd13      	pop	{r0, r1, r4, pc}
    b688:	200019b0 	.word	0x200019b0
    b68c:	00009795 	.word	0x00009795
    b690:	0000d065 	.word	0x0000d065

0000b694 <UpdateReceiveWindow2Parameters>:
    b694:	4b06      	ldr	r3, [pc, #24]	; (b6b0 <UpdateReceiveWindow2Parameters+0x1c>)
    b696:	b510      	push	{r4, lr}
    b698:	001a      	movs	r2, r3
    b69a:	336a      	adds	r3, #106	; 0x6a
    b69c:	8018      	strh	r0, [r3, #0]
    b69e:	326e      	adds	r2, #110	; 0x6e
    b6a0:	0c00      	lsrs	r0, r0, #16
    b6a2:	8058      	strh	r0, [r3, #2]
    b6a4:	7011      	strb	r1, [r2, #0]
    b6a6:	2001      	movs	r0, #1
    b6a8:	2100      	movs	r1, #0
    b6aa:	4b02      	ldr	r3, [pc, #8]	; (b6b4 <UpdateReceiveWindow2Parameters+0x20>)
    b6ac:	4798      	blx	r3
    b6ae:	bd10      	pop	{r4, pc}
    b6b0:	200019b0 	.word	0x200019b0
    b6b4:	00008d6d 	.word	0x00008d6d

0000b6b8 <ResetParametersForConfirmedTransmission>:
    b6b8:	4b0a      	ldr	r3, [pc, #40]	; (b6e4 <ResetParametersForConfirmedTransmission+0x2c>)
    b6ba:	001a      	movs	r2, r3
    b6bc:	32f4      	adds	r2, #244	; 0xf4
    b6be:	7812      	ldrb	r2, [r2, #0]
    b6c0:	2a01      	cmp	r2, #1
    b6c2:	d105      	bne.n	b6d0 <ResetParametersForConfirmedTransmission+0x18>
    b6c4:	0019      	movs	r1, r3
    b6c6:	200e      	movs	r0, #14
    b6c8:	317c      	adds	r1, #124	; 0x7c
    b6ca:	780a      	ldrb	r2, [r1, #0]
    b6cc:	4382      	bics	r2, r0
    b6ce:	700a      	strb	r2, [r1, #0]
    b6d0:	001a      	movs	r2, r3
    b6d2:	2100      	movs	r1, #0
    b6d4:	338c      	adds	r3, #140	; 0x8c
    b6d6:	32dc      	adds	r2, #220	; 0xdc
    b6d8:	7011      	strb	r1, [r2, #0]
    b6da:	781a      	ldrb	r2, [r3, #0]
    b6dc:	3101      	adds	r1, #1
    b6de:	438a      	bics	r2, r1
    b6e0:	701a      	strb	r2, [r3, #0]
    b6e2:	4770      	bx	lr
    b6e4:	200019b0 	.word	0x200019b0

0000b6e8 <ResetParametersForUnconfirmedTransmission>:
    b6e8:	4b07      	ldr	r3, [pc, #28]	; (b708 <ResetParametersForUnconfirmedTransmission+0x20>)
    b6ea:	001a      	movs	r2, r3
    b6ec:	32f4      	adds	r2, #244	; 0xf4
    b6ee:	7812      	ldrb	r2, [r2, #0]
    b6f0:	2a01      	cmp	r2, #1
    b6f2:	d105      	bne.n	b700 <ResetParametersForUnconfirmedTransmission+0x18>
    b6f4:	0019      	movs	r1, r3
    b6f6:	200e      	movs	r0, #14
    b6f8:	317c      	adds	r1, #124	; 0x7c
    b6fa:	780a      	ldrb	r2, [r1, #0]
    b6fc:	4382      	bics	r2, r0
    b6fe:	700a      	strb	r2, [r1, #0]
    b700:	2200      	movs	r2, #0
    b702:	33db      	adds	r3, #219	; 0xdb
    b704:	701a      	strb	r2, [r3, #0]
    b706:	4770      	bx	lr
    b708:	200019b0 	.word	0x200019b0

0000b70c <SetJoinFailState>:
    b70c:	b570      	push	{r4, r5, r6, lr}
    b70e:	4c15      	ldr	r4, [pc, #84]	; (b764 <SetJoinFailState+0x58>)
    b710:	2604      	movs	r6, #4
    b712:	0025      	movs	r5, r4
    b714:	358c      	adds	r5, #140	; 0x8c
    b716:	782a      	ldrb	r2, [r5, #0]
    b718:	0021      	movs	r1, r4
    b71a:	43b2      	bics	r2, r6
    b71c:	702a      	strb	r2, [r5, #0]
    b71e:	22f0      	movs	r2, #240	; 0xf0
    b720:	317c      	adds	r1, #124	; 0x7c
    b722:	780b      	ldrb	r3, [r1, #0]
    b724:	4013      	ands	r3, r2
    b726:	700b      	strb	r3, [r1, #0]
    b728:	0023      	movs	r3, r4
    b72a:	33ff      	adds	r3, #255	; 0xff
    b72c:	7c5b      	ldrb	r3, [r3, #17]
    b72e:	069b      	lsls	r3, r3, #26
    b730:	d503      	bpl.n	b73a <SetJoinFailState+0x2e>
    b732:	0023      	movs	r3, r4
    b734:	2200      	movs	r2, #0
    b736:	337b      	adds	r3, #123	; 0x7b
    b738:	701a      	strb	r2, [r3, #0]
    b73a:	490b      	ldr	r1, [pc, #44]	; (b768 <SetJoinFailState+0x5c>)
    b73c:	794a      	ldrb	r2, [r1, #5]
    b73e:	790b      	ldrb	r3, [r1, #4]
    b740:	0212      	lsls	r2, r2, #8
    b742:	431a      	orrs	r2, r3
    b744:	798b      	ldrb	r3, [r1, #6]
    b746:	041b      	lsls	r3, r3, #16
    b748:	431a      	orrs	r2, r3
    b74a:	79cb      	ldrb	r3, [r1, #7]
    b74c:	061b      	lsls	r3, r3, #24
    b74e:	4313      	orrs	r3, r2
    b750:	d000      	beq.n	b754 <SetJoinFailState+0x48>
    b752:	4798      	blx	r3
    b754:	2300      	movs	r3, #0
    b756:	34f0      	adds	r4, #240	; 0xf0
    b758:	7023      	strb	r3, [r4, #0]
    b75a:	210b      	movs	r1, #11
    b75c:	4b03      	ldr	r3, [pc, #12]	; (b76c <SetJoinFailState+0x60>)
    b75e:	2001      	movs	r0, #1
    b760:	4798      	blx	r3
    b762:	bd70      	pop	{r4, r5, r6, pc}
    b764:	200019b0 	.word	0x200019b0
    b768:	20001ca8 	.word	0x20001ca8
    b76c:	00008d6d 	.word	0x00008d6d

0000b770 <ExecuteRxParamSetupReq>:
    b770:	b5f0      	push	{r4, r5, r6, r7, lr}
    b772:	b085      	sub	sp, #20
    b774:	7805      	ldrb	r5, [r0, #0]
    b776:	0004      	movs	r4, r0
    b778:	1c41      	adds	r1, r0, #1
    b77a:	2204      	movs	r2, #4
    b77c:	4b36      	ldr	r3, [pc, #216]	; (b858 <ExecuteRxParamSetupReq+0xe8>)
    b77e:	a803      	add	r0, sp, #12
    b780:	4798      	blx	r3
    b782:	2264      	movs	r2, #100	; 0x64
    b784:	9b03      	ldr	r3, [sp, #12]
    b786:	a903      	add	r1, sp, #12
    b788:	021b      	lsls	r3, r3, #8
    b78a:	0a1b      	lsrs	r3, r3, #8
    b78c:	4353      	muls	r3, r2
    b78e:	9303      	str	r3, [sp, #12]
    b790:	1d23      	adds	r3, r4, #4
    b792:	9301      	str	r3, [sp, #4]
    b794:	072b      	lsls	r3, r5, #28
    b796:	0f1b      	lsrs	r3, r3, #28
    b798:	b2da      	uxtb	r2, r3
    b79a:	9200      	str	r2, [sp, #0]
    b79c:	aa02      	add	r2, sp, #8
    b79e:	1c96      	adds	r6, r2, #2
    b7a0:	066d      	lsls	r5, r5, #25
    b7a2:	7033      	strb	r3, [r6, #0]
    b7a4:	1cd7      	adds	r7, r2, #3
    b7a6:	0f6d      	lsrs	r5, r5, #29
    b7a8:	2001      	movs	r0, #1
    b7aa:	4b2c      	ldr	r3, [pc, #176]	; (b85c <ExecuteRxParamSetupReq+0xec>)
    b7ac:	703d      	strb	r5, [r7, #0]
    b7ae:	4798      	blx	r3
    b7b0:	4c2b      	ldr	r4, [pc, #172]	; (b860 <ExecuteRxParamSetupReq+0xf0>)
    b7b2:	2808      	cmp	r0, #8
    b7b4:	d109      	bne.n	b7ca <ExecuteRxParamSetupReq+0x5a>
    b7b6:	0023      	movs	r3, r4
    b7b8:	33d8      	adds	r3, #216	; 0xd8
    b7ba:	781a      	ldrb	r2, [r3, #0]
    b7bc:	2303      	movs	r3, #3
    b7be:	4353      	muls	r3, r2
    b7c0:	18e3      	adds	r3, r4, r3
    b7c2:	3390      	adds	r3, #144	; 0x90
    b7c4:	789a      	ldrb	r2, [r3, #2]
    b7c6:	4310      	orrs	r0, r2
    b7c8:	7098      	strb	r0, [r3, #2]
    b7ca:	0031      	movs	r1, r6
    b7cc:	200f      	movs	r0, #15
    b7ce:	4e23      	ldr	r6, [pc, #140]	; (b85c <ExecuteRxParamSetupReq+0xec>)
    b7d0:	47b0      	blx	r6
    b7d2:	2808      	cmp	r0, #8
    b7d4:	d10a      	bne.n	b7ec <ExecuteRxParamSetupReq+0x7c>
    b7d6:	0023      	movs	r3, r4
    b7d8:	33d8      	adds	r3, #216	; 0xd8
    b7da:	781a      	ldrb	r2, [r3, #0]
    b7dc:	2303      	movs	r3, #3
    b7de:	4353      	muls	r3, r2
    b7e0:	2210      	movs	r2, #16
    b7e2:	18e3      	adds	r3, r4, r3
    b7e4:	3390      	adds	r3, #144	; 0x90
    b7e6:	7899      	ldrb	r1, [r3, #2]
    b7e8:	430a      	orrs	r2, r1
    b7ea:	709a      	strb	r2, [r3, #2]
    b7ec:	0039      	movs	r1, r7
    b7ee:	2018      	movs	r0, #24
    b7f0:	47b0      	blx	r6
    b7f2:	2808      	cmp	r0, #8
    b7f4:	d10a      	bne.n	b80c <ExecuteRxParamSetupReq+0x9c>
    b7f6:	0023      	movs	r3, r4
    b7f8:	33d8      	adds	r3, #216	; 0xd8
    b7fa:	781a      	ldrb	r2, [r3, #0]
    b7fc:	2303      	movs	r3, #3
    b7fe:	4353      	muls	r3, r2
    b800:	2220      	movs	r2, #32
    b802:	18e3      	adds	r3, r4, r3
    b804:	3390      	adds	r3, #144	; 0x90
    b806:	7899      	ldrb	r1, [r3, #2]
    b808:	430a      	orrs	r2, r1
    b80a:	709a      	strb	r2, [r3, #2]
    b80c:	0023      	movs	r3, r4
    b80e:	33d8      	adds	r3, #216	; 0xd8
    b810:	781a      	ldrb	r2, [r3, #0]
    b812:	2303      	movs	r3, #3
    b814:	4353      	muls	r3, r2
    b816:	18e3      	adds	r3, r4, r3
    b818:	3390      	adds	r3, #144	; 0x90
    b81a:	789e      	ldrb	r6, [r3, #2]
    b81c:	06f3      	lsls	r3, r6, #27
    b81e:	d518      	bpl.n	b852 <ExecuteRxParamSetupReq+0xe2>
    b820:	0733      	lsls	r3, r6, #28
    b822:	d516      	bpl.n	b852 <ExecuteRxParamSetupReq+0xe2>
    b824:	06b6      	lsls	r6, r6, #26
    b826:	0ff6      	lsrs	r6, r6, #31
    b828:	2e01      	cmp	r6, #1
    b82a:	d112      	bne.n	b852 <ExecuteRxParamSetupReq+0xe2>
    b82c:	0023      	movs	r3, r4
    b82e:	33ee      	adds	r3, #238	; 0xee
    b830:	701d      	strb	r5, [r3, #0]
    b832:	0031      	movs	r1, r6
    b834:	0030      	movs	r0, r6
    b836:	4d0b      	ldr	r5, [pc, #44]	; (b864 <ExecuteRxParamSetupReq+0xf4>)
    b838:	47a8      	blx	r5
    b83a:	9900      	ldr	r1, [sp, #0]
    b83c:	9803      	ldr	r0, [sp, #12]
    b83e:	4b0a      	ldr	r3, [pc, #40]	; (b868 <ExecuteRxParamSetupReq+0xf8>)
    b840:	4798      	blx	r3
    b842:	2340      	movs	r3, #64	; 0x40
    b844:	347c      	adds	r4, #124	; 0x7c
    b846:	7862      	ldrb	r2, [r4, #1]
    b848:	210b      	movs	r1, #11
    b84a:	4313      	orrs	r3, r2
    b84c:	7063      	strb	r3, [r4, #1]
    b84e:	0030      	movs	r0, r6
    b850:	47a8      	blx	r5
    b852:	9801      	ldr	r0, [sp, #4]
    b854:	b005      	add	sp, #20
    b856:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b858:	00013e5d 	.word	0x00013e5d
    b85c:	00008771 	.word	0x00008771
    b860:	200019b0 	.word	0x200019b0
    b864:	00008d6d 	.word	0x00008d6d
    b868:	0000b695 	.word	0x0000b695

0000b86c <ExecuteDutyCycle>:
    b86c:	b570      	push	{r4, r5, r6, lr}
    b86e:	7803      	ldrb	r3, [r0, #0]
    b870:	1c46      	adds	r6, r0, #1
    b872:	2b0f      	cmp	r3, #15
    b874:	d80f      	bhi.n	b896 <ExecuteDutyCycle+0x2a>
    b876:	4c09      	ldr	r4, [pc, #36]	; (b89c <ExecuteDutyCycle+0x30>)
    b878:	210b      	movs	r1, #11
    b87a:	0022      	movs	r2, r4
    b87c:	2000      	movs	r0, #0
    b87e:	3290      	adds	r2, #144	; 0x90
    b880:	4d07      	ldr	r5, [pc, #28]	; (b8a0 <ExecuteDutyCycle+0x34>)
    b882:	7013      	strb	r3, [r2, #0]
    b884:	47a8      	blx	r5
    b886:	2320      	movs	r3, #32
    b888:	347c      	adds	r4, #124	; 0x7c
    b88a:	7862      	ldrb	r2, [r4, #1]
    b88c:	210b      	movs	r1, #11
    b88e:	4313      	orrs	r3, r2
    b890:	7063      	strb	r3, [r4, #1]
    b892:	2001      	movs	r0, #1
    b894:	47a8      	blx	r5
    b896:	0030      	movs	r0, r6
    b898:	bd70      	pop	{r4, r5, r6, pc}
    b89a:	46c0      	nop			; (mov r8, r8)
    b89c:	200019b0 	.word	0x200019b0
    b8a0:	00008d6d 	.word	0x00008d6d

0000b8a4 <ExecuteDlChannel>:
    b8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b8a6:	b089      	sub	sp, #36	; 0x24
    b8a8:	7805      	ldrb	r5, [r0, #0]
    b8aa:	ab02      	add	r3, sp, #8
    b8ac:	1c41      	adds	r1, r0, #1
    b8ae:	0007      	movs	r7, r0
    b8b0:	719d      	strb	r5, [r3, #6]
    b8b2:	1d9e      	adds	r6, r3, #6
    b8b4:	2204      	movs	r2, #4
    b8b6:	4b23      	ldr	r3, [pc, #140]	; (b944 <ExecuteDlChannel+0xa0>)
    b8b8:	a805      	add	r0, sp, #20
    b8ba:	4798      	blx	r3
    b8bc:	9b05      	ldr	r3, [sp, #20]
    b8be:	a904      	add	r1, sp, #16
    b8c0:	021c      	lsls	r4, r3, #8
    b8c2:	2364      	movs	r3, #100	; 0x64
    b8c4:	0a24      	lsrs	r4, r4, #8
    b8c6:	435c      	muls	r4, r3
    b8c8:	1d3b      	adds	r3, r7, #4
    b8ca:	9301      	str	r3, [sp, #4]
    b8cc:	2301      	movs	r3, #1
    b8ce:	2015      	movs	r0, #21
    b8d0:	704b      	strb	r3, [r1, #1]
    b8d2:	4b1d      	ldr	r3, [pc, #116]	; (b948 <ExecuteDlChannel+0xa4>)
    b8d4:	9405      	str	r4, [sp, #20]
    b8d6:	700d      	strb	r5, [r1, #0]
    b8d8:	4798      	blx	r3
    b8da:	2808      	cmp	r0, #8
    b8dc:	d12f      	bne.n	b93e <ExecuteDlChannel+0x9a>
    b8de:	ab02      	add	r3, sp, #8
    b8e0:	1ddd      	adds	r5, r3, #7
    b8e2:	2300      	movs	r3, #0
    b8e4:	702b      	strb	r3, [r5, #0]
    b8e6:	7833      	ldrb	r3, [r6, #0]
    b8e8:	af06      	add	r7, sp, #24
    b8ea:	713b      	strb	r3, [r7, #4]
    b8ec:	002a      	movs	r2, r5
    b8ee:	0031      	movs	r1, r6
    b8f0:	300e      	adds	r0, #14
    b8f2:	4b16      	ldr	r3, [pc, #88]	; (b94c <ExecuteDlChannel+0xa8>)
    b8f4:	9406      	str	r4, [sp, #24]
    b8f6:	4798      	blx	r3
    b8f8:	280a      	cmp	r0, #10
    b8fa:	d00d      	beq.n	b918 <ExecuteDlChannel+0x74>
    b8fc:	782a      	ldrb	r2, [r5, #0]
    b8fe:	2a01      	cmp	r2, #1
    b900:	d10a      	bne.n	b918 <ExecuteDlChannel+0x74>
    b902:	4b13      	ldr	r3, [pc, #76]	; (b950 <ExecuteDlChannel+0xac>)
    b904:	0019      	movs	r1, r3
    b906:	31d8      	adds	r1, #216	; 0xd8
    b908:	7808      	ldrb	r0, [r1, #0]
    b90a:	2103      	movs	r1, #3
    b90c:	4341      	muls	r1, r0
    b90e:	185b      	adds	r3, r3, r1
    b910:	3390      	adds	r3, #144	; 0x90
    b912:	78d9      	ldrb	r1, [r3, #3]
    b914:	430a      	orrs	r2, r1
    b916:	70da      	strb	r2, [r3, #3]
    b918:	0039      	movs	r1, r7
    b91a:	2034      	movs	r0, #52	; 0x34
    b91c:	4b0d      	ldr	r3, [pc, #52]	; (b954 <ExecuteDlChannel+0xb0>)
    b91e:	4798      	blx	r3
    b920:	2808      	cmp	r0, #8
    b922:	d10c      	bne.n	b93e <ExecuteDlChannel+0x9a>
    b924:	4b0a      	ldr	r3, [pc, #40]	; (b950 <ExecuteDlChannel+0xac>)
    b926:	001a      	movs	r2, r3
    b928:	32d8      	adds	r2, #216	; 0xd8
    b92a:	7811      	ldrb	r1, [r2, #0]
    b92c:	2203      	movs	r2, #3
    b92e:	434a      	muls	r2, r1
    b930:	189b      	adds	r3, r3, r2
    b932:	2280      	movs	r2, #128	; 0x80
    b934:	3390      	adds	r3, #144	; 0x90
    b936:	7899      	ldrb	r1, [r3, #2]
    b938:	4252      	negs	r2, r2
    b93a:	430a      	orrs	r2, r1
    b93c:	709a      	strb	r2, [r3, #2]
    b93e:	9801      	ldr	r0, [sp, #4]
    b940:	b009      	add	sp, #36	; 0x24
    b942:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b944:	00013e5d 	.word	0x00013e5d
    b948:	00008771 	.word	0x00008771
    b94c:	00008755 	.word	0x00008755
    b950:	200019b0 	.word	0x200019b0
    b954:	0000887d 	.word	0x0000887d

0000b958 <ExecuteTxParamSetup>:
    b958:	220f      	movs	r2, #15
    b95a:	b513      	push	{r0, r1, r4, lr}
    b95c:	7803      	ldrb	r3, [r0, #0]
    b95e:	4c0f      	ldr	r4, [pc, #60]	; (b99c <ExecuteTxParamSetup+0x44>)
    b960:	401a      	ands	r2, r3
    b962:	5ca2      	ldrb	r2, [r4, r2]
    b964:	2401      	movs	r4, #1
    b966:	a901      	add	r1, sp, #4
    b968:	700a      	strb	r2, [r1, #0]
    b96a:	111a      	asrs	r2, r3, #4
    b96c:	115b      	asrs	r3, r3, #5
    b96e:	4023      	ands	r3, r4
    b970:	40a3      	lsls	r3, r4
    b972:	4022      	ands	r2, r4
    b974:	4313      	orrs	r3, r2
    b976:	704b      	strb	r3, [r1, #1]
    b978:	1904      	adds	r4, r0, r4
    b97a:	4b09      	ldr	r3, [pc, #36]	; (b9a0 <ExecuteTxParamSetup+0x48>)
    b97c:	2035      	movs	r0, #53	; 0x35
    b97e:	4798      	blx	r3
    b980:	2808      	cmp	r0, #8
    b982:	d009      	beq.n	b998 <ExecuteTxParamSetup+0x40>
    b984:	4b07      	ldr	r3, [pc, #28]	; (b9a4 <ExecuteTxParamSetup+0x4c>)
    b986:	001a      	movs	r2, r3
    b988:	32d8      	adds	r2, #216	; 0xd8
    b98a:	7811      	ldrb	r1, [r2, #0]
    b98c:	2203      	movs	r2, #3
    b98e:	434a      	muls	r2, r1
    b990:	189b      	adds	r3, r3, r2
    b992:	22ff      	movs	r2, #255	; 0xff
    b994:	3391      	adds	r3, #145	; 0x91
    b996:	701a      	strb	r2, [r3, #0]
    b998:	0020      	movs	r0, r4
    b99a:	bd16      	pop	{r1, r2, r4, pc}
    b99c:	000196f2 	.word	0x000196f2
    b9a0:	0000887d 	.word	0x0000887d
    b9a4:	200019b0 	.word	0x200019b0

0000b9a8 <ExecuteLinkAdr>:
    b9a8:	220f      	movs	r2, #15
    b9aa:	b5f0      	push	{r4, r5, r6, r7, lr}
    b9ac:	0005      	movs	r5, r0
    b9ae:	7803      	ldrb	r3, [r0, #0]
    b9b0:	b089      	sub	sp, #36	; 0x24
    b9b2:	401a      	ands	r2, r3
    b9b4:	a905      	add	r1, sp, #20
    b9b6:	700a      	strb	r2, [r1, #0]
    b9b8:	24d8      	movs	r4, #216	; 0xd8
    b9ba:	aa04      	add	r2, sp, #16
    b9bc:	1d96      	adds	r6, r2, #6
    b9be:	091b      	lsrs	r3, r3, #4
    b9c0:	7153      	strb	r3, [r2, #5]
    b9c2:	1c41      	adds	r1, r0, #1
    b9c4:	2202      	movs	r2, #2
    b9c6:	0030      	movs	r0, r6
    b9c8:	4b38      	ldr	r3, [pc, #224]	; (baac <ExecuteLinkAdr+0x104>)
    b9ca:	4798      	blx	r3
    b9cc:	2201      	movs	r2, #1
    b9ce:	1d2b      	adds	r3, r5, #4
    b9d0:	9303      	str	r3, [sp, #12]
    b9d2:	78eb      	ldrb	r3, [r5, #3]
    b9d4:	4f36      	ldr	r7, [pc, #216]	; (bab0 <ExecuteLinkAdr+0x108>)
    b9d6:	065b      	lsls	r3, r3, #25
    b9d8:	0f5b      	lsrs	r3, r3, #29
    b9da:	34ff      	adds	r4, #255	; 0xff
    b9dc:	9300      	str	r3, [sp, #0]
    b9de:	5d3b      	ldrb	r3, [r7, r4]
    b9e0:	a906      	add	r1, sp, #24
    b9e2:	4393      	bics	r3, r2
    b9e4:	1892      	adds	r2, r2, r2
    b9e6:	4393      	bics	r3, r2
    b9e8:	3202      	adds	r2, #2
    b9ea:	4393      	bics	r3, r2
    b9ec:	553b      	strb	r3, [r7, r4]
    b9ee:	466b      	mov	r3, sp
    b9f0:	781b      	ldrb	r3, [r3, #0]
    b9f2:	8836      	ldrh	r6, [r6, #0]
    b9f4:	700b      	strb	r3, [r1, #0]
    b9f6:	2038      	movs	r0, #56	; 0x38
    b9f8:	4b2e      	ldr	r3, [pc, #184]	; (bab4 <ExecuteLinkAdr+0x10c>)
    b9fa:	804e      	strh	r6, [r1, #2]
    b9fc:	4798      	blx	r3
    b9fe:	2808      	cmp	r0, #8
    ba00:	d116      	bne.n	ba30 <ExecuteLinkAdr+0x88>
    ba02:	466b      	mov	r3, sp
    ba04:	781b      	ldrb	r3, [r3, #0]
    ba06:	a907      	add	r1, sp, #28
    ba08:	708b      	strb	r3, [r1, #2]
    ba0a:	3014      	adds	r0, #20
    ba0c:	4b2a      	ldr	r3, [pc, #168]	; (bab8 <ExecuteLinkAdr+0x110>)
    ba0e:	800e      	strh	r6, [r1, #0]
    ba10:	4798      	blx	r3
    ba12:	2201      	movs	r2, #1
    ba14:	5d3b      	ldrb	r3, [r7, r4]
    ba16:	2010      	movs	r0, #16
    ba18:	4313      	orrs	r3, r2
    ba1a:	553b      	strb	r3, [r7, r4]
    ba1c:	ab04      	add	r3, sp, #16
    ba1e:	1d59      	adds	r1, r3, #5
    ba20:	4b24      	ldr	r3, [pc, #144]	; (bab4 <ExecuteLinkAdr+0x10c>)
    ba22:	4798      	blx	r3
    ba24:	2808      	cmp	r0, #8
    ba26:	d103      	bne.n	ba30 <ExecuteLinkAdr+0x88>
    ba28:	2202      	movs	r2, #2
    ba2a:	5d3b      	ldrb	r3, [r7, r4]
    ba2c:	4313      	orrs	r3, r2
    ba2e:	553b      	strb	r3, [r7, r4]
    ba30:	af05      	add	r7, sp, #20
    ba32:	4b20      	ldr	r3, [pc, #128]	; (bab4 <ExecuteLinkAdr+0x10c>)
    ba34:	0039      	movs	r1, r7
    ba36:	201d      	movs	r0, #29
    ba38:	4798      	blx	r3
    ba3a:	4b1d      	ldr	r3, [pc, #116]	; (bab0 <ExecuteLinkAdr+0x108>)
    ba3c:	2808      	cmp	r0, #8
    ba3e:	d103      	bne.n	ba48 <ExecuteLinkAdr+0xa0>
    ba40:	2204      	movs	r2, #4
    ba42:	5d19      	ldrb	r1, [r3, r4]
    ba44:	430a      	orrs	r2, r1
    ba46:	551a      	strb	r2, [r3, r4]
    ba48:	2207      	movs	r2, #7
    ba4a:	5d19      	ldrb	r1, [r3, r4]
    ba4c:	4011      	ands	r1, r2
    ba4e:	4291      	cmp	r1, r2
    ba50:	d122      	bne.n	ba98 <ExecuteLinkAdr+0xf0>
    ba52:	22dc      	movs	r2, #220	; 0xdc
    ba54:	32ff      	adds	r2, #255	; 0xff
    ba56:	549e      	strb	r6, [r3, r2]
    ba58:	001a      	movs	r2, r3
    ba5a:	32dc      	adds	r2, #220	; 0xdc
    ba5c:	32ff      	adds	r2, #255	; 0xff
    ba5e:	0a36      	lsrs	r6, r6, #8
    ba60:	7056      	strb	r6, [r2, #1]
    ba62:	aa04      	add	r2, sp, #16
    ba64:	7950      	ldrb	r0, [r2, #5]
    ba66:	22ec      	movs	r2, #236	; 0xec
    ba68:	0052      	lsls	r2, r2, #1
    ba6a:	5498      	strb	r0, [r3, r2]
    ba6c:	20de      	movs	r0, #222	; 0xde
    ba6e:	2470      	movs	r4, #112	; 0x70
    ba70:	78ea      	ldrb	r2, [r5, #3]
    ba72:	30ff      	adds	r0, #255	; 0xff
    ba74:	0912      	lsrs	r2, r2, #4
    ba76:	400a      	ands	r2, r1
    ba78:	5c19      	ldrb	r1, [r3, r0]
    ba7a:	0112      	lsls	r2, r2, #4
    ba7c:	43a1      	bics	r1, r4
    ba7e:	430a      	orrs	r2, r1
    ba80:	541a      	strb	r2, [r3, r0]
    ba82:	78e9      	ldrb	r1, [r5, #3]
    ba84:	3c61      	subs	r4, #97	; 0x61
    ba86:	b2d2      	uxtb	r2, r2
    ba88:	4021      	ands	r1, r4
    ba8a:	43a2      	bics	r2, r4
    ba8c:	430a      	orrs	r2, r1
    ba8e:	541a      	strb	r2, [r3, r0]
    ba90:	22da      	movs	r2, #218	; 0xda
    ba92:	7839      	ldrb	r1, [r7, #0]
    ba94:	32ff      	adds	r2, #255	; 0xff
    ba96:	5499      	strb	r1, [r3, r2]
    ba98:	22ed      	movs	r2, #237	; 0xed
    ba9a:	4905      	ldr	r1, [pc, #20]	; (bab0 <ExecuteLinkAdr+0x108>)
    ba9c:	0052      	lsls	r2, r2, #1
    ba9e:	5c8b      	ldrb	r3, [r1, r2]
    baa0:	9803      	ldr	r0, [sp, #12]
    baa2:	3301      	adds	r3, #1
    baa4:	548b      	strb	r3, [r1, r2]
    baa6:	b009      	add	sp, #36	; 0x24
    baa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    baaa:	46c0      	nop			; (mov r8, r8)
    baac:	00013e5d 	.word	0x00013e5d
    bab0:	200019b0 	.word	0x200019b0
    bab4:	00008771 	.word	0x00008771
    bab8:	0000887d 	.word	0x0000887d

0000babc <PrepareJoinRequestFrame>:
    babc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    babe:	2210      	movs	r2, #16
    bac0:	4d23      	ldr	r5, [pc, #140]	; (bb50 <PrepareJoinRequestFrame+0x94>)
    bac2:	4b24      	ldr	r3, [pc, #144]	; (bb54 <PrepareJoinRequestFrame+0x98>)
    bac4:	32ff      	adds	r2, #255	; 0xff
    bac6:	2100      	movs	r1, #0
    bac8:	0028      	movs	r0, r5
    baca:	4798      	blx	r3
    bacc:	2300      	movs	r3, #0
    bace:	702b      	strb	r3, [r5, #0]
    bad0:	23e2      	movs	r3, #226	; 0xe2
    bad2:	4c21      	ldr	r4, [pc, #132]	; (bb58 <PrepareJoinRequestFrame+0x9c>)
    bad4:	33ff      	adds	r3, #255	; 0xff
    bad6:	5ce3      	ldrb	r3, [r4, r3]
    bad8:	2b00      	cmp	r3, #0
    bada:	d006      	beq.n	baea <PrepareJoinRequestFrame+0x2e>
    badc:	491f      	ldr	r1, [pc, #124]	; (bb5c <PrepareJoinRequestFrame+0xa0>)
    bade:	2006      	movs	r0, #6
    bae0:	4e1f      	ldr	r6, [pc, #124]	; (bb60 <PrepareJoinRequestFrame+0xa4>)
    bae2:	47b0      	blx	r6
    bae4:	491f      	ldr	r1, [pc, #124]	; (bb64 <PrepareJoinRequestFrame+0xa8>)
    bae6:	2007      	movs	r0, #7
    bae8:	47b0      	blx	r6
    baea:	2300      	movs	r3, #0
    baec:	205c      	movs	r0, #92	; 0x5c
    baee:	1ac1      	subs	r1, r0, r3
    baf0:	5c61      	ldrb	r1, [r4, r1]
    baf2:	18ea      	adds	r2, r5, r3
    baf4:	3301      	adds	r3, #1
    baf6:	7051      	strb	r1, [r2, #1]
    baf8:	2b08      	cmp	r3, #8
    bafa:	d1f8      	bne.n	baee <PrepareJoinRequestFrame+0x32>
    bafc:	2300      	movs	r3, #0
    bafe:	2064      	movs	r0, #100	; 0x64
    bb00:	1ac1      	subs	r1, r0, r3
    bb02:	5c61      	ldrb	r1, [r4, r1]
    bb04:	18ea      	adds	r2, r5, r3
    bb06:	3301      	adds	r3, #1
    bb08:	7251      	strb	r1, [r2, #9]
    bb0a:	2b08      	cmp	r3, #8
    bb0c:	d1f8      	bne.n	bb00 <PrepareJoinRequestFrame+0x44>
    bb0e:	4b16      	ldr	r3, [pc, #88]	; (bb68 <PrepareJoinRequestFrame+0xac>)
    bb10:	4798      	blx	r3
    bb12:	4b16      	ldr	r3, [pc, #88]	; (bb6c <PrepareJoinRequestFrame+0xb0>)
    bb14:	4916      	ldr	r1, [pc, #88]	; (bb70 <PrepareJoinRequestFrame+0xb4>)
    bb16:	4798      	blx	r3
    bb18:	34c4      	adds	r4, #196	; 0xc4
    bb1a:	8021      	strh	r1, [r4, #0]
    bb1c:	2202      	movs	r2, #2
    bb1e:	0021      	movs	r1, r4
    bb20:	4814      	ldr	r0, [pc, #80]	; (bb74 <PrepareJoinRequestFrame+0xb8>)
    bb22:	4c15      	ldr	r4, [pc, #84]	; (bb78 <PrepareJoinRequestFrame+0xbc>)
    bb24:	47a0      	blx	r4
    bb26:	2313      	movs	r3, #19
    bb28:	4e14      	ldr	r6, [pc, #80]	; (bb7c <PrepareJoinRequestFrame+0xc0>)
    bb2a:	9300      	str	r3, [sp, #0]
    bb2c:	0032      	movs	r2, r6
    bb2e:	002b      	movs	r3, r5
    bb30:	2100      	movs	r1, #0
    bb32:	4d13      	ldr	r5, [pc, #76]	; (bb80 <PrepareJoinRequestFrame+0xc4>)
    bb34:	4813      	ldr	r0, [pc, #76]	; (bb84 <PrepareJoinRequestFrame+0xc8>)
    bb36:	47a8      	blx	r5
    bb38:	0031      	movs	r1, r6
    bb3a:	2204      	movs	r2, #4
    bb3c:	a803      	add	r0, sp, #12
    bb3e:	47a0      	blx	r4
    bb40:	2204      	movs	r2, #4
    bb42:	a903      	add	r1, sp, #12
    bb44:	4810      	ldr	r0, [pc, #64]	; (bb88 <PrepareJoinRequestFrame+0xcc>)
    bb46:	47a0      	blx	r4
    bb48:	2017      	movs	r0, #23
    bb4a:	b004      	add	sp, #16
    bb4c:	bd70      	pop	{r4, r5, r6, pc}
    bb4e:	46c0      	nop			; (mov r8, r8)
    bb50:	20001b95 	.word	0x20001b95
    bb54:	00013ee1 	.word	0x00013ee1
    bb58:	200019b0 	.word	0x200019b0
    bb5c:	20001a05 	.word	0x20001a05
    bb60:	00008a75 	.word	0x00008a75
    bb64:	20001a0d 	.word	0x20001a0d
    bb68:	00014061 	.word	0x00014061
    bb6c:	000110ed 	.word	0x000110ed
    bb70:	0000ffff 	.word	0x0000ffff
    bb74:	20001ba6 	.word	0x20001ba6
    bb78:	00013e5d 	.word	0x00013e5d
    bb7c:	20000fd4 	.word	0x20000fd4
    bb80:	00008a79 	.word	0x00008a79
    bb84:	200019f5 	.word	0x200019f5
    bb88:	20001ba8 	.word	0x20001ba8

0000bb8c <ConfigureRadioRx>:
    bb8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb8e:	b087      	sub	sp, #28
    bb90:	466b      	mov	r3, sp
    bb92:	2600      	movs	r6, #0
    bb94:	1ddc      	adds	r4, r3, #7
    bb96:	71d8      	strb	r0, [r3, #7]
    bb98:	729e      	strb	r6, [r3, #10]
    bb9a:	466a      	mov	r2, sp
    bb9c:	2301      	movs	r3, #1
    bb9e:	72d3      	strb	r3, [r2, #11]
    bba0:	2215      	movs	r2, #21
    bba2:	ad03      	add	r5, sp, #12
    bba4:	4f11      	ldr	r7, [pc, #68]	; (bbec <ConfigureRadioRx+0x60>)
    bba6:	9100      	str	r1, [sp, #0]
    bba8:	446a      	add	r2, sp
    bbaa:	0021      	movs	r1, r4
    bbac:	2023      	movs	r0, #35	; 0x23
    bbae:	80ae      	strh	r6, [r5, #4]
    bbb0:	47b8      	blx	r7
    bbb2:	2216      	movs	r2, #22
    bbb4:	0021      	movs	r1, r4
    bbb6:	446a      	add	r2, sp
    bbb8:	2024      	movs	r0, #36	; 0x24
    bbba:	47b8      	blx	r7
    bbbc:	2217      	movs	r2, #23
    bbbe:	0021      	movs	r1, r4
    bbc0:	446a      	add	r2, sp
    bbc2:	2025      	movs	r0, #37	; 0x25
    bbc4:	47b8      	blx	r7
    bbc6:	9b00      	ldr	r3, [sp, #0]
    bbc8:	0028      	movs	r0, r5
    bbca:	9303      	str	r3, [sp, #12]
    bbcc:	4b08      	ldr	r3, [pc, #32]	; (bbf0 <ConfigureRadioRx+0x64>)
    bbce:	80ae      	strh	r6, [r5, #4]
    bbd0:	4798      	blx	r3
    bbd2:	230a      	movs	r3, #10
    bbd4:	446b      	add	r3, sp
    bbd6:	0019      	movs	r1, r3
    bbd8:	4c06      	ldr	r4, [pc, #24]	; (bbf4 <ConfigureRadioRx+0x68>)
    bbda:	2014      	movs	r0, #20
    bbdc:	47a0      	blx	r4
    bbde:	230b      	movs	r3, #11
    bbe0:	446b      	add	r3, sp
    bbe2:	0019      	movs	r1, r3
    bbe4:	2006      	movs	r0, #6
    bbe6:	47a0      	blx	r4
    bbe8:	b007      	add	sp, #28
    bbea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bbec:	00008755 	.word	0x00008755
    bbf0:	0000b145 	.word	0x0000b145
    bbf4:	0000f3f1 	.word	0x0000f3f1

0000bbf8 <LorawanReceiveWindow1Callback>:
    bbf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bbfa:	4c18      	ldr	r4, [pc, #96]	; (bc5c <LorawanReceiveWindow1Callback+0x64>)
    bbfc:	0023      	movs	r3, r4
    bbfe:	337c      	adds	r3, #124	; 0x7c
    bc00:	781b      	ldrb	r3, [r3, #0]
    bc02:	b25a      	sxtb	r2, r3
    bc04:	2a00      	cmp	r2, #0
    bc06:	db28      	blt.n	bc5a <LorawanReceiveWindow1Callback+0x62>
    bc08:	0022      	movs	r2, r4
    bc0a:	32f4      	adds	r2, #244	; 0xf4
    bc0c:	7812      	ldrb	r2, [r2, #0]
    bc0e:	2a04      	cmp	r2, #4
    bc10:	d103      	bne.n	bc1a <LorawanReceiveWindow1Callback+0x22>
    bc12:	07db      	lsls	r3, r3, #31
    bc14:	d501      	bpl.n	bc1a <LorawanReceiveWindow1Callback+0x22>
    bc16:	4b12      	ldr	r3, [pc, #72]	; (bc60 <LorawanReceiveWindow1Callback+0x68>)
    bc18:	4798      	blx	r3
    bc1a:	0021      	movs	r1, r4
    bc1c:	220e      	movs	r2, #14
    bc1e:	317c      	adds	r1, #124	; 0x7c
    bc20:	780b      	ldrb	r3, [r1, #0]
    bc22:	ad01      	add	r5, sp, #4
    bc24:	4393      	bics	r3, r2
    bc26:	001a      	movs	r2, r3
    bc28:	2306      	movs	r3, #6
    bc2a:	4313      	orrs	r3, r2
    bc2c:	0022      	movs	r2, r4
    bc2e:	700b      	strb	r3, [r1, #0]
    bc30:	3268      	adds	r2, #104	; 0x68
    bc32:	6e63      	ldr	r3, [r4, #100]	; 0x64
    bc34:	7811      	ldrb	r1, [r2, #0]
    bc36:	0a1b      	lsrs	r3, r3, #8
    bc38:	3469      	adds	r4, #105	; 0x69
    bc3a:	0609      	lsls	r1, r1, #24
    bc3c:	4319      	orrs	r1, r3
    bc3e:	7820      	ldrb	r0, [r4, #0]
    bc40:	4b08      	ldr	r3, [pc, #32]	; (bc64 <LorawanReceiveWindow1Callback+0x6c>)
    bc42:	4798      	blx	r3
    bc44:	2300      	movs	r3, #0
    bc46:	702b      	strb	r3, [r5, #0]
    bc48:	466b      	mov	r3, sp
    bc4a:	0021      	movs	r1, r4
    bc4c:	1d9a      	adds	r2, r3, #6
    bc4e:	2003      	movs	r0, #3
    bc50:	4b05      	ldr	r3, [pc, #20]	; (bc68 <LorawanReceiveWindow1Callback+0x70>)
    bc52:	4798      	blx	r3
    bc54:	0028      	movs	r0, r5
    bc56:	4b05      	ldr	r3, [pc, #20]	; (bc6c <LorawanReceiveWindow1Callback+0x74>)
    bc58:	4798      	blx	r3
    bc5a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    bc5c:	200019b0 	.word	0x200019b0
    bc60:	0000eb25 	.word	0x0000eb25
    bc64:	0000bb8d 	.word	0x0000bb8d
    bc68:	00008755 	.word	0x00008755
    bc6c:	00010615 	.word	0x00010615

0000bc70 <ConfigureRadioTx>:
    bc70:	b5f0      	push	{r4, r5, r6, r7, lr}
    bc72:	2517      	movs	r5, #23
    bc74:	2300      	movs	r3, #0
    bc76:	2616      	movs	r6, #22
    bc78:	2701      	movs	r7, #1
    bc7a:	b087      	sub	sp, #28
    bc7c:	ac01      	add	r4, sp, #4
    bc7e:	446d      	add	r5, sp
    bc80:	9001      	str	r0, [sp, #4]
    bc82:	702b      	strb	r3, [r5, #0]
    bc84:	0020      	movs	r0, r4
    bc86:	4b10      	ldr	r3, [pc, #64]	; (bcc8 <ConfigureRadioTx+0x58>)
    bc88:	446e      	add	r6, sp
    bc8a:	9102      	str	r1, [sp, #8]
    bc8c:	9203      	str	r2, [sp, #12]
    bc8e:	7037      	strb	r7, [r6, #0]
    bc90:	4798      	blx	r3
    bc92:	79e3      	ldrb	r3, [r4, #7]
    bc94:	4c0d      	ldr	r4, [pc, #52]	; (bccc <ConfigureRadioTx+0x5c>)
    bc96:	2b00      	cmp	r3, #0
    bc98:	d00b      	beq.n	bcb2 <ConfigureRadioTx+0x42>
    bc9a:	23eb      	movs	r3, #235	; 0xeb
    bc9c:	4a0c      	ldr	r2, [pc, #48]	; (bcd0 <ConfigureRadioTx+0x60>)
    bc9e:	005b      	lsls	r3, r3, #1
    bca0:	54d7      	strb	r7, [r2, r3]
    bca2:	490c      	ldr	r1, [pc, #48]	; (bcd4 <ConfigureRadioTx+0x64>)
    bca4:	200b      	movs	r0, #11
    bca6:	4b0c      	ldr	r3, [pc, #48]	; (bcd8 <ConfigureRadioTx+0x68>)
    bca8:	4798      	blx	r3
    bcaa:	210a      	movs	r1, #10
    bcac:	200b      	movs	r0, #11
    bcae:	4469      	add	r1, sp
    bcb0:	47a0      	blx	r4
    bcb2:	a903      	add	r1, sp, #12
    bcb4:	2004      	movs	r0, #4
    bcb6:	47a0      	blx	r4
    bcb8:	0031      	movs	r1, r6
    bcba:	2014      	movs	r0, #20
    bcbc:	47a0      	blx	r4
    bcbe:	0029      	movs	r1, r5
    bcc0:	2006      	movs	r0, #6
    bcc2:	47a0      	blx	r4
    bcc4:	b007      	add	sp, #28
    bcc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bcc8:	0000b145 	.word	0x0000b145
    bccc:	0000f3f1 	.word	0x0000f3f1
    bcd0:	200019b0 	.word	0x200019b0
    bcd4:	20001b85 	.word	0x20001b85
    bcd8:	0000f301 	.word	0x0000f301

0000bcdc <LorawanGetChAndInitiateRadioTransmit>:
    bcdc:	2301      	movs	r3, #1
    bcde:	b530      	push	{r4, r5, lr}
    bce0:	4c46      	ldr	r4, [pc, #280]	; (bdfc <LorawanGetChAndInitiateRadioTransmit+0x120>)
    bce2:	b089      	sub	sp, #36	; 0x24
    bce4:	a902      	add	r1, sp, #8
    bce6:	700b      	strb	r3, [r1, #0]
    bce8:	0023      	movs	r3, r4
    bcea:	33e1      	adds	r3, #225	; 0xe1
    bcec:	781b      	ldrb	r3, [r3, #0]
    bcee:	704b      	strb	r3, [r1, #1]
    bcf0:	0023      	movs	r3, r4
    bcf2:	33df      	adds	r3, #223	; 0xdf
    bcf4:	781b      	ldrb	r3, [r3, #0]
    bcf6:	708b      	strb	r3, [r1, #2]
    bcf8:	0023      	movs	r3, r4
    bcfa:	33f4      	adds	r3, #244	; 0xf4
    bcfc:	781b      	ldrb	r3, [r3, #0]
    bcfe:	2b01      	cmp	r3, #1
    bd00:	d108      	bne.n	bd14 <LorawanGetChAndInitiateRadioTransmit+0x38>
    bd02:	0020      	movs	r0, r4
    bd04:	220e      	movs	r2, #14
    bd06:	307c      	adds	r0, #124	; 0x7c
    bd08:	7803      	ldrb	r3, [r0, #0]
    bd0a:	4393      	bics	r3, r2
    bd0c:	001a      	movs	r2, r3
    bd0e:	230c      	movs	r3, #12
    bd10:	4313      	orrs	r3, r2
    bd12:	7003      	strb	r3, [r0, #0]
    bd14:	aa05      	add	r2, sp, #20
    bd16:	202f      	movs	r0, #47	; 0x2f
    bd18:	4d39      	ldr	r5, [pc, #228]	; (be00 <LorawanGetChAndInitiateRadioTransmit+0x124>)
    bd1a:	47a8      	blx	r5
    bd1c:	0023      	movs	r3, r4
    bd1e:	2808      	cmp	r0, #8
    bd20:	d132      	bne.n	bd88 <LorawanGetChAndInitiateRadioTransmit+0xac>
    bd22:	33f4      	adds	r3, #244	; 0xf4
    bd24:	781b      	ldrb	r3, [r3, #0]
    bd26:	ad03      	add	r5, sp, #12
    bd28:	2b04      	cmp	r3, #4
    bd2a:	d104      	bne.n	bd36 <LorawanGetChAndInitiateRadioTransmit+0x5a>
    bd2c:	3b03      	subs	r3, #3
    bd2e:	702b      	strb	r3, [r5, #0]
    bd30:	0028      	movs	r0, r5
    bd32:	4b34      	ldr	r3, [pc, #208]	; (be04 <LorawanGetChAndInitiateRadioTransmit+0x128>)
    bd34:	4798      	blx	r3
    bd36:	9805      	ldr	r0, [sp, #20]
    bd38:	4b33      	ldr	r3, [pc, #204]	; (be08 <LorawanGetChAndInitiateRadioTransmit+0x12c>)
    bd3a:	9906      	ldr	r1, [sp, #24]
    bd3c:	9a07      	ldr	r2, [sp, #28]
    bd3e:	4798      	blx	r3
    bd40:	0023      	movs	r3, r4
    bd42:	33c6      	adds	r3, #198	; 0xc6
    bd44:	881b      	ldrh	r3, [r3, #0]
    bd46:	0028      	movs	r0, r5
    bd48:	702b      	strb	r3, [r5, #0]
    bd4a:	4b30      	ldr	r3, [pc, #192]	; (be0c <LorawanGetChAndInitiateRadioTransmit+0x130>)
    bd4c:	606b      	str	r3, [r5, #4]
    bd4e:	4b30      	ldr	r3, [pc, #192]	; (be10 <LorawanGetChAndInitiateRadioTransmit+0x134>)
    bd50:	4798      	blx	r3
    bd52:	2800      	cmp	r0, #0
    bd54:	d109      	bne.n	bd6a <LorawanGetChAndInitiateRadioTransmit+0x8e>
    bd56:	220e      	movs	r2, #14
    bd58:	347c      	adds	r4, #124	; 0x7c
    bd5a:	7823      	ldrb	r3, [r4, #0]
    bd5c:	4393      	bics	r3, r2
    bd5e:	001a      	movs	r2, r3
    bd60:	2302      	movs	r3, #2
    bd62:	4313      	orrs	r3, r2
    bd64:	7023      	strb	r3, [r4, #0]
    bd66:	b009      	add	sp, #36	; 0x24
    bd68:	bd30      	pop	{r4, r5, pc}
    bd6a:	23e0      	movs	r3, #224	; 0xe0
    bd6c:	2200      	movs	r2, #0
    bd6e:	33ff      	adds	r3, #255	; 0xff
    bd70:	5ce3      	ldrb	r3, [r4, r3]
    bd72:	4928      	ldr	r1, [pc, #160]	; (be14 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    bd74:	34f3      	adds	r4, #243	; 0xf3
    bd76:	4359      	muls	r1, r3
    bd78:	4b27      	ldr	r3, [pc, #156]	; (be18 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    bd7a:	7820      	ldrb	r0, [r4, #0]
    bd7c:	18c9      	adds	r1, r1, r3
    bd7e:	4b27      	ldr	r3, [pc, #156]	; (be1c <LorawanGetChAndInitiateRadioTransmit+0x140>)
    bd80:	9200      	str	r2, [sp, #0]
    bd82:	4c27      	ldr	r4, [pc, #156]	; (be20 <LorawanGetChAndInitiateRadioTransmit+0x144>)
    bd84:	47a0      	blx	r4
    bd86:	e7ee      	b.n	bd66 <LorawanGetChAndInitiateRadioTransmit+0x8a>
    bd88:	33ff      	adds	r3, #255	; 0xff
    bd8a:	7c5b      	ldrb	r3, [r3, #17]
    bd8c:	079a      	lsls	r2, r3, #30
    bd8e:	d516      	bpl.n	bdbe <LorawanGetChAndInitiateRadioTransmit+0xe2>
    bd90:	aa03      	add	r2, sp, #12
    bd92:	4924      	ldr	r1, [pc, #144]	; (be24 <LorawanGetChAndInitiateRadioTransmit+0x148>)
    bd94:	2026      	movs	r0, #38	; 0x26
    bd96:	47a8      	blx	r5
    bd98:	9b03      	ldr	r3, [sp, #12]
    bd9a:	1c5a      	adds	r2, r3, #1
    bd9c:	d001      	beq.n	bda2 <LorawanGetChAndInitiateRadioTransmit+0xc6>
    bd9e:	3314      	adds	r3, #20
    bda0:	9303      	str	r3, [sp, #12]
    bda2:	23e0      	movs	r3, #224	; 0xe0
    bda4:	21fa      	movs	r1, #250	; 0xfa
    bda6:	33ff      	adds	r3, #255	; 0xff
    bda8:	5ce3      	ldrb	r3, [r4, r3]
    bdaa:	9a03      	ldr	r2, [sp, #12]
    bdac:	0089      	lsls	r1, r1, #2
    bdae:	1ad3      	subs	r3, r2, r3
    bdb0:	2200      	movs	r2, #0
    bdb2:	4359      	muls	r1, r3
    bdb4:	34e9      	adds	r4, #233	; 0xe9
    bdb6:	7820      	ldrb	r0, [r4, #0]
    bdb8:	9200      	str	r2, [sp, #0]
    bdba:	4b1b      	ldr	r3, [pc, #108]	; (be28 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
    bdbc:	e7e1      	b.n	bd82 <LorawanGetChAndInitiateRadioTransmit+0xa6>
    bdbe:	075b      	lsls	r3, r3, #29
    bdc0:	d508      	bpl.n	bdd4 <LorawanGetChAndInitiateRadioTransmit+0xf8>
    bdc2:	aa03      	add	r2, sp, #12
    bdc4:	4917      	ldr	r1, [pc, #92]	; (be24 <LorawanGetChAndInitiateRadioTransmit+0x148>)
    bdc6:	2033      	movs	r0, #51	; 0x33
    bdc8:	47a8      	blx	r5
    bdca:	9b03      	ldr	r3, [sp, #12]
    bdcc:	1c5a      	adds	r2, r3, #1
    bdce:	d0e8      	beq.n	bda2 <LorawanGetChAndInitiateRadioTransmit+0xc6>
    bdd0:	3301      	adds	r3, #1
    bdd2:	e7e5      	b.n	bda0 <LorawanGetChAndInitiateRadioTransmit+0xc4>
    bdd4:	0023      	movs	r3, r4
    bdd6:	2201      	movs	r2, #1
    bdd8:	338c      	adds	r3, #140	; 0x8c
    bdda:	781b      	ldrb	r3, [r3, #0]
    bddc:	401a      	ands	r2, r3
    bdde:	d109      	bne.n	bdf4 <LorawanGetChAndInitiateRadioTransmit+0x118>
    bde0:	23e0      	movs	r3, #224	; 0xe0
    bde2:	33ff      	adds	r3, #255	; 0xff
    bde4:	5ce3      	ldrb	r3, [r4, r3]
    bde6:	490b      	ldr	r1, [pc, #44]	; (be14 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    bde8:	34e9      	adds	r4, #233	; 0xe9
    bdea:	4359      	muls	r1, r3
    bdec:	4b0a      	ldr	r3, [pc, #40]	; (be18 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    bdee:	7820      	ldrb	r0, [r4, #0]
    bdf0:	18c9      	adds	r1, r1, r3
    bdf2:	e7e1      	b.n	bdb8 <LorawanGetChAndInitiateRadioTransmit+0xdc>
    bdf4:	4b0d      	ldr	r3, [pc, #52]	; (be2c <LorawanGetChAndInitiateRadioTransmit+0x150>)
    bdf6:	4798      	blx	r3
    bdf8:	e7b5      	b.n	bd66 <LorawanGetChAndInitiateRadioTransmit+0x8a>
    bdfa:	46c0      	nop			; (mov r8, r8)
    bdfc:	200019b0 	.word	0x200019b0
    be00:	00008755 	.word	0x00008755
    be04:	00010615 	.word	0x00010615
    be08:	0000bc71 	.word	0x0000bc71
    be0c:	20001ba5 	.word	0x20001ba5
    be10:	0000fd41 	.word	0x0000fd41
    be14:	fffffc18 	.word	0xfffffc18
    be18:	001e8480 	.word	0x001e8480
    be1c:	0000be31 	.word	0x0000be31
    be20:	00009795 	.word	0x00009795
    be24:	20001a8f 	.word	0x20001a8f
    be28:	0000bee5 	.word	0x0000bee5
    be2c:	0000b645 	.word	0x0000b645

0000be30 <TransmissionErrorCallback>:
    be30:	b530      	push	{r4, r5, lr}
    be32:	4c22      	ldr	r4, [pc, #136]	; (bebc <TransmissionErrorCallback+0x8c>)
    be34:	2501      	movs	r5, #1
    be36:	0023      	movs	r3, r4
    be38:	b08b      	sub	sp, #44	; 0x2c
    be3a:	a903      	add	r1, sp, #12
    be3c:	700d      	strb	r5, [r1, #0]
    be3e:	33e1      	adds	r3, #225	; 0xe1
    be40:	781b      	ldrb	r3, [r3, #0]
    be42:	aa07      	add	r2, sp, #28
    be44:	704b      	strb	r3, [r1, #1]
    be46:	0023      	movs	r3, r4
    be48:	33df      	adds	r3, #223	; 0xdf
    be4a:	781b      	ldrb	r3, [r3, #0]
    be4c:	202f      	movs	r0, #47	; 0x2f
    be4e:	708b      	strb	r3, [r1, #2]
    be50:	4b1b      	ldr	r3, [pc, #108]	; (bec0 <TransmissionErrorCallback+0x90>)
    be52:	4798      	blx	r3
    be54:	2808      	cmp	r0, #8
    be56:	d121      	bne.n	be9c <TransmissionErrorCallback+0x6c>
    be58:	a804      	add	r0, sp, #16
    be5a:	4b1a      	ldr	r3, [pc, #104]	; (bec4 <TransmissionErrorCallback+0x94>)
    be5c:	7005      	strb	r5, [r0, #0]
    be5e:	4798      	blx	r3
    be60:	9807      	ldr	r0, [sp, #28]
    be62:	4b19      	ldr	r3, [pc, #100]	; (bec8 <TransmissionErrorCallback+0x98>)
    be64:	9908      	ldr	r1, [sp, #32]
    be66:	9a09      	ldr	r2, [sp, #36]	; 0x24
    be68:	4798      	blx	r3
    be6a:	0023      	movs	r3, r4
    be6c:	33c6      	adds	r3, #198	; 0xc6
    be6e:	881b      	ldrh	r3, [r3, #0]
    be70:	a805      	add	r0, sp, #20
    be72:	7003      	strb	r3, [r0, #0]
    be74:	4b15      	ldr	r3, [pc, #84]	; (becc <TransmissionErrorCallback+0x9c>)
    be76:	6043      	str	r3, [r0, #4]
    be78:	4b15      	ldr	r3, [pc, #84]	; (bed0 <TransmissionErrorCallback+0xa0>)
    be7a:	4798      	blx	r3
    be7c:	2800      	cmp	r0, #0
    be7e:	d01b      	beq.n	beb8 <TransmissionErrorCallback+0x88>
    be80:	0023      	movs	r3, r4
    be82:	33f4      	adds	r3, #244	; 0xf4
    be84:	781b      	ldrb	r3, [r3, #0]
    be86:	42ab      	cmp	r3, r5
    be88:	d108      	bne.n	be9c <TransmissionErrorCallback+0x6c>
    be8a:	0021      	movs	r1, r4
    be8c:	220e      	movs	r2, #14
    be8e:	317c      	adds	r1, #124	; 0x7c
    be90:	780b      	ldrb	r3, [r1, #0]
    be92:	4393      	bics	r3, r2
    be94:	001a      	movs	r2, r3
    be96:	230c      	movs	r3, #12
    be98:	4313      	orrs	r3, r2
    be9a:	700b      	strb	r3, [r1, #0]
    be9c:	23e0      	movs	r3, #224	; 0xe0
    be9e:	2200      	movs	r2, #0
    bea0:	33ff      	adds	r3, #255	; 0xff
    bea2:	5ce3      	ldrb	r3, [r4, r3]
    bea4:	490b      	ldr	r1, [pc, #44]	; (bed4 <TransmissionErrorCallback+0xa4>)
    bea6:	34f3      	adds	r4, #243	; 0xf3
    bea8:	4359      	muls	r1, r3
    beaa:	4b0b      	ldr	r3, [pc, #44]	; (bed8 <TransmissionErrorCallback+0xa8>)
    beac:	7820      	ldrb	r0, [r4, #0]
    beae:	18c9      	adds	r1, r1, r3
    beb0:	9200      	str	r2, [sp, #0]
    beb2:	4b0a      	ldr	r3, [pc, #40]	; (bedc <TransmissionErrorCallback+0xac>)
    beb4:	4c0a      	ldr	r4, [pc, #40]	; (bee0 <TransmissionErrorCallback+0xb0>)
    beb6:	47a0      	blx	r4
    beb8:	b00b      	add	sp, #44	; 0x2c
    beba:	bd30      	pop	{r4, r5, pc}
    bebc:	200019b0 	.word	0x200019b0
    bec0:	00008755 	.word	0x00008755
    bec4:	00010615 	.word	0x00010615
    bec8:	0000bc71 	.word	0x0000bc71
    becc:	20001ba5 	.word	0x20001ba5
    bed0:	0000fd41 	.word	0x0000fd41
    bed4:	fffffc18 	.word	0xfffffc18
    bed8:	001e8480 	.word	0x001e8480
    bedc:	0000be31 	.word	0x0000be31
    bee0:	00009795 	.word	0x00009795

0000bee4 <UnconfirmedTransmissionCallback>:
    bee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bee6:	4c38      	ldr	r4, [pc, #224]	; (bfc8 <UnconfirmedTransmissionCallback+0xe4>)
    bee8:	b08b      	sub	sp, #44	; 0x2c
    beea:	0023      	movs	r3, r4
    beec:	33c6      	adds	r3, #198	; 0xc6
    beee:	881b      	ldrh	r3, [r3, #0]
    bef0:	af05      	add	r7, sp, #20
    bef2:	703b      	strb	r3, [r7, #0]
    bef4:	4b35      	ldr	r3, [pc, #212]	; (bfcc <UnconfirmedTransmissionCallback+0xe8>)
    bef6:	a903      	add	r1, sp, #12
    bef8:	9306      	str	r3, [sp, #24]
    befa:	2301      	movs	r3, #1
    befc:	700b      	strb	r3, [r1, #0]
    befe:	0023      	movs	r3, r4
    bf00:	0026      	movs	r6, r4
    bf02:	33e1      	adds	r3, #225	; 0xe1
    bf04:	781b      	ldrb	r3, [r3, #0]
    bf06:	36df      	adds	r6, #223	; 0xdf
    bf08:	704b      	strb	r3, [r1, #1]
    bf0a:	7833      	ldrb	r3, [r6, #0]
    bf0c:	aa07      	add	r2, sp, #28
    bf0e:	202f      	movs	r0, #47	; 0x2f
    bf10:	4d2f      	ldr	r5, [pc, #188]	; (bfd0 <UnconfirmedTransmissionCallback+0xec>)
    bf12:	708b      	strb	r3, [r1, #2]
    bf14:	47a8      	blx	r5
    bf16:	2808      	cmp	r0, #8
    bf18:	d12c      	bne.n	bf74 <UnconfirmedTransmissionCallback+0x90>
    bf1a:	2301      	movs	r3, #1
    bf1c:	a804      	add	r0, sp, #16
    bf1e:	7003      	strb	r3, [r0, #0]
    bf20:	4b2c      	ldr	r3, [pc, #176]	; (bfd4 <UnconfirmedTransmissionCallback+0xf0>)
    bf22:	4798      	blx	r3
    bf24:	9807      	ldr	r0, [sp, #28]
    bf26:	4b2c      	ldr	r3, [pc, #176]	; (bfd8 <UnconfirmedTransmissionCallback+0xf4>)
    bf28:	9908      	ldr	r1, [sp, #32]
    bf2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bf2c:	4798      	blx	r3
    bf2e:	0038      	movs	r0, r7
    bf30:	4b2a      	ldr	r3, [pc, #168]	; (bfdc <UnconfirmedTransmissionCallback+0xf8>)
    bf32:	4798      	blx	r3
    bf34:	2800      	cmp	r0, #0
    bf36:	d01b      	beq.n	bf70 <UnconfirmedTransmissionCallback+0x8c>
    bf38:	0023      	movs	r3, r4
    bf3a:	33f4      	adds	r3, #244	; 0xf4
    bf3c:	781b      	ldrb	r3, [r3, #0]
    bf3e:	2b01      	cmp	r3, #1
    bf40:	d108      	bne.n	bf54 <UnconfirmedTransmissionCallback+0x70>
    bf42:	0021      	movs	r1, r4
    bf44:	220e      	movs	r2, #14
    bf46:	317c      	adds	r1, #124	; 0x7c
    bf48:	780b      	ldrb	r3, [r1, #0]
    bf4a:	4393      	bics	r3, r2
    bf4c:	001a      	movs	r2, r3
    bf4e:	230c      	movs	r3, #12
    bf50:	4313      	orrs	r3, r2
    bf52:	700b      	strb	r3, [r1, #0]
    bf54:	23e0      	movs	r3, #224	; 0xe0
    bf56:	2200      	movs	r2, #0
    bf58:	33ff      	adds	r3, #255	; 0xff
    bf5a:	5ce3      	ldrb	r3, [r4, r3]
    bf5c:	4920      	ldr	r1, [pc, #128]	; (bfe0 <UnconfirmedTransmissionCallback+0xfc>)
    bf5e:	34f3      	adds	r4, #243	; 0xf3
    bf60:	4359      	muls	r1, r3
    bf62:	4b20      	ldr	r3, [pc, #128]	; (bfe4 <UnconfirmedTransmissionCallback+0x100>)
    bf64:	7820      	ldrb	r0, [r4, #0]
    bf66:	18c9      	adds	r1, r1, r3
    bf68:	4b1f      	ldr	r3, [pc, #124]	; (bfe8 <UnconfirmedTransmissionCallback+0x104>)
    bf6a:	9200      	str	r2, [sp, #0]
    bf6c:	4c1f      	ldr	r4, [pc, #124]	; (bfec <UnconfirmedTransmissionCallback+0x108>)
    bf6e:	47a0      	blx	r4
    bf70:	b00b      	add	sp, #44	; 0x2c
    bf72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bf74:	23fa      	movs	r3, #250	; 0xfa
    bf76:	00db      	lsls	r3, r3, #3
    bf78:	9304      	str	r3, [sp, #16]
    bf7a:	0023      	movs	r3, r4
    bf7c:	33ff      	adds	r3, #255	; 0xff
    bf7e:	7c5b      	ldrb	r3, [r3, #17]
    bf80:	079a      	lsls	r2, r3, #30
    bf82:	d516      	bpl.n	bfb2 <UnconfirmedTransmissionCallback+0xce>
    bf84:	aa04      	add	r2, sp, #16
    bf86:	0031      	movs	r1, r6
    bf88:	2026      	movs	r0, #38	; 0x26
    bf8a:	47a8      	blx	r5
    bf8c:	9b04      	ldr	r3, [sp, #16]
    bf8e:	1c5a      	adds	r2, r3, #1
    bf90:	d001      	beq.n	bf96 <UnconfirmedTransmissionCallback+0xb2>
    bf92:	3314      	adds	r3, #20
    bf94:	9304      	str	r3, [sp, #16]
    bf96:	23e0      	movs	r3, #224	; 0xe0
    bf98:	33ff      	adds	r3, #255	; 0xff
    bf9a:	5ce3      	ldrb	r3, [r4, r3]
    bf9c:	9a04      	ldr	r2, [sp, #16]
    bf9e:	21fa      	movs	r1, #250	; 0xfa
    bfa0:	1ad3      	subs	r3, r2, r3
    bfa2:	2200      	movs	r2, #0
    bfa4:	0089      	lsls	r1, r1, #2
    bfa6:	34e9      	adds	r4, #233	; 0xe9
    bfa8:	4359      	muls	r1, r3
    bfaa:	7820      	ldrb	r0, [r4, #0]
    bfac:	4b10      	ldr	r3, [pc, #64]	; (bff0 <UnconfirmedTransmissionCallback+0x10c>)
    bfae:	9200      	str	r2, [sp, #0]
    bfb0:	e7dc      	b.n	bf6c <UnconfirmedTransmissionCallback+0x88>
    bfb2:	075b      	lsls	r3, r3, #29
    bfb4:	d5ef      	bpl.n	bf96 <UnconfirmedTransmissionCallback+0xb2>
    bfb6:	aa04      	add	r2, sp, #16
    bfb8:	0031      	movs	r1, r6
    bfba:	2033      	movs	r0, #51	; 0x33
    bfbc:	47a8      	blx	r5
    bfbe:	9b04      	ldr	r3, [sp, #16]
    bfc0:	1c5a      	adds	r2, r3, #1
    bfc2:	d0e8      	beq.n	bf96 <UnconfirmedTransmissionCallback+0xb2>
    bfc4:	3301      	adds	r3, #1
    bfc6:	e7e5      	b.n	bf94 <UnconfirmedTransmissionCallback+0xb0>
    bfc8:	200019b0 	.word	0x200019b0
    bfcc:	20001ba5 	.word	0x20001ba5
    bfd0:	00008755 	.word	0x00008755
    bfd4:	00010615 	.word	0x00010615
    bfd8:	0000bc71 	.word	0x0000bc71
    bfdc:	0000fd41 	.word	0x0000fd41
    bfe0:	fffffc18 	.word	0xfffffc18
    bfe4:	001e8480 	.word	0x001e8480
    bfe8:	0000be31 	.word	0x0000be31
    bfec:	00009795 	.word	0x00009795
    bff0:	0000bee5 	.word	0x0000bee5

0000bff4 <UpdateJoinInProgress>:
    bff4:	b570      	push	{r4, r5, r6, lr}
    bff6:	2504      	movs	r5, #4
    bff8:	4c0a      	ldr	r4, [pc, #40]	; (c024 <UpdateJoinInProgress+0x30>)
    bffa:	0002      	movs	r2, r0
    bffc:	0021      	movs	r1, r4
    bffe:	348c      	adds	r4, #140	; 0x8c
    c000:	7826      	ldrb	r6, [r4, #0]
    c002:	2001      	movs	r0, #1
    c004:	4335      	orrs	r5, r6
    c006:	7025      	strb	r5, [r4, #0]
    c008:	2407      	movs	r4, #7
    c00a:	4022      	ands	r2, r4
    c00c:	4082      	lsls	r2, r0
    c00e:	317c      	adds	r1, #124	; 0x7c
    c010:	780b      	ldrb	r3, [r1, #0]
    c012:	1924      	adds	r4, r4, r4
    c014:	4383      	bics	r3, r0
    c016:	43a3      	bics	r3, r4
    c018:	4313      	orrs	r3, r2
    c01a:	700b      	strb	r3, [r1, #0]
    c01c:	210b      	movs	r1, #11
    c01e:	4b02      	ldr	r3, [pc, #8]	; (c028 <UpdateJoinInProgress+0x34>)
    c020:	4798      	blx	r3
    c022:	bd70      	pop	{r4, r5, r6, pc}
    c024:	200019b0 	.word	0x200019b0
    c028:	00008d6d 	.word	0x00008d6d

0000c02c <LORAWAN_Join>:
    c02c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c02e:	4c33      	ldr	r4, [pc, #204]	; (c0fc <LORAWAN_Join+0xd0>)
    c030:	0006      	movs	r6, r0
    c032:	0023      	movs	r3, r4
    c034:	337c      	adds	r3, #124	; 0x7c
    c036:	781b      	ldrb	r3, [r3, #0]
    c038:	200f      	movs	r0, #15
    c03a:	b25a      	sxtb	r2, r3
    c03c:	2a00      	cmp	r2, #0
    c03e:	db4b      	blt.n	c0d8 <LORAWAN_Join+0xac>
    c040:	3803      	subs	r0, #3
    c042:	065b      	lsls	r3, r3, #25
    c044:	d448      	bmi.n	c0d8 <LORAWAN_Join+0xac>
    c046:	0023      	movs	r3, r4
    c048:	338c      	adds	r3, #140	; 0x8c
    c04a:	781b      	ldrb	r3, [r3, #0]
    c04c:	3007      	adds	r0, #7
    c04e:	075b      	lsls	r3, r3, #29
    c050:	d442      	bmi.n	c0d8 <LORAWAN_Join+0xac>
    c052:	0023      	movs	r3, r4
    c054:	33f4      	adds	r3, #244	; 0xf4
    c056:	781b      	ldrb	r3, [r3, #0]
    c058:	2b04      	cmp	r3, #4
    c05a:	d038      	beq.n	c0ce <LORAWAN_Join+0xa2>
    c05c:	0023      	movs	r3, r4
    c05e:	33f4      	adds	r3, #244	; 0xf4
    c060:	781b      	ldrb	r3, [r3, #0]
    c062:	2b01      	cmp	r3, #1
    c064:	d105      	bne.n	c072 <LORAWAN_Join+0x46>
    c066:	0023      	movs	r3, r4
    c068:	337c      	adds	r3, #124	; 0x7c
    c06a:	781a      	ldrb	r2, [r3, #0]
    c06c:	230e      	movs	r3, #14
    c06e:	421a      	tst	r2, r3
    c070:	d131      	bne.n	c0d6 <LORAWAN_Join+0xaa>
    c072:	2102      	movs	r1, #2
    c074:	2001      	movs	r0, #1
    c076:	4d22      	ldr	r5, [pc, #136]	; (c100 <LORAWAN_Join+0xd4>)
    c078:	7026      	strb	r6, [r4, #0]
    c07a:	47a8      	blx	r5
    c07c:	0023      	movs	r3, r4
    c07e:	33d6      	adds	r3, #214	; 0xd6
    c080:	781b      	ldrb	r3, [r3, #0]
    c082:	2e00      	cmp	r6, #0
    c084:	d129      	bne.n	c0da <LORAWAN_Join+0xae>
    c086:	200b      	movs	r0, #11
    c088:	4003      	ands	r3, r0
    c08a:	4283      	cmp	r3, r0
    c08c:	d004      	beq.n	c098 <LORAWAN_Join+0x6c>
    c08e:	23e2      	movs	r3, #226	; 0xe2
    c090:	33ff      	adds	r3, #255	; 0xff
    c092:	5ce3      	ldrb	r3, [r4, r3]
    c094:	2b00      	cmp	r3, #0
    c096:	d01f      	beq.n	c0d8 <LORAWAN_Join+0xac>
    c098:	0023      	movs	r3, r4
    c09a:	337c      	adds	r3, #124	; 0x7c
    c09c:	781b      	ldrb	r3, [r3, #0]
    c09e:	07db      	lsls	r3, r3, #31
    c0a0:	d503      	bpl.n	c0aa <LORAWAN_Join+0x7e>
    c0a2:	2100      	movs	r1, #0
    c0a4:	203b      	movs	r0, #59	; 0x3b
    c0a6:	4b17      	ldr	r3, [pc, #92]	; (c104 <LORAWAN_Join+0xd8>)
    c0a8:	4798      	blx	r3
    c0aa:	0022      	movs	r2, r4
    c0ac:	2001      	movs	r0, #1
    c0ae:	327c      	adds	r2, #124	; 0x7c
    c0b0:	7813      	ldrb	r3, [r2, #0]
    c0b2:	348c      	adds	r4, #140	; 0x8c
    c0b4:	4383      	bics	r3, r0
    c0b6:	7013      	strb	r3, [r2, #0]
    c0b8:	2304      	movs	r3, #4
    c0ba:	7822      	ldrb	r2, [r4, #0]
    c0bc:	210b      	movs	r1, #11
    c0be:	4313      	orrs	r3, r2
    c0c0:	7023      	strb	r3, [r4, #0]
    c0c2:	47a8      	blx	r5
    c0c4:	2000      	movs	r0, #0
    c0c6:	4b10      	ldr	r3, [pc, #64]	; (c108 <LORAWAN_Join+0xdc>)
    c0c8:	4798      	blx	r3
    c0ca:	2008      	movs	r0, #8
    c0cc:	e004      	b.n	c0d8 <LORAWAN_Join+0xac>
    c0ce:	4b0f      	ldr	r3, [pc, #60]	; (c10c <LORAWAN_Join+0xe0>)
    c0d0:	4798      	blx	r3
    c0d2:	2808      	cmp	r0, #8
    c0d4:	d0c2      	beq.n	c05c <LORAWAN_Join+0x30>
    c0d6:	2011      	movs	r0, #17
    c0d8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    c0da:	2234      	movs	r2, #52	; 0x34
    c0dc:	200b      	movs	r0, #11
    c0de:	4013      	ands	r3, r2
    c0e0:	4293      	cmp	r3, r2
    c0e2:	d1f9      	bne.n	c0d8 <LORAWAN_Join+0xac>
    c0e4:	3804      	subs	r0, #4
    c0e6:	4b0a      	ldr	r3, [pc, #40]	; (c110 <LORAWAN_Join+0xe4>)
    c0e8:	4798      	blx	r3
    c0ea:	2200      	movs	r2, #0
    c0ec:	34f2      	adds	r4, #242	; 0xf2
    c0ee:	7820      	ldrb	r0, [r4, #0]
    c0f0:	4b08      	ldr	r3, [pc, #32]	; (c114 <LORAWAN_Join+0xe8>)
    c0f2:	9200      	str	r2, [sp, #0]
    c0f4:	4908      	ldr	r1, [pc, #32]	; (c118 <LORAWAN_Join+0xec>)
    c0f6:	4c09      	ldr	r4, [pc, #36]	; (c11c <LORAWAN_Join+0xf0>)
    c0f8:	47a0      	blx	r4
    c0fa:	e7e6      	b.n	c0ca <LORAWAN_Join+0x9e>
    c0fc:	200019b0 	.word	0x200019b0
    c100:	00008d6d 	.word	0x00008d6d
    c104:	0000887d 	.word	0x0000887d
    c108:	0000f27d 	.word	0x0000f27d
    c10c:	0000eaed 	.word	0x0000eaed
    c110:	0000bff5 	.word	0x0000bff5
    c114:	0000afd9 	.word	0x0000afd9
    c118:	0000c350 	.word	0x0000c350
    c11c:	00009795 	.word	0x00009795

0000c120 <EncryptFRMPayload>:
    c120:	b5f0      	push	{r4, r5, r6, r7, lr}
    c122:	0007      	movs	r7, r0
    c124:	2401      	movs	r4, #1
    c126:	b089      	sub	sp, #36	; 0x24
    c128:	9306      	str	r3, [sp, #24]
    c12a:	ab10      	add	r3, sp, #64	; 0x40
    c12c:	781d      	ldrb	r5, [r3, #0]
    c12e:	090b      	lsrs	r3, r1, #4
    c130:	9104      	str	r1, [sp, #16]
    c132:	9205      	str	r2, [sp, #20]
    c134:	9303      	str	r3, [sp, #12]
    c136:	9b03      	ldr	r3, [sp, #12]
    c138:	429c      	cmp	r4, r3
    c13a:	d907      	bls.n	c14c <EncryptFRMPayload+0x2c>
    c13c:	260f      	movs	r6, #15
    c13e:	9b04      	ldr	r3, [sp, #16]
    c140:	4033      	ands	r3, r6
    c142:	1e1e      	subs	r6, r3, #0
    c144:	d126      	bne.n	c194 <EncryptFRMPayload+0x74>
    c146:	2000      	movs	r0, #0
    c148:	b009      	add	sp, #36	; 0x24
    c14a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c14c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c14e:	0022      	movs	r2, r4
    c150:	9300      	str	r3, [sp, #0]
    c152:	9906      	ldr	r1, [sp, #24]
    c154:	2301      	movs	r3, #1
    c156:	9805      	ldr	r0, [sp, #20]
    c158:	4e1e      	ldr	r6, [pc, #120]	; (c1d4 <EncryptFRMPayload+0xb4>)
    c15a:	47b0      	blx	r6
    c15c:	4e1e      	ldr	r6, [pc, #120]	; (c1d8 <EncryptFRMPayload+0xb8>)
    c15e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c160:	2101      	movs	r1, #1
    c162:	0030      	movs	r0, r6
    c164:	4b1d      	ldr	r3, [pc, #116]	; (c1dc <EncryptFRMPayload+0xbc>)
    c166:	4798      	blx	r3
    c168:	2800      	cmp	r0, #0
    c16a:	d1ed      	bne.n	c148 <EncryptFRMPayload+0x28>
    c16c:	1e63      	subs	r3, r4, #1
    c16e:	011b      	lsls	r3, r3, #4
    c170:	18fb      	adds	r3, r7, r3
    c172:	9307      	str	r3, [sp, #28]
    c174:	9b07      	ldr	r3, [sp, #28]
    c176:	182a      	adds	r2, r5, r0
    c178:	5c19      	ldrb	r1, [r3, r0]
    c17a:	5d83      	ldrb	r3, [r0, r6]
    c17c:	b2d2      	uxtb	r2, r2
    c17e:	4059      	eors	r1, r3
    c180:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c182:	3001      	adds	r0, #1
    c184:	5499      	strb	r1, [r3, r2]
    c186:	2810      	cmp	r0, #16
    c188:	d1f4      	bne.n	c174 <EncryptFRMPayload+0x54>
    c18a:	3510      	adds	r5, #16
    c18c:	3401      	adds	r4, #1
    c18e:	b2ed      	uxtb	r5, r5
    c190:	b2e4      	uxtb	r4, r4
    c192:	e7d0      	b.n	c136 <EncryptFRMPayload+0x16>
    c194:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c196:	0022      	movs	r2, r4
    c198:	9300      	str	r3, [sp, #0]
    c19a:	9906      	ldr	r1, [sp, #24]
    c19c:	2301      	movs	r3, #1
    c19e:	9805      	ldr	r0, [sp, #20]
    c1a0:	4c0c      	ldr	r4, [pc, #48]	; (c1d4 <EncryptFRMPayload+0xb4>)
    c1a2:	47a0      	blx	r4
    c1a4:	4c0c      	ldr	r4, [pc, #48]	; (c1d8 <EncryptFRMPayload+0xb8>)
    c1a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c1a8:	2101      	movs	r1, #1
    c1aa:	0020      	movs	r0, r4
    c1ac:	4b0b      	ldr	r3, [pc, #44]	; (c1dc <EncryptFRMPayload+0xbc>)
    c1ae:	4798      	blx	r3
    c1b0:	2800      	cmp	r0, #0
    c1b2:	d1c9      	bne.n	c148 <EncryptFRMPayload+0x28>
    c1b4:	9b03      	ldr	r3, [sp, #12]
    c1b6:	011b      	lsls	r3, r3, #4
    c1b8:	18fb      	adds	r3, r7, r3
    c1ba:	5d07      	ldrb	r7, [r0, r4]
    c1bc:	5c19      	ldrb	r1, [r3, r0]
    c1be:	182a      	adds	r2, r5, r0
    c1c0:	4079      	eors	r1, r7
    c1c2:	9f11      	ldr	r7, [sp, #68]	; 0x44
    c1c4:	b2d2      	uxtb	r2, r2
    c1c6:	3001      	adds	r0, #1
    c1c8:	54b9      	strb	r1, [r7, r2]
    c1ca:	b2c2      	uxtb	r2, r0
    c1cc:	4296      	cmp	r6, r2
    c1ce:	d8f4      	bhi.n	c1ba <EncryptFRMPayload+0x9a>
    c1d0:	e7b9      	b.n	c146 <EncryptFRMPayload+0x26>
    c1d2:	46c0      	nop			; (mov r8, r8)
    c1d4:	0000b105 	.word	0x0000b105
    c1d8:	20000fd4 	.word	0x20000fd4
    c1dc:	00008a41 	.word	0x00008a41

0000c1e0 <UpdateTransactionCompleteCbParams>:
    c1e0:	23ea      	movs	r3, #234	; 0xea
    c1e2:	2201      	movs	r2, #1
    c1e4:	b570      	push	{r4, r5, r6, lr}
    c1e6:	0001      	movs	r1, r0
    c1e8:	4c14      	ldr	r4, [pc, #80]	; (c23c <UpdateTransactionCompleteCbParams+0x5c>)
    c1ea:	4815      	ldr	r0, [pc, #84]	; (c240 <UpdateTransactionCompleteCbParams+0x60>)
    c1ec:	005b      	lsls	r3, r3, #1
    c1ee:	54e2      	strb	r2, [r4, r3]
    c1f0:	7842      	ldrb	r2, [r0, #1]
    c1f2:	7803      	ldrb	r3, [r0, #0]
    c1f4:	0212      	lsls	r2, r2, #8
    c1f6:	431a      	orrs	r2, r3
    c1f8:	7883      	ldrb	r3, [r0, #2]
    c1fa:	041b      	lsls	r3, r3, #16
    c1fc:	431a      	orrs	r2, r3
    c1fe:	78c3      	ldrb	r3, [r0, #3]
    c200:	061b      	lsls	r3, r3, #24
    c202:	4313      	orrs	r3, r2
    c204:	d010      	beq.n	c228 <UpdateTransactionCompleteCbParams+0x48>
    c206:	0022      	movs	r2, r4
    c208:	2504      	movs	r5, #4
    c20a:	32f8      	adds	r2, #248	; 0xf8
    c20c:	6812      	ldr	r2, [r2, #0]
    c20e:	422a      	tst	r2, r5
    c210:	d00a      	beq.n	c228 <UpdateTransactionCompleteCbParams+0x48>
    c212:	0022      	movs	r2, r4
    c214:	32fc      	adds	r2, #252	; 0xfc
    c216:	6810      	ldr	r0, [r2, #0]
    c218:	2800      	cmp	r0, #0
    c21a:	d005      	beq.n	c228 <UpdateTransactionCompleteCbParams+0x48>
    c21c:	0022      	movs	r2, r4
    c21e:	32ff      	adds	r2, #255	; 0xff
    c220:	7151      	strb	r1, [r2, #5]
    c222:	7055      	strb	r5, [r2, #1]
    c224:	4907      	ldr	r1, [pc, #28]	; (c244 <UpdateTransactionCompleteCbParams+0x64>)
    c226:	4798      	blx	r3
    c228:	23ea      	movs	r3, #234	; 0xea
    c22a:	005b      	lsls	r3, r3, #1
    c22c:	5ce3      	ldrb	r3, [r4, r3]
    c22e:	2b00      	cmp	r3, #0
    c230:	d002      	beq.n	c238 <UpdateTransactionCompleteCbParams+0x58>
    c232:	2300      	movs	r3, #0
    c234:	34fc      	adds	r4, #252	; 0xfc
    c236:	6023      	str	r3, [r4, #0]
    c238:	bd70      	pop	{r4, r5, r6, pc}
    c23a:	46c0      	nop			; (mov r8, r8)
    c23c:	200019b0 	.word	0x200019b0
    c240:	20001ca8 	.word	0x20001ca8
    c244:	20001ab0 	.word	0x20001ab0

0000c248 <AssemblePacket>:
    c248:	b5f0      	push	{r4, r5, r6, r7, lr}
    c24a:	2710      	movs	r7, #16
    c24c:	b08d      	sub	sp, #52	; 0x34
    c24e:	9306      	str	r3, [sp, #24]
    c250:	ab04      	add	r3, sp, #16
    c252:	839f      	strh	r7, [r3, #28]
    c254:	231e      	movs	r3, #30
    c256:	9208      	str	r2, [sp, #32]
    c258:	aa04      	add	r2, sp, #16
    c25a:	189b      	adds	r3, r3, r2
    c25c:	2500      	movs	r5, #0
    c25e:	2210      	movs	r2, #16
    c260:	ac0a      	add	r4, sp, #40	; 0x28
    c262:	9007      	str	r0, [sp, #28]
    c264:	9109      	str	r1, [sp, #36]	; 0x24
    c266:	32ff      	adds	r2, #255	; 0xff
    c268:	0029      	movs	r1, r5
    c26a:	4eb5      	ldr	r6, [pc, #724]	; (c540 <AssemblePacket+0x2f8>)
    c26c:	7025      	strb	r5, [r4, #0]
    c26e:	48b5      	ldr	r0, [pc, #724]	; (c544 <AssemblePacket+0x2fc>)
    c270:	801d      	strh	r5, [r3, #0]
    c272:	47b0      	blx	r6
    c274:	003a      	movs	r2, r7
    c276:	0029      	movs	r1, r5
    c278:	48b3      	ldr	r0, [pc, #716]	; (c548 <AssemblePacket+0x300>)
    c27a:	47b0      	blx	r6
    c27c:	221f      	movs	r2, #31
    c27e:	7823      	ldrb	r3, [r4, #0]
    c280:	9907      	ldr	r1, [sp, #28]
    c282:	4013      	ands	r3, r2
    c284:	42a9      	cmp	r1, r5
    c286:	d043      	beq.n	c310 <AssemblePacket+0xc8>
    c288:	3a9f      	subs	r2, #159	; 0x9f
    c28a:	4313      	orrs	r3, r2
    c28c:	7023      	strb	r3, [r4, #0]
    c28e:	4baf      	ldr	r3, [pc, #700]	; (c54c <AssemblePacket+0x304>)
    c290:	3281      	adds	r2, #129	; 0x81
    c292:	338c      	adds	r3, #140	; 0x8c
    c294:	7819      	ldrb	r1, [r3, #0]
    c296:	430a      	orrs	r2, r1
    c298:	701a      	strb	r2, [r3, #0]
    c29a:	22e0      	movs	r2, #224	; 0xe0
    c29c:	7823      	ldrb	r3, [r4, #0]
    c29e:	48a9      	ldr	r0, [pc, #676]	; (c544 <AssemblePacket+0x2fc>)
    c2a0:	4013      	ands	r3, r2
    c2a2:	7023      	strb	r3, [r4, #0]
    c2a4:	4ca9      	ldr	r4, [pc, #676]	; (c54c <AssemblePacket+0x304>)
    c2a6:	7403      	strb	r3, [r0, #16]
    c2a8:	3adc      	subs	r2, #220	; 0xdc
    c2aa:	4ba9      	ldr	r3, [pc, #676]	; (c550 <AssemblePacket+0x308>)
    c2ac:	3011      	adds	r0, #17
    c2ae:	1c61      	adds	r1, r4, #1
    c2b0:	4798      	blx	r3
    c2b2:	2315      	movs	r3, #21
    c2b4:	aa04      	add	r2, sp, #16
    c2b6:	8393      	strh	r3, [r2, #28]
    c2b8:	0023      	movs	r3, r4
    c2ba:	337c      	adds	r3, #124	; 0x7c
    c2bc:	781b      	ldrb	r3, [r3, #0]
    c2be:	2700      	movs	r7, #0
    c2c0:	069b      	lsls	r3, r3, #26
    c2c2:	d400      	bmi.n	c2c6 <AssemblePacket+0x7e>
    c2c4:	e0fd      	b.n	c4c2 <AssemblePacket+0x27a>
    c2c6:	0023      	movs	r3, r4
    c2c8:	33df      	adds	r3, #223	; 0xdf
    c2ca:	781a      	ldrb	r2, [r3, #0]
    c2cc:	23ea      	movs	r3, #234	; 0xea
    c2ce:	469c      	mov	ip, r3
    c2d0:	44a4      	add	ip, r4
    c2d2:	4663      	mov	r3, ip
    c2d4:	781d      	ldrb	r5, [r3, #0]
    c2d6:	42aa      	cmp	r2, r5
    c2d8:	d200      	bcs.n	c2dc <AssemblePacket+0x94>
    c2da:	e0f2      	b.n	c4c2 <AssemblePacket+0x27a>
    c2dc:	0021      	movs	r1, r4
    c2de:	0026      	movs	r6, r4
    c2e0:	4b9c      	ldr	r3, [pc, #624]	; (c554 <AssemblePacket+0x30c>)
    c2e2:	31c2      	adds	r1, #194	; 0xc2
    c2e4:	7818      	ldrb	r0, [r3, #0]
    c2e6:	880b      	ldrh	r3, [r1, #0]
    c2e8:	36d4      	adds	r6, #212	; 0xd4
    c2ea:	3301      	adds	r3, #1
    c2ec:	b29b      	uxth	r3, r3
    c2ee:	800b      	strh	r3, [r1, #0]
    c2f0:	7836      	ldrb	r6, [r6, #0]
    c2f2:	42b3      	cmp	r3, r6
    c2f4:	d110      	bne.n	c318 <AssemblePacket+0xd0>
    c2f6:	0023      	movs	r3, r4
    c2f8:	33ed      	adds	r3, #237	; 0xed
    c2fa:	701f      	strb	r7, [r3, #0]
    c2fc:	2380      	movs	r3, #128	; 0x80
    c2fe:	2040      	movs	r0, #64	; 0x40
    c300:	348c      	adds	r4, #140	; 0x8c
    c302:	425b      	negs	r3, r3
    c304:	7822      	ldrb	r2, [r4, #0]
    c306:	4318      	orrs	r0, r3
    c308:	3390      	adds	r3, #144	; 0x90
    c30a:	4313      	orrs	r3, r2
    c30c:	7023      	strb	r3, [r4, #0]
    c30e:	e02f      	b.n	c370 <AssemblePacket+0x128>
    c310:	2240      	movs	r2, #64	; 0x40
    c312:	4313      	orrs	r3, r2
    c314:	7023      	strb	r3, [r4, #0]
    c316:	e7c0      	b.n	c29a <AssemblePacket+0x52>
    c318:	42b3      	cmp	r3, r6
    c31a:	d929      	bls.n	c370 <AssemblePacket+0x128>
    c31c:	42aa      	cmp	r2, r5
    c31e:	d100      	bne.n	c322 <AssemblePacket+0xda>
    c320:	e0c9      	b.n	c4b6 <AssemblePacket+0x26e>
    c322:	0021      	movs	r1, r4
    c324:	0020      	movs	r0, r4
    c326:	31ed      	adds	r1, #237	; 0xed
    c328:	780b      	ldrb	r3, [r1, #0]
    c32a:	30d5      	adds	r0, #213	; 0xd5
    c32c:	3301      	adds	r3, #1
    c32e:	b2db      	uxtb	r3, r3
    c330:	700b      	strb	r3, [r1, #0]
    c332:	7800      	ldrb	r0, [r0, #0]
    c334:	3801      	subs	r0, #1
    c336:	4283      	cmp	r3, r0
    c338:	dbe0      	blt.n	c2fc <AssemblePacket+0xb4>
    c33a:	700f      	strb	r7, [r1, #0]
    c33c:	42aa      	cmp	r2, r5
    c33e:	d90d      	bls.n	c35c <AssemblePacket+0x114>
    c340:	231b      	movs	r3, #27
    c342:	4666      	mov	r6, ip
    c344:	a904      	add	r1, sp, #16
    c346:	3a01      	subs	r2, #1
    c348:	185b      	adds	r3, r3, r1
    c34a:	701a      	strb	r2, [r3, #0]
    c34c:	251b      	movs	r5, #27
    c34e:	ab04      	add	r3, sp, #16
    c350:	18ed      	adds	r5, r5, r3
    c352:	7832      	ldrb	r2, [r6, #0]
    c354:	782b      	ldrb	r3, [r5, #0]
    c356:	429a      	cmp	r2, r3
    c358:	d800      	bhi.n	c35c <AssemblePacket+0x114>
    c35a:	e098      	b.n	c48e <AssemblePacket+0x246>
    c35c:	2380      	movs	r3, #128	; 0x80
    c35e:	2040      	movs	r0, #64	; 0x40
    c360:	2210      	movs	r2, #16
    c362:	425b      	negs	r3, r3
    c364:	4318      	orrs	r0, r3
    c366:	4b79      	ldr	r3, [pc, #484]	; (c54c <AssemblePacket+0x304>)
    c368:	338c      	adds	r3, #140	; 0x8c
    c36a:	7819      	ldrb	r1, [r3, #0]
    c36c:	430a      	orrs	r2, r1
    c36e:	701a      	strb	r2, [r3, #0]
    c370:	4d76      	ldr	r5, [pc, #472]	; (c54c <AssemblePacket+0x304>)
    c372:	2102      	movs	r1, #2
    c374:	002a      	movs	r2, r5
    c376:	328c      	adds	r2, #140	; 0x8c
    c378:	7813      	ldrb	r3, [r2, #0]
    c37a:	420b      	tst	r3, r1
    c37c:	d003      	beq.n	c386 <AssemblePacket+0x13e>
    c37e:	2420      	movs	r4, #32
    c380:	438b      	bics	r3, r1
    c382:	4320      	orrs	r0, r4
    c384:	7013      	strb	r3, [r2, #0]
    c386:	2310      	movs	r3, #16
    c388:	0004      	movs	r4, r0
    c38a:	439c      	bics	r4, r3
    c38c:	002b      	movs	r3, r5
    c38e:	33d8      	adds	r3, #216	; 0xd8
    c390:	781b      	ldrb	r3, [r3, #0]
    c392:	9307      	str	r3, [sp, #28]
    c394:	2b00      	cmp	r3, #0
    c396:	d003      	beq.n	c3a0 <AssemblePacket+0x158>
    c398:	9b06      	ldr	r3, [sp, #24]
    c39a:	2b00      	cmp	r3, #0
    c39c:	d000      	beq.n	c3a0 <AssemblePacket+0x158>
    c39e:	e092      	b.n	c4c6 <AssemblePacket+0x27e>
    c3a0:	230f      	movs	r3, #15
    c3a2:	439c      	bics	r4, r3
    c3a4:	0020      	movs	r0, r4
    c3a6:	ac0b      	add	r4, sp, #44	; 0x2c
    c3a8:	8826      	ldrh	r6, [r4, #0]
    c3aa:	4f66      	ldr	r7, [pc, #408]	; (c544 <AssemblePacket+0x2fc>)
    c3ac:	4b68      	ldr	r3, [pc, #416]	; (c550 <AssemblePacket+0x308>)
    c3ae:	55b8      	strb	r0, [r7, r6]
    c3b0:	1c70      	adds	r0, r6, #1
    c3b2:	b280      	uxth	r0, r0
    c3b4:	19c0      	adds	r0, r0, r7
    c3b6:	2202      	movs	r2, #2
    c3b8:	4967      	ldr	r1, [pc, #412]	; (c558 <AssemblePacket+0x310>)
    c3ba:	4798      	blx	r3
    c3bc:	9b07      	ldr	r3, [sp, #28]
    c3be:	3603      	adds	r6, #3
    c3c0:	8026      	strh	r6, [r4, #0]
    c3c2:	2b00      	cmp	r3, #0
    c3c4:	d100      	bne.n	c3c8 <AssemblePacket+0x180>
    c3c6:	e087      	b.n	c4d8 <AssemblePacket+0x290>
    c3c8:	9b06      	ldr	r3, [sp, #24]
    c3ca:	2b00      	cmp	r3, #0
    c3cc:	d004      	beq.n	c3d8 <AssemblePacket+0x190>
    c3ce:	2201      	movs	r2, #1
    c3d0:	0021      	movs	r1, r4
    c3d2:	0038      	movs	r0, r7
    c3d4:	4b61      	ldr	r3, [pc, #388]	; (c55c <AssemblePacket+0x314>)
    c3d6:	4798      	blx	r3
    c3d8:	466a      	mov	r2, sp
    c3da:	2124      	movs	r1, #36	; 0x24
    c3dc:	1852      	adds	r2, r2, r1
    c3de:	8823      	ldrh	r3, [r4, #0]
    c3e0:	7812      	ldrb	r2, [r2, #0]
    c3e2:	1c5e      	adds	r6, r3, #1
    c3e4:	54fa      	strb	r2, [r7, r3]
    c3e6:	9b06      	ldr	r3, [sp, #24]
    c3e8:	b2b6      	uxth	r6, r6
    c3ea:	8026      	strh	r6, [r4, #0]
    c3ec:	2b00      	cmp	r3, #0
    c3ee:	d100      	bne.n	c3f2 <AssemblePacket+0x1aa>
    c3f0:	e076      	b.n	c4e0 <AssemblePacket+0x298>
    c3f2:	001a      	movs	r2, r3
    c3f4:	19b8      	adds	r0, r7, r6
    c3f6:	9908      	ldr	r1, [sp, #32]
    c3f8:	4b55      	ldr	r3, [pc, #340]	; (c550 <AssemblePacket+0x308>)
    c3fa:	4798      	blx	r3
    c3fc:	466b      	mov	r3, sp
    c3fe:	7e19      	ldrb	r1, [r3, #24]
    c400:	682b      	ldr	r3, [r5, #0]
    c402:	b2f6      	uxtb	r6, r6
    c404:	0a18      	lsrs	r0, r3, #8
    c406:	792b      	ldrb	r3, [r5, #4]
    c408:	1d2a      	adds	r2, r5, #4
    c40a:	061b      	lsls	r3, r3, #24
    c40c:	4303      	orrs	r3, r0
    c40e:	9304      	str	r3, [sp, #16]
    c410:	2301      	movs	r3, #1
    c412:	9301      	str	r3, [sp, #4]
    c414:	4b52      	ldr	r3, [pc, #328]	; (c560 <AssemblePacket+0x318>)
    c416:	9703      	str	r7, [sp, #12]
    c418:	9602      	str	r6, [sp, #8]
    c41a:	9300      	str	r3, [sp, #0]
    c41c:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
    c41e:	9808      	ldr	r0, [sp, #32]
    c420:	2200      	movs	r2, #0
    c422:	4c50      	ldr	r4, [pc, #320]	; (c564 <AssemblePacket+0x31c>)
    c424:	47a0      	blx	r4
    c426:	2800      	cmp	r0, #0
    c428:	d002      	beq.n	c430 <AssemblePacket+0x1e8>
    c42a:	2020      	movs	r0, #32
    c42c:	4b4e      	ldr	r3, [pc, #312]	; (c568 <AssemblePacket+0x320>)
    c42e:	4798      	blx	r3
    c430:	aa0b      	add	r2, sp, #44	; 0x2c
    c432:	8813      	ldrh	r3, [r2, #0]
    c434:	9906      	ldr	r1, [sp, #24]
    c436:	18cb      	adds	r3, r1, r3
    c438:	8013      	strh	r3, [r2, #0]
    c43a:	4c44      	ldr	r4, [pc, #272]	; (c54c <AssemblePacket+0x304>)
    c43c:	ae0b      	add	r6, sp, #44	; 0x2c
    c43e:	6823      	ldr	r3, [r4, #0]
    c440:	8832      	ldrh	r2, [r6, #0]
    c442:	0a18      	lsrs	r0, r3, #8
    c444:	7923      	ldrb	r3, [r4, #4]
    c446:	1d21      	adds	r1, r4, #4
    c448:	061b      	lsls	r3, r3, #24
    c44a:	4303      	orrs	r3, r0
    c44c:	9300      	str	r3, [sp, #0]
    c44e:	3a10      	subs	r2, #16
    c450:	b2d2      	uxtb	r2, r2
    c452:	2349      	movs	r3, #73	; 0x49
    c454:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
    c456:	2000      	movs	r0, #0
    c458:	4d44      	ldr	r5, [pc, #272]	; (c56c <AssemblePacket+0x324>)
    c45a:	47a8      	blx	r5
    c45c:	4f39      	ldr	r7, [pc, #228]	; (c544 <AssemblePacket+0x2fc>)
    c45e:	2210      	movs	r2, #16
    c460:	4939      	ldr	r1, [pc, #228]	; (c548 <AssemblePacket+0x300>)
    c462:	0038      	movs	r0, r7
    c464:	4b3a      	ldr	r3, [pc, #232]	; (c550 <AssemblePacket+0x308>)
    c466:	4798      	blx	r3
    c468:	7833      	ldrb	r3, [r6, #0]
    c46a:	4a37      	ldr	r2, [pc, #220]	; (c548 <AssemblePacket+0x300>)
    c46c:	9300      	str	r3, [sp, #0]
    c46e:	2102      	movs	r1, #2
    c470:	003b      	movs	r3, r7
    c472:	4d3f      	ldr	r5, [pc, #252]	; (c570 <AssemblePacket+0x328>)
    c474:	483f      	ldr	r0, [pc, #252]	; (c574 <AssemblePacket+0x32c>)
    c476:	47a8      	blx	r5
    c478:	8836      	ldrh	r6, [r6, #0]
    c47a:	2204      	movs	r2, #4
    c47c:	19f0      	adds	r0, r6, r7
    c47e:	4932      	ldr	r1, [pc, #200]	; (c548 <AssemblePacket+0x300>)
    c480:	4b33      	ldr	r3, [pc, #204]	; (c550 <AssemblePacket+0x308>)
    c482:	4798      	blx	r3
    c484:	3e0c      	subs	r6, #12
    c486:	34c6      	adds	r4, #198	; 0xc6
    c488:	8026      	strh	r6, [r4, #0]
    c48a:	b00d      	add	sp, #52	; 0x34
    c48c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c48e:	0029      	movs	r1, r5
    c490:	2010      	movs	r0, #16
    c492:	4f39      	ldr	r7, [pc, #228]	; (c578 <AssemblePacket+0x330>)
    c494:	47b8      	blx	r7
    c496:	2808      	cmp	r0, #8
    c498:	d000      	beq.n	c49c <AssemblePacket+0x254>
    c49a:	e75f      	b.n	c35c <AssemblePacket+0x114>
    c49c:	0029      	movs	r1, r5
    c49e:	3009      	adds	r0, #9
    c4a0:	47b8      	blx	r7
    c4a2:	782b      	ldrb	r3, [r5, #0]
    c4a4:	2808      	cmp	r0, #8
    c4a6:	d047      	beq.n	c538 <AssemblePacket+0x2f0>
    c4a8:	7832      	ldrb	r2, [r6, #0]
    c4aa:	429a      	cmp	r2, r3
    c4ac:	d300      	bcc.n	c4b0 <AssemblePacket+0x268>
    c4ae:	e74d      	b.n	c34c <AssemblePacket+0x104>
    c4b0:	3b01      	subs	r3, #1
    c4b2:	702b      	strb	r3, [r5, #0]
    c4b4:	e74a      	b.n	c34c <AssemblePacket+0x104>
    c4b6:	800f      	strh	r7, [r1, #0]
    c4b8:	2210      	movs	r2, #16
    c4ba:	348c      	adds	r4, #140	; 0x8c
    c4bc:	7823      	ldrb	r3, [r4, #0]
    c4be:	4393      	bics	r3, r2
    c4c0:	e724      	b.n	c30c <AssemblePacket+0xc4>
    c4c2:	2000      	movs	r0, #0
    c4c4:	e7f8      	b.n	c4b8 <AssemblePacket+0x270>
    c4c6:	4b2d      	ldr	r3, [pc, #180]	; (c57c <AssemblePacket+0x334>)
    c4c8:	4798      	blx	r3
    c4ca:	220f      	movs	r2, #15
    c4cc:	0003      	movs	r3, r0
    c4ce:	0020      	movs	r0, r4
    c4d0:	4013      	ands	r3, r2
    c4d2:	4390      	bics	r0, r2
    c4d4:	4318      	orrs	r0, r3
    c4d6:	e766      	b.n	c3a6 <AssemblePacket+0x15e>
    c4d8:	9b06      	ldr	r3, [sp, #24]
    c4da:	2b00      	cmp	r3, #0
    c4dc:	d000      	beq.n	c4e0 <AssemblePacket+0x298>
    c4de:	e77b      	b.n	c3d8 <AssemblePacket+0x190>
    c4e0:	4d1a      	ldr	r5, [pc, #104]	; (c54c <AssemblePacket+0x304>)
    c4e2:	002b      	movs	r3, r5
    c4e4:	33d8      	adds	r3, #216	; 0xd8
    c4e6:	781b      	ldrb	r3, [r3, #0]
    c4e8:	2b00      	cmp	r3, #0
    c4ea:	d0a6      	beq.n	c43a <AssemblePacket+0x1f2>
    c4ec:	261e      	movs	r6, #30
    c4ee:	ab04      	add	r3, sp, #16
    c4f0:	18f6      	adds	r6, r6, r3
    c4f2:	2200      	movs	r2, #0
    c4f4:	0031      	movs	r1, r6
    c4f6:	4822      	ldr	r0, [pc, #136]	; (c580 <AssemblePacket+0x338>)
    c4f8:	4b18      	ldr	r3, [pc, #96]	; (c55c <AssemblePacket+0x314>)
    c4fa:	4798      	blx	r3
    c4fc:	682b      	ldr	r3, [r5, #0]
    c4fe:	7831      	ldrb	r1, [r6, #0]
    c500:	0a18      	lsrs	r0, r3, #8
    c502:	792b      	ldrb	r3, [r5, #4]
    c504:	9703      	str	r7, [sp, #12]
    c506:	061b      	lsls	r3, r3, #24
    c508:	4303      	orrs	r3, r0
    c50a:	9304      	str	r3, [sp, #16]
    c50c:	7823      	ldrb	r3, [r4, #0]
    c50e:	1d2a      	adds	r2, r5, #4
    c510:	9302      	str	r3, [sp, #8]
    c512:	2302      	movs	r3, #2
    c514:	9301      	str	r3, [sp, #4]
    c516:	4b17      	ldr	r3, [pc, #92]	; (c574 <AssemblePacket+0x32c>)
    c518:	4819      	ldr	r0, [pc, #100]	; (c580 <AssemblePacket+0x338>)
    c51a:	9300      	str	r3, [sp, #0]
    c51c:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
    c51e:	4d11      	ldr	r5, [pc, #68]	; (c564 <AssemblePacket+0x31c>)
    c520:	2200      	movs	r2, #0
    c522:	47a8      	blx	r5
    c524:	2800      	cmp	r0, #0
    c526:	d002      	beq.n	c52e <AssemblePacket+0x2e6>
    c528:	2020      	movs	r0, #32
    c52a:	4b0f      	ldr	r3, [pc, #60]	; (c568 <AssemblePacket+0x320>)
    c52c:	4798      	blx	r3
    c52e:	8823      	ldrh	r3, [r4, #0]
    c530:	8832      	ldrh	r2, [r6, #0]
    c532:	189b      	adds	r3, r3, r2
    c534:	8023      	strh	r3, [r4, #0]
    c536:	e780      	b.n	c43a <AssemblePacket+0x1f2>
    c538:	34df      	adds	r4, #223	; 0xdf
    c53a:	7023      	strb	r3, [r4, #0]
    c53c:	e70e      	b.n	c35c <AssemblePacket+0x114>
    c53e:	46c0      	nop			; (mov r8, r8)
    c540:	00013ee1 	.word	0x00013ee1
    c544:	20001b95 	.word	0x20001b95
    c548:	20000fd4 	.word	0x20000fd4
    c54c:	200019b0 	.word	0x200019b0
    c550:	00013e5d 	.word	0x00013e5d
    c554:	000196e5 	.word	0x000196e5
    c558:	20001a30 	.word	0x20001a30
    c55c:	0000ae19 	.word	0x0000ae19
    c560:	200019e5 	.word	0x200019e5
    c564:	0000c121 	.word	0x0000c121
    c568:	0000c1e1 	.word	0x0000c1e1
    c56c:	0000b105 	.word	0x0000b105
    c570:	00008a79 	.word	0x00008a79
    c574:	200019d5 	.word	0x200019d5
    c578:	00008771 	.word	0x00008771
    c57c:	0000ad15 	.word	0x0000ad15
    c580:	20001cb0 	.word	0x20001cb0

0000c584 <UpdateRxDataAvailableCbParams>:
    c584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c586:	4e0f      	ldr	r6, [pc, #60]	; (c5c4 <UpdateRxDataAvailableCbParams+0x40>)
    c588:	7874      	ldrb	r4, [r6, #1]
    c58a:	7835      	ldrb	r5, [r6, #0]
    c58c:	0224      	lsls	r4, r4, #8
    c58e:	432c      	orrs	r4, r5
    c590:	78b5      	ldrb	r5, [r6, #2]
    c592:	042d      	lsls	r5, r5, #16
    c594:	432c      	orrs	r4, r5
    c596:	78f5      	ldrb	r5, [r6, #3]
    c598:	062d      	lsls	r5, r5, #24
    c59a:	4325      	orrs	r5, r4
    c59c:	d011      	beq.n	c5c2 <UpdateRxDataAvailableCbParams+0x3e>
    c59e:	4c0a      	ldr	r4, [pc, #40]	; (c5c8 <UpdateRxDataAvailableCbParams+0x44>)
    c5a0:	2702      	movs	r7, #2
    c5a2:	0026      	movs	r6, r4
    c5a4:	36f8      	adds	r6, #248	; 0xf8
    c5a6:	6836      	ldr	r6, [r6, #0]
    c5a8:	423e      	tst	r6, r7
    c5aa:	d00a      	beq.n	c5c2 <UpdateRxDataAvailableCbParams+0x3e>
    c5ac:	0026      	movs	r6, r4
    c5ae:	34fc      	adds	r4, #252	; 0xfc
    c5b0:	36ff      	adds	r6, #255	; 0xff
    c5b2:	60a0      	str	r0, [r4, #8]
    c5b4:	60e1      	str	r1, [r4, #12]
    c5b6:	7077      	strb	r7, [r6, #1]
    c5b8:	7372      	strb	r2, [r6, #13]
    c5ba:	73b3      	strb	r3, [r6, #14]
    c5bc:	4903      	ldr	r1, [pc, #12]	; (c5cc <UpdateRxDataAvailableCbParams+0x48>)
    c5be:	6820      	ldr	r0, [r4, #0]
    c5c0:	47a8      	blx	r5
    c5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c5c4:	20001ca8 	.word	0x20001ca8
    c5c8:	200019b0 	.word	0x200019b0
    c5cc:	20001ab0 	.word	0x20001ab0

0000c5d0 <LorawanNotifyAppOnRxdone>:
    c5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c5d2:	4c25      	ldr	r4, [pc, #148]	; (c668 <LorawanNotifyAppOnRxdone+0x98>)
    c5d4:	0007      	movs	r7, r0
    c5d6:	0023      	movs	r3, r4
    c5d8:	33f4      	adds	r3, #244	; 0xf4
    c5da:	781b      	ldrb	r3, [r3, #0]
    c5dc:	000d      	movs	r5, r1
    c5de:	0016      	movs	r6, r2
    c5e0:	2b01      	cmp	r3, #1
    c5e2:	d136      	bne.n	c652 <LorawanNotifyAppOnRxdone+0x82>
    c5e4:	0022      	movs	r2, r4
    c5e6:	210e      	movs	r1, #14
    c5e8:	327c      	adds	r2, #124	; 0x7c
    c5ea:	7813      	ldrb	r3, [r2, #0]
    c5ec:	438b      	bics	r3, r1
    c5ee:	7013      	strb	r3, [r2, #0]
    c5f0:	491e      	ldr	r1, [pc, #120]	; (c66c <LorawanNotifyAppOnRxdone+0x9c>)
    c5f2:	784a      	ldrb	r2, [r1, #1]
    c5f4:	780b      	ldrb	r3, [r1, #0]
    c5f6:	0212      	lsls	r2, r2, #8
    c5f8:	431a      	orrs	r2, r3
    c5fa:	788b      	ldrb	r3, [r1, #2]
    c5fc:	041b      	lsls	r3, r3, #16
    c5fe:	431a      	orrs	r2, r3
    c600:	78cb      	ldrb	r3, [r1, #3]
    c602:	061b      	lsls	r3, r3, #24
    c604:	4313      	orrs	r3, r2
    c606:	d023      	beq.n	c650 <LorawanNotifyAppOnRxdone+0x80>
    c608:	0022      	movs	r2, r4
    c60a:	2120      	movs	r1, #32
    c60c:	328c      	adds	r2, #140	; 0x8c
    c60e:	7813      	ldrb	r3, [r2, #0]
    c610:	438b      	bics	r3, r1
    c612:	7013      	strb	r3, [r2, #0]
    c614:	0023      	movs	r3, r4
    c616:	33f4      	adds	r3, #244	; 0xf4
    c618:	781b      	ldrb	r3, [r3, #0]
    c61a:	7878      	ldrb	r0, [r7, #1]
    c61c:	469c      	mov	ip, r3
    c61e:	78fa      	ldrb	r2, [r7, #3]
    c620:	78b9      	ldrb	r1, [r7, #2]
    c622:	793b      	ldrb	r3, [r7, #4]
    c624:	4667      	mov	r7, ip
    c626:	0209      	lsls	r1, r1, #8
    c628:	4301      	orrs	r1, r0
    c62a:	0410      	lsls	r0, r2, #16
    c62c:	4308      	orrs	r0, r1
    c62e:	061b      	lsls	r3, r3, #24
    c630:	4318      	orrs	r0, r3
    c632:	0032      	movs	r2, r6
    c634:	2308      	movs	r3, #8
    c636:	0029      	movs	r1, r5
    c638:	2f04      	cmp	r7, #4
    c63a:	d112      	bne.n	c662 <LorawanNotifyAppOnRxdone+0x92>
    c63c:	4d0c      	ldr	r5, [pc, #48]	; (c670 <LorawanNotifyAppOnRxdone+0xa0>)
    c63e:	47a8      	blx	r5
    c640:	23ea      	movs	r3, #234	; 0xea
    c642:	005b      	lsls	r3, r3, #1
    c644:	5ce3      	ldrb	r3, [r4, r3]
    c646:	2b00      	cmp	r3, #0
    c648:	d102      	bne.n	c650 <LorawanNotifyAppOnRxdone+0x80>
    c64a:	2008      	movs	r0, #8
    c64c:	4b09      	ldr	r3, [pc, #36]	; (c674 <LorawanNotifyAppOnRxdone+0xa4>)
    c64e:	4798      	blx	r3
    c650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c652:	2b04      	cmp	r3, #4
    c654:	d1cc      	bne.n	c5f0 <LorawanNotifyAppOnRxdone+0x20>
    c656:	0023      	movs	r3, r4
    c658:	33e8      	adds	r3, #232	; 0xe8
    c65a:	7818      	ldrb	r0, [r3, #0]
    c65c:	4b06      	ldr	r3, [pc, #24]	; (c678 <LorawanNotifyAppOnRxdone+0xa8>)
    c65e:	4798      	blx	r3
    c660:	e7c6      	b.n	c5f0 <LorawanNotifyAppOnRxdone+0x20>
    c662:	4d06      	ldr	r5, [pc, #24]	; (c67c <LorawanNotifyAppOnRxdone+0xac>)
    c664:	47a8      	blx	r5
    c666:	e7eb      	b.n	c640 <LorawanNotifyAppOnRxdone+0x70>
    c668:	200019b0 	.word	0x200019b0
    c66c:	20001ca8 	.word	0x20001ca8
    c670:	0000ec55 	.word	0x0000ec55
    c674:	0000c1e1 	.word	0x0000c1e1
    c678:	00009aa1 	.word	0x00009aa1
    c67c:	0000c585 	.word	0x0000c585

0000c680 <LorawanSetReceiveWindow2Parameters>:
    c680:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c682:	466b      	mov	r3, sp
    c684:	1cdd      	adds	r5, r3, #3
    c686:	9001      	str	r0, [sp, #4]
    c688:	7029      	strb	r1, [r5, #0]
    c68a:	2001      	movs	r0, #1
    c68c:	a901      	add	r1, sp, #4
    c68e:	4c09      	ldr	r4, [pc, #36]	; (c6b4 <LorawanSetReceiveWindow2Parameters+0x34>)
    c690:	47a0      	blx	r4
    c692:	2808      	cmp	r0, #8
    c694:	d002      	beq.n	c69c <LorawanSetReceiveWindow2Parameters+0x1c>
    c696:	240a      	movs	r4, #10
    c698:	0020      	movs	r0, r4
    c69a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    c69c:	0029      	movs	r1, r5
    c69e:	200f      	movs	r0, #15
    c6a0:	47a0      	blx	r4
    c6a2:	0004      	movs	r4, r0
    c6a4:	2808      	cmp	r0, #8
    c6a6:	d1f6      	bne.n	c696 <LorawanSetReceiveWindow2Parameters+0x16>
    c6a8:	7829      	ldrb	r1, [r5, #0]
    c6aa:	9801      	ldr	r0, [sp, #4]
    c6ac:	4b02      	ldr	r3, [pc, #8]	; (c6b8 <LorawanSetReceiveWindow2Parameters+0x38>)
    c6ae:	4798      	blx	r3
    c6b0:	e7f2      	b.n	c698 <LorawanSetReceiveWindow2Parameters+0x18>
    c6b2:	46c0      	nop			; (mov r8, r8)
    c6b4:	00008771 	.word	0x00008771
    c6b8:	0000b695 	.word	0x0000b695

0000c6bc <LorawanSetFrequency>:
    c6bc:	b507      	push	{r0, r1, r2, lr}
    c6be:	466b      	mov	r3, sp
    c6c0:	9100      	str	r1, [sp, #0]
    c6c2:	7118      	strb	r0, [r3, #4]
    c6c4:	4669      	mov	r1, sp
    c6c6:	2000      	movs	r0, #0
    c6c8:	4b01      	ldr	r3, [pc, #4]	; (c6d0 <LorawanSetFrequency+0x14>)
    c6ca:	4798      	blx	r3
    c6cc:	bd0e      	pop	{r1, r2, r3, pc}
    c6ce:	46c0      	nop			; (mov r8, r8)
    c6d0:	0000887d 	.word	0x0000887d

0000c6d4 <LorawanGetReceiveWindow2Parameters>:
    c6d4:	4a06      	ldr	r2, [pc, #24]	; (c6f0 <LorawanGetReceiveWindow2Parameters+0x1c>)
    c6d6:	0013      	movs	r3, r2
    c6d8:	336e      	adds	r3, #110	; 0x6e
    c6da:	781b      	ldrb	r3, [r3, #0]
    c6dc:	7103      	strb	r3, [r0, #4]
    c6de:	0013      	movs	r3, r2
    c6e0:	326c      	adds	r2, #108	; 0x6c
    c6e2:	336a      	adds	r3, #106	; 0x6a
    c6e4:	8819      	ldrh	r1, [r3, #0]
    c6e6:	8813      	ldrh	r3, [r2, #0]
    c6e8:	041b      	lsls	r3, r3, #16
    c6ea:	430b      	orrs	r3, r1
    c6ec:	6003      	str	r3, [r0, #0]
    c6ee:	4770      	bx	lr
    c6f0:	200019b0 	.word	0x200019b0

0000c6f4 <LORAWAN_GetAttr>:
    c6f4:	b530      	push	{r4, r5, lr}
    c6f6:	000b      	movs	r3, r1
    c6f8:	b085      	sub	sp, #20
    c6fa:	0014      	movs	r4, r2
    c6fc:	2838      	cmp	r0, #56	; 0x38
    c6fe:	d83a      	bhi.n	c776 <LORAWAN_GetAttr+0x82>
    c700:	f004 fb7a 	bl	10df8 <__gnu_thumb1_case_uhi>
    c704:	005b003c 	.word	0x005b003c
    c708:	006f005f 	.word	0x006f005f
    c70c:	006b0067 	.word	0x006b0067
    c710:	00780073 	.word	0x00780073
    c714:	007f007c 	.word	0x007f007c
    c718:	00860082 	.word	0x00860082
    c71c:	00910089 	.word	0x00910089
    c720:	00970094 	.word	0x00970094
    c724:	009f009c 	.word	0x009f009c
    c728:	00a500a2 	.word	0x00a500a2
    c72c:	00d100a8 	.word	0x00d100a8
    c730:	00ab00ae 	.word	0x00ab00ae
    c734:	00d800de 	.word	0x00d800de
    c738:	00c700cc 	.word	0x00c700cc
    c73c:	003900c0 	.word	0x003900c0
    c740:	00ba008e 	.word	0x00ba008e
    c744:	00b700be 	.word	0x00b700be
    c748:	00d500b4 	.word	0x00d500b4
    c74c:	004200db 	.word	0x004200db
    c750:	00440042 	.word	0x00440042
    c754:	010f00e7 	.word	0x010f00e7
    c758:	00f90106 	.word	0x00f90106
    c75c:	0039011c 	.word	0x0039011c
    c760:	012a0152 	.word	0x012a0152
    c764:	0133012e 	.word	0x0133012e
    c768:	013d0138 	.word	0x013d0138
    c76c:	01440141 	.word	0x01440141
    c770:	014f0147 	.word	0x014f0147
    c774:	0156      	.short	0x0156
    c776:	200a      	movs	r0, #10
    c778:	b005      	add	sp, #20
    c77a:	bd30      	pop	{r4, r5, pc}
    c77c:	2208      	movs	r2, #8
    c77e:	498f      	ldr	r1, [pc, #572]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c780:	315d      	adds	r1, #93	; 0x5d
    c782:	0020      	movs	r0, r4
    c784:	4b8e      	ldr	r3, [pc, #568]	; (c9c0 <LORAWAN_GetAttr+0x2cc>)
    c786:	4798      	blx	r3
    c788:	2008      	movs	r0, #8
    c78a:	e7f5      	b.n	c778 <LORAWAN_GetAttr+0x84>
    c78c:	4669      	mov	r1, sp
    c78e:	4b8d      	ldr	r3, [pc, #564]	; (c9c4 <LORAWAN_GetAttr+0x2d0>)
    c790:	201d      	movs	r0, #29
    c792:	4798      	blx	r3
    c794:	4b89      	ldr	r3, [pc, #548]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c796:	a902      	add	r1, sp, #8
    c798:	33fe      	adds	r3, #254	; 0xfe
    c79a:	8adb      	ldrh	r3, [r3, #22]
    c79c:	2208      	movs	r2, #8
    c79e:	808b      	strh	r3, [r1, #4]
    c7a0:	466b      	mov	r3, sp
    c7a2:	791b      	ldrb	r3, [r3, #4]
    c7a4:	718b      	strb	r3, [r1, #6]
    c7a6:	466b      	mov	r3, sp
    c7a8:	881b      	ldrh	r3, [r3, #0]
    c7aa:	800b      	strh	r3, [r1, #0]
    c7ac:	466b      	mov	r3, sp
    c7ae:	885b      	ldrh	r3, [r3, #2]
    c7b0:	804b      	strh	r3, [r1, #2]
    c7b2:	466b      	mov	r3, sp
    c7b4:	795b      	ldrb	r3, [r3, #5]
    c7b6:	71cb      	strb	r3, [r1, #7]
    c7b8:	e7e3      	b.n	c782 <LORAWAN_GetAttr+0x8e>
    c7ba:	4980      	ldr	r1, [pc, #512]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c7bc:	2208      	movs	r2, #8
    c7be:	3155      	adds	r1, #85	; 0x55
    c7c0:	e7df      	b.n	c782 <LORAWAN_GetAttr+0x8e>
    c7c2:	4b7e      	ldr	r3, [pc, #504]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c7c4:	681a      	ldr	r2, [r3, #0]
    c7c6:	791b      	ldrb	r3, [r3, #4]
    c7c8:	0a12      	lsrs	r2, r2, #8
    c7ca:	061b      	lsls	r3, r3, #24
    c7cc:	4313      	orrs	r3, r2
    c7ce:	6023      	str	r3, [r4, #0]
    c7d0:	e7da      	b.n	c788 <LORAWAN_GetAttr+0x94>
    c7d2:	497a      	ldr	r1, [pc, #488]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c7d4:	2210      	movs	r2, #16
    c7d6:	3105      	adds	r1, #5
    c7d8:	e7d3      	b.n	c782 <LORAWAN_GetAttr+0x8e>
    c7da:	4978      	ldr	r1, [pc, #480]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c7dc:	2210      	movs	r2, #16
    c7de:	3115      	adds	r1, #21
    c7e0:	e7cf      	b.n	c782 <LORAWAN_GetAttr+0x8e>
    c7e2:	4976      	ldr	r1, [pc, #472]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c7e4:	2210      	movs	r2, #16
    c7e6:	3145      	adds	r1, #69	; 0x45
    c7e8:	e7cb      	b.n	c782 <LORAWAN_GetAttr+0x8e>
    c7ea:	4b74      	ldr	r3, [pc, #464]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c7ec:	337c      	adds	r3, #124	; 0x7c
    c7ee:	781b      	ldrb	r3, [r3, #0]
    c7f0:	069b      	lsls	r3, r3, #26
    c7f2:	e039      	b.n	c868 <LORAWAN_GetAttr+0x174>
    c7f4:	4b71      	ldr	r3, [pc, #452]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c7f6:	33df      	adds	r3, #223	; 0xdf
    c7f8:	781b      	ldrb	r3, [r3, #0]
    c7fa:	e01d      	b.n	c838 <LORAWAN_GetAttr+0x144>
    c7fc:	4b6f      	ldr	r3, [pc, #444]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c7fe:	33e1      	adds	r3, #225	; 0xe1
    c800:	e7fa      	b.n	c7f8 <LORAWAN_GetAttr+0x104>
    c802:	4b6e      	ldr	r3, [pc, #440]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c804:	33f7      	adds	r3, #247	; 0xf7
    c806:	e7f7      	b.n	c7f8 <LORAWAN_GetAttr+0x104>
    c808:	4b6c      	ldr	r3, [pc, #432]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c80a:	3304      	adds	r3, #4
    c80c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    c80e:	e7de      	b.n	c7ce <LORAWAN_GetAttr+0xda>
    c810:	4b6a      	ldr	r3, [pc, #424]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c812:	3308      	adds	r3, #8
    c814:	e7fa      	b.n	c80c <LORAWAN_GetAttr+0x118>
    c816:	4b69      	ldr	r3, [pc, #420]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c818:	33c8      	adds	r3, #200	; 0xc8
    c81a:	881b      	ldrh	r3, [r3, #0]
    c81c:	8023      	strh	r3, [r4, #0]
    c81e:	e7b3      	b.n	c788 <LORAWAN_GetAttr+0x94>
    c820:	4b66      	ldr	r3, [pc, #408]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c822:	33ca      	adds	r3, #202	; 0xca
    c824:	e7f9      	b.n	c81a <LORAWAN_GetAttr+0x126>
    c826:	4b65      	ldr	r3, [pc, #404]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c828:	33cc      	adds	r3, #204	; 0xcc
    c82a:	e7f6      	b.n	c81a <LORAWAN_GetAttr+0x126>
    c82c:	4b63      	ldr	r3, [pc, #396]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c82e:	33ce      	adds	r3, #206	; 0xce
    c830:	e7f3      	b.n	c81a <LORAWAN_GetAttr+0x126>
    c832:	4b62      	ldr	r3, [pc, #392]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c834:	33d0      	adds	r3, #208	; 0xd0
    c836:	881b      	ldrh	r3, [r3, #0]
    c838:	7023      	strb	r3, [r4, #0]
    c83a:	e7a5      	b.n	c788 <LORAWAN_GetAttr+0x94>
    c83c:	4b5f      	ldr	r3, [pc, #380]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c83e:	33d4      	adds	r3, #212	; 0xd4
    c840:	e7da      	b.n	c7f8 <LORAWAN_GetAttr+0x104>
    c842:	4b5e      	ldr	r3, [pc, #376]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c844:	33d5      	adds	r3, #213	; 0xd5
    c846:	e7d7      	b.n	c7f8 <LORAWAN_GetAttr+0x104>
    c848:	4b5c      	ldr	r3, [pc, #368]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c84a:	33d2      	adds	r3, #210	; 0xd2
    c84c:	e7e5      	b.n	c81a <LORAWAN_GetAttr+0x126>
    c84e:	4b5b      	ldr	r3, [pc, #364]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c850:	33da      	adds	r3, #218	; 0xda
    c852:	e7d1      	b.n	c7f8 <LORAWAN_GetAttr+0x104>
    c854:	4b59      	ldr	r3, [pc, #356]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c856:	33d9      	adds	r3, #217	; 0xd9
    c858:	e7ce      	b.n	c7f8 <LORAWAN_GetAttr+0x104>
    c85a:	4b58      	ldr	r3, [pc, #352]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c85c:	33e0      	adds	r3, #224	; 0xe0
    c85e:	e7cb      	b.n	c7f8 <LORAWAN_GetAttr+0x104>
    c860:	4b56      	ldr	r3, [pc, #344]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c862:	337c      	adds	r3, #124	; 0x7c
    c864:	781b      	ldrb	r3, [r3, #0]
    c866:	06db      	lsls	r3, r3, #27
    c868:	0fdb      	lsrs	r3, r3, #31
    c86a:	e7e5      	b.n	c838 <LORAWAN_GetAttr+0x144>
    c86c:	4b53      	ldr	r3, [pc, #332]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c86e:	33de      	adds	r3, #222	; 0xde
    c870:	e7c2      	b.n	c7f8 <LORAWAN_GetAttr+0x104>
    c872:	4b52      	ldr	r3, [pc, #328]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c874:	33dd      	adds	r3, #221	; 0xdd
    c876:	e7bf      	b.n	c7f8 <LORAWAN_GetAttr+0x104>
    c878:	4b50      	ldr	r3, [pc, #320]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c87a:	3390      	adds	r3, #144	; 0x90
    c87c:	781b      	ldrb	r3, [r3, #0]
    c87e:	e7cd      	b.n	c81c <LORAWAN_GetAttr+0x128>
    c880:	4b4e      	ldr	r3, [pc, #312]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c882:	e7c3      	b.n	c80c <LORAWAN_GetAttr+0x118>
    c884:	2016      	movs	r0, #22
    c886:	781b      	ldrb	r3, [r3, #0]
    c888:	a902      	add	r1, sp, #8
    c88a:	700b      	strb	r3, [r1, #0]
    c88c:	4b4e      	ldr	r3, [pc, #312]	; (c9c8 <LORAWAN_GetAttr+0x2d4>)
    c88e:	4798      	blx	r3
    c890:	e77a      	b.n	c788 <LORAWAN_GetAttr+0x94>
    c892:	781b      	ldrb	r3, [r3, #0]
    c894:	a902      	add	r1, sp, #8
    c896:	700b      	strb	r3, [r1, #0]
    c898:	2012      	movs	r0, #18
    c89a:	e7f7      	b.n	c88c <LORAWAN_GetAttr+0x198>
    c89c:	781b      	ldrb	r3, [r3, #0]
    c89e:	a902      	add	r1, sp, #8
    c8a0:	700b      	strb	r3, [r1, #0]
    c8a2:	2000      	movs	r0, #0
    c8a4:	e7f2      	b.n	c88c <LORAWAN_GetAttr+0x198>
    c8a6:	0010      	movs	r0, r2
    c8a8:	4b48      	ldr	r3, [pc, #288]	; (c9cc <LORAWAN_GetAttr+0x2d8>)
    c8aa:	4798      	blx	r3
    c8ac:	e76c      	b.n	c788 <LORAWAN_GetAttr+0x94>
    c8ae:	4b43      	ldr	r3, [pc, #268]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c8b0:	33f6      	adds	r3, #246	; 0xf6
    c8b2:	e7a1      	b.n	c7f8 <LORAWAN_GetAttr+0x104>
    c8b4:	4b41      	ldr	r3, [pc, #260]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c8b6:	33f4      	adds	r3, #244	; 0xf4
    c8b8:	e79e      	b.n	c7f8 <LORAWAN_GetAttr+0x104>
    c8ba:	4b40      	ldr	r3, [pc, #256]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c8bc:	33f5      	adds	r3, #245	; 0xf5
    c8be:	e79b      	b.n	c7f8 <LORAWAN_GetAttr+0x104>
    c8c0:	21fa      	movs	r1, #250	; 0xfa
    c8c2:	4b3e      	ldr	r3, [pc, #248]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c8c4:	0089      	lsls	r1, r1, #2
    c8c6:	3388      	adds	r3, #136	; 0x88
    c8c8:	6818      	ldr	r0, [r3, #0]
    c8ca:	4b41      	ldr	r3, [pc, #260]	; (c9d0 <LORAWAN_GetAttr+0x2dc>)
    c8cc:	4798      	blx	r3
    c8ce:	8020      	strh	r0, [r4, #0]
    c8d0:	e75a      	b.n	c788 <LORAWAN_GetAttr+0x94>
    c8d2:	780a      	ldrb	r2, [r1, #0]
    c8d4:	200a      	movs	r0, #10
    c8d6:	2a03      	cmp	r2, #3
    c8d8:	d900      	bls.n	c8dc <LORAWAN_GetAttr+0x1e8>
    c8da:	e74d      	b.n	c778 <LORAWAN_GetAttr+0x84>
    c8dc:	2322      	movs	r3, #34	; 0x22
    c8de:	4937      	ldr	r1, [pc, #220]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c8e0:	33ff      	adds	r3, #255	; 0xff
    c8e2:	5cc9      	ldrb	r1, [r1, r3]
    c8e4:	3b21      	subs	r3, #33	; 0x21
    c8e6:	3bff      	subs	r3, #255	; 0xff
    c8e8:	4093      	lsls	r3, r2
    c8ea:	400b      	ands	r3, r1
    c8ec:	1e5a      	subs	r2, r3, #1
    c8ee:	4193      	sbcs	r3, r2
    c8f0:	7023      	strb	r3, [r4, #0]
    c8f2:	3802      	subs	r0, #2
    c8f4:	e740      	b.n	c778 <LORAWAN_GetAttr+0x84>
    c8f6:	780b      	ldrb	r3, [r1, #0]
    c8f8:	200a      	movs	r0, #10
    c8fa:	2b03      	cmp	r3, #3
    c8fc:	d900      	bls.n	c900 <LORAWAN_GetAttr+0x20c>
    c8fe:	e73b      	b.n	c778 <LORAWAN_GetAttr+0x84>
    c900:	212c      	movs	r1, #44	; 0x2c
    c902:	4359      	muls	r1, r3
    c904:	3139      	adds	r1, #57	; 0x39
    c906:	4b2d      	ldr	r3, [pc, #180]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c908:	31ff      	adds	r1, #255	; 0xff
    c90a:	18c9      	adds	r1, r1, r3
    c90c:	2210      	movs	r2, #16
    c90e:	e738      	b.n	c782 <LORAWAN_GetAttr+0x8e>
    c910:	780b      	ldrb	r3, [r1, #0]
    c912:	200a      	movs	r0, #10
    c914:	2b03      	cmp	r3, #3
    c916:	d900      	bls.n	c91a <LORAWAN_GetAttr+0x226>
    c918:	e72e      	b.n	c778 <LORAWAN_GetAttr+0x84>
    c91a:	212c      	movs	r1, #44	; 0x2c
    c91c:	4359      	muls	r1, r3
    c91e:	3129      	adds	r1, #41	; 0x29
    c920:	e7f1      	b.n	c906 <LORAWAN_GetAttr+0x212>
    c922:	780b      	ldrb	r3, [r1, #0]
    c924:	200a      	movs	r0, #10
    c926:	2b03      	cmp	r3, #3
    c928:	d900      	bls.n	c92c <LORAWAN_GetAttr+0x238>
    c92a:	e725      	b.n	c778 <LORAWAN_GetAttr+0x84>
    c92c:	212c      	movs	r1, #44	; 0x2c
    c92e:	4359      	muls	r1, r3
    c930:	4b22      	ldr	r3, [pc, #136]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c932:	3125      	adds	r1, #37	; 0x25
    c934:	31ff      	adds	r1, #255	; 0xff
    c936:	18c9      	adds	r1, r1, r3
    c938:	2204      	movs	r2, #4
    c93a:	e722      	b.n	c782 <LORAWAN_GetAttr+0x8e>
    c93c:	780a      	ldrb	r2, [r1, #0]
    c93e:	200a      	movs	r0, #10
    c940:	2a03      	cmp	r2, #3
    c942:	d900      	bls.n	c946 <LORAWAN_GetAttr+0x252>
    c944:	e718      	b.n	c778 <LORAWAN_GetAttr+0x84>
    c946:	232c      	movs	r3, #44	; 0x2c
    c948:	435a      	muls	r2, r3
    c94a:	4b1c      	ldr	r3, [pc, #112]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c94c:	189b      	adds	r3, r3, r2
    c94e:	3349      	adds	r3, #73	; 0x49
    c950:	33ff      	adds	r3, #255	; 0xff
    c952:	881b      	ldrh	r3, [r3, #0]
    c954:	8023      	strh	r3, [r4, #0]
    c956:	e7cc      	b.n	c8f2 <LORAWAN_GetAttr+0x1fe>
    c958:	0010      	movs	r0, r2
    c95a:	4b1e      	ldr	r3, [pc, #120]	; (c9d4 <LORAWAN_GetAttr+0x2e0>)
    c95c:	4798      	blx	r3
    c95e:	e70b      	b.n	c778 <LORAWAN_GetAttr+0x84>
    c960:	0011      	movs	r1, r2
    c962:	4b18      	ldr	r3, [pc, #96]	; (c9c4 <LORAWAN_GetAttr+0x2d0>)
    c964:	201f      	movs	r0, #31
    c966:	4798      	blx	r3
    c968:	e70e      	b.n	c788 <LORAWAN_GetAttr+0x94>
    c96a:	4b14      	ldr	r3, [pc, #80]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c96c:	338c      	adds	r3, #140	; 0x8c
    c96e:	781b      	ldrb	r3, [r3, #0]
    c970:	071b      	lsls	r3, r3, #28
    c972:	e779      	b.n	c868 <LORAWAN_GetAttr+0x174>
    c974:	4b11      	ldr	r3, [pc, #68]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c976:	338c      	adds	r3, #140	; 0x8c
    c978:	781b      	ldrb	r3, [r3, #0]
    c97a:	07db      	lsls	r3, r3, #31
    c97c:	e774      	b.n	c868 <LORAWAN_GetAttr+0x174>
    c97e:	2031      	movs	r0, #49	; 0x31
    c980:	4b11      	ldr	r3, [pc, #68]	; (c9c8 <LORAWAN_GetAttr+0x2d4>)
    c982:	4798      	blx	r3
    c984:	e6f8      	b.n	c778 <LORAWAN_GetAttr+0x84>
    c986:	4914      	ldr	r1, [pc, #80]	; (c9d8 <LORAWAN_GetAttr+0x2e4>)
    c988:	2026      	movs	r0, #38	; 0x26
    c98a:	e7f9      	b.n	c980 <LORAWAN_GetAttr+0x28c>
    c98c:	4b0b      	ldr	r3, [pc, #44]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c98e:	33dc      	adds	r3, #220	; 0xdc
    c990:	e732      	b.n	c7f8 <LORAWAN_GetAttr+0x104>
    c992:	4b12      	ldr	r3, [pc, #72]	; (c9dc <LORAWAN_GetAttr+0x2e8>)
    c994:	4798      	blx	r3
    c996:	4b12      	ldr	r3, [pc, #72]	; (c9e0 <LORAWAN_GetAttr+0x2ec>)
    c998:	0005      	movs	r5, r0
    c99a:	4798      	blx	r3
    c99c:	1b40      	subs	r0, r0, r5
    c99e:	7020      	strb	r0, [r4, #0]
    c9a0:	e6f2      	b.n	c788 <LORAWAN_GetAttr+0x94>
    c9a2:	2100      	movs	r1, #0
    c9a4:	2020      	movs	r0, #32
    c9a6:	e7eb      	b.n	c980 <LORAWAN_GetAttr+0x28c>
    c9a8:	4b04      	ldr	r3, [pc, #16]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c9aa:	33ff      	adds	r3, #255	; 0xff
    c9ac:	7c5b      	ldrb	r3, [r3, #17]
    c9ae:	e71f      	b.n	c7f0 <LORAWAN_GetAttr+0xfc>
    c9b0:	23f0      	movs	r3, #240	; 0xf0
    c9b2:	4a02      	ldr	r2, [pc, #8]	; (c9bc <LORAWAN_GetAttr+0x2c8>)
    c9b4:	005b      	lsls	r3, r3, #1
    c9b6:	5cd3      	ldrb	r3, [r2, r3]
    c9b8:	e73e      	b.n	c838 <LORAWAN_GetAttr+0x144>
    c9ba:	46c0      	nop			; (mov r8, r8)
    c9bc:	200019b0 	.word	0x200019b0
    c9c0:	00013e5d 	.word	0x00013e5d
    c9c4:	0000f301 	.word	0x0000f301
    c9c8:	00008755 	.word	0x00008755
    c9cc:	0000c6d5 	.word	0x0000c6d5
    c9d0:	00010e0d 	.word	0x00010e0d
    c9d4:	000089c5 	.word	0x000089c5
    c9d8:	20001a8f 	.word	0x20001a8f
    c9dc:	0000ad15 	.word	0x0000ad15
    c9e0:	0000adbd 	.word	0x0000adbd

0000c9e4 <LORAWAN_TxDone>:
    c9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9e6:	6843      	ldr	r3, [r0, #4]
    c9e8:	b08f      	sub	sp, #60	; 0x3c
    c9ea:	ad07      	add	r5, sp, #28
    c9ec:	7804      	ldrb	r4, [r0, #0]
    c9ee:	9302      	str	r3, [sp, #8]
    c9f0:	2100      	movs	r1, #0
    c9f2:	4b84      	ldr	r3, [pc, #528]	; (cc04 <LORAWAN_TxDone+0x220>)
    c9f4:	002a      	movs	r2, r5
    c9f6:	2027      	movs	r0, #39	; 0x27
    c9f8:	4798      	blx	r3
    c9fa:	4f83      	ldr	r7, [pc, #524]	; (cc08 <LORAWAN_TxDone+0x224>)
    c9fc:	0039      	movs	r1, r7
    c9fe:	317c      	adds	r1, #124	; 0x7c
    ca00:	780b      	ldrb	r3, [r1, #0]
    ca02:	2b7f      	cmp	r3, #127	; 0x7f
    ca04:	d900      	bls.n	ca08 <LORAWAN_TxDone+0x24>
    ca06:	e24a      	b.n	ce9e <LORAWAN_TxDone+0x4ba>
    ca08:	4a80      	ldr	r2, [pc, #512]	; (cc0c <LORAWAN_TxDone+0x228>)
    ca0a:	7810      	ldrb	r0, [r2, #0]
    ca0c:	2804      	cmp	r0, #4
    ca0e:	d10b      	bne.n	ca28 <LORAWAN_TxDone+0x44>
    ca10:	220e      	movs	r2, #14
    ca12:	4393      	bics	r3, r2
    ca14:	700b      	strb	r3, [r1, #0]
    ca16:	3017      	adds	r0, #23
    ca18:	07db      	lsls	r3, r3, #31
    ca1a:	d500      	bpl.n	ca1e <LORAWAN_TxDone+0x3a>
    ca1c:	e0b2      	b.n	cb84 <LORAWAN_TxDone+0x1a0>
    ca1e:	201b      	movs	r0, #27
    ca20:	4b7b      	ldr	r3, [pc, #492]	; (cc10 <LORAWAN_TxDone+0x22c>)
    ca22:	4798      	blx	r3
    ca24:	b00f      	add	sp, #60	; 0x3c
    ca26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ca28:	7813      	ldrb	r3, [r2, #0]
    ca2a:	2b02      	cmp	r3, #2
    ca2c:	d1fa      	bne.n	ca24 <LORAWAN_TxDone+0x40>
    ca2e:	33d5      	adds	r3, #213	; 0xd5
    ca30:	33ff      	adds	r3, #255	; 0xff
    ca32:	5cfa      	ldrb	r2, [r7, r3]
    ca34:	2a00      	cmp	r2, #0
    ca36:	d005      	beq.n	ca44 <LORAWAN_TxDone+0x60>
    ca38:	2200      	movs	r2, #0
    ca3a:	4976      	ldr	r1, [pc, #472]	; (cc14 <LORAWAN_TxDone+0x230>)
    ca3c:	54fa      	strb	r2, [r7, r3]
    ca3e:	200b      	movs	r0, #11
    ca40:	4b75      	ldr	r3, [pc, #468]	; (cc18 <LORAWAN_TxDone+0x234>)
    ca42:	4798      	blx	r3
    ca44:	2c07      	cmp	r4, #7
    ca46:	d000      	beq.n	ca4a <LORAWAN_TxDone+0x66>
    ca48:	e0a0      	b.n	cb8c <LORAWAN_TxDone+0x1a8>
    ca4a:	79eb      	ldrb	r3, [r5, #7]
    ca4c:	2b00      	cmp	r3, #0
    ca4e:	d0e9      	beq.n	ca24 <LORAWAN_TxDone+0x40>
    ca50:	003b      	movs	r3, r7
    ca52:	338c      	adds	r3, #140	; 0x8c
    ca54:	7818      	ldrb	r0, [r3, #0]
    ca56:	003e      	movs	r6, r7
    ca58:	2304      	movs	r3, #4
    ca5a:	36fe      	adds	r6, #254	; 0xfe
    ca5c:	4018      	ands	r0, r3
    ca5e:	4d6f      	ldr	r5, [pc, #444]	; (cc1c <LORAWAN_TxDone+0x238>)
    ca60:	d005      	beq.n	ca6e <LORAWAN_TxDone+0x8a>
    ca62:	2000      	movs	r0, #0
    ca64:	2109      	movs	r1, #9
    ca66:	82b0      	strh	r0, [r6, #20]
    ca68:	47a8      	blx	r5
    ca6a:	0020      	movs	r0, r4
    ca6c:	e7d8      	b.n	ca20 <LORAWAN_TxDone+0x3c>
    ca6e:	8ab3      	ldrh	r3, [r6, #20]
    ca70:	2109      	movs	r1, #9
    ca72:	3301      	adds	r3, #1
    ca74:	82b3      	strh	r3, [r6, #20]
    ca76:	47a8      	blx	r5
    ca78:	8af3      	ldrh	r3, [r6, #22]
    ca7a:	4a69      	ldr	r2, [pc, #420]	; (cc20 <LORAWAN_TxDone+0x23c>)
    ca7c:	4293      	cmp	r3, r2
    ca7e:	d002      	beq.n	ca86 <LORAWAN_TxDone+0xa2>
    ca80:	8ab2      	ldrh	r2, [r6, #20]
    ca82:	429a      	cmp	r2, r3
    ca84:	d266      	bcs.n	cb54 <LORAWAN_TxDone+0x170>
    ca86:	23ef      	movs	r3, #239	; 0xef
    ca88:	005b      	lsls	r3, r3, #1
    ca8a:	5cfb      	ldrb	r3, [r7, r3]
    ca8c:	2b00      	cmp	r3, #0
    ca8e:	d061      	beq.n	cb54 <LORAWAN_TxDone+0x170>
    ca90:	2601      	movs	r6, #1
    ca92:	003b      	movs	r3, r7
    ca94:	a905      	add	r1, sp, #20
    ca96:	700e      	strb	r6, [r1, #0]
    ca98:	33e1      	adds	r3, #225	; 0xe1
    ca9a:	781b      	ldrb	r3, [r3, #0]
    ca9c:	aa0b      	add	r2, sp, #44	; 0x2c
    ca9e:	704b      	strb	r3, [r1, #1]
    caa0:	003b      	movs	r3, r7
    caa2:	33df      	adds	r3, #223	; 0xdf
    caa4:	781b      	ldrb	r3, [r3, #0]
    caa6:	202f      	movs	r0, #47	; 0x2f
    caa8:	708b      	strb	r3, [r1, #2]
    caaa:	4b5e      	ldr	r3, [pc, #376]	; (cc24 <LORAWAN_TxDone+0x240>)
    caac:	4798      	blx	r3
    caae:	2808      	cmp	r0, #8
    cab0:	d135      	bne.n	cb1e <LORAWAN_TxDone+0x13a>
    cab2:	a806      	add	r0, sp, #24
    cab4:	4b5c      	ldr	r3, [pc, #368]	; (cc28 <LORAWAN_TxDone+0x244>)
    cab6:	7006      	strb	r6, [r0, #0]
    cab8:	4798      	blx	r3
    caba:	980b      	ldr	r0, [sp, #44]	; 0x2c
    cabc:	990c      	ldr	r1, [sp, #48]	; 0x30
    cabe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cac0:	4b5a      	ldr	r3, [pc, #360]	; (cc2c <LORAWAN_TxDone+0x248>)
    cac2:	4798      	blx	r3
    cac4:	003b      	movs	r3, r7
    cac6:	33c6      	adds	r3, #198	; 0xc6
    cac8:	881b      	ldrh	r3, [r3, #0]
    caca:	a809      	add	r0, sp, #36	; 0x24
    cacc:	7003      	strb	r3, [r0, #0]
    cace:	4b58      	ldr	r3, [pc, #352]	; (cc30 <LORAWAN_TxDone+0x24c>)
    cad0:	6043      	str	r3, [r0, #4]
    cad2:	4b58      	ldr	r3, [pc, #352]	; (cc34 <LORAWAN_TxDone+0x250>)
    cad4:	4798      	blx	r3
    cad6:	1e04      	subs	r4, r0, #0
    cad8:	d108      	bne.n	caec <LORAWAN_TxDone+0x108>
    cada:	220e      	movs	r2, #14
    cadc:	377c      	adds	r7, #124	; 0x7c
    cade:	783b      	ldrb	r3, [r7, #0]
    cae0:	4393      	bics	r3, r2
    cae2:	001a      	movs	r2, r3
    cae4:	2302      	movs	r3, #2
    cae6:	4313      	orrs	r3, r2
    cae8:	703b      	strb	r3, [r7, #0]
    caea:	e79b      	b.n	ca24 <LORAWAN_TxDone+0x40>
    caec:	003b      	movs	r3, r7
    caee:	338c      	adds	r3, #140	; 0x8c
    caf0:	7818      	ldrb	r0, [r3, #0]
    caf2:	003b      	movs	r3, r7
    caf4:	4030      	ands	r0, r6
    caf6:	33fe      	adds	r3, #254	; 0xfe
    caf8:	4e4f      	ldr	r6, [pc, #316]	; (cc38 <LORAWAN_TxDone+0x254>)
    cafa:	4f50      	ldr	r7, [pc, #320]	; (cc3c <LORAWAN_TxDone+0x258>)
    cafc:	2800      	cmp	r0, #0
    cafe:	d009      	beq.n	cb14 <LORAWAN_TxDone+0x130>
    cb00:	2000      	movs	r0, #0
    cb02:	2109      	movs	r1, #9
    cb04:	8298      	strh	r0, [r3, #20]
    cb06:	47a8      	blx	r5
    cb08:	4b4d      	ldr	r3, [pc, #308]	; (cc40 <LORAWAN_TxDone+0x25c>)
    cb0a:	4798      	blx	r3
    cb0c:	47b8      	blx	r7
    cb0e:	0020      	movs	r0, r4
    cb10:	47b0      	blx	r6
    cb12:	e787      	b.n	ca24 <LORAWAN_TxDone+0x40>
    cb14:	2109      	movs	r1, #9
    cb16:	8298      	strh	r0, [r3, #20]
    cb18:	47a8      	blx	r5
    cb1a:	4b4a      	ldr	r3, [pc, #296]	; (cc44 <LORAWAN_TxDone+0x260>)
    cb1c:	e7f5      	b.n	cb0a <LORAWAN_TxDone+0x126>
    cb1e:	003b      	movs	r3, r7
    cb20:	338c      	adds	r3, #140	; 0x8c
    cb22:	7818      	ldrb	r0, [r3, #0]
    cb24:	003b      	movs	r3, r7
    cb26:	4006      	ands	r6, r0
    cb28:	4c43      	ldr	r4, [pc, #268]	; (cc38 <LORAWAN_TxDone+0x254>)
    cb2a:	33fe      	adds	r3, #254	; 0xfe
    cb2c:	4f43      	ldr	r7, [pc, #268]	; (cc3c <LORAWAN_TxDone+0x258>)
    cb2e:	2e00      	cmp	r6, #0
    cb30:	d00a      	beq.n	cb48 <LORAWAN_TxDone+0x164>
    cb32:	2600      	movs	r6, #0
    cb34:	2109      	movs	r1, #9
    cb36:	0030      	movs	r0, r6
    cb38:	829e      	strh	r6, [r3, #20]
    cb3a:	47a8      	blx	r5
    cb3c:	4b40      	ldr	r3, [pc, #256]	; (cc40 <LORAWAN_TxDone+0x25c>)
    cb3e:	4798      	blx	r3
    cb40:	47b8      	blx	r7
    cb42:	0030      	movs	r0, r6
    cb44:	47a0      	blx	r4
    cb46:	e76d      	b.n	ca24 <LORAWAN_TxDone+0x40>
    cb48:	2109      	movs	r1, #9
    cb4a:	0030      	movs	r0, r6
    cb4c:	829e      	strh	r6, [r3, #20]
    cb4e:	47a8      	blx	r5
    cb50:	4b3c      	ldr	r3, [pc, #240]	; (cc44 <LORAWAN_TxDone+0x260>)
    cb52:	e7f4      	b.n	cb3e <LORAWAN_TxDone+0x15a>
    cb54:	003b      	movs	r3, r7
    cb56:	2000      	movs	r0, #0
    cb58:	33fe      	adds	r3, #254	; 0xfe
    cb5a:	2109      	movs	r1, #9
    cb5c:	8298      	strh	r0, [r3, #20]
    cb5e:	47a8      	blx	r5
    cb60:	003a      	movs	r2, r7
    cb62:	210e      	movs	r1, #14
    cb64:	327c      	adds	r2, #124	; 0x7c
    cb66:	7813      	ldrb	r3, [r2, #0]
    cb68:	378c      	adds	r7, #140	; 0x8c
    cb6a:	438b      	bics	r3, r1
    cb6c:	7013      	strb	r3, [r2, #0]
    cb6e:	2220      	movs	r2, #32
    cb70:	783b      	ldrb	r3, [r7, #0]
    cb72:	4c32      	ldr	r4, [pc, #200]	; (cc3c <LORAWAN_TxDone+0x258>)
    cb74:	4393      	bics	r3, r2
    cb76:	703b      	strb	r3, [r7, #0]
    cb78:	07db      	lsls	r3, r3, #31
    cb7a:	d505      	bpl.n	cb88 <LORAWAN_TxDone+0x1a4>
    cb7c:	4b30      	ldr	r3, [pc, #192]	; (cc40 <LORAWAN_TxDone+0x25c>)
    cb7e:	4798      	blx	r3
    cb80:	47a0      	blx	r4
    cb82:	2007      	movs	r0, #7
    cb84:	4b2c      	ldr	r3, [pc, #176]	; (cc38 <LORAWAN_TxDone+0x254>)
    cb86:	e74c      	b.n	ca22 <LORAWAN_TxDone+0x3e>
    cb88:	4b2e      	ldr	r3, [pc, #184]	; (cc44 <LORAWAN_TxDone+0x260>)
    cb8a:	e7f8      	b.n	cb7e <LORAWAN_TxDone+0x19a>
    cb8c:	2c00      	cmp	r4, #0
    cb8e:	d000      	beq.n	cb92 <LORAWAN_TxDone+0x1ae>
    cb90:	e748      	b.n	ca24 <LORAWAN_TxDone+0x40>
    cb92:	003b      	movs	r3, r7
    cb94:	33fc      	adds	r3, #252	; 0xfc
    cb96:	681d      	ldr	r5, [r3, #0]
    cb98:	003b      	movs	r3, r7
    cb9a:	33fe      	adds	r3, #254	; 0xfe
    cb9c:	829c      	strh	r4, [r3, #20]
    cb9e:	0020      	movs	r0, r4
    cba0:	2109      	movs	r1, #9
    cba2:	4c1e      	ldr	r4, [pc, #120]	; (cc1c <LORAWAN_TxDone+0x238>)
    cba4:	47a0      	blx	r4
    cba6:	003b      	movs	r3, r7
    cba8:	003e      	movs	r6, r7
    cbaa:	33db      	adds	r3, #219	; 0xdb
    cbac:	781b      	ldrb	r3, [r3, #0]
    cbae:	367c      	adds	r6, #124	; 0x7c
    cbb0:	2b00      	cmp	r3, #0
    cbb2:	d149      	bne.n	cc48 <LORAWAN_TxDone+0x264>
    cbb4:	003a      	movs	r2, r7
    cbb6:	32dc      	adds	r2, #220	; 0xdc
    cbb8:	7812      	ldrb	r2, [r2, #0]
    cbba:	2a00      	cmp	r2, #0
    cbbc:	d144      	bne.n	cc48 <LORAWAN_TxDone+0x264>
    cbbe:	7832      	ldrb	r2, [r6, #0]
    cbc0:	3301      	adds	r3, #1
    cbc2:	421a      	tst	r2, r3
    cbc4:	d04f      	beq.n	cc66 <LORAWAN_TxDone+0x282>
    cbc6:	1d39      	adds	r1, r7, #4
    cbc8:	6fca      	ldr	r2, [r1, #124]	; 0x7c
    cbca:	18d2      	adds	r2, r2, r3
    cbcc:	67ca      	str	r2, [r1, #124]	; 0x7c
    cbce:	21f0      	movs	r1, #240	; 0xf0
    cbd0:	0049      	lsls	r1, r1, #1
    cbd2:	5c79      	ldrb	r1, [r7, r1]
    cbd4:	2900      	cmp	r1, #0
    cbd6:	d003      	beq.n	cbe0 <LORAWAN_TxDone+0x1fc>
    cbd8:	408b      	lsls	r3, r1
    cbda:	3b01      	subs	r3, #1
    cbdc:	421a      	tst	r2, r3
    cbde:	d102      	bne.n	cbe6 <LORAWAN_TxDone+0x202>
    cbe0:	2116      	movs	r1, #22
    cbe2:	2000      	movs	r0, #0
    cbe4:	47a0      	blx	r4
    cbe6:	782b      	ldrb	r3, [r5, #0]
    cbe8:	003a      	movs	r2, r7
    cbea:	2b01      	cmp	r3, #1
    cbec:	d106      	bne.n	cbfc <LORAWAN_TxDone+0x218>
    cbee:	328c      	adds	r2, #140	; 0x8c
    cbf0:	7811      	ldrb	r1, [r2, #0]
    cbf2:	430b      	orrs	r3, r1
    cbf4:	7013      	strb	r3, [r2, #0]
    cbf6:	003a      	movs	r2, r7
    cbf8:	32dc      	adds	r2, #220	; 0xdc
    cbfa:	e000      	b.n	cbfe <LORAWAN_TxDone+0x21a>
    cbfc:	32db      	adds	r2, #219	; 0xdb
    cbfe:	7813      	ldrb	r3, [r2, #0]
    cc00:	3301      	adds	r3, #1
    cc02:	e02f      	b.n	cc64 <LORAWAN_TxDone+0x280>
    cc04:	0000c6f5 	.word	0x0000c6f5
    cc08:	200019b0 	.word	0x200019b0
    cc0c:	20001b94 	.word	0x20001b94
    cc10:	0000b70d 	.word	0x0000b70d
    cc14:	20001b85 	.word	0x20001b85
    cc18:	0000f3f1 	.word	0x0000f3f1
    cc1c:	00008d6d 	.word	0x00008d6d
    cc20:	0000ffff 	.word	0x0000ffff
    cc24:	00008755 	.word	0x00008755
    cc28:	00010615 	.word	0x00010615
    cc2c:	0000bc71 	.word	0x0000bc71
    cc30:	20001ba5 	.word	0x20001ba5
    cc34:	0000fd41 	.word	0x0000fd41
    cc38:	0000c1e1 	.word	0x0000c1e1
    cc3c:	0000acd1 	.word	0x0000acd1
    cc40:	0000b6b9 	.word	0x0000b6b9
    cc44:	0000b6e9 	.word	0x0000b6e9
    cc48:	003a      	movs	r2, r7
    cc4a:	327c      	adds	r2, #124	; 0x7c
    cc4c:	7811      	ldrb	r1, [r2, #0]
    cc4e:	2201      	movs	r2, #1
    cc50:	4211      	tst	r1, r2
    cc52:	d008      	beq.n	cc66 <LORAWAN_TxDone+0x282>
    cc54:	0039      	movs	r1, r7
    cc56:	318c      	adds	r1, #140	; 0x8c
    cc58:	7809      	ldrb	r1, [r1, #0]
    cc5a:	4211      	tst	r1, r2
    cc5c:	d1cb      	bne.n	cbf6 <LORAWAN_TxDone+0x212>
    cc5e:	189b      	adds	r3, r3, r2
    cc60:	003a      	movs	r2, r7
    cc62:	32db      	adds	r2, #219	; 0xdb
    cc64:	7013      	strb	r3, [r2, #0]
    cc66:	003b      	movs	r3, r7
    cc68:	2200      	movs	r2, #0
    cc6a:	33f0      	adds	r3, #240	; 0xf0
    cc6c:	701a      	strb	r2, [r3, #0]
    cc6e:	003a      	movs	r2, r7
    cc70:	210e      	movs	r1, #14
    cc72:	2504      	movs	r5, #4
    cc74:	327c      	adds	r2, #124	; 0x7c
    cc76:	7813      	ldrb	r3, [r2, #0]
    cc78:	003e      	movs	r6, r7
    cc7a:	438b      	bics	r3, r1
    cc7c:	432b      	orrs	r3, r5
    cc7e:	7013      	strb	r3, [r2, #0]
    cc80:	003b      	movs	r3, r7
    cc82:	33df      	adds	r3, #223	; 0xdf
    cc84:	781b      	ldrb	r3, [r3, #0]
    cc86:	a906      	add	r1, sp, #24
    cc88:	708b      	strb	r3, [r1, #2]
    cc8a:	003b      	movs	r3, r7
    cc8c:	33ee      	adds	r3, #238	; 0xee
    cc8e:	781b      	ldrb	r3, [r3, #0]
    cc90:	368c      	adds	r6, #140	; 0x8c
    cc92:	704b      	strb	r3, [r1, #1]
    cc94:	7833      	ldrb	r3, [r6, #0]
    cc96:	ac09      	add	r4, sp, #36	; 0x24
    cc98:	075b      	lsls	r3, r3, #29
    cc9a:	0fdb      	lsrs	r3, r3, #31
    cc9c:	700b      	strb	r3, [r1, #0]
    cc9e:	0022      	movs	r2, r4
    cca0:	4b8f      	ldr	r3, [pc, #572]	; (cee0 <LORAWAN_TxDone+0x4fc>)
    cca2:	2019      	movs	r0, #25
    cca4:	4798      	blx	r3
    cca6:	7833      	ldrb	r3, [r6, #0]
    cca8:	422b      	tst	r3, r5
    ccaa:	d100      	bne.n	ccae <LORAWAN_TxDone+0x2ca>
    ccac:	e0bd      	b.n	ce2a <LORAWAN_TxDone+0x446>
    ccae:	2300      	movs	r3, #0
    ccb0:	ae0b      	add	r6, sp, #44	; 0x2c
    ccb2:	7033      	strb	r3, [r6, #0]
    ccb4:	0032      	movs	r2, r6
    ccb6:	2100      	movs	r1, #0
    ccb8:	2009      	movs	r0, #9
    ccba:	4b89      	ldr	r3, [pc, #548]	; (cee0 <LORAWAN_TxDone+0x4fc>)
    ccbc:	4798      	blx	r3
    ccbe:	0031      	movs	r1, r6
    ccc0:	aa05      	add	r2, sp, #20
    ccc2:	0028      	movs	r0, r5
    ccc4:	4b86      	ldr	r3, [pc, #536]	; (cee0 <LORAWAN_TxDone+0x4fc>)
    ccc6:	4798      	blx	r3
    ccc8:	0039      	movs	r1, r7
    ccca:	7923      	ldrb	r3, [r4, #4]
    cccc:	3169      	adds	r1, #105	; 0x69
    ccce:	700b      	strb	r3, [r1, #0]
    ccd0:	003b      	movs	r3, r7
    ccd2:	260b      	movs	r6, #11
    ccd4:	7822      	ldrb	r2, [r4, #0]
    ccd6:	3365      	adds	r3, #101	; 0x65
    ccd8:	701a      	strb	r2, [r3, #0]
    ccda:	7862      	ldrb	r2, [r4, #1]
    ccdc:	2004      	movs	r0, #4
    ccde:	705a      	strb	r2, [r3, #1]
    cce0:	78a2      	ldrb	r2, [r4, #2]
    cce2:	2500      	movs	r5, #0
    cce4:	709a      	strb	r2, [r3, #2]
    cce6:	78e2      	ldrb	r2, [r4, #3]
    cce8:	70da      	strb	r2, [r3, #3]
    ccea:	ab02      	add	r3, sp, #8
    ccec:	18f6      	adds	r6, r6, r3
    ccee:	0032      	movs	r2, r6
    ccf0:	4b7b      	ldr	r3, [pc, #492]	; (cee0 <LORAWAN_TxDone+0x4fc>)
    ccf2:	4798      	blx	r3
    ccf4:	003b      	movs	r3, r7
    ccf6:	338c      	adds	r3, #140	; 0x8c
    ccf8:	781c      	ldrb	r4, [r3, #0]
    ccfa:	2304      	movs	r3, #4
    ccfc:	401c      	ands	r4, r3
    ccfe:	2300      	movs	r3, #0
    cd00:	003a      	movs	r2, r7
    cd02:	56f3      	ldrsb	r3, [r6, r3]
    cd04:	42ac      	cmp	r4, r5
    cd06:	d100      	bne.n	cd0a <LORAWAN_TxDone+0x326>
    cd08:	e092      	b.n	ce30 <LORAWAN_TxDone+0x44c>
    cd0a:	2100      	movs	r1, #0
    cd0c:	32ce      	adds	r2, #206	; 0xce
    cd0e:	8816      	ldrh	r6, [r2, #0]
    cd10:	aa05      	add	r2, sp, #20
    cd12:	5651      	ldrsb	r1, [r2, r1]
    cd14:	4c73      	ldr	r4, [pc, #460]	; (cee4 <LORAWAN_TxDone+0x500>)
    cd16:	1872      	adds	r2, r6, r1
    cd18:	9203      	str	r2, [sp, #12]
    cd1a:	003a      	movs	r2, r7
    cd1c:	32cc      	adds	r2, #204	; 0xcc
    cd1e:	8811      	ldrh	r1, [r2, #0]
    cd20:	26fa      	movs	r6, #250	; 0xfa
    cd22:	18c9      	adds	r1, r1, r3
    cd24:	23e0      	movs	r3, #224	; 0xe0
    cd26:	33ff      	adds	r3, #255	; 0xff
    cd28:	5cfb      	ldrb	r3, [r7, r3]
    cd2a:	00b6      	lsls	r6, r6, #2
    cd2c:	1ac9      	subs	r1, r1, r3
    cd2e:	003b      	movs	r3, r7
    cd30:	33e2      	adds	r3, #226	; 0xe2
    cd32:	7818      	ldrb	r0, [r3, #0]
    cd34:	4371      	muls	r1, r6
    cd36:	4b6c      	ldr	r3, [pc, #432]	; (cee8 <LORAWAN_TxDone+0x504>)
    cd38:	002a      	movs	r2, r5
    cd3a:	9500      	str	r5, [sp, #0]
    cd3c:	47a0      	blx	r4
    cd3e:	23e0      	movs	r3, #224	; 0xe0
    cd40:	33ff      	adds	r3, #255	; 0xff
    cd42:	5cf9      	ldrb	r1, [r7, r3]
    cd44:	9b03      	ldr	r3, [sp, #12]
    cd46:	002a      	movs	r2, r5
    cd48:	1a59      	subs	r1, r3, r1
    cd4a:	003b      	movs	r3, r7
    cd4c:	33e3      	adds	r3, #227	; 0xe3
    cd4e:	7818      	ldrb	r0, [r3, #0]
    cd50:	4371      	muls	r1, r6
    cd52:	4b66      	ldr	r3, [pc, #408]	; (ceec <LORAWAN_TxDone+0x508>)
    cd54:	9500      	str	r5, [sp, #0]
    cd56:	47a0      	blx	r4
    cd58:	003b      	movs	r3, r7
    cd5a:	33ff      	adds	r3, #255	; 0xff
    cd5c:	7c5b      	ldrb	r3, [r3, #17]
    cd5e:	069b      	lsls	r3, r3, #26
    cd60:	d549      	bpl.n	cdf6 <LORAWAN_TxDone+0x412>
    cd62:	466a      	mov	r2, sp
    cd64:	003b      	movs	r3, r7
    cd66:	7a12      	ldrb	r2, [r2, #8]
    cd68:	3377      	adds	r3, #119	; 0x77
    cd6a:	701a      	strb	r2, [r3, #0]
    cd6c:	9a02      	ldr	r2, [sp, #8]
    cd6e:	ad0b      	add	r5, sp, #44	; 0x2c
    cd70:	0a12      	lsrs	r2, r2, #8
    cd72:	705a      	strb	r2, [r3, #1]
    cd74:	9a02      	ldr	r2, [sp, #8]
    cd76:	0c12      	lsrs	r2, r2, #16
    cd78:	709a      	strb	r2, [r3, #2]
    cd7a:	9a02      	ldr	r2, [sp, #8]
    cd7c:	0e12      	lsrs	r2, r2, #24
    cd7e:	70da      	strb	r2, [r3, #3]
    cd80:	003b      	movs	r3, r7
    cd82:	337b      	adds	r3, #123	; 0x7b
    cd84:	781b      	ldrb	r3, [r3, #0]
    cd86:	2b00      	cmp	r3, #0
    cd88:	d027      	beq.n	cdda <LORAWAN_TxDone+0x3f6>
    cd8a:	003c      	movs	r4, r7
    cd8c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    cd8e:	346f      	adds	r4, #111	; 0x6f
    cd90:	0216      	lsls	r6, r2, #8
    cd92:	003a      	movs	r2, r7
    cd94:	7823      	ldrb	r3, [r4, #0]
    cd96:	3273      	adds	r2, #115	; 0x73
    cd98:	4333      	orrs	r3, r6
    cd9a:	6f7e      	ldr	r6, [r7, #116]	; 0x74
    cd9c:	7812      	ldrb	r2, [r2, #0]
    cd9e:	0236      	lsls	r6, r6, #8
    cda0:	4316      	orrs	r6, r2
    cda2:	431e      	orrs	r6, r3
    cda4:	d119      	bne.n	cdda <LORAWAN_TxDone+0x3f6>
    cda6:	2301      	movs	r3, #1
    cda8:	0029      	movs	r1, r5
    cdaa:	702b      	strb	r3, [r5, #0]
    cdac:	2021      	movs	r0, #33	; 0x21
    cdae:	4b50      	ldr	r3, [pc, #320]	; (cef0 <LORAWAN_TxDone+0x50c>)
    cdb0:	4798      	blx	r3
    cdb2:	4b50      	ldr	r3, [pc, #320]	; (cef4 <LORAWAN_TxDone+0x510>)
    cdb4:	4798      	blx	r3
    cdb6:	0033      	movs	r3, r6
    cdb8:	9a02      	ldr	r2, [sp, #8]
    cdba:	1a80      	subs	r0, r0, r2
    cdbc:	4199      	sbcs	r1, r3
    cdbe:	0a03      	lsrs	r3, r0, #8
    cdc0:	7063      	strb	r3, [r4, #1]
    cdc2:	0c03      	lsrs	r3, r0, #16
    cdc4:	70a3      	strb	r3, [r4, #2]
    cdc6:	0e03      	lsrs	r3, r0, #24
    cdc8:	70e3      	strb	r3, [r4, #3]
    cdca:	0a0b      	lsrs	r3, r1, #8
    cdcc:	7163      	strb	r3, [r4, #5]
    cdce:	0c0b      	lsrs	r3, r1, #16
    cdd0:	71a3      	strb	r3, [r4, #6]
    cdd2:	0e0b      	lsrs	r3, r1, #24
    cdd4:	7020      	strb	r0, [r4, #0]
    cdd6:	7121      	strb	r1, [r4, #4]
    cdd8:	71e3      	strb	r3, [r4, #7]
    cdda:	4a47      	ldr	r2, [pc, #284]	; (cef8 <LORAWAN_TxDone+0x514>)
    cddc:	2020      	movs	r0, #32
    cdde:	0013      	movs	r3, r2
    cde0:	3377      	adds	r3, #119	; 0x77
    cde2:	7819      	ldrb	r1, [r3, #0]
    cde4:	6f93      	ldr	r3, [r2, #120]	; 0x78
    cde6:	021b      	lsls	r3, r3, #8
    cde8:	430b      	orrs	r3, r1
    cdea:	930b      	str	r3, [sp, #44]	; 0x2c
    cdec:	2301      	movs	r3, #1
    cdee:	0029      	movs	r1, r5
    cdf0:	712b      	strb	r3, [r5, #4]
    cdf2:	4b3f      	ldr	r3, [pc, #252]	; (cef0 <LORAWAN_TxDone+0x50c>)
    cdf4:	4798      	blx	r3
    cdf6:	4b40      	ldr	r3, [pc, #256]	; (cef8 <LORAWAN_TxDone+0x514>)
    cdf8:	2102      	movs	r1, #2
    cdfa:	001a      	movs	r2, r3
    cdfc:	32ff      	adds	r2, #255	; 0xff
    cdfe:	7c52      	ldrb	r2, [r2, #17]
    ce00:	4011      	ands	r1, r2
    ce02:	d047      	beq.n	ce94 <LORAWAN_TxDone+0x4b0>
    ce04:	466a      	mov	r2, sp
    ce06:	8912      	ldrh	r2, [r2, #8]
    ce08:	a90b      	add	r1, sp, #44	; 0x2c
    ce0a:	800a      	strh	r2, [r1, #0]
    ce0c:	001a      	movs	r2, r3
    ce0e:	328c      	adds	r2, #140	; 0x8c
    ce10:	7812      	ldrb	r2, [r2, #0]
    ce12:	3390      	adds	r3, #144	; 0x90
    ce14:	0752      	lsls	r2, r2, #29
    ce16:	0fd2      	lsrs	r2, r2, #31
    ce18:	710a      	strb	r2, [r1, #4]
    ce1a:	781a      	ldrb	r2, [r3, #0]
    ce1c:	2301      	movs	r3, #1
    ce1e:	4093      	lsls	r3, r2
    ce20:	201f      	movs	r0, #31
    ce22:	804b      	strh	r3, [r1, #2]
    ce24:	4b32      	ldr	r3, [pc, #200]	; (cef0 <LORAWAN_TxDone+0x50c>)
    ce26:	4798      	blx	r3
    ce28:	e5fc      	b.n	ca24 <LORAWAN_TxDone+0x40>
    ce2a:	aa05      	add	r2, sp, #20
    ce2c:	4933      	ldr	r1, [pc, #204]	; (cefc <LORAWAN_TxDone+0x518>)
    ce2e:	e748      	b.n	ccc2 <LORAWAN_TxDone+0x2de>
    ce30:	32c8      	adds	r2, #200	; 0xc8
    ce32:	8811      	ldrh	r1, [r2, #0]
    ce34:	25fa      	movs	r5, #250	; 0xfa
    ce36:	18c9      	adds	r1, r1, r3
    ce38:	23e0      	movs	r3, #224	; 0xe0
    ce3a:	33ff      	adds	r3, #255	; 0xff
    ce3c:	5cfb      	ldrb	r3, [r7, r3]
    ce3e:	00ad      	lsls	r5, r5, #2
    ce40:	1ac9      	subs	r1, r1, r3
    ce42:	003b      	movs	r3, r7
    ce44:	33e4      	adds	r3, #228	; 0xe4
    ce46:	7818      	ldrb	r0, [r3, #0]
    ce48:	4369      	muls	r1, r5
    ce4a:	4b27      	ldr	r3, [pc, #156]	; (cee8 <LORAWAN_TxDone+0x504>)
    ce4c:	9400      	str	r4, [sp, #0]
    ce4e:	0022      	movs	r2, r4
    ce50:	4e24      	ldr	r6, [pc, #144]	; (cee4 <LORAWAN_TxDone+0x500>)
    ce52:	47b0      	blx	r6
    ce54:	003b      	movs	r3, r7
    ce56:	33f4      	adds	r3, #244	; 0xf4
    ce58:	781b      	ldrb	r3, [r3, #0]
    ce5a:	2b04      	cmp	r3, #4
    ce5c:	d105      	bne.n	ce6a <LORAWAN_TxDone+0x486>
    ce5e:	2000      	movs	r0, #0
    ce60:	ab05      	add	r3, sp, #20
    ce62:	5618      	ldrsb	r0, [r3, r0]
    ce64:	4b26      	ldr	r3, [pc, #152]	; (cf00 <LORAWAN_TxDone+0x51c>)
    ce66:	4798      	blx	r3
    ce68:	e7c5      	b.n	cdf6 <LORAWAN_TxDone+0x412>
    ce6a:	2b01      	cmp	r3, #1
    ce6c:	d1c3      	bne.n	cdf6 <LORAWAN_TxDone+0x412>
    ce6e:	003b      	movs	r3, r7
    ce70:	33ca      	adds	r3, #202	; 0xca
    ce72:	8819      	ldrh	r1, [r3, #0]
    ce74:	ab05      	add	r3, sp, #20
    ce76:	781b      	ldrb	r3, [r3, #0]
    ce78:	0022      	movs	r2, r4
    ce7a:	b25b      	sxtb	r3, r3
    ce7c:	18c9      	adds	r1, r1, r3
    ce7e:	23e0      	movs	r3, #224	; 0xe0
    ce80:	33ff      	adds	r3, #255	; 0xff
    ce82:	5cfb      	ldrb	r3, [r7, r3]
    ce84:	37e5      	adds	r7, #229	; 0xe5
    ce86:	1ac9      	subs	r1, r1, r3
    ce88:	7838      	ldrb	r0, [r7, #0]
    ce8a:	4369      	muls	r1, r5
    ce8c:	9400      	str	r4, [sp, #0]
    ce8e:	4b17      	ldr	r3, [pc, #92]	; (ceec <LORAWAN_TxDone+0x508>)
    ce90:	47b0      	blx	r6
    ce92:	e7b0      	b.n	cdf6 <LORAWAN_TxDone+0x412>
    ce94:	0753      	lsls	r3, r2, #29
    ce96:	d400      	bmi.n	ce9a <LORAWAN_TxDone+0x4b6>
    ce98:	e5c4      	b.n	ca24 <LORAWAN_TxDone+0x40>
    ce9a:	2022      	movs	r0, #34	; 0x22
    ce9c:	e7c2      	b.n	ce24 <LORAWAN_TxDone+0x440>
    ce9e:	4919      	ldr	r1, [pc, #100]	; (cf04 <LORAWAN_TxDone+0x520>)
    cea0:	784a      	ldrb	r2, [r1, #1]
    cea2:	780b      	ldrb	r3, [r1, #0]
    cea4:	0212      	lsls	r2, r2, #8
    cea6:	431a      	orrs	r2, r3
    cea8:	788b      	ldrb	r3, [r1, #2]
    ceaa:	041b      	lsls	r3, r3, #16
    ceac:	431a      	orrs	r2, r3
    ceae:	78cb      	ldrb	r3, [r1, #3]
    ceb0:	061b      	lsls	r3, r3, #24
    ceb2:	4313      	orrs	r3, r2
    ceb4:	d100      	bne.n	ceb8 <LORAWAN_TxDone+0x4d4>
    ceb6:	e5b5      	b.n	ca24 <LORAWAN_TxDone+0x40>
    ceb8:	4a13      	ldr	r2, [pc, #76]	; (cf08 <LORAWAN_TxDone+0x524>)
    ceba:	7811      	ldrb	r1, [r2, #0]
    cebc:	221c      	movs	r2, #28
    cebe:	2904      	cmp	r1, #4
    cec0:	d003      	beq.n	ceca <LORAWAN_TxDone+0x4e6>
    cec2:	2200      	movs	r2, #0
    cec4:	2c07      	cmp	r4, #7
    cec6:	d100      	bne.n	ceca <LORAWAN_TxDone+0x4e6>
    cec8:	0022      	movs	r2, r4
    ceca:	0039      	movs	r1, r7
    cecc:	2004      	movs	r0, #4
    cece:	31ff      	adds	r1, #255	; 0xff
    ced0:	37fc      	adds	r7, #252	; 0xfc
    ced2:	7048      	strb	r0, [r1, #1]
    ced4:	714a      	strb	r2, [r1, #5]
    ced6:	6838      	ldr	r0, [r7, #0]
    ced8:	490c      	ldr	r1, [pc, #48]	; (cf0c <LORAWAN_TxDone+0x528>)
    ceda:	4798      	blx	r3
    cedc:	e5a2      	b.n	ca24 <LORAWAN_TxDone+0x40>
    cede:	46c0      	nop			; (mov r8, r8)
    cee0:	00008755 	.word	0x00008755
    cee4:	00009795 	.word	0x00009795
    cee8:	0000bbf9 	.word	0x0000bbf9
    ceec:	0000d245 	.word	0x0000d245
    cef0:	0000887d 	.word	0x0000887d
    cef4:	0000973d 	.word	0x0000973d
    cef8:	200019b0 	.word	0x200019b0
    cefc:	20001a1e 	.word	0x20001a1e
    cf00:	0000eba5 	.word	0x0000eba5
    cf04:	20001ca8 	.word	0x20001ca8
    cf08:	20001b94 	.word	0x20001b94
    cf0c:	20001ab0 	.word	0x20001ab0

0000cf10 <radioCallback>:
    cf10:	4b10      	ldr	r3, [pc, #64]	; (cf54 <radioCallback+0x44>)
    cf12:	b510      	push	{r4, lr}
    cf14:	7018      	strb	r0, [r3, #0]
    cf16:	3801      	subs	r0, #1
    cf18:	b2c0      	uxtb	r0, r0
    cf1a:	000c      	movs	r4, r1
    cf1c:	281f      	cmp	r0, #31
    cf1e:	d809      	bhi.n	cf34 <radioCallback+0x24>
    cf20:	2301      	movs	r3, #1
    cf22:	4083      	lsls	r3, r0
    cf24:	4a0c      	ldr	r2, [pc, #48]	; (cf58 <radioCallback+0x48>)
    cf26:	4213      	tst	r3, r2
    cf28:	d109      	bne.n	cf3e <radioCallback+0x2e>
    cf2a:	220a      	movs	r2, #10
    cf2c:	4213      	tst	r3, r2
    cf2e:	d102      	bne.n	cf36 <radioCallback+0x26>
    cf30:	2b00      	cmp	r3, #0
    cf32:	db08      	blt.n	cf46 <radioCallback+0x36>
    cf34:	bd10      	pop	{r4, pc}
    cf36:	0008      	movs	r0, r1
    cf38:	4b08      	ldr	r3, [pc, #32]	; (cf5c <radioCallback+0x4c>)
    cf3a:	4798      	blx	r3
    cf3c:	e7fa      	b.n	cf34 <radioCallback+0x24>
    cf3e:	2002      	movs	r0, #2
    cf40:	4b07      	ldr	r3, [pc, #28]	; (cf60 <radioCallback+0x50>)
    cf42:	4798      	blx	r3
    cf44:	e7f6      	b.n	cf34 <radioCallback+0x24>
    cf46:	4b07      	ldr	r3, [pc, #28]	; (cf64 <radioCallback+0x54>)
    cf48:	681b      	ldr	r3, [r3, #0]
    cf4a:	2b00      	cmp	r3, #0
    cf4c:	d0f2      	beq.n	cf34 <radioCallback+0x24>
    cf4e:	4798      	blx	r3
    cf50:	6020      	str	r0, [r4, #0]
    cf52:	e7ef      	b.n	cf34 <radioCallback+0x24>
    cf54:	20001b94 	.word	0x20001b94
    cf58:	00008081 	.word	0x00008081
    cf5c:	0000c9e5 	.word	0x0000c9e5
    cf60:	0000f27d 	.word	0x0000f27d
    cf64:	20001ca4 	.word	0x20001ca4

0000cf68 <LorawanCheckAndDoRetryOnTimeout>:
    cf68:	b513      	push	{r0, r1, r4, lr}
    cf6a:	4c34      	ldr	r4, [pc, #208]	; (d03c <LorawanCheckAndDoRetryOnTimeout+0xd4>)
    cf6c:	0023      	movs	r3, r4
    cf6e:	338c      	adds	r3, #140	; 0x8c
    cf70:	781b      	ldrb	r3, [r3, #0]
    cf72:	0022      	movs	r2, r4
    cf74:	07db      	lsls	r3, r3, #31
    cf76:	d54d      	bpl.n	d014 <LorawanCheckAndDoRetryOnTimeout+0xac>
    cf78:	0023      	movs	r3, r4
    cf7a:	32dc      	adds	r2, #220	; 0xdc
    cf7c:	33da      	adds	r3, #218	; 0xda
    cf7e:	7812      	ldrb	r2, [r2, #0]
    cf80:	781b      	ldrb	r3, [r3, #0]
    cf82:	429a      	cmp	r2, r3
    cf84:	d838      	bhi.n	cff8 <LorawanCheckAndDoRetryOnTimeout+0x90>
    cf86:	23ef      	movs	r3, #239	; 0xef
    cf88:	005b      	lsls	r3, r3, #1
    cf8a:	5ce3      	ldrb	r3, [r4, r3]
    cf8c:	2b00      	cmp	r3, #0
    cf8e:	d033      	beq.n	cff8 <LorawanCheckAndDoRetryOnTimeout+0x90>
    cf90:	0023      	movs	r3, r4
    cf92:	33f4      	adds	r3, #244	; 0xf4
    cf94:	781b      	ldrb	r3, [r3, #0]
    cf96:	2b01      	cmp	r3, #1
    cf98:	d11a      	bne.n	cfd0 <LorawanCheckAndDoRetryOnTimeout+0x68>
    cf9a:	0021      	movs	r1, r4
    cf9c:	220e      	movs	r2, #14
    cf9e:	317c      	adds	r1, #124	; 0x7c
    cfa0:	780b      	ldrb	r3, [r1, #0]
    cfa2:	4393      	bics	r3, r2
    cfa4:	001a      	movs	r2, r3
    cfa6:	230c      	movs	r3, #12
    cfa8:	4313      	orrs	r3, r2
    cfaa:	700b      	strb	r3, [r1, #0]
    cfac:	0023      	movs	r3, r4
    cfae:	33d2      	adds	r3, #210	; 0xd2
    cfb0:	8819      	ldrh	r1, [r3, #0]
    cfb2:	23e0      	movs	r3, #224	; 0xe0
    cfb4:	33ff      	adds	r3, #255	; 0xff
    cfb6:	5ce3      	ldrb	r3, [r4, r3]
    cfb8:	2200      	movs	r2, #0
    cfba:	1acb      	subs	r3, r1, r3
    cfbc:	21fa      	movs	r1, #250	; 0xfa
    cfbe:	34e8      	adds	r4, #232	; 0xe8
    cfc0:	0089      	lsls	r1, r1, #2
    cfc2:	7820      	ldrb	r0, [r4, #0]
    cfc4:	4359      	muls	r1, r3
    cfc6:	9200      	str	r2, [sp, #0]
    cfc8:	4b1d      	ldr	r3, [pc, #116]	; (d040 <LorawanCheckAndDoRetryOnTimeout+0xd8>)
    cfca:	4c1e      	ldr	r4, [pc, #120]	; (d044 <LorawanCheckAndDoRetryOnTimeout+0xdc>)
    cfcc:	47a0      	blx	r4
    cfce:	bd13      	pop	{r0, r1, r4, pc}
    cfd0:	2b04      	cmp	r3, #4
    cfd2:	d1fc      	bne.n	cfce <LorawanCheckAndDoRetryOnTimeout+0x66>
    cfd4:	4b1c      	ldr	r3, [pc, #112]	; (d048 <LorawanCheckAndDoRetryOnTimeout+0xe0>)
    cfd6:	4798      	blx	r3
    cfd8:	34c6      	adds	r4, #198	; 0xc6
    cfda:	300d      	adds	r0, #13
    cfdc:	8823      	ldrh	r3, [r4, #0]
    cfde:	b280      	uxth	r0, r0
    cfe0:	4283      	cmp	r3, r0
    cfe2:	d802      	bhi.n	cfea <LorawanCheckAndDoRetryOnTimeout+0x82>
    cfe4:	4b19      	ldr	r3, [pc, #100]	; (d04c <LorawanCheckAndDoRetryOnTimeout+0xe4>)
    cfe6:	4798      	blx	r3
    cfe8:	e7f1      	b.n	cfce <LorawanCheckAndDoRetryOnTimeout+0x66>
    cfea:	200e      	movs	r0, #14
    cfec:	4b18      	ldr	r3, [pc, #96]	; (d050 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
    cfee:	4798      	blx	r3
    cff0:	4b18      	ldr	r3, [pc, #96]	; (d054 <LorawanCheckAndDoRetryOnTimeout+0xec>)
    cff2:	4798      	blx	r3
    cff4:	4b18      	ldr	r3, [pc, #96]	; (d058 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
    cff6:	e7f6      	b.n	cfe6 <LorawanCheckAndDoRetryOnTimeout+0x7e>
    cff8:	2012      	movs	r0, #18
    cffa:	4b15      	ldr	r3, [pc, #84]	; (d050 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
    cffc:	4798      	blx	r3
    cffe:	4b15      	ldr	r3, [pc, #84]	; (d054 <LorawanCheckAndDoRetryOnTimeout+0xec>)
    d000:	4798      	blx	r3
    d002:	34f4      	adds	r4, #244	; 0xf4
    d004:	4b14      	ldr	r3, [pc, #80]	; (d058 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
    d006:	4798      	blx	r3
    d008:	7823      	ldrb	r3, [r4, #0]
    d00a:	2b04      	cmp	r3, #4
    d00c:	d1df      	bne.n	cfce <LorawanCheckAndDoRetryOnTimeout+0x66>
    d00e:	4b13      	ldr	r3, [pc, #76]	; (d05c <LorawanCheckAndDoRetryOnTimeout+0xf4>)
    d010:	4798      	blx	r3
    d012:	e7dc      	b.n	cfce <LorawanCheckAndDoRetryOnTimeout+0x66>
    d014:	0023      	movs	r3, r4
    d016:	32db      	adds	r2, #219	; 0xdb
    d018:	33d9      	adds	r3, #217	; 0xd9
    d01a:	7812      	ldrb	r2, [r2, #0]
    d01c:	781b      	ldrb	r3, [r3, #0]
    d01e:	429a      	cmp	r2, r3
    d020:	d804      	bhi.n	d02c <LorawanCheckAndDoRetryOnTimeout+0xc4>
    d022:	23ef      	movs	r3, #239	; 0xef
    d024:	005b      	lsls	r3, r3, #1
    d026:	5ce3      	ldrb	r3, [r4, r3]
    d028:	2b00      	cmp	r3, #0
    d02a:	d1db      	bne.n	cfe4 <LorawanCheckAndDoRetryOnTimeout+0x7c>
    d02c:	4b0c      	ldr	r3, [pc, #48]	; (d060 <LorawanCheckAndDoRetryOnTimeout+0xf8>)
    d02e:	4798      	blx	r3
    d030:	4b09      	ldr	r3, [pc, #36]	; (d058 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
    d032:	4798      	blx	r3
    d034:	2008      	movs	r0, #8
    d036:	4b06      	ldr	r3, [pc, #24]	; (d050 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
    d038:	4798      	blx	r3
    d03a:	e7c8      	b.n	cfce <LorawanCheckAndDoRetryOnTimeout+0x66>
    d03c:	200019b0 	.word	0x200019b0
    d040:	0000d065 	.word	0x0000d065
    d044:	00009795 	.word	0x00009795
    d048:	0000adbd 	.word	0x0000adbd
    d04c:	0000bcdd 	.word	0x0000bcdd
    d050:	0000c1e1 	.word	0x0000c1e1
    d054:	0000b6b9 	.word	0x0000b6b9
    d058:	0000acd1 	.word	0x0000acd1
    d05c:	0000fd25 	.word	0x0000fd25
    d060:	0000b6e9 	.word	0x0000b6e9

0000d064 <AckRetransmissionCallback>:
    d064:	b510      	push	{r4, lr}
    d066:	4c1c      	ldr	r4, [pc, #112]	; (d0d8 <AckRetransmissionCallback+0x74>)
    d068:	0023      	movs	r3, r4
    d06a:	337c      	adds	r3, #124	; 0x7c
    d06c:	781b      	ldrb	r3, [r3, #0]
    d06e:	2b7f      	cmp	r3, #127	; 0x7f
    d070:	d82e      	bhi.n	d0d0 <AckRetransmissionCallback+0x6c>
    d072:	0023      	movs	r3, r4
    d074:	33f4      	adds	r3, #244	; 0xf4
    d076:	781b      	ldrb	r3, [r3, #0]
    d078:	2b04      	cmp	r3, #4
    d07a:	d102      	bne.n	d082 <AckRetransmissionCallback+0x1e>
    d07c:	4b17      	ldr	r3, [pc, #92]	; (d0dc <AckRetransmissionCallback+0x78>)
    d07e:	4798      	blx	r3
    d080:	e01f      	b.n	d0c2 <AckRetransmissionCallback+0x5e>
    d082:	2b01      	cmp	r3, #1
    d084:	d11d      	bne.n	d0c2 <AckRetransmissionCallback+0x5e>
    d086:	0022      	movs	r2, r4
    d088:	0023      	movs	r3, r4
    d08a:	32dc      	adds	r2, #220	; 0xdc
    d08c:	33da      	adds	r3, #218	; 0xda
    d08e:	7812      	ldrb	r2, [r2, #0]
    d090:	781b      	ldrb	r3, [r3, #0]
    d092:	429a      	cmp	r2, r3
    d094:	d816      	bhi.n	d0c4 <AckRetransmissionCallback+0x60>
    d096:	23ef      	movs	r3, #239	; 0xef
    d098:	005b      	lsls	r3, r3, #1
    d09a:	5ce3      	ldrb	r3, [r4, r3]
    d09c:	2b00      	cmp	r3, #0
    d09e:	d011      	beq.n	d0c4 <AckRetransmissionCallback+0x60>
    d0a0:	4b0f      	ldr	r3, [pc, #60]	; (d0e0 <AckRetransmissionCallback+0x7c>)
    d0a2:	4798      	blx	r3
    d0a4:	34c6      	adds	r4, #198	; 0xc6
    d0a6:	300d      	adds	r0, #13
    d0a8:	8823      	ldrh	r3, [r4, #0]
    d0aa:	b280      	uxth	r0, r0
    d0ac:	4283      	cmp	r3, r0
    d0ae:	d801      	bhi.n	d0b4 <AckRetransmissionCallback+0x50>
    d0b0:	4b0c      	ldr	r3, [pc, #48]	; (d0e4 <AckRetransmissionCallback+0x80>)
    d0b2:	e7e4      	b.n	d07e <AckRetransmissionCallback+0x1a>
    d0b4:	4b0c      	ldr	r3, [pc, #48]	; (d0e8 <AckRetransmissionCallback+0x84>)
    d0b6:	4798      	blx	r3
    d0b8:	4b0c      	ldr	r3, [pc, #48]	; (d0ec <AckRetransmissionCallback+0x88>)
    d0ba:	4798      	blx	r3
    d0bc:	200e      	movs	r0, #14
    d0be:	4b0c      	ldr	r3, [pc, #48]	; (d0f0 <AckRetransmissionCallback+0x8c>)
    d0c0:	4798      	blx	r3
    d0c2:	bd10      	pop	{r4, pc}
    d0c4:	4b08      	ldr	r3, [pc, #32]	; (d0e8 <AckRetransmissionCallback+0x84>)
    d0c6:	4798      	blx	r3
    d0c8:	4b08      	ldr	r3, [pc, #32]	; (d0ec <AckRetransmissionCallback+0x88>)
    d0ca:	4798      	blx	r3
    d0cc:	2012      	movs	r0, #18
    d0ce:	e7f6      	b.n	d0be <AckRetransmissionCallback+0x5a>
    d0d0:	4b05      	ldr	r3, [pc, #20]	; (d0e8 <AckRetransmissionCallback+0x84>)
    d0d2:	4798      	blx	r3
    d0d4:	4b05      	ldr	r3, [pc, #20]	; (d0ec <AckRetransmissionCallback+0x88>)
    d0d6:	e7d2      	b.n	d07e <AckRetransmissionCallback+0x1a>
    d0d8:	200019b0 	.word	0x200019b0
    d0dc:	0000cf69 	.word	0x0000cf69
    d0e0:	0000adbd 	.word	0x0000adbd
    d0e4:	0000bcdd 	.word	0x0000bcdd
    d0e8:	0000b6b9 	.word	0x0000b6b9
    d0ec:	0000acd1 	.word	0x0000acd1
    d0f0:	0000c1e1 	.word	0x0000c1e1

0000d0f4 <LORAWAN_RxTimeout>:
    d0f4:	4b22      	ldr	r3, [pc, #136]	; (d180 <LORAWAN_RxTimeout+0x8c>)
    d0f6:	b510      	push	{r4, lr}
    d0f8:	001a      	movs	r2, r3
    d0fa:	327c      	adds	r2, #124	; 0x7c
    d0fc:	7812      	ldrb	r2, [r2, #0]
    d0fe:	b251      	sxtb	r1, r2
    d100:	2900      	cmp	r1, #0
    d102:	db23      	blt.n	d14c <LORAWAN_RxTimeout+0x58>
    d104:	0019      	movs	r1, r3
    d106:	31f4      	adds	r1, #244	; 0xf4
    d108:	7809      	ldrb	r1, [r1, #0]
    d10a:	2904      	cmp	r1, #4
    d10c:	d104      	bne.n	d118 <LORAWAN_RxTimeout+0x24>
    d10e:	07d1      	lsls	r1, r2, #31
    d110:	d502      	bpl.n	d118 <LORAWAN_RxTimeout+0x24>
    d112:	4b1c      	ldr	r3, [pc, #112]	; (d184 <LORAWAN_RxTimeout+0x90>)
    d114:	4798      	blx	r3
    d116:	bd10      	pop	{r4, pc}
    d118:	210e      	movs	r1, #14
    d11a:	0010      	movs	r0, r2
    d11c:	4008      	ands	r0, r1
    d11e:	2806      	cmp	r0, #6
    d120:	d107      	bne.n	d132 <LORAWAN_RxTimeout+0x3e>
    d122:	337c      	adds	r3, #124	; 0x7c
    d124:	781a      	ldrb	r2, [r3, #0]
    d126:	438a      	bics	r2, r1
    d128:	0011      	movs	r1, r2
    d12a:	2208      	movs	r2, #8
    d12c:	430a      	orrs	r2, r1
    d12e:	701a      	strb	r2, [r3, #0]
    d130:	e7f1      	b.n	d116 <LORAWAN_RxTimeout+0x22>
    d132:	2004      	movs	r0, #4
    d134:	338c      	adds	r3, #140	; 0x8c
    d136:	781b      	ldrb	r3, [r3, #0]
    d138:	4203      	tst	r3, r0
    d13a:	d002      	beq.n	d142 <LORAWAN_RxTimeout+0x4e>
    d13c:	4b12      	ldr	r3, [pc, #72]	; (d188 <LORAWAN_RxTimeout+0x94>)
    d13e:	4798      	blx	r3
    d140:	e7e9      	b.n	d116 <LORAWAN_RxTimeout+0x22>
    d142:	07d3      	lsls	r3, r2, #31
    d144:	d5e7      	bpl.n	d116 <LORAWAN_RxTimeout+0x22>
    d146:	4b11      	ldr	r3, [pc, #68]	; (d18c <LORAWAN_RxTimeout+0x98>)
    d148:	4798      	blx	r3
    d14a:	e7e4      	b.n	d116 <LORAWAN_RxTimeout+0x22>
    d14c:	4810      	ldr	r0, [pc, #64]	; (d190 <LORAWAN_RxTimeout+0x9c>)
    d14e:	7841      	ldrb	r1, [r0, #1]
    d150:	7802      	ldrb	r2, [r0, #0]
    d152:	0209      	lsls	r1, r1, #8
    d154:	4311      	orrs	r1, r2
    d156:	7882      	ldrb	r2, [r0, #2]
    d158:	0412      	lsls	r2, r2, #16
    d15a:	4311      	orrs	r1, r2
    d15c:	78c2      	ldrb	r2, [r0, #3]
    d15e:	0612      	lsls	r2, r2, #24
    d160:	430a      	orrs	r2, r1
    d162:	d0d8      	beq.n	d116 <LORAWAN_RxTimeout+0x22>
    d164:	21ea      	movs	r1, #234	; 0xea
    d166:	2001      	movs	r0, #1
    d168:	0049      	lsls	r1, r1, #1
    d16a:	5458      	strb	r0, [r3, r1]
    d16c:	0019      	movs	r1, r3
    d16e:	2404      	movs	r4, #4
    d170:	31ff      	adds	r1, #255	; 0xff
    d172:	33fc      	adds	r3, #252	; 0xfc
    d174:	704c      	strb	r4, [r1, #1]
    d176:	7148      	strb	r0, [r1, #5]
    d178:	4906      	ldr	r1, [pc, #24]	; (d194 <LORAWAN_RxTimeout+0xa0>)
    d17a:	6818      	ldr	r0, [r3, #0]
    d17c:	4790      	blx	r2
    d17e:	e7ca      	b.n	d116 <LORAWAN_RxTimeout+0x22>
    d180:	200019b0 	.word	0x200019b0
    d184:	0000ec29 	.word	0x0000ec29
    d188:	0000b70d 	.word	0x0000b70d
    d18c:	0000cf69 	.word	0x0000cf69
    d190:	20001ca8 	.word	0x20001ca8
    d194:	20001ab0 	.word	0x20001ab0

0000d198 <LorawanConfigureRadioForRX2>:
    d198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d19a:	466b      	mov	r3, sp
    d19c:	4c21      	ldr	r4, [pc, #132]	; (d224 <LorawanConfigureRadioForRX2+0x8c>)
    d19e:	1cdd      	adds	r5, r3, #3
    d1a0:	0023      	movs	r3, r4
    d1a2:	2100      	movs	r1, #0
    d1a4:	338c      	adds	r3, #140	; 0x8c
    d1a6:	781b      	ldrb	r3, [r3, #0]
    d1a8:	0007      	movs	r7, r0
    d1aa:	7029      	strb	r1, [r5, #0]
    d1ac:	075b      	lsls	r3, r3, #29
    d1ae:	d52c      	bpl.n	d20a <LorawanConfigureRadioForRX2+0x72>
    d1b0:	002a      	movs	r2, r5
    d1b2:	2009      	movs	r0, #9
    d1b4:	4b1c      	ldr	r3, [pc, #112]	; (d228 <LorawanConfigureRadioForRX2+0x90>)
    d1b6:	4798      	blx	r3
    d1b8:	0022      	movs	r2, r4
    d1ba:	0023      	movs	r3, r4
    d1bc:	326c      	adds	r2, #108	; 0x6c
    d1be:	8811      	ldrh	r1, [r2, #0]
    d1c0:	336a      	adds	r3, #106	; 0x6a
    d1c2:	881b      	ldrh	r3, [r3, #0]
    d1c4:	0409      	lsls	r1, r1, #16
    d1c6:	4319      	orrs	r1, r3
    d1c8:	7828      	ldrb	r0, [r5, #0]
    d1ca:	4b18      	ldr	r3, [pc, #96]	; (d22c <LorawanConfigureRadioForRX2+0x94>)
    d1cc:	4798      	blx	r3
    d1ce:	2300      	movs	r3, #0
    d1d0:	0022      	movs	r2, r4
    d1d2:	ae01      	add	r6, sp, #4
    d1d4:	7033      	strb	r3, [r6, #0]
    d1d6:	32f4      	adds	r2, #244	; 0xf4
    d1d8:	7812      	ldrb	r2, [r2, #0]
    d1da:	2a04      	cmp	r2, #4
    d1dc:	d11a      	bne.n	d214 <LorawanConfigureRadioForRX2+0x7c>
    d1de:	347c      	adds	r4, #124	; 0x7c
    d1e0:	7822      	ldrb	r2, [r4, #0]
    d1e2:	07d2      	lsls	r2, r2, #31
    d1e4:	d516      	bpl.n	d214 <LorawanConfigureRadioForRX2+0x7c>
    d1e6:	8073      	strh	r3, [r6, #2]
    d1e8:	0030      	movs	r0, r6
    d1ea:	4b11      	ldr	r3, [pc, #68]	; (d230 <LorawanConfigureRadioForRX2+0x98>)
    d1ec:	4798      	blx	r3
    d1ee:	1e04      	subs	r4, r0, #0
    d1f0:	d00a      	beq.n	d208 <LorawanConfigureRadioForRX2+0x70>
    d1f2:	4b10      	ldr	r3, [pc, #64]	; (d234 <LorawanConfigureRadioForRX2+0x9c>)
    d1f4:	4798      	blx	r3
    d1f6:	4b10      	ldr	r3, [pc, #64]	; (d238 <LorawanConfigureRadioForRX2+0xa0>)
    d1f8:	4798      	blx	r3
    d1fa:	4b10      	ldr	r3, [pc, #64]	; (d23c <LorawanConfigureRadioForRX2+0xa4>)
    d1fc:	4798      	blx	r3
    d1fe:	2f00      	cmp	r7, #0
    d200:	d002      	beq.n	d208 <LorawanConfigureRadioForRX2+0x70>
    d202:	0020      	movs	r0, r4
    d204:	4b0e      	ldr	r3, [pc, #56]	; (d240 <LorawanConfigureRadioForRX2+0xa8>)
    d206:	4798      	blx	r3
    d208:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    d20a:	0023      	movs	r3, r4
    d20c:	336e      	adds	r3, #110	; 0x6e
    d20e:	781b      	ldrb	r3, [r3, #0]
    d210:	702b      	strb	r3, [r5, #0]
    d212:	e7d1      	b.n	d1b8 <LorawanConfigureRadioForRX2+0x20>
    d214:	466b      	mov	r3, sp
    d216:	0029      	movs	r1, r5
    d218:	1d9a      	adds	r2, r3, #6
    d21a:	2003      	movs	r0, #3
    d21c:	4b02      	ldr	r3, [pc, #8]	; (d228 <LorawanConfigureRadioForRX2+0x90>)
    d21e:	4798      	blx	r3
    d220:	e7e2      	b.n	d1e8 <LorawanConfigureRadioForRX2+0x50>
    d222:	46c0      	nop			; (mov r8, r8)
    d224:	200019b0 	.word	0x200019b0
    d228:	00008755 	.word	0x00008755
    d22c:	0000bb8d 	.word	0x0000bb8d
    d230:	00010615 	.word	0x00010615
    d234:	0000b6b9 	.word	0x0000b6b9
    d238:	0000b6e9 	.word	0x0000b6e9
    d23c:	0000acd1 	.word	0x0000acd1
    d240:	0000c1e1 	.word	0x0000c1e1

0000d244 <LorawanReceiveWindow2Callback>:
    d244:	b570      	push	{r4, r5, r6, lr}
    d246:	4c16      	ldr	r4, [pc, #88]	; (d2a0 <LorawanReceiveWindow2Callback+0x5c>)
    d248:	0025      	movs	r5, r4
    d24a:	357c      	adds	r5, #124	; 0x7c
    d24c:	782b      	ldrb	r3, [r5, #0]
    d24e:	2b7f      	cmp	r3, #127	; 0x7f
    d250:	d811      	bhi.n	d276 <LorawanReceiveWindow2Callback+0x32>
    d252:	4b14      	ldr	r3, [pc, #80]	; (d2a4 <LorawanReceiveWindow2Callback+0x60>)
    d254:	4798      	blx	r3
    d256:	2801      	cmp	r0, #1
    d258:	d109      	bne.n	d26e <LorawanReceiveWindow2Callback+0x2a>
    d25a:	220e      	movs	r2, #14
    d25c:	782b      	ldrb	r3, [r5, #0]
    d25e:	4393      	bics	r3, r2
    d260:	001a      	movs	r2, r3
    d262:	230a      	movs	r3, #10
    d264:	4313      	orrs	r3, r2
    d266:	702b      	strb	r3, [r5, #0]
    d268:	4b0f      	ldr	r3, [pc, #60]	; (d2a8 <LorawanReceiveWindow2Callback+0x64>)
    d26a:	4798      	blx	r3
    d26c:	bd70      	pop	{r4, r5, r6, pc}
    d26e:	2301      	movs	r3, #1
    d270:	34f0      	adds	r4, #240	; 0xf0
    d272:	7023      	strb	r3, [r4, #0]
    d274:	e7fa      	b.n	d26c <LorawanReceiveWindow2Callback+0x28>
    d276:	2104      	movs	r1, #4
    d278:	348c      	adds	r4, #140	; 0x8c
    d27a:	7822      	ldrb	r2, [r4, #0]
    d27c:	420a      	tst	r2, r1
    d27e:	d007      	beq.n	d290 <LorawanReceiveWindow2Callback+0x4c>
    d280:	2001      	movs	r0, #1
    d282:	4383      	bics	r3, r0
    d284:	438a      	bics	r2, r1
    d286:	702b      	strb	r3, [r5, #0]
    d288:	3107      	adds	r1, #7
    d28a:	4b08      	ldr	r3, [pc, #32]	; (d2ac <LorawanReceiveWindow2Callback+0x68>)
    d28c:	7022      	strb	r2, [r4, #0]
    d28e:	4798      	blx	r3
    d290:	4b07      	ldr	r3, [pc, #28]	; (d2b0 <LorawanReceiveWindow2Callback+0x6c>)
    d292:	4798      	blx	r3
    d294:	4b07      	ldr	r3, [pc, #28]	; (d2b4 <LorawanReceiveWindow2Callback+0x70>)
    d296:	4798      	blx	r3
    d298:	4b07      	ldr	r3, [pc, #28]	; (d2b8 <LorawanReceiveWindow2Callback+0x74>)
    d29a:	4798      	blx	r3
    d29c:	e7e6      	b.n	d26c <LorawanReceiveWindow2Callback+0x28>
    d29e:	46c0      	nop			; (mov r8, r8)
    d2a0:	200019b0 	.word	0x200019b0
    d2a4:	0000fd25 	.word	0x0000fd25
    d2a8:	0000d199 	.word	0x0000d199
    d2ac:	00008d6d 	.word	0x00008d6d
    d2b0:	0000b6e9 	.word	0x0000b6e9
    d2b4:	0000b6b9 	.word	0x0000b6b9
    d2b8:	0000acd1 	.word	0x0000acd1

0000d2bc <SetReceptionNotOkState>:
    d2bc:	22ea      	movs	r2, #234	; 0xea
    d2be:	2101      	movs	r1, #1
    d2c0:	4b19      	ldr	r3, [pc, #100]	; (d328 <SetReceptionNotOkState+0x6c>)
    d2c2:	0052      	lsls	r2, r2, #1
    d2c4:	b510      	push	{r4, lr}
    d2c6:	5499      	strb	r1, [r3, r2]
    d2c8:	001a      	movs	r2, r3
    d2ca:	0019      	movs	r1, r3
    d2cc:	32f4      	adds	r2, #244	; 0xf4
    d2ce:	7812      	ldrb	r2, [r2, #0]
    d2d0:	317c      	adds	r1, #124	; 0x7c
    d2d2:	200e      	movs	r0, #14
    d2d4:	2a01      	cmp	r2, #1
    d2d6:	d11d      	bne.n	d314 <SetReceptionNotOkState+0x58>
    d2d8:	780a      	ldrb	r2, [r1, #0]
    d2da:	4002      	ands	r2, r0
    d2dc:	2a0a      	cmp	r2, #10
    d2de:	d006      	beq.n	d2ee <SetReceptionNotOkState+0x32>
    d2e0:	2a06      	cmp	r2, #6
    d2e2:	d113      	bne.n	d30c <SetReceptionNotOkState+0x50>
    d2e4:	001a      	movs	r2, r3
    d2e6:	32f0      	adds	r2, #240	; 0xf0
    d2e8:	7812      	ldrb	r2, [r2, #0]
    d2ea:	2a00      	cmp	r2, #0
    d2ec:	d00e      	beq.n	d30c <SetReceptionNotOkState+0x50>
    d2ee:	0019      	movs	r1, r3
    d2f0:	2001      	movs	r0, #1
    d2f2:	318c      	adds	r1, #140	; 0x8c
    d2f4:	780a      	ldrb	r2, [r1, #0]
    d2f6:	240e      	movs	r4, #14
    d2f8:	4382      	bics	r2, r0
    d2fa:	700a      	strb	r2, [r1, #0]
    d2fc:	001a      	movs	r2, r3
    d2fe:	327c      	adds	r2, #124	; 0x7c
    d300:	7811      	ldrb	r1, [r2, #0]
    d302:	43a1      	bics	r1, r4
    d304:	7011      	strb	r1, [r2, #0]
    d306:	7851      	ldrb	r1, [r2, #1]
    d308:	4381      	bics	r1, r0
    d30a:	7051      	strb	r1, [r2, #1]
    d30c:	2200      	movs	r2, #0
    d30e:	33f0      	adds	r3, #240	; 0xf0
    d310:	701a      	strb	r2, [r3, #0]
    d312:	bd10      	pop	{r4, pc}
    d314:	230a      	movs	r3, #10
    d316:	780a      	ldrb	r2, [r1, #0]
    d318:	4382      	bics	r2, r0
    d31a:	4313      	orrs	r3, r2
    d31c:	700b      	strb	r3, [r1, #0]
    d31e:	2000      	movs	r0, #0
    d320:	4b02      	ldr	r3, [pc, #8]	; (d32c <SetReceptionNotOkState+0x70>)
    d322:	4798      	blx	r3
    d324:	e7f5      	b.n	d312 <SetReceptionNotOkState+0x56>
    d326:	46c0      	nop			; (mov r8, r8)
    d328:	200019b0 	.word	0x200019b0
    d32c:	0000d199 	.word	0x0000d199

0000d330 <UpdateCurrentDataRateAfterDataRangeChanges>:
    d330:	4b09      	ldr	r3, [pc, #36]	; (d358 <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
    d332:	001a      	movs	r2, r3
    d334:	32eb      	adds	r2, #235	; 0xeb
    d336:	7811      	ldrb	r1, [r2, #0]
    d338:	001a      	movs	r2, r3
    d33a:	32df      	adds	r2, #223	; 0xdf
    d33c:	7810      	ldrb	r0, [r2, #0]
    d33e:	4288      	cmp	r0, r1
    d340:	d900      	bls.n	d344 <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
    d342:	7011      	strb	r1, [r2, #0]
    d344:	001a      	movs	r2, r3
    d346:	33df      	adds	r3, #223	; 0xdf
    d348:	32ea      	adds	r2, #234	; 0xea
    d34a:	7812      	ldrb	r2, [r2, #0]
    d34c:	7819      	ldrb	r1, [r3, #0]
    d34e:	4291      	cmp	r1, r2
    d350:	d200      	bcs.n	d354 <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
    d352:	701a      	strb	r2, [r3, #0]
    d354:	4770      	bx	lr
    d356:	46c0      	nop			; (mov r8, r8)
    d358:	200019b0 	.word	0x200019b0

0000d35c <ExecuteNewChannel>:
    d35c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d35e:	b08d      	sub	sp, #52	; 0x34
    d360:	7807      	ldrb	r7, [r0, #0]
    d362:	ab02      	add	r3, sp, #8
    d364:	0006      	movs	r6, r0
    d366:	71df      	strb	r7, [r3, #7]
    d368:	1c41      	adds	r1, r0, #1
    d36a:	4b59      	ldr	r3, [pc, #356]	; (d4d0 <ExecuteNewChannel+0x174>)
    d36c:	2204      	movs	r2, #4
    d36e:	a808      	add	r0, sp, #32
    d370:	4798      	blx	r3
    d372:	9b08      	ldr	r3, [sp, #32]
    d374:	4c57      	ldr	r4, [pc, #348]	; (d4d4 <ExecuteNewChannel+0x178>)
    d376:	021d      	lsls	r5, r3, #8
    d378:	2364      	movs	r3, #100	; 0x64
    d37a:	0a2d      	lsrs	r5, r5, #8
    d37c:	435d      	muls	r5, r3
    d37e:	1d73      	adds	r3, r6, #5
    d380:	9301      	str	r3, [sp, #4]
    d382:	0023      	movs	r3, r4
    d384:	9508      	str	r5, [sp, #32]
    d386:	33f6      	adds	r3, #246	; 0xf6
    d388:	781b      	ldrb	r3, [r3, #0]
    d38a:	3b02      	subs	r3, #2
    d38c:	2b01      	cmp	r3, #1
    d38e:	d800      	bhi.n	d392 <ExecuteNewChannel+0x36>
    d390:	e092      	b.n	d4b8 <ExecuteNewChannel+0x15c>
    d392:	7933      	ldrb	r3, [r6, #4]
    d394:	a904      	add	r1, sp, #16
    d396:	9300      	str	r3, [sp, #0]
    d398:	2300      	movs	r3, #0
    d39a:	2015      	movs	r0, #21
    d39c:	4e4e      	ldr	r6, [pc, #312]	; (d4d8 <ExecuteNewChannel+0x17c>)
    d39e:	700f      	strb	r7, [r1, #0]
    d3a0:	704b      	strb	r3, [r1, #1]
    d3a2:	47b0      	blx	r6
    d3a4:	2808      	cmp	r0, #8
    d3a6:	d12b      	bne.n	d400 <ExecuteNewChannel+0xa4>
    d3a8:	466a      	mov	r2, sp
    d3aa:	ab02      	add	r3, sp, #8
    d3ac:	79db      	ldrb	r3, [r3, #7]
    d3ae:	7812      	ldrb	r2, [r2, #0]
    d3b0:	af06      	add	r7, sp, #24
    d3b2:	a90a      	add	r1, sp, #40	; 0x28
    d3b4:	3806      	subs	r0, #6
    d3b6:	703b      	strb	r3, [r7, #0]
    d3b8:	707a      	strb	r2, [r7, #1]
    d3ba:	710b      	strb	r3, [r1, #4]
    d3bc:	950a      	str	r5, [sp, #40]	; 0x28
    d3be:	47b0      	blx	r6
    d3c0:	2808      	cmp	r0, #8
    d3c2:	d001      	beq.n	d3c8 <ExecuteNewChannel+0x6c>
    d3c4:	2d00      	cmp	r5, #0
    d3c6:	d10b      	bne.n	d3e0 <ExecuteNewChannel+0x84>
    d3c8:	0023      	movs	r3, r4
    d3ca:	33d8      	adds	r3, #216	; 0xd8
    d3cc:	781a      	ldrb	r2, [r3, #0]
    d3ce:	2303      	movs	r3, #3
    d3d0:	4353      	muls	r3, r2
    d3d2:	2280      	movs	r2, #128	; 0x80
    d3d4:	18e3      	adds	r3, r4, r3
    d3d6:	3390      	adds	r3, #144	; 0x90
    d3d8:	7899      	ldrb	r1, [r3, #2]
    d3da:	4252      	negs	r2, r2
    d3dc:	430a      	orrs	r2, r1
    d3de:	709a      	strb	r2, [r3, #2]
    d3e0:	0039      	movs	r1, r7
    d3e2:	2012      	movs	r0, #18
    d3e4:	47b0      	blx	r6
    d3e6:	2808      	cmp	r0, #8
    d3e8:	d10a      	bne.n	d400 <ExecuteNewChannel+0xa4>
    d3ea:	0023      	movs	r3, r4
    d3ec:	33d8      	adds	r3, #216	; 0xd8
    d3ee:	781a      	ldrb	r2, [r3, #0]
    d3f0:	2303      	movs	r3, #3
    d3f2:	4353      	muls	r3, r2
    d3f4:	2240      	movs	r2, #64	; 0x40
    d3f6:	18e3      	adds	r3, r4, r3
    d3f8:	3390      	adds	r3, #144	; 0x90
    d3fa:	7899      	ldrb	r1, [r3, #2]
    d3fc:	430a      	orrs	r2, r1
    d3fe:	709a      	strb	r2, [r3, #2]
    d400:	0023      	movs	r3, r4
    d402:	33d8      	adds	r3, #216	; 0xd8
    d404:	781a      	ldrb	r2, [r3, #0]
    d406:	2303      	movs	r3, #3
    d408:	4353      	muls	r3, r2
    d40a:	18e3      	adds	r3, r4, r3
    d40c:	3390      	adds	r3, #144	; 0x90
    d40e:	789b      	ldrb	r3, [r3, #2]
    d410:	09da      	lsrs	r2, r3, #7
    d412:	2a01      	cmp	r2, #1
    d414:	d150      	bne.n	d4b8 <ExecuteNewChannel+0x15c>
    d416:	065b      	lsls	r3, r3, #25
    d418:	d54e      	bpl.n	d4b8 <ExecuteNewChannel+0x15c>
    d41a:	4e30      	ldr	r6, [pc, #192]	; (d4dc <ExecuteNewChannel+0x180>)
    d41c:	2d00      	cmp	r5, #0
    d41e:	d04e      	beq.n	d4be <ExecuteNewChannel+0x162>
    d420:	a906      	add	r1, sp, #24
    d422:	2012      	movs	r0, #18
    d424:	47b0      	blx	r6
    d426:	ad07      	add	r5, sp, #28
    d428:	a90a      	add	r1, sp, #40	; 0x28
    d42a:	2000      	movs	r0, #0
    d42c:	47b0      	blx	r6
    d42e:	002a      	movs	r2, r5
    d430:	2100      	movs	r1, #0
    d432:	2014      	movs	r0, #20
    d434:	4f2a      	ldr	r7, [pc, #168]	; (d4e0 <ExecuteNewChannel+0x184>)
    d436:	47b8      	blx	r7
    d438:	0023      	movs	r3, r4
    d43a:	782a      	ldrb	r2, [r5, #0]
    d43c:	33ea      	adds	r3, #234	; 0xea
    d43e:	701a      	strb	r2, [r3, #0]
    d440:	0023      	movs	r3, r4
    d442:	786a      	ldrb	r2, [r5, #1]
    d444:	33eb      	adds	r3, #235	; 0xeb
    d446:	701a      	strb	r2, [r3, #0]
    d448:	34ff      	adds	r4, #255	; 0xff
    d44a:	4b26      	ldr	r3, [pc, #152]	; (d4e4 <ExecuteNewChannel+0x188>)
    d44c:	4798      	blx	r3
    d44e:	7c63      	ldrb	r3, [r4, #17]
    d450:	079b      	lsls	r3, r3, #30
    d452:	d50e      	bpl.n	d472 <ExecuteNewChannel+0x116>
    d454:	2416      	movs	r4, #22
    d456:	ab02      	add	r3, sp, #8
    d458:	18e4      	adds	r4, r4, r3
    d45a:	1dd9      	adds	r1, r3, #7
    d45c:	0022      	movs	r2, r4
    d45e:	201e      	movs	r0, #30
    d460:	47b8      	blx	r7
    d462:	ab02      	add	r3, sp, #8
    d464:	79db      	ldrb	r3, [r3, #7]
    d466:	a909      	add	r1, sp, #36	; 0x24
    d468:	708b      	strb	r3, [r1, #2]
    d46a:	8823      	ldrh	r3, [r4, #0]
    d46c:	201e      	movs	r0, #30
    d46e:	800b      	strh	r3, [r1, #0]
    d470:	47b0      	blx	r6
    d472:	ab02      	add	r3, sp, #8
    d474:	79db      	ldrb	r3, [r3, #7]
    d476:	a905      	add	r1, sp, #20
    d478:	700b      	strb	r3, [r1, #0]
    d47a:	2301      	movs	r3, #1
    d47c:	2016      	movs	r0, #22
    d47e:	704b      	strb	r3, [r1, #1]
    d480:	4b16      	ldr	r3, [pc, #88]	; (d4dc <ExecuteNewChannel+0x180>)
    d482:	4798      	blx	r3
    d484:	ad09      	add	r5, sp, #36	; 0x24
    d486:	2100      	movs	r1, #0
    d488:	002a      	movs	r2, r5
    d48a:	4b15      	ldr	r3, [pc, #84]	; (d4e0 <ExecuteNewChannel+0x184>)
    d48c:	2014      	movs	r0, #20
    d48e:	4798      	blx	r3
    d490:	4c10      	ldr	r4, [pc, #64]	; (d4d4 <ExecuteNewChannel+0x178>)
    d492:	782a      	ldrb	r2, [r5, #0]
    d494:	0023      	movs	r3, r4
    d496:	33ea      	adds	r3, #234	; 0xea
    d498:	701a      	strb	r2, [r3, #0]
    d49a:	0023      	movs	r3, r4
    d49c:	786a      	ldrb	r2, [r5, #1]
    d49e:	33eb      	adds	r3, #235	; 0xeb
    d4a0:	701a      	strb	r2, [r3, #0]
    d4a2:	4b10      	ldr	r3, [pc, #64]	; (d4e4 <ExecuteNewChannel+0x188>)
    d4a4:	4798      	blx	r3
    d4a6:	2304      	movs	r3, #4
    d4a8:	347c      	adds	r4, #124	; 0x7c
    d4aa:	7862      	ldrb	r2, [r4, #1]
    d4ac:	210b      	movs	r1, #11
    d4ae:	4313      	orrs	r3, r2
    d4b0:	7063      	strb	r3, [r4, #1]
    d4b2:	2001      	movs	r0, #1
    d4b4:	4b0c      	ldr	r3, [pc, #48]	; (d4e8 <ExecuteNewChannel+0x18c>)
    d4b6:	4798      	blx	r3
    d4b8:	9801      	ldr	r0, [sp, #4]
    d4ba:	b00d      	add	sp, #52	; 0x34
    d4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d4be:	ab02      	add	r3, sp, #8
    d4c0:	79db      	ldrb	r3, [r3, #7]
    d4c2:	a905      	add	r1, sp, #20
    d4c4:	2016      	movs	r0, #22
    d4c6:	700b      	strb	r3, [r1, #0]
    d4c8:	704d      	strb	r5, [r1, #1]
    d4ca:	47b0      	blx	r6
    d4cc:	e7da      	b.n	d484 <ExecuteNewChannel+0x128>
    d4ce:	46c0      	nop			; (mov r8, r8)
    d4d0:	00013e5d 	.word	0x00013e5d
    d4d4:	200019b0 	.word	0x200019b0
    d4d8:	00008771 	.word	0x00008771
    d4dc:	0000887d 	.word	0x0000887d
    d4e0:	00008755 	.word	0x00008755
    d4e4:	0000d331 	.word	0x0000d331
    d4e8:	00008d6d 	.word	0x00008d6d

0000d4ec <MacExecuteCommands>:
    d4ec:	2300      	movs	r3, #0
    d4ee:	b5f0      	push	{r4, r5, r6, r7, lr}
    d4f0:	0007      	movs	r7, r0
    d4f2:	2501      	movs	r5, #1
    d4f4:	b087      	sub	sp, #28
    d4f6:	9002      	str	r0, [sp, #8]
    d4f8:	9103      	str	r1, [sp, #12]
    d4fa:	9300      	str	r3, [sp, #0]
    d4fc:	9b02      	ldr	r3, [sp, #8]
    d4fe:	9a03      	ldr	r2, [sp, #12]
    d500:	4e63      	ldr	r6, [pc, #396]	; (d690 <MacExecuteCommands+0x1a4>)
    d502:	1898      	adds	r0, r3, r2
    d504:	4287      	cmp	r7, r0
    d506:	d353      	bcc.n	d5b0 <MacExecuteCommands+0xc4>
    d508:	23ed      	movs	r3, #237	; 0xed
    d50a:	005b      	lsls	r3, r3, #1
    d50c:	5cf3      	ldrb	r3, [r6, r3]
    d50e:	2b00      	cmp	r3, #0
    d510:	d000      	beq.n	d514 <MacExecuteCommands+0x28>
    d512:	e072      	b.n	d5fa <MacExecuteCommands+0x10e>
    d514:	0038      	movs	r0, r7
    d516:	b007      	add	sp, #28
    d518:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d51a:	0033      	movs	r3, r6
    d51c:	787a      	ldrb	r2, [r7, #1]
    d51e:	33dd      	adds	r3, #221	; 0xdd
    d520:	701a      	strb	r2, [r3, #0]
    d522:	0033      	movs	r3, r6
    d524:	78ba      	ldrb	r2, [r7, #2]
    d526:	33de      	adds	r3, #222	; 0xde
    d528:	701a      	strb	r2, [r3, #0]
    d52a:	2203      	movs	r2, #3
    d52c:	9b01      	ldr	r3, [sp, #4]
    d52e:	1cfc      	adds	r4, r7, #3
    d530:	4353      	muls	r3, r2
    d532:	18f3      	adds	r3, r6, r3
    d534:	3391      	adds	r3, #145	; 0x91
    d536:	32fc      	adds	r2, #252	; 0xfc
    d538:	701a      	strb	r2, [r3, #0]
    d53a:	0032      	movs	r2, r6
    d53c:	2103      	movs	r1, #3
    d53e:	32d8      	adds	r2, #216	; 0xd8
    d540:	7813      	ldrb	r3, [r2, #0]
    d542:	4359      	muls	r1, r3
    d544:	1876      	adds	r6, r6, r1
    d546:	3691      	adds	r6, #145	; 0x91
    d548:	7831      	ldrb	r1, [r6, #0]
    d54a:	29ff      	cmp	r1, #255	; 0xff
    d54c:	d003      	beq.n	d556 <MacExecuteCommands+0x6a>
    d54e:	2b0f      	cmp	r3, #15
    d550:	d801      	bhi.n	d556 <MacExecuteCommands+0x6a>
    d552:	3301      	adds	r3, #1
    d554:	7013      	strb	r3, [r2, #0]
    d556:	0027      	movs	r7, r4
    d558:	e7d0      	b.n	d4fc <MacExecuteCommands+0x10>
    d55a:	0020      	movs	r0, r4
    d55c:	4b4d      	ldr	r3, [pc, #308]	; (d694 <MacExecuteCommands+0x1a8>)
    d55e:	4798      	blx	r3
    d560:	0004      	movs	r4, r0
    d562:	e7ea      	b.n	d53a <MacExecuteCommands+0x4e>
    d564:	0020      	movs	r0, r4
    d566:	4b4c      	ldr	r3, [pc, #304]	; (d698 <MacExecuteCommands+0x1ac>)
    d568:	e7f9      	b.n	d55e <MacExecuteCommands+0x72>
    d56a:	0020      	movs	r0, r4
    d56c:	4b4b      	ldr	r3, [pc, #300]	; (d69c <MacExecuteCommands+0x1b0>)
    d56e:	e7f6      	b.n	d55e <MacExecuteCommands+0x72>
    d570:	0020      	movs	r0, r4
    d572:	4b4b      	ldr	r3, [pc, #300]	; (d6a0 <MacExecuteCommands+0x1b4>)
    d574:	e7f3      	b.n	d55e <MacExecuteCommands+0x72>
    d576:	230f      	movs	r3, #15
    d578:	7878      	ldrb	r0, [r7, #1]
    d57a:	1cbc      	adds	r4, r7, #2
    d57c:	4018      	ands	r0, r3
    d57e:	4b49      	ldr	r3, [pc, #292]	; (d6a4 <MacExecuteCommands+0x1b8>)
    d580:	4798      	blx	r3
    d582:	0032      	movs	r2, r6
    d584:	2380      	movs	r3, #128	; 0x80
    d586:	327c      	adds	r2, #124	; 0x7c
    d588:	7851      	ldrb	r1, [r2, #1]
    d58a:	425b      	negs	r3, r3
    d58c:	430b      	orrs	r3, r1
    d58e:	7053      	strb	r3, [r2, #1]
    d590:	210b      	movs	r1, #11
    d592:	0028      	movs	r0, r5
    d594:	4b44      	ldr	r3, [pc, #272]	; (d6a8 <MacExecuteCommands+0x1bc>)
    d596:	4798      	blx	r3
    d598:	e7cf      	b.n	d53a <MacExecuteCommands+0x4e>
    d59a:	0020      	movs	r0, r4
    d59c:	4b43      	ldr	r3, [pc, #268]	; (d6ac <MacExecuteCommands+0x1c0>)
    d59e:	e7de      	b.n	d55e <MacExecuteCommands+0x72>
    d5a0:	0020      	movs	r0, r4
    d5a2:	4b43      	ldr	r3, [pc, #268]	; (d6b0 <MacExecuteCommands+0x1c4>)
    d5a4:	e7db      	b.n	d55e <MacExecuteCommands+0x72>
    d5a6:	22ff      	movs	r2, #255	; 0xff
    d5a8:	0004      	movs	r4, r0
    d5aa:	701a      	strb	r2, [r3, #0]
    d5ac:	9500      	str	r5, [sp, #0]
    d5ae:	e7c4      	b.n	d53a <MacExecuteCommands+0x4e>
    d5b0:	9b00      	ldr	r3, [sp, #0]
    d5b2:	2b00      	cmp	r3, #0
    d5b4:	d1a8      	bne.n	d508 <MacExecuteCommands+0x1c>
    d5b6:	0033      	movs	r3, r6
    d5b8:	33d8      	adds	r3, #216	; 0xd8
    d5ba:	781b      	ldrb	r3, [r3, #0]
    d5bc:	2401      	movs	r4, #1
    d5be:	9301      	str	r3, [sp, #4]
    d5c0:	2303      	movs	r3, #3
    d5c2:	9a01      	ldr	r2, [sp, #4]
    d5c4:	4353      	muls	r3, r2
    d5c6:	18f3      	adds	r3, r6, r3
    d5c8:	0019      	movs	r1, r3
    d5ca:	3190      	adds	r1, #144	; 0x90
    d5cc:	788a      	ldrb	r2, [r1, #2]
    d5ce:	3391      	adds	r3, #145	; 0x91
    d5d0:	43aa      	bics	r2, r5
    d5d2:	4022      	ands	r2, r4
    d5d4:	708a      	strb	r2, [r1, #2]
    d5d6:	78ca      	ldrb	r2, [r1, #3]
    d5d8:	193c      	adds	r4, r7, r4
    d5da:	43aa      	bics	r2, r5
    d5dc:	70ca      	strb	r2, [r1, #3]
    d5de:	783a      	ldrb	r2, [r7, #0]
    d5e0:	701a      	strb	r2, [r3, #0]
    d5e2:	783a      	ldrb	r2, [r7, #0]
    d5e4:	3a02      	subs	r2, #2
    d5e6:	2a08      	cmp	r2, #8
    d5e8:	d8dd      	bhi.n	d5a6 <MacExecuteCommands+0xba>
    d5ea:	0010      	movs	r0, r2
    d5ec:	f003 fbf0 	bl	10dd0 <__gnu_thumb1_case_sqi>
    d5f0:	bdbab595 	.word	0xbdbab595
    d5f4:	d5c3c0a5 	.word	0xd5c3c0a5
    d5f8:	d8          	.byte	0xd8
    d5f9:	00          	.byte	0x00
    d5fa:	23d8      	movs	r3, #216	; 0xd8
    d5fc:	33ff      	adds	r3, #255	; 0xff
    d5fe:	5cf3      	ldrb	r3, [r6, r3]
    d600:	43db      	mvns	r3, r3
    d602:	075b      	lsls	r3, r3, #29
    d604:	d000      	beq.n	d608 <MacExecuteCommands+0x11c>
    d606:	e785      	b.n	d514 <MacExecuteCommands+0x28>
    d608:	23de      	movs	r3, #222	; 0xde
    d60a:	33ff      	adds	r3, #255	; 0xff
    d60c:	5cf4      	ldrb	r4, [r6, r3]
    d60e:	ad05      	add	r5, sp, #20
    d610:	0724      	lsls	r4, r4, #28
    d612:	0f24      	lsrs	r4, r4, #28
    d614:	b2e3      	uxtb	r3, r4
    d616:	9300      	str	r3, [sp, #0]
    d618:	23da      	movs	r3, #218	; 0xda
    d61a:	33ff      	adds	r3, #255	; 0xff
    d61c:	5cf3      	ldrb	r3, [r6, r3]
    d61e:	2100      	movs	r1, #0
    d620:	9301      	str	r3, [sp, #4]
    d622:	23ec      	movs	r3, #236	; 0xec
    d624:	005b      	lsls	r3, r3, #1
    d626:	5cf3      	ldrb	r3, [r6, r3]
    d628:	002a      	movs	r2, r5
    d62a:	9302      	str	r3, [sp, #8]
    d62c:	2014      	movs	r0, #20
    d62e:	4b21      	ldr	r3, [pc, #132]	; (d6b4 <MacExecuteCommands+0x1c8>)
    d630:	4798      	blx	r3
    d632:	0033      	movs	r3, r6
    d634:	782a      	ldrb	r2, [r5, #0]
    d636:	33ea      	adds	r3, #234	; 0xea
    d638:	701a      	strb	r2, [r3, #0]
    d63a:	0033      	movs	r3, r6
    d63c:	786a      	ldrb	r2, [r5, #1]
    d63e:	33eb      	adds	r3, #235	; 0xeb
    d640:	701a      	strb	r2, [r3, #0]
    d642:	4b1d      	ldr	r3, [pc, #116]	; (d6b8 <MacExecuteCommands+0x1cc>)
    d644:	4798      	blx	r3
    d646:	9801      	ldr	r0, [sp, #4]
    d648:	4b1c      	ldr	r3, [pc, #112]	; (d6bc <MacExecuteCommands+0x1d0>)
    d64a:	4798      	blx	r3
    d64c:	0032      	movs	r2, r6
    d64e:	2308      	movs	r3, #8
    d650:	327c      	adds	r2, #124	; 0x7c
    d652:	7851      	ldrb	r1, [r2, #1]
    d654:	430b      	orrs	r3, r1
    d656:	7053      	strb	r3, [r2, #1]
    d658:	9802      	ldr	r0, [sp, #8]
    d65a:	4b19      	ldr	r3, [pc, #100]	; (d6c0 <MacExecuteCommands+0x1d4>)
    d65c:	4798      	blx	r3
    d65e:	0033      	movs	r3, r6
    d660:	b2e2      	uxtb	r2, r4
    d662:	33d9      	adds	r3, #217	; 0xd9
    d664:	2a00      	cmp	r2, #0
    d666:	d10e      	bne.n	d686 <MacExecuteCommands+0x19a>
    d668:	701c      	strb	r4, [r3, #0]
    d66a:	2114      	movs	r1, #20
    d66c:	4c0e      	ldr	r4, [pc, #56]	; (d6a8 <MacExecuteCommands+0x1bc>)
    d66e:	2000      	movs	r0, #0
    d670:	47a0      	blx	r4
    d672:	2210      	movs	r2, #16
    d674:	4b06      	ldr	r3, [pc, #24]	; (d690 <MacExecuteCommands+0x1a4>)
    d676:	2001      	movs	r0, #1
    d678:	337c      	adds	r3, #124	; 0x7c
    d67a:	7859      	ldrb	r1, [r3, #1]
    d67c:	430a      	orrs	r2, r1
    d67e:	705a      	strb	r2, [r3, #1]
    d680:	210b      	movs	r1, #11
    d682:	47a0      	blx	r4
    d684:	e746      	b.n	d514 <MacExecuteCommands+0x28>
    d686:	9a00      	ldr	r2, [sp, #0]
    d688:	3a01      	subs	r2, #1
    d68a:	701a      	strb	r2, [r3, #0]
    d68c:	e7ed      	b.n	d66a <MacExecuteCommands+0x17e>
    d68e:	46c0      	nop			; (mov r8, r8)
    d690:	200019b0 	.word	0x200019b0
    d694:	0000b9a9 	.word	0x0000b9a9
    d698:	0000b86d 	.word	0x0000b86d
    d69c:	0000b771 	.word	0x0000b771
    d6a0:	0000d35d 	.word	0x0000d35d
    d6a4:	0000addd 	.word	0x0000addd
    d6a8:	00008d6d 	.word	0x00008d6d
    d6ac:	0000b959 	.word	0x0000b959
    d6b0:	0000b8a5 	.word	0x0000b8a5
    d6b4:	00008755 	.word	0x00008755
    d6b8:	0000d331 	.word	0x0000d331
    d6bc:	0000b629 	.word	0x0000b629
    d6c0:	0000b5bd 	.word	0x0000b5bd

0000d6c4 <LorawanSetDataRange>:
    d6c4:	2201      	movs	r2, #1
    d6c6:	b530      	push	{r4, r5, lr}
    d6c8:	b085      	sub	sp, #20
    d6ca:	ab01      	add	r3, sp, #4
    d6cc:	ac02      	add	r4, sp, #8
    d6ce:	7018      	strb	r0, [r3, #0]
    d6d0:	7020      	strb	r0, [r4, #0]
    d6d2:	7061      	strb	r1, [r4, #1]
    d6d4:	2015      	movs	r0, #21
    d6d6:	0019      	movs	r1, r3
    d6d8:	4d11      	ldr	r5, [pc, #68]	; (d720 <LorawanSetDataRange+0x5c>)
    d6da:	705a      	strb	r2, [r3, #1]
    d6dc:	47a8      	blx	r5
    d6de:	2808      	cmp	r0, #8
    d6e0:	d003      	beq.n	d6ea <LorawanSetDataRange+0x26>
    d6e2:	250a      	movs	r5, #10
    d6e4:	0028      	movs	r0, r5
    d6e6:	b005      	add	sp, #20
    d6e8:	bd30      	pop	{r4, r5, pc}
    d6ea:	0021      	movs	r1, r4
    d6ec:	2012      	movs	r0, #18
    d6ee:	47a8      	blx	r5
    d6f0:	0005      	movs	r5, r0
    d6f2:	2808      	cmp	r0, #8
    d6f4:	d1f5      	bne.n	d6e2 <LorawanSetDataRange+0x1e>
    d6f6:	0021      	movs	r1, r4
    d6f8:	4b0a      	ldr	r3, [pc, #40]	; (d724 <LorawanSetDataRange+0x60>)
    d6fa:	ac03      	add	r4, sp, #12
    d6fc:	2012      	movs	r0, #18
    d6fe:	4798      	blx	r3
    d700:	0022      	movs	r2, r4
    d702:	2100      	movs	r1, #0
    d704:	4b08      	ldr	r3, [pc, #32]	; (d728 <LorawanSetDataRange+0x64>)
    d706:	2014      	movs	r0, #20
    d708:	4798      	blx	r3
    d70a:	4b08      	ldr	r3, [pc, #32]	; (d72c <LorawanSetDataRange+0x68>)
    d70c:	7821      	ldrb	r1, [r4, #0]
    d70e:	001a      	movs	r2, r3
    d710:	32ea      	adds	r2, #234	; 0xea
    d712:	7011      	strb	r1, [r2, #0]
    d714:	7862      	ldrb	r2, [r4, #1]
    d716:	33eb      	adds	r3, #235	; 0xeb
    d718:	701a      	strb	r2, [r3, #0]
    d71a:	4b05      	ldr	r3, [pc, #20]	; (d730 <LorawanSetDataRange+0x6c>)
    d71c:	4798      	blx	r3
    d71e:	e7e1      	b.n	d6e4 <LorawanSetDataRange+0x20>
    d720:	00008771 	.word	0x00008771
    d724:	0000887d 	.word	0x0000887d
    d728:	00008755 	.word	0x00008755
    d72c:	200019b0 	.word	0x200019b0
    d730:	0000d331 	.word	0x0000d331

0000d734 <LorawanSetChannelIdStatus>:
    d734:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d736:	466b      	mov	r3, sp
    d738:	7018      	strb	r0, [r3, #0]
    d73a:	7059      	strb	r1, [r3, #1]
    d73c:	2016      	movs	r0, #22
    d73e:	4669      	mov	r1, sp
    d740:	4b0c      	ldr	r3, [pc, #48]	; (d774 <LorawanSetChannelIdStatus+0x40>)
    d742:	4798      	blx	r3
    d744:	0004      	movs	r4, r0
    d746:	2808      	cmp	r0, #8
    d748:	d111      	bne.n	d76e <LorawanSetChannelIdStatus+0x3a>
    d74a:	ad01      	add	r5, sp, #4
    d74c:	002a      	movs	r2, r5
    d74e:	2100      	movs	r1, #0
    d750:	4b09      	ldr	r3, [pc, #36]	; (d778 <LorawanSetChannelIdStatus+0x44>)
    d752:	2014      	movs	r0, #20
    d754:	4798      	blx	r3
    d756:	4b09      	ldr	r3, [pc, #36]	; (d77c <LorawanSetChannelIdStatus+0x48>)
    d758:	7829      	ldrb	r1, [r5, #0]
    d75a:	001a      	movs	r2, r3
    d75c:	32ea      	adds	r2, #234	; 0xea
    d75e:	7011      	strb	r1, [r2, #0]
    d760:	786a      	ldrb	r2, [r5, #1]
    d762:	33eb      	adds	r3, #235	; 0xeb
    d764:	701a      	strb	r2, [r3, #0]
    d766:	4b06      	ldr	r3, [pc, #24]	; (d780 <LorawanSetChannelIdStatus+0x4c>)
    d768:	4798      	blx	r3
    d76a:	0020      	movs	r0, r4
    d76c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    d76e:	240a      	movs	r4, #10
    d770:	e7fb      	b.n	d76a <LorawanSetChannelIdStatus+0x36>
    d772:	46c0      	nop			; (mov r8, r8)
    d774:	0000887d 	.word	0x0000887d
    d778:	00008755 	.word	0x00008755
    d77c:	200019b0 	.word	0x200019b0
    d780:	0000d331 	.word	0x0000d331

0000d784 <LORAWAN_RxDone>:
    d784:	b5f0      	push	{r4, r5, r6, r7, lr}
    d786:	4bc5      	ldr	r3, [pc, #788]	; (da9c <LORAWAN_RxDone+0x318>)
    d788:	b093      	sub	sp, #76	; 0x4c
    d78a:	781b      	ldrb	r3, [r3, #0]
    d78c:	0007      	movs	r7, r0
    d78e:	b25a      	sxtb	r2, r3
    d790:	9107      	str	r1, [sp, #28]
    d792:	4cc3      	ldr	r4, [pc, #780]	; (daa0 <LORAWAN_RxDone+0x31c>)
    d794:	2a00      	cmp	r2, #0
    d796:	da01      	bge.n	d79c <LORAWAN_RxDone+0x18>
    d798:	f000 fd72 	bl	e280 <LORAWAN_RxDone+0xafc>
    d79c:	7801      	ldrb	r1, [r0, #0]
    d79e:	221f      	movs	r2, #31
    d7a0:	0008      	movs	r0, r1
    d7a2:	4390      	bics	r0, r2
    d7a4:	0002      	movs	r2, r0
    d7a6:	2820      	cmp	r0, #32
    d7a8:	d000      	beq.n	d7ac <LORAWAN_RxDone+0x28>
    d7aa:	e1ad      	b.n	db08 <LORAWAN_RxDone+0x384>
    d7ac:	7822      	ldrb	r2, [r4, #0]
    d7ae:	2a00      	cmp	r2, #0
    d7b0:	d001      	beq.n	d7b6 <LORAWAN_RxDone+0x32>
    d7b2:	f000 fd51 	bl	e258 <LORAWAN_RxDone+0xad4>
    d7b6:	0022      	movs	r2, r4
    d7b8:	328c      	adds	r2, #140	; 0x8c
    d7ba:	7812      	ldrb	r2, [r2, #0]
    d7bc:	0752      	lsls	r2, r2, #29
    d7be:	d401      	bmi.n	d7c4 <LORAWAN_RxDone+0x40>
    d7c0:	f000 fd4a 	bl	e258 <LORAWAN_RxDone+0xad4>
    d7c4:	9b07      	ldr	r3, [sp, #28]
    d7c6:	3b01      	subs	r3, #1
    d7c8:	b2db      	uxtb	r3, r3
    d7ca:	9306      	str	r3, [sp, #24]
    d7cc:	4bb5      	ldr	r3, [pc, #724]	; (daa4 <LORAWAN_RxDone+0x320>)
    d7ce:	469c      	mov	ip, r3
    d7d0:	9b06      	ldr	r3, [sp, #24]
    d7d2:	2b00      	cmp	r3, #0
    d7d4:	d12c      	bne.n	d830 <LORAWAN_RxDone+0xac>
    d7d6:	9b07      	ldr	r3, [sp, #28]
    d7d8:	4660      	mov	r0, ip
    d7da:	1f1d      	subs	r5, r3, #4
    d7dc:	b2eb      	uxtb	r3, r5
    d7de:	9300      	str	r3, [sp, #0]
    d7e0:	4ab1      	ldr	r2, [pc, #708]	; (daa8 <LORAWAN_RxDone+0x324>)
    d7e2:	003b      	movs	r3, r7
    d7e4:	9906      	ldr	r1, [sp, #24]
    d7e6:	4eb1      	ldr	r6, [pc, #708]	; (daac <LORAWAN_RxDone+0x328>)
    d7e8:	47b0      	blx	r6
    d7ea:	2204      	movs	r2, #4
    d7ec:	49ae      	ldr	r1, [pc, #696]	; (daa8 <LORAWAN_RxDone+0x324>)
    d7ee:	4bb0      	ldr	r3, [pc, #704]	; (dab0 <LORAWAN_RxDone+0x32c>)
    d7f0:	a810      	add	r0, sp, #64	; 0x40
    d7f2:	4798      	blx	r3
    d7f4:	9e10      	ldr	r6, [sp, #64]	; 0x40
    d7f6:	1979      	adds	r1, r7, r5
    d7f8:	2204      	movs	r2, #4
    d7fa:	4bad      	ldr	r3, [pc, #692]	; (dab0 <LORAWAN_RxDone+0x32c>)
    d7fc:	a810      	add	r0, sp, #64	; 0x40
    d7fe:	960d      	str	r6, [sp, #52]	; 0x34
    d800:	4798      	blx	r3
    d802:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d804:	4ba6      	ldr	r3, [pc, #664]	; (daa0 <LORAWAN_RxDone+0x31c>)
    d806:	210e      	movs	r1, #14
    d808:	42b2      	cmp	r2, r6
    d80a:	d029      	beq.n	d860 <LORAWAN_RxDone+0xdc>
    d80c:	001a      	movs	r2, r3
    d80e:	327c      	adds	r2, #124	; 0x7c
    d810:	7812      	ldrb	r2, [r2, #0]
    d812:	400a      	ands	r2, r1
    d814:	2a0a      	cmp	r2, #10
    d816:	d005      	beq.n	d824 <LORAWAN_RxDone+0xa0>
    d818:	2a06      	cmp	r2, #6
    d81a:	d106      	bne.n	d82a <LORAWAN_RxDone+0xa6>
    d81c:	33f0      	adds	r3, #240	; 0xf0
    d81e:	781b      	ldrb	r3, [r3, #0]
    d820:	2b00      	cmp	r3, #0
    d822:	d002      	beq.n	d82a <LORAWAN_RxDone+0xa6>
    d824:	2018      	movs	r0, #24
    d826:	4ba3      	ldr	r3, [pc, #652]	; (dab4 <LORAWAN_RxDone+0x330>)
    d828:	4798      	blx	r3
    d82a:	4ba3      	ldr	r3, [pc, #652]	; (dab8 <LORAWAN_RxDone+0x334>)
    d82c:	4798      	blx	r3
    d82e:	e1f5      	b.n	dc1c <LORAWAN_RxDone+0x498>
    d830:	9b07      	ldr	r3, [sp, #28]
    d832:	9a06      	ldr	r2, [sp, #24]
    d834:	2100      	movs	r1, #0
    d836:	1a98      	subs	r0, r3, r2
    d838:	1838      	adds	r0, r7, r0
    d83a:	4662      	mov	r2, ip
    d83c:	4b9f      	ldr	r3, [pc, #636]	; (dabc <LORAWAN_RxDone+0x338>)
    d83e:	4798      	blx	r3
    d840:	2800      	cmp	r0, #0
    d842:	d006      	beq.n	d852 <LORAWAN_RxDone+0xce>
    d844:	4b9b      	ldr	r3, [pc, #620]	; (dab4 <LORAWAN_RxDone+0x330>)
    d846:	4798      	blx	r3
    d848:	4b9b      	ldr	r3, [pc, #620]	; (dab8 <LORAWAN_RxDone+0x334>)
    d84a:	4798      	blx	r3
    d84c:	201f      	movs	r0, #31
    d84e:	b013      	add	sp, #76	; 0x4c
    d850:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d852:	9b06      	ldr	r3, [sp, #24]
    d854:	2b10      	cmp	r3, #16
    d856:	d901      	bls.n	d85c <LORAWAN_RxDone+0xd8>
    d858:	3b10      	subs	r3, #16
    d85a:	e7b5      	b.n	d7c8 <LORAWAN_RxDone+0x44>
    d85c:	9006      	str	r0, [sp, #24]
    d85e:	e7b5      	b.n	d7cc <LORAWAN_RxDone+0x48>
    d860:	001a      	movs	r2, r3
    d862:	327c      	adds	r2, #124	; 0x7c
    d864:	7812      	ldrb	r2, [r2, #0]
    d866:	400a      	ands	r2, r1
    d868:	2a06      	cmp	r2, #6
    d86a:	d103      	bne.n	d874 <LORAWAN_RxDone+0xf0>
    d86c:	33e3      	adds	r3, #227	; 0xe3
    d86e:	7818      	ldrb	r0, [r3, #0]
    d870:	4b93      	ldr	r3, [pc, #588]	; (dac0 <LORAWAN_RxDone+0x33c>)
    d872:	4798      	blx	r3
    d874:	7a3a      	ldrb	r2, [r7, #8]
    d876:	79fb      	ldrb	r3, [r7, #7]
    d878:	0212      	lsls	r2, r2, #8
    d87a:	431a      	orrs	r2, r3
    d87c:	7a7b      	ldrb	r3, [r7, #9]
    d87e:	2001      	movs	r0, #1
    d880:	041b      	lsls	r3, r3, #16
    d882:	431a      	orrs	r2, r3
    d884:	7abb      	ldrb	r3, [r7, #10]
    d886:	061b      	lsls	r3, r3, #24
    d888:	4313      	orrs	r3, r2
    d88a:	0a19      	lsrs	r1, r3, #8
    d88c:	7063      	strb	r3, [r4, #1]
    d88e:	70a1      	strb	r1, [r4, #2]
    d890:	0c19      	lsrs	r1, r3, #16
    d892:	0e1b      	lsrs	r3, r3, #24
    d894:	70e1      	strb	r1, [r4, #3]
    d896:	7123      	strb	r3, [r4, #4]
    d898:	240f      	movs	r4, #15
    d89a:	2103      	movs	r1, #3
    d89c:	4b89      	ldr	r3, [pc, #548]	; (dac4 <LORAWAN_RxDone+0x340>)
    d89e:	4798      	blx	r3
    d8a0:	7b38      	ldrb	r0, [r7, #12]
    d8a2:	4b89      	ldr	r3, [pc, #548]	; (dac8 <LORAWAN_RxDone+0x344>)
    d8a4:	4020      	ands	r0, r4
    d8a6:	4798      	blx	r3
    d8a8:	7af8      	ldrb	r0, [r7, #11]
    d8aa:	4b88      	ldr	r3, [pc, #544]	; (dacc <LORAWAN_RxDone+0x348>)
    d8ac:	0641      	lsls	r1, r0, #25
    d8ae:	0700      	lsls	r0, r0, #28
    d8b0:	0f49      	lsrs	r1, r1, #29
    d8b2:	0f00      	lsrs	r0, r0, #28
    d8b4:	4798      	blx	r3
    d8b6:	4b86      	ldr	r3, [pc, #536]	; (dad0 <LORAWAN_RxDone+0x34c>)
    d8b8:	2100      	movs	r1, #0
    d8ba:	203c      	movs	r0, #60	; 0x3c
    d8bc:	4798      	blx	r3
    d8be:	9b07      	ldr	r3, [sp, #28]
    d8c0:	2b21      	cmp	r3, #33	; 0x21
    d8c2:	d000      	beq.n	d8c6 <LORAWAN_RxDone+0x142>
    d8c4:	e08c      	b.n	d9e0 <LORAWAN_RxDone+0x25c>
    d8c6:	251a      	movs	r5, #26
    d8c8:	ab04      	add	r3, sp, #16
    d8ca:	18ed      	adds	r5, r5, r3
    d8cc:	002a      	movs	r2, r5
    d8ce:	4b81      	ldr	r3, [pc, #516]	; (dad4 <LORAWAN_RxDone+0x350>)
    d8d0:	4981      	ldr	r1, [pc, #516]	; (dad8 <LORAWAN_RxDone+0x354>)
    d8d2:	2007      	movs	r0, #7
    d8d4:	4798      	blx	r3
    d8d6:	782b      	ldrb	r3, [r5, #0]
    d8d8:	2bff      	cmp	r3, #255	; 0xff
    d8da:	d100      	bne.n	d8de <LORAWAN_RxDone+0x15a>
    d8dc:	e080      	b.n	d9e0 <LORAWAN_RxDone+0x25c>
    d8de:	2350      	movs	r3, #80	; 0x50
    d8e0:	43a3      	bics	r3, r4
    d8e2:	9308      	str	r3, [sp, #32]
    d8e4:	003b      	movs	r3, r7
    d8e6:	330d      	adds	r3, #13
    d8e8:	9307      	str	r3, [sp, #28]
    d8ea:	2600      	movs	r6, #0
    d8ec:	2203      	movs	r2, #3
    d8ee:	9907      	ldr	r1, [sp, #28]
    d8f0:	4b6f      	ldr	r3, [pc, #444]	; (dab0 <LORAWAN_RxDone+0x32c>)
    d8f2:	a80e      	add	r0, sp, #56	; 0x38
    d8f4:	960e      	str	r6, [sp, #56]	; 0x38
    d8f6:	4798      	blx	r3
    d8f8:	2364      	movs	r3, #100	; 0x64
    d8fa:	990e      	ldr	r1, [sp, #56]	; 0x38
    d8fc:	aa04      	add	r2, sp, #16
    d8fe:	4359      	muls	r1, r3
    d900:	3b4a      	subs	r3, #74	; 0x4a
    d902:	189b      	adds	r3, r3, r2
    d904:	7818      	ldrb	r0, [r3, #0]
    d906:	9b06      	ldr	r3, [sp, #24]
    d908:	910e      	str	r1, [sp, #56]	; 0x38
    d90a:	1818      	adds	r0, r3, r0
    d90c:	b2c0      	uxtb	r0, r0
    d90e:	76d0      	strb	r0, [r2, #27]
    d910:	42b1      	cmp	r1, r6
    d912:	d100      	bne.n	d916 <LORAWAN_RxDone+0x192>
    d914:	e0a8      	b.n	da68 <LORAWAN_RxDone+0x2e4>
    d916:	466b      	mov	r3, sp
    d918:	2220      	movs	r2, #32
    d91a:	189b      	adds	r3, r3, r2
    d91c:	781b      	ldrb	r3, [r3, #0]
    d91e:	ad10      	add	r5, sp, #64	; 0x40
    d920:	ac0b      	add	r4, sp, #44	; 0x2c
    d922:	7128      	strb	r0, [r5, #4]
    d924:	9110      	str	r1, [sp, #64]	; 0x40
    d926:	7020      	strb	r0, [r4, #0]
    d928:	7063      	strb	r3, [r4, #1]
    d92a:	0029      	movs	r1, r5
    d92c:	2002      	movs	r0, #2
    d92e:	4b6b      	ldr	r3, [pc, #428]	; (dadc <LORAWAN_RxDone+0x358>)
    d930:	4798      	blx	r3
    d932:	2808      	cmp	r0, #8
    d934:	d140      	bne.n	d9b8 <LORAWAN_RxDone+0x234>
    d936:	0029      	movs	r1, r5
    d938:	0030      	movs	r0, r6
    d93a:	4b65      	ldr	r3, [pc, #404]	; (dad0 <LORAWAN_RxDone+0x34c>)
    d93c:	4798      	blx	r3
    d93e:	ad0c      	add	r5, sp, #48	; 0x30
    d940:	0021      	movs	r1, r4
    d942:	4b63      	ldr	r3, [pc, #396]	; (dad0 <LORAWAN_RxDone+0x34c>)
    d944:	2012      	movs	r0, #18
    d946:	4798      	blx	r3
    d948:	0031      	movs	r1, r6
    d94a:	002a      	movs	r2, r5
    d94c:	4e61      	ldr	r6, [pc, #388]	; (dad4 <LORAWAN_RxDone+0x350>)
    d94e:	2014      	movs	r0, #20
    d950:	47b0      	blx	r6
    d952:	4c53      	ldr	r4, [pc, #332]	; (daa0 <LORAWAN_RxDone+0x31c>)
    d954:	782a      	ldrb	r2, [r5, #0]
    d956:	0023      	movs	r3, r4
    d958:	33ea      	adds	r3, #234	; 0xea
    d95a:	701a      	strb	r2, [r3, #0]
    d95c:	0023      	movs	r3, r4
    d95e:	786a      	ldrb	r2, [r5, #1]
    d960:	2522      	movs	r5, #34	; 0x22
    d962:	33eb      	adds	r3, #235	; 0xeb
    d964:	701a      	strb	r2, [r3, #0]
    d966:	4b5e      	ldr	r3, [pc, #376]	; (dae0 <LORAWAN_RxDone+0x35c>)
    d968:	4798      	blx	r3
    d96a:	ab04      	add	r3, sp, #16
    d96c:	18ed      	adds	r5, r5, r3
    d96e:	231b      	movs	r3, #27
    d970:	a904      	add	r1, sp, #16
    d972:	185b      	adds	r3, r3, r1
    d974:	0019      	movs	r1, r3
    d976:	002a      	movs	r2, r5
    d978:	201e      	movs	r0, #30
    d97a:	47b0      	blx	r6
    d97c:	0023      	movs	r3, r4
    d97e:	33ff      	adds	r3, #255	; 0xff
    d980:	7c5b      	ldrb	r3, [r3, #17]
    d982:	079b      	lsls	r3, r3, #30
    d984:	d508      	bpl.n	d998 <LORAWAN_RxDone+0x214>
    d986:	ab04      	add	r3, sp, #16
    d988:	7edb      	ldrb	r3, [r3, #27]
    d98a:	a90f      	add	r1, sp, #60	; 0x3c
    d98c:	708b      	strb	r3, [r1, #2]
    d98e:	882b      	ldrh	r3, [r5, #0]
    d990:	201e      	movs	r0, #30
    d992:	800b      	strh	r3, [r1, #0]
    d994:	4b4e      	ldr	r3, [pc, #312]	; (dad0 <LORAWAN_RxDone+0x34c>)
    d996:	4798      	blx	r3
    d998:	231b      	movs	r3, #27
    d99a:	aa04      	add	r2, sp, #16
    d99c:	189b      	adds	r3, r3, r2
    d99e:	7818      	ldrb	r0, [r3, #0]
    d9a0:	2101      	movs	r1, #1
    d9a2:	4b50      	ldr	r3, [pc, #320]	; (dae4 <LORAWAN_RxDone+0x360>)
    d9a4:	4798      	blx	r3
    d9a6:	2204      	movs	r2, #4
    d9a8:	347c      	adds	r4, #124	; 0x7c
    d9aa:	7863      	ldrb	r3, [r4, #1]
    d9ac:	210b      	movs	r1, #11
    d9ae:	4313      	orrs	r3, r2
    d9b0:	7063      	strb	r3, [r4, #1]
    d9b2:	2001      	movs	r0, #1
    d9b4:	4b43      	ldr	r3, [pc, #268]	; (dac4 <LORAWAN_RxDone+0x340>)
    d9b6:	4798      	blx	r3
    d9b8:	9b06      	ldr	r3, [sp, #24]
    d9ba:	3301      	adds	r3, #1
    d9bc:	b2db      	uxtb	r3, r3
    d9be:	9306      	str	r3, [sp, #24]
    d9c0:	9b07      	ldr	r3, [sp, #28]
    d9c2:	3303      	adds	r3, #3
    d9c4:	9307      	str	r3, [sp, #28]
    d9c6:	9b06      	ldr	r3, [sp, #24]
    d9c8:	2b05      	cmp	r3, #5
    d9ca:	d18e      	bne.n	d8ea <LORAWAN_RxDone+0x166>
    d9cc:	2204      	movs	r2, #4
    d9ce:	4b34      	ldr	r3, [pc, #208]	; (daa0 <LORAWAN_RxDone+0x31c>)
    d9d0:	2001      	movs	r0, #1
    d9d2:	337c      	adds	r3, #124	; 0x7c
    d9d4:	7859      	ldrb	r1, [r3, #1]
    d9d6:	430a      	orrs	r2, r1
    d9d8:	705a      	strb	r2, [r3, #1]
    d9da:	210b      	movs	r1, #11
    d9dc:	4b39      	ldr	r3, [pc, #228]	; (dac4 <LORAWAN_RxDone+0x340>)
    d9de:	4798      	blx	r3
    d9e0:	4d41      	ldr	r5, [pc, #260]	; (dae8 <LORAWAN_RxDone+0x364>)
    d9e2:	1c7e      	adds	r6, r7, #1
    d9e4:	3704      	adds	r7, #4
    d9e6:	0028      	movs	r0, r5
    d9e8:	003a      	movs	r2, r7
    d9ea:	0031      	movs	r1, r6
    d9ec:	4b3f      	ldr	r3, [pc, #252]	; (daec <LORAWAN_RxDone+0x368>)
    d9ee:	4798      	blx	r3
    d9f0:	2302      	movs	r3, #2
    d9f2:	4c2b      	ldr	r4, [pc, #172]	; (daa0 <LORAWAN_RxDone+0x31c>)
    d9f4:	0028      	movs	r0, r5
    d9f6:	7563      	strb	r3, [r4, #21]
    d9f8:	4a2a      	ldr	r2, [pc, #168]	; (daa4 <LORAWAN_RxDone+0x320>)
    d9fa:	3b01      	subs	r3, #1
    d9fc:	2100      	movs	r1, #0
    d9fe:	4d3c      	ldr	r5, [pc, #240]	; (daf0 <LORAWAN_RxDone+0x36c>)
    da00:	47a8      	blx	r5
    da02:	2800      	cmp	r0, #0
    da04:	d003      	beq.n	da0e <LORAWAN_RxDone+0x28a>
    da06:	4b2b      	ldr	r3, [pc, #172]	; (dab4 <LORAWAN_RxDone+0x330>)
    da08:	4798      	blx	r3
    da0a:	4b2b      	ldr	r3, [pc, #172]	; (dab8 <LORAWAN_RxDone+0x334>)
    da0c:	4798      	blx	r3
    da0e:	2105      	movs	r1, #5
    da10:	4b2c      	ldr	r3, [pc, #176]	; (dac4 <LORAWAN_RxDone+0x340>)
    da12:	2001      	movs	r0, #1
    da14:	4798      	blx	r3
    da16:	4d37      	ldr	r5, [pc, #220]	; (daf4 <LORAWAN_RxDone+0x370>)
    da18:	003a      	movs	r2, r7
    da1a:	0028      	movs	r0, r5
    da1c:	0031      	movs	r1, r6
    da1e:	4b33      	ldr	r3, [pc, #204]	; (daec <LORAWAN_RxDone+0x368>)
    da20:	4798      	blx	r3
    da22:	2301      	movs	r3, #1
    da24:	0028      	movs	r0, r5
    da26:	7163      	strb	r3, [r4, #5]
    da28:	4a1e      	ldr	r2, [pc, #120]	; (daa4 <LORAWAN_RxDone+0x320>)
    da2a:	18db      	adds	r3, r3, r3
    da2c:	2100      	movs	r1, #0
    da2e:	4d30      	ldr	r5, [pc, #192]	; (daf0 <LORAWAN_RxDone+0x36c>)
    da30:	47a8      	blx	r5
    da32:	2800      	cmp	r0, #0
    da34:	d003      	beq.n	da3e <LORAWAN_RxDone+0x2ba>
    da36:	4b1f      	ldr	r3, [pc, #124]	; (dab4 <LORAWAN_RxDone+0x330>)
    da38:	4798      	blx	r3
    da3a:	4b1f      	ldr	r3, [pc, #124]	; (dab8 <LORAWAN_RxDone+0x334>)
    da3c:	4798      	blx	r3
    da3e:	4b21      	ldr	r3, [pc, #132]	; (dac4 <LORAWAN_RxDone+0x340>)
    da40:	2104      	movs	r1, #4
    da42:	2001      	movs	r0, #1
    da44:	4798      	blx	r3
    da46:	23e2      	movs	r3, #226	; 0xe2
    da48:	33ff      	adds	r3, #255	; 0xff
    da4a:	5ce3      	ldrb	r3, [r4, r3]
    da4c:	2b00      	cmp	r3, #0
    da4e:	d017      	beq.n	da80 <LORAWAN_RxDone+0x2fc>
    da50:	4929      	ldr	r1, [pc, #164]	; (daf8 <LORAWAN_RxDone+0x374>)
    da52:	2002      	movs	r0, #2
    da54:	4c29      	ldr	r4, [pc, #164]	; (dafc <LORAWAN_RxDone+0x378>)
    da56:	47a0      	blx	r4
    da58:	2800      	cmp	r0, #0
    da5a:	d008      	beq.n	da6e <LORAWAN_RxDone+0x2ea>
    da5c:	4b15      	ldr	r3, [pc, #84]	; (dab4 <LORAWAN_RxDone+0x330>)
    da5e:	4798      	blx	r3
    da60:	4b15      	ldr	r3, [pc, #84]	; (dab8 <LORAWAN_RxDone+0x334>)
    da62:	4798      	blx	r3
    da64:	2023      	movs	r0, #35	; 0x23
    da66:	e6f2      	b.n	d84e <LORAWAN_RxDone+0xca>
    da68:	4b1e      	ldr	r3, [pc, #120]	; (dae4 <LORAWAN_RxDone+0x360>)
    da6a:	4798      	blx	r3
    da6c:	e7a4      	b.n	d9b8 <LORAWAN_RxDone+0x234>
    da6e:	4924      	ldr	r1, [pc, #144]	; (db00 <LORAWAN_RxDone+0x37c>)
    da70:	2001      	movs	r0, #1
    da72:	47a0      	blx	r4
    da74:	2800      	cmp	r0, #0
    da76:	d1f1      	bne.n	da5c <LORAWAN_RxDone+0x2d8>
    da78:	4b22      	ldr	r3, [pc, #136]	; (db04 <LORAWAN_RxDone+0x380>)
    da7a:	4798      	blx	r3
    da7c:	2008      	movs	r0, #8
    da7e:	e6e6      	b.n	d84e <LORAWAN_RxDone+0xca>
    da80:	0020      	movs	r0, r4
    da82:	0021      	movs	r1, r4
    da84:	2210      	movs	r2, #16
    da86:	3115      	adds	r1, #21
    da88:	4d09      	ldr	r5, [pc, #36]	; (dab0 <LORAWAN_RxDone+0x32c>)
    da8a:	3035      	adds	r0, #53	; 0x35
    da8c:	47a8      	blx	r5
    da8e:	0020      	movs	r0, r4
    da90:	1d61      	adds	r1, r4, #5
    da92:	2210      	movs	r2, #16
    da94:	3025      	adds	r0, #37	; 0x25
    da96:	47a8      	blx	r5
    da98:	e7ee      	b.n	da78 <LORAWAN_RxDone+0x2f4>
    da9a:	46c0      	nop			; (mov r8, r8)
    da9c:	20001a2c 	.word	0x20001a2c
    daa0:	200019b0 	.word	0x200019b0
    daa4:	200019f5 	.word	0x200019f5
    daa8:	20000fd4 	.word	0x20000fd4
    daac:	00008a79 	.word	0x00008a79
    dab0:	00013e5d 	.word	0x00013e5d
    dab4:	0000b70d 	.word	0x0000b70d
    dab8:	0000d2bd 	.word	0x0000d2bd
    dabc:	00008a41 	.word	0x00008a41
    dac0:	00009aa1 	.word	0x00009aa1
    dac4:	00008d6d 	.word	0x00008d6d
    dac8:	0000addd 	.word	0x0000addd
    dacc:	0000b5d9 	.word	0x0000b5d9
    dad0:	0000887d 	.word	0x0000887d
    dad4:	00008755 	.word	0x00008755
    dad8:	20001a8f 	.word	0x20001a8f
    dadc:	00008771 	.word	0x00008771
    dae0:	0000d331 	.word	0x0000d331
    dae4:	0000d735 	.word	0x0000d735
    dae8:	200019c5 	.word	0x200019c5
    daec:	0000b0c9 	.word	0x0000b0c9
    daf0:	00008a69 	.word	0x00008a69
    daf4:	200019b5 	.word	0x200019b5
    daf8:	200019d5 	.word	0x200019d5
    dafc:	00008a75 	.word	0x00008a75
    db00:	200019e5 	.word	0x200019e5
    db04:	0000afd9 	.word	0x0000afd9
    db08:	20bf      	movs	r0, #191	; 0xbf
    db0a:	3a60      	subs	r2, #96	; 0x60
    db0c:	4002      	ands	r2, r0
    db0e:	d000      	beq.n	db12 <LORAWAN_RxDone+0x38e>
    db10:	e3a2      	b.n	e258 <LORAWAN_RxDone+0xad4>
    db12:	38be      	subs	r0, #190	; 0xbe
    db14:	4203      	tst	r3, r0
    db16:	d100      	bne.n	db1a <LORAWAN_RxDone+0x396>
    db18:	e39e      	b.n	e258 <LORAWAN_RxDone+0xad4>
    db1a:	6823      	ldr	r3, [r4, #0]
    db1c:	0a18      	lsrs	r0, r3, #8
    db1e:	7923      	ldrb	r3, [r4, #4]
    db20:	061b      	lsls	r3, r3, #24
    db22:	4303      	orrs	r3, r0
    db24:	0020      	movs	r0, r4
    db26:	30d8      	adds	r0, #216	; 0xd8
    db28:	7002      	strb	r2, [r0, #0]
    db2a:	78bd      	ldrb	r5, [r7, #2]
    db2c:	787e      	ldrb	r6, [r7, #1]
    db2e:	022d      	lsls	r5, r5, #8
    db30:	432e      	orrs	r6, r5
    db32:	78fd      	ldrb	r5, [r7, #3]
    db34:	7938      	ldrb	r0, [r7, #4]
    db36:	042d      	lsls	r5, r5, #16
    db38:	4335      	orrs	r5, r6
    db3a:	0600      	lsls	r0, r0, #24
    db3c:	4305      	orrs	r5, r0
    db3e:	42ab      	cmp	r3, r5
    db40:	d07b      	beq.n	dc3a <LORAWAN_RxDone+0x4b6>
    db42:	2522      	movs	r5, #34	; 0x22
    db44:	ab04      	add	r3, sp, #16
    db46:	18ed      	adds	r5, r5, r3
    db48:	7a3a      	ldrb	r2, [r7, #8]
    db4a:	0949      	lsrs	r1, r1, #5
    db4c:	002b      	movs	r3, r5
    db4e:	0038      	movs	r0, r7
    db50:	4e97      	ldr	r6, [pc, #604]	; (ddb0 <LORAWAN_RxDone+0x62c>)
    db52:	47b0      	blx	r6
    db54:	2808      	cmp	r0, #8
    db56:	d159      	bne.n	dc0c <LORAWAN_RxDone+0x488>
    db58:	232c      	movs	r3, #44	; 0x2c
    db5a:	782a      	ldrb	r2, [r5, #0]
    db5c:	4353      	muls	r3, r2
    db5e:	001a      	movs	r2, r3
    db60:	3229      	adds	r2, #41	; 0x29
    db62:	32ff      	adds	r2, #255	; 0xff
    db64:	1912      	adds	r2, r2, r4
    db66:	18e4      	adds	r4, r4, r3
    db68:	2301      	movs	r3, #1
    db6a:	34fc      	adds	r4, #252	; 0xfc
    db6c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    db6e:	9206      	str	r2, [sp, #24]
    db70:	9308      	str	r3, [sp, #32]
    db72:	4c90      	ldr	r4, [pc, #576]	; (ddb4 <LORAWAN_RxDone+0x630>)
    db74:	0021      	movs	r1, r4
    db76:	0020      	movs	r0, r4
    db78:	3108      	adds	r1, #8
    db7a:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
    db7c:	3084      	adds	r0, #132	; 0x84
    db7e:	9309      	str	r3, [sp, #36]	; 0x24
    db80:	79fb      	ldrb	r3, [r7, #7]
    db82:	79ba      	ldrb	r2, [r7, #6]
    db84:	021b      	lsls	r3, r3, #8
    db86:	4313      	orrs	r3, r2
    db88:	8802      	ldrh	r2, [r0, #0]
    db8a:	4293      	cmp	r3, r2
    db8c:	d37a      	bcc.n	dc84 <LORAWAN_RxDone+0x500>
    db8e:	0026      	movs	r6, r4
    db90:	36d0      	adds	r6, #208	; 0xd0
    db92:	8836      	ldrh	r6, [r6, #0]
    db94:	1a9a      	subs	r2, r3, r2
    db96:	42b2      	cmp	r2, r6
    db98:	dd53      	ble.n	dc42 <LORAWAN_RxDone+0x4be>
    db9a:	0022      	movs	r2, r4
    db9c:	2101      	movs	r1, #1
    db9e:	328c      	adds	r2, #140	; 0x8c
    dba0:	7813      	ldrb	r3, [r2, #0]
    dba2:	438b      	bics	r3, r1
    dba4:	7013      	strb	r3, [r2, #0]
    dba6:	0023      	movs	r3, r4
    dba8:	33f4      	adds	r3, #244	; 0xf4
    dbaa:	781b      	ldrb	r3, [r3, #0]
    dbac:	428b      	cmp	r3, r1
    dbae:	d108      	bne.n	dbc2 <LORAWAN_RxDone+0x43e>
    dbb0:	0023      	movs	r3, r4
    dbb2:	220e      	movs	r2, #14
    dbb4:	337c      	adds	r3, #124	; 0x7c
    dbb6:	781b      	ldrb	r3, [r3, #0]
    dbb8:	4013      	ands	r3, r2
    dbba:	2b06      	cmp	r3, #6
    dbbc:	d101      	bne.n	dbc2 <LORAWAN_RxDone+0x43e>
    dbbe:	4b7e      	ldr	r3, [pc, #504]	; (ddb8 <LORAWAN_RxDone+0x634>)
    dbc0:	4798      	blx	r3
    dbc2:	497e      	ldr	r1, [pc, #504]	; (ddbc <LORAWAN_RxDone+0x638>)
    dbc4:	784a      	ldrb	r2, [r1, #1]
    dbc6:	780b      	ldrb	r3, [r1, #0]
    dbc8:	0212      	lsls	r2, r2, #8
    dbca:	431a      	orrs	r2, r3
    dbcc:	788b      	ldrb	r3, [r1, #2]
    dbce:	041b      	lsls	r3, r3, #16
    dbd0:	431a      	orrs	r2, r3
    dbd2:	78cb      	ldrb	r3, [r1, #3]
    dbd4:	061b      	lsls	r3, r3, #24
    dbd6:	4313      	orrs	r3, r2
    dbd8:	d008      	beq.n	dbec <LORAWAN_RxDone+0x468>
    dbda:	0022      	movs	r2, r4
    dbdc:	2120      	movs	r1, #32
    dbde:	328c      	adds	r2, #140	; 0x8c
    dbe0:	7813      	ldrb	r3, [r2, #0]
    dbe2:	2017      	movs	r0, #23
    dbe4:	438b      	bics	r3, r1
    dbe6:	7013      	strb	r3, [r2, #0]
    dbe8:	4b75      	ldr	r3, [pc, #468]	; (ddc0 <LORAWAN_RxDone+0x63c>)
    dbea:	4798      	blx	r3
    dbec:	2501      	movs	r5, #1
    dbee:	347c      	adds	r4, #124	; 0x7c
    dbf0:	7863      	ldrb	r3, [r4, #1]
    dbf2:	43ab      	bics	r3, r5
    dbf4:	7063      	strb	r3, [r4, #1]
    dbf6:	78a3      	ldrb	r3, [r4, #2]
    dbf8:	432b      	orrs	r3, r5
    dbfa:	70a3      	strb	r3, [r4, #2]
    dbfc:	4b71      	ldr	r3, [pc, #452]	; (ddc4 <LORAWAN_RxDone+0x640>)
    dbfe:	4798      	blx	r3
    dc00:	210b      	movs	r1, #11
    dc02:	0028      	movs	r0, r5
    dc04:	4b70      	ldr	r3, [pc, #448]	; (ddc8 <LORAWAN_RxDone+0x644>)
    dc06:	4798      	blx	r3
    dc08:	200d      	movs	r0, #13
    dc0a:	e620      	b.n	d84e <LORAWAN_RxDone+0xca>
    dc0c:	220e      	movs	r2, #14
    dc0e:	4b6f      	ldr	r3, [pc, #444]	; (ddcc <LORAWAN_RxDone+0x648>)
    dc10:	781b      	ldrb	r3, [r3, #0]
    dc12:	4013      	ands	r3, r2
    dc14:	2b0a      	cmp	r3, #10
    dc16:	d008      	beq.n	dc2a <LORAWAN_RxDone+0x4a6>
    dc18:	2b06      	cmp	r3, #6
    dc1a:	d001      	beq.n	dc20 <LORAWAN_RxDone+0x49c>
    dc1c:	200a      	movs	r0, #10
    dc1e:	e616      	b.n	d84e <LORAWAN_RxDone+0xca>
    dc20:	0023      	movs	r3, r4
    dc22:	33f0      	adds	r3, #240	; 0xf0
    dc24:	781b      	ldrb	r3, [r3, #0]
    dc26:	2b00      	cmp	r3, #0
    dc28:	d0f8      	beq.n	dc1c <LORAWAN_RxDone+0x498>
    dc2a:	2220      	movs	r2, #32
    dc2c:	201e      	movs	r0, #30
    dc2e:	348c      	adds	r4, #140	; 0x8c
    dc30:	7823      	ldrb	r3, [r4, #0]
    dc32:	4393      	bics	r3, r2
    dc34:	7023      	strb	r3, [r4, #0]
    dc36:	4b62      	ldr	r3, [pc, #392]	; (ddc0 <LORAWAN_RxDone+0x63c>)
    dc38:	e5f6      	b.n	d828 <LORAWAN_RxDone+0xa4>
    dc3a:	4b65      	ldr	r3, [pc, #404]	; (ddd0 <LORAWAN_RxDone+0x64c>)
    dc3c:	9208      	str	r2, [sp, #32]
    dc3e:	9306      	str	r3, [sp, #24]
    dc40:	e797      	b.n	db72 <LORAWAN_RxDone+0x3ee>
    dc42:	8003      	strh	r3, [r0, #0]
    dc44:	23f0      	movs	r3, #240	; 0xf0
    dc46:	005b      	lsls	r3, r3, #1
    dc48:	5ce2      	ldrb	r2, [r4, r3]
    dc4a:	2a00      	cmp	r2, #0
    dc4c:	d113      	bne.n	dc76 <LORAWAN_RxDone+0x4f2>
    dc4e:	210a      	movs	r1, #10
    dc50:	2001      	movs	r0, #1
    dc52:	4b5d      	ldr	r3, [pc, #372]	; (ddc8 <LORAWAN_RxDone+0x644>)
    dc54:	4798      	blx	r3
    dc56:	4b57      	ldr	r3, [pc, #348]	; (ddb4 <LORAWAN_RxDone+0x630>)
    dc58:	001a      	movs	r2, r3
    dc5a:	3208      	adds	r2, #8
    dc5c:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
    dc5e:	1c4a      	adds	r2, r1, #1
    dc60:	d13f      	bne.n	dce2 <LORAWAN_RxDone+0x55e>
    dc62:	2401      	movs	r4, #1
    dc64:	337c      	adds	r3, #124	; 0x7c
    dc66:	789a      	ldrb	r2, [r3, #2]
    dc68:	4322      	orrs	r2, r4
    dc6a:	709a      	strb	r2, [r3, #2]
    dc6c:	4b55      	ldr	r3, [pc, #340]	; (ddc4 <LORAWAN_RxDone+0x640>)
    dc6e:	4798      	blx	r3
    dc70:	210b      	movs	r1, #11
    dc72:	0020      	movs	r0, r4
    dc74:	e7c6      	b.n	dc04 <LORAWAN_RxDone+0x480>
    dc76:	2301      	movs	r3, #1
    dc78:	4093      	lsls	r3, r2
    dc7a:	6fca      	ldr	r2, [r1, #124]	; 0x7c
    dc7c:	3b01      	subs	r3, #1
    dc7e:	421a      	tst	r2, r3
    dc80:	d0e5      	beq.n	dc4e <LORAWAN_RxDone+0x4ca>
    dc82:	e7e8      	b.n	dc56 <LORAWAN_RxDone+0x4d2>
    dc84:	4e53      	ldr	r6, [pc, #332]	; (ddd4 <LORAWAN_RxDone+0x650>)
    dc86:	1a9a      	subs	r2, r3, r2
    dc88:	1992      	adds	r2, r2, r6
    dc8a:	4e53      	ldr	r6, [pc, #332]	; (ddd8 <LORAWAN_RxDone+0x654>)
    dc8c:	42b2      	cmp	r2, r6
    dc8e:	dc06      	bgt.n	dc9e <LORAWAN_RxDone+0x51a>
    dc90:	0022      	movs	r2, r4
    dc92:	8003      	strh	r3, [r0, #0]
    dc94:	3286      	adds	r2, #134	; 0x86
    dc96:	8813      	ldrh	r3, [r2, #0]
    dc98:	3301      	adds	r3, #1
    dc9a:	8013      	strh	r3, [r2, #0]
    dc9c:	e7d2      	b.n	dc44 <LORAWAN_RxDone+0x4c0>
    dc9e:	0023      	movs	r3, r4
    dca0:	33f4      	adds	r3, #244	; 0xf4
    dca2:	781b      	ldrb	r3, [r3, #0]
    dca4:	2b01      	cmp	r3, #1
    dca6:	d108      	bne.n	dcba <LORAWAN_RxDone+0x536>
    dca8:	0023      	movs	r3, r4
    dcaa:	220e      	movs	r2, #14
    dcac:	337c      	adds	r3, #124	; 0x7c
    dcae:	781b      	ldrb	r3, [r3, #0]
    dcb0:	4013      	ands	r3, r2
    dcb2:	2b06      	cmp	r3, #6
    dcb4:	d101      	bne.n	dcba <LORAWAN_RxDone+0x536>
    dcb6:	4b40      	ldr	r3, [pc, #256]	; (ddb8 <LORAWAN_RxDone+0x634>)
    dcb8:	4798      	blx	r3
    dcba:	4940      	ldr	r1, [pc, #256]	; (ddbc <LORAWAN_RxDone+0x638>)
    dcbc:	784a      	ldrb	r2, [r1, #1]
    dcbe:	780b      	ldrb	r3, [r1, #0]
    dcc0:	0212      	lsls	r2, r2, #8
    dcc2:	431a      	orrs	r2, r3
    dcc4:	788b      	ldrb	r3, [r1, #2]
    dcc6:	041b      	lsls	r3, r3, #16
    dcc8:	431a      	orrs	r2, r3
    dcca:	78cb      	ldrb	r3, [r1, #3]
    dccc:	061b      	lsls	r3, r3, #24
    dcce:	4313      	orrs	r3, r2
    dcd0:	d100      	bne.n	dcd4 <LORAWAN_RxDone+0x550>
    dcd2:	e5aa      	b.n	d82a <LORAWAN_RxDone+0xa6>
    dcd4:	2220      	movs	r2, #32
    dcd6:	348c      	adds	r4, #140	; 0x8c
    dcd8:	7823      	ldrb	r3, [r4, #0]
    dcda:	2017      	movs	r0, #23
    dcdc:	4393      	bics	r3, r2
    dcde:	7023      	strb	r3, [r4, #0]
    dce0:	e7a9      	b.n	dc36 <LORAWAN_RxDone+0x4b2>
    dce2:	9b07      	ldr	r3, [sp, #28]
    dce4:	9500      	str	r5, [sp, #0]
    dce6:	1f1e      	subs	r6, r3, #4
    dce8:	b2f2      	uxtb	r2, r6
    dcea:	2349      	movs	r3, #73	; 0x49
    dcec:	2001      	movs	r0, #1
    dcee:	4c3b      	ldr	r4, [pc, #236]	; (dddc <LORAWAN_RxDone+0x658>)
    dcf0:	47a0      	blx	r4
    dcf2:	4d3b      	ldr	r5, [pc, #236]	; (dde0 <LORAWAN_RxDone+0x65c>)
    dcf4:	4c3b      	ldr	r4, [pc, #236]	; (dde4 <LORAWAN_RxDone+0x660>)
    dcf6:	2210      	movs	r2, #16
    dcf8:	0021      	movs	r1, r4
    dcfa:	4b3b      	ldr	r3, [pc, #236]	; (dde8 <LORAWAN_RxDone+0x664>)
    dcfc:	0028      	movs	r0, r5
    dcfe:	4798      	blx	r3
    dd00:	0032      	movs	r2, r6
    dd02:	4b39      	ldr	r3, [pc, #228]	; (dde8 <LORAWAN_RxDone+0x664>)
    dd04:	0039      	movs	r1, r7
    dd06:	4839      	ldr	r0, [pc, #228]	; (ddec <LORAWAN_RxDone+0x668>)
    dd08:	4798      	blx	r3
    dd0a:	9b07      	ldr	r3, [sp, #28]
    dd0c:	9a08      	ldr	r2, [sp, #32]
    dd0e:	330c      	adds	r3, #12
    dd10:	b2db      	uxtb	r3, r3
    dd12:	9300      	str	r3, [sp, #0]
    dd14:	002b      	movs	r3, r5
    dd16:	2a00      	cmp	r2, #0
    dd18:	d038      	beq.n	dd8c <LORAWAN_RxDone+0x608>
    dd1a:	0022      	movs	r2, r4
    dd1c:	2104      	movs	r1, #4
    dd1e:	4c34      	ldr	r4, [pc, #208]	; (ddf0 <LORAWAN_RxDone+0x66c>)
    dd20:	9806      	ldr	r0, [sp, #24]
    dd22:	47a0      	blx	r4
    dd24:	2204      	movs	r2, #4
    dd26:	492f      	ldr	r1, [pc, #188]	; (dde4 <LORAWAN_RxDone+0x660>)
    dd28:	4c2f      	ldr	r4, [pc, #188]	; (dde8 <LORAWAN_RxDone+0x664>)
    dd2a:	a80d      	add	r0, sp, #52	; 0x34
    dd2c:	47a0      	blx	r4
    dd2e:	2204      	movs	r2, #4
    dd30:	19b9      	adds	r1, r7, r6
    dd32:	a810      	add	r0, sp, #64	; 0x40
    dd34:	47a0      	blx	r4
    dd36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dd38:	9a10      	ldr	r2, [sp, #64]	; 0x40
    dd3a:	4293      	cmp	r3, r2
    dd3c:	d029      	beq.n	dd92 <LORAWAN_RxDone+0x60e>
    dd3e:	4c1d      	ldr	r4, [pc, #116]	; (ddb4 <LORAWAN_RxDone+0x630>)
    dd40:	0023      	movs	r3, r4
    dd42:	33f4      	adds	r3, #244	; 0xf4
    dd44:	781b      	ldrb	r3, [r3, #0]
    dd46:	2b01      	cmp	r3, #1
    dd48:	d108      	bne.n	dd5c <LORAWAN_RxDone+0x5d8>
    dd4a:	0023      	movs	r3, r4
    dd4c:	220e      	movs	r2, #14
    dd4e:	337c      	adds	r3, #124	; 0x7c
    dd50:	781b      	ldrb	r3, [r3, #0]
    dd52:	4013      	ands	r3, r2
    dd54:	2b06      	cmp	r3, #6
    dd56:	d101      	bne.n	dd5c <LORAWAN_RxDone+0x5d8>
    dd58:	4b17      	ldr	r3, [pc, #92]	; (ddb8 <LORAWAN_RxDone+0x634>)
    dd5a:	4798      	blx	r3
    dd5c:	4917      	ldr	r1, [pc, #92]	; (ddbc <LORAWAN_RxDone+0x638>)
    dd5e:	784a      	ldrb	r2, [r1, #1]
    dd60:	780b      	ldrb	r3, [r1, #0]
    dd62:	0212      	lsls	r2, r2, #8
    dd64:	431a      	orrs	r2, r3
    dd66:	788b      	ldrb	r3, [r1, #2]
    dd68:	041b      	lsls	r3, r3, #16
    dd6a:	431a      	orrs	r2, r3
    dd6c:	78cb      	ldrb	r3, [r1, #3]
    dd6e:	061b      	lsls	r3, r3, #24
    dd70:	4313      	orrs	r3, r2
    dd72:	d100      	bne.n	dd76 <LORAWAN_RxDone+0x5f2>
    dd74:	e559      	b.n	d82a <LORAWAN_RxDone+0xa6>
    dd76:	0022      	movs	r2, r4
    dd78:	2120      	movs	r1, #32
    dd7a:	328c      	adds	r2, #140	; 0x8c
    dd7c:	7813      	ldrb	r3, [r2, #0]
    dd7e:	3408      	adds	r4, #8
    dd80:	438b      	bics	r3, r1
    dd82:	7013      	strb	r3, [r2, #0]
    dd84:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dd86:	2018      	movs	r0, #24
    dd88:	67e3      	str	r3, [r4, #124]	; 0x7c
    dd8a:	e754      	b.n	dc36 <LORAWAN_RxDone+0x4b2>
    dd8c:	0022      	movs	r2, r4
    dd8e:	2102      	movs	r1, #2
    dd90:	e7c5      	b.n	dd1e <LORAWAN_RxDone+0x59a>
    dd92:	9b08      	ldr	r3, [sp, #32]
    dd94:	2b00      	cmp	r3, #0
    dd96:	d02f      	beq.n	ddf8 <LORAWAN_RxDone+0x674>
    dd98:	2322      	movs	r3, #34	; 0x22
    dd9a:	aa04      	add	r2, sp, #16
    dd9c:	189b      	adds	r3, r3, r2
    dd9e:	781b      	ldrb	r3, [r3, #0]
    dda0:	003a      	movs	r2, r7
    dda2:	9907      	ldr	r1, [sp, #28]
    dda4:	0038      	movs	r0, r7
    dda6:	4c13      	ldr	r4, [pc, #76]	; (ddf4 <LORAWAN_RxDone+0x670>)
    dda8:	47a0      	blx	r4
    ddaa:	2001      	movs	r0, #1
    ddac:	e54f      	b.n	d84e <LORAWAN_RxDone+0xca>
    ddae:	46c0      	nop			; (mov r8, r8)
    ddb0:	0000ed51 	.word	0x0000ed51
    ddb4:	200019b0 	.word	0x200019b0
    ddb8:	0000b19d 	.word	0x0000b19d
    ddbc:	20001ca8 	.word	0x20001ca8
    ddc0:	0000c1e1 	.word	0x0000c1e1
    ddc4:	0000d2bd 	.word	0x0000d2bd
    ddc8:	00008d6d 	.word	0x00008d6d
    ddcc:	20001a2c 	.word	0x20001a2c
    ddd0:	200019d5 	.word	0x200019d5
    ddd4:	0000ffff 	.word	0x0000ffff
    ddd8:	00003fff 	.word	0x00003fff
    dddc:	0000b105 	.word	0x0000b105
    dde0:	20001cb0 	.word	0x20001cb0
    dde4:	20000fd4 	.word	0x20000fd4
    dde8:	00013e5d 	.word	0x00013e5d
    ddec:	20001cc0 	.word	0x20001cc0
    ddf0:	00008a79 	.word	0x00008a79
    ddf4:	0000edc5 	.word	0x0000edc5
    ddf8:	4cd7      	ldr	r4, [pc, #860]	; (e158 <LORAWAN_RxDone+0x9d4>)
    ddfa:	466a      	mov	r2, sp
    ddfc:	2120      	movs	r1, #32
    ddfe:	0023      	movs	r3, r4
    de00:	1852      	adds	r2, r2, r1
    de02:	7812      	ldrb	r2, [r2, #0]
    de04:	33db      	adds	r3, #219	; 0xdb
    de06:	701a      	strb	r2, [r3, #0]
    de08:	797b      	ldrb	r3, [r7, #5]
    de0a:	2b7f      	cmp	r3, #127	; 0x7f
    de0c:	d909      	bls.n	de22 <LORAWAN_RxDone+0x69e>
    de0e:	0022      	movs	r2, r4
    de10:	2320      	movs	r3, #32
    de12:	327c      	adds	r2, #124	; 0x7c
    de14:	7811      	ldrb	r1, [r2, #0]
    de16:	2001      	movs	r0, #1
    de18:	430b      	orrs	r3, r1
    de1a:	7013      	strb	r3, [r2, #0]
    de1c:	210b      	movs	r1, #11
    de1e:	4bcf      	ldr	r3, [pc, #828]	; (e15c <LORAWAN_RxDone+0x9d8>)
    de20:	4798      	blx	r3
    de22:	797b      	ldrb	r3, [r7, #5]
    de24:	06db      	lsls	r3, r3, #27
    de26:	d505      	bpl.n	de34 <LORAWAN_RxDone+0x6b0>
    de28:	0022      	movs	r2, r4
    de2a:	2308      	movs	r3, #8
    de2c:	328c      	adds	r2, #140	; 0x8c
    de2e:	7811      	ldrb	r1, [r2, #0]
    de30:	430b      	orrs	r3, r1
    de32:	7013      	strb	r3, [r2, #0]
    de34:	797b      	ldrb	r3, [r7, #5]
    de36:	065b      	lsls	r3, r3, #25
    de38:	d505      	bpl.n	de46 <LORAWAN_RxDone+0x6c2>
    de3a:	0022      	movs	r2, r4
    de3c:	2310      	movs	r3, #16
    de3e:	328c      	adds	r2, #140	; 0x8c
    de40:	7811      	ldrb	r1, [r2, #0]
    de42:	430b      	orrs	r3, r1
    de44:	7013      	strb	r3, [r2, #0]
    de46:	221f      	movs	r2, #31
    de48:	783b      	ldrb	r3, [r7, #0]
    de4a:	4393      	bics	r3, r2
    de4c:	2ba0      	cmp	r3, #160	; 0xa0
    de4e:	d105      	bne.n	de5c <LORAWAN_RxDone+0x6d8>
    de50:	0022      	movs	r2, r4
    de52:	328c      	adds	r2, #140	; 0x8c
    de54:	7811      	ldrb	r1, [r2, #0]
    de56:	3b9e      	subs	r3, #158	; 0x9e
    de58:	430b      	orrs	r3, r1
    de5a:	7013      	strb	r3, [r2, #0]
    de5c:	7979      	ldrb	r1, [r7, #5]
    de5e:	070b      	lsls	r3, r1, #28
    de60:	d100      	bne.n	de64 <LORAWAN_RxDone+0x6e0>
    de62:	e0da      	b.n	e01a <LORAWAN_RxDone+0x896>
    de64:	0709      	lsls	r1, r1, #28
    de66:	0f09      	lsrs	r1, r1, #28
    de68:	187b      	adds	r3, r7, r1
    de6a:	7a1b      	ldrb	r3, [r3, #8]
    de6c:	2b00      	cmp	r3, #0
    de6e:	d100      	bne.n	de72 <LORAWAN_RxDone+0x6ee>
    de70:	e0aa      	b.n	dfc8 <LORAWAN_RxDone+0x844>
    de72:	0038      	movs	r0, r7
    de74:	4bba      	ldr	r3, [pc, #744]	; (e160 <LORAWAN_RxDone+0x9dc>)
    de76:	3008      	adds	r0, #8
    de78:	4798      	blx	r3
    de7a:	2301      	movs	r3, #1
    de7c:	0006      	movs	r6, r0
    de7e:	9308      	str	r3, [sp, #32]
    de80:	7978      	ldrb	r0, [r7, #5]
    de82:	9907      	ldr	r1, [sp, #28]
    de84:	0702      	lsls	r2, r0, #28
    de86:	0f12      	lsrs	r2, r2, #28
    de88:	0013      	movs	r3, r2
    de8a:	330c      	adds	r3, #12
    de8c:	4299      	cmp	r1, r3
    de8e:	d100      	bne.n	de92 <LORAWAN_RxDone+0x70e>
    de90:	e0fa      	b.n	e088 <LORAWAN_RxDone+0x904>
    de92:	7833      	ldrb	r3, [r6, #0]
    de94:	1a89      	subs	r1, r1, r2
    de96:	b2c9      	uxtb	r1, r1
    de98:	9309      	str	r3, [sp, #36]	; 0x24
    de9a:	000b      	movs	r3, r1
    de9c:	3219      	adds	r2, #25
    de9e:	3b0c      	subs	r3, #12
    dea0:	4694      	mov	ip, r2
    dea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    dea4:	b2db      	uxtb	r3, r3
    dea6:	9306      	str	r3, [sp, #24]
    dea8:	1c75      	adds	r5, r6, #1
    deaa:	4bab      	ldr	r3, [pc, #684]	; (e158 <LORAWAN_RxDone+0x9d4>)
    deac:	2a00      	cmp	r2, #0
    deae:	d100      	bne.n	deb2 <LORAWAN_RxDone+0x72e>
    deb0:	e0b6      	b.n	e020 <LORAWAN_RxDone+0x89c>
    deb2:	681a      	ldr	r2, [r3, #0]
    deb4:	0018      	movs	r0, r3
    deb6:	791b      	ldrb	r3, [r3, #4]
    deb8:	0a14      	lsrs	r4, r2, #8
    deba:	061b      	lsls	r3, r3, #24
    debc:	4323      	orrs	r3, r4
    debe:	9304      	str	r3, [sp, #16]
    dec0:	4ba8      	ldr	r3, [pc, #672]	; (e164 <LORAWAN_RxDone+0x9e0>)
    dec2:	2201      	movs	r2, #1
    dec4:	9303      	str	r3, [sp, #12]
    dec6:	4663      	mov	r3, ip
    dec8:	9302      	str	r3, [sp, #8]
    deca:	4ba7      	ldr	r3, [pc, #668]	; (e168 <LORAWAN_RxDone+0x9e4>)
    decc:	3008      	adds	r0, #8
    dece:	390d      	subs	r1, #13
    ded0:	9201      	str	r2, [sp, #4]
    ded2:	9300      	str	r3, [sp, #0]
    ded4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
    ded6:	b2c9      	uxtb	r1, r1
    ded8:	0028      	movs	r0, r5
    deda:	4ca4      	ldr	r4, [pc, #656]	; (e16c <LORAWAN_RxDone+0x9e8>)
    dedc:	47a0      	blx	r4
    dede:	2800      	cmp	r0, #0
    dee0:	d004      	beq.n	deec <LORAWAN_RxDone+0x768>
    dee2:	4ba3      	ldr	r3, [pc, #652]	; (e170 <LORAWAN_RxDone+0x9ec>)
    dee4:	4798      	blx	r3
    dee6:	201f      	movs	r0, #31
    dee8:	4ba2      	ldr	r3, [pc, #648]	; (e174 <LORAWAN_RxDone+0x9f0>)
    deea:	4798      	blx	r3
    deec:	4c9a      	ldr	r4, [pc, #616]	; (e158 <LORAWAN_RxDone+0x9d4>)
    deee:	2300      	movs	r3, #0
    def0:	0022      	movs	r2, r4
    def2:	32c2      	adds	r2, #194	; 0xc2
    def4:	8013      	strh	r3, [r2, #0]
    def6:	0022      	movs	r2, r4
    def8:	32ed      	adds	r2, #237	; 0xed
    defa:	7013      	strb	r3, [r2, #0]
    defc:	0022      	movs	r2, r4
    defe:	2110      	movs	r1, #16
    df00:	328c      	adds	r2, #140	; 0x8c
    df02:	7813      	ldrb	r3, [r2, #0]
    df04:	438b      	bics	r3, r1
    df06:	7013      	strb	r3, [r2, #0]
    df08:	0023      	movs	r3, r4
    df0a:	2201      	movs	r2, #1
    df0c:	337c      	adds	r3, #124	; 0x7c
    df0e:	7859      	ldrb	r1, [r3, #1]
    df10:	430a      	orrs	r2, r1
    df12:	705a      	strb	r2, [r3, #1]
    df14:	220e      	movs	r2, #14
    df16:	781b      	ldrb	r3, [r3, #0]
    df18:	4013      	ands	r3, r2
    df1a:	2b06      	cmp	r3, #6
    df1c:	d109      	bne.n	df32 <LORAWAN_RxDone+0x7ae>
    df1e:	0023      	movs	r3, r4
    df20:	33f4      	adds	r3, #244	; 0xf4
    df22:	781b      	ldrb	r3, [r3, #0]
    df24:	2b01      	cmp	r3, #1
    df26:	d104      	bne.n	df32 <LORAWAN_RxDone+0x7ae>
    df28:	0023      	movs	r3, r4
    df2a:	33e5      	adds	r3, #229	; 0xe5
    df2c:	7818      	ldrb	r0, [r3, #0]
    df2e:	4b92      	ldr	r3, [pc, #584]	; (e178 <LORAWAN_RxDone+0x9f4>)
    df30:	4798      	blx	r3
    df32:	0025      	movs	r5, r4
    df34:	2201      	movs	r2, #1
    df36:	358c      	adds	r5, #140	; 0x8c
    df38:	782b      	ldrb	r3, [r5, #0]
    df3a:	4213      	tst	r3, r2
    df3c:	d100      	bne.n	df40 <LORAWAN_RxDone+0x7bc>
    df3e:	e0e5      	b.n	e10c <LORAWAN_RxDone+0x988>
    df40:	797b      	ldrb	r3, [r7, #5]
    df42:	321f      	adds	r2, #31
    df44:	4213      	tst	r3, r2
    df46:	d100      	bne.n	df4a <LORAWAN_RxDone+0x7c6>
    df48:	e0c6      	b.n	e0d8 <LORAWAN_RxDone+0x954>
    df4a:	4b8c      	ldr	r3, [pc, #560]	; (e17c <LORAWAN_RxDone+0x9f8>)
    df4c:	4798      	blx	r3
    df4e:	0023      	movs	r3, r4
    df50:	2101      	movs	r1, #1
    df52:	337c      	adds	r3, #124	; 0x7c
    df54:	785a      	ldrb	r2, [r3, #1]
    df56:	438a      	bics	r2, r1
    df58:	705a      	strb	r2, [r3, #1]
    df5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    df5c:	2a00      	cmp	r2, #0
    df5e:	d100      	bne.n	df62 <LORAWAN_RxDone+0x7de>
    df60:	e09a      	b.n	e098 <LORAWAN_RxDone+0x914>
    df62:	9a06      	ldr	r2, [sp, #24]
    df64:	0031      	movs	r1, r6
    df66:	0038      	movs	r0, r7
    df68:	4b85      	ldr	r3, [pc, #532]	; (e180 <LORAWAN_RxDone+0x9fc>)
    df6a:	4798      	blx	r3
    df6c:	4b85      	ldr	r3, [pc, #532]	; (e184 <LORAWAN_RxDone+0xa00>)
    df6e:	4d7a      	ldr	r5, [pc, #488]	; (e158 <LORAWAN_RxDone+0x9d4>)
    df70:	781b      	ldrb	r3, [r3, #0]
    df72:	06db      	lsls	r3, r3, #27
    df74:	d400      	bmi.n	df78 <LORAWAN_RxDone+0x7f4>
    df76:	e166      	b.n	e246 <LORAWAN_RxDone+0xac2>
    df78:	2220      	movs	r2, #32
    df7a:	4b83      	ldr	r3, [pc, #524]	; (e188 <LORAWAN_RxDone+0xa04>)
    df7c:	781b      	ldrb	r3, [r3, #0]
    df7e:	401a      	ands	r2, r3
    df80:	9206      	str	r2, [sp, #24]
    df82:	d000      	beq.n	df86 <LORAWAN_RxDone+0x802>
    df84:	e15f      	b.n	e246 <LORAWAN_RxDone+0xac2>
    df86:	320a      	adds	r2, #10
    df88:	4213      	tst	r3, r2
    df8a:	d100      	bne.n	df8e <LORAWAN_RxDone+0x80a>
    df8c:	e15b      	b.n	e246 <LORAWAN_RxDone+0xac2>
    df8e:	002b      	movs	r3, r5
    df90:	33ec      	adds	r3, #236	; 0xec
    df92:	781b      	ldrb	r3, [r3, #0]
    df94:	a90f      	add	r1, sp, #60	; 0x3c
    df96:	704b      	strb	r3, [r1, #1]
    df98:	002e      	movs	r6, r5
    df9a:	2301      	movs	r3, #1
    df9c:	36df      	adds	r6, #223	; 0xdf
    df9e:	700b      	strb	r3, [r1, #0]
    dfa0:	7833      	ldrb	r3, [r6, #0]
    dfa2:	aa0e      	add	r2, sp, #56	; 0x38
    dfa4:	2030      	movs	r0, #48	; 0x30
    dfa6:	4f79      	ldr	r7, [pc, #484]	; (e18c <LORAWAN_RxDone+0xa08>)
    dfa8:	708b      	strb	r3, [r1, #2]
    dfaa:	47b8      	blx	r7
    dfac:	9007      	str	r0, [sp, #28]
    dfae:	2808      	cmp	r0, #8
    dfb0:	d000      	beq.n	dfb4 <LORAWAN_RxDone+0x830>
    dfb2:	e0ff      	b.n	e1b4 <LORAWAN_RxDone+0xa30>
    dfb4:	4b76      	ldr	r3, [pc, #472]	; (e190 <LORAWAN_RxDone+0xa0c>)
    dfb6:	9806      	ldr	r0, [sp, #24]
    dfb8:	4798      	blx	r3
    dfba:	4b73      	ldr	r3, [pc, #460]	; (e188 <LORAWAN_RxDone+0xa04>)
    dfbc:	9a07      	ldr	r2, [sp, #28]
    dfbe:	781b      	ldrb	r3, [r3, #0]
    dfc0:	4393      	bics	r3, r2
    dfc2:	4a71      	ldr	r2, [pc, #452]	; (e188 <LORAWAN_RxDone+0xa04>)
    dfc4:	7013      	strb	r3, [r2, #0]
    dfc6:	e6f0      	b.n	ddaa <LORAWAN_RxDone+0x626>
    dfc8:	0023      	movs	r3, r4
    dfca:	33f4      	adds	r3, #244	; 0xf4
    dfcc:	781b      	ldrb	r3, [r3, #0]
    dfce:	2b01      	cmp	r3, #1
    dfd0:	d108      	bne.n	dfe4 <LORAWAN_RxDone+0x860>
    dfd2:	0023      	movs	r3, r4
    dfd4:	220e      	movs	r2, #14
    dfd6:	337c      	adds	r3, #124	; 0x7c
    dfd8:	781b      	ldrb	r3, [r3, #0]
    dfda:	4013      	ands	r3, r2
    dfdc:	2b06      	cmp	r3, #6
    dfde:	d101      	bne.n	dfe4 <LORAWAN_RxDone+0x860>
    dfe0:	4b6c      	ldr	r3, [pc, #432]	; (e194 <LORAWAN_RxDone+0xa10>)
    dfe2:	4798      	blx	r3
    dfe4:	496c      	ldr	r1, [pc, #432]	; (e198 <LORAWAN_RxDone+0xa14>)
    dfe6:	784a      	ldrb	r2, [r1, #1]
    dfe8:	780b      	ldrb	r3, [r1, #0]
    dfea:	0212      	lsls	r2, r2, #8
    dfec:	431a      	orrs	r2, r3
    dfee:	788b      	ldrb	r3, [r1, #2]
    dff0:	041b      	lsls	r3, r3, #16
    dff2:	431a      	orrs	r2, r3
    dff4:	78cb      	ldrb	r3, [r1, #3]
    dff6:	061b      	lsls	r3, r3, #24
    dff8:	4313      	orrs	r3, r2
    dffa:	d008      	beq.n	e00e <LORAWAN_RxDone+0x88a>
    dffc:	0022      	movs	r2, r4
    dffe:	2120      	movs	r1, #32
    e000:	328c      	adds	r2, #140	; 0x8c
    e002:	7813      	ldrb	r3, [r2, #0]
    e004:	201e      	movs	r0, #30
    e006:	438b      	bics	r3, r1
    e008:	7013      	strb	r3, [r2, #0]
    e00a:	4b5a      	ldr	r3, [pc, #360]	; (e174 <LORAWAN_RxDone+0x9f0>)
    e00c:	4798      	blx	r3
    e00e:	2300      	movs	r3, #0
    e010:	34d8      	adds	r4, #216	; 0xd8
    e012:	7023      	strb	r3, [r4, #0]
    e014:	4b56      	ldr	r3, [pc, #344]	; (e170 <LORAWAN_RxDone+0x9ec>)
    e016:	4798      	blx	r3
    e018:	e6c7      	b.n	ddaa <LORAWAN_RxDone+0x626>
    e01a:	003e      	movs	r6, r7
    e01c:	3608      	adds	r6, #8
    e01e:	e72f      	b.n	de80 <LORAWAN_RxDone+0x6fc>
    e020:	9a06      	ldr	r2, [sp, #24]
    e022:	2a00      	cmp	r2, #0
    e024:	d034      	beq.n	e090 <LORAWAN_RxDone+0x90c>
    e026:	0702      	lsls	r2, r0, #28
    e028:	d128      	bne.n	e07c <LORAWAN_RxDone+0x8f8>
    e02a:	390d      	subs	r1, #13
    e02c:	681a      	ldr	r2, [r3, #0]
    e02e:	b2cc      	uxtb	r4, r1
    e030:	0019      	movs	r1, r3
    e032:	791b      	ldrb	r3, [r3, #4]
    e034:	0a10      	lsrs	r0, r2, #8
    e036:	061b      	lsls	r3, r3, #24
    e038:	4303      	orrs	r3, r0
    e03a:	9304      	str	r3, [sp, #16]
    e03c:	4b49      	ldr	r3, [pc, #292]	; (e164 <LORAWAN_RxDone+0x9e0>)
    e03e:	3108      	adds	r1, #8
    e040:	9303      	str	r3, [sp, #12]
    e042:	4663      	mov	r3, ip
    e044:	9302      	str	r3, [sp, #8]
    e046:	2302      	movs	r3, #2
    e048:	9301      	str	r3, [sp, #4]
    e04a:	4b54      	ldr	r3, [pc, #336]	; (e19c <LORAWAN_RxDone+0xa18>)
    e04c:	2201      	movs	r2, #1
    e04e:	9300      	str	r3, [sp, #0]
    e050:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
    e052:	0028      	movs	r0, r5
    e054:	0021      	movs	r1, r4
    e056:	4e45      	ldr	r6, [pc, #276]	; (e16c <LORAWAN_RxDone+0x9e8>)
    e058:	47b0      	blx	r6
    e05a:	2800      	cmp	r0, #0
    e05c:	d004      	beq.n	e068 <LORAWAN_RxDone+0x8e4>
    e05e:	4b44      	ldr	r3, [pc, #272]	; (e170 <LORAWAN_RxDone+0x9ec>)
    e060:	4798      	blx	r3
    e062:	201f      	movs	r0, #31
    e064:	4b43      	ldr	r3, [pc, #268]	; (e174 <LORAWAN_RxDone+0x9f0>)
    e066:	4798      	blx	r3
    e068:	4b3d      	ldr	r3, [pc, #244]	; (e160 <LORAWAN_RxDone+0x9dc>)
    e06a:	0021      	movs	r1, r4
    e06c:	0028      	movs	r0, r5
    e06e:	4798      	blx	r3
    e070:	2300      	movs	r3, #0
    e072:	9306      	str	r3, [sp, #24]
    e074:	3301      	adds	r3, #1
    e076:	9308      	str	r3, [sp, #32]
    e078:	2600      	movs	r6, #0
    e07a:	e737      	b.n	deec <LORAWAN_RxDone+0x768>
    e07c:	001a      	movs	r2, r3
    e07e:	32f4      	adds	r2, #244	; 0xf4
    e080:	7812      	ldrb	r2, [r2, #0]
    e082:	2a01      	cmp	r2, #1
    e084:	d1ae      	bne.n	dfe4 <LORAWAN_RxDone+0x860>
    e086:	e7a5      	b.n	dfd4 <LORAWAN_RxDone+0x850>
    e088:	2600      	movs	r6, #0
    e08a:	9609      	str	r6, [sp, #36]	; 0x24
    e08c:	9606      	str	r6, [sp, #24]
    e08e:	e72d      	b.n	deec <LORAWAN_RxDone+0x768>
    e090:	9b06      	ldr	r3, [sp, #24]
    e092:	9309      	str	r3, [sp, #36]	; 0x24
    e094:	001e      	movs	r6, r3
    e096:	e729      	b.n	deec <LORAWAN_RxDone+0x768>
    e098:	2120      	movs	r1, #32
    e09a:	782a      	ldrb	r2, [r5, #0]
    e09c:	438a      	bics	r2, r1
    e09e:	702a      	strb	r2, [r5, #0]
    e0a0:	0022      	movs	r2, r4
    e0a2:	32f4      	adds	r2, #244	; 0xf4
    e0a4:	7812      	ldrb	r2, [r2, #0]
    e0a6:	2a01      	cmp	r2, #1
    e0a8:	d10e      	bne.n	e0c8 <LORAWAN_RxDone+0x944>
    e0aa:	781a      	ldrb	r2, [r3, #0]
    e0ac:	3912      	subs	r1, #18
    e0ae:	438a      	bics	r2, r1
    e0b0:	701a      	strb	r2, [r3, #0]
    e0b2:	23ea      	movs	r3, #234	; 0xea
    e0b4:	4a28      	ldr	r2, [pc, #160]	; (e158 <LORAWAN_RxDone+0x9d4>)
    e0b6:	005b      	lsls	r3, r3, #1
    e0b8:	5cd3      	ldrb	r3, [r2, r3]
    e0ba:	2b00      	cmp	r3, #0
    e0bc:	d000      	beq.n	e0c0 <LORAWAN_RxDone+0x93c>
    e0be:	e755      	b.n	df6c <LORAWAN_RxDone+0x7e8>
    e0c0:	2008      	movs	r0, #8
    e0c2:	4b2c      	ldr	r3, [pc, #176]	; (e174 <LORAWAN_RxDone+0x9f0>)
    e0c4:	4798      	blx	r3
    e0c6:	e751      	b.n	df6c <LORAWAN_RxDone+0x7e8>
    e0c8:	2a04      	cmp	r2, #4
    e0ca:	d1f2      	bne.n	e0b2 <LORAWAN_RxDone+0x92e>
    e0cc:	0023      	movs	r3, r4
    e0ce:	33e8      	adds	r3, #232	; 0xe8
    e0d0:	7818      	ldrb	r0, [r3, #0]
    e0d2:	4b29      	ldr	r3, [pc, #164]	; (e178 <LORAWAN_RxDone+0x9f4>)
    e0d4:	4798      	blx	r3
    e0d6:	e7ec      	b.n	e0b2 <LORAWAN_RxDone+0x92e>
    e0d8:	9b08      	ldr	r3, [sp, #32]
    e0da:	2b00      	cmp	r3, #0
    e0dc:	d013      	beq.n	e106 <LORAWAN_RxDone+0x982>
    e0de:	0023      	movs	r3, r4
    e0e0:	33f4      	adds	r3, #244	; 0xf4
    e0e2:	781e      	ldrb	r6, [r3, #0]
    e0e4:	2e01      	cmp	r6, #1
    e0e6:	d10e      	bne.n	e106 <LORAWAN_RxDone+0x982>
    e0e8:	4b24      	ldr	r3, [pc, #144]	; (e17c <LORAWAN_RxDone+0x9f8>)
    e0ea:	4798      	blx	r3
    e0ec:	0022      	movs	r2, r4
    e0ee:	327c      	adds	r2, #124	; 0x7c
    e0f0:	7853      	ldrb	r3, [r2, #1]
    e0f2:	43b3      	bics	r3, r6
    e0f4:	7053      	strb	r3, [r2, #1]
    e0f6:	2220      	movs	r2, #32
    e0f8:	782b      	ldrb	r3, [r5, #0]
    e0fa:	4393      	bics	r3, r2
    e0fc:	702b      	strb	r3, [r5, #0]
    e0fe:	23ea      	movs	r3, #234	; 0xea
    e100:	005b      	lsls	r3, r3, #1
    e102:	5ce3      	ldrb	r3, [r4, r3]
    e104:	e7d9      	b.n	e0ba <LORAWAN_RxDone+0x936>
    e106:	4b26      	ldr	r3, [pc, #152]	; (e1a0 <LORAWAN_RxDone+0xa1c>)
    e108:	4798      	blx	r3
    e10a:	e72f      	b.n	df6c <LORAWAN_RxDone+0x7e8>
    e10c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e10e:	2a00      	cmp	r2, #0
    e110:	d00b      	beq.n	e12a <LORAWAN_RxDone+0x9a6>
    e112:	9a06      	ldr	r2, [sp, #24]
    e114:	0031      	movs	r1, r6
    e116:	0038      	movs	r0, r7
    e118:	4b19      	ldr	r3, [pc, #100]	; (e180 <LORAWAN_RxDone+0x9fc>)
    e11a:	4798      	blx	r3
    e11c:	0022      	movs	r2, r4
    e11e:	2101      	movs	r1, #1
    e120:	327c      	adds	r2, #124	; 0x7c
    e122:	7853      	ldrb	r3, [r2, #1]
    e124:	438b      	bics	r3, r1
    e126:	7053      	strb	r3, [r2, #1]
    e128:	e720      	b.n	df6c <LORAWAN_RxDone+0x7e8>
    e12a:	2220      	movs	r2, #32
    e12c:	4393      	bics	r3, r2
    e12e:	702b      	strb	r3, [r5, #0]
    e130:	0023      	movs	r3, r4
    e132:	33f4      	adds	r3, #244	; 0xf4
    e134:	781b      	ldrb	r3, [r3, #0]
    e136:	2b01      	cmp	r3, #1
    e138:	d134      	bne.n	e1a4 <LORAWAN_RxDone+0xa20>
    e13a:	0022      	movs	r2, r4
    e13c:	210e      	movs	r1, #14
    e13e:	327c      	adds	r2, #124	; 0x7c
    e140:	7813      	ldrb	r3, [r2, #0]
    e142:	438b      	bics	r3, r1
    e144:	7013      	strb	r3, [r2, #0]
    e146:	23ea      	movs	r3, #234	; 0xea
    e148:	005b      	lsls	r3, r3, #1
    e14a:	5ce3      	ldrb	r3, [r4, r3]
    e14c:	2b00      	cmp	r3, #0
    e14e:	d1e5      	bne.n	e11c <LORAWAN_RxDone+0x998>
    e150:	2008      	movs	r0, #8
    e152:	4b08      	ldr	r3, [pc, #32]	; (e174 <LORAWAN_RxDone+0x9f0>)
    e154:	4798      	blx	r3
    e156:	e7e1      	b.n	e11c <LORAWAN_RxDone+0x998>
    e158:	200019b0 	.word	0x200019b0
    e15c:	00008d6d 	.word	0x00008d6d
    e160:	0000d4ed 	.word	0x0000d4ed
    e164:	20001cb0 	.word	0x20001cb0
    e168:	200019e5 	.word	0x200019e5
    e16c:	0000c121 	.word	0x0000c121
    e170:	0000d2bd 	.word	0x0000d2bd
    e174:	0000c1e1 	.word	0x0000c1e1
    e178:	00009aa1 	.word	0x00009aa1
    e17c:	0000b6b9 	.word	0x0000b6b9
    e180:	0000c5d1 	.word	0x0000c5d1
    e184:	20001a2c 	.word	0x20001a2c
    e188:	20001a3c 	.word	0x20001a3c
    e18c:	00008755 	.word	0x00008755
    e190:	0000b3e5 	.word	0x0000b3e5
    e194:	0000b19d 	.word	0x0000b19d
    e198:	20001ca8 	.word	0x20001ca8
    e19c:	200019d5 	.word	0x200019d5
    e1a0:	0000b645 	.word	0x0000b645
    e1a4:	2b04      	cmp	r3, #4
    e1a6:	d1ce      	bne.n	e146 <LORAWAN_RxDone+0x9c2>
    e1a8:	0023      	movs	r3, r4
    e1aa:	33e8      	adds	r3, #232	; 0xe8
    e1ac:	7818      	ldrb	r0, [r3, #0]
    e1ae:	4b43      	ldr	r3, [pc, #268]	; (e2bc <LORAWAN_RxDone+0xb38>)
    e1b0:	4798      	blx	r3
    e1b2:	e7c8      	b.n	e146 <LORAWAN_RxDone+0x9c2>
    e1b4:	35ff      	adds	r5, #255	; 0xff
    e1b6:	7c6b      	ldrb	r3, [r5, #17]
    e1b8:	079a      	lsls	r2, r3, #30
    e1ba:	d521      	bpl.n	e200 <LORAWAN_RxDone+0xa7c>
    e1bc:	aa10      	add	r2, sp, #64	; 0x40
    e1be:	0031      	movs	r1, r6
    e1c0:	2026      	movs	r0, #38	; 0x26
    e1c2:	47b8      	blx	r7
    e1c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e1c6:	1c5a      	adds	r2, r3, #1
    e1c8:	d001      	beq.n	e1ce <LORAWAN_RxDone+0xa4a>
    e1ca:	3314      	adds	r3, #20
    e1cc:	9310      	str	r3, [sp, #64]	; 0x40
    e1ce:	0021      	movs	r1, r4
    e1d0:	220e      	movs	r2, #14
    e1d2:	317c      	adds	r1, #124	; 0x7c
    e1d4:	780b      	ldrb	r3, [r1, #0]
    e1d6:	4393      	bics	r3, r2
    e1d8:	001a      	movs	r2, r3
    e1da:	230c      	movs	r3, #12
    e1dc:	4313      	orrs	r3, r2
    e1de:	700b      	strb	r3, [r1, #0]
    e1e0:	23e0      	movs	r3, #224	; 0xe0
    e1e2:	33ff      	adds	r3, #255	; 0xff
    e1e4:	5ce3      	ldrb	r3, [r4, r3]
    e1e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e1e8:	21fa      	movs	r1, #250	; 0xfa
    e1ea:	1ad3      	subs	r3, r2, r3
    e1ec:	2200      	movs	r2, #0
    e1ee:	0089      	lsls	r1, r1, #2
    e1f0:	4359      	muls	r1, r3
    e1f2:	34e6      	adds	r4, #230	; 0xe6
    e1f4:	4b32      	ldr	r3, [pc, #200]	; (e2c0 <LORAWAN_RxDone+0xb3c>)
    e1f6:	7820      	ldrb	r0, [r4, #0]
    e1f8:	9200      	str	r2, [sp, #0]
    e1fa:	4c32      	ldr	r4, [pc, #200]	; (e2c4 <LORAWAN_RxDone+0xb40>)
    e1fc:	47a0      	blx	r4
    e1fe:	e5d4      	b.n	ddaa <LORAWAN_RxDone+0x626>
    e200:	075b      	lsls	r3, r3, #29
    e202:	d400      	bmi.n	e206 <LORAWAN_RxDone+0xa82>
    e204:	e5d1      	b.n	ddaa <LORAWAN_RxDone+0x626>
    e206:	aa10      	add	r2, sp, #64	; 0x40
    e208:	0031      	movs	r1, r6
    e20a:	2033      	movs	r0, #51	; 0x33
    e20c:	47b8      	blx	r7
    e20e:	220e      	movs	r2, #14
    e210:	4b2d      	ldr	r3, [pc, #180]	; (e2c8 <LORAWAN_RxDone+0xb44>)
    e212:	781b      	ldrb	r3, [r3, #0]
    e214:	4393      	bics	r3, r2
    e216:	001a      	movs	r2, r3
    e218:	230c      	movs	r3, #12
    e21a:	4313      	orrs	r3, r2
    e21c:	4a2a      	ldr	r2, [pc, #168]	; (e2c8 <LORAWAN_RxDone+0xb44>)
    e21e:	7013      	strb	r3, [r2, #0]
    e220:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e222:	1c5a      	adds	r2, r3, #1
    e224:	d001      	beq.n	e22a <LORAWAN_RxDone+0xaa6>
    e226:	3301      	adds	r3, #1
    e228:	9310      	str	r3, [sp, #64]	; 0x40
    e22a:	23e0      	movs	r3, #224	; 0xe0
    e22c:	33ff      	adds	r3, #255	; 0xff
    e22e:	5ce3      	ldrb	r3, [r4, r3]
    e230:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e232:	21fa      	movs	r1, #250	; 0xfa
    e234:	1ad3      	subs	r3, r2, r3
    e236:	2200      	movs	r2, #0
    e238:	0089      	lsls	r1, r1, #2
    e23a:	34e9      	adds	r4, #233	; 0xe9
    e23c:	4359      	muls	r1, r3
    e23e:	7820      	ldrb	r0, [r4, #0]
    e240:	4b22      	ldr	r3, [pc, #136]	; (e2cc <LORAWAN_RxDone+0xb48>)
    e242:	9200      	str	r2, [sp, #0]
    e244:	e7d9      	b.n	e1fa <LORAWAN_RxDone+0xa76>
    e246:	35f4      	adds	r5, #244	; 0xf4
    e248:	782b      	ldrb	r3, [r5, #0]
    e24a:	2b04      	cmp	r3, #4
    e24c:	d000      	beq.n	e250 <LORAWAN_RxDone+0xacc>
    e24e:	e5ac      	b.n	ddaa <LORAWAN_RxDone+0x626>
    e250:	0038      	movs	r0, r7
    e252:	4b1f      	ldr	r3, [pc, #124]	; (e2d0 <LORAWAN_RxDone+0xb4c>)
    e254:	4798      	blx	r3
    e256:	e5a8      	b.n	ddaa <LORAWAN_RxDone+0x626>
    e258:	220e      	movs	r2, #14
    e25a:	4013      	ands	r3, r2
    e25c:	2b0a      	cmp	r3, #10
    e25e:	d008      	beq.n	e272 <LORAWAN_RxDone+0xaee>
    e260:	2b06      	cmp	r3, #6
    e262:	d000      	beq.n	e266 <LORAWAN_RxDone+0xae2>
    e264:	e4da      	b.n	dc1c <LORAWAN_RxDone+0x498>
    e266:	0023      	movs	r3, r4
    e268:	33f0      	adds	r3, #240	; 0xf0
    e26a:	781b      	ldrb	r3, [r3, #0]
    e26c:	2b00      	cmp	r3, #0
    e26e:	d100      	bne.n	e272 <LORAWAN_RxDone+0xaee>
    e270:	e4d4      	b.n	dc1c <LORAWAN_RxDone+0x498>
    e272:	2220      	movs	r2, #32
    e274:	348c      	adds	r4, #140	; 0x8c
    e276:	7823      	ldrb	r3, [r4, #0]
    e278:	2019      	movs	r0, #25
    e27a:	4393      	bics	r3, r2
    e27c:	7023      	strb	r3, [r4, #0]
    e27e:	e4da      	b.n	dc36 <LORAWAN_RxDone+0x4b2>
    e280:	4914      	ldr	r1, [pc, #80]	; (e2d4 <LORAWAN_RxDone+0xb50>)
    e282:	784a      	ldrb	r2, [r1, #1]
    e284:	780b      	ldrb	r3, [r1, #0]
    e286:	0212      	lsls	r2, r2, #8
    e288:	431a      	orrs	r2, r3
    e28a:	788b      	ldrb	r3, [r1, #2]
    e28c:	041b      	lsls	r3, r3, #16
    e28e:	431a      	orrs	r2, r3
    e290:	78cb      	ldrb	r3, [r1, #3]
    e292:	061b      	lsls	r3, r3, #24
    e294:	4313      	orrs	r3, r2
    e296:	d100      	bne.n	e29a <LORAWAN_RxDone+0xb16>
    e298:	e587      	b.n	ddaa <LORAWAN_RxDone+0x626>
    e29a:	4b0f      	ldr	r3, [pc, #60]	; (e2d8 <LORAWAN_RxDone+0xb54>)
    e29c:	4c0f      	ldr	r4, [pc, #60]	; (e2dc <LORAWAN_RxDone+0xb58>)
    e29e:	781b      	ldrb	r3, [r3, #0]
    e2a0:	2b10      	cmp	r3, #16
    e2a2:	d105      	bne.n	e2b0 <LORAWAN_RxDone+0xb2c>
    e2a4:	0001      	movs	r1, r0
    e2a6:	2000      	movs	r0, #0
    e2a8:	9a07      	ldr	r2, [sp, #28]
    e2aa:	3b0c      	subs	r3, #12
    e2ac:	47a0      	blx	r4
    e2ae:	e57c      	b.n	ddaa <LORAWAN_RxDone+0x626>
    e2b0:	2300      	movs	r3, #0
    e2b2:	0001      	movs	r1, r0
    e2b4:	9a07      	ldr	r2, [sp, #28]
    e2b6:	0018      	movs	r0, r3
    e2b8:	e7f8      	b.n	e2ac <LORAWAN_RxDone+0xb28>
    e2ba:	46c0      	nop			; (mov r8, r8)
    e2bc:	00009aa1 	.word	0x00009aa1
    e2c0:	0000b4dd 	.word	0x0000b4dd
    e2c4:	00009795 	.word	0x00009795
    e2c8:	20001a2c 	.word	0x20001a2c
    e2cc:	0000bee5 	.word	0x0000bee5
    e2d0:	0000eb39 	.word	0x0000eb39
    e2d4:	20001ca8 	.word	0x20001ca8
    e2d8:	20001b94 	.word	0x20001b94
    e2dc:	0000c585 	.word	0x0000c585

0000e2e0 <LorawanSetEdClass>:
    e2e0:	23ea      	movs	r3, #234	; 0xea
    e2e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e2e4:	4d19      	ldr	r5, [pc, #100]	; (e34c <LorawanSetEdClass+0x6c>)
    e2e6:	005b      	lsls	r3, r3, #1
    e2e8:	5ceb      	ldrb	r3, [r5, r3]
    e2ea:	0004      	movs	r4, r0
    e2ec:	2011      	movs	r0, #17
    e2ee:	2b00      	cmp	r3, #0
    e2f0:	d013      	beq.n	e31a <LorawanSetEdClass+0x3a>
    e2f2:	002b      	movs	r3, r5
    e2f4:	33f5      	adds	r3, #245	; 0xf5
    e2f6:	781b      	ldrb	r3, [r3, #0]
    e2f8:	3807      	subs	r0, #7
    e2fa:	4223      	tst	r3, r4
    e2fc:	d00d      	beq.n	e31a <LorawanSetEdClass+0x3a>
    e2fe:	002b      	movs	r3, r5
    e300:	33f4      	adds	r3, #244	; 0xf4
    e302:	7819      	ldrb	r1, [r3, #0]
    e304:	428c      	cmp	r4, r1
    e306:	d007      	beq.n	e318 <LorawanSetEdClass+0x38>
    e308:	2901      	cmp	r1, #1
    e30a:	d107      	bne.n	e31c <LorawanSetEdClass+0x3c>
    e30c:	2c04      	cmp	r4, #4
    e30e:	d104      	bne.n	e31a <LorawanSetEdClass+0x3a>
    e310:	701c      	strb	r4, [r3, #0]
    e312:	2000      	movs	r0, #0
    e314:	4b0e      	ldr	r3, [pc, #56]	; (e350 <LorawanSetEdClass+0x70>)
    e316:	4798      	blx	r3
    e318:	2008      	movs	r0, #8
    e31a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e31c:	2904      	cmp	r1, #4
    e31e:	d1fc      	bne.n	e31a <LorawanSetEdClass+0x3a>
    e320:	2c01      	cmp	r4, #1
    e322:	d1fa      	bne.n	e31a <LorawanSetEdClass+0x3a>
    e324:	701c      	strb	r4, [r3, #0]
    e326:	0021      	movs	r1, r4
    e328:	4b09      	ldr	r3, [pc, #36]	; (e350 <LorawanSetEdClass+0x70>)
    e32a:	2000      	movs	r0, #0
    e32c:	4798      	blx	r3
    e32e:	002a      	movs	r2, r5
    e330:	210e      	movs	r1, #14
    e332:	327c      	adds	r2, #124	; 0x7c
    e334:	7813      	ldrb	r3, [r2, #0]
    e336:	a801      	add	r0, sp, #4
    e338:	438b      	bics	r3, r1
    e33a:	7013      	strb	r3, [r2, #0]
    e33c:	35ff      	adds	r5, #255	; 0xff
    e33e:	4b05      	ldr	r3, [pc, #20]	; (e354 <LorawanSetEdClass+0x74>)
    e340:	7004      	strb	r4, [r0, #0]
    e342:	4798      	blx	r3
    e344:	7f68      	ldrb	r0, [r5, #29]
    e346:	4b04      	ldr	r3, [pc, #16]	; (e358 <LorawanSetEdClass+0x78>)
    e348:	4798      	blx	r3
    e34a:	e7e5      	b.n	e318 <LorawanSetEdClass+0x38>
    e34c:	200019b0 	.word	0x200019b0
    e350:	00008d6d 	.word	0x00008d6d
    e354:	00010615 	.word	0x00010615
    e358:	00009aa1 	.word	0x00009aa1

0000e35c <LORAWAN_SetAttr>:
    e35c:	23ea      	movs	r3, #234	; 0xea
    e35e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e360:	4cbf      	ldr	r4, [pc, #764]	; (e660 <LORAWAN_SetAttr+0x304>)
    e362:	005b      	lsls	r3, r3, #1
    e364:	5ce3      	ldrb	r3, [r4, r3]
    e366:	000d      	movs	r5, r1
    e368:	2611      	movs	r6, #17
    e36a:	2b00      	cmp	r3, #0
    e36c:	d100      	bne.n	e370 <LORAWAN_SetAttr+0x14>
    e36e:	e113      	b.n	e598 <LORAWAN_SetAttr+0x23c>
    e370:	2839      	cmp	r0, #57	; 0x39
    e372:	d86b      	bhi.n	e44c <LORAWAN_SetAttr+0xf0>
    e374:	f002 fd40 	bl	10df8 <__gnu_thumb1_case_uhi>
    e378:	0086003a 	.word	0x0086003a
    e37c:	00ef00a5 	.word	0x00ef00a5
    e380:	00d900b8 	.word	0x00d900b8
    e384:	01280112 	.word	0x01280112
    e388:	015a0148 	.word	0x015a0148
    e38c:	016b0160 	.word	0x016b0160
    e390:	0197017e 	.word	0x0197017e
    e394:	01a1019c 	.word	0x01a1019c
    e398:	01ab01a6 	.word	0x01ab01a6
    e39c:	01b501b0 	.word	0x01b501b0
    e3a0:	01dc01ba 	.word	0x01dc01ba
    e3a4:	01be01c1 	.word	0x01be01c1
    e3a8:	01e101e5 	.word	0x01e101e5
    e3ac:	01d301d7 	.word	0x01d301d7
    e3b0:	006a01cd 	.word	0x006a01cd
    e3b4:	018f006a 	.word	0x018f006a
    e3b8:	006a006a 	.word	0x006a006a
    e3bc:	006a006a 	.word	0x006a006a
    e3c0:	006a006a 	.word	0x006a006a
    e3c4:	005901e9 	.word	0x005901e9
    e3c8:	01fa01ec 	.word	0x01fa01ec
    e3cc:	01f101f6 	.word	0x01f101f6
    e3d0:	01fe006a 	.word	0x01fe006a
    e3d4:	006a021e 	.word	0x006a021e
    e3d8:	006a006a 	.word	0x006a006a
    e3dc:	006a006a 	.word	0x006a006a
    e3e0:	006a006a 	.word	0x006a006a
    e3e4:	006a006a 	.word	0x006a006a
    e3e8:	023f0235 	.word	0x023f0235
    e3ec:	260a      	movs	r6, #10
    e3ee:	2900      	cmp	r1, #0
    e3f0:	d100      	bne.n	e3f4 <LORAWAN_SetAttr+0x98>
    e3f2:	e0d1      	b.n	e598 <LORAWAN_SetAttr+0x23c>
    e3f4:	0020      	movs	r0, r4
    e3f6:	2208      	movs	r2, #8
    e3f8:	4b9a      	ldr	r3, [pc, #616]	; (e664 <LORAWAN_SetAttr+0x308>)
    e3fa:	305d      	adds	r0, #93	; 0x5d
    e3fc:	4798      	blx	r3
    e3fe:	2108      	movs	r1, #8
    e400:	4e99      	ldr	r6, [pc, #612]	; (e668 <LORAWAN_SetAttr+0x30c>)
    e402:	2001      	movs	r0, #1
    e404:	47b0      	blx	r6
    e406:	0022      	movs	r2, r4
    e408:	2501      	movs	r5, #1
    e40a:	32d6      	adds	r2, #214	; 0xd6
    e40c:	7813      	ldrb	r3, [r2, #0]
    e40e:	2109      	movs	r1, #9
    e410:	432b      	orrs	r3, r5
    e412:	347c      	adds	r4, #124	; 0x7c
    e414:	0028      	movs	r0, r5
    e416:	7013      	strb	r3, [r2, #0]
    e418:	47b0      	blx	r6
    e41a:	7823      	ldrb	r3, [r4, #0]
    e41c:	210b      	movs	r1, #11
    e41e:	43ab      	bics	r3, r5
    e420:	0028      	movs	r0, r5
    e422:	7023      	strb	r3, [r4, #0]
    e424:	47b0      	blx	r6
    e426:	2608      	movs	r6, #8
    e428:	e0b6      	b.n	e598 <LORAWAN_SetAttr+0x23c>
    e42a:	0023      	movs	r3, r4
    e42c:	33ff      	adds	r3, #255	; 0xff
    e42e:	7c5b      	ldrb	r3, [r3, #17]
    e430:	260a      	movs	r6, #10
    e432:	075b      	lsls	r3, r3, #29
    e434:	d400      	bmi.n	e438 <LORAWAN_SetAttr+0xdc>
    e436:	e0af      	b.n	e598 <LORAWAN_SetAttr+0x23c>
    e438:	79ca      	ldrb	r2, [r1, #7]
    e43a:	4b8c      	ldr	r3, [pc, #560]	; (e66c <LORAWAN_SetAttr+0x310>)
    e43c:	2a00      	cmp	r2, #0
    e43e:	d10e      	bne.n	e45e <LORAWAN_SetAttr+0x102>
    e440:	4669      	mov	r1, sp
    e442:	201d      	movs	r0, #29
    e444:	714a      	strb	r2, [r1, #5]
    e446:	4798      	blx	r3
    e448:	2800      	cmp	r0, #0
    e44a:	d001      	beq.n	e450 <LORAWAN_SetAttr+0xf4>
    e44c:	260a      	movs	r6, #10
    e44e:	e0a3      	b.n	e598 <LORAWAN_SetAttr+0x23c>
    e450:	2109      	movs	r1, #9
    e452:	34fe      	adds	r4, #254	; 0xfe
    e454:	82e0      	strh	r0, [r4, #22]
    e456:	82a0      	strh	r0, [r4, #20]
    e458:	4b83      	ldr	r3, [pc, #524]	; (e668 <LORAWAN_SetAttr+0x30c>)
    e45a:	4798      	blx	r3
    e45c:	e7e3      	b.n	e426 <LORAWAN_SetAttr+0xca>
    e45e:	2002      	movs	r0, #2
    e460:	5e2a      	ldrsh	r2, [r5, r0]
    e462:	88ae      	ldrh	r6, [r5, #4]
    e464:	79a8      	ldrb	r0, [r5, #6]
    e466:	466d      	mov	r5, sp
    e468:	806a      	strh	r2, [r5, #2]
    e46a:	2201      	movs	r2, #1
    e46c:	8809      	ldrh	r1, [r1, #0]
    e46e:	7128      	strb	r0, [r5, #4]
    e470:	8029      	strh	r1, [r5, #0]
    e472:	201d      	movs	r0, #29
    e474:	4669      	mov	r1, sp
    e476:	716a      	strb	r2, [r5, #5]
    e478:	4798      	blx	r3
    e47a:	2800      	cmp	r0, #0
    e47c:	d1e6      	bne.n	e44c <LORAWAN_SetAttr+0xf0>
    e47e:	34fe      	adds	r4, #254	; 0xfe
    e480:	82e6      	strh	r6, [r4, #22]
    e482:	e7d0      	b.n	e426 <LORAWAN_SetAttr+0xca>
    e484:	260a      	movs	r6, #10
    e486:	2900      	cmp	r1, #0
    e488:	d100      	bne.n	e48c <LORAWAN_SetAttr+0x130>
    e48a:	e085      	b.n	e598 <LORAWAN_SetAttr+0x23c>
    e48c:	0020      	movs	r0, r4
    e48e:	2208      	movs	r2, #8
    e490:	4b74      	ldr	r3, [pc, #464]	; (e664 <LORAWAN_SetAttr+0x308>)
    e492:	3055      	adds	r0, #85	; 0x55
    e494:	4798      	blx	r3
    e496:	2107      	movs	r1, #7
    e498:	4d73      	ldr	r5, [pc, #460]	; (e668 <LORAWAN_SetAttr+0x30c>)
    e49a:	2001      	movs	r0, #1
    e49c:	47a8      	blx	r5
    e49e:	0022      	movs	r2, r4
    e4a0:	2302      	movs	r3, #2
    e4a2:	32d6      	adds	r2, #214	; 0xd6
    e4a4:	7811      	ldrb	r1, [r2, #0]
    e4a6:	2001      	movs	r0, #1
    e4a8:	430b      	orrs	r3, r1
    e4aa:	2109      	movs	r1, #9
    e4ac:	7013      	strb	r3, [r2, #0]
    e4ae:	47a8      	blx	r5
    e4b0:	2001      	movs	r0, #1
    e4b2:	347c      	adds	r4, #124	; 0x7c
    e4b4:	7823      	ldrb	r3, [r4, #0]
    e4b6:	210b      	movs	r1, #11
    e4b8:	4383      	bics	r3, r0
    e4ba:	7023      	strb	r3, [r4, #0]
    e4bc:	47a8      	blx	r5
    e4be:	3e02      	subs	r6, #2
    e4c0:	e06a      	b.n	e598 <LORAWAN_SetAttr+0x23c>
    e4c2:	680b      	ldr	r3, [r1, #0]
    e4c4:	2001      	movs	r0, #1
    e4c6:	0a19      	lsrs	r1, r3, #8
    e4c8:	70a1      	strb	r1, [r4, #2]
    e4ca:	0c19      	lsrs	r1, r3, #16
    e4cc:	7063      	strb	r3, [r4, #1]
    e4ce:	70e1      	strb	r1, [r4, #3]
    e4d0:	0e1b      	lsrs	r3, r3, #24
    e4d2:	2103      	movs	r1, #3
    e4d4:	4d64      	ldr	r5, [pc, #400]	; (e668 <LORAWAN_SetAttr+0x30c>)
    e4d6:	7123      	strb	r3, [r4, #4]
    e4d8:	47a8      	blx	r5
    e4da:	0022      	movs	r2, r4
    e4dc:	2304      	movs	r3, #4
    e4de:	32d6      	adds	r2, #214	; 0xd6
    e4e0:	7811      	ldrb	r1, [r2, #0]
    e4e2:	430b      	orrs	r3, r1
    e4e4:	7013      	strb	r3, [r2, #0]
    e4e6:	e015      	b.n	e514 <LORAWAN_SetAttr+0x1b8>
    e4e8:	260a      	movs	r6, #10
    e4ea:	2900      	cmp	r1, #0
    e4ec:	d054      	beq.n	e598 <LORAWAN_SetAttr+0x23c>
    e4ee:	3606      	adds	r6, #6
    e4f0:	0032      	movs	r2, r6
    e4f2:	4f5c      	ldr	r7, [pc, #368]	; (e664 <LORAWAN_SetAttr+0x308>)
    e4f4:	1d60      	adds	r0, r4, #5
    e4f6:	47b8      	blx	r7
    e4f8:	0020      	movs	r0, r4
    e4fa:	0032      	movs	r2, r6
    e4fc:	0029      	movs	r1, r5
    e4fe:	3025      	adds	r0, #37	; 0x25
    e500:	47b8      	blx	r7
    e502:	2104      	movs	r1, #4
    e504:	2001      	movs	r0, #1
    e506:	4d58      	ldr	r5, [pc, #352]	; (e668 <LORAWAN_SetAttr+0x30c>)
    e508:	47a8      	blx	r5
    e50a:	0023      	movs	r3, r4
    e50c:	33d6      	adds	r3, #214	; 0xd6
    e50e:	781a      	ldrb	r2, [r3, #0]
    e510:	4316      	orrs	r6, r2
    e512:	701e      	strb	r6, [r3, #0]
    e514:	2109      	movs	r1, #9
    e516:	2001      	movs	r0, #1
    e518:	47a8      	blx	r5
    e51a:	2001      	movs	r0, #1
    e51c:	210b      	movs	r1, #11
    e51e:	347c      	adds	r4, #124	; 0x7c
    e520:	7823      	ldrb	r3, [r4, #0]
    e522:	4383      	bics	r3, r0
    e524:	7023      	strb	r3, [r4, #0]
    e526:	47a8      	blx	r5
    e528:	e77d      	b.n	e426 <LORAWAN_SetAttr+0xca>
    e52a:	260a      	movs	r6, #10
    e52c:	2900      	cmp	r1, #0
    e52e:	d033      	beq.n	e598 <LORAWAN_SetAttr+0x23c>
    e530:	0020      	movs	r0, r4
    e532:	2210      	movs	r2, #16
    e534:	4e4b      	ldr	r6, [pc, #300]	; (e664 <LORAWAN_SetAttr+0x308>)
    e536:	3015      	adds	r0, #21
    e538:	47b0      	blx	r6
    e53a:	0020      	movs	r0, r4
    e53c:	2210      	movs	r2, #16
    e53e:	0029      	movs	r1, r5
    e540:	3035      	adds	r0, #53	; 0x35
    e542:	47b0      	blx	r6
    e544:	2105      	movs	r1, #5
    e546:	2001      	movs	r0, #1
    e548:	4d47      	ldr	r5, [pc, #284]	; (e668 <LORAWAN_SetAttr+0x30c>)
    e54a:	47a8      	blx	r5
    e54c:	0022      	movs	r2, r4
    e54e:	32d6      	adds	r2, #214	; 0xd6
    e550:	7811      	ldrb	r1, [r2, #0]
    e552:	2320      	movs	r3, #32
    e554:	e7c5      	b.n	e4e2 <LORAWAN_SetAttr+0x186>
    e556:	260a      	movs	r6, #10
    e558:	2900      	cmp	r1, #0
    e55a:	d01d      	beq.n	e598 <LORAWAN_SetAttr+0x23c>
    e55c:	23e2      	movs	r3, #226	; 0xe2
    e55e:	33ff      	adds	r3, #255	; 0xff
    e560:	5ce3      	ldrb	r3, [r4, r3]
    e562:	3e02      	subs	r6, #2
    e564:	2b00      	cmp	r3, #0
    e566:	d117      	bne.n	e598 <LORAWAN_SetAttr+0x23c>
    e568:	0020      	movs	r0, r4
    e56a:	2210      	movs	r2, #16
    e56c:	4b3d      	ldr	r3, [pc, #244]	; (e664 <LORAWAN_SetAttr+0x308>)
    e56e:	3045      	adds	r0, #69	; 0x45
    e570:	4798      	blx	r3
    e572:	2106      	movs	r1, #6
    e574:	4d3c      	ldr	r5, [pc, #240]	; (e668 <LORAWAN_SetAttr+0x30c>)
    e576:	2001      	movs	r0, #1
    e578:	47a8      	blx	r5
    e57a:	0022      	movs	r2, r4
    e57c:	32d6      	adds	r2, #214	; 0xd6
    e57e:	7813      	ldrb	r3, [r2, #0]
    e580:	2109      	movs	r1, #9
    e582:	4333      	orrs	r3, r6
    e584:	2001      	movs	r0, #1
    e586:	7013      	strb	r3, [r2, #0]
    e588:	47a8      	blx	r5
    e58a:	2001      	movs	r0, #1
    e58c:	347c      	adds	r4, #124	; 0x7c
    e58e:	7823      	ldrb	r3, [r4, #0]
    e590:	210b      	movs	r1, #11
    e592:	4383      	bics	r3, r0
    e594:	7023      	strb	r3, [r4, #0]
    e596:	47a8      	blx	r5
    e598:	0030      	movs	r0, r6
    e59a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e59c:	780b      	ldrb	r3, [r1, #0]
    e59e:	2001      	movs	r0, #1
    e5a0:	0021      	movs	r1, r4
    e5a2:	2520      	movs	r5, #32
    e5a4:	317c      	adds	r1, #124	; 0x7c
    e5a6:	4003      	ands	r3, r0
    e5a8:	015a      	lsls	r2, r3, #5
    e5aa:	780b      	ldrb	r3, [r1, #0]
    e5ac:	43ab      	bics	r3, r5
    e5ae:	4313      	orrs	r3, r2
    e5b0:	700b      	strb	r3, [r1, #0]
    e5b2:	0023      	movs	r3, r4
    e5b4:	2200      	movs	r2, #0
    e5b6:	33c2      	adds	r3, #194	; 0xc2
    e5b8:	348c      	adds	r4, #140	; 0x8c
    e5ba:	801a      	strh	r2, [r3, #0]
    e5bc:	7823      	ldrb	r3, [r4, #0]
    e5be:	3210      	adds	r2, #16
    e5c0:	4393      	bics	r3, r2
    e5c2:	7023      	strb	r3, [r4, #0]
    e5c4:	210b      	movs	r1, #11
    e5c6:	e747      	b.n	e458 <LORAWAN_SetAttr+0xfc>
    e5c8:	466a      	mov	r2, sp
    e5ca:	780b      	ldrb	r3, [r1, #0]
    e5cc:	7013      	strb	r3, [r2, #0]
    e5ce:	0022      	movs	r2, r4
    e5d0:	32ea      	adds	r2, #234	; 0xea
    e5d2:	7812      	ldrb	r2, [r2, #0]
    e5d4:	429a      	cmp	r2, r3
    e5d6:	d900      	bls.n	e5da <LORAWAN_SetAttr+0x27e>
    e5d8:	e738      	b.n	e44c <LORAWAN_SetAttr+0xf0>
    e5da:	0022      	movs	r2, r4
    e5dc:	32eb      	adds	r2, #235	; 0xeb
    e5de:	7812      	ldrb	r2, [r2, #0]
    e5e0:	429a      	cmp	r2, r3
    e5e2:	d200      	bcs.n	e5e6 <LORAWAN_SetAttr+0x28a>
    e5e4:	e732      	b.n	e44c <LORAWAN_SetAttr+0xf0>
    e5e6:	4669      	mov	r1, sp
    e5e8:	2010      	movs	r0, #16
    e5ea:	4b21      	ldr	r3, [pc, #132]	; (e670 <LORAWAN_SetAttr+0x314>)
    e5ec:	4798      	blx	r3
    e5ee:	0006      	movs	r6, r0
    e5f0:	2808      	cmp	r0, #8
    e5f2:	d000      	beq.n	e5f6 <LORAWAN_SetAttr+0x29a>
    e5f4:	e72a      	b.n	e44c <LORAWAN_SetAttr+0xf0>
    e5f6:	466b      	mov	r3, sp
    e5f8:	210c      	movs	r1, #12
    e5fa:	2001      	movs	r0, #1
    e5fc:	781b      	ldrb	r3, [r3, #0]
    e5fe:	34df      	adds	r4, #223	; 0xdf
    e600:	7023      	strb	r3, [r4, #0]
    e602:	4b19      	ldr	r3, [pc, #100]	; (e668 <LORAWAN_SetAttr+0x30c>)
    e604:	4798      	blx	r3
    e606:	e7c7      	b.n	e598 <LORAWAN_SetAttr+0x23c>
    e608:	466a      	mov	r2, sp
    e60a:	780b      	ldrb	r3, [r1, #0]
    e60c:	201d      	movs	r0, #29
    e60e:	7013      	strb	r3, [r2, #0]
    e610:	4669      	mov	r1, sp
    e612:	4b17      	ldr	r3, [pc, #92]	; (e670 <LORAWAN_SetAttr+0x314>)
    e614:	4798      	blx	r3
    e616:	0006      	movs	r6, r0
    e618:	2808      	cmp	r0, #8
    e61a:	d000      	beq.n	e61e <LORAWAN_SetAttr+0x2c2>
    e61c:	e716      	b.n	e44c <LORAWAN_SetAttr+0xf0>
    e61e:	466b      	mov	r3, sp
    e620:	781b      	ldrb	r3, [r3, #0]
    e622:	34e1      	adds	r4, #225	; 0xe1
    e624:	7023      	strb	r3, [r4, #0]
    e626:	210a      	movs	r1, #10
    e628:	2000      	movs	r0, #0
    e62a:	e7ea      	b.n	e602 <LORAWAN_SetAttr+0x2a6>
    e62c:	780b      	ldrb	r3, [r1, #0]
    e62e:	2103      	movs	r1, #3
    e630:	34f7      	adds	r4, #247	; 0xf7
    e632:	7023      	strb	r3, [r4, #0]
    e634:	2000      	movs	r0, #0
    e636:	e70f      	b.n	e458 <LORAWAN_SetAttr+0xfc>
    e638:	680b      	ldr	r3, [r1, #0]
    e63a:	260a      	movs	r6, #10
    e63c:	1c5a      	adds	r2, r3, #1
    e63e:	d0ab      	beq.n	e598 <LORAWAN_SetAttr+0x23c>
    e640:	2116      	movs	r1, #22
    e642:	2000      	movs	r0, #0
    e644:	3404      	adds	r4, #4
    e646:	67e3      	str	r3, [r4, #124]	; 0x7c
    e648:	4b07      	ldr	r3, [pc, #28]	; (e668 <LORAWAN_SetAttr+0x30c>)
    e64a:	4798      	blx	r3
    e64c:	e737      	b.n	e4be <LORAWAN_SetAttr+0x162>
    e64e:	680b      	ldr	r3, [r1, #0]
    e650:	260a      	movs	r6, #10
    e652:	1c5a      	adds	r2, r3, #1
    e654:	d0a0      	beq.n	e598 <LORAWAN_SetAttr+0x23c>
    e656:	0031      	movs	r1, r6
    e658:	3408      	adds	r4, #8
    e65a:	67e3      	str	r3, [r4, #124]	; 0x7c
    e65c:	2001      	movs	r0, #1
    e65e:	e7f3      	b.n	e648 <LORAWAN_SetAttr+0x2ec>
    e660:	200019b0 	.word	0x200019b0
    e664:	00013e5d 	.word	0x00013e5d
    e668:	00008d6d 	.word	0x00008d6d
    e66c:	0000f3f1 	.word	0x0000f3f1
    e670:	00008771 	.word	0x00008771
    e674:	0026      	movs	r6, r4
    e676:	880b      	ldrh	r3, [r1, #0]
    e678:	36c8      	adds	r6, #200	; 0xc8
    e67a:	210c      	movs	r1, #12
    e67c:	2000      	movs	r0, #0
    e67e:	4d60      	ldr	r5, [pc, #384]	; (e800 <LORAWAN_SetAttr+0x4a4>)
    e680:	8033      	strh	r3, [r6, #0]
    e682:	47a8      	blx	r5
    e684:	22fa      	movs	r2, #250	; 0xfa
    e686:	8833      	ldrh	r3, [r6, #0]
    e688:	0092      	lsls	r2, r2, #2
    e68a:	189b      	adds	r3, r3, r2
    e68c:	34ca      	adds	r4, #202	; 0xca
    e68e:	8023      	strh	r3, [r4, #0]
    e690:	210d      	movs	r1, #13
    e692:	2000      	movs	r0, #0
    e694:	e747      	b.n	e526 <LORAWAN_SetAttr+0x1ca>
    e696:	780b      	ldrb	r3, [r1, #0]
    e698:	260a      	movs	r6, #10
    e69a:	2b0f      	cmp	r3, #15
    e69c:	d900      	bls.n	e6a0 <LORAWAN_SetAttr+0x344>
    e69e:	e77b      	b.n	e598 <LORAWAN_SetAttr+0x23c>
    e6a0:	3490      	adds	r4, #144	; 0x90
    e6a2:	7023      	strb	r3, [r4, #0]
    e6a4:	e70b      	b.n	e4be <LORAWAN_SetAttr+0x162>
    e6a6:	880b      	ldrh	r3, [r1, #0]
    e6a8:	34cc      	adds	r4, #204	; 0xcc
    e6aa:	8023      	strh	r3, [r4, #0]
    e6ac:	210e      	movs	r1, #14
    e6ae:	e7c1      	b.n	e634 <LORAWAN_SetAttr+0x2d8>
    e6b0:	880b      	ldrh	r3, [r1, #0]
    e6b2:	34ce      	adds	r4, #206	; 0xce
    e6b4:	8023      	strh	r3, [r4, #0]
    e6b6:	210f      	movs	r1, #15
    e6b8:	e7bc      	b.n	e634 <LORAWAN_SetAttr+0x2d8>
    e6ba:	880b      	ldrh	r3, [r1, #0]
    e6bc:	34d0      	adds	r4, #208	; 0xd0
    e6be:	8023      	strh	r3, [r4, #0]
    e6c0:	2110      	movs	r1, #16
    e6c2:	e7b7      	b.n	e634 <LORAWAN_SetAttr+0x2d8>
    e6c4:	780b      	ldrb	r3, [r1, #0]
    e6c6:	34d4      	adds	r4, #212	; 0xd4
    e6c8:	7023      	strb	r3, [r4, #0]
    e6ca:	2112      	movs	r1, #18
    e6cc:	e7b2      	b.n	e634 <LORAWAN_SetAttr+0x2d8>
    e6ce:	780b      	ldrb	r3, [r1, #0]
    e6d0:	34d5      	adds	r4, #213	; 0xd5
    e6d2:	7023      	strb	r3, [r4, #0]
    e6d4:	2113      	movs	r1, #19
    e6d6:	e7ad      	b.n	e634 <LORAWAN_SetAttr+0x2d8>
    e6d8:	880b      	ldrh	r3, [r1, #0]
    e6da:	34d2      	adds	r4, #210	; 0xd2
    e6dc:	8023      	strh	r3, [r4, #0]
    e6de:	2111      	movs	r1, #17
    e6e0:	e7a8      	b.n	e634 <LORAWAN_SetAttr+0x2d8>
    e6e2:	780b      	ldrb	r3, [r1, #0]
    e6e4:	34da      	adds	r4, #218	; 0xda
    e6e6:	7023      	strb	r3, [r4, #0]
    e6e8:	2115      	movs	r1, #21
    e6ea:	e7a3      	b.n	e634 <LORAWAN_SetAttr+0x2d8>
    e6ec:	780b      	ldrb	r3, [r1, #0]
    e6ee:	34d9      	adds	r4, #217	; 0xd9
    e6f0:	7023      	strb	r3, [r4, #0]
    e6f2:	e698      	b.n	e426 <LORAWAN_SetAttr+0xca>
    e6f4:	780b      	ldrb	r3, [r1, #0]
    e6f6:	34e0      	adds	r4, #224	; 0xe0
    e6f8:	e7fa      	b.n	e6f0 <LORAWAN_SetAttr+0x394>
    e6fa:	2001      	movs	r0, #1
    e6fc:	780b      	ldrb	r3, [r1, #0]
    e6fe:	2110      	movs	r1, #16
    e700:	347c      	adds	r4, #124	; 0x7c
    e702:	4003      	ands	r3, r0
    e704:	011a      	lsls	r2, r3, #4
    e706:	7823      	ldrb	r3, [r4, #0]
    e708:	438b      	bics	r3, r1
    e70a:	4313      	orrs	r3, r2
    e70c:	7023      	strb	r3, [r4, #0]
    e70e:	3905      	subs	r1, #5
    e710:	e6a2      	b.n	e458 <LORAWAN_SetAttr+0xfc>
    e712:	7909      	ldrb	r1, [r1, #4]
    e714:	7828      	ldrb	r0, [r5, #0]
    e716:	4b3b      	ldr	r3, [pc, #236]	; (e804 <LORAWAN_SetAttr+0x4a8>)
    e718:	4798      	blx	r3
    e71a:	0006      	movs	r6, r0
    e71c:	e73c      	b.n	e598 <LORAWAN_SetAttr+0x23c>
    e71e:	7909      	ldrb	r1, [r1, #4]
    e720:	7828      	ldrb	r0, [r5, #0]
    e722:	4b39      	ldr	r3, [pc, #228]	; (e808 <LORAWAN_SetAttr+0x4ac>)
    e724:	e7f8      	b.n	e718 <LORAWAN_SetAttr+0x3bc>
    e726:	7808      	ldrb	r0, [r1, #0]
    e728:	4b38      	ldr	r3, [pc, #224]	; (e80c <LORAWAN_SetAttr+0x4b0>)
    e72a:	6849      	ldr	r1, [r1, #4]
    e72c:	4798      	blx	r3
    e72e:	e7f4      	b.n	e71a <LORAWAN_SetAttr+0x3be>
    e730:	7909      	ldrb	r1, [r1, #4]
    e732:	6828      	ldr	r0, [r5, #0]
    e734:	4b36      	ldr	r3, [pc, #216]	; (e810 <LORAWAN_SetAttr+0x4b4>)
    e736:	4798      	blx	r3
    e738:	e7ef      	b.n	e71a <LORAWAN_SetAttr+0x3be>
    e73a:	7808      	ldrb	r0, [r1, #0]
    e73c:	4b35      	ldr	r3, [pc, #212]	; (e814 <LORAWAN_SetAttr+0x4b8>)
    e73e:	4798      	blx	r3
    e740:	e7eb      	b.n	e71a <LORAWAN_SetAttr+0x3be>
    e742:	8808      	ldrh	r0, [r1, #0]
    e744:	4b34      	ldr	r3, [pc, #208]	; (e818 <LORAWAN_SetAttr+0x4bc>)
    e746:	4798      	blx	r3
    e748:	e66d      	b.n	e426 <LORAWAN_SetAttr+0xca>
    e74a:	4b34      	ldr	r3, [pc, #208]	; (e81c <LORAWAN_SetAttr+0x4c0>)
    e74c:	6019      	str	r1, [r3, #0]
    e74e:	e67d      	b.n	e44c <LORAWAN_SetAttr+0xf0>
    e750:	7809      	ldrb	r1, [r1, #0]
    e752:	7868      	ldrb	r0, [r5, #1]
    e754:	4b32      	ldr	r3, [pc, #200]	; (e820 <LORAWAN_SetAttr+0x4c4>)
    e756:	4798      	blx	r3
    e758:	e7df      	b.n	e71a <LORAWAN_SetAttr+0x3be>
    e75a:	7809      	ldrb	r1, [r1, #0]
    e75c:	4b31      	ldr	r3, [pc, #196]	; (e824 <LORAWAN_SetAttr+0x4c8>)
    e75e:	1c68      	adds	r0, r5, #1
    e760:	4798      	blx	r3
    e762:	e7da      	b.n	e71a <LORAWAN_SetAttr+0x3be>
    e764:	7809      	ldrb	r1, [r1, #0]
    e766:	1c68      	adds	r0, r5, #1
    e768:	4b2f      	ldr	r3, [pc, #188]	; (e828 <LORAWAN_SetAttr+0x4cc>)
    e76a:	e7f9      	b.n	e760 <LORAWAN_SetAttr+0x404>
    e76c:	7809      	ldrb	r1, [r1, #0]
    e76e:	6868      	ldr	r0, [r5, #4]
    e770:	4b2e      	ldr	r3, [pc, #184]	; (e82c <LORAWAN_SetAttr+0x4d0>)
    e772:	e7f5      	b.n	e760 <LORAWAN_SetAttr+0x404>
    e774:	2300      	movs	r3, #0
    e776:	466a      	mov	r2, sp
    e778:	7809      	ldrb	r1, [r1, #0]
    e77a:	7013      	strb	r3, [r2, #0]
    e77c:	4299      	cmp	r1, r3
    e77e:	d014      	beq.n	e7aa <LORAWAN_SetAttr+0x44e>
    e780:	0022      	movs	r2, r4
    e782:	2102      	movs	r1, #2
    e784:	32ff      	adds	r2, #255	; 0xff
    e786:	7c53      	ldrb	r3, [r2, #17]
    e788:	420b      	tst	r3, r1
    e78a:	d001      	beq.n	e790 <LORAWAN_SetAttr+0x434>
    e78c:	438b      	bics	r3, r1
    e78e:	7453      	strb	r3, [r2, #17]
    e790:	2220      	movs	r2, #32
    e792:	34ff      	adds	r4, #255	; 0xff
    e794:	7c63      	ldrb	r3, [r4, #17]
    e796:	4213      	tst	r3, r2
    e798:	d100      	bne.n	e79c <LORAWAN_SetAttr+0x440>
    e79a:	e644      	b.n	e426 <LORAWAN_SetAttr+0xca>
    e79c:	4393      	bics	r3, r2
    e79e:	7463      	strb	r3, [r4, #17]
    e7a0:	4669      	mov	r1, sp
    e7a2:	4b23      	ldr	r3, [pc, #140]	; (e830 <LORAWAN_SetAttr+0x4d4>)
    e7a4:	2039      	movs	r0, #57	; 0x39
    e7a6:	4798      	blx	r3
    e7a8:	e63d      	b.n	e426 <LORAWAN_SetAttr+0xca>
    e7aa:	4a22      	ldr	r2, [pc, #136]	; (e834 <LORAWAN_SetAttr+0x4d8>)
    e7ac:	4b22      	ldr	r3, [pc, #136]	; (e838 <LORAWAN_SetAttr+0x4dc>)
    e7ae:	200e      	movs	r0, #14
    e7b0:	4798      	blx	r3
    e7b2:	e638      	b.n	e426 <LORAWAN_SetAttr+0xca>
    e7b4:	466b      	mov	r3, sp
    e7b6:	780a      	ldrb	r2, [r1, #0]
    e7b8:	34ff      	adds	r4, #255	; 0xff
    e7ba:	701a      	strb	r2, [r3, #0]
    e7bc:	2320      	movs	r3, #32
    e7be:	2a00      	cmp	r2, #0
    e7c0:	d007      	beq.n	e7d2 <LORAWAN_SetAttr+0x476>
    e7c2:	7c62      	ldrb	r2, [r4, #17]
    e7c4:	4313      	orrs	r3, r2
    e7c6:	7463      	strb	r3, [r4, #17]
    e7c8:	4669      	mov	r1, sp
    e7ca:	4b19      	ldr	r3, [pc, #100]	; (e830 <LORAWAN_SetAttr+0x4d4>)
    e7cc:	2039      	movs	r0, #57	; 0x39
    e7ce:	4798      	blx	r3
    e7d0:	e7a3      	b.n	e71a <LORAWAN_SetAttr+0x3be>
    e7d2:	7c62      	ldrb	r2, [r4, #17]
    e7d4:	260a      	movs	r6, #10
    e7d6:	421a      	tst	r2, r3
    e7d8:	d100      	bne.n	e7dc <LORAWAN_SetAttr+0x480>
    e7da:	e6dd      	b.n	e598 <LORAWAN_SetAttr+0x23c>
    e7dc:	439a      	bics	r2, r3
    e7de:	7462      	strb	r2, [r4, #17]
    e7e0:	e7f2      	b.n	e7c8 <LORAWAN_SetAttr+0x46c>
    e7e2:	780b      	ldrb	r3, [r1, #0]
    e7e4:	260a      	movs	r6, #10
    e7e6:	2b08      	cmp	r3, #8
    e7e8:	d900      	bls.n	e7ec <LORAWAN_SetAttr+0x490>
    e7ea:	e6d5      	b.n	e598 <LORAWAN_SetAttr+0x23c>
    e7ec:	22f0      	movs	r2, #240	; 0xf0
    e7ee:	0052      	lsls	r2, r2, #1
    e7f0:	54a3      	strb	r3, [r4, r2]
    e7f2:	210d      	movs	r1, #13
    e7f4:	e732      	b.n	e65c <LORAWAN_SetAttr+0x300>
    e7f6:	23e2      	movs	r3, #226	; 0xe2
    e7f8:	780a      	ldrb	r2, [r1, #0]
    e7fa:	33ff      	adds	r3, #255	; 0xff
    e7fc:	54e2      	strb	r2, [r4, r3]
    e7fe:	e612      	b.n	e426 <LORAWAN_SetAttr+0xca>
    e800:	00008d6d 	.word	0x00008d6d
    e804:	0000d735 	.word	0x0000d735
    e808:	0000d6c5 	.word	0x0000d6c5
    e80c:	0000c6bd 	.word	0x0000c6bd
    e810:	0000c681 	.word	0x0000c681
    e814:	0000e2e1 	.word	0x0000e2e1
    e818:	0000b521 	.word	0x0000b521
    e81c:	20001ca4 	.word	0x20001ca4
    e820:	0000ecd9 	.word	0x0000ecd9
    e824:	0000ef19 	.word	0x0000ef19
    e828:	0000ef6d 	.word	0x0000ef6d
    e82c:	0000eec9 	.word	0x0000eec9
    e830:	0000887d 	.word	0x0000887d
    e834:	20001ac0 	.word	0x20001ac0
    e838:	00008755 	.word	0x00008755

0000e83c <LORAWAN_Reset>:
    e83c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e83e:	b087      	sub	sp, #28
    e840:	ab02      	add	r3, sp, #8
    e842:	1ddd      	adds	r5, r3, #7
    e844:	23ff      	movs	r3, #255	; 0xff
    e846:	4c80      	ldr	r4, [pc, #512]	; (ea48 <LORAWAN_Reset+0x20c>)
    e848:	702b      	strb	r3, [r5, #0]
    e84a:	0023      	movs	r3, r4
    e84c:	9001      	str	r0, [sp, #4]
    e84e:	33ef      	adds	r3, #239	; 0xef
    e850:	781b      	ldrb	r3, [r3, #0]
    e852:	2b00      	cmp	r3, #0
    e854:	d001      	beq.n	e85a <LORAWAN_Reset+0x1e>
    e856:	4b7d      	ldr	r3, [pc, #500]	; (ea4c <LORAWAN_Reset+0x210>)
    e858:	4798      	blx	r3
    e85a:	002a      	movs	r2, r5
    e85c:	4b7c      	ldr	r3, [pc, #496]	; (ea50 <LORAWAN_Reset+0x214>)
    e85e:	2100      	movs	r1, #0
    e860:	2023      	movs	r0, #35	; 0x23
    e862:	4798      	blx	r3
    e864:	782b      	ldrb	r3, [r5, #0]
    e866:	9a01      	ldr	r2, [sp, #4]
    e868:	4293      	cmp	r3, r2
    e86a:	d001      	beq.n	e870 <LORAWAN_Reset+0x34>
    e86c:	4b79      	ldr	r3, [pc, #484]	; (ea54 <LORAWAN_Reset+0x218>)
    e86e:	4798      	blx	r3
    e870:	0021      	movs	r1, r4
    e872:	2334      	movs	r3, #52	; 0x34
    e874:	31f7      	adds	r1, #247	; 0xf7
    e876:	700b      	strb	r3, [r1, #0]
    e878:	2000      	movs	r0, #0
    e87a:	4b77      	ldr	r3, [pc, #476]	; (ea58 <LORAWAN_Reset+0x21c>)
    e87c:	4798      	blx	r3
    e87e:	0023      	movs	r3, r4
    e880:	2201      	movs	r2, #1
    e882:	33f4      	adds	r3, #244	; 0xf4
    e884:	701a      	strb	r2, [r3, #0]
    e886:	0023      	movs	r3, r4
    e888:	2205      	movs	r2, #5
    e88a:	33f5      	adds	r3, #245	; 0xf5
    e88c:	701a      	strb	r2, [r3, #0]
    e88e:	0023      	movs	r3, r4
    e890:	32fa      	adds	r2, #250	; 0xfa
    e892:	33dd      	adds	r3, #221	; 0xdd
    e894:	701a      	strb	r2, [r3, #0]
    e896:	0023      	movs	r3, r4
    e898:	2500      	movs	r5, #0
    e89a:	33de      	adds	r3, #222	; 0xde
    e89c:	701d      	strb	r5, [r3, #0]
    e89e:	0023      	movs	r3, r4
    e8a0:	33c6      	adds	r3, #198	; 0xc6
    e8a2:	801d      	strh	r5, [r3, #0]
    e8a4:	0023      	movs	r3, r4
    e8a6:	3308      	adds	r3, #8
    e8a8:	67dd      	str	r5, [r3, #124]	; 0x7c
    e8aa:	1d23      	adds	r3, r4, #4
    e8ac:	67dd      	str	r5, [r3, #124]	; 0x7c
    e8ae:	0023      	movs	r3, r4
    e8b0:	33c4      	adds	r3, #196	; 0xc4
    e8b2:	801d      	strh	r5, [r3, #0]
    e8b4:	0023      	movs	r3, r4
    e8b6:	3390      	adds	r3, #144	; 0x90
    e8b8:	701d      	strb	r5, [r3, #0]
    e8ba:	0023      	movs	r3, r4
    e8bc:	33c2      	adds	r3, #194	; 0xc2
    e8be:	801d      	strh	r5, [r3, #0]
    e8c0:	0023      	movs	r3, r4
    e8c2:	33ed      	adds	r3, #237	; 0xed
    e8c4:	701d      	strb	r5, [r3, #0]
    e8c6:	0023      	movs	r3, r4
    e8c8:	33ee      	adds	r3, #238	; 0xee
    e8ca:	701d      	strb	r5, [r3, #0]
    e8cc:	0023      	movs	r3, r4
    e8ce:	3af9      	subs	r2, #249	; 0xf9
    e8d0:	33f8      	adds	r3, #248	; 0xf8
    e8d2:	601a      	str	r2, [r3, #0]
    e8d4:	0023      	movs	r3, r4
    e8d6:	33fc      	adds	r3, #252	; 0xfc
    e8d8:	601d      	str	r5, [r3, #0]
    e8da:	0023      	movs	r3, r4
    e8dc:	33fe      	adds	r3, #254	; 0xfe
    e8de:	829d      	strh	r5, [r3, #20]
    e8e0:	82dd      	strh	r5, [r3, #22]
    e8e2:	320a      	adds	r2, #10
    e8e4:	0029      	movs	r1, r5
    e8e6:	4b5d      	ldr	r3, [pc, #372]	; (ea5c <LORAWAN_Reset+0x220>)
    e8e8:	485d      	ldr	r0, [pc, #372]	; (ea60 <LORAWAN_Reset+0x224>)
    e8ea:	4798      	blx	r3
    e8ec:	23ea      	movs	r3, #234	; 0xea
    e8ee:	2201      	movs	r2, #1
    e8f0:	2607      	movs	r6, #7
    e8f2:	005b      	lsls	r3, r3, #1
    e8f4:	54e2      	strb	r2, [r4, r3]
    e8f6:	0029      	movs	r1, r5
    e8f8:	0032      	movs	r2, r6
    e8fa:	4b58      	ldr	r3, [pc, #352]	; (ea5c <LORAWAN_Reset+0x220>)
    e8fc:	4859      	ldr	r0, [pc, #356]	; (ea64 <LORAWAN_Reset+0x228>)
    e8fe:	4798      	blx	r3
    e900:	23f0      	movs	r3, #240	; 0xf0
    e902:	2201      	movs	r2, #1
    e904:	005b      	lsls	r3, r3, #1
    e906:	54e2      	strb	r2, [r4, r3]
    e908:	0023      	movs	r3, r4
    e90a:	338c      	adds	r3, #140	; 0x8c
    e90c:	801d      	strh	r5, [r3, #0]
    e90e:	0023      	movs	r3, r4
    e910:	33da      	adds	r3, #218	; 0xda
    e912:	701e      	strb	r6, [r3, #0]
    e914:	0023      	movs	r3, r4
    e916:	33d9      	adds	r3, #217	; 0xd9
    e918:	701d      	strb	r5, [r3, #0]
    e91a:	0023      	movs	r3, r4
    e91c:	33dc      	adds	r3, #220	; 0xdc
    e91e:	701d      	strb	r5, [r3, #0]
    e920:	0023      	movs	r3, r4
    e922:	33db      	adds	r3, #219	; 0xdb
    e924:	701d      	strb	r5, [r3, #0]
    e926:	9801      	ldr	r0, [sp, #4]
    e928:	4b4f      	ldr	r3, [pc, #316]	; (ea68 <LORAWAN_Reset+0x22c>)
    e92a:	67e5      	str	r5, [r4, #124]	; 0x7c
    e92c:	4798      	blx	r3
    e92e:	0007      	movs	r7, r0
    e930:	2808      	cmp	r0, #8
    e932:	d000      	beq.n	e936 <LORAWAN_Reset+0xfa>
    e934:	e086      	b.n	ea44 <LORAWAN_Reset+0x208>
    e936:	4e4d      	ldr	r6, [pc, #308]	; (ea6c <LORAWAN_Reset+0x230>)
    e938:	4a4d      	ldr	r2, [pc, #308]	; (ea70 <LORAWAN_Reset+0x234>)
    e93a:	0029      	movs	r1, r5
    e93c:	47b0      	blx	r6
    e93e:	4a4d      	ldr	r2, [pc, #308]	; (ea74 <LORAWAN_Reset+0x238>)
    e940:	0029      	movs	r1, r5
    e942:	200e      	movs	r0, #14
    e944:	47b0      	blx	r6
    e946:	0023      	movs	r3, r4
    e948:	4a4b      	ldr	r2, [pc, #300]	; (ea78 <LORAWAN_Reset+0x23c>)
    e94a:	33e0      	adds	r3, #224	; 0xe0
    e94c:	0029      	movs	r1, r5
    e94e:	2006      	movs	r0, #6
    e950:	701d      	strb	r5, [r3, #0]
    e952:	47b0      	blx	r6
    e954:	4b49      	ldr	r3, [pc, #292]	; (ea7c <LORAWAN_Reset+0x240>)
    e956:	4798      	blx	r3
    e958:	466a      	mov	r2, sp
    e95a:	0023      	movs	r3, r4
    e95c:	7912      	ldrb	r2, [r2, #4]
    e95e:	33f6      	adds	r3, #246	; 0xf6
    e960:	701a      	strb	r2, [r3, #0]
    e962:	0029      	movs	r1, r5
    e964:	4b46      	ldr	r3, [pc, #280]	; (ea80 <LORAWAN_Reset+0x244>)
    e966:	0028      	movs	r0, r5
    e968:	4798      	blx	r3
    e96a:	2210      	movs	r2, #16
    e96c:	34ff      	adds	r4, #255	; 0xff
    e96e:	7c63      	ldrb	r3, [r4, #17]
    e970:	4213      	tst	r3, r2
    e972:	d006      	beq.n	e982 <LORAWAN_Reset+0x146>
    e974:	ab02      	add	r3, sp, #8
    e976:	1d99      	adds	r1, r3, #6
    e978:	2301      	movs	r3, #1
    e97a:	0038      	movs	r0, r7
    e97c:	700b      	strb	r3, [r1, #0]
    e97e:	4b36      	ldr	r3, [pc, #216]	; (ea58 <LORAWAN_Reset+0x21c>)
    e980:	4798      	blx	r3
    e982:	4b40      	ldr	r3, [pc, #256]	; (ea84 <LORAWAN_Reset+0x248>)
    e984:	4940      	ldr	r1, [pc, #256]	; (ea88 <LORAWAN_Reset+0x24c>)
    e986:	201e      	movs	r0, #30
    e988:	4798      	blx	r3
    e98a:	4c2f      	ldr	r4, [pc, #188]	; (ea48 <LORAWAN_Reset+0x20c>)
    e98c:	0023      	movs	r3, r4
    e98e:	33ff      	adds	r3, #255	; 0xff
    e990:	7c5b      	ldrb	r3, [r3, #17]
    e992:	075b      	lsls	r3, r3, #29
    e994:	d507      	bpl.n	e9a6 <LORAWAN_Reset+0x16a>
    e996:	2100      	movs	r1, #0
    e998:	aa04      	add	r2, sp, #16
    e99a:	2032      	movs	r0, #50	; 0x32
    e99c:	47b0      	blx	r6
    e99e:	a904      	add	r1, sp, #16
    e9a0:	2027      	movs	r0, #39	; 0x27
    e9a2:	4b3a      	ldr	r3, [pc, #232]	; (ea8c <LORAWAN_Reset+0x250>)
    e9a4:	4798      	blx	r3
    e9a6:	4a3a      	ldr	r2, [pc, #232]	; (ea90 <LORAWAN_Reset+0x254>)
    e9a8:	2100      	movs	r1, #0
    e9aa:	2009      	movs	r0, #9
    e9ac:	47b0      	blx	r6
    e9ae:	4a39      	ldr	r2, [pc, #228]	; (ea94 <LORAWAN_Reset+0x258>)
    e9b0:	2100      	movs	r1, #0
    e9b2:	200a      	movs	r0, #10
    e9b4:	47b0      	blx	r6
    e9b6:	4a38      	ldr	r2, [pc, #224]	; (ea98 <LORAWAN_Reset+0x25c>)
    e9b8:	2100      	movs	r1, #0
    e9ba:	2036      	movs	r0, #54	; 0x36
    e9bc:	47b0      	blx	r6
    e9be:	ad04      	add	r5, sp, #16
    e9c0:	4a36      	ldr	r2, [pc, #216]	; (ea9c <LORAWAN_Reset+0x260>)
    e9c2:	2100      	movs	r1, #0
    e9c4:	2037      	movs	r0, #55	; 0x37
    e9c6:	47b0      	blx	r6
    e9c8:	002a      	movs	r2, r5
    e9ca:	2100      	movs	r1, #0
    e9cc:	2014      	movs	r0, #20
    e9ce:	47b0      	blx	r6
    e9d0:	0023      	movs	r3, r4
    e9d2:	782a      	ldrb	r2, [r5, #0]
    e9d4:	33ea      	adds	r3, #234	; 0xea
    e9d6:	701a      	strb	r2, [r3, #0]
    e9d8:	0023      	movs	r3, r4
    e9da:	786a      	ldrb	r2, [r5, #1]
    e9dc:	33eb      	adds	r3, #235	; 0xeb
    e9de:	701a      	strb	r2, [r3, #0]
    e9e0:	0023      	movs	r3, r4
    e9e2:	2500      	movs	r5, #0
    e9e4:	33d6      	adds	r3, #214	; 0xd6
    e9e6:	801d      	strh	r5, [r3, #0]
    e9e8:	2265      	movs	r2, #101	; 0x65
    e9ea:	0029      	movs	r1, r5
    e9ec:	0020      	movs	r0, r4
    e9ee:	4b1b      	ldr	r3, [pc, #108]	; (ea5c <LORAWAN_Reset+0x220>)
    e9f0:	4798      	blx	r3
    e9f2:	0023      	movs	r3, r4
    e9f4:	22fa      	movs	r2, #250	; 0xfa
    e9f6:	33c8      	adds	r3, #200	; 0xc8
    e9f8:	0092      	lsls	r2, r2, #2
    e9fa:	801a      	strh	r2, [r3, #0]
    e9fc:	0022      	movs	r2, r4
    e9fe:	23fa      	movs	r3, #250	; 0xfa
    ea00:	32ca      	adds	r2, #202	; 0xca
    ea02:	00db      	lsls	r3, r3, #3
    ea04:	8013      	strh	r3, [r2, #0]
    ea06:	0022      	movs	r2, r4
    ea08:	4925      	ldr	r1, [pc, #148]	; (eaa0 <LORAWAN_Reset+0x264>)
    ea0a:	32cc      	adds	r2, #204	; 0xcc
    ea0c:	8011      	strh	r1, [r2, #0]
    ea0e:	0022      	movs	r2, r4
    ea10:	4924      	ldr	r1, [pc, #144]	; (eaa4 <LORAWAN_Reset+0x268>)
    ea12:	32ce      	adds	r2, #206	; 0xce
    ea14:	8011      	strh	r1, [r2, #0]
    ea16:	0022      	movs	r2, r4
    ea18:	32d2      	adds	r2, #210	; 0xd2
    ea1a:	8013      	strh	r3, [r2, #0]
    ea1c:	0023      	movs	r3, r4
    ea1e:	2220      	movs	r2, #32
    ea20:	33d5      	adds	r3, #213	; 0xd5
    ea22:	701a      	strb	r2, [r3, #0]
    ea24:	0023      	movs	r3, r4
    ea26:	1892      	adds	r2, r2, r2
    ea28:	33d4      	adds	r3, #212	; 0xd4
    ea2a:	701a      	strb	r2, [r3, #0]
    ea2c:	2380      	movs	r3, #128	; 0x80
    ea2e:	34d0      	adds	r4, #208	; 0xd0
    ea30:	01db      	lsls	r3, r3, #7
    ea32:	8023      	strh	r3, [r4, #0]
    ea34:	0028      	movs	r0, r5
    ea36:	4b1c      	ldr	r3, [pc, #112]	; (eaa8 <LORAWAN_Reset+0x26c>)
    ea38:	4798      	blx	r3
    ea3a:	4b1c      	ldr	r3, [pc, #112]	; (eaac <LORAWAN_Reset+0x270>)
    ea3c:	4798      	blx	r3
    ea3e:	0038      	movs	r0, r7
    ea40:	b007      	add	sp, #28
    ea42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea44:	270a      	movs	r7, #10
    ea46:	e7fa      	b.n	ea3e <LORAWAN_Reset+0x202>
    ea48:	200019b0 	.word	0x200019b0
    ea4c:	0000ad55 	.word	0x0000ad55
    ea50:	0000c6f5 	.word	0x0000c6f5
    ea54:	000089d1 	.word	0x000089d1
    ea58:	0000f3f1 	.word	0x0000f3f1
    ea5c:	00013ee1 	.word	0x00013ee1
    ea60:	20001ab0 	.word	0x20001ab0
    ea64:	20001b87 	.word	0x20001b87
    ea68:	000088f1 	.word	0x000088f1
    ea6c:	00008755 	.word	0x00008755
    ea70:	20001a19 	.word	0x20001a19
    ea74:	20001ac0 	.word	0x20001ac0
    ea78:	20001a9c 	.word	0x20001a9c
    ea7c:	0000f60d 	.word	0x0000f60d
    ea80:	00008d6d 	.word	0x00008d6d
    ea84:	0000f301 	.word	0x0000f301
    ea88:	20001b8f 	.word	0x20001b8f
    ea8c:	0000e35d 	.word	0x0000e35d
    ea90:	20001a1e 	.word	0x20001a1e
    ea94:	20001a1a 	.word	0x20001a1a
    ea98:	20001a91 	.word	0x20001a91
    ea9c:	20001a8f 	.word	0x20001a8f
    eaa0:	00001388 	.word	0x00001388
    eaa4:	00001770 	.word	0x00001770
    eaa8:	0000b521 	.word	0x0000b521
    eaac:	0000ec89 	.word	0x0000ec89

0000eab0 <LORAWAN_ReadyToSleep>:
    eab0:	4b08      	ldr	r3, [pc, #32]	; (ead4 <LORAWAN_ReadyToSleep+0x24>)
    eab2:	001a      	movs	r2, r3
    eab4:	32f4      	adds	r2, #244	; 0xf4
    eab6:	7812      	ldrb	r2, [r2, #0]
    eab8:	2a01      	cmp	r2, #1
    eaba:	d002      	beq.n	eac2 <LORAWAN_ReadyToSleep+0x12>
    eabc:	2000      	movs	r0, #0
    eabe:	2a04      	cmp	r2, #4
    eac0:	d106      	bne.n	ead0 <LORAWAN_ReadyToSleep+0x20>
    eac2:	337c      	adds	r3, #124	; 0x7c
    eac4:	7818      	ldrb	r0, [r3, #0]
    eac6:	230e      	movs	r3, #14
    eac8:	4018      	ands	r0, r3
    eaca:	4243      	negs	r3, r0
    eacc:	4158      	adcs	r0, r3
    eace:	b2c0      	uxtb	r0, r0
    ead0:	4770      	bx	lr
    ead2:	46c0      	nop			; (mov r8, r8)
    ead4:	200019b0 	.word	0x200019b0

0000ead8 <LorawanClasscUlAckTimerCallback>:
    ead8:	2102      	movs	r1, #2
    eada:	4b03      	ldr	r3, [pc, #12]	; (eae8 <LorawanClasscUlAckTimerCallback+0x10>)
    eadc:	338c      	adds	r3, #140	; 0x8c
    eade:	781a      	ldrb	r2, [r3, #0]
    eae0:	438a      	bics	r2, r1
    eae2:	701a      	strb	r2, [r3, #0]
    eae4:	4770      	bx	lr
    eae6:	46c0      	nop			; (mov r8, r8)
    eae8:	200019b0 	.word	0x200019b0

0000eaec <LorawanClasscValidateSend>:
    eaec:	23ea      	movs	r3, #234	; 0xea
    eaee:	b510      	push	{r4, lr}
    eaf0:	4c0a      	ldr	r4, [pc, #40]	; (eb1c <LorawanClasscValidateSend+0x30>)
    eaf2:	005b      	lsls	r3, r3, #1
    eaf4:	5ce3      	ldrb	r3, [r4, r3]
    eaf6:	2b00      	cmp	r3, #0
    eaf8:	d008      	beq.n	eb0c <LorawanClasscValidateSend+0x20>
    eafa:	220e      	movs	r2, #14
    eafc:	347c      	adds	r4, #124	; 0x7c
    eafe:	7823      	ldrb	r3, [r4, #0]
    eb00:	2008      	movs	r0, #8
    eb02:	4013      	ands	r3, r2
    eb04:	2b02      	cmp	r3, #2
    eb06:	d100      	bne.n	eb0a <LorawanClasscValidateSend+0x1e>
    eb08:	2011      	movs	r0, #17
    eb0a:	bd10      	pop	{r4, pc}
    eb0c:	0023      	movs	r3, r4
    eb0e:	33ff      	adds	r3, #255	; 0xff
    eb10:	7f58      	ldrb	r0, [r3, #29]
    eb12:	4b03      	ldr	r3, [pc, #12]	; (eb20 <LorawanClasscValidateSend+0x34>)
    eb14:	4798      	blx	r3
    eb16:	2800      	cmp	r0, #0
    eb18:	d1ef      	bne.n	eafa <LorawanClasscValidateSend+0xe>
    eb1a:	e7f5      	b.n	eb08 <LorawanClasscValidateSend+0x1c>
    eb1c:	200019b0 	.word	0x200019b0
    eb20:	0000992d 	.word	0x0000992d

0000eb24 <LorawanClasscReceiveWindow1Callback>:
    eb24:	2301      	movs	r3, #1
    eb26:	b507      	push	{r0, r1, r2, lr}
    eb28:	a801      	add	r0, sp, #4
    eb2a:	7003      	strb	r3, [r0, #0]
    eb2c:	4b01      	ldr	r3, [pc, #4]	; (eb34 <LorawanClasscReceiveWindow1Callback+0x10>)
    eb2e:	4798      	blx	r3
    eb30:	bd07      	pop	{r0, r1, r2, pc}
    eb32:	46c0      	nop			; (mov r8, r8)
    eb34:	00010615 	.word	0x00010615

0000eb38 <LorawanClasscRxDone>:
    eb38:	b537      	push	{r0, r1, r2, r4, r5, lr}
    eb3a:	221f      	movs	r2, #31
    eb3c:	7803      	ldrb	r3, [r0, #0]
    eb3e:	4c13      	ldr	r4, [pc, #76]	; (eb8c <LorawanClasscRxDone+0x54>)
    eb40:	4393      	bics	r3, r2
    eb42:	2ba0      	cmp	r3, #160	; 0xa0
    eb44:	d10c      	bne.n	eb60 <LorawanClasscRxDone+0x28>
    eb46:	0025      	movs	r5, r4
    eb48:	35ff      	adds	r5, #255	; 0xff
    eb4a:	7f68      	ldrb	r0, [r5, #29]
    eb4c:	4b10      	ldr	r3, [pc, #64]	; (eb90 <LorawanClasscRxDone+0x58>)
    eb4e:	4798      	blx	r3
    eb50:	1e02      	subs	r2, r0, #0
    eb52:	d014      	beq.n	eb7e <LorawanClasscRxDone+0x46>
    eb54:	0022      	movs	r2, r4
    eb56:	2102      	movs	r1, #2
    eb58:	328c      	adds	r2, #140	; 0x8c
    eb5a:	7813      	ldrb	r3, [r2, #0]
    eb5c:	438b      	bics	r3, r1
    eb5e:	7013      	strb	r3, [r2, #0]
    eb60:	347c      	adds	r4, #124	; 0x7c
    eb62:	7823      	ldrb	r3, [r4, #0]
    eb64:	220e      	movs	r2, #14
    eb66:	0019      	movs	r1, r3
    eb68:	4011      	ands	r1, r2
    eb6a:	2906      	cmp	r1, #6
    eb6c:	d103      	bne.n	eb76 <LorawanClasscRxDone+0x3e>
    eb6e:	4393      	bics	r3, r2
    eb70:	3a04      	subs	r2, #4
    eb72:	4313      	orrs	r3, r2
    eb74:	7023      	strb	r3, [r4, #0]
    eb76:	2000      	movs	r0, #0
    eb78:	4b06      	ldr	r3, [pc, #24]	; (eb94 <LorawanClasscRxDone+0x5c>)
    eb7a:	4798      	blx	r3
    eb7c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    eb7e:	7f68      	ldrb	r0, [r5, #29]
    eb80:	4b05      	ldr	r3, [pc, #20]	; (eb98 <LorawanClasscRxDone+0x60>)
    eb82:	9200      	str	r2, [sp, #0]
    eb84:	4905      	ldr	r1, [pc, #20]	; (eb9c <LorawanClasscRxDone+0x64>)
    eb86:	4d06      	ldr	r5, [pc, #24]	; (eba0 <LorawanClasscRxDone+0x68>)
    eb88:	47a8      	blx	r5
    eb8a:	e7e9      	b.n	eb60 <LorawanClasscRxDone+0x28>
    eb8c:	200019b0 	.word	0x200019b0
    eb90:	0000992d 	.word	0x0000992d
    eb94:	0000d199 	.word	0x0000d199
    eb98:	0000ead9 	.word	0x0000ead9
    eb9c:	001e8480 	.word	0x001e8480
    eba0:	00009795 	.word	0x00009795

0000eba4 <LorawanClasscTxDone>:
    eba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    eba6:	4c1b      	ldr	r4, [pc, #108]	; (ec14 <LorawanClasscTxDone+0x70>)
    eba8:	0023      	movs	r3, r4
    ebaa:	33ca      	adds	r3, #202	; 0xca
    ebac:	881d      	ldrh	r5, [r3, #0]
    ebae:	0023      	movs	r3, r4
    ebb0:	338c      	adds	r3, #140	; 0x8c
    ebb2:	781b      	ldrb	r3, [r3, #0]
    ebb4:	07db      	lsls	r3, r3, #31
    ebb6:	d525      	bpl.n	ec04 <LorawanClasscTxDone+0x60>
    ebb8:	0023      	movs	r3, r4
    ebba:	0022      	movs	r2, r4
    ebbc:	33da      	adds	r3, #218	; 0xda
    ebbe:	781b      	ldrb	r3, [r3, #0]
    ebc0:	32dc      	adds	r2, #220	; 0xdc
    ebc2:	3301      	adds	r3, #1
    ebc4:	7812      	ldrb	r2, [r2, #0]
    ebc6:	4293      	cmp	r3, r2
    ebc8:	db07      	blt.n	ebda <LorawanClasscTxDone+0x36>
    ebca:	23ef      	movs	r3, #239	; 0xef
    ebcc:	005b      	lsls	r3, r3, #1
    ebce:	5ce3      	ldrb	r3, [r4, r3]
    ebd0:	2b00      	cmp	r3, #0
    ebd2:	d002      	beq.n	ebda <LorawanClasscTxDone+0x36>
    ebd4:	23fa      	movs	r3, #250	; 0xfa
    ebd6:	00db      	lsls	r3, r3, #3
    ebd8:	18ed      	adds	r5, r5, r3
    ebda:	0023      	movs	r3, r4
    ebdc:	33ff      	adds	r3, #255	; 0xff
    ebde:	1945      	adds	r5, r0, r5
    ebe0:	7f58      	ldrb	r0, [r3, #29]
    ebe2:	4b0d      	ldr	r3, [pc, #52]	; (ec18 <LorawanClasscTxDone+0x74>)
    ebe4:	4798      	blx	r3
    ebe6:	34e8      	adds	r4, #232	; 0xe8
    ebe8:	21fa      	movs	r1, #250	; 0xfa
    ebea:	7820      	ldrb	r0, [r4, #0]
    ebec:	2400      	movs	r4, #0
    ebee:	0089      	lsls	r1, r1, #2
    ebf0:	4369      	muls	r1, r5
    ebf2:	0022      	movs	r2, r4
    ebf4:	4d09      	ldr	r5, [pc, #36]	; (ec1c <LorawanClasscTxDone+0x78>)
    ebf6:	9400      	str	r4, [sp, #0]
    ebf8:	4b09      	ldr	r3, [pc, #36]	; (ec20 <LorawanClasscTxDone+0x7c>)
    ebfa:	47a8      	blx	r5
    ebfc:	0020      	movs	r0, r4
    ebfe:	4b09      	ldr	r3, [pc, #36]	; (ec24 <LorawanClasscTxDone+0x80>)
    ec00:	4798      	blx	r3
    ec02:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    ec04:	0023      	movs	r3, r4
    ec06:	0022      	movs	r2, r4
    ec08:	33d9      	adds	r3, #217	; 0xd9
    ec0a:	781b      	ldrb	r3, [r3, #0]
    ec0c:	32db      	adds	r2, #219	; 0xdb
    ec0e:	3301      	adds	r3, #1
    ec10:	e7d8      	b.n	ebc4 <LorawanClasscTxDone+0x20>
    ec12:	46c0      	nop			; (mov r8, r8)
    ec14:	200019b0 	.word	0x200019b0
    ec18:	00009aa1 	.word	0x00009aa1
    ec1c:	00009795 	.word	0x00009795
    ec20:	0000d065 	.word	0x0000d065
    ec24:	0000d199 	.word	0x0000d199

0000ec28 <LorawanClasscRxTimeout>:
    ec28:	b510      	push	{r4, lr}
    ec2a:	4b08      	ldr	r3, [pc, #32]	; (ec4c <LorawanClasscRxTimeout+0x24>)
    ec2c:	210e      	movs	r1, #14
    ec2e:	337c      	adds	r3, #124	; 0x7c
    ec30:	781a      	ldrb	r2, [r3, #0]
    ec32:	0010      	movs	r0, r2
    ec34:	4008      	ands	r0, r1
    ec36:	2806      	cmp	r0, #6
    ec38:	d106      	bne.n	ec48 <LorawanClasscRxTimeout+0x20>
    ec3a:	438a      	bics	r2, r1
    ec3c:	3904      	subs	r1, #4
    ec3e:	430a      	orrs	r2, r1
    ec40:	701a      	strb	r2, [r3, #0]
    ec42:	2000      	movs	r0, #0
    ec44:	4b02      	ldr	r3, [pc, #8]	; (ec50 <LorawanClasscRxTimeout+0x28>)
    ec46:	4798      	blx	r3
    ec48:	bd10      	pop	{r4, pc}
    ec4a:	46c0      	nop			; (mov r8, r8)
    ec4c:	200019b0 	.word	0x200019b0
    ec50:	0000d199 	.word	0x0000d199

0000ec54 <LorawanClasscNotifyAppOnReceive>:
    ec54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ec56:	001f      	movs	r7, r3
    ec58:	4b08      	ldr	r3, [pc, #32]	; (ec7c <LorawanClasscNotifyAppOnReceive+0x28>)
    ec5a:	0004      	movs	r4, r0
    ec5c:	33ff      	adds	r3, #255	; 0xff
    ec5e:	7f58      	ldrb	r0, [r3, #29]
    ec60:	4b07      	ldr	r3, [pc, #28]	; (ec80 <LorawanClasscNotifyAppOnReceive+0x2c>)
    ec62:	000d      	movs	r5, r1
    ec64:	0016      	movs	r6, r2
    ec66:	4798      	blx	r3
    ec68:	2800      	cmp	r0, #0
    ec6a:	d105      	bne.n	ec78 <LorawanClasscNotifyAppOnReceive+0x24>
    ec6c:	0020      	movs	r0, r4
    ec6e:	003b      	movs	r3, r7
    ec70:	0032      	movs	r2, r6
    ec72:	0029      	movs	r1, r5
    ec74:	4c03      	ldr	r4, [pc, #12]	; (ec84 <LorawanClasscNotifyAppOnReceive+0x30>)
    ec76:	47a0      	blx	r4
    ec78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ec7a:	46c0      	nop			; (mov r8, r8)
    ec7c:	200019b0 	.word	0x200019b0
    ec80:	0000992d 	.word	0x0000992d
    ec84:	0000c585 	.word	0x0000c585

0000ec88 <LorawanMcastInit>:
    ec88:	2290      	movs	r2, #144	; 0x90
    ec8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ec8c:	2500      	movs	r5, #0
    ec8e:	4b0e      	ldr	r3, [pc, #56]	; (ecc8 <LorawanMcastInit+0x40>)
    ec90:	0052      	lsls	r2, r2, #1
    ec92:	549d      	strb	r5, [r3, r2]
    ec94:	2222      	movs	r2, #34	; 0x22
    ec96:	2701      	movs	r7, #1
    ec98:	32ff      	adds	r2, #255	; 0xff
    ec9a:	4c0c      	ldr	r4, [pc, #48]	; (eccc <LorawanMcastInit+0x44>)
    ec9c:	549d      	strb	r5, [r3, r2]
    ec9e:	427f      	negs	r7, r7
    eca0:	0023      	movs	r3, r4
    eca2:	3b14      	subs	r3, #20
    eca4:	601f      	str	r7, [r3, #0]
    eca6:	2210      	movs	r2, #16
    eca8:	2100      	movs	r1, #0
    ecaa:	0020      	movs	r0, r4
    ecac:	4e08      	ldr	r6, [pc, #32]	; (ecd0 <LorawanMcastInit+0x48>)
    ecae:	47b0      	blx	r6
    ecb0:	0020      	movs	r0, r4
    ecb2:	2210      	movs	r2, #16
    ecb4:	3810      	subs	r0, #16
    ecb6:	2100      	movs	r1, #0
    ecb8:	47b0      	blx	r6
    ecba:	4b06      	ldr	r3, [pc, #24]	; (ecd4 <LorawanMcastInit+0x4c>)
    ecbc:	6125      	str	r5, [r4, #16]
    ecbe:	342c      	adds	r4, #44	; 0x2c
    ecc0:	429c      	cmp	r4, r3
    ecc2:	d1ed      	bne.n	eca0 <LorawanMcastInit+0x18>
    ecc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ecc6:	46c0      	nop			; (mov r8, r8)
    ecc8:	200019b0 	.word	0x200019b0
    eccc:	20001ae8 	.word	0x20001ae8
    ecd0:	00013ee1 	.word	0x00013ee1
    ecd4:	20001b98 	.word	0x20001b98

0000ecd8 <LorawanMcastEnable>:
    ecd8:	0002      	movs	r2, r0
    ecda:	b530      	push	{r4, r5, lr}
    ecdc:	200a      	movs	r0, #10
    ecde:	2903      	cmp	r1, #3
    ece0:	d823      	bhi.n	ed2a <LorawanMcastEnable+0x52>
    ece2:	4b1a      	ldr	r3, [pc, #104]	; (ed4c <LorawanMcastEnable+0x74>)
    ece4:	2a00      	cmp	r2, #0
    ece6:	d021      	beq.n	ed2c <LorawanMcastEnable+0x54>
    ece8:	222c      	movs	r2, #44	; 0x2c
    ecea:	434a      	muls	r2, r1
    ecec:	189a      	adds	r2, r3, r2
    ecee:	3249      	adds	r2, #73	; 0x49
    ecf0:	32ff      	adds	r2, #255	; 0xff
    ecf2:	7912      	ldrb	r2, [r2, #4]
    ecf4:	0754      	lsls	r4, r2, #29
    ecf6:	d513      	bpl.n	ed20 <LorawanMcastEnable+0x48>
    ecf8:	0794      	lsls	r4, r2, #30
    ecfa:	d511      	bpl.n	ed20 <LorawanMcastEnable+0x48>
    ecfc:	07d2      	lsls	r2, r2, #31
    ecfe:	0fd2      	lsrs	r2, r2, #31
    ed00:	2a01      	cmp	r2, #1
    ed02:	d10d      	bne.n	ed20 <LorawanMcastEnable+0x48>
    ed04:	001c      	movs	r4, r3
    ed06:	34f4      	adds	r4, #244	; 0xf4
    ed08:	7825      	ldrb	r5, [r4, #0]
    ed0a:	2406      	movs	r4, #6
    ed0c:	4225      	tst	r5, r4
    ed0e:	d007      	beq.n	ed20 <LorawanMcastEnable+0x48>
    ed10:	2022      	movs	r0, #34	; 0x22
    ed12:	408a      	lsls	r2, r1
    ed14:	30ff      	adds	r0, #255	; 0xff
    ed16:	5c19      	ldrb	r1, [r3, r0]
    ed18:	430a      	orrs	r2, r1
    ed1a:	541a      	strb	r2, [r3, r0]
    ed1c:	381a      	subs	r0, #26
    ed1e:	38ff      	subs	r0, #255	; 0xff
    ed20:	2190      	movs	r1, #144	; 0x90
    ed22:	0049      	lsls	r1, r1, #1
    ed24:	5c5a      	ldrb	r2, [r3, r1]
    ed26:	3201      	adds	r2, #1
    ed28:	545a      	strb	r2, [r3, r1]
    ed2a:	bd30      	pop	{r4, r5, pc}
    ed2c:	2201      	movs	r2, #1
    ed2e:	408a      	lsls	r2, r1
    ed30:	2022      	movs	r0, #34	; 0x22
    ed32:	0011      	movs	r1, r2
    ed34:	30ff      	adds	r0, #255	; 0xff
    ed36:	5c1a      	ldrb	r2, [r3, r0]
    ed38:	438a      	bics	r2, r1
    ed3a:	2190      	movs	r1, #144	; 0x90
    ed3c:	541a      	strb	r2, [r3, r0]
    ed3e:	0049      	lsls	r1, r1, #1
    ed40:	5c5a      	ldrb	r2, [r3, r1]
    ed42:	381a      	subs	r0, #26
    ed44:	3a01      	subs	r2, #1
    ed46:	545a      	strb	r2, [r3, r1]
    ed48:	38ff      	subs	r0, #255	; 0xff
    ed4a:	e7ee      	b.n	ed2a <LorawanMcastEnable+0x52>
    ed4c:	200019b0 	.word	0x200019b0

0000ed50 <LorawanMcastValidateHdr>:
    ed50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ed52:	469c      	mov	ip, r3
    ed54:	2400      	movs	r4, #0
    ed56:	230a      	movs	r3, #10
    ed58:	4f18      	ldr	r7, [pc, #96]	; (edbc <LorawanMcastValidateHdr+0x6c>)
    ed5a:	b2e5      	uxtb	r5, r4
    ed5c:	9501      	str	r5, [sp, #4]
    ed5e:	2522      	movs	r5, #34	; 0x22
    ed60:	35ff      	adds	r5, #255	; 0xff
    ed62:	5d7d      	ldrb	r5, [r7, r5]
    ed64:	2601      	movs	r6, #1
    ed66:	4125      	asrs	r5, r4
    ed68:	4235      	tst	r5, r6
    ed6a:	d022      	beq.n	edb2 <LorawanMcastValidateHdr+0x62>
    ed6c:	7886      	ldrb	r6, [r0, #2]
    ed6e:	7845      	ldrb	r5, [r0, #1]
    ed70:	0236      	lsls	r6, r6, #8
    ed72:	432e      	orrs	r6, r5
    ed74:	78c5      	ldrb	r5, [r0, #3]
    ed76:	042d      	lsls	r5, r5, #16
    ed78:	432e      	orrs	r6, r5
    ed7a:	7905      	ldrb	r5, [r0, #4]
    ed7c:	062d      	lsls	r5, r5, #24
    ed7e:	4335      	orrs	r5, r6
    ed80:	262c      	movs	r6, #44	; 0x2c
    ed82:	4366      	muls	r6, r4
    ed84:	3625      	adds	r6, #37	; 0x25
    ed86:	36ff      	adds	r6, #255	; 0xff
    ed88:	59be      	ldr	r6, [r7, r6]
    ed8a:	42b5      	cmp	r5, r6
    ed8c:	d111      	bne.n	edb2 <LorawanMcastValidateHdr+0x62>
    ed8e:	4d0c      	ldr	r5, [pc, #48]	; (edc0 <LorawanMcastValidateHdr+0x70>)
    ed90:	782e      	ldrb	r6, [r5, #0]
    ed92:	2506      	movs	r5, #6
    ed94:	422e      	tst	r6, r5
    ed96:	d00c      	beq.n	edb2 <LorawanMcastValidateHdr+0x62>
    ed98:	2a00      	cmp	r2, #0
    ed9a:	d00a      	beq.n	edb2 <LorawanMcastValidateHdr+0x62>
    ed9c:	7946      	ldrb	r6, [r0, #5]
    ed9e:	3569      	adds	r5, #105	; 0x69
    eda0:	422e      	tst	r6, r5
    eda2:	d106      	bne.n	edb2 <LorawanMcastValidateHdr+0x62>
    eda4:	2903      	cmp	r1, #3
    eda6:	d104      	bne.n	edb2 <LorawanMcastValidateHdr+0x62>
    eda8:	466d      	mov	r5, sp
    edaa:	4663      	mov	r3, ip
    edac:	792d      	ldrb	r5, [r5, #4]
    edae:	701d      	strb	r5, [r3, #0]
    edb0:	2308      	movs	r3, #8
    edb2:	3401      	adds	r4, #1
    edb4:	2c04      	cmp	r4, #4
    edb6:	d1d0      	bne.n	ed5a <LorawanMcastValidateHdr+0xa>
    edb8:	0018      	movs	r0, r3
    edba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    edbc:	200019b0 	.word	0x200019b0
    edc0:	20001aa4 	.word	0x20001aa4

0000edc4 <LorawanMcastProcessPkt>:
    edc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    edc6:	b08b      	sub	sp, #44	; 0x2c
    edc8:	9007      	str	r0, [sp, #28]
    edca:	000c      	movs	r4, r1
    edcc:	0015      	movs	r5, r2
    edce:	7991      	ldrb	r1, [r2, #6]
    edd0:	79d2      	ldrb	r2, [r2, #7]
    edd2:	4e35      	ldr	r6, [pc, #212]	; (eea8 <LorawanMcastProcessPkt+0xe4>)
    edd4:	0212      	lsls	r2, r2, #8
    edd6:	430a      	orrs	r2, r1
    edd8:	212c      	movs	r1, #44	; 0x2c
    edda:	4359      	muls	r1, r3
    eddc:	1873      	adds	r3, r6, r1
    edde:	9309      	str	r3, [sp, #36]	; 0x24
    ede0:	3349      	adds	r3, #73	; 0x49
    ede2:	33ff      	adds	r3, #255	; 0xff
    ede4:	9108      	str	r1, [sp, #32]
    ede6:	8819      	ldrh	r1, [r3, #0]
    ede8:	270a      	movs	r7, #10
    edea:	4291      	cmp	r1, r2
    edec:	d845      	bhi.n	ee7a <LorawanMcastProcessPkt+0xb6>
    edee:	801a      	strh	r2, [r3, #0]
    edf0:	2105      	movs	r1, #5
    edf2:	4b2e      	ldr	r3, [pc, #184]	; (eeac <LorawanMcastProcessPkt+0xe8>)
    edf4:	2000      	movs	r0, #0
    edf6:	4798      	blx	r3
    edf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    edfa:	0021      	movs	r1, r4
    edfc:	32fc      	adds	r2, #252	; 0xfc
    edfe:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ee00:	9807      	ldr	r0, [sp, #28]
    ee02:	9304      	str	r3, [sp, #16]
    ee04:	4b2a      	ldr	r3, [pc, #168]	; (eeb0 <LorawanMcastProcessPkt+0xec>)
    ee06:	390d      	subs	r1, #13
    ee08:	9303      	str	r3, [sp, #12]
    ee0a:	2319      	movs	r3, #25
    ee0c:	9302      	str	r3, [sp, #8]
    ee0e:	3b16      	subs	r3, #22
    ee10:	9301      	str	r3, [sp, #4]
    ee12:	9b08      	ldr	r3, [sp, #32]
    ee14:	b2c9      	uxtb	r1, r1
    ee16:	3339      	adds	r3, #57	; 0x39
    ee18:	33ff      	adds	r3, #255	; 0xff
    ee1a:	199b      	adds	r3, r3, r6
    ee1c:	9300      	str	r3, [sp, #0]
    ee1e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    ee20:	3009      	adds	r0, #9
    ee22:	2201      	movs	r2, #1
    ee24:	4f23      	ldr	r7, [pc, #140]	; (eeb4 <LorawanMcastProcessPkt+0xf0>)
    ee26:	47b8      	blx	r7
    ee28:	2800      	cmp	r0, #0
    ee2a:	d002      	beq.n	ee32 <LorawanMcastProcessPkt+0x6e>
    ee2c:	201f      	movs	r0, #31
    ee2e:	4b22      	ldr	r3, [pc, #136]	; (eeb8 <LorawanMcastProcessPkt+0xf4>)
    ee30:	4798      	blx	r3
    ee32:	4922      	ldr	r1, [pc, #136]	; (eebc <LorawanMcastProcessPkt+0xf8>)
    ee34:	2708      	movs	r7, #8
    ee36:	784a      	ldrb	r2, [r1, #1]
    ee38:	780b      	ldrb	r3, [r1, #0]
    ee3a:	0212      	lsls	r2, r2, #8
    ee3c:	431a      	orrs	r2, r3
    ee3e:	788b      	ldrb	r3, [r1, #2]
    ee40:	041b      	lsls	r3, r3, #16
    ee42:	431a      	orrs	r2, r3
    ee44:	78cb      	ldrb	r3, [r1, #3]
    ee46:	061b      	lsls	r3, r3, #24
    ee48:	4313      	orrs	r3, r2
    ee4a:	d016      	beq.n	ee7a <LorawanMcastProcessPkt+0xb6>
    ee4c:	2220      	movs	r2, #32
    ee4e:	368c      	adds	r6, #140	; 0x8c
    ee50:	7833      	ldrb	r3, [r6, #0]
    ee52:	9907      	ldr	r1, [sp, #28]
    ee54:	4393      	bics	r3, r2
    ee56:	7033      	strb	r3, [r6, #0]
    ee58:	78ab      	ldrb	r3, [r5, #2]
    ee5a:	0022      	movs	r2, r4
    ee5c:	40bb      	lsls	r3, r7
    ee5e:	7868      	ldrb	r0, [r5, #1]
    ee60:	3a0c      	subs	r2, #12
    ee62:	4303      	orrs	r3, r0
    ee64:	78e8      	ldrb	r0, [r5, #3]
    ee66:	b2d2      	uxtb	r2, r2
    ee68:	0400      	lsls	r0, r0, #16
    ee6a:	4303      	orrs	r3, r0
    ee6c:	7928      	ldrb	r0, [r5, #4]
    ee6e:	19c9      	adds	r1, r1, r7
    ee70:	0600      	lsls	r0, r0, #24
    ee72:	4318      	orrs	r0, r3
    ee74:	4c12      	ldr	r4, [pc, #72]	; (eec0 <LorawanMcastProcessPkt+0xfc>)
    ee76:	003b      	movs	r3, r7
    ee78:	47a0      	blx	r4
    ee7a:	4a0b      	ldr	r2, [pc, #44]	; (eea8 <LorawanMcastProcessPkt+0xe4>)
    ee7c:	200e      	movs	r0, #14
    ee7e:	0011      	movs	r1, r2
    ee80:	317c      	adds	r1, #124	; 0x7c
    ee82:	780b      	ldrb	r3, [r1, #0]
    ee84:	001c      	movs	r4, r3
    ee86:	4004      	ands	r4, r0
    ee88:	2c06      	cmp	r4, #6
    ee8a:	d107      	bne.n	ee9c <LorawanMcastProcessPkt+0xd8>
    ee8c:	32f4      	adds	r2, #244	; 0xf4
    ee8e:	7812      	ldrb	r2, [r2, #0]
    ee90:	2a04      	cmp	r2, #4
    ee92:	d103      	bne.n	ee9c <LorawanMcastProcessPkt+0xd8>
    ee94:	4383      	bics	r3, r0
    ee96:	3206      	adds	r2, #6
    ee98:	4313      	orrs	r3, r2
    ee9a:	700b      	strb	r3, [r1, #0]
    ee9c:	2000      	movs	r0, #0
    ee9e:	4b09      	ldr	r3, [pc, #36]	; (eec4 <LorawanMcastProcessPkt+0x100>)
    eea0:	4798      	blx	r3
    eea2:	0038      	movs	r0, r7
    eea4:	b00b      	add	sp, #44	; 0x2c
    eea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eea8:	200019b0 	.word	0x200019b0
    eeac:	00008d6d 	.word	0x00008d6d
    eeb0:	20001cb0 	.word	0x20001cb0
    eeb4:	0000c121 	.word	0x0000c121
    eeb8:	0000c1e1 	.word	0x0000c1e1
    eebc:	20001ca8 	.word	0x20001ca8
    eec0:	0000c585 	.word	0x0000c585
    eec4:	0000d199 	.word	0x0000d199

0000eec8 <LorawanAddMcastAddr>:
    eec8:	4b11      	ldr	r3, [pc, #68]	; (ef10 <LorawanAddMcastAddr+0x48>)
    eeca:	b570      	push	{r4, r5, r6, lr}
    eecc:	001a      	movs	r2, r3
    eece:	327c      	adds	r2, #124	; 0x7c
    eed0:	7812      	ldrb	r2, [r2, #0]
    eed2:	07d2      	lsls	r2, r2, #31
    eed4:	d509      	bpl.n	eeea <LorawanAddMcastAddr+0x22>
    eed6:	681a      	ldr	r2, [r3, #0]
    eed8:	0a15      	lsrs	r5, r2, #8
    eeda:	791a      	ldrb	r2, [r3, #4]
    eedc:	0612      	lsls	r2, r2, #24
    eede:	432a      	orrs	r2, r5
    eee0:	4282      	cmp	r2, r0
    eee2:	d102      	bne.n	eeea <LorawanAddMcastAddr+0x22>
    eee4:	220a      	movs	r2, #10
    eee6:	2903      	cmp	r1, #3
    eee8:	d810      	bhi.n	ef0c <LorawanAddMcastAddr+0x44>
    eeea:	242c      	movs	r4, #44	; 0x2c
    eeec:	434c      	muls	r4, r1
    eeee:	191c      	adds	r4, r3, r4
    eef0:	0023      	movs	r3, r4
    eef2:	33fc      	adds	r3, #252	; 0xfc
    eef4:	6298      	str	r0, [r3, #40]	; 0x28
    eef6:	2106      	movs	r1, #6
    eef8:	2000      	movs	r0, #0
    eefa:	4b06      	ldr	r3, [pc, #24]	; (ef14 <LorawanAddMcastAddr+0x4c>)
    eefc:	4798      	blx	r3
    eefe:	2201      	movs	r2, #1
    ef00:	3449      	adds	r4, #73	; 0x49
    ef02:	34ff      	adds	r4, #255	; 0xff
    ef04:	7921      	ldrb	r1, [r4, #4]
    ef06:	430a      	orrs	r2, r1
    ef08:	7122      	strb	r2, [r4, #4]
    ef0a:	2208      	movs	r2, #8
    ef0c:	0010      	movs	r0, r2
    ef0e:	bd70      	pop	{r4, r5, r6, pc}
    ef10:	200019b0 	.word	0x200019b0
    ef14:	00008d6d 	.word	0x00008d6d

0000ef18 <LorawanAddMcastAppskey>:
    ef18:	b570      	push	{r4, r5, r6, lr}
    ef1a:	4c11      	ldr	r4, [pc, #68]	; (ef60 <LorawanAddMcastAppskey+0x48>)
    ef1c:	0006      	movs	r6, r0
    ef1e:	0023      	movs	r3, r4
    ef20:	337c      	adds	r3, #124	; 0x7c
    ef22:	781b      	ldrb	r3, [r3, #0]
    ef24:	07db      	lsls	r3, r3, #31
    ef26:	d504      	bpl.n	ef32 <LorawanAddMcastAppskey+0x1a>
    ef28:	2800      	cmp	r0, #0
    ef2a:	d102      	bne.n	ef32 <LorawanAddMcastAppskey+0x1a>
    ef2c:	200a      	movs	r0, #10
    ef2e:	2903      	cmp	r1, #3
    ef30:	d815      	bhi.n	ef5e <LorawanAddMcastAppskey+0x46>
    ef32:	252c      	movs	r5, #44	; 0x2c
    ef34:	434d      	muls	r5, r1
    ef36:	0028      	movs	r0, r5
    ef38:	3039      	adds	r0, #57	; 0x39
    ef3a:	30ff      	adds	r0, #255	; 0xff
    ef3c:	2210      	movs	r2, #16
    ef3e:	1820      	adds	r0, r4, r0
    ef40:	0031      	movs	r1, r6
    ef42:	4b08      	ldr	r3, [pc, #32]	; (ef64 <LorawanAddMcastAppskey+0x4c>)
    ef44:	4798      	blx	r3
    ef46:	4b08      	ldr	r3, [pc, #32]	; (ef68 <LorawanAddMcastAppskey+0x50>)
    ef48:	2107      	movs	r1, #7
    ef4a:	2000      	movs	r0, #0
    ef4c:	4798      	blx	r3
    ef4e:	2304      	movs	r3, #4
    ef50:	2008      	movs	r0, #8
    ef52:	1964      	adds	r4, r4, r5
    ef54:	3449      	adds	r4, #73	; 0x49
    ef56:	34ff      	adds	r4, #255	; 0xff
    ef58:	7922      	ldrb	r2, [r4, #4]
    ef5a:	4313      	orrs	r3, r2
    ef5c:	7123      	strb	r3, [r4, #4]
    ef5e:	bd70      	pop	{r4, r5, r6, pc}
    ef60:	200019b0 	.word	0x200019b0
    ef64:	00013e5d 	.word	0x00013e5d
    ef68:	00008d6d 	.word	0x00008d6d

0000ef6c <LorawanAddMcastNwkskey>:
    ef6c:	b570      	push	{r4, r5, r6, lr}
    ef6e:	4c11      	ldr	r4, [pc, #68]	; (efb4 <LorawanAddMcastNwkskey+0x48>)
    ef70:	0006      	movs	r6, r0
    ef72:	0023      	movs	r3, r4
    ef74:	337c      	adds	r3, #124	; 0x7c
    ef76:	781b      	ldrb	r3, [r3, #0]
    ef78:	07db      	lsls	r3, r3, #31
    ef7a:	d504      	bpl.n	ef86 <LorawanAddMcastNwkskey+0x1a>
    ef7c:	2800      	cmp	r0, #0
    ef7e:	d102      	bne.n	ef86 <LorawanAddMcastNwkskey+0x1a>
    ef80:	200a      	movs	r0, #10
    ef82:	2903      	cmp	r1, #3
    ef84:	d815      	bhi.n	efb2 <LorawanAddMcastNwkskey+0x46>
    ef86:	252c      	movs	r5, #44	; 0x2c
    ef88:	434d      	muls	r5, r1
    ef8a:	0028      	movs	r0, r5
    ef8c:	3029      	adds	r0, #41	; 0x29
    ef8e:	30ff      	adds	r0, #255	; 0xff
    ef90:	2210      	movs	r2, #16
    ef92:	1820      	adds	r0, r4, r0
    ef94:	0031      	movs	r1, r6
    ef96:	4b08      	ldr	r3, [pc, #32]	; (efb8 <LorawanAddMcastNwkskey+0x4c>)
    ef98:	4798      	blx	r3
    ef9a:	4b08      	ldr	r3, [pc, #32]	; (efbc <LorawanAddMcastNwkskey+0x50>)
    ef9c:	2108      	movs	r1, #8
    ef9e:	2000      	movs	r0, #0
    efa0:	4798      	blx	r3
    efa2:	2302      	movs	r3, #2
    efa4:	2008      	movs	r0, #8
    efa6:	1964      	adds	r4, r4, r5
    efa8:	3449      	adds	r4, #73	; 0x49
    efaa:	34ff      	adds	r4, #255	; 0xff
    efac:	7922      	ldrb	r2, [r4, #4]
    efae:	4313      	orrs	r3, r2
    efb0:	7123      	strb	r3, [r4, #4]
    efb2:	bd70      	pop	{r4, r5, r6, pc}
    efb4:	200019b0 	.word	0x200019b0
    efb8:	00013e5d 	.word	0x00013e5d
    efbc:	00008d6d 	.word	0x00008d6d

0000efc0 <Lorawan_Pds_fid1_CB>:
    efc0:	4770      	bx	lr
	...

0000efc4 <Lorawan_Pds_fid2_CB>:
    efc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    efc6:	23f0      	movs	r3, #240	; 0xf0
    efc8:	4c25      	ldr	r4, [pc, #148]	; (f060 <Lorawan_Pds_fid2_CB+0x9c>)
    efca:	005b      	lsls	r3, r3, #1
    efcc:	5ce2      	ldrb	r2, [r4, r3]
    efce:	2a00      	cmp	r2, #0
    efd0:	d010      	beq.n	eff4 <Lorawan_Pds_fid2_CB+0x30>
    efd2:	3be0      	subs	r3, #224	; 0xe0
    efd4:	3bff      	subs	r3, #255	; 0xff
    efd6:	4093      	lsls	r3, r2
    efd8:	1d21      	adds	r1, r4, #4
    efda:	6fca      	ldr	r2, [r1, #124]	; 0x7c
    efdc:	18d2      	adds	r2, r2, r3
    efde:	67ca      	str	r2, [r1, #124]	; 0x7c
    efe0:	0021      	movs	r1, r4
    efe2:	3108      	adds	r1, #8
    efe4:	6fca      	ldr	r2, [r1, #124]	; 0x7c
    efe6:	18d2      	adds	r2, r2, r3
    efe8:	67ca      	str	r2, [r1, #124]	; 0x7c
    efea:	0022      	movs	r2, r4
    efec:	32fc      	adds	r2, #252	; 0xfc
    efee:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    eff0:	18cb      	adds	r3, r1, r3
    eff2:	64d3      	str	r3, [r2, #76]	; 0x4c
    eff4:	0025      	movs	r5, r4
    eff6:	2271      	movs	r2, #113	; 0x71
    eff8:	2701      	movs	r7, #1
    effa:	357c      	adds	r5, #124	; 0x7c
    effc:	782b      	ldrb	r3, [r5, #0]
    effe:	4013      	ands	r3, r2
    f000:	702b      	strb	r3, [r5, #0]
    f002:	786b      	ldrb	r3, [r5, #1]
    f004:	43bb      	bics	r3, r7
    f006:	706b      	strb	r3, [r5, #1]
    f008:	23e2      	movs	r3, #226	; 0xe2
    f00a:	33ff      	adds	r3, #255	; 0xff
    f00c:	5ce3      	ldrb	r3, [r4, r3]
    f00e:	2b00      	cmp	r3, #0
    f010:	d018      	beq.n	f044 <Lorawan_Pds_fid2_CB+0x80>
    f012:	4914      	ldr	r1, [pc, #80]	; (f064 <Lorawan_Pds_fid2_CB+0xa0>)
    f014:	2006      	movs	r0, #6
    f016:	4e14      	ldr	r6, [pc, #80]	; (f068 <Lorawan_Pds_fid2_CB+0xa4>)
    f018:	47b0      	blx	r6
    f01a:	2800      	cmp	r0, #0
    f01c:	d002      	beq.n	f024 <Lorawan_Pds_fid2_CB+0x60>
    f01e:	782b      	ldrb	r3, [r5, #0]
    f020:	43bb      	bics	r3, r7
    f022:	702b      	strb	r3, [r5, #0]
    f024:	0023      	movs	r3, r4
    f026:	2501      	movs	r5, #1
    f028:	337c      	adds	r3, #124	; 0x7c
    f02a:	781b      	ldrb	r3, [r3, #0]
    f02c:	422b      	tst	r3, r5
    f02e:	d008      	beq.n	f042 <Lorawan_Pds_fid2_CB+0x7e>
    f030:	7823      	ldrb	r3, [r4, #0]
    f032:	2b00      	cmp	r3, #0
    f034:	d106      	bne.n	f044 <Lorawan_Pds_fid2_CB+0x80>
    f036:	490d      	ldr	r1, [pc, #52]	; (f06c <Lorawan_Pds_fid2_CB+0xa8>)
    f038:	2002      	movs	r0, #2
    f03a:	47b0      	blx	r6
    f03c:	490c      	ldr	r1, [pc, #48]	; (f070 <Lorawan_Pds_fid2_CB+0xac>)
    f03e:	0028      	movs	r0, r5
    f040:	47b0      	blx	r6
    f042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f044:	0020      	movs	r0, r4
    f046:	0021      	movs	r1, r4
    f048:	2210      	movs	r2, #16
    f04a:	3115      	adds	r1, #21
    f04c:	4d09      	ldr	r5, [pc, #36]	; (f074 <Lorawan_Pds_fid2_CB+0xb0>)
    f04e:	3035      	adds	r0, #53	; 0x35
    f050:	47a8      	blx	r5
    f052:	0020      	movs	r0, r4
    f054:	1d61      	adds	r1, r4, #5
    f056:	2210      	movs	r2, #16
    f058:	3025      	adds	r0, #37	; 0x25
    f05a:	47a8      	blx	r5
    f05c:	e7f1      	b.n	f042 <Lorawan_Pds_fid2_CB+0x7e>
    f05e:	46c0      	nop			; (mov r8, r8)
    f060:	200019b0 	.word	0x200019b0
    f064:	20001a05 	.word	0x20001a05
    f068:	00008a75 	.word	0x00008a75
    f06c:	200019d5 	.word	0x200019d5
    f070:	200019e5 	.word	0x200019e5
    f074:	00013e5d 	.word	0x00013e5d

0000f078 <LORAWAN_TxHandler>:
    f078:	b5f0      	push	{r4, r5, r6, r7, lr}
    f07a:	b087      	sub	sp, #28
    f07c:	466b      	mov	r3, sp
    f07e:	2501      	movs	r5, #1
    f080:	4c30      	ldr	r4, [pc, #192]	; (f144 <LORAWAN_TxHandler+0xcc>)
    f082:	701d      	strb	r5, [r3, #0]
    f084:	0023      	movs	r3, r4
    f086:	466a      	mov	r2, sp
    f088:	33e1      	adds	r3, #225	; 0xe1
    f08a:	781b      	ldrb	r3, [r3, #0]
    f08c:	4669      	mov	r1, sp
    f08e:	7053      	strb	r3, [r2, #1]
    f090:	0023      	movs	r3, r4
    f092:	33df      	adds	r3, #223	; 0xdf
    f094:	781b      	ldrb	r3, [r3, #0]
    f096:	202f      	movs	r0, #47	; 0x2f
    f098:	7093      	strb	r3, [r2, #2]
    f09a:	aa03      	add	r2, sp, #12
    f09c:	4b2a      	ldr	r3, [pc, #168]	; (f148 <LORAWAN_TxHandler+0xd0>)
    f09e:	4798      	blx	r3
    f0a0:	2808      	cmp	r0, #8
    f0a2:	d004      	beq.n	f0ae <LORAWAN_TxHandler+0x36>
    f0a4:	4b29      	ldr	r3, [pc, #164]	; (f14c <LORAWAN_TxHandler+0xd4>)
    f0a6:	4798      	blx	r3
    f0a8:	2000      	movs	r0, #0
    f0aa:	b007      	add	sp, #28
    f0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f0ae:	0023      	movs	r3, r4
    f0b0:	33f4      	adds	r3, #244	; 0xf4
    f0b2:	781b      	ldrb	r3, [r3, #0]
    f0b4:	ae01      	add	r6, sp, #4
    f0b6:	2b04      	cmp	r3, #4
    f0b8:	d103      	bne.n	f0c2 <LORAWAN_TxHandler+0x4a>
    f0ba:	0030      	movs	r0, r6
    f0bc:	4b24      	ldr	r3, [pc, #144]	; (f150 <LORAWAN_TxHandler+0xd8>)
    f0be:	7035      	strb	r5, [r6, #0]
    f0c0:	4798      	blx	r3
    f0c2:	4b24      	ldr	r3, [pc, #144]	; (f154 <LORAWAN_TxHandler+0xdc>)
    f0c4:	9803      	ldr	r0, [sp, #12]
    f0c6:	9904      	ldr	r1, [sp, #16]
    f0c8:	9a05      	ldr	r2, [sp, #20]
    f0ca:	4798      	blx	r3
    f0cc:	0023      	movs	r3, r4
    f0ce:	33fc      	adds	r3, #252	; 0xfc
    f0d0:	681d      	ldr	r5, [r3, #0]
    f0d2:	23ef      	movs	r3, #239	; 0xef
    f0d4:	4f20      	ldr	r7, [pc, #128]	; (f158 <LORAWAN_TxHandler+0xe0>)
    f0d6:	005b      	lsls	r3, r3, #1
    f0d8:	2d00      	cmp	r5, #0
    f0da:	d023      	beq.n	f124 <LORAWAN_TxHandler+0xac>
    f0dc:	2201      	movs	r2, #1
    f0de:	54e2      	strb	r2, [r4, r3]
    f0e0:	7828      	ldrb	r0, [r5, #0]
    f0e2:	7a2b      	ldrb	r3, [r5, #8]
    f0e4:	1e42      	subs	r2, r0, #1
    f0e6:	4190      	sbcs	r0, r2
    f0e8:	7869      	ldrb	r1, [r5, #1]
    f0ea:	686a      	ldr	r2, [r5, #4]
    f0ec:	b2c0      	uxtb	r0, r0
    f0ee:	47b8      	blx	r7
    f0f0:	0023      	movs	r3, r4
    f0f2:	33c6      	adds	r3, #198	; 0xc6
    f0f4:	881b      	ldrh	r3, [r3, #0]
    f0f6:	0030      	movs	r0, r6
    f0f8:	7033      	strb	r3, [r6, #0]
    f0fa:	4b18      	ldr	r3, [pc, #96]	; (f15c <LORAWAN_TxHandler+0xe4>)
    f0fc:	6073      	str	r3, [r6, #4]
    f0fe:	4b18      	ldr	r3, [pc, #96]	; (f160 <LORAWAN_TxHandler+0xe8>)
    f100:	4798      	blx	r3
    f102:	2800      	cmp	r0, #0
    f104:	d114      	bne.n	f130 <LORAWAN_TxHandler+0xb8>
    f106:	0021      	movs	r1, r4
    f108:	220e      	movs	r2, #14
    f10a:	317c      	adds	r1, #124	; 0x7c
    f10c:	780b      	ldrb	r3, [r1, #0]
    f10e:	4393      	bics	r3, r2
    f110:	001a      	movs	r2, r3
    f112:	2302      	movs	r3, #2
    f114:	4313      	orrs	r3, r2
    f116:	700b      	strb	r3, [r1, #0]
    f118:	2208      	movs	r2, #8
    f11a:	348c      	adds	r4, #140	; 0x8c
    f11c:	7823      	ldrb	r3, [r4, #0]
    f11e:	4393      	bics	r3, r2
    f120:	7023      	strb	r3, [r4, #0]
    f122:	e7c1      	b.n	f0a8 <LORAWAN_TxHandler+0x30>
    f124:	54e5      	strb	r5, [r4, r3]
    f126:	002a      	movs	r2, r5
    f128:	002b      	movs	r3, r5
    f12a:	0029      	movs	r1, r5
    f12c:	0028      	movs	r0, r5
    f12e:	e7de      	b.n	f0ee <LORAWAN_TxHandler+0x76>
    f130:	0022      	movs	r2, r4
    f132:	2120      	movs	r1, #32
    f134:	328c      	adds	r2, #140	; 0x8c
    f136:	7813      	ldrb	r3, [r2, #0]
    f138:	438b      	bics	r3, r1
    f13a:	7013      	strb	r3, [r2, #0]
    f13c:	4b03      	ldr	r3, [pc, #12]	; (f14c <LORAWAN_TxHandler+0xd4>)
    f13e:	4798      	blx	r3
    f140:	e7ea      	b.n	f118 <LORAWAN_TxHandler+0xa0>
    f142:	46c0      	nop			; (mov r8, r8)
    f144:	200019b0 	.word	0x200019b0
    f148:	00008755 	.word	0x00008755
    f14c:	0000c1e1 	.word	0x0000c1e1
    f150:	00010615 	.word	0x00010615
    f154:	0000bc71 	.word	0x0000bc71
    f158:	0000c249 	.word	0x0000c249
    f15c:	20001ba5 	.word	0x20001ba5
    f160:	0000fd41 	.word	0x0000fd41

0000f164 <LORAWAN_JoinReqHandler>:
    f164:	b530      	push	{r4, r5, lr}
    f166:	b087      	sub	sp, #28
    f168:	466a      	mov	r2, sp
    f16a:	2300      	movs	r3, #0
    f16c:	4c2a      	ldr	r4, [pc, #168]	; (f218 <LORAWAN_JoinReqHandler+0xb4>)
    f16e:	7013      	strb	r3, [r2, #0]
    f170:	0023      	movs	r3, r4
    f172:	33e1      	adds	r3, #225	; 0xe1
    f174:	781b      	ldrb	r3, [r3, #0]
    f176:	7053      	strb	r3, [r2, #1]
    f178:	0023      	movs	r3, r4
    f17a:	33df      	adds	r3, #223	; 0xdf
    f17c:	781b      	ldrb	r3, [r3, #0]
    f17e:	7093      	strb	r3, [r2, #2]
    f180:	0023      	movs	r3, r4
    f182:	33ff      	adds	r3, #255	; 0xff
    f184:	7c5b      	ldrb	r3, [r3, #17]
    f186:	069b      	lsls	r3, r3, #26
    f188:	d511      	bpl.n	f1ae <LORAWAN_JoinReqHandler+0x4a>
    f18a:	0023      	movs	r3, r4
    f18c:	336f      	adds	r3, #111	; 0x6f
    f18e:	781a      	ldrb	r2, [r3, #0]
    f190:	6f23      	ldr	r3, [r4, #112]	; 0x70
    f192:	021b      	lsls	r3, r3, #8
    f194:	4313      	orrs	r3, r2
    f196:	0022      	movs	r2, r4
    f198:	3273      	adds	r2, #115	; 0x73
    f19a:	7811      	ldrb	r1, [r2, #0]
    f19c:	6f62      	ldr	r2, [r4, #116]	; 0x74
    f19e:	0212      	lsls	r2, r2, #8
    f1a0:	430a      	orrs	r2, r1
    f1a2:	4313      	orrs	r3, r2
    f1a4:	d103      	bne.n	f1ae <LORAWAN_JoinReqHandler+0x4a>
    f1a6:	0023      	movs	r3, r4
    f1a8:	2201      	movs	r2, #1
    f1aa:	337b      	adds	r3, #123	; 0x7b
    f1ac:	701a      	strb	r2, [r3, #0]
    f1ae:	aa03      	add	r2, sp, #12
    f1b0:	4669      	mov	r1, sp
    f1b2:	202f      	movs	r0, #47	; 0x2f
    f1b4:	4b19      	ldr	r3, [pc, #100]	; (f21c <LORAWAN_JoinReqHandler+0xb8>)
    f1b6:	4798      	blx	r3
    f1b8:	2808      	cmp	r0, #8
    f1ba:	d004      	beq.n	f1c6 <LORAWAN_JoinReqHandler+0x62>
    f1bc:	4b18      	ldr	r3, [pc, #96]	; (f220 <LORAWAN_JoinReqHandler+0xbc>)
    f1be:	4798      	blx	r3
    f1c0:	2000      	movs	r0, #0
    f1c2:	b007      	add	sp, #28
    f1c4:	bd30      	pop	{r4, r5, pc}
    f1c6:	4b17      	ldr	r3, [pc, #92]	; (f224 <LORAWAN_JoinReqHandler+0xc0>)
    f1c8:	9803      	ldr	r0, [sp, #12]
    f1ca:	9904      	ldr	r1, [sp, #16]
    f1cc:	9a05      	ldr	r2, [sp, #20]
    f1ce:	4798      	blx	r3
    f1d0:	0023      	movs	r3, r4
    f1d2:	33f4      	adds	r3, #244	; 0xf4
    f1d4:	781b      	ldrb	r3, [r3, #0]
    f1d6:	ad01      	add	r5, sp, #4
    f1d8:	2b04      	cmp	r3, #4
    f1da:	d104      	bne.n	f1e6 <LORAWAN_JoinReqHandler+0x82>
    f1dc:	3b03      	subs	r3, #3
    f1de:	702b      	strb	r3, [r5, #0]
    f1e0:	0028      	movs	r0, r5
    f1e2:	4b11      	ldr	r3, [pc, #68]	; (f228 <LORAWAN_JoinReqHandler+0xc4>)
    f1e4:	4798      	blx	r3
    f1e6:	23ef      	movs	r3, #239	; 0xef
    f1e8:	2200      	movs	r2, #0
    f1ea:	005b      	lsls	r3, r3, #1
    f1ec:	54e2      	strb	r2, [r4, r3]
    f1ee:	4b0f      	ldr	r3, [pc, #60]	; (f22c <LORAWAN_JoinReqHandler+0xc8>)
    f1f0:	4798      	blx	r3
    f1f2:	4b0f      	ldr	r3, [pc, #60]	; (f230 <LORAWAN_JoinReqHandler+0xcc>)
    f1f4:	7028      	strb	r0, [r5, #0]
    f1f6:	606b      	str	r3, [r5, #4]
    f1f8:	0028      	movs	r0, r5
    f1fa:	4b0e      	ldr	r3, [pc, #56]	; (f234 <LORAWAN_JoinReqHandler+0xd0>)
    f1fc:	4798      	blx	r3
    f1fe:	2800      	cmp	r0, #0
    f200:	d001      	beq.n	f206 <LORAWAN_JoinReqHandler+0xa2>
    f202:	201b      	movs	r0, #27
    f204:	e7da      	b.n	f1bc <LORAWAN_JoinReqHandler+0x58>
    f206:	220e      	movs	r2, #14
    f208:	347c      	adds	r4, #124	; 0x7c
    f20a:	7823      	ldrb	r3, [r4, #0]
    f20c:	4393      	bics	r3, r2
    f20e:	001a      	movs	r2, r3
    f210:	2302      	movs	r3, #2
    f212:	4313      	orrs	r3, r2
    f214:	7023      	strb	r3, [r4, #0]
    f216:	e7d3      	b.n	f1c0 <LORAWAN_JoinReqHandler+0x5c>
    f218:	200019b0 	.word	0x200019b0
    f21c:	00008755 	.word	0x00008755
    f220:	0000b70d 	.word	0x0000b70d
    f224:	0000bc71 	.word	0x0000bc71
    f228:	00010615 	.word	0x00010615
    f22c:	0000babd 	.word	0x0000babd
    f230:	20001b95 	.word	0x20001b95
    f234:	0000fd41 	.word	0x0000fd41

0000f238 <LORAWAN_RxHandler>:
    f238:	b513      	push	{r0, r1, r4, lr}
    f23a:	4b0c      	ldr	r3, [pc, #48]	; (f26c <LORAWAN_RxHandler+0x34>)
    f23c:	781b      	ldrb	r3, [r3, #0]
    f23e:	2b08      	cmp	r3, #8
    f240:	d011      	beq.n	f266 <LORAWAN_RxHandler+0x2e>
    f242:	2b10      	cmp	r3, #16
    f244:	d001      	beq.n	f24a <LORAWAN_RxHandler+0x12>
    f246:	2b01      	cmp	r3, #1
    f248:	d10b      	bne.n	f262 <LORAWAN_RxHandler+0x2a>
    f24a:	466b      	mov	r3, sp
    f24c:	1c9c      	adds	r4, r3, #2
    f24e:	0021      	movs	r1, r4
    f250:	a801      	add	r0, sp, #4
    f252:	4b07      	ldr	r3, [pc, #28]	; (f270 <LORAWAN_RxHandler+0x38>)
    f254:	4798      	blx	r3
    f256:	9801      	ldr	r0, [sp, #4]
    f258:	2800      	cmp	r0, #0
    f25a:	d002      	beq.n	f262 <LORAWAN_RxHandler+0x2a>
    f25c:	7821      	ldrb	r1, [r4, #0]
    f25e:	4b05      	ldr	r3, [pc, #20]	; (f274 <LORAWAN_RxHandler+0x3c>)
    f260:	4798      	blx	r3
    f262:	2000      	movs	r0, #0
    f264:	bd16      	pop	{r1, r2, r4, pc}
    f266:	4b04      	ldr	r3, [pc, #16]	; (f278 <LORAWAN_RxHandler+0x40>)
    f268:	4798      	blx	r3
    f26a:	e7fa      	b.n	f262 <LORAWAN_RxHandler+0x2a>
    f26c:	20001b94 	.word	0x20001b94
    f270:	0000ff0d 	.word	0x0000ff0d
    f274:	0000d785 	.word	0x0000d785
    f278:	0000d0f5 	.word	0x0000d0f5

0000f27c <LORAWAN_PostTask>:
    f27c:	b510      	push	{r4, lr}
    f27e:	4b08      	ldr	r3, [pc, #32]	; (f2a0 <LORAWAN_PostTask+0x24>)
    f280:	0004      	movs	r4, r0
    f282:	4798      	blx	r3
    f284:	2201      	movs	r2, #1
    f286:	40a2      	lsls	r2, r4
    f288:	4906      	ldr	r1, [pc, #24]	; (f2a4 <LORAWAN_PostTask+0x28>)
    f28a:	780b      	ldrb	r3, [r1, #0]
    f28c:	4313      	orrs	r3, r2
    f28e:	b2db      	uxtb	r3, r3
    f290:	700b      	strb	r3, [r1, #0]
    f292:	4b05      	ldr	r3, [pc, #20]	; (f2a8 <LORAWAN_PostTask+0x2c>)
    f294:	4798      	blx	r3
    f296:	2004      	movs	r0, #4
    f298:	4b04      	ldr	r3, [pc, #16]	; (f2ac <LORAWAN_PostTask+0x30>)
    f29a:	4798      	blx	r3
    f29c:	bd10      	pop	{r4, pc}
    f29e:	46c0      	nop			; (mov r8, r8)
    f2a0:	00003389 	.word	0x00003389
    f2a4:	20000fe4 	.word	0x20000fe4
    f2a8:	00003395 	.word	0x00003395
    f2ac:	00009dc1 	.word	0x00009dc1

0000f2b0 <LORAWAN_TaskHandler>:
    f2b0:	b570      	push	{r4, r5, r6, lr}
    f2b2:	2601      	movs	r6, #1
    f2b4:	4d0e      	ldr	r5, [pc, #56]	; (f2f0 <LORAWAN_TaskHandler+0x40>)
    f2b6:	e015      	b.n	f2e4 <LORAWAN_TaskHandler+0x34>
    f2b8:	2400      	movs	r4, #0
    f2ba:	782b      	ldrb	r3, [r5, #0]
    f2bc:	4123      	asrs	r3, r4
    f2be:	4233      	tst	r3, r6
    f2c0:	d00d      	beq.n	f2de <LORAWAN_TaskHandler+0x2e>
    f2c2:	4b0c      	ldr	r3, [pc, #48]	; (f2f4 <LORAWAN_TaskHandler+0x44>)
    f2c4:	4798      	blx	r3
    f2c6:	0032      	movs	r2, r6
    f2c8:	40a2      	lsls	r2, r4
    f2ca:	782b      	ldrb	r3, [r5, #0]
    f2cc:	00a4      	lsls	r4, r4, #2
    f2ce:	4393      	bics	r3, r2
    f2d0:	702b      	strb	r3, [r5, #0]
    f2d2:	4b09      	ldr	r3, [pc, #36]	; (f2f8 <LORAWAN_TaskHandler+0x48>)
    f2d4:	4798      	blx	r3
    f2d6:	4b09      	ldr	r3, [pc, #36]	; (f2fc <LORAWAN_TaskHandler+0x4c>)
    f2d8:	58e3      	ldr	r3, [r4, r3]
    f2da:	4798      	blx	r3
    f2dc:	e7ea      	b.n	f2b4 <LORAWAN_TaskHandler+0x4>
    f2de:	3401      	adds	r4, #1
    f2e0:	2c03      	cmp	r4, #3
    f2e2:	d1ea      	bne.n	f2ba <LORAWAN_TaskHandler+0xa>
    f2e4:	7828      	ldrb	r0, [r5, #0]
    f2e6:	b2c0      	uxtb	r0, r0
    f2e8:	2800      	cmp	r0, #0
    f2ea:	d1e5      	bne.n	f2b8 <LORAWAN_TaskHandler+0x8>
    f2ec:	bd70      	pop	{r4, r5, r6, pc}
    f2ee:	46c0      	nop			; (mov r8, r8)
    f2f0:	20000fe4 	.word	0x20000fe4
    f2f4:	00003389 	.word	0x00003389
    f2f8:	00003395 	.word	0x00003395
    f2fc:	00019834 	.word	0x00019834

0000f300 <RADIO_GetAttr>:
    f300:	b510      	push	{r4, lr}
    f302:	000b      	movs	r3, r1
    f304:	281f      	cmp	r0, #31
    f306:	d900      	bls.n	f30a <RADIO_GetAttr+0xa>
    f308:	e069      	b.n	f3de <RADIO_GetAttr+0xde>
    f30a:	f001 fd6b 	bl	10de4 <__gnu_thumb1_case_uqi>
    f30e:	1410      	.short	0x1410
    f310:	68201c19 	.word	0x68201c19
    f314:	312e2a27 	.word	0x312e2a27
    f318:	3d3a3734 	.word	0x3d3a3734
    f31c:	46434054 	.word	0x46434054
    f320:	68245149 	.word	0x68245149
    f324:	68686859 	.word	0x68686859
    f328:	5c686817 	.word	0x5c686817
    f32c:	6360      	.short	0x6360
    f32e:	4a2d      	ldr	r2, [pc, #180]	; (f3e4 <RADIO_GetAttr+0xe4>)
    f330:	7e12      	ldrb	r2, [r2, #24]
    f332:	701a      	strb	r2, [r3, #0]
    f334:	e002      	b.n	f33c <RADIO_GetAttr+0x3c>
    f336:	4a2b      	ldr	r2, [pc, #172]	; (f3e4 <RADIO_GetAttr+0xe4>)
    f338:	6812      	ldr	r2, [r2, #0]
    f33a:	601a      	str	r2, [r3, #0]
    f33c:	2000      	movs	r0, #0
    f33e:	bd10      	pop	{r4, pc}
    f340:	4a28      	ldr	r2, [pc, #160]	; (f3e4 <RADIO_GetAttr+0xe4>)
    f342:	6852      	ldr	r2, [r2, #4]
    f344:	e7f9      	b.n	f33a <RADIO_GetAttr+0x3a>
    f346:	4a27      	ldr	r2, [pc, #156]	; (f3e4 <RADIO_GetAttr+0xe4>)
    f348:	8a92      	ldrh	r2, [r2, #20]
    f34a:	801a      	strh	r2, [r3, #0]
    f34c:	e7f6      	b.n	f33c <RADIO_GetAttr+0x3c>
    f34e:	4a25      	ldr	r2, [pc, #148]	; (f3e4 <RADIO_GetAttr+0xe4>)
    f350:	3203      	adds	r2, #3
    f352:	7fd2      	ldrb	r2, [r2, #31]
    f354:	e7ed      	b.n	f332 <RADIO_GetAttr+0x32>
    f356:	4a23      	ldr	r2, [pc, #140]	; (f3e4 <RADIO_GetAttr+0xe4>)
    f358:	3204      	adds	r2, #4
    f35a:	e7fa      	b.n	f352 <RADIO_GetAttr+0x52>
    f35c:	4a21      	ldr	r2, [pc, #132]	; (f3e4 <RADIO_GetAttr+0xe4>)
    f35e:	3206      	adds	r2, #6
    f360:	e7f7      	b.n	f352 <RADIO_GetAttr+0x52>
    f362:	4a20      	ldr	r2, [pc, #128]	; (f3e4 <RADIO_GetAttr+0xe4>)
    f364:	3236      	adds	r2, #54	; 0x36
    f366:	7812      	ldrb	r2, [r2, #0]
    f368:	e7e3      	b.n	f332 <RADIO_GetAttr+0x32>
    f36a:	4a1e      	ldr	r2, [pc, #120]	; (f3e4 <RADIO_GetAttr+0xe4>)
    f36c:	3205      	adds	r2, #5
    f36e:	e7f0      	b.n	f352 <RADIO_GetAttr+0x52>
    f370:	4a1c      	ldr	r2, [pc, #112]	; (f3e4 <RADIO_GetAttr+0xe4>)
    f372:	3234      	adds	r2, #52	; 0x34
    f374:	e7f7      	b.n	f366 <RADIO_GetAttr+0x66>
    f376:	4a1b      	ldr	r2, [pc, #108]	; (f3e4 <RADIO_GetAttr+0xe4>)
    f378:	8ad2      	ldrh	r2, [r2, #22]
    f37a:	e7e6      	b.n	f34a <RADIO_GetAttr+0x4a>
    f37c:	4a19      	ldr	r2, [pc, #100]	; (f3e4 <RADIO_GetAttr+0xe4>)
    f37e:	3233      	adds	r2, #51	; 0x33
    f380:	e7f1      	b.n	f366 <RADIO_GetAttr+0x66>
    f382:	4a18      	ldr	r2, [pc, #96]	; (f3e4 <RADIO_GetAttr+0xe4>)
    f384:	68d2      	ldr	r2, [r2, #12]
    f386:	e7d8      	b.n	f33a <RADIO_GetAttr+0x3a>
    f388:	4a16      	ldr	r2, [pc, #88]	; (f3e4 <RADIO_GetAttr+0xe4>)
    f38a:	6892      	ldr	r2, [r2, #8]
    f38c:	e7d5      	b.n	f33a <RADIO_GetAttr+0x3a>
    f38e:	4a15      	ldr	r2, [pc, #84]	; (f3e4 <RADIO_GetAttr+0xe4>)
    f390:	3237      	adds	r2, #55	; 0x37
    f392:	e7e8      	b.n	f366 <RADIO_GetAttr+0x66>
    f394:	4a13      	ldr	r2, [pc, #76]	; (f3e4 <RADIO_GetAttr+0xe4>)
    f396:	3238      	adds	r2, #56	; 0x38
    f398:	e7e5      	b.n	f366 <RADIO_GetAttr+0x66>
    f39a:	4a12      	ldr	r2, [pc, #72]	; (f3e4 <RADIO_GetAttr+0xe4>)
    f39c:	3239      	adds	r2, #57	; 0x39
    f39e:	e7e2      	b.n	f366 <RADIO_GetAttr+0x66>
    f3a0:	4a10      	ldr	r2, [pc, #64]	; (f3e4 <RADIO_GetAttr+0xe4>)
    f3a2:	4911      	ldr	r1, [pc, #68]	; (f3e8 <RADIO_GetAttr+0xe8>)
    f3a4:	3202      	adds	r2, #2
    f3a6:	7fd2      	ldrb	r2, [r2, #31]
    f3a8:	0018      	movs	r0, r3
    f3aa:	4b10      	ldr	r3, [pc, #64]	; (f3ec <RADIO_GetAttr+0xec>)
    f3ac:	4798      	blx	r3
    f3ae:	e7c5      	b.n	f33c <RADIO_GetAttr+0x3c>
    f3b0:	4a0c      	ldr	r2, [pc, #48]	; (f3e4 <RADIO_GetAttr+0xe4>)
    f3b2:	3202      	adds	r2, #2
    f3b4:	e7cd      	b.n	f352 <RADIO_GetAttr+0x52>
    f3b6:	4a0b      	ldr	r2, [pc, #44]	; (f3e4 <RADIO_GetAttr+0xe4>)
    f3b8:	3232      	adds	r2, #50	; 0x32
    f3ba:	7812      	ldrb	r2, [r2, #0]
    f3bc:	b252      	sxtb	r2, r2
    f3be:	e7b8      	b.n	f332 <RADIO_GetAttr+0x32>
    f3c0:	4a08      	ldr	r2, [pc, #32]	; (f3e4 <RADIO_GetAttr+0xe4>)
    f3c2:	3235      	adds	r2, #53	; 0x35
    f3c4:	e7cf      	b.n	f366 <RADIO_GetAttr+0x66>
    f3c6:	4907      	ldr	r1, [pc, #28]	; (f3e4 <RADIO_GetAttr+0xe4>)
    f3c8:	2206      	movs	r2, #6
    f3ca:	313c      	adds	r1, #60	; 0x3c
    f3cc:	e7ec      	b.n	f3a8 <RADIO_GetAttr+0xa8>
    f3ce:	4a05      	ldr	r2, [pc, #20]	; (f3e4 <RADIO_GetAttr+0xe4>)
    f3d0:	3254      	adds	r2, #84	; 0x54
    f3d2:	e7c8      	b.n	f366 <RADIO_GetAttr+0x66>
    f3d4:	4a03      	ldr	r2, [pc, #12]	; (f3e4 <RADIO_GetAttr+0xe4>)
    f3d6:	3256      	adds	r2, #86	; 0x56
    f3d8:	2100      	movs	r1, #0
    f3da:	5e52      	ldrsh	r2, [r2, r1]
    f3dc:	e7b5      	b.n	f34a <RADIO_GetAttr+0x4a>
    f3de:	2005      	movs	r0, #5
    f3e0:	e7ad      	b.n	f33e <RADIO_GetAttr+0x3e>
    f3e2:	46c0      	nop			; (mov r8, r8)
    f3e4:	200017c8 	.word	0x200017c8
    f3e8:	200017e1 	.word	0x200017e1
    f3ec:	00013e5d 	.word	0x00013e5d

0000f3f0 <RADIO_SetAttr>:
    f3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f3f2:	4b77      	ldr	r3, [pc, #476]	; (f5d0 <RADIO_SetAttr+0x1e0>)
    f3f4:	b085      	sub	sp, #20
    f3f6:	0006      	movs	r6, r0
    f3f8:	000d      	movs	r5, r1
    f3fa:	4798      	blx	r3
    f3fc:	2404      	movs	r4, #4
    f3fe:	2801      	cmp	r0, #1
    f400:	d11a      	bne.n	f438 <RADIO_SetAttr+0x48>
    f402:	2e1d      	cmp	r6, #29
    f404:	d900      	bls.n	f408 <RADIO_SetAttr+0x18>
    f406:	e0e0      	b.n	f5ca <RADIO_SetAttr+0x1da>
    f408:	0030      	movs	r0, r6
    f40a:	f001 fceb 	bl	10de4 <__gnu_thumb1_case_uqi>
    f40e:	514d      	.short	0x514d
    f410:	de6d6965 	.word	0xde6d6965
    f414:	8f8b8179 	.word	0x8f8b8179
    f418:	a7a49b97 	.word	0xa7a49b97
    f41c:	bcb3abde 	.word	0xbcb3abde
    f420:	de72cdc5 	.word	0xde72cdc5
    f424:	dededed5 	.word	0xdededed5
    f428:	18dede0f 	.word	0x18dede0f
    f42c:	2403      	movs	r4, #3
    f42e:	2d00      	cmp	r5, #0
    f430:	d002      	beq.n	f438 <RADIO_SetAttr+0x48>
    f432:	4b68      	ldr	r3, [pc, #416]	; (f5d4 <RADIO_SetAttr+0x1e4>)
    f434:	611d      	str	r5, [r3, #16]
    f436:	2400      	movs	r4, #0
    f438:	0020      	movs	r0, r4
    f43a:	b005      	add	sp, #20
    f43c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f43e:	796e      	ldrb	r6, [r5, #5]
    f440:	2e00      	cmp	r6, #0
    f442:	d109      	bne.n	f458 <RADIO_SetAttr+0x68>
    f444:	4b63      	ldr	r3, [pc, #396]	; (f5d4 <RADIO_SetAttr+0x1e4>)
    f446:	001a      	movs	r2, r3
    f448:	649e      	str	r6, [r3, #72]	; 0x48
    f44a:	879e      	strh	r6, [r3, #60]	; 0x3c
    f44c:	87de      	strh	r6, [r3, #62]	; 0x3e
    f44e:	3240      	adds	r2, #64	; 0x40
    f450:	3341      	adds	r3, #65	; 0x41
    f452:	7016      	strb	r6, [r2, #0]
    f454:	701e      	strb	r6, [r3, #0]
    f456:	e7ee      	b.n	f436 <RADIO_SetAttr+0x46>
    f458:	882b      	ldrh	r3, [r5, #0]
    f45a:	2403      	movs	r4, #3
    f45c:	9301      	str	r3, [sp, #4]
    f45e:	2b00      	cmp	r3, #0
    f460:	d0ea      	beq.n	f438 <RADIO_SetAttr+0x48>
    f462:	792f      	ldrb	r7, [r5, #4]
    f464:	2f00      	cmp	r7, #0
    f466:	d0e7      	beq.n	f438 <RADIO_SetAttr+0x48>
    f468:	20fa      	movs	r0, #250	; 0xfa
    f46a:	0080      	lsls	r0, r0, #2
    f46c:	0039      	movs	r1, r7
    f46e:	4358      	muls	r0, r3
    f470:	4b59      	ldr	r3, [pc, #356]	; (f5d8 <RADIO_SetAttr+0x1e8>)
    f472:	4798      	blx	r3
    f474:	4b59      	ldr	r3, [pc, #356]	; (f5dc <RADIO_SetAttr+0x1ec>)
    f476:	4798      	blx	r3
    f478:	4959      	ldr	r1, [pc, #356]	; (f5e0 <RADIO_SetAttr+0x1f0>)
    f47a:	9002      	str	r0, [sp, #8]
    f47c:	4b59      	ldr	r3, [pc, #356]	; (f5e4 <RADIO_SetAttr+0x1f4>)
    f47e:	4798      	blx	r3
    f480:	9003      	str	r0, [sp, #12]
    f482:	2800      	cmp	r0, #0
    f484:	d1d8      	bne.n	f438 <RADIO_SetAttr+0x48>
    f486:	2302      	movs	r3, #2
    f488:	5eed      	ldrsh	r5, [r5, r3]
    f48a:	9802      	ldr	r0, [sp, #8]
    f48c:	4b56      	ldr	r3, [pc, #344]	; (f5e8 <RADIO_SetAttr+0x1f8>)
    f48e:	4798      	blx	r3
    f490:	466b      	mov	r3, sp
    f492:	4c50      	ldr	r4, [pc, #320]	; (f5d4 <RADIO_SetAttr+0x1e4>)
    f494:	889b      	ldrh	r3, [r3, #4]
    f496:	64a0      	str	r0, [r4, #72]	; 0x48
    f498:	87a3      	strh	r3, [r4, #60]	; 0x3c
    f49a:	0023      	movs	r3, r4
    f49c:	87e5      	strh	r5, [r4, #62]	; 0x3e
    f49e:	3340      	adds	r3, #64	; 0x40
    f4a0:	3441      	adds	r4, #65	; 0x41
    f4a2:	701f      	strb	r7, [r3, #0]
    f4a4:	7026      	strb	r6, [r4, #0]
    f4a6:	e7c6      	b.n	f436 <RADIO_SetAttr+0x46>
    f4a8:	782a      	ldrb	r2, [r5, #0]
    f4aa:	4b4a      	ldr	r3, [pc, #296]	; (f5d4 <RADIO_SetAttr+0x1e4>)
    f4ac:	761a      	strb	r2, [r3, #24]
    f4ae:	e7c2      	b.n	f436 <RADIO_SetAttr+0x46>
    f4b0:	4a4e      	ldr	r2, [pc, #312]	; (f5ec <RADIO_SetAttr+0x1fc>)
    f4b2:	682b      	ldr	r3, [r5, #0]
    f4b4:	1899      	adds	r1, r3, r2
    f4b6:	4a4e      	ldr	r2, [pc, #312]	; (f5f0 <RADIO_SetAttr+0x200>)
    f4b8:	4291      	cmp	r1, r2
    f4ba:	d90a      	bls.n	f4d2 <RADIO_SetAttr+0xe2>
    f4bc:	4a4d      	ldr	r2, [pc, #308]	; (f5f4 <RADIO_SetAttr+0x204>)
    f4be:	494e      	ldr	r1, [pc, #312]	; (f5f8 <RADIO_SetAttr+0x208>)
    f4c0:	189a      	adds	r2, r3, r2
    f4c2:	428a      	cmp	r2, r1
    f4c4:	d905      	bls.n	f4d2 <RADIO_SetAttr+0xe2>
    f4c6:	4a4d      	ldr	r2, [pc, #308]	; (f5fc <RADIO_SetAttr+0x20c>)
    f4c8:	494d      	ldr	r1, [pc, #308]	; (f600 <RADIO_SetAttr+0x210>)
    f4ca:	189a      	adds	r2, r3, r2
    f4cc:	2405      	movs	r4, #5
    f4ce:	428a      	cmp	r2, r1
    f4d0:	d8b2      	bhi.n	f438 <RADIO_SetAttr+0x48>
    f4d2:	4a40      	ldr	r2, [pc, #256]	; (f5d4 <RADIO_SetAttr+0x1e4>)
    f4d4:	6013      	str	r3, [r2, #0]
    f4d6:	e7ae      	b.n	f436 <RADIO_SetAttr+0x46>
    f4d8:	682a      	ldr	r2, [r5, #0]
    f4da:	4b3e      	ldr	r3, [pc, #248]	; (f5d4 <RADIO_SetAttr+0x1e4>)
    f4dc:	605a      	str	r2, [r3, #4]
    f4de:	e7aa      	b.n	f436 <RADIO_SetAttr+0x46>
    f4e0:	882a      	ldrh	r2, [r5, #0]
    f4e2:	4b3c      	ldr	r3, [pc, #240]	; (f5d4 <RADIO_SetAttr+0x1e4>)
    f4e4:	829a      	strh	r2, [r3, #20]
    f4e6:	e7a6      	b.n	f436 <RADIO_SetAttr+0x46>
    f4e8:	4b3a      	ldr	r3, [pc, #232]	; (f5d4 <RADIO_SetAttr+0x1e4>)
    f4ea:	782a      	ldrb	r2, [r5, #0]
    f4ec:	3303      	adds	r3, #3
    f4ee:	77da      	strb	r2, [r3, #31]
    f4f0:	e7a1      	b.n	f436 <RADIO_SetAttr+0x46>
    f4f2:	782a      	ldrb	r2, [r5, #0]
    f4f4:	2405      	movs	r4, #5
    f4f6:	2a01      	cmp	r2, #1
    f4f8:	d89e      	bhi.n	f438 <RADIO_SetAttr+0x48>
    f4fa:	4b36      	ldr	r3, [pc, #216]	; (f5d4 <RADIO_SetAttr+0x1e4>)
    f4fc:	3304      	adds	r3, #4
    f4fe:	e7f6      	b.n	f4ee <RADIO_SetAttr+0xfe>
    f500:	782a      	ldrb	r2, [r5, #0]
    f502:	2405      	movs	r4, #5
    f504:	2a01      	cmp	r2, #1
    f506:	d900      	bls.n	f50a <RADIO_SetAttr+0x11a>
    f508:	e796      	b.n	f438 <RADIO_SetAttr+0x48>
    f50a:	4b32      	ldr	r3, [pc, #200]	; (f5d4 <RADIO_SetAttr+0x1e4>)
    f50c:	3306      	adds	r3, #6
    f50e:	e7ee      	b.n	f4ee <RADIO_SetAttr+0xfe>
    f510:	782a      	ldrb	r2, [r5, #0]
    f512:	2405      	movs	r4, #5
    f514:	1fd3      	subs	r3, r2, #7
    f516:	2b02      	cmp	r3, #2
    f518:	d900      	bls.n	f51c <RADIO_SetAttr+0x12c>
    f51a:	e78d      	b.n	f438 <RADIO_SetAttr+0x48>
    f51c:	4b2d      	ldr	r3, [pc, #180]	; (f5d4 <RADIO_SetAttr+0x1e4>)
    f51e:	3336      	adds	r3, #54	; 0x36
    f520:	701a      	strb	r2, [r3, #0]
    f522:	e788      	b.n	f436 <RADIO_SetAttr+0x46>
    f524:	4b2b      	ldr	r3, [pc, #172]	; (f5d4 <RADIO_SetAttr+0x1e4>)
    f526:	782a      	ldrb	r2, [r5, #0]
    f528:	3305      	adds	r3, #5
    f52a:	e7e0      	b.n	f4ee <RADIO_SetAttr+0xfe>
    f52c:	782a      	ldrb	r2, [r5, #0]
    f52e:	2405      	movs	r4, #5
    f530:	2a01      	cmp	r2, #1
    f532:	d900      	bls.n	f536 <RADIO_SetAttr+0x146>
    f534:	e780      	b.n	f438 <RADIO_SetAttr+0x48>
    f536:	4b27      	ldr	r3, [pc, #156]	; (f5d4 <RADIO_SetAttr+0x1e4>)
    f538:	3334      	adds	r3, #52	; 0x34
    f53a:	e7f1      	b.n	f520 <RADIO_SetAttr+0x130>
    f53c:	882a      	ldrh	r2, [r5, #0]
    f53e:	4b25      	ldr	r3, [pc, #148]	; (f5d4 <RADIO_SetAttr+0x1e4>)
    f540:	82da      	strh	r2, [r3, #22]
    f542:	e778      	b.n	f436 <RADIO_SetAttr+0x46>
    f544:	782a      	ldrb	r2, [r5, #0]
    f546:	2405      	movs	r4, #5
    f548:	1e53      	subs	r3, r2, #1
    f54a:	2b03      	cmp	r3, #3
    f54c:	d900      	bls.n	f550 <RADIO_SetAttr+0x160>
    f54e:	e773      	b.n	f438 <RADIO_SetAttr+0x48>
    f550:	4b20      	ldr	r3, [pc, #128]	; (f5d4 <RADIO_SetAttr+0x1e4>)
    f552:	3333      	adds	r3, #51	; 0x33
    f554:	e7e4      	b.n	f520 <RADIO_SetAttr+0x130>
    f556:	4b1f      	ldr	r3, [pc, #124]	; (f5d4 <RADIO_SetAttr+0x1e4>)
    f558:	682a      	ldr	r2, [r5, #0]
    f55a:	60da      	str	r2, [r3, #12]
    f55c:	682a      	ldr	r2, [r5, #0]
    f55e:	4b1d      	ldr	r3, [pc, #116]	; (f5d4 <RADIO_SetAttr+0x1e4>)
    f560:	609a      	str	r2, [r3, #8]
    f562:	e768      	b.n	f436 <RADIO_SetAttr+0x46>
    f564:	782a      	ldrb	r2, [r5, #0]
    f566:	2405      	movs	r4, #5
    f568:	2a03      	cmp	r2, #3
    f56a:	d900      	bls.n	f56e <RADIO_SetAttr+0x17e>
    f56c:	e764      	b.n	f438 <RADIO_SetAttr+0x48>
    f56e:	4b19      	ldr	r3, [pc, #100]	; (f5d4 <RADIO_SetAttr+0x1e4>)
    f570:	3337      	adds	r3, #55	; 0x37
    f572:	e7d5      	b.n	f520 <RADIO_SetAttr+0x130>
    f574:	782a      	ldrb	r2, [r5, #0]
    f576:	2405      	movs	r4, #5
    f578:	1e53      	subs	r3, r2, #1
    f57a:	2b16      	cmp	r3, #22
    f57c:	d900      	bls.n	f580 <RADIO_SetAttr+0x190>
    f57e:	e75b      	b.n	f438 <RADIO_SetAttr+0x48>
    f580:	4b14      	ldr	r3, [pc, #80]	; (f5d4 <RADIO_SetAttr+0x1e4>)
    f582:	3338      	adds	r3, #56	; 0x38
    f584:	e7cc      	b.n	f520 <RADIO_SetAttr+0x130>
    f586:	782a      	ldrb	r2, [r5, #0]
    f588:	2405      	movs	r4, #5
    f58a:	1e53      	subs	r3, r2, #1
    f58c:	2b16      	cmp	r3, #22
    f58e:	d900      	bls.n	f592 <RADIO_SetAttr+0x1a2>
    f590:	e752      	b.n	f438 <RADIO_SetAttr+0x48>
    f592:	4b10      	ldr	r3, [pc, #64]	; (f5d4 <RADIO_SetAttr+0x1e4>)
    f594:	3339      	adds	r3, #57	; 0x39
    f596:	e7c3      	b.n	f520 <RADIO_SetAttr+0x130>
    f598:	4b0e      	ldr	r3, [pc, #56]	; (f5d4 <RADIO_SetAttr+0x1e4>)
    f59a:	0029      	movs	r1, r5
    f59c:	3302      	adds	r3, #2
    f59e:	7fda      	ldrb	r2, [r3, #31]
    f5a0:	4818      	ldr	r0, [pc, #96]	; (f604 <RADIO_SetAttr+0x214>)
    f5a2:	4b19      	ldr	r3, [pc, #100]	; (f608 <RADIO_SetAttr+0x218>)
    f5a4:	4798      	blx	r3
    f5a6:	e746      	b.n	f436 <RADIO_SetAttr+0x46>
    f5a8:	782b      	ldrb	r3, [r5, #0]
    f5aa:	1c1a      	adds	r2, r3, #0
    f5ac:	2b08      	cmp	r3, #8
    f5ae:	d900      	bls.n	f5b2 <RADIO_SetAttr+0x1c2>
    f5b0:	2208      	movs	r2, #8
    f5b2:	4b08      	ldr	r3, [pc, #32]	; (f5d4 <RADIO_SetAttr+0x1e4>)
    f5b4:	3302      	adds	r3, #2
    f5b6:	e79a      	b.n	f4ee <RADIO_SetAttr+0xfe>
    f5b8:	2405      	movs	r4, #5
    f5ba:	782a      	ldrb	r2, [r5, #0]
    f5bc:	1fd3      	subs	r3, r2, #7
    f5be:	42a3      	cmp	r3, r4
    f5c0:	d900      	bls.n	f5c4 <RADIO_SetAttr+0x1d4>
    f5c2:	e739      	b.n	f438 <RADIO_SetAttr+0x48>
    f5c4:	4b03      	ldr	r3, [pc, #12]	; (f5d4 <RADIO_SetAttr+0x1e4>)
    f5c6:	3335      	adds	r3, #53	; 0x35
    f5c8:	e7aa      	b.n	f520 <RADIO_SetAttr+0x130>
    f5ca:	2405      	movs	r4, #5
    f5cc:	e734      	b.n	f438 <RADIO_SetAttr+0x48>
    f5ce:	46c0      	nop			; (mov r8, r8)
    f5d0:	0000fd25 	.word	0x0000fd25
    f5d4:	200017c8 	.word	0x200017c8
    f5d8:	00010f21 	.word	0x00010f21
    f5dc:	000120ad 	.word	0x000120ad
    f5e0:	43fa0000 	.word	0x43fa0000
    f5e4:	0001111d 	.word	0x0001111d
    f5e8:	00011201 	.word	0x00011201
    f5ec:	f7d58bc0 	.word	0xf7d58bc0
    f5f0:	0243d580 	.word	0x0243d580
    f5f4:	e78fe580 	.word	0xe78fe580
    f5f8:	06dac2c0 	.word	0x06dac2c0
    f5fc:	cc9eec80 	.word	0xcc9eec80
    f600:	096ae380 	.word	0x096ae380
    f604:	200017e1 	.word	0x200017e1
    f608:	00013e5d 	.word	0x00013e5d

0000f60c <RADIO_Init>:
    f60c:	b510      	push	{r4, lr}
    f60e:	4b0c      	ldr	r3, [pc, #48]	; (f640 <RADIO_Init+0x34>)
    f610:	4798      	blx	r3
    f612:	4b0c      	ldr	r3, [pc, #48]	; (f644 <RADIO_Init+0x38>)
    f614:	201f      	movs	r0, #31
    f616:	4798      	blx	r3
    f618:	4c0b      	ldr	r4, [pc, #44]	; (f648 <RADIO_Init+0x3c>)
    f61a:	490c      	ldr	r1, [pc, #48]	; (f64c <RADIO_Init+0x40>)
    f61c:	2001      	movs	r0, #1
    f61e:	47a0      	blx	r4
    f620:	490b      	ldr	r1, [pc, #44]	; (f650 <RADIO_Init+0x44>)
    f622:	2002      	movs	r0, #2
    f624:	47a0      	blx	r4
    f626:	490b      	ldr	r1, [pc, #44]	; (f654 <RADIO_Init+0x48>)
    f628:	2004      	movs	r0, #4
    f62a:	47a0      	blx	r4
    f62c:	490a      	ldr	r1, [pc, #40]	; (f658 <RADIO_Init+0x4c>)
    f62e:	2008      	movs	r0, #8
    f630:	47a0      	blx	r4
    f632:	490a      	ldr	r1, [pc, #40]	; (f65c <RADIO_Init+0x50>)
    f634:	2010      	movs	r0, #16
    f636:	47a0      	blx	r4
    f638:	4909      	ldr	r1, [pc, #36]	; (f660 <RADIO_Init+0x54>)
    f63a:	2020      	movs	r0, #32
    f63c:	47a0      	blx	r4
    f63e:	bd10      	pop	{r4, pc}
    f640:	00010421 	.word	0x00010421
    f644:	0000fd31 	.word	0x0000fd31
    f648:	000031e5 	.word	0x000031e5
    f64c:	0000fabd 	.word	0x0000fabd
    f650:	0000fb35 	.word	0x0000fb35
    f654:	0000fba5 	.word	0x0000fba5
    f658:	0000fbf5 	.word	0x0000fbf5
    f65c:	0000fc1d 	.word	0x0000fc1d
    f660:	0000fc45 	.word	0x0000fc45

0000f664 <Radio_WriteFrequency>:
    f664:	b570      	push	{r4, r5, r6, lr}
    f666:	490d      	ldr	r1, [pc, #52]	; (f69c <Radio_WriteFrequency+0x38>)
    f668:	4d0d      	ldr	r5, [pc, #52]	; (f6a0 <Radio_WriteFrequency+0x3c>)
    f66a:	0006      	movs	r6, r0
    f66c:	47a8      	blx	r5
    f66e:	4b0d      	ldr	r3, [pc, #52]	; (f6a4 <Radio_WriteFrequency+0x40>)
    f670:	0004      	movs	r4, r0
    f672:	490a      	ldr	r1, [pc, #40]	; (f69c <Radio_WriteFrequency+0x38>)
    f674:	0030      	movs	r0, r6
    f676:	4798      	blx	r3
    f678:	0208      	lsls	r0, r1, #8
    f67a:	4908      	ldr	r1, [pc, #32]	; (f69c <Radio_WriteFrequency+0x38>)
    f67c:	47a8      	blx	r5
    f67e:	0224      	lsls	r4, r4, #8
    f680:	1904      	adds	r4, r0, r4
    f682:	0c21      	lsrs	r1, r4, #16
    f684:	4d08      	ldr	r5, [pc, #32]	; (f6a8 <Radio_WriteFrequency+0x44>)
    f686:	b2c9      	uxtb	r1, r1
    f688:	2006      	movs	r0, #6
    f68a:	47a8      	blx	r5
    f68c:	0a21      	lsrs	r1, r4, #8
    f68e:	b2c9      	uxtb	r1, r1
    f690:	2007      	movs	r0, #7
    f692:	47a8      	blx	r5
    f694:	b2e1      	uxtb	r1, r4
    f696:	2008      	movs	r0, #8
    f698:	47a8      	blx	r5
    f69a:	bd70      	pop	{r4, r5, r6, pc}
    f69c:	00003d09 	.word	0x00003d09
    f6a0:	00010e0d 	.word	0x00010e0d
    f6a4:	00010f19 	.word	0x00010f19
    f6a8:	00003111 	.word	0x00003111

0000f6ac <Radio_WriteConfiguration>:
    f6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6ae:	4cb0      	ldr	r4, [pc, #704]	; (f970 <Radio_WriteConfiguration+0x2c4>)
    f6b0:	2200      	movs	r2, #0
    f6b2:	0023      	movs	r3, r4
    f6b4:	b085      	sub	sp, #20
    f6b6:	9002      	str	r0, [sp, #8]
    f6b8:	3334      	adds	r3, #52	; 0x34
    f6ba:	0010      	movs	r0, r2
    f6bc:	7819      	ldrb	r1, [r3, #0]
    f6be:	4bad      	ldr	r3, [pc, #692]	; (f974 <Radio_WriteConfiguration+0x2c8>)
    f6c0:	4798      	blx	r3
    f6c2:	4bad      	ldr	r3, [pc, #692]	; (f978 <Radio_WriteConfiguration+0x2cc>)
    f6c4:	6820      	ldr	r0, [r4, #0]
    f6c6:	4798      	blx	r3
    f6c8:	1ce3      	adds	r3, r4, #3
    f6ca:	1d62      	adds	r2, r4, #5
    f6cc:	7fdb      	ldrb	r3, [r3, #31]
    f6ce:	7fd2      	ldrb	r2, [r2, #31]
    f6d0:	b25b      	sxtb	r3, r3
    f6d2:	4eaa      	ldr	r6, [pc, #680]	; (f97c <Radio_WriteConfiguration+0x2d0>)
    f6d4:	4daa      	ldr	r5, [pc, #680]	; (f980 <Radio_WriteConfiguration+0x2d4>)
    f6d6:	2a00      	cmp	r2, #0
    f6d8:	d000      	beq.n	f6dc <Radio_WriteConfiguration+0x30>
    f6da:	e0fc      	b.n	f8d6 <Radio_WriteConfiguration+0x22a>
    f6dc:	1c1f      	adds	r7, r3, #0
    f6de:	2b0f      	cmp	r3, #15
    f6e0:	dc00      	bgt.n	f6e4 <Radio_WriteConfiguration+0x38>
    f6e2:	e0ec      	b.n	f8be <Radio_WriteConfiguration+0x212>
    f6e4:	270f      	movs	r7, #15
    f6e6:	b27b      	sxtb	r3, r7
    f6e8:	204d      	movs	r0, #77	; 0x4d
    f6ea:	9301      	str	r3, [sp, #4]
    f6ec:	47b0      	blx	r6
    f6ee:	21f8      	movs	r1, #248	; 0xf8
    f6f0:	4008      	ands	r0, r1
    f6f2:	39f4      	subs	r1, #244	; 0xf4
    f6f4:	4301      	orrs	r1, r0
    f6f6:	204d      	movs	r0, #77	; 0x4d
    f6f8:	47a8      	blx	r5
    f6fa:	b27b      	sxtb	r3, r7
    f6fc:	2b00      	cmp	r3, #0
    f6fe:	db00      	blt.n	f702 <Radio_WriteConfiguration+0x56>
    f700:	e0e4      	b.n	f8cc <Radio_WriteConfiguration+0x220>
    f702:	3703      	adds	r7, #3
    f704:	b2f9      	uxtb	r1, r7
    f706:	2720      	movs	r7, #32
    f708:	4339      	orrs	r1, r7
    f70a:	2009      	movs	r0, #9
    f70c:	47a8      	blx	r5
    f70e:	0023      	movs	r3, r4
    f710:	3334      	adds	r3, #52	; 0x34
    f712:	781f      	ldrb	r7, [r3, #0]
    f714:	2f01      	cmp	r7, #1
    f716:	d000      	beq.n	f71a <Radio_WriteConfiguration+0x6e>
    f718:	e144      	b.n	f9a4 <Radio_WriteConfiguration+0x2f8>
    f71a:	7e21      	ldrb	r1, [r4, #24]
    f71c:	2039      	movs	r0, #57	; 0x39
    f71e:	47a8      	blx	r5
    f720:	4b98      	ldr	r3, [pc, #608]	; (f984 <Radio_WriteConfiguration+0x2d8>)
    f722:	201d      	movs	r0, #29
    f724:	7819      	ldrb	r1, [r3, #0]
    f726:	0023      	movs	r3, r4
    f728:	3333      	adds	r3, #51	; 0x33
    f72a:	781b      	ldrb	r3, [r3, #0]
    f72c:	0109      	lsls	r1, r1, #4
    f72e:	005b      	lsls	r3, r3, #1
    f730:	4319      	orrs	r1, r3
    f732:	1de3      	adds	r3, r4, #7
    f734:	7fdb      	ldrb	r3, [r3, #31]
    f736:	401f      	ands	r7, r3
    f738:	4339      	orrs	r1, r7
    f73a:	b2c9      	uxtb	r1, r1
    f73c:	47a8      	blx	r5
    f73e:	1d23      	adds	r3, r4, #4
    f740:	7fd9      	ldrb	r1, [r3, #31]
    f742:	2304      	movs	r3, #4
    f744:	0089      	lsls	r1, r1, #2
    f746:	4019      	ands	r1, r3
    f748:	0023      	movs	r3, r4
    f74a:	3335      	adds	r3, #53	; 0x35
    f74c:	781b      	ldrb	r3, [r3, #0]
    f74e:	201e      	movs	r0, #30
    f750:	011b      	lsls	r3, r3, #4
    f752:	4319      	orrs	r1, r3
    f754:	9b02      	ldr	r3, [sp, #8]
    f756:	059b      	lsls	r3, r3, #22
    f758:	0f9b      	lsrs	r3, r3, #30
    f75a:	4319      	orrs	r1, r3
    f75c:	b2c9      	uxtb	r1, r1
    f75e:	47a8      	blx	r5
    f760:	2300      	movs	r3, #0
    f762:	8ae1      	ldrh	r1, [r4, #22]
    f764:	4299      	cmp	r1, r3
    f766:	d011      	beq.n	f78c <Radio_WriteConfiguration+0xe0>
    f768:	4a86      	ldr	r2, [pc, #536]	; (f984 <Radio_WriteConfiguration+0x2d8>)
    f76a:	7812      	ldrb	r2, [r2, #0]
    f76c:	2a08      	cmp	r2, #8
    f76e:	d100      	bne.n	f772 <Radio_WriteConfiguration+0xc6>
    f770:	e0e4      	b.n	f93c <Radio_WriteConfiguration+0x290>
    f772:	2a09      	cmp	r2, #9
    f774:	d100      	bne.n	f778 <Radio_WriteConfiguration+0xcc>
    f776:	e0e3      	b.n	f940 <Radio_WriteConfiguration+0x294>
    f778:	2a07      	cmp	r2, #7
    f77a:	d000      	beq.n	f77e <Radio_WriteConfiguration+0xd2>
    f77c:	e0e3      	b.n	f946 <Radio_WriteConfiguration+0x29a>
    f77e:	337d      	adds	r3, #125	; 0x7d
    f780:	4359      	muls	r1, r3
    f782:	0023      	movs	r3, r4
    f784:	3335      	adds	r3, #53	; 0x35
    f786:	781b      	ldrb	r3, [r3, #0]
    f788:	40d9      	lsrs	r1, r3
    f78a:	000b      	movs	r3, r1
    f78c:	b2d9      	uxtb	r1, r3
    f78e:	2024      	movs	r0, #36	; 0x24
    f790:	4d7b      	ldr	r5, [pc, #492]	; (f980 <Radio_WriteConfiguration+0x2d4>)
    f792:	47a8      	blx	r5
    f794:	466b      	mov	r3, sp
    f796:	201f      	movs	r0, #31
    f798:	7a19      	ldrb	r1, [r3, #8]
    f79a:	47a8      	blx	r5
    f79c:	2026      	movs	r0, #38	; 0x26
    f79e:	47b0      	blx	r6
    f7a0:	0023      	movs	r3, r4
    f7a2:	3335      	adds	r3, #53	; 0x35
    f7a4:	781b      	ldrb	r3, [r3, #0]
    f7a6:	2b0c      	cmp	r3, #12
    f7a8:	d105      	bne.n	f7b6 <Radio_WriteConfiguration+0x10a>
    f7aa:	0023      	movs	r3, r4
    f7ac:	3336      	adds	r3, #54	; 0x36
    f7ae:	781b      	ldrb	r3, [r3, #0]
    f7b0:	3b07      	subs	r3, #7
    f7b2:	2b01      	cmp	r3, #1
    f7b4:	d906      	bls.n	f7c4 <Radio_WriteConfiguration+0x118>
    f7b6:	6b62      	ldr	r2, [r4, #52]	; 0x34
    f7b8:	4b73      	ldr	r3, [pc, #460]	; (f988 <Radio_WriteConfiguration+0x2dc>)
    f7ba:	4013      	ands	r3, r2
    f7bc:	4a73      	ldr	r2, [pc, #460]	; (f98c <Radio_WriteConfiguration+0x2e0>)
    f7be:	4293      	cmp	r3, r2
    f7c0:	d000      	beq.n	f7c4 <Radio_WriteConfiguration+0x118>
    f7c2:	e0c2      	b.n	f94a <Radio_WriteConfiguration+0x29e>
    f7c4:	2108      	movs	r1, #8
    f7c6:	4308      	orrs	r0, r1
    f7c8:	b2c0      	uxtb	r0, r0
    f7ca:	2104      	movs	r1, #4
    f7cc:	4301      	orrs	r1, r0
    f7ce:	2026      	movs	r0, #38	; 0x26
    f7d0:	47a8      	blx	r5
    f7d2:	2031      	movs	r0, #49	; 0x31
    f7d4:	47b0      	blx	r6
    f7d6:	21f8      	movs	r1, #248	; 0xf8
    f7d8:	4008      	ands	r0, r1
    f7da:	39f5      	subs	r1, #245	; 0xf5
    f7dc:	4301      	orrs	r1, r0
    f7de:	2031      	movs	r0, #49	; 0x31
    f7e0:	47a8      	blx	r5
    f7e2:	210a      	movs	r1, #10
    f7e4:	2037      	movs	r0, #55	; 0x37
    f7e6:	47a8      	blx	r5
    f7e8:	0023      	movs	r3, r4
    f7ea:	3331      	adds	r3, #49	; 0x31
    f7ec:	781b      	ldrb	r3, [r3, #0]
    f7ee:	2b12      	cmp	r3, #18
    f7f0:	d11e      	bne.n	f830 <Radio_WriteConfiguration+0x184>
    f7f2:	0023      	movs	r3, r4
    f7f4:	3336      	adds	r3, #54	; 0x36
    f7f6:	781b      	ldrb	r3, [r3, #0]
    f7f8:	3b07      	subs	r3, #7
    f7fa:	2b01      	cmp	r3, #1
    f7fc:	d80b      	bhi.n	f816 <Radio_WriteConfiguration+0x16a>
    f7fe:	2031      	movs	r0, #49	; 0x31
    f800:	47b0      	blx	r6
    f802:	217f      	movs	r1, #127	; 0x7f
    f804:	4001      	ands	r1, r0
    f806:	2031      	movs	r0, #49	; 0x31
    f808:	47a8      	blx	r5
    f80a:	2140      	movs	r1, #64	; 0x40
    f80c:	202f      	movs	r0, #47	; 0x2f
    f80e:	47a8      	blx	r5
    f810:	2100      	movs	r1, #0
    f812:	2030      	movs	r0, #48	; 0x30
    f814:	47a8      	blx	r5
    f816:	0023      	movs	r3, r4
    f818:	3336      	adds	r3, #54	; 0x36
    f81a:	781b      	ldrb	r3, [r3, #0]
    f81c:	2b09      	cmp	r3, #9
    f81e:	d107      	bne.n	f830 <Radio_WriteConfiguration+0x184>
    f820:	2031      	movs	r0, #49	; 0x31
    f822:	47b0      	blx	r6
    f824:	2180      	movs	r1, #128	; 0x80
    f826:	4249      	negs	r1, r1
    f828:	4301      	orrs	r1, r0
    f82a:	b2c9      	uxtb	r1, r1
    f82c:	2031      	movs	r0, #49	; 0x31
    f82e:	47a8      	blx	r5
    f830:	2033      	movs	r0, #51	; 0x33
    f832:	47b0      	blx	r6
    f834:	1da3      	adds	r3, r4, #6
    f836:	7fd9      	ldrb	r1, [r3, #31]
    f838:	2340      	movs	r3, #64	; 0x40
    f83a:	0189      	lsls	r1, r1, #6
    f83c:	4398      	bics	r0, r3
    f83e:	4019      	ands	r1, r3
    f840:	4301      	orrs	r1, r0
    f842:	b2c9      	uxtb	r1, r1
    f844:	2033      	movs	r0, #51	; 0x33
    f846:	47a8      	blx	r5
    f848:	8aa1      	ldrh	r1, [r4, #20]
    f84a:	2020      	movs	r0, #32
    f84c:	0a09      	lsrs	r1, r1, #8
    f84e:	47a8      	blx	r5
    f850:	7d21      	ldrb	r1, [r4, #20]
    f852:	2021      	movs	r0, #33	; 0x21
    f854:	47a8      	blx	r5
    f856:	2100      	movs	r1, #0
    f858:	200d      	movs	r0, #13
    f85a:	47a8      	blx	r5
    f85c:	2100      	movs	r1, #0
    f85e:	200e      	movs	r0, #14
    f860:	47a8      	blx	r5
    f862:	2100      	movs	r1, #0
    f864:	200f      	movs	r0, #15
    f866:	47a8      	blx	r5
    f868:	0023      	movs	r3, r4
    f86a:	3331      	adds	r3, #49	; 0x31
    f86c:	781b      	ldrb	r3, [r3, #0]
    f86e:	2b12      	cmp	r3, #18
    f870:	d120      	bne.n	f8b4 <Radio_WriteConfiguration+0x208>
    f872:	0023      	movs	r3, r4
    f874:	3336      	adds	r3, #54	; 0x36
    f876:	781b      	ldrb	r3, [r3, #0]
    f878:	2b09      	cmp	r3, #9
    f87a:	d000      	beq.n	f87e <Radio_WriteConfiguration+0x1d2>
    f87c:	e072      	b.n	f964 <Radio_WriteConfiguration+0x2b8>
    f87e:	4a44      	ldr	r2, [pc, #272]	; (f990 <Radio_WriteConfiguration+0x2e4>)
    f880:	6823      	ldr	r3, [r4, #0]
    f882:	1899      	adds	r1, r3, r2
    f884:	4a43      	ldr	r2, [pc, #268]	; (f994 <Radio_WriteConfiguration+0x2e8>)
    f886:	4291      	cmp	r1, r2
    f888:	d862      	bhi.n	f950 <Radio_WriteConfiguration+0x2a4>
    f88a:	2102      	movs	r1, #2
    f88c:	2036      	movs	r0, #54	; 0x36
    f88e:	47a8      	blx	r5
    f890:	2164      	movs	r1, #100	; 0x64
    f892:	203a      	movs	r0, #58	; 0x3a
    f894:	47a8      	blx	r5
    f896:	0023      	movs	r3, r4
    f898:	3336      	adds	r3, #54	; 0x36
    f89a:	781b      	ldrb	r3, [r3, #0]
    f89c:	2165      	movs	r1, #101	; 0x65
    f89e:	203a      	movs	r0, #58	; 0x3a
    f8a0:	2b09      	cmp	r3, #9
    f8a2:	d162      	bne.n	f96a <Radio_WriteConfiguration+0x2be>
    f8a4:	3406      	adds	r4, #6
    f8a6:	7fe3      	ldrb	r3, [r4, #31]
    f8a8:	2b01      	cmp	r3, #1
    f8aa:	d15e      	bne.n	f96a <Radio_WriteConfiguration+0x2be>
    f8ac:	47a8      	blx	r5
    f8ae:	2119      	movs	r1, #25
    f8b0:	203b      	movs	r0, #59	; 0x3b
    f8b2:	47a8      	blx	r5
    f8b4:	21ff      	movs	r1, #255	; 0xff
    f8b6:	2012      	movs	r0, #18
    f8b8:	47a8      	blx	r5
    f8ba:	b005      	add	sp, #20
    f8bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f8be:	b25b      	sxtb	r3, r3
    f8c0:	3303      	adds	r3, #3
    f8c2:	db00      	blt.n	f8c6 <Radio_WriteConfiguration+0x21a>
    f8c4:	e70f      	b.n	f6e6 <Radio_WriteConfiguration+0x3a>
    f8c6:	4b34      	ldr	r3, [pc, #208]	; (f998 <Radio_WriteConfiguration+0x2ec>)
    f8c8:	781f      	ldrb	r7, [r3, #0]
    f8ca:	e70c      	b.n	f6e6 <Radio_WriteConfiguration+0x3a>
    f8cc:	2170      	movs	r1, #112	; 0x70
    f8ce:	9b01      	ldr	r3, [sp, #4]
    f8d0:	4319      	orrs	r1, r3
    f8d2:	b2c9      	uxtb	r1, r1
    f8d4:	e719      	b.n	f70a <Radio_WriteConfiguration+0x5e>
    f8d6:	2b01      	cmp	r3, #1
    f8d8:	dd07      	ble.n	f8ea <Radio_WriteConfiguration+0x23e>
    f8da:	2714      	movs	r7, #20
    f8dc:	2b13      	cmp	r3, #19
    f8de:	dc06      	bgt.n	f8ee <Radio_WriteConfiguration+0x242>
    f8e0:	1c1f      	adds	r7, r3, #0
    f8e2:	2b11      	cmp	r3, #17
    f8e4:	dd02      	ble.n	f8ec <Radio_WriteConfiguration+0x240>
    f8e6:	2711      	movs	r7, #17
    f8e8:	e000      	b.n	f8ec <Radio_WriteConfiguration+0x240>
    f8ea:	2702      	movs	r7, #2
    f8ec:	b27f      	sxtb	r7, r7
    f8ee:	200b      	movs	r0, #11
    f8f0:	47b0      	blx	r6
    f8f2:	9003      	str	r0, [sp, #12]
    f8f4:	204d      	movs	r0, #77	; 0x4d
    f8f6:	47b0      	blx	r6
    f8f8:	2307      	movs	r3, #7
    f8fa:	4398      	bics	r0, r3
    f8fc:	b2c1      	uxtb	r1, r0
    f8fe:	2f14      	cmp	r7, #20
    f900:	d112      	bne.n	f928 <Radio_WriteConfiguration+0x27c>
    f902:	4319      	orrs	r1, r3
    f904:	9b03      	ldr	r3, [sp, #12]
    f906:	37cb      	adds	r7, #203	; 0xcb
    f908:	403b      	ands	r3, r7
    f90a:	001f      	movs	r7, r3
    f90c:	230f      	movs	r3, #15
    f90e:	9301      	str	r3, [sp, #4]
    f910:	204d      	movs	r0, #77	; 0x4d
    f912:	47a8      	blx	r5
    f914:	2180      	movs	r1, #128	; 0x80
    f916:	9b01      	ldr	r3, [sp, #4]
    f918:	4249      	negs	r1, r1
    f91a:	4319      	orrs	r1, r3
    f91c:	b2c9      	uxtb	r1, r1
    f91e:	2009      	movs	r0, #9
    f920:	47a8      	blx	r5
    f922:	0039      	movs	r1, r7
    f924:	200b      	movs	r0, #11
    f926:	e6f1      	b.n	f70c <Radio_WriteConfiguration+0x60>
    f928:	3f02      	subs	r7, #2
    f92a:	b27b      	sxtb	r3, r7
    f92c:	2720      	movs	r7, #32
    f92e:	2004      	movs	r0, #4
    f930:	9301      	str	r3, [sp, #4]
    f932:	9b03      	ldr	r3, [sp, #12]
    f934:	4301      	orrs	r1, r0
    f936:	431f      	orrs	r7, r3
    f938:	b2ff      	uxtb	r7, r7
    f93a:	e7e9      	b.n	f910 <Radio_WriteConfiguration+0x264>
    f93c:	23fa      	movs	r3, #250	; 0xfa
    f93e:	e71f      	b.n	f780 <Radio_WriteConfiguration+0xd4>
    f940:	23fa      	movs	r3, #250	; 0xfa
    f942:	005b      	lsls	r3, r3, #1
    f944:	e71c      	b.n	f780 <Radio_WriteConfiguration+0xd4>
    f946:	0019      	movs	r1, r3
    f948:	e71b      	b.n	f782 <Radio_WriteConfiguration+0xd6>
    f94a:	21f7      	movs	r1, #247	; 0xf7
    f94c:	4008      	ands	r0, r1
    f94e:	e73c      	b.n	f7ca <Radio_WriteConfiguration+0x11e>
    f950:	4a12      	ldr	r2, [pc, #72]	; (f99c <Radio_WriteConfiguration+0x2f0>)
    f952:	189b      	adds	r3, r3, r2
    f954:	4a12      	ldr	r2, [pc, #72]	; (f9a0 <Radio_WriteConfiguration+0x2f4>)
    f956:	4293      	cmp	r3, r2
    f958:	d804      	bhi.n	f964 <Radio_WriteConfiguration+0x2b8>
    f95a:	2102      	movs	r1, #2
    f95c:	2036      	movs	r0, #54	; 0x36
    f95e:	47a8      	blx	r5
    f960:	217f      	movs	r1, #127	; 0x7f
    f962:	e796      	b.n	f892 <Radio_WriteConfiguration+0x1e6>
    f964:	2103      	movs	r1, #3
    f966:	2036      	movs	r0, #54	; 0x36
    f968:	e794      	b.n	f894 <Radio_WriteConfiguration+0x1e8>
    f96a:	47a8      	blx	r5
    f96c:	211d      	movs	r1, #29
    f96e:	e79f      	b.n	f8b0 <Radio_WriteConfiguration+0x204>
    f970:	200017c8 	.word	0x200017c8
    f974:	00009df9 	.word	0x00009df9
    f978:	0000f665 	.word	0x0000f665
    f97c:	00003139 	.word	0x00003139
    f980:	00003111 	.word	0x00003111
    f984:	200017fe 	.word	0x200017fe
    f988:	00ffff00 	.word	0x00ffff00
    f98c:	00070b00 	.word	0x00070b00
    f990:	cc9eec80 	.word	0xcc9eec80
    f994:	096ae380 	.word	0x096ae380
    f998:	00019840 	.word	0x00019840
    f99c:	e78fe580 	.word	0xe78fe580
    f9a0:	06dac2c0 	.word	0x06dac2c0
    f9a4:	6863      	ldr	r3, [r4, #4]
    f9a6:	492c      	ldr	r1, [pc, #176]	; (fa58 <Radio_WriteConfiguration+0x3ac>)
    f9a8:	0218      	lsls	r0, r3, #8
    f9aa:	4b2c      	ldr	r3, [pc, #176]	; (fa5c <Radio_WriteConfiguration+0x3b0>)
    f9ac:	4798      	blx	r3
    f9ae:	0007      	movs	r7, r0
    f9b0:	0a01      	lsrs	r1, r0, #8
    f9b2:	b2c9      	uxtb	r1, r1
    f9b4:	2004      	movs	r0, #4
    f9b6:	47a8      	blx	r5
    f9b8:	b2f9      	uxtb	r1, r7
    f9ba:	2005      	movs	r0, #5
    f9bc:	47a8      	blx	r5
    f9be:	4b27      	ldr	r3, [pc, #156]	; (fa5c <Radio_WriteConfiguration+0x3b0>)
    f9c0:	68a1      	ldr	r1, [r4, #8]
    f9c2:	4827      	ldr	r0, [pc, #156]	; (fa60 <Radio_WriteConfiguration+0x3b4>)
    f9c4:	4798      	blx	r3
    f9c6:	0007      	movs	r7, r0
    f9c8:	0a01      	lsrs	r1, r0, #8
    f9ca:	b2c9      	uxtb	r1, r1
    f9cc:	2002      	movs	r0, #2
    f9ce:	47a8      	blx	r5
    f9d0:	b2f9      	uxtb	r1, r7
    f9d2:	2003      	movs	r0, #3
    f9d4:	47a8      	blx	r5
    f9d6:	2100      	movs	r1, #0
    f9d8:	205d      	movs	r0, #93	; 0x5d
    f9da:	47a8      	blx	r5
    f9dc:	8aa1      	ldrh	r1, [r4, #20]
    f9de:	2025      	movs	r0, #37	; 0x25
    f9e0:	0a09      	lsrs	r1, r1, #8
    f9e2:	47a8      	blx	r5
    f9e4:	7d21      	ldrb	r1, [r4, #20]
    f9e6:	2026      	movs	r0, #38	; 0x26
    f9e8:	47a8      	blx	r5
    f9ea:	219e      	movs	r1, #158	; 0x9e
    f9ec:	200d      	movs	r0, #13
    f9ee:	47a8      	blx	r5
    f9f0:	21bf      	movs	r1, #191	; 0xbf
    f9f2:	2035      	movs	r0, #53	; 0x35
    f9f4:	47a8      	blx	r5
    f9f6:	200a      	movs	r0, #10
    f9f8:	47b0      	blx	r6
    f9fa:	0023      	movs	r3, r4
    f9fc:	3337      	adds	r3, #55	; 0x37
    f9fe:	7819      	ldrb	r1, [r3, #0]
    fa00:	2360      	movs	r3, #96	; 0x60
    fa02:	0149      	lsls	r1, r1, #5
    fa04:	4398      	bics	r0, r3
    fa06:	4301      	orrs	r1, r0
    fa08:	b2c9      	uxtb	r1, r1
    fa0a:	200a      	movs	r0, #10
    fa0c:	47a8      	blx	r5
    fa0e:	1d23      	adds	r3, r4, #4
    fa10:	7fdb      	ldrb	r3, [r3, #31]
    fa12:	21c0      	movs	r1, #192	; 0xc0
    fa14:	2b00      	cmp	r3, #0
    fa16:	d000      	beq.n	fa1a <Radio_WriteConfiguration+0x36e>
    fa18:	3110      	adds	r1, #16
    fa1a:	2030      	movs	r0, #48	; 0x30
    fa1c:	47a8      	blx	r5
    fa1e:	2600      	movs	r6, #0
    fa20:	1ca3      	adds	r3, r4, #2
    fa22:	7fd9      	ldrb	r1, [r3, #31]
    fa24:	428e      	cmp	r6, r1
    fa26:	d30d      	bcc.n	fa44 <Radio_WriteConfiguration+0x398>
    fa28:	2900      	cmp	r1, #0
    fa2a:	d003      	beq.n	fa34 <Radio_WriteConfiguration+0x388>
    fa2c:	2310      	movs	r3, #16
    fa2e:	3901      	subs	r1, #1
    fa30:	4319      	orrs	r1, r3
    fa32:	b2c9      	uxtb	r1, r1
    fa34:	2027      	movs	r0, #39	; 0x27
    fa36:	47a8      	blx	r5
    fa38:	21ff      	movs	r1, #255	; 0xff
    fa3a:	203e      	movs	r0, #62	; 0x3e
    fa3c:	47a8      	blx	r5
    fa3e:	21ff      	movs	r1, #255	; 0xff
    fa40:	203f      	movs	r0, #63	; 0x3f
    fa42:	e739      	b.n	f8b8 <Radio_WriteConfiguration+0x20c>
    fa44:	0030      	movs	r0, r6
    fa46:	19a3      	adds	r3, r4, r6
    fa48:	3028      	adds	r0, #40	; 0x28
    fa4a:	7e59      	ldrb	r1, [r3, #25]
    fa4c:	b2c0      	uxtb	r0, r0
    fa4e:	3601      	adds	r6, #1
    fa50:	47a8      	blx	r5
    fa52:	b2f6      	uxtb	r6, r6
    fa54:	e7e4      	b.n	fa20 <Radio_WriteConfiguration+0x374>
    fa56:	46c0      	nop			; (mov r8, r8)
    fa58:	00003d09 	.word	0x00003d09
    fa5c:	00010e0d 	.word	0x00010e0d
    fa60:	01e84800 	.word	0x01e84800

0000fa64 <RADIO_getMappingAndOpmode>:
    fa64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fa66:	0006      	movs	r6, r0
    fa68:	4d06      	ldr	r5, [pc, #24]	; (fa84 <RADIO_getMappingAndOpmode+0x20>)
    fa6a:	2040      	movs	r0, #64	; 0x40
    fa6c:	001f      	movs	r7, r3
    fa6e:	0014      	movs	r4, r2
    fa70:	9101      	str	r1, [sp, #4]
    fa72:	47a8      	blx	r5
    fa74:	4004      	ands	r4, r0
    fa76:	413c      	asrs	r4, r7
    fa78:	2001      	movs	r0, #1
    fa7a:	7034      	strb	r4, [r6, #0]
    fa7c:	47a8      	blx	r5
    fa7e:	9b01      	ldr	r3, [sp, #4]
    fa80:	7018      	strb	r0, [r3, #0]
    fa82:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    fa84:	00003139 	.word	0x00003139

0000fa88 <RADIO_UnhandledInterrupt.part.0>:
    fa88:	b510      	push	{r4, lr}
    fa8a:	21ff      	movs	r1, #255	; 0xff
    fa8c:	2012      	movs	r0, #18
    fa8e:	4b01      	ldr	r3, [pc, #4]	; (fa94 <RADIO_UnhandledInterrupt.part.0+0xc>)
    fa90:	4798      	blx	r3
    fa92:	bd10      	pop	{r4, pc}
    fa94:	00003111 	.word	0x00003111

0000fa98 <RADIO_UnhandledInterrupt>:
    fa98:	b510      	push	{r4, lr}
    fa9a:	2801      	cmp	r0, #1
    fa9c:	d102      	bne.n	faa4 <RADIO_UnhandledInterrupt+0xc>
    fa9e:	4b05      	ldr	r3, [pc, #20]	; (fab4 <RADIO_UnhandledInterrupt+0x1c>)
    faa0:	4798      	blx	r3
    faa2:	bd10      	pop	{r4, pc}
    faa4:	21ff      	movs	r1, #255	; 0xff
    faa6:	203e      	movs	r0, #62	; 0x3e
    faa8:	4c03      	ldr	r4, [pc, #12]	; (fab8 <RADIO_UnhandledInterrupt+0x20>)
    faaa:	47a0      	blx	r4
    faac:	21ff      	movs	r1, #255	; 0xff
    faae:	203f      	movs	r0, #63	; 0x3f
    fab0:	47a0      	blx	r4
    fab2:	e7f6      	b.n	faa2 <RADIO_UnhandledInterrupt+0xa>
    fab4:	0000fa89 	.word	0x0000fa89
    fab8:	00003111 	.word	0x00003111

0000fabc <RADIO_DIO0>:
    fabc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    fabe:	466b      	mov	r3, sp
    fac0:	1ddc      	adds	r4, r3, #7
    fac2:	1d9d      	adds	r5, r3, #6
    fac4:	22c0      	movs	r2, #192	; 0xc0
    fac6:	2306      	movs	r3, #6
    fac8:	0028      	movs	r0, r5
    faca:	0021      	movs	r1, r4
    facc:	4e12      	ldr	r6, [pc, #72]	; (fb18 <RADIO_DIO0+0x5c>)
    face:	47b0      	blx	r6
    fad0:	7823      	ldrb	r3, [r4, #0]
    fad2:	7828      	ldrb	r0, [r5, #0]
    fad4:	b25a      	sxtb	r2, r3
    fad6:	b2c0      	uxtb	r0, r0
    fad8:	2a00      	cmp	r2, #0
    fada:	da0b      	bge.n	faf4 <RADIO_DIO0+0x38>
    fadc:	2800      	cmp	r0, #0
    fade:	d004      	beq.n	faea <RADIO_DIO0+0x2e>
    fae0:	2801      	cmp	r0, #1
    fae2:	d005      	beq.n	faf0 <RADIO_DIO0+0x34>
    fae4:	4b0d      	ldr	r3, [pc, #52]	; (fb1c <RADIO_DIO0+0x60>)
    fae6:	4798      	blx	r3
    fae8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    faea:	4b0d      	ldr	r3, [pc, #52]	; (fb20 <RADIO_DIO0+0x64>)
    faec:	4798      	blx	r3
    faee:	e7fb      	b.n	fae8 <RADIO_DIO0+0x2c>
    faf0:	4b0c      	ldr	r3, [pc, #48]	; (fb24 <RADIO_DIO0+0x68>)
    faf2:	e7fb      	b.n	faec <RADIO_DIO0+0x30>
    faf4:	2800      	cmp	r0, #0
    faf6:	d10a      	bne.n	fb0e <RADIO_DIO0+0x52>
    faf8:	2207      	movs	r2, #7
    fafa:	4013      	ands	r3, r2
    fafc:	7023      	strb	r3, [r4, #0]
    fafe:	2b03      	cmp	r3, #3
    fb00:	d101      	bne.n	fb06 <RADIO_DIO0+0x4a>
    fb02:	4b09      	ldr	r3, [pc, #36]	; (fb28 <RADIO_DIO0+0x6c>)
    fb04:	e7f2      	b.n	faec <RADIO_DIO0+0x30>
    fb06:	2b05      	cmp	r3, #5
    fb08:	d102      	bne.n	fb10 <RADIO_DIO0+0x54>
    fb0a:	4b08      	ldr	r3, [pc, #32]	; (fb2c <RADIO_DIO0+0x70>)
    fb0c:	e7ee      	b.n	faec <RADIO_DIO0+0x30>
    fb0e:	2000      	movs	r0, #0
    fb10:	4b07      	ldr	r3, [pc, #28]	; (fb30 <RADIO_DIO0+0x74>)
    fb12:	4798      	blx	r3
    fb14:	e7e8      	b.n	fae8 <RADIO_DIO0+0x2c>
    fb16:	46c0      	nop			; (mov r8, r8)
    fb18:	0000fa65 	.word	0x0000fa65
    fb1c:	0000fa89 	.word	0x0000fa89
    fb20:	00010241 	.word	0x00010241
    fb24:	00010145 	.word	0x00010145
    fb28:	000101c1 	.word	0x000101c1
    fb2c:	000102bd 	.word	0x000102bd
    fb30:	0000fa99 	.word	0x0000fa99

0000fb34 <RADIO_DIO1>:
    fb34:	b573      	push	{r0, r1, r4, r5, r6, lr}
    fb36:	466b      	mov	r3, sp
    fb38:	1ddc      	adds	r4, r3, #7
    fb3a:	1d9d      	adds	r5, r3, #6
    fb3c:	2230      	movs	r2, #48	; 0x30
    fb3e:	2304      	movs	r3, #4
    fb40:	0021      	movs	r1, r4
    fb42:	0028      	movs	r0, r5
    fb44:	4e11      	ldr	r6, [pc, #68]	; (fb8c <RADIO_DIO1+0x58>)
    fb46:	47b0      	blx	r6
    fb48:	7822      	ldrb	r2, [r4, #0]
    fb4a:	782b      	ldrb	r3, [r5, #0]
    fb4c:	b251      	sxtb	r1, r2
    fb4e:	2900      	cmp	r1, #0
    fb50:	da0c      	bge.n	fb6c <RADIO_DIO1+0x38>
    fb52:	b2db      	uxtb	r3, r3
    fb54:	2b00      	cmp	r3, #0
    fb56:	d004      	beq.n	fb62 <RADIO_DIO1+0x2e>
    fb58:	2b01      	cmp	r3, #1
    fb5a:	d005      	beq.n	fb68 <RADIO_DIO1+0x34>
    fb5c:	4b0c      	ldr	r3, [pc, #48]	; (fb90 <RADIO_DIO1+0x5c>)
    fb5e:	4798      	blx	r3
    fb60:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    fb62:	4b0c      	ldr	r3, [pc, #48]	; (fb94 <RADIO_DIO1+0x60>)
    fb64:	4798      	blx	r3
    fb66:	e7fb      	b.n	fb60 <RADIO_DIO1+0x2c>
    fb68:	4b0b      	ldr	r3, [pc, #44]	; (fb98 <RADIO_DIO1+0x64>)
    fb6a:	e7fb      	b.n	fb64 <RADIO_DIO1+0x30>
    fb6c:	2107      	movs	r1, #7
    fb6e:	b2db      	uxtb	r3, r3
    fb70:	400a      	ands	r2, r1
    fb72:	7022      	strb	r2, [r4, #0]
    fb74:	2b00      	cmp	r3, #0
    fb76:	d005      	beq.n	fb84 <RADIO_DIO1+0x50>
    fb78:	2b01      	cmp	r3, #1
    fb7a:	d1f1      	bne.n	fb60 <RADIO_DIO1+0x2c>
    fb7c:	2a03      	cmp	r2, #3
    fb7e:	d1ef      	bne.n	fb60 <RADIO_DIO1+0x2c>
    fb80:	4b06      	ldr	r3, [pc, #24]	; (fb9c <RADIO_DIO1+0x68>)
    fb82:	e7ef      	b.n	fb64 <RADIO_DIO1+0x30>
    fb84:	4b06      	ldr	r3, [pc, #24]	; (fba0 <RADIO_DIO1+0x6c>)
    fb86:	2a05      	cmp	r2, #5
    fb88:	d1ea      	bne.n	fb60 <RADIO_DIO1+0x2c>
    fb8a:	e7eb      	b.n	fb64 <RADIO_DIO1+0x30>
    fb8c:	0000fa65 	.word	0x0000fa65
    fb90:	0000fa89 	.word	0x0000fa89
    fb94:	000100c9 	.word	0x000100c9
    fb98:	00009edd 	.word	0x00009edd
    fb9c:	0000fef1 	.word	0x0000fef1
    fba0:	0000fe55 	.word	0x0000fe55

0000fba4 <RADIO_DIO2>:
    fba4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    fba6:	466b      	mov	r3, sp
    fba8:	1ddc      	adds	r4, r3, #7
    fbaa:	1d9d      	adds	r5, r3, #6
    fbac:	220c      	movs	r2, #12
    fbae:	2302      	movs	r3, #2
    fbb0:	0021      	movs	r1, r4
    fbb2:	0028      	movs	r0, r5
    fbb4:	4e0b      	ldr	r6, [pc, #44]	; (fbe4 <RADIO_DIO2+0x40>)
    fbb6:	47b0      	blx	r6
    fbb8:	7823      	ldrb	r3, [r4, #0]
    fbba:	782a      	ldrb	r2, [r5, #0]
    fbbc:	b259      	sxtb	r1, r3
    fbbe:	2900      	cmp	r1, #0
    fbc0:	da05      	bge.n	fbce <RADIO_DIO2+0x2a>
    fbc2:	4b09      	ldr	r3, [pc, #36]	; (fbe8 <RADIO_DIO2+0x44>)
    fbc4:	2a02      	cmp	r2, #2
    fbc6:	d90a      	bls.n	fbde <RADIO_DIO2+0x3a>
    fbc8:	4b08      	ldr	r3, [pc, #32]	; (fbec <RADIO_DIO2+0x48>)
    fbca:	4798      	blx	r3
    fbcc:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    fbce:	2107      	movs	r1, #7
    fbd0:	400b      	ands	r3, r1
    fbd2:	7023      	strb	r3, [r4, #0]
    fbd4:	2a03      	cmp	r2, #3
    fbd6:	d1f9      	bne.n	fbcc <RADIO_DIO2+0x28>
    fbd8:	2b05      	cmp	r3, #5
    fbda:	d1f7      	bne.n	fbcc <RADIO_DIO2+0x28>
    fbdc:	4b04      	ldr	r3, [pc, #16]	; (fbf0 <RADIO_DIO2+0x4c>)
    fbde:	4798      	blx	r3
    fbe0:	e7f4      	b.n	fbcc <RADIO_DIO2+0x28>
    fbe2:	46c0      	nop			; (mov r8, r8)
    fbe4:	0000fa65 	.word	0x0000fa65
    fbe8:	00009edd 	.word	0x00009edd
    fbec:	0000fa89 	.word	0x0000fa89
    fbf0:	0000fe25 	.word	0x0000fe25

0000fbf4 <RADIO_DIO3>:
    fbf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    fbf6:	466b      	mov	r3, sp
    fbf8:	4668      	mov	r0, sp
    fbfa:	1ddc      	adds	r4, r3, #7
    fbfc:	2203      	movs	r2, #3
    fbfe:	2300      	movs	r3, #0
    fc00:	0021      	movs	r1, r4
    fc02:	3006      	adds	r0, #6
    fc04:	4d03      	ldr	r5, [pc, #12]	; (fc14 <RADIO_DIO3+0x20>)
    fc06:	47a8      	blx	r5
    fc08:	7823      	ldrb	r3, [r4, #0]
    fc0a:	2b7f      	cmp	r3, #127	; 0x7f
    fc0c:	d901      	bls.n	fc12 <RADIO_DIO3+0x1e>
    fc0e:	4b02      	ldr	r3, [pc, #8]	; (fc18 <RADIO_DIO3+0x24>)
    fc10:	4798      	blx	r3
    fc12:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    fc14:	0000fa65 	.word	0x0000fa65
    fc18:	0000fa89 	.word	0x0000fa89

0000fc1c <RADIO_DIO4>:
    fc1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    fc1e:	466b      	mov	r3, sp
    fc20:	4668      	mov	r0, sp
    fc22:	1ddc      	adds	r4, r3, #7
    fc24:	2306      	movs	r3, #6
    fc26:	22c0      	movs	r2, #192	; 0xc0
    fc28:	18c0      	adds	r0, r0, r3
    fc2a:	0021      	movs	r1, r4
    fc2c:	4d03      	ldr	r5, [pc, #12]	; (fc3c <RADIO_DIO4+0x20>)
    fc2e:	47a8      	blx	r5
    fc30:	7823      	ldrb	r3, [r4, #0]
    fc32:	2b7f      	cmp	r3, #127	; 0x7f
    fc34:	d901      	bls.n	fc3a <RADIO_DIO4+0x1e>
    fc36:	4b02      	ldr	r3, [pc, #8]	; (fc40 <RADIO_DIO4+0x24>)
    fc38:	4798      	blx	r3
    fc3a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    fc3c:	0000fa65 	.word	0x0000fa65
    fc40:	0000fa89 	.word	0x0000fa89

0000fc44 <RADIO_DIO5>:
    fc44:	b537      	push	{r0, r1, r2, r4, r5, lr}
    fc46:	466b      	mov	r3, sp
    fc48:	4668      	mov	r0, sp
    fc4a:	1ddc      	adds	r4, r3, #7
    fc4c:	2230      	movs	r2, #48	; 0x30
    fc4e:	2304      	movs	r3, #4
    fc50:	0021      	movs	r1, r4
    fc52:	3006      	adds	r0, #6
    fc54:	4d03      	ldr	r5, [pc, #12]	; (fc64 <RADIO_DIO5+0x20>)
    fc56:	47a8      	blx	r5
    fc58:	7823      	ldrb	r3, [r4, #0]
    fc5a:	2b7f      	cmp	r3, #127	; 0x7f
    fc5c:	d901      	bls.n	fc62 <RADIO_DIO5+0x1e>
    fc5e:	4b02      	ldr	r3, [pc, #8]	; (fc68 <RADIO_DIO5+0x24>)
    fc60:	4798      	blx	r3
    fc62:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    fc64:	0000fa65 	.word	0x0000fa65
    fc68:	0000fa89 	.word	0x0000fa89

0000fc6c <radioPostTask>:
    fc6c:	b510      	push	{r4, lr}
    fc6e:	0004      	movs	r4, r0
    fc70:	4b05      	ldr	r3, [pc, #20]	; (fc88 <radioPostTask+0x1c>)
    fc72:	4798      	blx	r3
    fc74:	4b05      	ldr	r3, [pc, #20]	; (fc8c <radioPostTask+0x20>)
    fc76:	8818      	ldrh	r0, [r3, #0]
    fc78:	4320      	orrs	r0, r4
    fc7a:	8018      	strh	r0, [r3, #0]
    fc7c:	4b04      	ldr	r3, [pc, #16]	; (fc90 <radioPostTask+0x24>)
    fc7e:	4798      	blx	r3
    fc80:	2002      	movs	r0, #2
    fc82:	4b04      	ldr	r3, [pc, #16]	; (fc94 <radioPostTask+0x28>)
    fc84:	4798      	blx	r3
    fc86:	bd10      	pop	{r4, pc}
    fc88:	00003389 	.word	0x00003389
    fc8c:	20000fe6 	.word	0x20000fe6
    fc90:	00003395 	.word	0x00003395
    fc94:	00009dc1 	.word	0x00009dc1

0000fc98 <radioClearTask>:
    fc98:	b510      	push	{r4, lr}
    fc9a:	0004      	movs	r4, r0
    fc9c:	4b04      	ldr	r3, [pc, #16]	; (fcb0 <radioClearTask+0x18>)
    fc9e:	4798      	blx	r3
    fca0:	4a04      	ldr	r2, [pc, #16]	; (fcb4 <radioClearTask+0x1c>)
    fca2:	8813      	ldrh	r3, [r2, #0]
    fca4:	43a3      	bics	r3, r4
    fca6:	8013      	strh	r3, [r2, #0]
    fca8:	4b03      	ldr	r3, [pc, #12]	; (fcb8 <radioClearTask+0x20>)
    fcaa:	4798      	blx	r3
    fcac:	bd10      	pop	{r4, pc}
    fcae:	46c0      	nop			; (mov r8, r8)
    fcb0:	00003389 	.word	0x00003389
    fcb4:	20000fe6 	.word	0x20000fe6
    fcb8:	00003395 	.word	0x00003395

0000fcbc <RADIO_TaskHandler>:
    fcbc:	b570      	push	{r4, r5, r6, lr}
    fcbe:	2400      	movs	r4, #0
    fcc0:	4d10      	ldr	r5, [pc, #64]	; (fd04 <RADIO_TaskHandler+0x48>)
    fcc2:	2601      	movs	r6, #1
    fcc4:	882b      	ldrh	r3, [r5, #0]
    fcc6:	42a3      	cmp	r3, r4
    fcc8:	d015      	beq.n	fcf6 <RADIO_TaskHandler+0x3a>
    fcca:	882b      	ldrh	r3, [r5, #0]
    fccc:	4123      	asrs	r3, r4
    fcce:	4233      	tst	r3, r6
    fcd0:	d013      	beq.n	fcfa <RADIO_TaskHandler+0x3e>
    fcd2:	40a6      	lsls	r6, r4
    fcd4:	4b0c      	ldr	r3, [pc, #48]	; (fd08 <RADIO_TaskHandler+0x4c>)
    fcd6:	4798      	blx	r3
    fcd8:	882b      	ldrh	r3, [r5, #0]
    fcda:	00a4      	lsls	r4, r4, #2
    fcdc:	43b3      	bics	r3, r6
    fcde:	802b      	strh	r3, [r5, #0]
    fce0:	4b0a      	ldr	r3, [pc, #40]	; (fd0c <RADIO_TaskHandler+0x50>)
    fce2:	4798      	blx	r3
    fce4:	4b0a      	ldr	r3, [pc, #40]	; (fd10 <RADIO_TaskHandler+0x54>)
    fce6:	58e3      	ldr	r3, [r4, r3]
    fce8:	4798      	blx	r3
    fcea:	882b      	ldrh	r3, [r5, #0]
    fcec:	2b00      	cmp	r3, #0
    fcee:	d002      	beq.n	fcf6 <RADIO_TaskHandler+0x3a>
    fcf0:	2002      	movs	r0, #2
    fcf2:	4b08      	ldr	r3, [pc, #32]	; (fd14 <RADIO_TaskHandler+0x58>)
    fcf4:	4798      	blx	r3
    fcf6:	2000      	movs	r0, #0
    fcf8:	bd70      	pop	{r4, r5, r6, pc}
    fcfa:	3401      	adds	r4, #1
    fcfc:	2c05      	cmp	r4, #5
    fcfe:	d1e4      	bne.n	fcca <RADIO_TaskHandler+0xe>
    fd00:	e7f9      	b.n	fcf6 <RADIO_TaskHandler+0x3a>
    fd02:	46c0      	nop			; (mov r8, r8)
    fd04:	20000fe6 	.word	0x20000fe6
    fd08:	00003389 	.word	0x00003389
    fd0c:	00003395 	.word	0x00003395
    fd10:	00019844 	.word	0x00019844
    fd14:	00009dc1 	.word	0x00009dc1

0000fd18 <RadioSetState>:
    fd18:	4b01      	ldr	r3, [pc, #4]	; (fd20 <RadioSetState+0x8>)
    fd1a:	7018      	strb	r0, [r3, #0]
    fd1c:	4770      	bx	lr
    fd1e:	46c0      	nop			; (mov r8, r8)
    fd20:	20001dc3 	.word	0x20001dc3

0000fd24 <RADIO_GetState>:
    fd24:	4b01      	ldr	r3, [pc, #4]	; (fd2c <RADIO_GetState+0x8>)
    fd26:	7818      	ldrb	r0, [r3, #0]
    fd28:	b2c0      	uxtb	r0, r0
    fd2a:	4770      	bx	lr
    fd2c:	20001dc3 	.word	0x20001dc3

0000fd30 <RADIO_SetCallbackBitmask>:
    fd30:	4a02      	ldr	r2, [pc, #8]	; (fd3c <RADIO_SetCallbackBitmask+0xc>)
    fd32:	7813      	ldrb	r3, [r2, #0]
    fd34:	4318      	orrs	r0, r3
    fd36:	7010      	strb	r0, [r2, #0]
    fd38:	4770      	bx	lr
    fd3a:	46c0      	nop			; (mov r8, r8)
    fd3c:	20001dc2 	.word	0x20001dc2

0000fd40 <RADIO_Transmit>:
    fd40:	b570      	push	{r4, r5, r6, lr}
    fd42:	4d10      	ldr	r5, [pc, #64]	; (fd84 <RADIO_Transmit+0x44>)
    fd44:	0006      	movs	r6, r0
    fd46:	782b      	ldrb	r3, [r5, #0]
    fd48:	2004      	movs	r0, #4
    fd4a:	2b01      	cmp	r3, #1
    fd4c:	d118      	bne.n	fd80 <RADIO_Transmit+0x40>
    fd4e:	4c0e      	ldr	r4, [pc, #56]	; (fd88 <RADIO_Transmit+0x48>)
    fd50:	0023      	movs	r3, r4
    fd52:	332f      	adds	r3, #47	; 0x2f
    fd54:	7818      	ldrb	r0, [r3, #0]
    fd56:	4b0d      	ldr	r3, [pc, #52]	; (fd8c <RADIO_Transmit+0x4c>)
    fd58:	4798      	blx	r3
    fd5a:	4b0d      	ldr	r3, [pc, #52]	; (fd90 <RADIO_Transmit+0x50>)
    fd5c:	7832      	ldrb	r2, [r6, #0]
    fd5e:	6871      	ldr	r1, [r6, #4]
    fd60:	701a      	strb	r2, [r3, #0]
    fd62:	4b0c      	ldr	r3, [pc, #48]	; (fd94 <RADIO_Transmit+0x54>)
    fd64:	3434      	adds	r4, #52	; 0x34
    fd66:	6019      	str	r1, [r3, #0]
    fd68:	7821      	ldrb	r1, [r4, #0]
    fd6a:	2302      	movs	r3, #2
    fd6c:	2900      	cmp	r1, #0
    fd6e:	d102      	bne.n	fd76 <RADIO_Transmit+0x36>
    fd70:	0018      	movs	r0, r3
    fd72:	2a3f      	cmp	r2, #63	; 0x3f
    fd74:	d804      	bhi.n	fd80 <RADIO_Transmit+0x40>
    fd76:	702b      	strb	r3, [r5, #0]
    fd78:	2004      	movs	r0, #4
    fd7a:	4b07      	ldr	r3, [pc, #28]	; (fd98 <RADIO_Transmit+0x58>)
    fd7c:	4798      	blx	r3
    fd7e:	2000      	movs	r0, #0
    fd80:	bd70      	pop	{r4, r5, r6, pc}
    fd82:	46c0      	nop			; (mov r8, r8)
    fd84:	20001dc3 	.word	0x20001dc3
    fd88:	200017c8 	.word	0x200017c8
    fd8c:	00009aa1 	.word	0x00009aa1
    fd90:	2000100c 	.word	0x2000100c
    fd94:	20001008 	.word	0x20001008
    fd98:	0000fc6d 	.word	0x0000fc6d

0000fd9c <Radio_FSKTxPayloadHandler>:
    fd9c:	b570      	push	{r4, r5, r6, lr}
    fd9e:	4b1c      	ldr	r3, [pc, #112]	; (fe10 <Radio_FSKTxPayloadHandler+0x74>)
    fda0:	000d      	movs	r5, r1
    fda2:	4798      	blx	r3
    fda4:	4c1b      	ldr	r4, [pc, #108]	; (fe14 <Radio_FSKTxPayloadHandler+0x78>)
    fda6:	3458      	adds	r4, #88	; 0x58
    fda8:	7820      	ldrb	r0, [r4, #0]
    fdaa:	b2c0      	uxtb	r0, r0
    fdac:	2800      	cmp	r0, #0
    fdae:	d112      	bne.n	fdd6 <Radio_FSKTxPayloadHandler+0x3a>
    fdb0:	2d00      	cmp	r5, #0
    fdb2:	d007      	beq.n	fdc4 <Radio_FSKTxPayloadHandler+0x28>
    fdb4:	4918      	ldr	r1, [pc, #96]	; (fe18 <Radio_FSKTxPayloadHandler+0x7c>)
    fdb6:	4b19      	ldr	r3, [pc, #100]	; (fe1c <Radio_FSKTxPayloadHandler+0x80>)
    fdb8:	2d3e      	cmp	r5, #62	; 0x3e
    fdba:	d806      	bhi.n	fdca <Radio_FSKTxPayloadHandler+0x2e>
    fdbc:	002a      	movs	r2, r5
    fdbe:	6809      	ldr	r1, [r1, #0]
    fdc0:	4798      	blx	r3
    fdc2:	7025      	strb	r5, [r4, #0]
    fdc4:	4b16      	ldr	r3, [pc, #88]	; (fe20 <Radio_FSKTxPayloadHandler+0x84>)
    fdc6:	4798      	blx	r3
    fdc8:	bd70      	pop	{r4, r5, r6, pc}
    fdca:	223f      	movs	r2, #63	; 0x3f
    fdcc:	6809      	ldr	r1, [r1, #0]
    fdce:	4798      	blx	r3
    fdd0:	233f      	movs	r3, #63	; 0x3f
    fdd2:	7023      	strb	r3, [r4, #0]
    fdd4:	e7f6      	b.n	fdc4 <Radio_FSKTxPayloadHandler+0x28>
    fdd6:	7823      	ldrb	r3, [r4, #0]
    fdd8:	429d      	cmp	r5, r3
    fdda:	d0f3      	beq.n	fdc4 <Radio_FSKTxPayloadHandler+0x28>
    fddc:	7822      	ldrb	r2, [r4, #0]
    fdde:	480e      	ldr	r0, [pc, #56]	; (fe18 <Radio_FSKTxPayloadHandler+0x7c>)
    fde0:	1aaa      	subs	r2, r5, r2
    fde2:	b2d2      	uxtb	r2, r2
    fde4:	4b0d      	ldr	r3, [pc, #52]	; (fe1c <Radio_FSKTxPayloadHandler+0x80>)
    fde6:	2a3f      	cmp	r2, #63	; 0x3f
    fde8:	d807      	bhi.n	fdfa <Radio_FSKTxPayloadHandler+0x5e>
    fdea:	7826      	ldrb	r6, [r4, #0]
    fdec:	7822      	ldrb	r2, [r4, #0]
    fdee:	6801      	ldr	r1, [r0, #0]
    fdf0:	1aaa      	subs	r2, r5, r2
    fdf2:	b2d2      	uxtb	r2, r2
    fdf4:	1989      	adds	r1, r1, r6
    fdf6:	2000      	movs	r0, #0
    fdf8:	e7e2      	b.n	fdc0 <Radio_FSKTxPayloadHandler+0x24>
    fdfa:	7822      	ldrb	r2, [r4, #0]
    fdfc:	6801      	ldr	r1, [r0, #0]
    fdfe:	2000      	movs	r0, #0
    fe00:	1889      	adds	r1, r1, r2
    fe02:	223f      	movs	r2, #63	; 0x3f
    fe04:	4798      	blx	r3
    fe06:	7823      	ldrb	r3, [r4, #0]
    fe08:	333f      	adds	r3, #63	; 0x3f
    fe0a:	b2db      	uxtb	r3, r3
    fe0c:	e7e1      	b.n	fdd2 <Radio_FSKTxPayloadHandler+0x36>
    fe0e:	46c0      	nop			; (mov r8, r8)
    fe10:	000001ad 	.word	0x000001ad
    fe14:	200017c8 	.word	0x200017c8
    fe18:	20001008 	.word	0x20001008
    fe1c:	00003165 	.word	0x00003165
    fe20:	000001ed 	.word	0x000001ed

0000fe24 <RADIO_FSKSyncAddr>:
    fe24:	4b08      	ldr	r3, [pc, #32]	; (fe48 <RADIO_FSKSyncAddr+0x24>)
    fe26:	b510      	push	{r4, lr}
    fe28:	4798      	blx	r3
    fe2a:	4b08      	ldr	r3, [pc, #32]	; (fe4c <RADIO_FSKSyncAddr+0x28>)
    fe2c:	001a      	movs	r2, r3
    fe2e:	3234      	adds	r2, #52	; 0x34
    fe30:	7812      	ldrb	r2, [r2, #0]
    fe32:	2a00      	cmp	r2, #0
    fe34:	d104      	bne.n	fe40 <RADIO_FSKSyncAddr+0x1c>
    fe36:	0019      	movs	r1, r3
    fe38:	3358      	adds	r3, #88	; 0x58
    fe3a:	312c      	adds	r1, #44	; 0x2c
    fe3c:	700a      	strb	r2, [r1, #0]
    fe3e:	701a      	strb	r2, [r3, #0]
    fe40:	4b03      	ldr	r3, [pc, #12]	; (fe50 <RADIO_FSKSyncAddr+0x2c>)
    fe42:	4798      	blx	r3
    fe44:	bd10      	pop	{r4, pc}
    fe46:	46c0      	nop			; (mov r8, r8)
    fe48:	000001ad 	.word	0x000001ad
    fe4c:	200017c8 	.word	0x200017c8
    fe50:	000001ed 	.word	0x000001ed

0000fe54 <RADIO_FSKFifoLevel>:
    fe54:	b570      	push	{r4, r5, r6, lr}
    fe56:	4b22      	ldr	r3, [pc, #136]	; (fee0 <RADIO_FSKFifoLevel+0x8c>)
    fe58:	4798      	blx	r3
    fe5a:	4d22      	ldr	r5, [pc, #136]	; (fee4 <RADIO_FSKFifoLevel+0x90>)
    fe5c:	002a      	movs	r2, r5
    fe5e:	002b      	movs	r3, r5
    fe60:	322c      	adds	r2, #44	; 0x2c
    fe62:	3358      	adds	r3, #88	; 0x58
    fe64:	7810      	ldrb	r0, [r2, #0]
    fe66:	7819      	ldrb	r1, [r3, #0]
    fe68:	4288      	cmp	r0, r1
    fe6a:	d105      	bne.n	fe78 <RADIO_FSKFifoLevel+0x24>
    fe6c:	7812      	ldrb	r2, [r2, #0]
    fe6e:	2a00      	cmp	r2, #0
    fe70:	d002      	beq.n	fe78 <RADIO_FSKFifoLevel+0x24>
    fe72:	781b      	ldrb	r3, [r3, #0]
    fe74:	2b00      	cmp	r3, #0
    fe76:	d11f      	bne.n	feb8 <RADIO_FSKFifoLevel+0x64>
    fe78:	0029      	movs	r1, r5
    fe7a:	312c      	adds	r1, #44	; 0x2c
    fe7c:	7808      	ldrb	r0, [r1, #0]
    fe7e:	b2c0      	uxtb	r0, r0
    fe80:	2800      	cmp	r0, #0
    fe82:	d102      	bne.n	fe8a <RADIO_FSKFifoLevel+0x36>
    fe84:	2201      	movs	r2, #1
    fe86:	4b18      	ldr	r3, [pc, #96]	; (fee8 <RADIO_FSKFifoLevel+0x94>)
    fe88:	4798      	blx	r3
    fe8a:	002e      	movs	r6, r5
    fe8c:	002c      	movs	r4, r5
    fe8e:	362c      	adds	r6, #44	; 0x2c
    fe90:	3458      	adds	r4, #88	; 0x58
    fe92:	7833      	ldrb	r3, [r6, #0]
    fe94:	7822      	ldrb	r2, [r4, #0]
    fe96:	1a9b      	subs	r3, r3, r2
    fe98:	b2db      	uxtb	r3, r3
    fe9a:	2b3e      	cmp	r3, #62	; 0x3e
    fe9c:	d80f      	bhi.n	febe <RADIO_FSKFifoLevel+0x6a>
    fe9e:	7823      	ldrb	r3, [r4, #0]
    fea0:	7832      	ldrb	r2, [r6, #0]
    fea2:	7821      	ldrb	r1, [r4, #0]
    fea4:	2000      	movs	r0, #0
    fea6:	1a52      	subs	r2, r2, r1
    fea8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    feaa:	b2d2      	uxtb	r2, r2
    feac:	18c9      	adds	r1, r1, r3
    feae:	4b0e      	ldr	r3, [pc, #56]	; (fee8 <RADIO_FSKFifoLevel+0x94>)
    feb0:	4798      	blx	r3
    feb2:	7833      	ldrb	r3, [r6, #0]
    feb4:	b2db      	uxtb	r3, r3
    feb6:	7023      	strb	r3, [r4, #0]
    feb8:	4b0c      	ldr	r3, [pc, #48]	; (feec <RADIO_FSKFifoLevel+0x98>)
    feba:	4798      	blx	r3
    febc:	bd70      	pop	{r4, r5, r6, pc}
    febe:	7833      	ldrb	r3, [r6, #0]
    fec0:	7822      	ldrb	r2, [r4, #0]
    fec2:	1a9b      	subs	r3, r3, r2
    fec4:	b2db      	uxtb	r3, r3
    fec6:	2b3f      	cmp	r3, #63	; 0x3f
    fec8:	d9f6      	bls.n	feb8 <RADIO_FSKFifoLevel+0x64>
    feca:	7823      	ldrb	r3, [r4, #0]
    fecc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    fece:	223f      	movs	r2, #63	; 0x3f
    fed0:	18c9      	adds	r1, r1, r3
    fed2:	2000      	movs	r0, #0
    fed4:	4b04      	ldr	r3, [pc, #16]	; (fee8 <RADIO_FSKFifoLevel+0x94>)
    fed6:	4798      	blx	r3
    fed8:	7823      	ldrb	r3, [r4, #0]
    feda:	333f      	adds	r3, #63	; 0x3f
    fedc:	e7ea      	b.n	feb4 <RADIO_FSKFifoLevel+0x60>
    fede:	46c0      	nop			; (mov r8, r8)
    fee0:	000001ad 	.word	0x000001ad
    fee4:	200017c8 	.word	0x200017c8
    fee8:	000031a5 	.word	0x000031a5
    feec:	000001ed 	.word	0x000001ed

0000fef0 <RADIO_FSKFifoEmpty>:
    fef0:	b510      	push	{r4, lr}
    fef2:	4b03      	ldr	r3, [pc, #12]	; (ff00 <RADIO_FSKFifoEmpty+0x10>)
    fef4:	7819      	ldrb	r1, [r3, #0]
    fef6:	4b03      	ldr	r3, [pc, #12]	; (ff04 <RADIO_FSKFifoEmpty+0x14>)
    fef8:	6818      	ldr	r0, [r3, #0]
    fefa:	4b03      	ldr	r3, [pc, #12]	; (ff08 <RADIO_FSKFifoEmpty+0x18>)
    fefc:	4798      	blx	r3
    fefe:	bd10      	pop	{r4, pc}
    ff00:	2000100c 	.word	0x2000100c
    ff04:	20001008 	.word	0x20001008
    ff08:	0000fd9d 	.word	0x0000fd9d

0000ff0c <RADIO_GetData>:
    ff0c:	4b03      	ldr	r3, [pc, #12]	; (ff1c <RADIO_GetData+0x10>)
    ff0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ff10:	332c      	adds	r3, #44	; 0x2c
    ff12:	6002      	str	r2, [r0, #0]
    ff14:	781b      	ldrb	r3, [r3, #0]
    ff16:	2000      	movs	r0, #0
    ff18:	800b      	strh	r3, [r1, #0]
    ff1a:	4770      	bx	lr
    ff1c:	200017c8 	.word	0x200017c8

0000ff20 <Radio_EnableRfControl>:
    ff20:	b510      	push	{r4, lr}
    ff22:	4b08      	ldr	r3, [pc, #32]	; (ff44 <Radio_EnableRfControl+0x24>)
    ff24:	0001      	movs	r1, r0
    ff26:	681a      	ldr	r2, [r3, #0]
    ff28:	4807      	ldr	r0, [pc, #28]	; (ff48 <Radio_EnableRfControl+0x28>)
    ff2a:	4c08      	ldr	r4, [pc, #32]	; (ff4c <Radio_EnableRfControl+0x2c>)
    ff2c:	1812      	adds	r2, r2, r0
    ff2e:	2000      	movs	r0, #0
    ff30:	42a2      	cmp	r2, r4
    ff32:	d804      	bhi.n	ff3e <Radio_EnableRfControl+0x1e>
    ff34:	3305      	adds	r3, #5
    ff36:	7fdb      	ldrb	r3, [r3, #31]
    ff38:	1e58      	subs	r0, r3, #1
    ff3a:	4183      	sbcs	r3, r0
    ff3c:	1c58      	adds	r0, r3, #1
    ff3e:	4b04      	ldr	r3, [pc, #16]	; (ff50 <Radio_EnableRfControl+0x30>)
    ff40:	4798      	blx	r3
    ff42:	bd10      	pop	{r4, pc}
    ff44:	200017c8 	.word	0x200017c8
    ff48:	cc9eec80 	.word	0xcc9eec80
    ff4c:	096ae380 	.word	0x096ae380
    ff50:	00003211 	.word	0x00003211

0000ff54 <RADIO_RxHandler>:
    ff54:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ff56:	4b33      	ldr	r3, [pc, #204]	; (10024 <RADIO_RxHandler+0xd0>)
    ff58:	2000      	movs	r0, #0
    ff5a:	4798      	blx	r3
    ff5c:	4e32      	ldr	r6, [pc, #200]	; (10028 <RADIO_RxHandler+0xd4>)
    ff5e:	4b33      	ldr	r3, [pc, #204]	; (1002c <RADIO_RxHandler+0xd8>)
    ff60:	8830      	ldrh	r0, [r6, #0]
    ff62:	2800      	cmp	r0, #0
    ff64:	d100      	bne.n	ff68 <RADIO_RxHandler+0x14>
    ff66:	3004      	adds	r0, #4
    ff68:	4798      	blx	r3
    ff6a:	4c31      	ldr	r4, [pc, #196]	; (10030 <RADIO_RxHandler+0xdc>)
    ff6c:	4d31      	ldr	r5, [pc, #196]	; (10034 <RADIO_RxHandler+0xe0>)
    ff6e:	0023      	movs	r3, r4
    ff70:	3334      	adds	r3, #52	; 0x34
    ff72:	7819      	ldrb	r1, [r3, #0]
    ff74:	2901      	cmp	r1, #1
    ff76:	d122      	bne.n	ffbe <RADIO_RxHandler+0x6a>
    ff78:	2022      	movs	r0, #34	; 0x22
    ff7a:	47a8      	blx	r5
    ff7c:	2100      	movs	r1, #0
    ff7e:	2040      	movs	r0, #64	; 0x40
    ff80:	47a8      	blx	r5
    ff82:	2100      	movs	r1, #0
    ff84:	2041      	movs	r0, #65	; 0x41
    ff86:	47a8      	blx	r5
    ff88:	8832      	ldrh	r2, [r6, #0]
    ff8a:	4b2b      	ldr	r3, [pc, #172]	; (10038 <RADIO_RxHandler+0xe4>)
    ff8c:	2a00      	cmp	r2, #0
    ff8e:	d131      	bne.n	fff4 <RADIO_RxHandler+0xa0>
    ff90:	0021      	movs	r1, r4
    ff92:	2005      	movs	r0, #5
    ff94:	3134      	adds	r1, #52	; 0x34
    ff96:	7809      	ldrb	r1, [r1, #0]
    ff98:	4798      	blx	r3
    ff9a:	68e3      	ldr	r3, [r4, #12]
    ff9c:	2b00      	cmp	r3, #0
    ff9e:	d00c      	beq.n	ffba <RADIO_RxHandler+0x66>
    ffa0:	8832      	ldrh	r2, [r6, #0]
    ffa2:	2a00      	cmp	r2, #0
    ffa4:	d009      	beq.n	ffba <RADIO_RxHandler+0x66>
    ffa6:	21fa      	movs	r1, #250	; 0xfa
    ffa8:	2200      	movs	r2, #0
    ffaa:	342f      	adds	r4, #47	; 0x2f
    ffac:	0089      	lsls	r1, r1, #2
    ffae:	7820      	ldrb	r0, [r4, #0]
    ffb0:	4359      	muls	r1, r3
    ffb2:	9200      	str	r2, [sp, #0]
    ffb4:	4b21      	ldr	r3, [pc, #132]	; (1003c <RADIO_RxHandler+0xe8>)
    ffb6:	4c22      	ldr	r4, [pc, #136]	; (10040 <RADIO_RxHandler+0xec>)
    ffb8:	47a0      	blx	r4
    ffba:	2000      	movs	r0, #0
    ffbc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    ffbe:	0023      	movs	r3, r4
    ffc0:	3338      	adds	r3, #56	; 0x38
    ffc2:	7819      	ldrb	r1, [r3, #0]
    ffc4:	2012      	movs	r0, #18
    ffc6:	47a8      	blx	r5
    ffc8:	0023      	movs	r3, r4
    ffca:	3339      	adds	r3, #57	; 0x39
    ffcc:	7819      	ldrb	r1, [r3, #0]
    ffce:	2013      	movs	r0, #19
    ffd0:	47a8      	blx	r5
    ffd2:	210c      	movs	r1, #12
    ffd4:	2040      	movs	r0, #64	; 0x40
    ffd6:	47a8      	blx	r5
    ffd8:	2100      	movs	r1, #0
    ffda:	2041      	movs	r0, #65	; 0x41
    ffdc:	47a8      	blx	r5
    ffde:	0022      	movs	r2, r4
    ffe0:	2300      	movs	r3, #0
    ffe2:	3256      	adds	r2, #86	; 0x56
    ffe4:	8013      	strh	r3, [r2, #0]
    ffe6:	0022      	movs	r2, r4
    ffe8:	322c      	adds	r2, #44	; 0x2c
    ffea:	7013      	strb	r3, [r2, #0]
    ffec:	0022      	movs	r2, r4
    ffee:	3258      	adds	r2, #88	; 0x58
    fff0:	7013      	strb	r3, [r2, #0]
    fff2:	e7c9      	b.n	ff88 <RADIO_RxHandler+0x34>
    fff4:	0022      	movs	r2, r4
    fff6:	3234      	adds	r2, #52	; 0x34
    fff8:	7811      	ldrb	r1, [r2, #0]
    fffa:	2200      	movs	r2, #0
    fffc:	2901      	cmp	r1, #1
    fffe:	d101      	bne.n	10004 <RADIO_RxHandler+0xb0>
   10000:	2006      	movs	r0, #6
   10002:	e7c9      	b.n	ff98 <RADIO_RxHandler+0x44>
   10004:	0011      	movs	r1, r2
   10006:	2005      	movs	r0, #5
   10008:	4798      	blx	r3
   1000a:	21fa      	movs	r1, #250	; 0xfa
   1000c:	8833      	ldrh	r3, [r6, #0]
   1000e:	0089      	lsls	r1, r1, #2
   10010:	4359      	muls	r1, r3
   10012:	0023      	movs	r3, r4
   10014:	2200      	movs	r2, #0
   10016:	332e      	adds	r3, #46	; 0x2e
   10018:	7818      	ldrb	r0, [r3, #0]
   1001a:	4d09      	ldr	r5, [pc, #36]	; (10040 <RADIO_RxHandler+0xec>)
   1001c:	9200      	str	r2, [sp, #0]
   1001e:	4b09      	ldr	r3, [pc, #36]	; (10044 <RADIO_RxHandler+0xf0>)
   10020:	47a8      	blx	r5
   10022:	e7ba      	b.n	ff9a <RADIO_RxHandler+0x46>
   10024:	0000ff21 	.word	0x0000ff21
   10028:	20000ff8 	.word	0x20000ff8
   1002c:	0000f6ad 	.word	0x0000f6ad
   10030:	200017c8 	.word	0x200017c8
   10034:	00003111 	.word	0x00003111
   10038:	00009df9 	.word	0x00009df9
   1003c:	0001007d 	.word	0x0001007d
   10040:	00009795 	.word	0x00009795
   10044:	0001010d 	.word	0x0001010d

00010048 <Radio_DisableRfControl>:
   10048:	b510      	push	{r4, lr}
   1004a:	4b08      	ldr	r3, [pc, #32]	; (1006c <Radio_DisableRfControl+0x24>)
   1004c:	0001      	movs	r1, r0
   1004e:	681a      	ldr	r2, [r3, #0]
   10050:	4807      	ldr	r0, [pc, #28]	; (10070 <Radio_DisableRfControl+0x28>)
   10052:	4c08      	ldr	r4, [pc, #32]	; (10074 <Radio_DisableRfControl+0x2c>)
   10054:	1812      	adds	r2, r2, r0
   10056:	2000      	movs	r0, #0
   10058:	42a2      	cmp	r2, r4
   1005a:	d804      	bhi.n	10066 <Radio_DisableRfControl+0x1e>
   1005c:	3305      	adds	r3, #5
   1005e:	7fdb      	ldrb	r3, [r3, #31]
   10060:	1e58      	subs	r0, r3, #1
   10062:	4183      	sbcs	r3, r0
   10064:	1c58      	adds	r0, r3, #1
   10066:	4b04      	ldr	r3, [pc, #16]	; (10078 <Radio_DisableRfControl+0x30>)
   10068:	4798      	blx	r3
   1006a:	bd10      	pop	{r4, pc}
   1006c:	200017c8 	.word	0x200017c8
   10070:	cc9eec80 	.word	0xcc9eec80
   10074:	096ae380 	.word	0x096ae380
   10078:	00003239 	.word	0x00003239

0001007c <Radio_WatchdogTimeout>:
   1007c:	b510      	push	{r4, lr}
   1007e:	4b0e      	ldr	r3, [pc, #56]	; (100b8 <Radio_WatchdogTimeout+0x3c>)
   10080:	781a      	ldrb	r2, [r3, #0]
   10082:	2a04      	cmp	r2, #4
   10084:	d10b      	bne.n	1009e <Radio_WatchdogTimeout+0x22>
   10086:	2320      	movs	r3, #32
   10088:	4a0c      	ldr	r2, [pc, #48]	; (100bc <Radio_WatchdogTimeout+0x40>)
   1008a:	2000      	movs	r0, #0
   1008c:	8811      	ldrh	r1, [r2, #0]
   1008e:	430b      	orrs	r3, r1
   10090:	8013      	strh	r3, [r2, #0]
   10092:	4b0b      	ldr	r3, [pc, #44]	; (100c0 <Radio_WatchdogTimeout+0x44>)
   10094:	4798      	blx	r3
   10096:	2002      	movs	r0, #2
   10098:	4b0a      	ldr	r3, [pc, #40]	; (100c4 <Radio_WatchdogTimeout+0x48>)
   1009a:	4798      	blx	r3
   1009c:	bd10      	pop	{r4, pc}
   1009e:	781b      	ldrb	r3, [r3, #0]
   100a0:	2b02      	cmp	r3, #2
   100a2:	d1fb      	bne.n	1009c <Radio_WatchdogTimeout+0x20>
   100a4:	4a05      	ldr	r2, [pc, #20]	; (100bc <Radio_WatchdogTimeout+0x40>)
   100a6:	330e      	adds	r3, #14
   100a8:	8811      	ldrh	r1, [r2, #0]
   100aa:	2001      	movs	r0, #1
   100ac:	430b      	orrs	r3, r1
   100ae:	8013      	strh	r3, [r2, #0]
   100b0:	4b03      	ldr	r3, [pc, #12]	; (100c0 <Radio_WatchdogTimeout+0x44>)
   100b2:	4798      	blx	r3
   100b4:	2001      	movs	r0, #1
   100b6:	e7ef      	b.n	10098 <Radio_WatchdogTimeout+0x1c>
   100b8:	20001dc3 	.word	0x20001dc3
   100bc:	20001dc0 	.word	0x20001dc0
   100c0:	00010049 	.word	0x00010049
   100c4:	0000fc6d 	.word	0x0000fc6d

000100c8 <RADIO_RxTimeout>:
   100c8:	b510      	push	{r4, lr}
   100ca:	4b0a      	ldr	r3, [pc, #40]	; (100f4 <RADIO_RxTimeout+0x2c>)
   100cc:	332f      	adds	r3, #47	; 0x2f
   100ce:	7818      	ldrb	r0, [r3, #0]
   100d0:	4b09      	ldr	r3, [pc, #36]	; (100f8 <RADIO_RxTimeout+0x30>)
   100d2:	4798      	blx	r3
   100d4:	2000      	movs	r0, #0
   100d6:	4b09      	ldr	r3, [pc, #36]	; (100fc <RADIO_RxTimeout+0x34>)
   100d8:	4798      	blx	r3
   100da:	2180      	movs	r1, #128	; 0x80
   100dc:	2012      	movs	r0, #18
   100de:	4b08      	ldr	r3, [pc, #32]	; (10100 <RADIO_RxTimeout+0x38>)
   100e0:	4798      	blx	r3
   100e2:	2340      	movs	r3, #64	; 0x40
   100e4:	4a07      	ldr	r2, [pc, #28]	; (10104 <RADIO_RxTimeout+0x3c>)
   100e6:	2002      	movs	r0, #2
   100e8:	8811      	ldrh	r1, [r2, #0]
   100ea:	430b      	orrs	r3, r1
   100ec:	8013      	strh	r3, [r2, #0]
   100ee:	4b06      	ldr	r3, [pc, #24]	; (10108 <RADIO_RxTimeout+0x40>)
   100f0:	4798      	blx	r3
   100f2:	bd10      	pop	{r4, pc}
   100f4:	200017c8 	.word	0x200017c8
   100f8:	00009aa1 	.word	0x00009aa1
   100fc:	00010049 	.word	0x00010049
   10100:	00003111 	.word	0x00003111
   10104:	20001dc0 	.word	0x20001dc0
   10108:	0000fc6d 	.word	0x0000fc6d

0001010c <Radio_RxFSKTimeout>:
   1010c:	b510      	push	{r4, lr}
   1010e:	4b08      	ldr	r3, [pc, #32]	; (10130 <Radio_RxFSKTimeout+0x24>)
   10110:	332f      	adds	r3, #47	; 0x2f
   10112:	7818      	ldrb	r0, [r3, #0]
   10114:	4b07      	ldr	r3, [pc, #28]	; (10134 <Radio_RxFSKTimeout+0x28>)
   10116:	4798      	blx	r3
   10118:	2000      	movs	r0, #0
   1011a:	4b07      	ldr	r3, [pc, #28]	; (10138 <Radio_RxFSKTimeout+0x2c>)
   1011c:	4798      	blx	r3
   1011e:	2380      	movs	r3, #128	; 0x80
   10120:	4a06      	ldr	r2, [pc, #24]	; (1013c <Radio_RxFSKTimeout+0x30>)
   10122:	2002      	movs	r0, #2
   10124:	8811      	ldrh	r1, [r2, #0]
   10126:	430b      	orrs	r3, r1
   10128:	8013      	strh	r3, [r2, #0]
   1012a:	4b05      	ldr	r3, [pc, #20]	; (10140 <Radio_RxFSKTimeout+0x34>)
   1012c:	4798      	blx	r3
   1012e:	bd10      	pop	{r4, pc}
   10130:	200017c8 	.word	0x200017c8
   10134:	00009aa1 	.word	0x00009aa1
   10138:	00010049 	.word	0x00010049
   1013c:	20001dc0 	.word	0x20001dc0
   10140:	0000fc6d 	.word	0x0000fc6d

00010144 <RADIO_TxDone>:
   10144:	b570      	push	{r4, r5, r6, lr}
   10146:	4b14      	ldr	r3, [pc, #80]	; (10198 <RADIO_TxDone+0x54>)
   10148:	332f      	adds	r3, #47	; 0x2f
   1014a:	7818      	ldrb	r0, [r3, #0]
   1014c:	4b13      	ldr	r3, [pc, #76]	; (1019c <RADIO_TxDone+0x58>)
   1014e:	4798      	blx	r3
   10150:	2001      	movs	r0, #1
   10152:	4b13      	ldr	r3, [pc, #76]	; (101a0 <RADIO_TxDone+0x5c>)
   10154:	4798      	blx	r3
   10156:	4b13      	ldr	r3, [pc, #76]	; (101a4 <RADIO_TxDone+0x60>)
   10158:	2108      	movs	r1, #8
   1015a:	2012      	movs	r0, #18
   1015c:	4798      	blx	r3
   1015e:	4b12      	ldr	r3, [pc, #72]	; (101a8 <RADIO_TxDone+0x64>)
   10160:	781a      	ldrb	r2, [r3, #0]
   10162:	4b12      	ldr	r3, [pc, #72]	; (101ac <RADIO_TxDone+0x68>)
   10164:	2a02      	cmp	r2, #2
   10166:	d002      	beq.n	1016e <RADIO_TxDone+0x2a>
   10168:	881a      	ldrh	r2, [r3, #0]
   1016a:	0692      	lsls	r2, r2, #26
   1016c:	d413      	bmi.n	10196 <RADIO_TxDone+0x52>
   1016e:	2001      	movs	r0, #1
   10170:	881a      	ldrh	r2, [r3, #0]
   10172:	4302      	orrs	r2, r0
   10174:	801a      	strh	r2, [r3, #0]
   10176:	4b0e      	ldr	r3, [pc, #56]	; (101b0 <RADIO_TxDone+0x6c>)
   10178:	4798      	blx	r3
   1017a:	4b0e      	ldr	r3, [pc, #56]	; (101b4 <RADIO_TxDone+0x70>)
   1017c:	4798      	blx	r3
   1017e:	4c0e      	ldr	r4, [pc, #56]	; (101b8 <RADIO_TxDone+0x74>)
   10180:	4d0e      	ldr	r5, [pc, #56]	; (101bc <RADIO_TxDone+0x78>)
   10182:	6822      	ldr	r2, [r4, #0]
   10184:	6863      	ldr	r3, [r4, #4]
   10186:	1a80      	subs	r0, r0, r2
   10188:	4199      	sbcs	r1, r3
   1018a:	22fa      	movs	r2, #250	; 0xfa
   1018c:	2300      	movs	r3, #0
   1018e:	0092      	lsls	r2, r2, #2
   10190:	47a8      	blx	r5
   10192:	6020      	str	r0, [r4, #0]
   10194:	6061      	str	r1, [r4, #4]
   10196:	bd70      	pop	{r4, r5, r6, pc}
   10198:	200017c8 	.word	0x200017c8
   1019c:	00009aa1 	.word	0x00009aa1
   101a0:	00010049 	.word	0x00010049
   101a4:	00003111 	.word	0x00003111
   101a8:	20001dc3 	.word	0x20001dc3
   101ac:	20001dc0 	.word	0x20001dc0
   101b0:	0000fc6d 	.word	0x0000fc6d
   101b4:	0000973d 	.word	0x0000973d
   101b8:	20001000 	.word	0x20001000
   101bc:	0001116d 	.word	0x0001116d

000101c0 <RADIO_FSKPacketSent>:
   101c0:	b570      	push	{r4, r5, r6, lr}
   101c2:	4b15      	ldr	r3, [pc, #84]	; (10218 <RADIO_FSKPacketSent+0x58>)
   101c4:	203f      	movs	r0, #63	; 0x3f
   101c6:	4798      	blx	r3
   101c8:	0703      	lsls	r3, r0, #28
   101ca:	d524      	bpl.n	10216 <RADIO_FSKPacketSent+0x56>
   101cc:	4b13      	ldr	r3, [pc, #76]	; (1021c <RADIO_FSKPacketSent+0x5c>)
   101ce:	332f      	adds	r3, #47	; 0x2f
   101d0:	7818      	ldrb	r0, [r3, #0]
   101d2:	4b13      	ldr	r3, [pc, #76]	; (10220 <RADIO_FSKPacketSent+0x60>)
   101d4:	4798      	blx	r3
   101d6:	4b13      	ldr	r3, [pc, #76]	; (10224 <RADIO_FSKPacketSent+0x64>)
   101d8:	2001      	movs	r0, #1
   101da:	4798      	blx	r3
   101dc:	4b12      	ldr	r3, [pc, #72]	; (10228 <RADIO_FSKPacketSent+0x68>)
   101de:	4c13      	ldr	r4, [pc, #76]	; (1022c <RADIO_FSKPacketSent+0x6c>)
   101e0:	781b      	ldrb	r3, [r3, #0]
   101e2:	2b02      	cmp	r3, #2
   101e4:	d002      	beq.n	101ec <RADIO_FSKPacketSent+0x2c>
   101e6:	8823      	ldrh	r3, [r4, #0]
   101e8:	069b      	lsls	r3, r3, #26
   101ea:	d414      	bmi.n	10216 <RADIO_FSKPacketSent+0x56>
   101ec:	4b10      	ldr	r3, [pc, #64]	; (10230 <RADIO_FSKPacketSent+0x70>)
   101ee:	4798      	blx	r3
   101f0:	4d10      	ldr	r5, [pc, #64]	; (10234 <RADIO_FSKPacketSent+0x74>)
   101f2:	4e11      	ldr	r6, [pc, #68]	; (10238 <RADIO_FSKPacketSent+0x78>)
   101f4:	682a      	ldr	r2, [r5, #0]
   101f6:	686b      	ldr	r3, [r5, #4]
   101f8:	1a80      	subs	r0, r0, r2
   101fa:	4199      	sbcs	r1, r3
   101fc:	22fa      	movs	r2, #250	; 0xfa
   101fe:	2300      	movs	r3, #0
   10200:	0092      	lsls	r2, r2, #2
   10202:	47b0      	blx	r6
   10204:	4b0d      	ldr	r3, [pc, #52]	; (1023c <RADIO_FSKPacketSent+0x7c>)
   10206:	6028      	str	r0, [r5, #0]
   10208:	6069      	str	r1, [r5, #4]
   1020a:	2001      	movs	r0, #1
   1020c:	4798      	blx	r3
   1020e:	2304      	movs	r3, #4
   10210:	8822      	ldrh	r2, [r4, #0]
   10212:	4313      	orrs	r3, r2
   10214:	8023      	strh	r3, [r4, #0]
   10216:	bd70      	pop	{r4, r5, r6, pc}
   10218:	00003139 	.word	0x00003139
   1021c:	200017c8 	.word	0x200017c8
   10220:	00009aa1 	.word	0x00009aa1
   10224:	00010049 	.word	0x00010049
   10228:	20001dc3 	.word	0x20001dc3
   1022c:	20001dc0 	.word	0x20001dc0
   10230:	0000973d 	.word	0x0000973d
   10234:	20001000 	.word	0x20001000
   10238:	0001116d 	.word	0x0001116d
   1023c:	0000fc6d 	.word	0x0000fc6d

00010240 <RADIO_RxDone>:
   10240:	b570      	push	{r4, r5, r6, lr}
   10242:	2012      	movs	r0, #18
   10244:	4e16      	ldr	r6, [pc, #88]	; (102a0 <RADIO_RxDone+0x60>)
   10246:	47b0      	blx	r6
   10248:	4b16      	ldr	r3, [pc, #88]	; (102a4 <RADIO_RxDone+0x64>)
   1024a:	0005      	movs	r5, r0
   1024c:	2170      	movs	r1, #112	; 0x70
   1024e:	2012      	movs	r0, #18
   10250:	4798      	blx	r3
   10252:	2350      	movs	r3, #80	; 0x50
   10254:	402b      	ands	r3, r5
   10256:	2b50      	cmp	r3, #80	; 0x50
   10258:	d119      	bne.n	1028e <RADIO_RxDone+0x4e>
   1025a:	4c13      	ldr	r4, [pc, #76]	; (102a8 <RADIO_RxDone+0x68>)
   1025c:	0023      	movs	r3, r4
   1025e:	332f      	adds	r3, #47	; 0x2f
   10260:	7818      	ldrb	r0, [r3, #0]
   10262:	4b12      	ldr	r3, [pc, #72]	; (102ac <RADIO_RxDone+0x6c>)
   10264:	4798      	blx	r3
   10266:	4b12      	ldr	r3, [pc, #72]	; (102b0 <RADIO_RxDone+0x70>)
   10268:	2000      	movs	r0, #0
   1026a:	4798      	blx	r3
   1026c:	3404      	adds	r4, #4
   1026e:	201c      	movs	r0, #28
   10270:	47b0      	blx	r6
   10272:	7fe2      	ldrb	r2, [r4, #31]
   10274:	4b0f      	ldr	r3, [pc, #60]	; (102b4 <RADIO_RxDone+0x74>)
   10276:	4910      	ldr	r1, [pc, #64]	; (102b8 <RADIO_RxDone+0x78>)
   10278:	2a00      	cmp	r2, #0
   1027a:	d003      	beq.n	10284 <RADIO_RxDone+0x44>
   1027c:	06aa      	lsls	r2, r5, #26
   1027e:	d407      	bmi.n	10290 <RADIO_RxDone+0x50>
   10280:	0642      	lsls	r2, r0, #25
   10282:	d505      	bpl.n	10290 <RADIO_RxDone+0x50>
   10284:	2002      	movs	r0, #2
   10286:	881a      	ldrh	r2, [r3, #0]
   10288:	4302      	orrs	r2, r0
   1028a:	801a      	strh	r2, [r3, #0]
   1028c:	4788      	blx	r1
   1028e:	bd70      	pop	{r4, r5, r6, pc}
   10290:	2280      	movs	r2, #128	; 0x80
   10292:	8818      	ldrh	r0, [r3, #0]
   10294:	0052      	lsls	r2, r2, #1
   10296:	4302      	orrs	r2, r0
   10298:	801a      	strh	r2, [r3, #0]
   1029a:	2002      	movs	r0, #2
   1029c:	e7f6      	b.n	1028c <RADIO_RxDone+0x4c>
   1029e:	46c0      	nop			; (mov r8, r8)
   102a0:	00003139 	.word	0x00003139
   102a4:	00003111 	.word	0x00003111
   102a8:	200017c8 	.word	0x200017c8
   102ac:	00009aa1 	.word	0x00009aa1
   102b0:	00010049 	.word	0x00010049
   102b4:	20001dc0 	.word	0x20001dc0
   102b8:	0000fc6d 	.word	0x0000fc6d

000102bc <RADIO_FSKPayloadReady>:
   102bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   102be:	203f      	movs	r0, #63	; 0x3f
   102c0:	4b39      	ldr	r3, [pc, #228]	; (103a8 <RADIO_FSKPayloadReady+0xec>)
   102c2:	4798      	blx	r3
   102c4:	0743      	lsls	r3, r0, #29
   102c6:	d559      	bpl.n	1037c <RADIO_FSKPayloadReady+0xc0>
   102c8:	4c38      	ldr	r4, [pc, #224]	; (103ac <RADIO_FSKPayloadReady+0xf0>)
   102ca:	4d39      	ldr	r5, [pc, #228]	; (103b0 <RADIO_FSKPayloadReady+0xf4>)
   102cc:	1d23      	adds	r3, r4, #4
   102ce:	7fdb      	ldrb	r3, [r3, #31]
   102d0:	2b01      	cmp	r3, #1
   102d2:	d154      	bne.n	1037e <RADIO_FSKPayloadReady+0xc2>
   102d4:	2202      	movs	r2, #2
   102d6:	4210      	tst	r0, r2
   102d8:	d048      	beq.n	1036c <RADIO_FSKPayloadReady+0xb0>
   102da:	0023      	movs	r3, r4
   102dc:	332f      	adds	r3, #47	; 0x2f
   102de:	7818      	ldrb	r0, [r3, #0]
   102e0:	4e34      	ldr	r6, [pc, #208]	; (103b4 <RADIO_FSKPayloadReady+0xf8>)
   102e2:	47b0      	blx	r6
   102e4:	0023      	movs	r3, r4
   102e6:	332e      	adds	r3, #46	; 0x2e
   102e8:	7818      	ldrb	r0, [r3, #0]
   102ea:	47b0      	blx	r6
   102ec:	4b32      	ldr	r3, [pc, #200]	; (103b8 <RADIO_FSKPayloadReady+0xfc>)
   102ee:	4798      	blx	r3
   102f0:	0022      	movs	r2, r4
   102f2:	0023      	movs	r3, r4
   102f4:	322c      	adds	r2, #44	; 0x2c
   102f6:	3358      	adds	r3, #88	; 0x58
   102f8:	7810      	ldrb	r0, [r2, #0]
   102fa:	7819      	ldrb	r1, [r3, #0]
   102fc:	4288      	cmp	r0, r1
   102fe:	d105      	bne.n	1030c <RADIO_FSKPayloadReady+0x50>
   10300:	7812      	ldrb	r2, [r2, #0]
   10302:	2a00      	cmp	r2, #0
   10304:	d002      	beq.n	1030c <RADIO_FSKPayloadReady+0x50>
   10306:	781b      	ldrb	r3, [r3, #0]
   10308:	2b00      	cmp	r3, #0
   1030a:	d118      	bne.n	1033e <RADIO_FSKPayloadReady+0x82>
   1030c:	0021      	movs	r1, r4
   1030e:	312c      	adds	r1, #44	; 0x2c
   10310:	7808      	ldrb	r0, [r1, #0]
   10312:	b2c0      	uxtb	r0, r0
   10314:	2800      	cmp	r0, #0
   10316:	d102      	bne.n	1031e <RADIO_FSKPayloadReady+0x62>
   10318:	2201      	movs	r2, #1
   1031a:	4b28      	ldr	r3, [pc, #160]	; (103bc <RADIO_FSKPayloadReady+0x100>)
   1031c:	4798      	blx	r3
   1031e:	0026      	movs	r6, r4
   10320:	0027      	movs	r7, r4
   10322:	3658      	adds	r6, #88	; 0x58
   10324:	7830      	ldrb	r0, [r6, #0]
   10326:	372c      	adds	r7, #44	; 0x2c
   10328:	b2c0      	uxtb	r0, r0
   1032a:	2800      	cmp	r0, #0
   1032c:	d110      	bne.n	10350 <RADIO_FSKPayloadReady+0x94>
   1032e:	783a      	ldrb	r2, [r7, #0]
   10330:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   10332:	b2d2      	uxtb	r2, r2
   10334:	4b21      	ldr	r3, [pc, #132]	; (103bc <RADIO_FSKPayloadReady+0x100>)
   10336:	4798      	blx	r3
   10338:	783b      	ldrb	r3, [r7, #0]
   1033a:	b2db      	uxtb	r3, r3
   1033c:	7033      	strb	r3, [r6, #0]
   1033e:	4b20      	ldr	r3, [pc, #128]	; (103c0 <RADIO_FSKPayloadReady+0x104>)
   10340:	4798      	blx	r3
   10342:	4b20      	ldr	r3, [pc, #128]	; (103c4 <RADIO_FSKPayloadReady+0x108>)
   10344:	2000      	movs	r0, #0
   10346:	4798      	blx	r3
   10348:	2308      	movs	r3, #8
   1034a:	882a      	ldrh	r2, [r5, #0]
   1034c:	4313      	orrs	r3, r2
   1034e:	e011      	b.n	10374 <RADIO_FSKPayloadReady+0xb8>
   10350:	783b      	ldrb	r3, [r7, #0]
   10352:	7832      	ldrb	r2, [r6, #0]
   10354:	1a9b      	subs	r3, r3, r2
   10356:	2b00      	cmp	r3, #0
   10358:	ddf1      	ble.n	1033e <RADIO_FSKPayloadReady+0x82>
   1035a:	7833      	ldrb	r3, [r6, #0]
   1035c:	783a      	ldrb	r2, [r7, #0]
   1035e:	7831      	ldrb	r1, [r6, #0]
   10360:	2000      	movs	r0, #0
   10362:	1a52      	subs	r2, r2, r1
   10364:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   10366:	b2d2      	uxtb	r2, r2
   10368:	18c9      	adds	r1, r1, r3
   1036a:	e7e3      	b.n	10334 <RADIO_FSKPayloadReady+0x78>
   1036c:	2380      	movs	r3, #128	; 0x80
   1036e:	8829      	ldrh	r1, [r5, #0]
   10370:	005b      	lsls	r3, r3, #1
   10372:	430b      	orrs	r3, r1
   10374:	802b      	strh	r3, [r5, #0]
   10376:	2002      	movs	r0, #2
   10378:	4b13      	ldr	r3, [pc, #76]	; (103c8 <RADIO_FSKPayloadReady+0x10c>)
   1037a:	4798      	blx	r3
   1037c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1037e:	0023      	movs	r3, r4
   10380:	332f      	adds	r3, #47	; 0x2f
   10382:	4e0c      	ldr	r6, [pc, #48]	; (103b4 <RADIO_FSKPayloadReady+0xf8>)
   10384:	7818      	ldrb	r0, [r3, #0]
   10386:	47b0      	blx	r6
   10388:	0023      	movs	r3, r4
   1038a:	332e      	adds	r3, #46	; 0x2e
   1038c:	7818      	ldrb	r0, [r3, #0]
   1038e:	47b0      	blx	r6
   10390:	4e0e      	ldr	r6, [pc, #56]	; (103cc <RADIO_FSKPayloadReady+0x110>)
   10392:	2201      	movs	r2, #1
   10394:	0031      	movs	r1, r6
   10396:	2000      	movs	r0, #0
   10398:	4f08      	ldr	r7, [pc, #32]	; (103bc <RADIO_FSKPayloadReady+0x100>)
   1039a:	47b8      	blx	r7
   1039c:	7832      	ldrb	r2, [r6, #0]
   1039e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   103a0:	b2d2      	uxtb	r2, r2
   103a2:	2000      	movs	r0, #0
   103a4:	47b8      	blx	r7
   103a6:	e7cc      	b.n	10342 <RADIO_FSKPayloadReady+0x86>
   103a8:	00003139 	.word	0x00003139
   103ac:	200017c8 	.word	0x200017c8
   103b0:	20001dc0 	.word	0x20001dc0
   103b4:	00009aa1 	.word	0x00009aa1
   103b8:	000001ad 	.word	0x000001ad
   103bc:	000031a5 	.word	0x000031a5
   103c0:	000001ed 	.word	0x000001ed
   103c4:	00010049 	.word	0x00010049
   103c8:	0000fc6d 	.word	0x0000fc6d
   103cc:	200017f4 	.word	0x200017f4

000103d0 <Radio_SetClockInput>:
   103d0:	b510      	push	{r4, lr}
   103d2:	4b08      	ldr	r3, [pc, #32]	; (103f4 <Radio_SetClockInput+0x24>)
   103d4:	3355      	adds	r3, #85	; 0x55
   103d6:	781b      	ldrb	r3, [r3, #0]
   103d8:	2b00      	cmp	r3, #0
   103da:	d10a      	bne.n	103f2 <Radio_SetClockInput+0x22>
   103dc:	4b06      	ldr	r3, [pc, #24]	; (103f8 <Radio_SetClockInput+0x28>)
   103de:	204b      	movs	r0, #75	; 0x4b
   103e0:	4798      	blx	r3
   103e2:	2110      	movs	r1, #16
   103e4:	4301      	orrs	r1, r0
   103e6:	4b05      	ldr	r3, [pc, #20]	; (103fc <Radio_SetClockInput+0x2c>)
   103e8:	b2c9      	uxtb	r1, r1
   103ea:	204b      	movs	r0, #75	; 0x4b
   103ec:	4798      	blx	r3
   103ee:	4b04      	ldr	r3, [pc, #16]	; (10400 <Radio_SetClockInput+0x30>)
   103f0:	4798      	blx	r3
   103f2:	bd10      	pop	{r4, pc}
   103f4:	200017c8 	.word	0x200017c8
   103f8:	00003139 	.word	0x00003139
   103fc:	00003111 	.word	0x00003111
   10400:	00003259 	.word	0x00003259

00010404 <Radio_ResetClockInput>:
   10404:	b510      	push	{r4, lr}
   10406:	4b04      	ldr	r3, [pc, #16]	; (10418 <Radio_ResetClockInput+0x14>)
   10408:	3355      	adds	r3, #85	; 0x55
   1040a:	781b      	ldrb	r3, [r3, #0]
   1040c:	2b00      	cmp	r3, #0
   1040e:	d101      	bne.n	10414 <Radio_ResetClockInput+0x10>
   10410:	4b02      	ldr	r3, [pc, #8]	; (1041c <Radio_ResetClockInput+0x18>)
   10412:	4798      	blx	r3
   10414:	bd10      	pop	{r4, pc}
   10416:	46c0      	nop			; (mov r8, r8)
   10418:	200017c8 	.word	0x200017c8
   1041c:	00003275 	.word	0x00003275

00010420 <RADIO_InitDefaultAttributes>:
   10420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10422:	2501      	movs	r5, #1
   10424:	4b64      	ldr	r3, [pc, #400]	; (105b8 <RADIO_InitDefaultAttributes+0x198>)
   10426:	4c65      	ldr	r4, [pc, #404]	; (105bc <RADIO_InitDefaultAttributes+0x19c>)
   10428:	701d      	strb	r5, [r3, #0]
   1042a:	4b65      	ldr	r3, [pc, #404]	; (105c0 <RADIO_InitDefaultAttributes+0x1a0>)
   1042c:	2207      	movs	r2, #7
   1042e:	6023      	str	r3, [r4, #0]
   10430:	4b64      	ldr	r3, [pc, #400]	; (105c4 <RADIO_InitDefaultAttributes+0x1a4>)
   10432:	18a1      	adds	r1, r4, r2
   10434:	6063      	str	r3, [r4, #4]
   10436:	4b64      	ldr	r3, [pc, #400]	; (105c8 <RADIO_InitDefaultAttributes+0x1a8>)
   10438:	0027      	movs	r7, r4
   1043a:	60a3      	str	r3, [r4, #8]
   1043c:	0023      	movs	r3, r4
   1043e:	3334      	adds	r3, #52	; 0x34
   10440:	701d      	strb	r5, [r3, #0]
   10442:	0023      	movs	r3, r4
   10444:	3336      	adds	r3, #54	; 0x36
   10446:	701a      	strb	r2, [r3, #0]
   10448:	1ce3      	adds	r3, r4, #3
   1044a:	77dd      	strb	r5, [r3, #31]
   1044c:	0023      	movs	r3, r4
   1044e:	3333      	adds	r3, #51	; 0x33
   10450:	701d      	strb	r5, [r3, #0]
   10452:	2300      	movs	r3, #0
   10454:	77cb      	strb	r3, [r1, #31]
   10456:	2108      	movs	r1, #8
   10458:	82a1      	strh	r1, [r4, #20]
   1045a:	0021      	movs	r1, r4
   1045c:	3135      	adds	r1, #53	; 0x35
   1045e:	700a      	strb	r2, [r1, #0]
   10460:	1d22      	adds	r2, r4, #4
   10462:	77d5      	strb	r5, [r2, #31]
   10464:	1d62      	adds	r2, r4, #5
   10466:	77d3      	strb	r3, [r2, #31]
   10468:	1da2      	adds	r2, r4, #6
   1046a:	77d3      	strb	r3, [r2, #31]
   1046c:	2194      	movs	r1, #148	; 0x94
   1046e:	22c1      	movs	r2, #193	; 0xc1
   10470:	76a1      	strb	r1, [r4, #26]
   10472:	7662      	strb	r2, [r4, #25]
   10474:	76e2      	strb	r2, [r4, #27]
   10476:	3991      	subs	r1, #145	; 0x91
   10478:	1ca2      	adds	r2, r4, #2
   1047a:	77d1      	strb	r1, [r2, #31]
   1047c:	2234      	movs	r2, #52	; 0x34
   1047e:	7622      	strb	r2, [r4, #24]
   10480:	0022      	movs	r2, r4
   10482:	317d      	adds	r1, #125	; 0x7d
   10484:	3232      	adds	r2, #50	; 0x32
   10486:	7011      	strb	r1, [r2, #0]
   10488:	4a50      	ldr	r2, [pc, #320]	; (105cc <RADIO_InitDefaultAttributes+0x1ac>)
   1048a:	397e      	subs	r1, #126	; 0x7e
   1048c:	60e2      	str	r2, [r4, #12]
   1048e:	0022      	movs	r2, r4
   10490:	3237      	adds	r2, #55	; 0x37
   10492:	7011      	strb	r1, [r2, #0]
   10494:	0022      	movs	r2, r4
   10496:	3109      	adds	r1, #9
   10498:	3238      	adds	r2, #56	; 0x38
   1049a:	7011      	strb	r1, [r2, #0]
   1049c:	0022      	movs	r2, r4
   1049e:	3107      	adds	r1, #7
   104a0:	3239      	adds	r2, #57	; 0x39
   104a2:	7011      	strb	r1, [r2, #0]
   104a4:	0022      	movs	r2, r4
   104a6:	322c      	adds	r2, #44	; 0x2c
   104a8:	7013      	strb	r3, [r2, #0]
   104aa:	4a49      	ldr	r2, [pc, #292]	; (105d0 <RADIO_InitDefaultAttributes+0x1b0>)
   104ac:	82e3      	strh	r3, [r4, #22]
   104ae:	62a2      	str	r2, [r4, #40]	; 0x28
   104b0:	0022      	movs	r2, r4
   104b2:	324c      	adds	r2, #76	; 0x4c
   104b4:	8013      	strh	r3, [r2, #0]
   104b6:	0022      	movs	r2, r4
   104b8:	324e      	adds	r2, #78	; 0x4e
   104ba:	7013      	strb	r3, [r2, #0]
   104bc:	0022      	movs	r2, r4
   104be:	324f      	adds	r2, #79	; 0x4f
   104c0:	7013      	strb	r3, [r2, #0]
   104c2:	0022      	movs	r2, r4
   104c4:	3240      	adds	r2, #64	; 0x40
   104c6:	7013      	strb	r3, [r2, #0]
   104c8:	0022      	movs	r2, r4
   104ca:	3241      	adds	r2, #65	; 0x41
   104cc:	7013      	strb	r3, [r2, #0]
   104ce:	0022      	movs	r2, r4
   104d0:	3254      	adds	r2, #84	; 0x54
   104d2:	7013      	strb	r3, [r2, #0]
   104d4:	0022      	movs	r2, r4
   104d6:	3255      	adds	r2, #85	; 0x55
   104d8:	7015      	strb	r5, [r2, #0]
   104da:	0022      	movs	r2, r4
   104dc:	3258      	adds	r2, #88	; 0x58
   104de:	6463      	str	r3, [r4, #68]	; 0x44
   104e0:	64a3      	str	r3, [r4, #72]	; 0x48
   104e2:	87a3      	strh	r3, [r4, #60]	; 0x3c
   104e4:	87e3      	strh	r3, [r4, #62]	; 0x3e
   104e6:	7013      	strb	r3, [r2, #0]
   104e8:	3730      	adds	r7, #48	; 0x30
   104ea:	783b      	ldrb	r3, [r7, #0]
   104ec:	2b00      	cmp	r3, #0
   104ee:	d151      	bne.n	10594 <RADIO_InitDefaultAttributes+0x174>
   104f0:	4838      	ldr	r0, [pc, #224]	; (105d4 <RADIO_InitDefaultAttributes+0x1b4>)
   104f2:	4e39      	ldr	r6, [pc, #228]	; (105d8 <RADIO_InitDefaultAttributes+0x1b8>)
   104f4:	47b0      	blx	r6
   104f6:	2808      	cmp	r0, #8
   104f8:	d149      	bne.n	1058e <RADIO_InitDefaultAttributes+0x16e>
   104fa:	4838      	ldr	r0, [pc, #224]	; (105dc <RADIO_InitDefaultAttributes+0x1bc>)
   104fc:	47b0      	blx	r6
   104fe:	2808      	cmp	r0, #8
   10500:	d145      	bne.n	1058e <RADIO_InitDefaultAttributes+0x16e>
   10502:	4837      	ldr	r0, [pc, #220]	; (105e0 <RADIO_InitDefaultAttributes+0x1c0>)
   10504:	47b0      	blx	r6
   10506:	2808      	cmp	r0, #8
   10508:	d141      	bne.n	1058e <RADIO_InitDefaultAttributes+0x16e>
   1050a:	4836      	ldr	r0, [pc, #216]	; (105e4 <RADIO_InitDefaultAttributes+0x1c4>)
   1050c:	47b0      	blx	r6
   1050e:	2808      	cmp	r0, #8
   10510:	d13d      	bne.n	1058e <RADIO_InitDefaultAttributes+0x16e>
   10512:	703d      	strb	r5, [r7, #0]
   10514:	4b34      	ldr	r3, [pc, #208]	; (105e8 <RADIO_InitDefaultAttributes+0x1c8>)
   10516:	4798      	blx	r3
   10518:	4b34      	ldr	r3, [pc, #208]	; (105ec <RADIO_InitDefaultAttributes+0x1cc>)
   1051a:	4798      	blx	r3
   1051c:	2800      	cmp	r0, #0
   1051e:	d107      	bne.n	10530 <RADIO_InitDefaultAttributes+0x110>
   10520:	0023      	movs	r3, r4
   10522:	3355      	adds	r3, #85	; 0x55
   10524:	7018      	strb	r0, [r3, #0]
   10526:	4b32      	ldr	r3, [pc, #200]	; (105f0 <RADIO_InitDefaultAttributes+0x1d0>)
   10528:	4798      	blx	r3
   1052a:	0023      	movs	r3, r4
   1052c:	3354      	adds	r3, #84	; 0x54
   1052e:	7018      	strb	r0, [r3, #0]
   10530:	4b30      	ldr	r3, [pc, #192]	; (105f4 <RADIO_InitDefaultAttributes+0x1d4>)
   10532:	4798      	blx	r3
   10534:	2201      	movs	r2, #1
   10536:	2100      	movs	r1, #0
   10538:	0010      	movs	r0, r2
   1053a:	4f2f      	ldr	r7, [pc, #188]	; (105f8 <RADIO_InitDefaultAttributes+0x1d8>)
   1053c:	47b8      	blx	r7
   1053e:	6820      	ldr	r0, [r4, #0]
   10540:	4b2e      	ldr	r3, [pc, #184]	; (105fc <RADIO_InitDefaultAttributes+0x1dc>)
   10542:	4798      	blx	r3
   10544:	2142      	movs	r1, #66	; 0x42
   10546:	203b      	movs	r0, #59	; 0x3b
   10548:	4d2d      	ldr	r5, [pc, #180]	; (10600 <RADIO_InitDefaultAttributes+0x1e0>)
   1054a:	47a8      	blx	r5
   1054c:	203b      	movs	r0, #59	; 0x3b
   1054e:	4b2d      	ldr	r3, [pc, #180]	; (10604 <RADIO_InitDefaultAttributes+0x1e4>)
   10550:	4798      	blx	r3
   10552:	2620      	movs	r6, #32
   10554:	4006      	ands	r6, r0
   10556:	d1f9      	bne.n	1054c <RADIO_InitDefaultAttributes+0x12c>
   10558:	2123      	movs	r1, #35	; 0x23
   1055a:	200c      	movs	r0, #12
   1055c:	47a8      	blx	r5
   1055e:	21aa      	movs	r1, #170	; 0xaa
   10560:	201f      	movs	r0, #31
   10562:	47a8      	blx	r5
   10564:	21ff      	movs	r1, #255	; 0xff
   10566:	2032      	movs	r0, #50	; 0x32
   10568:	47a8      	blx	r5
   1056a:	2140      	movs	r1, #64	; 0x40
   1056c:	2031      	movs	r0, #49	; 0x31
   1056e:	47a8      	blx	r5
   10570:	2201      	movs	r2, #1
   10572:	0030      	movs	r0, r6
   10574:	0011      	movs	r1, r2
   10576:	47b8      	blx	r7
   10578:	21ff      	movs	r1, #255	; 0xff
   1057a:	2023      	movs	r0, #35	; 0x23
   1057c:	47a8      	blx	r5
   1057e:	4b21      	ldr	r3, [pc, #132]	; (10604 <RADIO_InitDefaultAttributes+0x1e4>)
   10580:	2042      	movs	r0, #66	; 0x42
   10582:	4798      	blx	r3
   10584:	3431      	adds	r4, #49	; 0x31
   10586:	4b20      	ldr	r3, [pc, #128]	; (10608 <RADIO_InitDefaultAttributes+0x1e8>)
   10588:	7020      	strb	r0, [r4, #0]
   1058a:	4798      	blx	r3
   1058c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1058e:	4b1f      	ldr	r3, [pc, #124]	; (1060c <RADIO_InitDefaultAttributes+0x1ec>)
   10590:	4798      	blx	r3
   10592:	e7bf      	b.n	10514 <RADIO_InitDefaultAttributes+0xf4>
   10594:	0023      	movs	r3, r4
   10596:	332d      	adds	r3, #45	; 0x2d
   10598:	4d1d      	ldr	r5, [pc, #116]	; (10610 <RADIO_InitDefaultAttributes+0x1f0>)
   1059a:	7818      	ldrb	r0, [r3, #0]
   1059c:	47a8      	blx	r5
   1059e:	0023      	movs	r3, r4
   105a0:	332e      	adds	r3, #46	; 0x2e
   105a2:	7818      	ldrb	r0, [r3, #0]
   105a4:	47a8      	blx	r5
   105a6:	0023      	movs	r3, r4
   105a8:	332f      	adds	r3, #47	; 0x2f
   105aa:	7818      	ldrb	r0, [r3, #0]
   105ac:	47a8      	blx	r5
   105ae:	0023      	movs	r3, r4
   105b0:	3350      	adds	r3, #80	; 0x50
   105b2:	7818      	ldrb	r0, [r3, #0]
   105b4:	47a8      	blx	r5
   105b6:	e7ad      	b.n	10514 <RADIO_InitDefaultAttributes+0xf4>
   105b8:	20001dc3 	.word	0x20001dc3
   105bc:	200017c8 	.word	0x200017c8
   105c0:	33be27a0 	.word	0x33be27a0
   105c4:	000061a8 	.word	0x000061a8
   105c8:	0000c350 	.word	0x0000c350
   105cc:	00003a98 	.word	0x00003a98
   105d0:	20001cc0 	.word	0x20001cc0
   105d4:	200017f5 	.word	0x200017f5
   105d8:	00009761 	.word	0x00009761
   105dc:	200017f6 	.word	0x200017f6
   105e0:	200017f7 	.word	0x200017f7
   105e4:	20001818 	.word	0x20001818
   105e8:	000030d1 	.word	0x000030d1
   105ec:	00003255 	.word	0x00003255
   105f0:	00003251 	.word	0x00003251
   105f4:	000103d1 	.word	0x000103d1
   105f8:	00009df9 	.word	0x00009df9
   105fc:	0000f665 	.word	0x0000f665
   10600:	00003111 	.word	0x00003111
   10604:	00003139 	.word	0x00003139
   10608:	00010405 	.word	0x00010405
   1060c:	000096a5 	.word	0x000096a5
   10610:	00009aa1 	.word	0x00009aa1

00010614 <RADIO_Receive>:
   10614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10616:	7803      	ldrb	r3, [r0, #0]
   10618:	0006      	movs	r6, r0
   1061a:	4d24      	ldr	r5, [pc, #144]	; (106ac <RADIO_Receive+0x98>)
   1061c:	2b00      	cmp	r3, #0
   1061e:	d11d      	bne.n	1065c <RADIO_Receive+0x48>
   10620:	782b      	ldrb	r3, [r5, #0]
   10622:	2004      	movs	r0, #4
   10624:	2b01      	cmp	r3, #1
   10626:	d118      	bne.n	1065a <RADIO_Receive+0x46>
   10628:	4c21      	ldr	r4, [pc, #132]	; (106b0 <RADIO_Receive+0x9c>)
   1062a:	4f22      	ldr	r7, [pc, #136]	; (106b4 <RADIO_Receive+0xa0>)
   1062c:	0023      	movs	r3, r4
   1062e:	332f      	adds	r3, #47	; 0x2f
   10630:	7818      	ldrb	r0, [r3, #0]
   10632:	47b8      	blx	r7
   10634:	0023      	movs	r3, r4
   10636:	3334      	adds	r3, #52	; 0x34
   10638:	781b      	ldrb	r3, [r3, #0]
   1063a:	2b00      	cmp	r3, #0
   1063c:	d102      	bne.n	10644 <RADIO_Receive+0x30>
   1063e:	342e      	adds	r4, #46	; 0x2e
   10640:	7820      	ldrb	r0, [r4, #0]
   10642:	47b8      	blx	r7
   10644:	8872      	ldrh	r2, [r6, #2]
   10646:	4b1c      	ldr	r3, [pc, #112]	; (106b8 <RADIO_Receive+0xa4>)
   10648:	2008      	movs	r0, #8
   1064a:	801a      	strh	r2, [r3, #0]
   1064c:	2304      	movs	r3, #4
   1064e:	702b      	strb	r3, [r5, #0]
   10650:	4b1a      	ldr	r3, [pc, #104]	; (106bc <RADIO_Receive+0xa8>)
   10652:	4798      	blx	r3
   10654:	4b1a      	ldr	r3, [pc, #104]	; (106c0 <RADIO_Receive+0xac>)
   10656:	4798      	blx	r3
   10658:	2000      	movs	r0, #0
   1065a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1065c:	782b      	ldrb	r3, [r5, #0]
   1065e:	2000      	movs	r0, #0
   10660:	2b01      	cmp	r3, #1
   10662:	d0fa      	beq.n	1065a <RADIO_Receive+0x46>
   10664:	782b      	ldrb	r3, [r5, #0]
   10666:	3003      	adds	r0, #3
   10668:	2b04      	cmp	r3, #4
   1066a:	d1f6      	bne.n	1065a <RADIO_Receive+0x46>
   1066c:	4c10      	ldr	r4, [pc, #64]	; (106b0 <RADIO_Receive+0x9c>)
   1066e:	4e11      	ldr	r6, [pc, #68]	; (106b4 <RADIO_Receive+0xa0>)
   10670:	0023      	movs	r3, r4
   10672:	332f      	adds	r3, #47	; 0x2f
   10674:	7818      	ldrb	r0, [r3, #0]
   10676:	47b0      	blx	r6
   10678:	0023      	movs	r3, r4
   1067a:	3334      	adds	r3, #52	; 0x34
   1067c:	781b      	ldrb	r3, [r3, #0]
   1067e:	2b00      	cmp	r3, #0
   10680:	d103      	bne.n	1068a <RADIO_Receive+0x76>
   10682:	0023      	movs	r3, r4
   10684:	332e      	adds	r3, #46	; 0x2e
   10686:	7818      	ldrb	r0, [r3, #0]
   10688:	47b0      	blx	r6
   1068a:	2200      	movs	r2, #0
   1068c:	3434      	adds	r4, #52	; 0x34
   1068e:	7821      	ldrb	r1, [r4, #0]
   10690:	0010      	movs	r0, r2
   10692:	4b0c      	ldr	r3, [pc, #48]	; (106c4 <RADIO_Receive+0xb0>)
   10694:	4798      	blx	r3
   10696:	4b0c      	ldr	r3, [pc, #48]	; (106c8 <RADIO_Receive+0xb4>)
   10698:	4798      	blx	r3
   1069a:	2301      	movs	r3, #1
   1069c:	2008      	movs	r0, #8
   1069e:	4c0b      	ldr	r4, [pc, #44]	; (106cc <RADIO_Receive+0xb8>)
   106a0:	702b      	strb	r3, [r5, #0]
   106a2:	47a0      	blx	r4
   106a4:	2002      	movs	r0, #2
   106a6:	47a0      	blx	r4
   106a8:	e7d6      	b.n	10658 <RADIO_Receive+0x44>
   106aa:	46c0      	nop			; (mov r8, r8)
   106ac:	20001dc3 	.word	0x20001dc3
   106b0:	200017c8 	.word	0x200017c8
   106b4:	00009aa1 	.word	0x00009aa1
   106b8:	20000ff8 	.word	0x20000ff8
   106bc:	0000fc6d 	.word	0x0000fc6d
   106c0:	000103d1 	.word	0x000103d1
   106c4:	00009df9 	.word	0x00009df9
   106c8:	00010405 	.word	0x00010405
   106cc:	0000fc99 	.word	0x0000fc99

000106d0 <RADIO_TxHandler>:
   106d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   106d2:	4c5d      	ldr	r4, [pc, #372]	; (10848 <RADIO_TxHandler+0x178>)
   106d4:	b087      	sub	sp, #28
   106d6:	47a0      	blx	r4
   106d8:	4d5c      	ldr	r5, [pc, #368]	; (1084c <RADIO_TxHandler+0x17c>)
   106da:	002b      	movs	r3, r5
   106dc:	332d      	adds	r3, #45	; 0x2d
   106de:	7818      	ldrb	r0, [r3, #0]
   106e0:	4b5b      	ldr	r3, [pc, #364]	; (10850 <RADIO_TxHandler+0x180>)
   106e2:	4798      	blx	r3
   106e4:	002b      	movs	r3, r5
   106e6:	3341      	adds	r3, #65	; 0x41
   106e8:	781b      	ldrb	r3, [r3, #0]
   106ea:	2b00      	cmp	r3, #0
   106ec:	d035      	beq.n	1075a <RADIO_TxHandler+0x8a>
   106ee:	8faf      	ldrh	r7, [r5, #60]	; 0x3c
   106f0:	47a0      	blx	r4
   106f2:	2000      	movs	r0, #0
   106f4:	4b57      	ldr	r3, [pc, #348]	; (10854 <RADIO_TxHandler+0x184>)
   106f6:	4798      	blx	r3
   106f8:	6828      	ldr	r0, [r5, #0]
   106fa:	4b57      	ldr	r3, [pc, #348]	; (10858 <RADIO_TxHandler+0x188>)
   106fc:	4798      	blx	r3
   106fe:	2400      	movs	r4, #0
   10700:	002b      	movs	r3, r5
   10702:	2201      	movs	r2, #1
   10704:	334c      	adds	r3, #76	; 0x4c
   10706:	0021      	movs	r1, r4
   10708:	0020      	movs	r0, r4
   1070a:	4e54      	ldr	r6, [pc, #336]	; (1085c <RADIO_TxHandler+0x18c>)
   1070c:	801c      	strh	r4, [r3, #0]
   1070e:	47b0      	blx	r6
   10710:	4b53      	ldr	r3, [pc, #332]	; (10860 <RADIO_TxHandler+0x190>)
   10712:	2109      	movs	r1, #9
   10714:	2012      	movs	r0, #18
   10716:	4798      	blx	r3
   10718:	2201      	movs	r2, #1
   1071a:	0021      	movs	r1, r4
   1071c:	2005      	movs	r0, #5
   1071e:	47b0      	blx	r6
   10720:	4b50      	ldr	r3, [pc, #320]	; (10864 <RADIO_TxHandler+0x194>)
   10722:	4798      	blx	r3
   10724:	22fa      	movs	r2, #250	; 0xfa
   10726:	2300      	movs	r3, #0
   10728:	0092      	lsls	r2, r2, #2
   1072a:	4c4f      	ldr	r4, [pc, #316]	; (10868 <RADIO_TxHandler+0x198>)
   1072c:	47a0      	blx	r4
   1072e:	4b4f      	ldr	r3, [pc, #316]	; (1086c <RADIO_TxHandler+0x19c>)
   10730:	3701      	adds	r7, #1
   10732:	6018      	str	r0, [r3, #0]
   10734:	6059      	str	r1, [r3, #4]
   10736:	b2bf      	uxth	r7, r7
   10738:	4b4a      	ldr	r3, [pc, #296]	; (10864 <RADIO_TxHandler+0x194>)
   1073a:	4798      	blx	r3
   1073c:	22fa      	movs	r2, #250	; 0xfa
   1073e:	2300      	movs	r3, #0
   10740:	0092      	lsls	r2, r2, #2
   10742:	4e49      	ldr	r6, [pc, #292]	; (10868 <RADIO_TxHandler+0x198>)
   10744:	47b0      	blx	r6
   10746:	4b49      	ldr	r3, [pc, #292]	; (1086c <RADIO_TxHandler+0x19c>)
   10748:	2400      	movs	r4, #0
   1074a:	681a      	ldr	r2, [r3, #0]
   1074c:	685b      	ldr	r3, [r3, #4]
   1074e:	1a80      	subs	r0, r0, r2
   10750:	4199      	sbcs	r1, r3
   10752:	428c      	cmp	r4, r1
   10754:	d101      	bne.n	1075a <RADIO_TxHandler+0x8a>
   10756:	4287      	cmp	r7, r0
   10758:	d845      	bhi.n	107e6 <RADIO_TxHandler+0x116>
   1075a:	2001      	movs	r0, #1
   1075c:	4b3d      	ldr	r3, [pc, #244]	; (10854 <RADIO_TxHandler+0x184>)
   1075e:	4798      	blx	r3
   10760:	4b43      	ldr	r3, [pc, #268]	; (10870 <RADIO_TxHandler+0x1a0>)
   10762:	2004      	movs	r0, #4
   10764:	4798      	blx	r3
   10766:	4b43      	ldr	r3, [pc, #268]	; (10874 <RADIO_TxHandler+0x1a4>)
   10768:	4c3d      	ldr	r4, [pc, #244]	; (10860 <RADIO_TxHandler+0x190>)
   1076a:	781e      	ldrb	r6, [r3, #0]
   1076c:	4f42      	ldr	r7, [pc, #264]	; (10878 <RADIO_TxHandler+0x1a8>)
   1076e:	2e01      	cmp	r6, #1
   10770:	d158      	bne.n	10824 <RADIO_TxHandler+0x154>
   10772:	7839      	ldrb	r1, [r7, #0]
   10774:	2022      	movs	r0, #34	; 0x22
   10776:	47a0      	blx	r4
   10778:	4b40      	ldr	r3, [pc, #256]	; (1087c <RADIO_TxHandler+0x1ac>)
   1077a:	200a      	movs	r0, #10
   1077c:	4798      	blx	r3
   1077e:	21f0      	movs	r1, #240	; 0xf0
   10780:	4008      	ands	r0, r1
   10782:	39e8      	subs	r1, #232	; 0xe8
   10784:	4301      	orrs	r1, r0
   10786:	200a      	movs	r0, #10
   10788:	47a0      	blx	r4
   1078a:	2140      	movs	r1, #64	; 0x40
   1078c:	0008      	movs	r0, r1
   1078e:	47a0      	blx	r4
   10790:	2100      	movs	r1, #0
   10792:	2041      	movs	r0, #65	; 0x41
   10794:	47a0      	blx	r4
   10796:	4b37      	ldr	r3, [pc, #220]	; (10874 <RADIO_TxHandler+0x1a4>)
   10798:	0032      	movs	r2, r6
   1079a:	7819      	ldrb	r1, [r3, #0]
   1079c:	0030      	movs	r0, r6
   1079e:	4b2f      	ldr	r3, [pc, #188]	; (1085c <RADIO_TxHandler+0x18c>)
   107a0:	4798      	blx	r3
   107a2:	4b37      	ldr	r3, [pc, #220]	; (10880 <RADIO_TxHandler+0x1b0>)
   107a4:	783a      	ldrb	r2, [r7, #0]
   107a6:	6819      	ldr	r1, [r3, #0]
   107a8:	2000      	movs	r0, #0
   107aa:	4b36      	ldr	r3, [pc, #216]	; (10884 <RADIO_TxHandler+0x1b4>)
   107ac:	4798      	blx	r3
   107ae:	002b      	movs	r3, r5
   107b0:	3334      	adds	r3, #52	; 0x34
   107b2:	7819      	ldrb	r1, [r3, #0]
   107b4:	2200      	movs	r2, #0
   107b6:	2003      	movs	r0, #3
   107b8:	4b28      	ldr	r3, [pc, #160]	; (1085c <RADIO_TxHandler+0x18c>)
   107ba:	4798      	blx	r3
   107bc:	4b29      	ldr	r3, [pc, #164]	; (10864 <RADIO_TxHandler+0x194>)
   107be:	4798      	blx	r3
   107c0:	4b31      	ldr	r3, [pc, #196]	; (10888 <RADIO_TxHandler+0x1b8>)
   107c2:	6018      	str	r0, [r3, #0]
   107c4:	6059      	str	r1, [r3, #4]
   107c6:	68eb      	ldr	r3, [r5, #12]
   107c8:	2b00      	cmp	r3, #0
   107ca:	d009      	beq.n	107e0 <RADIO_TxHandler+0x110>
   107cc:	21fa      	movs	r1, #250	; 0xfa
   107ce:	2200      	movs	r2, #0
   107d0:	0089      	lsls	r1, r1, #2
   107d2:	352f      	adds	r5, #47	; 0x2f
   107d4:	4359      	muls	r1, r3
   107d6:	7828      	ldrb	r0, [r5, #0]
   107d8:	4b2c      	ldr	r3, [pc, #176]	; (1088c <RADIO_TxHandler+0x1bc>)
   107da:	9200      	str	r2, [sp, #0]
   107dc:	4c2c      	ldr	r4, [pc, #176]	; (10890 <RADIO_TxHandler+0x1c0>)
   107de:	47a0      	blx	r4
   107e0:	2000      	movs	r0, #0
   107e2:	b007      	add	sp, #28
   107e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   107e6:	4e2b      	ldr	r6, [pc, #172]	; (10894 <RADIO_TxHandler+0x1c4>)
   107e8:	4b2b      	ldr	r3, [pc, #172]	; (10898 <RADIO_TxHandler+0x1c8>)
   107ea:	0030      	movs	r0, r6
   107ec:	4798      	blx	r3
   107ee:	233e      	movs	r3, #62	; 0x3e
   107f0:	5eea      	ldrsh	r2, [r5, r3]
   107f2:	2100      	movs	r1, #0
   107f4:	5e73      	ldrsh	r3, [r6, r1]
   107f6:	429a      	cmp	r2, r3
   107f8:	da9e      	bge.n	10738 <RADIO_TxHandler+0x68>
   107fa:	0020      	movs	r0, r4
   107fc:	4b27      	ldr	r3, [pc, #156]	; (1089c <RADIO_TxHandler+0x1cc>)
   107fe:	4798      	blx	r3
   10800:	4b27      	ldr	r3, [pc, #156]	; (108a0 <RADIO_TxHandler+0x1d0>)
   10802:	4798      	blx	r3
   10804:	2307      	movs	r3, #7
   10806:	2201      	movs	r2, #1
   10808:	a903      	add	r1, sp, #12
   1080a:	700b      	strb	r3, [r1, #0]
   1080c:	4b25      	ldr	r3, [pc, #148]	; (108a4 <RADIO_TxHandler+0x1d4>)
   1080e:	701a      	strb	r2, [r3, #0]
   10810:	4b25      	ldr	r3, [pc, #148]	; (108a8 <RADIO_TxHandler+0x1d8>)
   10812:	781b      	ldrb	r3, [r3, #0]
   10814:	079b      	lsls	r3, r3, #30
   10816:	d5a0      	bpl.n	1075a <RADIO_TxHandler+0x8a>
   10818:	692b      	ldr	r3, [r5, #16]
   1081a:	2b00      	cmp	r3, #0
   1081c:	d09d      	beq.n	1075a <RADIO_TxHandler+0x8a>
   1081e:	2002      	movs	r0, #2
   10820:	4798      	blx	r3
   10822:	e79a      	b.n	1075a <RADIO_TxHandler+0x8a>
   10824:	2100      	movs	r1, #0
   10826:	2040      	movs	r0, #64	; 0x40
   10828:	47a0      	blx	r4
   1082a:	2100      	movs	r1, #0
   1082c:	2041      	movs	r0, #65	; 0x41
   1082e:	47a0      	blx	r4
   10830:	002b      	movs	r3, r5
   10832:	2000      	movs	r0, #0
   10834:	3358      	adds	r3, #88	; 0x58
   10836:	7839      	ldrb	r1, [r7, #0]
   10838:	7018      	strb	r0, [r3, #0]
   1083a:	47a0      	blx	r4
   1083c:	4b10      	ldr	r3, [pc, #64]	; (10880 <RADIO_TxHandler+0x1b0>)
   1083e:	7839      	ldrb	r1, [r7, #0]
   10840:	6818      	ldr	r0, [r3, #0]
   10842:	4b1a      	ldr	r3, [pc, #104]	; (108ac <RADIO_TxHandler+0x1dc>)
   10844:	4798      	blx	r3
   10846:	e7b2      	b.n	107ae <RADIO_TxHandler+0xde>
   10848:	000103d1 	.word	0x000103d1
   1084c:	200017c8 	.word	0x200017c8
   10850:	00009aa1 	.word	0x00009aa1
   10854:	0000ff21 	.word	0x0000ff21
   10858:	0000f665 	.word	0x0000f665
   1085c:	00009df9 	.word	0x00009df9
   10860:	00003111 	.word	0x00003111
   10864:	0000973d 	.word	0x0000973d
   10868:	0001116d 	.word	0x0001116d
   1086c:	20000ff0 	.word	0x20000ff0
   10870:	0000f6ad 	.word	0x0000f6ad
   10874:	200017fc 	.word	0x200017fc
   10878:	2000100c 	.word	0x2000100c
   1087c:	00003139 	.word	0x00003139
   10880:	20001008 	.word	0x20001008
   10884:	00003165 	.word	0x00003165
   10888:	20001000 	.word	0x20001000
   1088c:	0001007d 	.word	0x0001007d
   10890:	00009795 	.word	0x00009795
   10894:	20000fe8 	.word	0x20000fe8
   10898:	00009fbd 	.word	0x00009fbd
   1089c:	00010049 	.word	0x00010049
   108a0:	00010405 	.word	0x00010405
   108a4:	20001dc3 	.word	0x20001dc3
   108a8:	20001dc2 	.word	0x20001dc2
   108ac:	0000fd9d 	.word	0x0000fd9d

000108b0 <RADIO_TxDoneHandler>:
   108b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   108b2:	4b35      	ldr	r3, [pc, #212]	; (10988 <RADIO_TxDoneHandler+0xd8>)
   108b4:	b087      	sub	sp, #28
   108b6:	881a      	ldrh	r2, [r3, #0]
   108b8:	06d2      	lsls	r2, r2, #27
   108ba:	0fd2      	lsrs	r2, r2, #31
   108bc:	9200      	str	r2, [sp, #0]
   108be:	466a      	mov	r2, sp
   108c0:	7810      	ldrb	r0, [r2, #0]
   108c2:	881a      	ldrh	r2, [r3, #0]
   108c4:	2801      	cmp	r0, #1
   108c6:	d12b      	bne.n	10920 <RADIO_TxDoneHandler+0x70>
   108c8:	4c30      	ldr	r4, [pc, #192]	; (1098c <RADIO_TxDoneHandler+0xdc>)
   108ca:	2110      	movs	r1, #16
   108cc:	0027      	movs	r7, r4
   108ce:	2500      	movs	r5, #0
   108d0:	438a      	bics	r2, r1
   108d2:	801a      	strh	r2, [r3, #0]
   108d4:	3734      	adds	r7, #52	; 0x34
   108d6:	0002      	movs	r2, r0
   108d8:	7839      	ldrb	r1, [r7, #0]
   108da:	4b2d      	ldr	r3, [pc, #180]	; (10990 <RADIO_TxDoneHandler+0xe0>)
   108dc:	4798      	blx	r3
   108de:	68e3      	ldr	r3, [r4, #12]
   108e0:	ae03      	add	r6, sp, #12
   108e2:	9304      	str	r3, [sp, #16]
   108e4:	7035      	strb	r5, [r6, #0]
   108e6:	002a      	movs	r2, r5
   108e8:	4b29      	ldr	r3, [pc, #164]	; (10990 <RADIO_TxDoneHandler+0xe0>)
   108ea:	7839      	ldrb	r1, [r7, #0]
   108ec:	0028      	movs	r0, r5
   108ee:	4798      	blx	r3
   108f0:	466a      	mov	r2, sp
   108f2:	4b28      	ldr	r3, [pc, #160]	; (10994 <RADIO_TxDoneHandler+0xe4>)
   108f4:	7812      	ldrb	r2, [r2, #0]
   108f6:	701a      	strb	r2, [r3, #0]
   108f8:	0023      	movs	r3, r4
   108fa:	3358      	adds	r3, #88	; 0x58
   108fc:	701d      	strb	r5, [r3, #0]
   108fe:	4b26      	ldr	r3, [pc, #152]	; (10998 <RADIO_TxDoneHandler+0xe8>)
   10900:	781b      	ldrb	r3, [r3, #0]
   10902:	075b      	lsls	r3, r3, #29
   10904:	d505      	bpl.n	10912 <RADIO_TxDoneHandler+0x62>
   10906:	6923      	ldr	r3, [r4, #16]
   10908:	42ab      	cmp	r3, r5
   1090a:	d002      	beq.n	10912 <RADIO_TxDoneHandler+0x62>
   1090c:	0031      	movs	r1, r6
   1090e:	2004      	movs	r0, #4
   10910:	4798      	blx	r3
   10912:	4b22      	ldr	r3, [pc, #136]	; (1099c <RADIO_TxDoneHandler+0xec>)
   10914:	4798      	blx	r3
   10916:	4b22      	ldr	r3, [pc, #136]	; (109a0 <RADIO_TxDoneHandler+0xf0>)
   10918:	4798      	blx	r3
   1091a:	2000      	movs	r0, #0
   1091c:	b007      	add	sp, #28
   1091e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10920:	07d2      	lsls	r2, r2, #31
   10922:	d402      	bmi.n	1092a <RADIO_TxDoneHandler+0x7a>
   10924:	881a      	ldrh	r2, [r3, #0]
   10926:	0752      	lsls	r2, r2, #29
   10928:	d527      	bpl.n	1097a <RADIO_TxDoneHandler+0xca>
   1092a:	2601      	movs	r6, #1
   1092c:	2104      	movs	r1, #4
   1092e:	881a      	ldrh	r2, [r3, #0]
   10930:	4f16      	ldr	r7, [pc, #88]	; (1098c <RADIO_TxDoneHandler+0xdc>)
   10932:	43b2      	bics	r2, r6
   10934:	801a      	strh	r2, [r3, #0]
   10936:	881a      	ldrh	r2, [r3, #0]
   10938:	2400      	movs	r4, #0
   1093a:	438a      	bics	r2, r1
   1093c:	801a      	strh	r2, [r3, #0]
   1093e:	4b19      	ldr	r3, [pc, #100]	; (109a4 <RADIO_TxDoneHandler+0xf4>)
   10940:	ad03      	add	r5, sp, #12
   10942:	681b      	ldr	r3, [r3, #0]
   10944:	702c      	strb	r4, [r5, #0]
   10946:	9304      	str	r3, [sp, #16]
   10948:	003b      	movs	r3, r7
   1094a:	3334      	adds	r3, #52	; 0x34
   1094c:	7819      	ldrb	r1, [r3, #0]
   1094e:	0022      	movs	r2, r4
   10950:	0020      	movs	r0, r4
   10952:	4b0f      	ldr	r3, [pc, #60]	; (10990 <RADIO_TxDoneHandler+0xe0>)
   10954:	4798      	blx	r3
   10956:	4b14      	ldr	r3, [pc, #80]	; (109a8 <RADIO_TxDoneHandler+0xf8>)
   10958:	4798      	blx	r3
   1095a:	4b0e      	ldr	r3, [pc, #56]	; (10994 <RADIO_TxDoneHandler+0xe4>)
   1095c:	701e      	strb	r6, [r3, #0]
   1095e:	003b      	movs	r3, r7
   10960:	3358      	adds	r3, #88	; 0x58
   10962:	701c      	strb	r4, [r3, #0]
   10964:	4b0c      	ldr	r3, [pc, #48]	; (10998 <RADIO_TxDoneHandler+0xe8>)
   10966:	781b      	ldrb	r3, [r3, #0]
   10968:	079b      	lsls	r3, r3, #30
   1096a:	d5d6      	bpl.n	1091a <RADIO_TxDoneHandler+0x6a>
   1096c:	693b      	ldr	r3, [r7, #16]
   1096e:	42a3      	cmp	r3, r4
   10970:	d0d3      	beq.n	1091a <RADIO_TxDoneHandler+0x6a>
   10972:	0029      	movs	r1, r5
   10974:	2002      	movs	r0, #2
   10976:	4798      	blx	r3
   10978:	e7cf      	b.n	1091a <RADIO_TxDoneHandler+0x6a>
   1097a:	881b      	ldrh	r3, [r3, #0]
   1097c:	059b      	lsls	r3, r3, #22
   1097e:	d5cc      	bpl.n	1091a <RADIO_TxDoneHandler+0x6a>
   10980:	4b0a      	ldr	r3, [pc, #40]	; (109ac <RADIO_TxDoneHandler+0xfc>)
   10982:	4798      	blx	r3
   10984:	e7c9      	b.n	1091a <RADIO_TxDoneHandler+0x6a>
   10986:	46c0      	nop			; (mov r8, r8)
   10988:	20001dc0 	.word	0x20001dc0
   1098c:	200017c8 	.word	0x200017c8
   10990:	00009df9 	.word	0x00009df9
   10994:	20001dc3 	.word	0x20001dc3
   10998:	20001dc2 	.word	0x20001dc2
   1099c:	000030d1 	.word	0x000030d1
   109a0:	00010421 	.word	0x00010421
   109a4:	20001000 	.word	0x20001000
   109a8:	00010405 	.word	0x00010405
   109ac:	00010d49 	.word	0x00010d49

000109b0 <RADIO_RxDoneHandler>:
   109b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   109b2:	4b97      	ldr	r3, [pc, #604]	; (10c10 <RADIO_RxDoneHandler+0x260>)
   109b4:	b085      	sub	sp, #20
   109b6:	881c      	ldrh	r4, [r3, #0]
   109b8:	881a      	ldrh	r2, [r3, #0]
   109ba:	06a4      	lsls	r4, r4, #26
   109bc:	0fe4      	lsrs	r4, r4, #31
   109be:	b2e0      	uxtb	r0, r4
   109c0:	2801      	cmp	r0, #1
   109c2:	d126      	bne.n	10a12 <RADIO_RxDoneHandler+0x62>
   109c4:	4d93      	ldr	r5, [pc, #588]	; (10c14 <RADIO_RxDoneHandler+0x264>)
   109c6:	2120      	movs	r1, #32
   109c8:	002e      	movs	r6, r5
   109ca:	438a      	bics	r2, r1
   109cc:	801a      	strh	r2, [r3, #0]
   109ce:	3634      	adds	r6, #52	; 0x34
   109d0:	0002      	movs	r2, r0
   109d2:	7831      	ldrb	r1, [r6, #0]
   109d4:	4f90      	ldr	r7, [pc, #576]	; (10c18 <RADIO_RxDoneHandler+0x268>)
   109d6:	47b8      	blx	r7
   109d8:	2200      	movs	r2, #0
   109da:	7831      	ldrb	r1, [r6, #0]
   109dc:	0010      	movs	r0, r2
   109de:	47b8      	blx	r7
   109e0:	4b8e      	ldr	r3, [pc, #568]	; (10c1c <RADIO_RxDoneHandler+0x26c>)
   109e2:	4798      	blx	r3
   109e4:	4b8e      	ldr	r3, [pc, #568]	; (10c20 <RADIO_RxDoneHandler+0x270>)
   109e6:	002a      	movs	r2, r5
   109e8:	701c      	strb	r4, [r3, #0]
   109ea:	2300      	movs	r3, #0
   109ec:	322c      	adds	r2, #44	; 0x2c
   109ee:	7013      	strb	r3, [r2, #0]
   109f0:	002a      	movs	r2, r5
   109f2:	a901      	add	r1, sp, #4
   109f4:	3258      	adds	r2, #88	; 0x58
   109f6:	7013      	strb	r3, [r2, #0]
   109f8:	700b      	strb	r3, [r1, #0]
   109fa:	4b8a      	ldr	r3, [pc, #552]	; (10c24 <RADIO_RxDoneHandler+0x274>)
   109fc:	781b      	ldrb	r3, [r3, #0]
   109fe:	071b      	lsls	r3, r3, #28
   10a00:	d504      	bpl.n	10a0c <RADIO_RxDoneHandler+0x5c>
   10a02:	692b      	ldr	r3, [r5, #16]
   10a04:	2008      	movs	r0, #8
   10a06:	2b00      	cmp	r3, #0
   10a08:	d000      	beq.n	10a0c <RADIO_RxDoneHandler+0x5c>
   10a0a:	e084      	b.n	10b16 <RADIO_RxDoneHandler+0x166>
   10a0c:	2000      	movs	r0, #0
   10a0e:	b005      	add	sp, #20
   10a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a12:	0652      	lsls	r2, r2, #25
   10a14:	d402      	bmi.n	10a1c <RADIO_RxDoneHandler+0x6c>
   10a16:	881a      	ldrh	r2, [r3, #0]
   10a18:	0612      	lsls	r2, r2, #24
   10a1a:	d523      	bpl.n	10a64 <RADIO_RxDoneHandler+0xb4>
   10a1c:	2140      	movs	r1, #64	; 0x40
   10a1e:	881a      	ldrh	r2, [r3, #0]
   10a20:	4c7c      	ldr	r4, [pc, #496]	; (10c14 <RADIO_RxDoneHandler+0x264>)
   10a22:	438a      	bics	r2, r1
   10a24:	801a      	strh	r2, [r3, #0]
   10a26:	881a      	ldrh	r2, [r3, #0]
   10a28:	1849      	adds	r1, r1, r1
   10a2a:	438a      	bics	r2, r1
   10a2c:	801a      	strh	r2, [r3, #0]
   10a2e:	0023      	movs	r3, r4
   10a30:	2200      	movs	r2, #0
   10a32:	3334      	adds	r3, #52	; 0x34
   10a34:	7819      	ldrb	r1, [r3, #0]
   10a36:	0010      	movs	r0, r2
   10a38:	4b77      	ldr	r3, [pc, #476]	; (10c18 <RADIO_RxDoneHandler+0x268>)
   10a3a:	4798      	blx	r3
   10a3c:	4b77      	ldr	r3, [pc, #476]	; (10c1c <RADIO_RxDoneHandler+0x26c>)
   10a3e:	4798      	blx	r3
   10a40:	2201      	movs	r2, #1
   10a42:	4b77      	ldr	r3, [pc, #476]	; (10c20 <RADIO_RxDoneHandler+0x270>)
   10a44:	a901      	add	r1, sp, #4
   10a46:	701a      	strb	r2, [r3, #0]
   10a48:	0022      	movs	r2, r4
   10a4a:	2300      	movs	r3, #0
   10a4c:	322c      	adds	r2, #44	; 0x2c
   10a4e:	7013      	strb	r3, [r2, #0]
   10a50:	0022      	movs	r2, r4
   10a52:	3258      	adds	r2, #88	; 0x58
   10a54:	7013      	strb	r3, [r2, #0]
   10a56:	700b      	strb	r3, [r1, #0]
   10a58:	4b72      	ldr	r3, [pc, #456]	; (10c24 <RADIO_RxDoneHandler+0x274>)
   10a5a:	781b      	ldrb	r3, [r3, #0]
   10a5c:	071b      	lsls	r3, r3, #28
   10a5e:	d5d5      	bpl.n	10a0c <RADIO_RxDoneHandler+0x5c>
   10a60:	6923      	ldr	r3, [r4, #16]
   10a62:	e7cf      	b.n	10a04 <RADIO_RxDoneHandler+0x54>
   10a64:	881a      	ldrh	r2, [r3, #0]
   10a66:	0792      	lsls	r2, r2, #30
   10a68:	d571      	bpl.n	10b4e <RADIO_RxDoneHandler+0x19e>
   10a6a:	2102      	movs	r1, #2
   10a6c:	881a      	ldrh	r2, [r3, #0]
   10a6e:	4d6e      	ldr	r5, [pc, #440]	; (10c28 <RADIO_RxDoneHandler+0x278>)
   10a70:	438a      	bics	r2, r1
   10a72:	801a      	strh	r2, [r3, #0]
   10a74:	2013      	movs	r0, #19
   10a76:	47a8      	blx	r5
   10a78:	4c66      	ldr	r4, [pc, #408]	; (10c14 <RADIO_RxDoneHandler+0x264>)
   10a7a:	2100      	movs	r1, #0
   10a7c:	0026      	movs	r6, r4
   10a7e:	362c      	adds	r6, #44	; 0x2c
   10a80:	7030      	strb	r0, [r6, #0]
   10a82:	4b6a      	ldr	r3, [pc, #424]	; (10c2c <RADIO_RxDoneHandler+0x27c>)
   10a84:	200d      	movs	r0, #13
   10a86:	4798      	blx	r3
   10a88:	7832      	ldrb	r2, [r6, #0]
   10a8a:	4b69      	ldr	r3, [pc, #420]	; (10c30 <RADIO_RxDoneHandler+0x280>)
   10a8c:	b2d2      	uxtb	r2, r2
   10a8e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   10a90:	2000      	movs	r0, #0
   10a92:	4798      	blx	r3
   10a94:	2019      	movs	r0, #25
   10a96:	47a8      	blx	r5
   10a98:	0023      	movs	r3, r4
   10a9a:	b240      	sxtb	r0, r0
   10a9c:	3332      	adds	r3, #50	; 0x32
   10a9e:	2800      	cmp	r0, #0
   10aa0:	da3b      	bge.n	10b1a <RADIO_RxDoneHandler+0x16a>
   10aa2:	4240      	negs	r0, r0
   10aa4:	1080      	asrs	r0, r0, #2
   10aa6:	4240      	negs	r0, r0
   10aa8:	7018      	strb	r0, [r3, #0]
   10aaa:	201a      	movs	r0, #26
   10aac:	47a8      	blx	r5
   10aae:	0023      	movs	r3, r4
   10ab0:	3332      	adds	r3, #50	; 0x32
   10ab2:	781b      	ldrb	r3, [r3, #0]
   10ab4:	b202      	sxth	r2, r0
   10ab6:	b25b      	sxtb	r3, r3
   10ab8:	4d5e      	ldr	r5, [pc, #376]	; (10c34 <RADIO_RxDoneHandler+0x284>)
   10aba:	2b00      	cmp	r3, #0
   10abc:	da36      	bge.n	10b2c <RADIO_RxDoneHandler+0x17c>
   10abe:	6821      	ldr	r1, [r4, #0]
   10ac0:	4e5d      	ldr	r6, [pc, #372]	; (10c38 <RADIO_RxDoneHandler+0x288>)
   10ac2:	198e      	adds	r6, r1, r6
   10ac4:	42ae      	cmp	r6, r5
   10ac6:	d82a      	bhi.n	10b1e <RADIO_RxDoneHandler+0x16e>
   10ac8:	3b9d      	subs	r3, #157	; 0x9d
   10aca:	181b      	adds	r3, r3, r0
   10acc:	1112      	asrs	r2, r2, #4
   10ace:	189b      	adds	r3, r3, r2
   10ad0:	0022      	movs	r2, r4
   10ad2:	3256      	adds	r2, #86	; 0x56
   10ad4:	8013      	strh	r3, [r2, #0]
   10ad6:	0023      	movs	r3, r4
   10ad8:	2200      	movs	r2, #0
   10ada:	3334      	adds	r3, #52	; 0x34
   10adc:	7819      	ldrb	r1, [r3, #0]
   10ade:	0010      	movs	r0, r2
   10ae0:	4b4d      	ldr	r3, [pc, #308]	; (10c18 <RADIO_RxDoneHandler+0x268>)
   10ae2:	4798      	blx	r3
   10ae4:	4b4d      	ldr	r3, [pc, #308]	; (10c1c <RADIO_RxDoneHandler+0x26c>)
   10ae6:	4798      	blx	r3
   10ae8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10aea:	a901      	add	r1, sp, #4
   10aec:	604b      	str	r3, [r1, #4]
   10aee:	0023      	movs	r3, r4
   10af0:	332c      	adds	r3, #44	; 0x2c
   10af2:	781b      	ldrb	r3, [r3, #0]
   10af4:	2201      	movs	r2, #1
   10af6:	720b      	strb	r3, [r1, #8]
   10af8:	2300      	movs	r3, #0
   10afa:	700b      	strb	r3, [r1, #0]
   10afc:	4b48      	ldr	r3, [pc, #288]	; (10c20 <RADIO_RxDoneHandler+0x270>)
   10afe:	701a      	strb	r2, [r3, #0]
   10b00:	4b48      	ldr	r3, [pc, #288]	; (10c24 <RADIO_RxDoneHandler+0x274>)
   10b02:	7818      	ldrb	r0, [r3, #0]
   10b04:	07c0      	lsls	r0, r0, #31
   10b06:	0fc0      	lsrs	r0, r0, #31
   10b08:	4290      	cmp	r0, r2
   10b0a:	d000      	beq.n	10b0e <RADIO_RxDoneHandler+0x15e>
   10b0c:	e77e      	b.n	10a0c <RADIO_RxDoneHandler+0x5c>
   10b0e:	6923      	ldr	r3, [r4, #16]
   10b10:	2b00      	cmp	r3, #0
   10b12:	d100      	bne.n	10b16 <RADIO_RxDoneHandler+0x166>
   10b14:	e77a      	b.n	10a0c <RADIO_RxDoneHandler+0x5c>
   10b16:	4798      	blx	r3
   10b18:	e778      	b.n	10a0c <RADIO_RxDoneHandler+0x5c>
   10b1a:	1080      	asrs	r0, r0, #2
   10b1c:	e7c4      	b.n	10aa8 <RADIO_RxDoneHandler+0xf8>
   10b1e:	4d47      	ldr	r5, [pc, #284]	; (10c3c <RADIO_RxDoneHandler+0x28c>)
   10b20:	1949      	adds	r1, r1, r5
   10b22:	4d47      	ldr	r5, [pc, #284]	; (10c40 <RADIO_RxDoneHandler+0x290>)
   10b24:	42a9      	cmp	r1, r5
   10b26:	d8d6      	bhi.n	10ad6 <RADIO_RxDoneHandler+0x126>
   10b28:	3ba4      	subs	r3, #164	; 0xa4
   10b2a:	e7ce      	b.n	10aca <RADIO_RxDoneHandler+0x11a>
   10b2c:	6823      	ldr	r3, [r4, #0]
   10b2e:	4942      	ldr	r1, [pc, #264]	; (10c38 <RADIO_RxDoneHandler+0x288>)
   10b30:	1859      	adds	r1, r3, r1
   10b32:	42a9      	cmp	r1, r5
   10b34:	d802      	bhi.n	10b3c <RADIO_RxDoneHandler+0x18c>
   10b36:	0003      	movs	r3, r0
   10b38:	3b9d      	subs	r3, #157	; 0x9d
   10b3a:	e7c7      	b.n	10acc <RADIO_RxDoneHandler+0x11c>
   10b3c:	493f      	ldr	r1, [pc, #252]	; (10c3c <RADIO_RxDoneHandler+0x28c>)
   10b3e:	185b      	adds	r3, r3, r1
   10b40:	493f      	ldr	r1, [pc, #252]	; (10c40 <RADIO_RxDoneHandler+0x290>)
   10b42:	428b      	cmp	r3, r1
   10b44:	d8c7      	bhi.n	10ad6 <RADIO_RxDoneHandler+0x126>
   10b46:	38a4      	subs	r0, #164	; 0xa4
   10b48:	1113      	asrs	r3, r2, #4
   10b4a:	18c3      	adds	r3, r0, r3
   10b4c:	e7c0      	b.n	10ad0 <RADIO_RxDoneHandler+0x120>
   10b4e:	881a      	ldrh	r2, [r3, #0]
   10b50:	0712      	lsls	r2, r2, #28
   10b52:	0fd5      	lsrs	r5, r2, #31
   10b54:	2a00      	cmp	r2, #0
   10b56:	da27      	bge.n	10ba8 <RADIO_RxDoneHandler+0x1f8>
   10b58:	2108      	movs	r1, #8
   10b5a:	881a      	ldrh	r2, [r3, #0]
   10b5c:	4c2d      	ldr	r4, [pc, #180]	; (10c14 <RADIO_RxDoneHandler+0x264>)
   10b5e:	438a      	bics	r2, r1
   10b60:	801a      	strh	r2, [r3, #0]
   10b62:	0023      	movs	r3, r4
   10b64:	2280      	movs	r2, #128	; 0x80
   10b66:	3332      	adds	r3, #50	; 0x32
   10b68:	701a      	strb	r2, [r3, #0]
   10b6a:	0023      	movs	r3, r4
   10b6c:	2200      	movs	r2, #0
   10b6e:	3334      	adds	r3, #52	; 0x34
   10b70:	7819      	ldrb	r1, [r3, #0]
   10b72:	0010      	movs	r0, r2
   10b74:	4b28      	ldr	r3, [pc, #160]	; (10c18 <RADIO_RxDoneHandler+0x268>)
   10b76:	4798      	blx	r3
   10b78:	4b28      	ldr	r3, [pc, #160]	; (10c1c <RADIO_RxDoneHandler+0x26c>)
   10b7a:	4798      	blx	r3
   10b7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10b7e:	a901      	add	r1, sp, #4
   10b80:	604b      	str	r3, [r1, #4]
   10b82:	0023      	movs	r3, r4
   10b84:	332c      	adds	r3, #44	; 0x2c
   10b86:	781b      	ldrb	r3, [r3, #0]
   10b88:	0022      	movs	r2, r4
   10b8a:	720b      	strb	r3, [r1, #8]
   10b8c:	2300      	movs	r3, #0
   10b8e:	3258      	adds	r2, #88	; 0x58
   10b90:	7013      	strb	r3, [r2, #0]
   10b92:	700b      	strb	r3, [r1, #0]
   10b94:	4b22      	ldr	r3, [pc, #136]	; (10c20 <RADIO_RxDoneHandler+0x270>)
   10b96:	701d      	strb	r5, [r3, #0]
   10b98:	4b22      	ldr	r3, [pc, #136]	; (10c24 <RADIO_RxDoneHandler+0x274>)
   10b9a:	7818      	ldrb	r0, [r3, #0]
   10b9c:	07c0      	lsls	r0, r0, #31
   10b9e:	0fc0      	lsrs	r0, r0, #31
   10ba0:	2801      	cmp	r0, #1
   10ba2:	d000      	beq.n	10ba6 <RADIO_RxDoneHandler+0x1f6>
   10ba4:	e732      	b.n	10a0c <RADIO_RxDoneHandler+0x5c>
   10ba6:	e7b2      	b.n	10b0e <RADIO_RxDoneHandler+0x15e>
   10ba8:	881a      	ldrh	r2, [r3, #0]
   10baa:	05d2      	lsls	r2, r2, #23
   10bac:	0fd5      	lsrs	r5, r2, #31
   10bae:	2a00      	cmp	r2, #0
   10bb0:	db00      	blt.n	10bb4 <RADIO_RxDoneHandler+0x204>
   10bb2:	e72b      	b.n	10a0c <RADIO_RxDoneHandler+0x5c>
   10bb4:	4c17      	ldr	r4, [pc, #92]	; (10c14 <RADIO_RxDoneHandler+0x264>)
   10bb6:	881a      	ldrh	r2, [r3, #0]
   10bb8:	0026      	movs	r6, r4
   10bba:	4922      	ldr	r1, [pc, #136]	; (10c44 <RADIO_RxDoneHandler+0x294>)
   10bbc:	362c      	adds	r6, #44	; 0x2c
   10bbe:	400a      	ands	r2, r1
   10bc0:	801a      	strh	r2, [r3, #0]
   10bc2:	7832      	ldrb	r2, [r6, #0]
   10bc4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   10bc6:	b2d2      	uxtb	r2, r2
   10bc8:	2000      	movs	r0, #0
   10bca:	4b19      	ldr	r3, [pc, #100]	; (10c30 <RADIO_RxDoneHandler+0x280>)
   10bcc:	4798      	blx	r3
   10bce:	0023      	movs	r3, r4
   10bd0:	2200      	movs	r2, #0
   10bd2:	3334      	adds	r3, #52	; 0x34
   10bd4:	7819      	ldrb	r1, [r3, #0]
   10bd6:	0010      	movs	r0, r2
   10bd8:	4b0f      	ldr	r3, [pc, #60]	; (10c18 <RADIO_RxDoneHandler+0x268>)
   10bda:	4798      	blx	r3
   10bdc:	4b0f      	ldr	r3, [pc, #60]	; (10c1c <RADIO_RxDoneHandler+0x26c>)
   10bde:	4798      	blx	r3
   10be0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10be2:	a901      	add	r1, sp, #4
   10be4:	604b      	str	r3, [r1, #4]
   10be6:	7833      	ldrb	r3, [r6, #0]
   10be8:	0022      	movs	r2, r4
   10bea:	720b      	strb	r3, [r1, #8]
   10bec:	2300      	movs	r3, #0
   10bee:	3258      	adds	r2, #88	; 0x58
   10bf0:	7013      	strb	r3, [r2, #0]
   10bf2:	700b      	strb	r3, [r1, #0]
   10bf4:	4b0a      	ldr	r3, [pc, #40]	; (10c20 <RADIO_RxDoneHandler+0x270>)
   10bf6:	701d      	strb	r5, [r3, #0]
   10bf8:	4b0a      	ldr	r3, [pc, #40]	; (10c24 <RADIO_RxDoneHandler+0x274>)
   10bfa:	781b      	ldrb	r3, [r3, #0]
   10bfc:	06db      	lsls	r3, r3, #27
   10bfe:	d400      	bmi.n	10c02 <RADIO_RxDoneHandler+0x252>
   10c00:	e704      	b.n	10a0c <RADIO_RxDoneHandler+0x5c>
   10c02:	6923      	ldr	r3, [r4, #16]
   10c04:	2b00      	cmp	r3, #0
   10c06:	d100      	bne.n	10c0a <RADIO_RxDoneHandler+0x25a>
   10c08:	e700      	b.n	10a0c <RADIO_RxDoneHandler+0x5c>
   10c0a:	2010      	movs	r0, #16
   10c0c:	e783      	b.n	10b16 <RADIO_RxDoneHandler+0x166>
   10c0e:	46c0      	nop			; (mov r8, r8)
   10c10:	20001dc0 	.word	0x20001dc0
   10c14:	200017c8 	.word	0x200017c8
   10c18:	00009df9 	.word	0x00009df9
   10c1c:	00010405 	.word	0x00010405
   10c20:	20001dc3 	.word	0x20001dc3
   10c24:	20001dc2 	.word	0x20001dc2
   10c28:	00003139 	.word	0x00003139
   10c2c:	00003111 	.word	0x00003111
   10c30:	000031a5 	.word	0x000031a5
   10c34:	096ae380 	.word	0x096ae380
   10c38:	cc9eec80 	.word	0xcc9eec80
   10c3c:	e78fe580 	.word	0xe78fe580
   10c40:	06dac2c0 	.word	0x06dac2c0
   10c44:	fffffeff 	.word	0xfffffeff

00010c48 <Radio_LBTScanTimeout>:
   10c48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10c4a:	4c1c      	ldr	r4, [pc, #112]	; (10cbc <Radio_LBTScanTimeout+0x74>)
   10c4c:	0025      	movs	r5, r4
   10c4e:	0023      	movs	r3, r4
   10c50:	354f      	adds	r5, #79	; 0x4f
   10c52:	7829      	ldrb	r1, [r5, #0]
   10c54:	3340      	adds	r3, #64	; 0x40
   10c56:	3101      	adds	r1, #1
   10c58:	b2c9      	uxtb	r1, r1
   10c5a:	7029      	strb	r1, [r5, #0]
   10c5c:	781b      	ldrb	r3, [r3, #0]
   10c5e:	428b      	cmp	r3, r1
   10c60:	d315      	bcc.n	10c8e <Radio_LBTScanTimeout+0x46>
   10c62:	260e      	movs	r6, #14
   10c64:	446e      	add	r6, sp
   10c66:	4b16      	ldr	r3, [pc, #88]	; (10cc0 <Radio_LBTScanTimeout+0x78>)
   10c68:	0030      	movs	r0, r6
   10c6a:	4798      	blx	r3
   10c6c:	2300      	movs	r3, #0
   10c6e:	5ef2      	ldrsh	r2, [r6, r3]
   10c70:	782b      	ldrb	r3, [r5, #0]
   10c72:	4353      	muls	r3, r2
   10c74:	6c62      	ldr	r2, [r4, #68]	; 0x44
   10c76:	189b      	adds	r3, r3, r2
   10c78:	6463      	str	r3, [r4, #68]	; 0x44
   10c7a:	0023      	movs	r3, r4
   10c7c:	2200      	movs	r2, #0
   10c7e:	3350      	adds	r3, #80	; 0x50
   10c80:	7818      	ldrb	r0, [r3, #0]
   10c82:	9200      	str	r2, [sp, #0]
   10c84:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   10c86:	4b0f      	ldr	r3, [pc, #60]	; (10cc4 <Radio_LBTScanTimeout+0x7c>)
   10c88:	4c0f      	ldr	r4, [pc, #60]	; (10cc8 <Radio_LBTScanTimeout+0x80>)
   10c8a:	47a0      	blx	r4
   10c8c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   10c8e:	2380      	movs	r3, #128	; 0x80
   10c90:	4a0e      	ldr	r2, [pc, #56]	; (10ccc <Radio_LBTScanTimeout+0x84>)
   10c92:	009b      	lsls	r3, r3, #2
   10c94:	8810      	ldrh	r0, [r2, #0]
   10c96:	4303      	orrs	r3, r0
   10c98:	8013      	strh	r3, [r2, #0]
   10c9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   10c9c:	0058      	lsls	r0, r3, #1
   10c9e:	1e4b      	subs	r3, r1, #1
   10ca0:	4359      	muls	r1, r3
   10ca2:	4b0b      	ldr	r3, [pc, #44]	; (10cd0 <Radio_LBTScanTimeout+0x88>)
   10ca4:	b289      	uxth	r1, r1
   10ca6:	4798      	blx	r3
   10ca8:	0023      	movs	r3, r4
   10caa:	334c      	adds	r3, #76	; 0x4c
   10cac:	8018      	strh	r0, [r3, #0]
   10cae:	2300      	movs	r3, #0
   10cb0:	2001      	movs	r0, #1
   10cb2:	702b      	strb	r3, [r5, #0]
   10cb4:	6463      	str	r3, [r4, #68]	; 0x44
   10cb6:	4b07      	ldr	r3, [pc, #28]	; (10cd4 <Radio_LBTScanTimeout+0x8c>)
   10cb8:	4798      	blx	r3
   10cba:	e7e7      	b.n	10c8c <Radio_LBTScanTimeout+0x44>
   10cbc:	200017c8 	.word	0x200017c8
   10cc0:	00009fbd 	.word	0x00009fbd
   10cc4:	00010c49 	.word	0x00010c49
   10cc8:	00009795 	.word	0x00009795
   10ccc:	20001dc0 	.word	0x20001dc0
   10cd0:	00010f21 	.word	0x00010f21
   10cd4:	0000fc6d 	.word	0x0000fc6d

00010cd8 <RADIO_ScanHandler>:
   10cd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10cda:	4b12      	ldr	r3, [pc, #72]	; (10d24 <RADIO_ScanHandler+0x4c>)
   10cdc:	4798      	blx	r3
   10cde:	2000      	movs	r0, #0
   10ce0:	4b11      	ldr	r3, [pc, #68]	; (10d28 <RADIO_ScanHandler+0x50>)
   10ce2:	4798      	blx	r3
   10ce4:	4d11      	ldr	r5, [pc, #68]	; (10d2c <RADIO_ScanHandler+0x54>)
   10ce6:	4b12      	ldr	r3, [pc, #72]	; (10d30 <RADIO_ScanHandler+0x58>)
   10ce8:	6828      	ldr	r0, [r5, #0]
   10cea:	2400      	movs	r4, #0
   10cec:	4798      	blx	r3
   10cee:	002b      	movs	r3, r5
   10cf0:	4e10      	ldr	r6, [pc, #64]	; (10d34 <RADIO_ScanHandler+0x5c>)
   10cf2:	334c      	adds	r3, #76	; 0x4c
   10cf4:	2201      	movs	r2, #1
   10cf6:	0021      	movs	r1, r4
   10cf8:	0020      	movs	r0, r4
   10cfa:	801c      	strh	r4, [r3, #0]
   10cfc:	47b0      	blx	r6
   10cfe:	4b0e      	ldr	r3, [pc, #56]	; (10d38 <RADIO_ScanHandler+0x60>)
   10d00:	2109      	movs	r1, #9
   10d02:	2012      	movs	r0, #18
   10d04:	4798      	blx	r3
   10d06:	3550      	adds	r5, #80	; 0x50
   10d08:	0022      	movs	r2, r4
   10d0a:	0021      	movs	r1, r4
   10d0c:	2005      	movs	r0, #5
   10d0e:	47b0      	blx	r6
   10d10:	7828      	ldrb	r0, [r5, #0]
   10d12:	4b0a      	ldr	r3, [pc, #40]	; (10d3c <RADIO_ScanHandler+0x64>)
   10d14:	4d0a      	ldr	r5, [pc, #40]	; (10d40 <RADIO_ScanHandler+0x68>)
   10d16:	9400      	str	r4, [sp, #0]
   10d18:	0022      	movs	r2, r4
   10d1a:	490a      	ldr	r1, [pc, #40]	; (10d44 <RADIO_ScanHandler+0x6c>)
   10d1c:	47a8      	blx	r5
   10d1e:	0020      	movs	r0, r4
   10d20:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   10d22:	46c0      	nop			; (mov r8, r8)
   10d24:	000103d1 	.word	0x000103d1
   10d28:	0000ff21 	.word	0x0000ff21
   10d2c:	200017c8 	.word	0x200017c8
   10d30:	0000f665 	.word	0x0000f665
   10d34:	00009df9 	.word	0x00009df9
   10d38:	00003111 	.word	0x00003111
   10d3c:	00010c49 	.word	0x00010c49
   10d40:	00009795 	.word	0x00009795
   10d44:	00002328 	.word	0x00002328

00010d48 <radioScanDoneHandler>:
   10d48:	b530      	push	{r4, r5, lr}
   10d4a:	4a18      	ldr	r2, [pc, #96]	; (10dac <radioScanDoneHandler+0x64>)
   10d4c:	4918      	ldr	r1, [pc, #96]	; (10db0 <radioScanDoneHandler+0x68>)
   10d4e:	8813      	ldrh	r3, [r2, #0]
   10d50:	b085      	sub	sp, #20
   10d52:	400b      	ands	r3, r1
   10d54:	8013      	strh	r3, [r2, #0]
   10d56:	2200      	movs	r2, #0
   10d58:	4b16      	ldr	r3, [pc, #88]	; (10db4 <radioScanDoneHandler+0x6c>)
   10d5a:	0011      	movs	r1, r2
   10d5c:	0010      	movs	r0, r2
   10d5e:	4798      	blx	r3
   10d60:	2000      	movs	r0, #0
   10d62:	4b15      	ldr	r3, [pc, #84]	; (10db8 <radioScanDoneHandler+0x70>)
   10d64:	4798      	blx	r3
   10d66:	4b15      	ldr	r3, [pc, #84]	; (10dbc <radioScanDoneHandler+0x74>)
   10d68:	4798      	blx	r3
   10d6a:	4c15      	ldr	r4, [pc, #84]	; (10dc0 <radioScanDoneHandler+0x78>)
   10d6c:	0023      	movs	r3, r4
   10d6e:	334c      	adds	r3, #76	; 0x4c
   10d70:	2100      	movs	r1, #0
   10d72:	5e59      	ldrsh	r1, [r3, r1]
   10d74:	233e      	movs	r3, #62	; 0x3e
   10d76:	5ee2      	ldrsh	r2, [r4, r3]
   10d78:	4b12      	ldr	r3, [pc, #72]	; (10dc4 <radioScanDoneHandler+0x7c>)
   10d7a:	4291      	cmp	r1, r2
   10d7c:	da06      	bge.n	10d8c <radioScanDoneHandler+0x44>
   10d7e:	2002      	movs	r0, #2
   10d80:	4798      	blx	r3
   10d82:	4b11      	ldr	r3, [pc, #68]	; (10dc8 <radioScanDoneHandler+0x80>)
   10d84:	4798      	blx	r3
   10d86:	2000      	movs	r0, #0
   10d88:	b005      	add	sp, #20
   10d8a:	bd30      	pop	{r4, r5, pc}
   10d8c:	2207      	movs	r2, #7
   10d8e:	ad01      	add	r5, sp, #4
   10d90:	2001      	movs	r0, #1
   10d92:	702a      	strb	r2, [r5, #0]
   10d94:	4798      	blx	r3
   10d96:	4b0d      	ldr	r3, [pc, #52]	; (10dcc <radioScanDoneHandler+0x84>)
   10d98:	781b      	ldrb	r3, [r3, #0]
   10d9a:	079b      	lsls	r3, r3, #30
   10d9c:	d5f3      	bpl.n	10d86 <radioScanDoneHandler+0x3e>
   10d9e:	6923      	ldr	r3, [r4, #16]
   10da0:	2b00      	cmp	r3, #0
   10da2:	d0f0      	beq.n	10d86 <radioScanDoneHandler+0x3e>
   10da4:	0029      	movs	r1, r5
   10da6:	2002      	movs	r0, #2
   10da8:	4798      	blx	r3
   10daa:	e7ec      	b.n	10d86 <radioScanDoneHandler+0x3e>
   10dac:	20001dc0 	.word	0x20001dc0
   10db0:	fffffdff 	.word	0xfffffdff
   10db4:	00009df9 	.word	0x00009df9
   10db8:	00010049 	.word	0x00010049
   10dbc:	00010405 	.word	0x00010405
   10dc0:	200017c8 	.word	0x200017c8
   10dc4:	0000fd19 	.word	0x0000fd19
   10dc8:	000106d1 	.word	0x000106d1
   10dcc:	20001dc2 	.word	0x20001dc2

00010dd0 <__gnu_thumb1_case_sqi>:
   10dd0:	b402      	push	{r1}
   10dd2:	4671      	mov	r1, lr
   10dd4:	0849      	lsrs	r1, r1, #1
   10dd6:	0049      	lsls	r1, r1, #1
   10dd8:	5609      	ldrsb	r1, [r1, r0]
   10dda:	0049      	lsls	r1, r1, #1
   10ddc:	448e      	add	lr, r1
   10dde:	bc02      	pop	{r1}
   10de0:	4770      	bx	lr
   10de2:	46c0      	nop			; (mov r8, r8)

00010de4 <__gnu_thumb1_case_uqi>:
   10de4:	b402      	push	{r1}
   10de6:	4671      	mov	r1, lr
   10de8:	0849      	lsrs	r1, r1, #1
   10dea:	0049      	lsls	r1, r1, #1
   10dec:	5c09      	ldrb	r1, [r1, r0]
   10dee:	0049      	lsls	r1, r1, #1
   10df0:	448e      	add	lr, r1
   10df2:	bc02      	pop	{r1}
   10df4:	4770      	bx	lr
   10df6:	46c0      	nop			; (mov r8, r8)

00010df8 <__gnu_thumb1_case_uhi>:
   10df8:	b403      	push	{r0, r1}
   10dfa:	4671      	mov	r1, lr
   10dfc:	0849      	lsrs	r1, r1, #1
   10dfe:	0040      	lsls	r0, r0, #1
   10e00:	0049      	lsls	r1, r1, #1
   10e02:	5a09      	ldrh	r1, [r1, r0]
   10e04:	0049      	lsls	r1, r1, #1
   10e06:	448e      	add	lr, r1
   10e08:	bc03      	pop	{r0, r1}
   10e0a:	4770      	bx	lr

00010e0c <__udivsi3>:
   10e0c:	2200      	movs	r2, #0
   10e0e:	0843      	lsrs	r3, r0, #1
   10e10:	428b      	cmp	r3, r1
   10e12:	d374      	bcc.n	10efe <__udivsi3+0xf2>
   10e14:	0903      	lsrs	r3, r0, #4
   10e16:	428b      	cmp	r3, r1
   10e18:	d35f      	bcc.n	10eda <__udivsi3+0xce>
   10e1a:	0a03      	lsrs	r3, r0, #8
   10e1c:	428b      	cmp	r3, r1
   10e1e:	d344      	bcc.n	10eaa <__udivsi3+0x9e>
   10e20:	0b03      	lsrs	r3, r0, #12
   10e22:	428b      	cmp	r3, r1
   10e24:	d328      	bcc.n	10e78 <__udivsi3+0x6c>
   10e26:	0c03      	lsrs	r3, r0, #16
   10e28:	428b      	cmp	r3, r1
   10e2a:	d30d      	bcc.n	10e48 <__udivsi3+0x3c>
   10e2c:	22ff      	movs	r2, #255	; 0xff
   10e2e:	0209      	lsls	r1, r1, #8
   10e30:	ba12      	rev	r2, r2
   10e32:	0c03      	lsrs	r3, r0, #16
   10e34:	428b      	cmp	r3, r1
   10e36:	d302      	bcc.n	10e3e <__udivsi3+0x32>
   10e38:	1212      	asrs	r2, r2, #8
   10e3a:	0209      	lsls	r1, r1, #8
   10e3c:	d065      	beq.n	10f0a <__udivsi3+0xfe>
   10e3e:	0b03      	lsrs	r3, r0, #12
   10e40:	428b      	cmp	r3, r1
   10e42:	d319      	bcc.n	10e78 <__udivsi3+0x6c>
   10e44:	e000      	b.n	10e48 <__udivsi3+0x3c>
   10e46:	0a09      	lsrs	r1, r1, #8
   10e48:	0bc3      	lsrs	r3, r0, #15
   10e4a:	428b      	cmp	r3, r1
   10e4c:	d301      	bcc.n	10e52 <__udivsi3+0x46>
   10e4e:	03cb      	lsls	r3, r1, #15
   10e50:	1ac0      	subs	r0, r0, r3
   10e52:	4152      	adcs	r2, r2
   10e54:	0b83      	lsrs	r3, r0, #14
   10e56:	428b      	cmp	r3, r1
   10e58:	d301      	bcc.n	10e5e <__udivsi3+0x52>
   10e5a:	038b      	lsls	r3, r1, #14
   10e5c:	1ac0      	subs	r0, r0, r3
   10e5e:	4152      	adcs	r2, r2
   10e60:	0b43      	lsrs	r3, r0, #13
   10e62:	428b      	cmp	r3, r1
   10e64:	d301      	bcc.n	10e6a <__udivsi3+0x5e>
   10e66:	034b      	lsls	r3, r1, #13
   10e68:	1ac0      	subs	r0, r0, r3
   10e6a:	4152      	adcs	r2, r2
   10e6c:	0b03      	lsrs	r3, r0, #12
   10e6e:	428b      	cmp	r3, r1
   10e70:	d301      	bcc.n	10e76 <__udivsi3+0x6a>
   10e72:	030b      	lsls	r3, r1, #12
   10e74:	1ac0      	subs	r0, r0, r3
   10e76:	4152      	adcs	r2, r2
   10e78:	0ac3      	lsrs	r3, r0, #11
   10e7a:	428b      	cmp	r3, r1
   10e7c:	d301      	bcc.n	10e82 <__udivsi3+0x76>
   10e7e:	02cb      	lsls	r3, r1, #11
   10e80:	1ac0      	subs	r0, r0, r3
   10e82:	4152      	adcs	r2, r2
   10e84:	0a83      	lsrs	r3, r0, #10
   10e86:	428b      	cmp	r3, r1
   10e88:	d301      	bcc.n	10e8e <__udivsi3+0x82>
   10e8a:	028b      	lsls	r3, r1, #10
   10e8c:	1ac0      	subs	r0, r0, r3
   10e8e:	4152      	adcs	r2, r2
   10e90:	0a43      	lsrs	r3, r0, #9
   10e92:	428b      	cmp	r3, r1
   10e94:	d301      	bcc.n	10e9a <__udivsi3+0x8e>
   10e96:	024b      	lsls	r3, r1, #9
   10e98:	1ac0      	subs	r0, r0, r3
   10e9a:	4152      	adcs	r2, r2
   10e9c:	0a03      	lsrs	r3, r0, #8
   10e9e:	428b      	cmp	r3, r1
   10ea0:	d301      	bcc.n	10ea6 <__udivsi3+0x9a>
   10ea2:	020b      	lsls	r3, r1, #8
   10ea4:	1ac0      	subs	r0, r0, r3
   10ea6:	4152      	adcs	r2, r2
   10ea8:	d2cd      	bcs.n	10e46 <__udivsi3+0x3a>
   10eaa:	09c3      	lsrs	r3, r0, #7
   10eac:	428b      	cmp	r3, r1
   10eae:	d301      	bcc.n	10eb4 <__udivsi3+0xa8>
   10eb0:	01cb      	lsls	r3, r1, #7
   10eb2:	1ac0      	subs	r0, r0, r3
   10eb4:	4152      	adcs	r2, r2
   10eb6:	0983      	lsrs	r3, r0, #6
   10eb8:	428b      	cmp	r3, r1
   10eba:	d301      	bcc.n	10ec0 <__udivsi3+0xb4>
   10ebc:	018b      	lsls	r3, r1, #6
   10ebe:	1ac0      	subs	r0, r0, r3
   10ec0:	4152      	adcs	r2, r2
   10ec2:	0943      	lsrs	r3, r0, #5
   10ec4:	428b      	cmp	r3, r1
   10ec6:	d301      	bcc.n	10ecc <__udivsi3+0xc0>
   10ec8:	014b      	lsls	r3, r1, #5
   10eca:	1ac0      	subs	r0, r0, r3
   10ecc:	4152      	adcs	r2, r2
   10ece:	0903      	lsrs	r3, r0, #4
   10ed0:	428b      	cmp	r3, r1
   10ed2:	d301      	bcc.n	10ed8 <__udivsi3+0xcc>
   10ed4:	010b      	lsls	r3, r1, #4
   10ed6:	1ac0      	subs	r0, r0, r3
   10ed8:	4152      	adcs	r2, r2
   10eda:	08c3      	lsrs	r3, r0, #3
   10edc:	428b      	cmp	r3, r1
   10ede:	d301      	bcc.n	10ee4 <__udivsi3+0xd8>
   10ee0:	00cb      	lsls	r3, r1, #3
   10ee2:	1ac0      	subs	r0, r0, r3
   10ee4:	4152      	adcs	r2, r2
   10ee6:	0883      	lsrs	r3, r0, #2
   10ee8:	428b      	cmp	r3, r1
   10eea:	d301      	bcc.n	10ef0 <__udivsi3+0xe4>
   10eec:	008b      	lsls	r3, r1, #2
   10eee:	1ac0      	subs	r0, r0, r3
   10ef0:	4152      	adcs	r2, r2
   10ef2:	0843      	lsrs	r3, r0, #1
   10ef4:	428b      	cmp	r3, r1
   10ef6:	d301      	bcc.n	10efc <__udivsi3+0xf0>
   10ef8:	004b      	lsls	r3, r1, #1
   10efa:	1ac0      	subs	r0, r0, r3
   10efc:	4152      	adcs	r2, r2
   10efe:	1a41      	subs	r1, r0, r1
   10f00:	d200      	bcs.n	10f04 <__udivsi3+0xf8>
   10f02:	4601      	mov	r1, r0
   10f04:	4152      	adcs	r2, r2
   10f06:	4610      	mov	r0, r2
   10f08:	4770      	bx	lr
   10f0a:	e7ff      	b.n	10f0c <__udivsi3+0x100>
   10f0c:	b501      	push	{r0, lr}
   10f0e:	2000      	movs	r0, #0
   10f10:	f000 f8f0 	bl	110f4 <__aeabi_idiv0>
   10f14:	bd02      	pop	{r1, pc}
   10f16:	46c0      	nop			; (mov r8, r8)

00010f18 <__aeabi_uidivmod>:
   10f18:	2900      	cmp	r1, #0
   10f1a:	d0f7      	beq.n	10f0c <__udivsi3+0x100>
   10f1c:	e776      	b.n	10e0c <__udivsi3>
   10f1e:	4770      	bx	lr

00010f20 <__divsi3>:
   10f20:	4603      	mov	r3, r0
   10f22:	430b      	orrs	r3, r1
   10f24:	d47f      	bmi.n	11026 <__divsi3+0x106>
   10f26:	2200      	movs	r2, #0
   10f28:	0843      	lsrs	r3, r0, #1
   10f2a:	428b      	cmp	r3, r1
   10f2c:	d374      	bcc.n	11018 <__divsi3+0xf8>
   10f2e:	0903      	lsrs	r3, r0, #4
   10f30:	428b      	cmp	r3, r1
   10f32:	d35f      	bcc.n	10ff4 <__divsi3+0xd4>
   10f34:	0a03      	lsrs	r3, r0, #8
   10f36:	428b      	cmp	r3, r1
   10f38:	d344      	bcc.n	10fc4 <__divsi3+0xa4>
   10f3a:	0b03      	lsrs	r3, r0, #12
   10f3c:	428b      	cmp	r3, r1
   10f3e:	d328      	bcc.n	10f92 <__divsi3+0x72>
   10f40:	0c03      	lsrs	r3, r0, #16
   10f42:	428b      	cmp	r3, r1
   10f44:	d30d      	bcc.n	10f62 <__divsi3+0x42>
   10f46:	22ff      	movs	r2, #255	; 0xff
   10f48:	0209      	lsls	r1, r1, #8
   10f4a:	ba12      	rev	r2, r2
   10f4c:	0c03      	lsrs	r3, r0, #16
   10f4e:	428b      	cmp	r3, r1
   10f50:	d302      	bcc.n	10f58 <__divsi3+0x38>
   10f52:	1212      	asrs	r2, r2, #8
   10f54:	0209      	lsls	r1, r1, #8
   10f56:	d065      	beq.n	11024 <__divsi3+0x104>
   10f58:	0b03      	lsrs	r3, r0, #12
   10f5a:	428b      	cmp	r3, r1
   10f5c:	d319      	bcc.n	10f92 <__divsi3+0x72>
   10f5e:	e000      	b.n	10f62 <__divsi3+0x42>
   10f60:	0a09      	lsrs	r1, r1, #8
   10f62:	0bc3      	lsrs	r3, r0, #15
   10f64:	428b      	cmp	r3, r1
   10f66:	d301      	bcc.n	10f6c <__divsi3+0x4c>
   10f68:	03cb      	lsls	r3, r1, #15
   10f6a:	1ac0      	subs	r0, r0, r3
   10f6c:	4152      	adcs	r2, r2
   10f6e:	0b83      	lsrs	r3, r0, #14
   10f70:	428b      	cmp	r3, r1
   10f72:	d301      	bcc.n	10f78 <__divsi3+0x58>
   10f74:	038b      	lsls	r3, r1, #14
   10f76:	1ac0      	subs	r0, r0, r3
   10f78:	4152      	adcs	r2, r2
   10f7a:	0b43      	lsrs	r3, r0, #13
   10f7c:	428b      	cmp	r3, r1
   10f7e:	d301      	bcc.n	10f84 <__divsi3+0x64>
   10f80:	034b      	lsls	r3, r1, #13
   10f82:	1ac0      	subs	r0, r0, r3
   10f84:	4152      	adcs	r2, r2
   10f86:	0b03      	lsrs	r3, r0, #12
   10f88:	428b      	cmp	r3, r1
   10f8a:	d301      	bcc.n	10f90 <__divsi3+0x70>
   10f8c:	030b      	lsls	r3, r1, #12
   10f8e:	1ac0      	subs	r0, r0, r3
   10f90:	4152      	adcs	r2, r2
   10f92:	0ac3      	lsrs	r3, r0, #11
   10f94:	428b      	cmp	r3, r1
   10f96:	d301      	bcc.n	10f9c <__divsi3+0x7c>
   10f98:	02cb      	lsls	r3, r1, #11
   10f9a:	1ac0      	subs	r0, r0, r3
   10f9c:	4152      	adcs	r2, r2
   10f9e:	0a83      	lsrs	r3, r0, #10
   10fa0:	428b      	cmp	r3, r1
   10fa2:	d301      	bcc.n	10fa8 <__divsi3+0x88>
   10fa4:	028b      	lsls	r3, r1, #10
   10fa6:	1ac0      	subs	r0, r0, r3
   10fa8:	4152      	adcs	r2, r2
   10faa:	0a43      	lsrs	r3, r0, #9
   10fac:	428b      	cmp	r3, r1
   10fae:	d301      	bcc.n	10fb4 <__divsi3+0x94>
   10fb0:	024b      	lsls	r3, r1, #9
   10fb2:	1ac0      	subs	r0, r0, r3
   10fb4:	4152      	adcs	r2, r2
   10fb6:	0a03      	lsrs	r3, r0, #8
   10fb8:	428b      	cmp	r3, r1
   10fba:	d301      	bcc.n	10fc0 <__divsi3+0xa0>
   10fbc:	020b      	lsls	r3, r1, #8
   10fbe:	1ac0      	subs	r0, r0, r3
   10fc0:	4152      	adcs	r2, r2
   10fc2:	d2cd      	bcs.n	10f60 <__divsi3+0x40>
   10fc4:	09c3      	lsrs	r3, r0, #7
   10fc6:	428b      	cmp	r3, r1
   10fc8:	d301      	bcc.n	10fce <__divsi3+0xae>
   10fca:	01cb      	lsls	r3, r1, #7
   10fcc:	1ac0      	subs	r0, r0, r3
   10fce:	4152      	adcs	r2, r2
   10fd0:	0983      	lsrs	r3, r0, #6
   10fd2:	428b      	cmp	r3, r1
   10fd4:	d301      	bcc.n	10fda <__divsi3+0xba>
   10fd6:	018b      	lsls	r3, r1, #6
   10fd8:	1ac0      	subs	r0, r0, r3
   10fda:	4152      	adcs	r2, r2
   10fdc:	0943      	lsrs	r3, r0, #5
   10fde:	428b      	cmp	r3, r1
   10fe0:	d301      	bcc.n	10fe6 <__divsi3+0xc6>
   10fe2:	014b      	lsls	r3, r1, #5
   10fe4:	1ac0      	subs	r0, r0, r3
   10fe6:	4152      	adcs	r2, r2
   10fe8:	0903      	lsrs	r3, r0, #4
   10fea:	428b      	cmp	r3, r1
   10fec:	d301      	bcc.n	10ff2 <__divsi3+0xd2>
   10fee:	010b      	lsls	r3, r1, #4
   10ff0:	1ac0      	subs	r0, r0, r3
   10ff2:	4152      	adcs	r2, r2
   10ff4:	08c3      	lsrs	r3, r0, #3
   10ff6:	428b      	cmp	r3, r1
   10ff8:	d301      	bcc.n	10ffe <__divsi3+0xde>
   10ffa:	00cb      	lsls	r3, r1, #3
   10ffc:	1ac0      	subs	r0, r0, r3
   10ffe:	4152      	adcs	r2, r2
   11000:	0883      	lsrs	r3, r0, #2
   11002:	428b      	cmp	r3, r1
   11004:	d301      	bcc.n	1100a <__divsi3+0xea>
   11006:	008b      	lsls	r3, r1, #2
   11008:	1ac0      	subs	r0, r0, r3
   1100a:	4152      	adcs	r2, r2
   1100c:	0843      	lsrs	r3, r0, #1
   1100e:	428b      	cmp	r3, r1
   11010:	d301      	bcc.n	11016 <__divsi3+0xf6>
   11012:	004b      	lsls	r3, r1, #1
   11014:	1ac0      	subs	r0, r0, r3
   11016:	4152      	adcs	r2, r2
   11018:	1a41      	subs	r1, r0, r1
   1101a:	d200      	bcs.n	1101e <__divsi3+0xfe>
   1101c:	4601      	mov	r1, r0
   1101e:	4152      	adcs	r2, r2
   11020:	4610      	mov	r0, r2
   11022:	4770      	bx	lr
   11024:	e05d      	b.n	110e2 <__divsi3+0x1c2>
   11026:	0fca      	lsrs	r2, r1, #31
   11028:	d000      	beq.n	1102c <__divsi3+0x10c>
   1102a:	4249      	negs	r1, r1
   1102c:	1003      	asrs	r3, r0, #32
   1102e:	d300      	bcc.n	11032 <__divsi3+0x112>
   11030:	4240      	negs	r0, r0
   11032:	4053      	eors	r3, r2
   11034:	2200      	movs	r2, #0
   11036:	469c      	mov	ip, r3
   11038:	0903      	lsrs	r3, r0, #4
   1103a:	428b      	cmp	r3, r1
   1103c:	d32d      	bcc.n	1109a <__divsi3+0x17a>
   1103e:	0a03      	lsrs	r3, r0, #8
   11040:	428b      	cmp	r3, r1
   11042:	d312      	bcc.n	1106a <__divsi3+0x14a>
   11044:	22fc      	movs	r2, #252	; 0xfc
   11046:	0189      	lsls	r1, r1, #6
   11048:	ba12      	rev	r2, r2
   1104a:	0a03      	lsrs	r3, r0, #8
   1104c:	428b      	cmp	r3, r1
   1104e:	d30c      	bcc.n	1106a <__divsi3+0x14a>
   11050:	0189      	lsls	r1, r1, #6
   11052:	1192      	asrs	r2, r2, #6
   11054:	428b      	cmp	r3, r1
   11056:	d308      	bcc.n	1106a <__divsi3+0x14a>
   11058:	0189      	lsls	r1, r1, #6
   1105a:	1192      	asrs	r2, r2, #6
   1105c:	428b      	cmp	r3, r1
   1105e:	d304      	bcc.n	1106a <__divsi3+0x14a>
   11060:	0189      	lsls	r1, r1, #6
   11062:	d03a      	beq.n	110da <__divsi3+0x1ba>
   11064:	1192      	asrs	r2, r2, #6
   11066:	e000      	b.n	1106a <__divsi3+0x14a>
   11068:	0989      	lsrs	r1, r1, #6
   1106a:	09c3      	lsrs	r3, r0, #7
   1106c:	428b      	cmp	r3, r1
   1106e:	d301      	bcc.n	11074 <__divsi3+0x154>
   11070:	01cb      	lsls	r3, r1, #7
   11072:	1ac0      	subs	r0, r0, r3
   11074:	4152      	adcs	r2, r2
   11076:	0983      	lsrs	r3, r0, #6
   11078:	428b      	cmp	r3, r1
   1107a:	d301      	bcc.n	11080 <__divsi3+0x160>
   1107c:	018b      	lsls	r3, r1, #6
   1107e:	1ac0      	subs	r0, r0, r3
   11080:	4152      	adcs	r2, r2
   11082:	0943      	lsrs	r3, r0, #5
   11084:	428b      	cmp	r3, r1
   11086:	d301      	bcc.n	1108c <__divsi3+0x16c>
   11088:	014b      	lsls	r3, r1, #5
   1108a:	1ac0      	subs	r0, r0, r3
   1108c:	4152      	adcs	r2, r2
   1108e:	0903      	lsrs	r3, r0, #4
   11090:	428b      	cmp	r3, r1
   11092:	d301      	bcc.n	11098 <__divsi3+0x178>
   11094:	010b      	lsls	r3, r1, #4
   11096:	1ac0      	subs	r0, r0, r3
   11098:	4152      	adcs	r2, r2
   1109a:	08c3      	lsrs	r3, r0, #3
   1109c:	428b      	cmp	r3, r1
   1109e:	d301      	bcc.n	110a4 <__divsi3+0x184>
   110a0:	00cb      	lsls	r3, r1, #3
   110a2:	1ac0      	subs	r0, r0, r3
   110a4:	4152      	adcs	r2, r2
   110a6:	0883      	lsrs	r3, r0, #2
   110a8:	428b      	cmp	r3, r1
   110aa:	d301      	bcc.n	110b0 <__divsi3+0x190>
   110ac:	008b      	lsls	r3, r1, #2
   110ae:	1ac0      	subs	r0, r0, r3
   110b0:	4152      	adcs	r2, r2
   110b2:	d2d9      	bcs.n	11068 <__divsi3+0x148>
   110b4:	0843      	lsrs	r3, r0, #1
   110b6:	428b      	cmp	r3, r1
   110b8:	d301      	bcc.n	110be <__divsi3+0x19e>
   110ba:	004b      	lsls	r3, r1, #1
   110bc:	1ac0      	subs	r0, r0, r3
   110be:	4152      	adcs	r2, r2
   110c0:	1a41      	subs	r1, r0, r1
   110c2:	d200      	bcs.n	110c6 <__divsi3+0x1a6>
   110c4:	4601      	mov	r1, r0
   110c6:	4663      	mov	r3, ip
   110c8:	4152      	adcs	r2, r2
   110ca:	105b      	asrs	r3, r3, #1
   110cc:	4610      	mov	r0, r2
   110ce:	d301      	bcc.n	110d4 <__divsi3+0x1b4>
   110d0:	4240      	negs	r0, r0
   110d2:	2b00      	cmp	r3, #0
   110d4:	d500      	bpl.n	110d8 <__divsi3+0x1b8>
   110d6:	4249      	negs	r1, r1
   110d8:	4770      	bx	lr
   110da:	4663      	mov	r3, ip
   110dc:	105b      	asrs	r3, r3, #1
   110de:	d300      	bcc.n	110e2 <__divsi3+0x1c2>
   110e0:	4240      	negs	r0, r0
   110e2:	b501      	push	{r0, lr}
   110e4:	2000      	movs	r0, #0
   110e6:	f000 f805 	bl	110f4 <__aeabi_idiv0>
   110ea:	bd02      	pop	{r1, pc}

000110ec <__aeabi_idivmod>:
   110ec:	2900      	cmp	r1, #0
   110ee:	d0f8      	beq.n	110e2 <__divsi3+0x1c2>
   110f0:	e716      	b.n	10f20 <__divsi3>
   110f2:	4770      	bx	lr

000110f4 <__aeabi_idiv0>:
   110f4:	4770      	bx	lr
   110f6:	46c0      	nop			; (mov r8, r8)

000110f8 <__aeabi_cfrcmple>:
   110f8:	4684      	mov	ip, r0
   110fa:	1c08      	adds	r0, r1, #0
   110fc:	4661      	mov	r1, ip
   110fe:	e7ff      	b.n	11100 <__aeabi_cfcmpeq>

00011100 <__aeabi_cfcmpeq>:
   11100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   11102:	f000 fcb5 	bl	11a70 <__lesf2>
   11106:	2800      	cmp	r0, #0
   11108:	d401      	bmi.n	1110e <__aeabi_cfcmpeq+0xe>
   1110a:	2100      	movs	r1, #0
   1110c:	42c8      	cmn	r0, r1
   1110e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00011110 <__aeabi_fcmpeq>:
   11110:	b510      	push	{r4, lr}
   11112:	f000 fc47 	bl	119a4 <__eqsf2>
   11116:	4240      	negs	r0, r0
   11118:	3001      	adds	r0, #1
   1111a:	bd10      	pop	{r4, pc}

0001111c <__aeabi_fcmplt>:
   1111c:	b510      	push	{r4, lr}
   1111e:	f000 fca7 	bl	11a70 <__lesf2>
   11122:	2800      	cmp	r0, #0
   11124:	db01      	blt.n	1112a <__aeabi_fcmplt+0xe>
   11126:	2000      	movs	r0, #0
   11128:	bd10      	pop	{r4, pc}
   1112a:	2001      	movs	r0, #1
   1112c:	bd10      	pop	{r4, pc}
   1112e:	46c0      	nop			; (mov r8, r8)

00011130 <__aeabi_fcmple>:
   11130:	b510      	push	{r4, lr}
   11132:	f000 fc9d 	bl	11a70 <__lesf2>
   11136:	2800      	cmp	r0, #0
   11138:	dd01      	ble.n	1113e <__aeabi_fcmple+0xe>
   1113a:	2000      	movs	r0, #0
   1113c:	bd10      	pop	{r4, pc}
   1113e:	2001      	movs	r0, #1
   11140:	bd10      	pop	{r4, pc}
   11142:	46c0      	nop			; (mov r8, r8)

00011144 <__aeabi_fcmpgt>:
   11144:	b510      	push	{r4, lr}
   11146:	f000 fc53 	bl	119f0 <__gesf2>
   1114a:	2800      	cmp	r0, #0
   1114c:	dc01      	bgt.n	11152 <__aeabi_fcmpgt+0xe>
   1114e:	2000      	movs	r0, #0
   11150:	bd10      	pop	{r4, pc}
   11152:	2001      	movs	r0, #1
   11154:	bd10      	pop	{r4, pc}
   11156:	46c0      	nop			; (mov r8, r8)

00011158 <__aeabi_fcmpge>:
   11158:	b510      	push	{r4, lr}
   1115a:	f000 fc49 	bl	119f0 <__gesf2>
   1115e:	2800      	cmp	r0, #0
   11160:	da01      	bge.n	11166 <__aeabi_fcmpge+0xe>
   11162:	2000      	movs	r0, #0
   11164:	bd10      	pop	{r4, pc}
   11166:	2001      	movs	r0, #1
   11168:	bd10      	pop	{r4, pc}
   1116a:	46c0      	nop			; (mov r8, r8)

0001116c <__aeabi_uldivmod>:
   1116c:	2b00      	cmp	r3, #0
   1116e:	d111      	bne.n	11194 <__aeabi_uldivmod+0x28>
   11170:	2a00      	cmp	r2, #0
   11172:	d10f      	bne.n	11194 <__aeabi_uldivmod+0x28>
   11174:	2900      	cmp	r1, #0
   11176:	d100      	bne.n	1117a <__aeabi_uldivmod+0xe>
   11178:	2800      	cmp	r0, #0
   1117a:	d002      	beq.n	11182 <__aeabi_uldivmod+0x16>
   1117c:	2100      	movs	r1, #0
   1117e:	43c9      	mvns	r1, r1
   11180:	1c08      	adds	r0, r1, #0
   11182:	b407      	push	{r0, r1, r2}
   11184:	4802      	ldr	r0, [pc, #8]	; (11190 <__aeabi_uldivmod+0x24>)
   11186:	a102      	add	r1, pc, #8	; (adr r1, 11190 <__aeabi_uldivmod+0x24>)
   11188:	1840      	adds	r0, r0, r1
   1118a:	9002      	str	r0, [sp, #8]
   1118c:	bd03      	pop	{r0, r1, pc}
   1118e:	46c0      	nop			; (mov r8, r8)
   11190:	ffffff65 	.word	0xffffff65
   11194:	b403      	push	{r0, r1}
   11196:	4668      	mov	r0, sp
   11198:	b501      	push	{r0, lr}
   1119a:	9802      	ldr	r0, [sp, #8]
   1119c:	f000 f868 	bl	11270 <__udivmoddi4>
   111a0:	9b01      	ldr	r3, [sp, #4]
   111a2:	469e      	mov	lr, r3
   111a4:	b002      	add	sp, #8
   111a6:	bc0c      	pop	{r2, r3}
   111a8:	4770      	bx	lr
   111aa:	46c0      	nop			; (mov r8, r8)

000111ac <__aeabi_lmul>:
   111ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   111ae:	46ce      	mov	lr, r9
   111b0:	4647      	mov	r7, r8
   111b2:	0415      	lsls	r5, r2, #16
   111b4:	0c2d      	lsrs	r5, r5, #16
   111b6:	002e      	movs	r6, r5
   111b8:	b580      	push	{r7, lr}
   111ba:	0407      	lsls	r7, r0, #16
   111bc:	0c14      	lsrs	r4, r2, #16
   111be:	0c3f      	lsrs	r7, r7, #16
   111c0:	4699      	mov	r9, r3
   111c2:	0c03      	lsrs	r3, r0, #16
   111c4:	437e      	muls	r6, r7
   111c6:	435d      	muls	r5, r3
   111c8:	4367      	muls	r7, r4
   111ca:	4363      	muls	r3, r4
   111cc:	197f      	adds	r7, r7, r5
   111ce:	0c34      	lsrs	r4, r6, #16
   111d0:	19e4      	adds	r4, r4, r7
   111d2:	469c      	mov	ip, r3
   111d4:	42a5      	cmp	r5, r4
   111d6:	d903      	bls.n	111e0 <__aeabi_lmul+0x34>
   111d8:	2380      	movs	r3, #128	; 0x80
   111da:	025b      	lsls	r3, r3, #9
   111dc:	4698      	mov	r8, r3
   111de:	44c4      	add	ip, r8
   111e0:	464b      	mov	r3, r9
   111e2:	4351      	muls	r1, r2
   111e4:	4343      	muls	r3, r0
   111e6:	0436      	lsls	r6, r6, #16
   111e8:	0c36      	lsrs	r6, r6, #16
   111ea:	0c25      	lsrs	r5, r4, #16
   111ec:	0424      	lsls	r4, r4, #16
   111ee:	4465      	add	r5, ip
   111f0:	19a4      	adds	r4, r4, r6
   111f2:	1859      	adds	r1, r3, r1
   111f4:	1949      	adds	r1, r1, r5
   111f6:	0020      	movs	r0, r4
   111f8:	bc0c      	pop	{r2, r3}
   111fa:	4690      	mov	r8, r2
   111fc:	4699      	mov	r9, r3
   111fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011200 <__aeabi_f2uiz>:
   11200:	219e      	movs	r1, #158	; 0x9e
   11202:	b510      	push	{r4, lr}
   11204:	05c9      	lsls	r1, r1, #23
   11206:	1c04      	adds	r4, r0, #0
   11208:	f7ff ffa6 	bl	11158 <__aeabi_fcmpge>
   1120c:	2800      	cmp	r0, #0
   1120e:	d103      	bne.n	11218 <__aeabi_f2uiz+0x18>
   11210:	1c20      	adds	r0, r4, #0
   11212:	f000 ff2b 	bl	1206c <__aeabi_f2iz>
   11216:	bd10      	pop	{r4, pc}
   11218:	219e      	movs	r1, #158	; 0x9e
   1121a:	1c20      	adds	r0, r4, #0
   1121c:	05c9      	lsls	r1, r1, #23
   1121e:	f000 fd89 	bl	11d34 <__aeabi_fsub>
   11222:	f000 ff23 	bl	1206c <__aeabi_f2iz>
   11226:	2380      	movs	r3, #128	; 0x80
   11228:	061b      	lsls	r3, r3, #24
   1122a:	469c      	mov	ip, r3
   1122c:	4460      	add	r0, ip
   1122e:	e7f2      	b.n	11216 <__aeabi_f2uiz+0x16>

00011230 <__aeabi_f2ulz>:
   11230:	b570      	push	{r4, r5, r6, lr}
   11232:	f002 fc17 	bl	13a64 <__aeabi_f2d>
   11236:	2200      	movs	r2, #0
   11238:	4b0b      	ldr	r3, [pc, #44]	; (11268 <__aeabi_f2ulz+0x38>)
   1123a:	000d      	movs	r5, r1
   1123c:	0004      	movs	r4, r0
   1123e:	f001 fe0f 	bl	12e60 <__aeabi_dmul>
   11242:	f002 fc8b 	bl	13b5c <__aeabi_d2uiz>
   11246:	0006      	movs	r6, r0
   11248:	f002 fbd4 	bl	139f4 <__aeabi_ui2d>
   1124c:	2200      	movs	r2, #0
   1124e:	4b07      	ldr	r3, [pc, #28]	; (1126c <__aeabi_f2ulz+0x3c>)
   11250:	f001 fe06 	bl	12e60 <__aeabi_dmul>
   11254:	0002      	movs	r2, r0
   11256:	000b      	movs	r3, r1
   11258:	0020      	movs	r0, r4
   1125a:	0029      	movs	r1, r5
   1125c:	f002 f880 	bl	13360 <__aeabi_dsub>
   11260:	f002 fc7c 	bl	13b5c <__aeabi_d2uiz>
   11264:	0031      	movs	r1, r6
   11266:	bd70      	pop	{r4, r5, r6, pc}
   11268:	3df00000 	.word	0x3df00000
   1126c:	41f00000 	.word	0x41f00000

00011270 <__udivmoddi4>:
   11270:	b5f0      	push	{r4, r5, r6, r7, lr}
   11272:	4657      	mov	r7, sl
   11274:	464e      	mov	r6, r9
   11276:	4645      	mov	r5, r8
   11278:	46de      	mov	lr, fp
   1127a:	b5e0      	push	{r5, r6, r7, lr}
   1127c:	0004      	movs	r4, r0
   1127e:	b083      	sub	sp, #12
   11280:	000d      	movs	r5, r1
   11282:	4692      	mov	sl, r2
   11284:	4699      	mov	r9, r3
   11286:	428b      	cmp	r3, r1
   11288:	d82f      	bhi.n	112ea <__udivmoddi4+0x7a>
   1128a:	d02c      	beq.n	112e6 <__udivmoddi4+0x76>
   1128c:	4649      	mov	r1, r9
   1128e:	4650      	mov	r0, sl
   11290:	f002 fc58 	bl	13b44 <__clzdi2>
   11294:	0029      	movs	r1, r5
   11296:	0006      	movs	r6, r0
   11298:	0020      	movs	r0, r4
   1129a:	f002 fc53 	bl	13b44 <__clzdi2>
   1129e:	1a33      	subs	r3, r6, r0
   112a0:	4698      	mov	r8, r3
   112a2:	3b20      	subs	r3, #32
   112a4:	469b      	mov	fp, r3
   112a6:	d500      	bpl.n	112aa <__udivmoddi4+0x3a>
   112a8:	e074      	b.n	11394 <__udivmoddi4+0x124>
   112aa:	4653      	mov	r3, sl
   112ac:	465a      	mov	r2, fp
   112ae:	4093      	lsls	r3, r2
   112b0:	001f      	movs	r7, r3
   112b2:	4653      	mov	r3, sl
   112b4:	4642      	mov	r2, r8
   112b6:	4093      	lsls	r3, r2
   112b8:	001e      	movs	r6, r3
   112ba:	42af      	cmp	r7, r5
   112bc:	d829      	bhi.n	11312 <__udivmoddi4+0xa2>
   112be:	d026      	beq.n	1130e <__udivmoddi4+0x9e>
   112c0:	465b      	mov	r3, fp
   112c2:	1ba4      	subs	r4, r4, r6
   112c4:	41bd      	sbcs	r5, r7
   112c6:	2b00      	cmp	r3, #0
   112c8:	da00      	bge.n	112cc <__udivmoddi4+0x5c>
   112ca:	e079      	b.n	113c0 <__udivmoddi4+0x150>
   112cc:	2200      	movs	r2, #0
   112ce:	2300      	movs	r3, #0
   112d0:	9200      	str	r2, [sp, #0]
   112d2:	9301      	str	r3, [sp, #4]
   112d4:	2301      	movs	r3, #1
   112d6:	465a      	mov	r2, fp
   112d8:	4093      	lsls	r3, r2
   112da:	9301      	str	r3, [sp, #4]
   112dc:	2301      	movs	r3, #1
   112de:	4642      	mov	r2, r8
   112e0:	4093      	lsls	r3, r2
   112e2:	9300      	str	r3, [sp, #0]
   112e4:	e019      	b.n	1131a <__udivmoddi4+0xaa>
   112e6:	4282      	cmp	r2, r0
   112e8:	d9d0      	bls.n	1128c <__udivmoddi4+0x1c>
   112ea:	2200      	movs	r2, #0
   112ec:	2300      	movs	r3, #0
   112ee:	9200      	str	r2, [sp, #0]
   112f0:	9301      	str	r3, [sp, #4]
   112f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   112f4:	2b00      	cmp	r3, #0
   112f6:	d001      	beq.n	112fc <__udivmoddi4+0x8c>
   112f8:	601c      	str	r4, [r3, #0]
   112fa:	605d      	str	r5, [r3, #4]
   112fc:	9800      	ldr	r0, [sp, #0]
   112fe:	9901      	ldr	r1, [sp, #4]
   11300:	b003      	add	sp, #12
   11302:	bc3c      	pop	{r2, r3, r4, r5}
   11304:	4690      	mov	r8, r2
   11306:	4699      	mov	r9, r3
   11308:	46a2      	mov	sl, r4
   1130a:	46ab      	mov	fp, r5
   1130c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1130e:	42a3      	cmp	r3, r4
   11310:	d9d6      	bls.n	112c0 <__udivmoddi4+0x50>
   11312:	2200      	movs	r2, #0
   11314:	2300      	movs	r3, #0
   11316:	9200      	str	r2, [sp, #0]
   11318:	9301      	str	r3, [sp, #4]
   1131a:	4643      	mov	r3, r8
   1131c:	2b00      	cmp	r3, #0
   1131e:	d0e8      	beq.n	112f2 <__udivmoddi4+0x82>
   11320:	07fb      	lsls	r3, r7, #31
   11322:	0872      	lsrs	r2, r6, #1
   11324:	431a      	orrs	r2, r3
   11326:	4646      	mov	r6, r8
   11328:	087b      	lsrs	r3, r7, #1
   1132a:	e00e      	b.n	1134a <__udivmoddi4+0xda>
   1132c:	42ab      	cmp	r3, r5
   1132e:	d101      	bne.n	11334 <__udivmoddi4+0xc4>
   11330:	42a2      	cmp	r2, r4
   11332:	d80c      	bhi.n	1134e <__udivmoddi4+0xde>
   11334:	1aa4      	subs	r4, r4, r2
   11336:	419d      	sbcs	r5, r3
   11338:	2001      	movs	r0, #1
   1133a:	1924      	adds	r4, r4, r4
   1133c:	416d      	adcs	r5, r5
   1133e:	2100      	movs	r1, #0
   11340:	3e01      	subs	r6, #1
   11342:	1824      	adds	r4, r4, r0
   11344:	414d      	adcs	r5, r1
   11346:	2e00      	cmp	r6, #0
   11348:	d006      	beq.n	11358 <__udivmoddi4+0xe8>
   1134a:	42ab      	cmp	r3, r5
   1134c:	d9ee      	bls.n	1132c <__udivmoddi4+0xbc>
   1134e:	3e01      	subs	r6, #1
   11350:	1924      	adds	r4, r4, r4
   11352:	416d      	adcs	r5, r5
   11354:	2e00      	cmp	r6, #0
   11356:	d1f8      	bne.n	1134a <__udivmoddi4+0xda>
   11358:	465b      	mov	r3, fp
   1135a:	9800      	ldr	r0, [sp, #0]
   1135c:	9901      	ldr	r1, [sp, #4]
   1135e:	1900      	adds	r0, r0, r4
   11360:	4169      	adcs	r1, r5
   11362:	2b00      	cmp	r3, #0
   11364:	db22      	blt.n	113ac <__udivmoddi4+0x13c>
   11366:	002b      	movs	r3, r5
   11368:	465a      	mov	r2, fp
   1136a:	40d3      	lsrs	r3, r2
   1136c:	002a      	movs	r2, r5
   1136e:	4644      	mov	r4, r8
   11370:	40e2      	lsrs	r2, r4
   11372:	001c      	movs	r4, r3
   11374:	465b      	mov	r3, fp
   11376:	0015      	movs	r5, r2
   11378:	2b00      	cmp	r3, #0
   1137a:	db2c      	blt.n	113d6 <__udivmoddi4+0x166>
   1137c:	0026      	movs	r6, r4
   1137e:	409e      	lsls	r6, r3
   11380:	0033      	movs	r3, r6
   11382:	0026      	movs	r6, r4
   11384:	4647      	mov	r7, r8
   11386:	40be      	lsls	r6, r7
   11388:	0032      	movs	r2, r6
   1138a:	1a80      	subs	r0, r0, r2
   1138c:	4199      	sbcs	r1, r3
   1138e:	9000      	str	r0, [sp, #0]
   11390:	9101      	str	r1, [sp, #4]
   11392:	e7ae      	b.n	112f2 <__udivmoddi4+0x82>
   11394:	4642      	mov	r2, r8
   11396:	2320      	movs	r3, #32
   11398:	1a9b      	subs	r3, r3, r2
   1139a:	4652      	mov	r2, sl
   1139c:	40da      	lsrs	r2, r3
   1139e:	4641      	mov	r1, r8
   113a0:	0013      	movs	r3, r2
   113a2:	464a      	mov	r2, r9
   113a4:	408a      	lsls	r2, r1
   113a6:	0017      	movs	r7, r2
   113a8:	431f      	orrs	r7, r3
   113aa:	e782      	b.n	112b2 <__udivmoddi4+0x42>
   113ac:	4642      	mov	r2, r8
   113ae:	2320      	movs	r3, #32
   113b0:	1a9b      	subs	r3, r3, r2
   113b2:	002a      	movs	r2, r5
   113b4:	4646      	mov	r6, r8
   113b6:	409a      	lsls	r2, r3
   113b8:	0023      	movs	r3, r4
   113ba:	40f3      	lsrs	r3, r6
   113bc:	4313      	orrs	r3, r2
   113be:	e7d5      	b.n	1136c <__udivmoddi4+0xfc>
   113c0:	4642      	mov	r2, r8
   113c2:	2320      	movs	r3, #32
   113c4:	2100      	movs	r1, #0
   113c6:	1a9b      	subs	r3, r3, r2
   113c8:	2200      	movs	r2, #0
   113ca:	9100      	str	r1, [sp, #0]
   113cc:	9201      	str	r2, [sp, #4]
   113ce:	2201      	movs	r2, #1
   113d0:	40da      	lsrs	r2, r3
   113d2:	9201      	str	r2, [sp, #4]
   113d4:	e782      	b.n	112dc <__udivmoddi4+0x6c>
   113d6:	4642      	mov	r2, r8
   113d8:	2320      	movs	r3, #32
   113da:	0026      	movs	r6, r4
   113dc:	1a9b      	subs	r3, r3, r2
   113de:	40de      	lsrs	r6, r3
   113e0:	002f      	movs	r7, r5
   113e2:	46b4      	mov	ip, r6
   113e4:	4097      	lsls	r7, r2
   113e6:	4666      	mov	r6, ip
   113e8:	003b      	movs	r3, r7
   113ea:	4333      	orrs	r3, r6
   113ec:	e7c9      	b.n	11382 <__udivmoddi4+0x112>
   113ee:	46c0      	nop			; (mov r8, r8)

000113f0 <__aeabi_fadd>:
   113f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   113f2:	46c6      	mov	lr, r8
   113f4:	024e      	lsls	r6, r1, #9
   113f6:	0247      	lsls	r7, r0, #9
   113f8:	0a76      	lsrs	r6, r6, #9
   113fa:	0a7b      	lsrs	r3, r7, #9
   113fc:	0044      	lsls	r4, r0, #1
   113fe:	0fc5      	lsrs	r5, r0, #31
   11400:	00f7      	lsls	r7, r6, #3
   11402:	0048      	lsls	r0, r1, #1
   11404:	4698      	mov	r8, r3
   11406:	b500      	push	{lr}
   11408:	0e24      	lsrs	r4, r4, #24
   1140a:	002a      	movs	r2, r5
   1140c:	00db      	lsls	r3, r3, #3
   1140e:	0e00      	lsrs	r0, r0, #24
   11410:	0fc9      	lsrs	r1, r1, #31
   11412:	46bc      	mov	ip, r7
   11414:	428d      	cmp	r5, r1
   11416:	d067      	beq.n	114e8 <__aeabi_fadd+0xf8>
   11418:	1a22      	subs	r2, r4, r0
   1141a:	2a00      	cmp	r2, #0
   1141c:	dc00      	bgt.n	11420 <__aeabi_fadd+0x30>
   1141e:	e0a5      	b.n	1156c <__aeabi_fadd+0x17c>
   11420:	2800      	cmp	r0, #0
   11422:	d13a      	bne.n	1149a <__aeabi_fadd+0xaa>
   11424:	2f00      	cmp	r7, #0
   11426:	d100      	bne.n	1142a <__aeabi_fadd+0x3a>
   11428:	e093      	b.n	11552 <__aeabi_fadd+0x162>
   1142a:	1e51      	subs	r1, r2, #1
   1142c:	2900      	cmp	r1, #0
   1142e:	d000      	beq.n	11432 <__aeabi_fadd+0x42>
   11430:	e0bc      	b.n	115ac <__aeabi_fadd+0x1bc>
   11432:	2401      	movs	r4, #1
   11434:	1bdb      	subs	r3, r3, r7
   11436:	015a      	lsls	r2, r3, #5
   11438:	d546      	bpl.n	114c8 <__aeabi_fadd+0xd8>
   1143a:	019b      	lsls	r3, r3, #6
   1143c:	099e      	lsrs	r6, r3, #6
   1143e:	0030      	movs	r0, r6
   11440:	f002 fb62 	bl	13b08 <__clzsi2>
   11444:	3805      	subs	r0, #5
   11446:	4086      	lsls	r6, r0
   11448:	4284      	cmp	r4, r0
   1144a:	dd00      	ble.n	1144e <__aeabi_fadd+0x5e>
   1144c:	e09d      	b.n	1158a <__aeabi_fadd+0x19a>
   1144e:	1b04      	subs	r4, r0, r4
   11450:	0032      	movs	r2, r6
   11452:	2020      	movs	r0, #32
   11454:	3401      	adds	r4, #1
   11456:	40e2      	lsrs	r2, r4
   11458:	1b04      	subs	r4, r0, r4
   1145a:	40a6      	lsls	r6, r4
   1145c:	0033      	movs	r3, r6
   1145e:	1e5e      	subs	r6, r3, #1
   11460:	41b3      	sbcs	r3, r6
   11462:	2400      	movs	r4, #0
   11464:	4313      	orrs	r3, r2
   11466:	075a      	lsls	r2, r3, #29
   11468:	d004      	beq.n	11474 <__aeabi_fadd+0x84>
   1146a:	220f      	movs	r2, #15
   1146c:	401a      	ands	r2, r3
   1146e:	2a04      	cmp	r2, #4
   11470:	d000      	beq.n	11474 <__aeabi_fadd+0x84>
   11472:	3304      	adds	r3, #4
   11474:	015a      	lsls	r2, r3, #5
   11476:	d529      	bpl.n	114cc <__aeabi_fadd+0xdc>
   11478:	3401      	adds	r4, #1
   1147a:	2cff      	cmp	r4, #255	; 0xff
   1147c:	d100      	bne.n	11480 <__aeabi_fadd+0x90>
   1147e:	e081      	b.n	11584 <__aeabi_fadd+0x194>
   11480:	002a      	movs	r2, r5
   11482:	019b      	lsls	r3, r3, #6
   11484:	0a5b      	lsrs	r3, r3, #9
   11486:	b2e4      	uxtb	r4, r4
   11488:	025b      	lsls	r3, r3, #9
   1148a:	05e4      	lsls	r4, r4, #23
   1148c:	0a58      	lsrs	r0, r3, #9
   1148e:	07d2      	lsls	r2, r2, #31
   11490:	4320      	orrs	r0, r4
   11492:	4310      	orrs	r0, r2
   11494:	bc04      	pop	{r2}
   11496:	4690      	mov	r8, r2
   11498:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1149a:	2cff      	cmp	r4, #255	; 0xff
   1149c:	d0e3      	beq.n	11466 <__aeabi_fadd+0x76>
   1149e:	2180      	movs	r1, #128	; 0x80
   114a0:	0038      	movs	r0, r7
   114a2:	04c9      	lsls	r1, r1, #19
   114a4:	4308      	orrs	r0, r1
   114a6:	4684      	mov	ip, r0
   114a8:	2a1b      	cmp	r2, #27
   114aa:	dd00      	ble.n	114ae <__aeabi_fadd+0xbe>
   114ac:	e082      	b.n	115b4 <__aeabi_fadd+0x1c4>
   114ae:	2020      	movs	r0, #32
   114b0:	4661      	mov	r1, ip
   114b2:	40d1      	lsrs	r1, r2
   114b4:	1a82      	subs	r2, r0, r2
   114b6:	4660      	mov	r0, ip
   114b8:	4090      	lsls	r0, r2
   114ba:	0002      	movs	r2, r0
   114bc:	1e50      	subs	r0, r2, #1
   114be:	4182      	sbcs	r2, r0
   114c0:	430a      	orrs	r2, r1
   114c2:	1a9b      	subs	r3, r3, r2
   114c4:	015a      	lsls	r2, r3, #5
   114c6:	d4b8      	bmi.n	1143a <__aeabi_fadd+0x4a>
   114c8:	075a      	lsls	r2, r3, #29
   114ca:	d1ce      	bne.n	1146a <__aeabi_fadd+0x7a>
   114cc:	08de      	lsrs	r6, r3, #3
   114ce:	002a      	movs	r2, r5
   114d0:	2cff      	cmp	r4, #255	; 0xff
   114d2:	d13a      	bne.n	1154a <__aeabi_fadd+0x15a>
   114d4:	2e00      	cmp	r6, #0
   114d6:	d100      	bne.n	114da <__aeabi_fadd+0xea>
   114d8:	e0ae      	b.n	11638 <__aeabi_fadd+0x248>
   114da:	2380      	movs	r3, #128	; 0x80
   114dc:	03db      	lsls	r3, r3, #15
   114de:	4333      	orrs	r3, r6
   114e0:	025b      	lsls	r3, r3, #9
   114e2:	0a5b      	lsrs	r3, r3, #9
   114e4:	24ff      	movs	r4, #255	; 0xff
   114e6:	e7cf      	b.n	11488 <__aeabi_fadd+0x98>
   114e8:	1a21      	subs	r1, r4, r0
   114ea:	2900      	cmp	r1, #0
   114ec:	dd52      	ble.n	11594 <__aeabi_fadd+0x1a4>
   114ee:	2800      	cmp	r0, #0
   114f0:	d031      	beq.n	11556 <__aeabi_fadd+0x166>
   114f2:	2cff      	cmp	r4, #255	; 0xff
   114f4:	d0b7      	beq.n	11466 <__aeabi_fadd+0x76>
   114f6:	2080      	movs	r0, #128	; 0x80
   114f8:	003e      	movs	r6, r7
   114fa:	04c0      	lsls	r0, r0, #19
   114fc:	4306      	orrs	r6, r0
   114fe:	46b4      	mov	ip, r6
   11500:	291b      	cmp	r1, #27
   11502:	dd00      	ble.n	11506 <__aeabi_fadd+0x116>
   11504:	e0aa      	b.n	1165c <__aeabi_fadd+0x26c>
   11506:	2620      	movs	r6, #32
   11508:	4660      	mov	r0, ip
   1150a:	40c8      	lsrs	r0, r1
   1150c:	1a71      	subs	r1, r6, r1
   1150e:	4666      	mov	r6, ip
   11510:	408e      	lsls	r6, r1
   11512:	0031      	movs	r1, r6
   11514:	1e4e      	subs	r6, r1, #1
   11516:	41b1      	sbcs	r1, r6
   11518:	4301      	orrs	r1, r0
   1151a:	185b      	adds	r3, r3, r1
   1151c:	0159      	lsls	r1, r3, #5
   1151e:	d5d3      	bpl.n	114c8 <__aeabi_fadd+0xd8>
   11520:	3401      	adds	r4, #1
   11522:	2cff      	cmp	r4, #255	; 0xff
   11524:	d100      	bne.n	11528 <__aeabi_fadd+0x138>
   11526:	e087      	b.n	11638 <__aeabi_fadd+0x248>
   11528:	2201      	movs	r2, #1
   1152a:	4978      	ldr	r1, [pc, #480]	; (1170c <__aeabi_fadd+0x31c>)
   1152c:	401a      	ands	r2, r3
   1152e:	085b      	lsrs	r3, r3, #1
   11530:	400b      	ands	r3, r1
   11532:	4313      	orrs	r3, r2
   11534:	e797      	b.n	11466 <__aeabi_fadd+0x76>
   11536:	2c00      	cmp	r4, #0
   11538:	d000      	beq.n	1153c <__aeabi_fadd+0x14c>
   1153a:	e0a7      	b.n	1168c <__aeabi_fadd+0x29c>
   1153c:	2b00      	cmp	r3, #0
   1153e:	d000      	beq.n	11542 <__aeabi_fadd+0x152>
   11540:	e0b6      	b.n	116b0 <__aeabi_fadd+0x2c0>
   11542:	1e3b      	subs	r3, r7, #0
   11544:	d162      	bne.n	1160c <__aeabi_fadd+0x21c>
   11546:	2600      	movs	r6, #0
   11548:	2200      	movs	r2, #0
   1154a:	0273      	lsls	r3, r6, #9
   1154c:	0a5b      	lsrs	r3, r3, #9
   1154e:	b2e4      	uxtb	r4, r4
   11550:	e79a      	b.n	11488 <__aeabi_fadd+0x98>
   11552:	0014      	movs	r4, r2
   11554:	e787      	b.n	11466 <__aeabi_fadd+0x76>
   11556:	2f00      	cmp	r7, #0
   11558:	d04d      	beq.n	115f6 <__aeabi_fadd+0x206>
   1155a:	1e48      	subs	r0, r1, #1
   1155c:	2800      	cmp	r0, #0
   1155e:	d157      	bne.n	11610 <__aeabi_fadd+0x220>
   11560:	4463      	add	r3, ip
   11562:	2401      	movs	r4, #1
   11564:	015a      	lsls	r2, r3, #5
   11566:	d5af      	bpl.n	114c8 <__aeabi_fadd+0xd8>
   11568:	2402      	movs	r4, #2
   1156a:	e7dd      	b.n	11528 <__aeabi_fadd+0x138>
   1156c:	2a00      	cmp	r2, #0
   1156e:	d124      	bne.n	115ba <__aeabi_fadd+0x1ca>
   11570:	1c62      	adds	r2, r4, #1
   11572:	b2d2      	uxtb	r2, r2
   11574:	2a01      	cmp	r2, #1
   11576:	ddde      	ble.n	11536 <__aeabi_fadd+0x146>
   11578:	1bde      	subs	r6, r3, r7
   1157a:	0172      	lsls	r2, r6, #5
   1157c:	d535      	bpl.n	115ea <__aeabi_fadd+0x1fa>
   1157e:	1afe      	subs	r6, r7, r3
   11580:	000d      	movs	r5, r1
   11582:	e75c      	b.n	1143e <__aeabi_fadd+0x4e>
   11584:	002a      	movs	r2, r5
   11586:	2300      	movs	r3, #0
   11588:	e77e      	b.n	11488 <__aeabi_fadd+0x98>
   1158a:	0033      	movs	r3, r6
   1158c:	4a60      	ldr	r2, [pc, #384]	; (11710 <__aeabi_fadd+0x320>)
   1158e:	1a24      	subs	r4, r4, r0
   11590:	4013      	ands	r3, r2
   11592:	e768      	b.n	11466 <__aeabi_fadd+0x76>
   11594:	2900      	cmp	r1, #0
   11596:	d163      	bne.n	11660 <__aeabi_fadd+0x270>
   11598:	1c61      	adds	r1, r4, #1
   1159a:	b2c8      	uxtb	r0, r1
   1159c:	2801      	cmp	r0, #1
   1159e:	dd4e      	ble.n	1163e <__aeabi_fadd+0x24e>
   115a0:	29ff      	cmp	r1, #255	; 0xff
   115a2:	d049      	beq.n	11638 <__aeabi_fadd+0x248>
   115a4:	4463      	add	r3, ip
   115a6:	085b      	lsrs	r3, r3, #1
   115a8:	000c      	movs	r4, r1
   115aa:	e75c      	b.n	11466 <__aeabi_fadd+0x76>
   115ac:	2aff      	cmp	r2, #255	; 0xff
   115ae:	d041      	beq.n	11634 <__aeabi_fadd+0x244>
   115b0:	000a      	movs	r2, r1
   115b2:	e779      	b.n	114a8 <__aeabi_fadd+0xb8>
   115b4:	2201      	movs	r2, #1
   115b6:	1a9b      	subs	r3, r3, r2
   115b8:	e784      	b.n	114c4 <__aeabi_fadd+0xd4>
   115ba:	2c00      	cmp	r4, #0
   115bc:	d01d      	beq.n	115fa <__aeabi_fadd+0x20a>
   115be:	28ff      	cmp	r0, #255	; 0xff
   115c0:	d022      	beq.n	11608 <__aeabi_fadd+0x218>
   115c2:	2480      	movs	r4, #128	; 0x80
   115c4:	04e4      	lsls	r4, r4, #19
   115c6:	4252      	negs	r2, r2
   115c8:	4323      	orrs	r3, r4
   115ca:	2a1b      	cmp	r2, #27
   115cc:	dd00      	ble.n	115d0 <__aeabi_fadd+0x1e0>
   115ce:	e08a      	b.n	116e6 <__aeabi_fadd+0x2f6>
   115d0:	001c      	movs	r4, r3
   115d2:	2520      	movs	r5, #32
   115d4:	40d4      	lsrs	r4, r2
   115d6:	1aaa      	subs	r2, r5, r2
   115d8:	4093      	lsls	r3, r2
   115da:	1e5a      	subs	r2, r3, #1
   115dc:	4193      	sbcs	r3, r2
   115de:	4323      	orrs	r3, r4
   115e0:	4662      	mov	r2, ip
   115e2:	0004      	movs	r4, r0
   115e4:	1ad3      	subs	r3, r2, r3
   115e6:	000d      	movs	r5, r1
   115e8:	e725      	b.n	11436 <__aeabi_fadd+0x46>
   115ea:	2e00      	cmp	r6, #0
   115ec:	d000      	beq.n	115f0 <__aeabi_fadd+0x200>
   115ee:	e726      	b.n	1143e <__aeabi_fadd+0x4e>
   115f0:	2200      	movs	r2, #0
   115f2:	2400      	movs	r4, #0
   115f4:	e7a9      	b.n	1154a <__aeabi_fadd+0x15a>
   115f6:	000c      	movs	r4, r1
   115f8:	e735      	b.n	11466 <__aeabi_fadd+0x76>
   115fa:	2b00      	cmp	r3, #0
   115fc:	d04d      	beq.n	1169a <__aeabi_fadd+0x2aa>
   115fe:	43d2      	mvns	r2, r2
   11600:	2a00      	cmp	r2, #0
   11602:	d0ed      	beq.n	115e0 <__aeabi_fadd+0x1f0>
   11604:	28ff      	cmp	r0, #255	; 0xff
   11606:	d1e0      	bne.n	115ca <__aeabi_fadd+0x1da>
   11608:	4663      	mov	r3, ip
   1160a:	24ff      	movs	r4, #255	; 0xff
   1160c:	000d      	movs	r5, r1
   1160e:	e72a      	b.n	11466 <__aeabi_fadd+0x76>
   11610:	29ff      	cmp	r1, #255	; 0xff
   11612:	d00f      	beq.n	11634 <__aeabi_fadd+0x244>
   11614:	0001      	movs	r1, r0
   11616:	e773      	b.n	11500 <__aeabi_fadd+0x110>
   11618:	2b00      	cmp	r3, #0
   1161a:	d061      	beq.n	116e0 <__aeabi_fadd+0x2f0>
   1161c:	24ff      	movs	r4, #255	; 0xff
   1161e:	2f00      	cmp	r7, #0
   11620:	d100      	bne.n	11624 <__aeabi_fadd+0x234>
   11622:	e720      	b.n	11466 <__aeabi_fadd+0x76>
   11624:	2280      	movs	r2, #128	; 0x80
   11626:	4641      	mov	r1, r8
   11628:	03d2      	lsls	r2, r2, #15
   1162a:	4211      	tst	r1, r2
   1162c:	d002      	beq.n	11634 <__aeabi_fadd+0x244>
   1162e:	4216      	tst	r6, r2
   11630:	d100      	bne.n	11634 <__aeabi_fadd+0x244>
   11632:	003b      	movs	r3, r7
   11634:	24ff      	movs	r4, #255	; 0xff
   11636:	e716      	b.n	11466 <__aeabi_fadd+0x76>
   11638:	24ff      	movs	r4, #255	; 0xff
   1163a:	2300      	movs	r3, #0
   1163c:	e724      	b.n	11488 <__aeabi_fadd+0x98>
   1163e:	2c00      	cmp	r4, #0
   11640:	d1ea      	bne.n	11618 <__aeabi_fadd+0x228>
   11642:	2b00      	cmp	r3, #0
   11644:	d058      	beq.n	116f8 <__aeabi_fadd+0x308>
   11646:	2f00      	cmp	r7, #0
   11648:	d100      	bne.n	1164c <__aeabi_fadd+0x25c>
   1164a:	e70c      	b.n	11466 <__aeabi_fadd+0x76>
   1164c:	4463      	add	r3, ip
   1164e:	015a      	lsls	r2, r3, #5
   11650:	d400      	bmi.n	11654 <__aeabi_fadd+0x264>
   11652:	e739      	b.n	114c8 <__aeabi_fadd+0xd8>
   11654:	4a2e      	ldr	r2, [pc, #184]	; (11710 <__aeabi_fadd+0x320>)
   11656:	000c      	movs	r4, r1
   11658:	4013      	ands	r3, r2
   1165a:	e704      	b.n	11466 <__aeabi_fadd+0x76>
   1165c:	2101      	movs	r1, #1
   1165e:	e75c      	b.n	1151a <__aeabi_fadd+0x12a>
   11660:	2c00      	cmp	r4, #0
   11662:	d11e      	bne.n	116a2 <__aeabi_fadd+0x2b2>
   11664:	2b00      	cmp	r3, #0
   11666:	d040      	beq.n	116ea <__aeabi_fadd+0x2fa>
   11668:	43c9      	mvns	r1, r1
   1166a:	2900      	cmp	r1, #0
   1166c:	d00b      	beq.n	11686 <__aeabi_fadd+0x296>
   1166e:	28ff      	cmp	r0, #255	; 0xff
   11670:	d036      	beq.n	116e0 <__aeabi_fadd+0x2f0>
   11672:	291b      	cmp	r1, #27
   11674:	dc47      	bgt.n	11706 <__aeabi_fadd+0x316>
   11676:	001c      	movs	r4, r3
   11678:	2620      	movs	r6, #32
   1167a:	40cc      	lsrs	r4, r1
   1167c:	1a71      	subs	r1, r6, r1
   1167e:	408b      	lsls	r3, r1
   11680:	1e59      	subs	r1, r3, #1
   11682:	418b      	sbcs	r3, r1
   11684:	4323      	orrs	r3, r4
   11686:	4463      	add	r3, ip
   11688:	0004      	movs	r4, r0
   1168a:	e747      	b.n	1151c <__aeabi_fadd+0x12c>
   1168c:	2b00      	cmp	r3, #0
   1168e:	d118      	bne.n	116c2 <__aeabi_fadd+0x2d2>
   11690:	1e3b      	subs	r3, r7, #0
   11692:	d02d      	beq.n	116f0 <__aeabi_fadd+0x300>
   11694:	000d      	movs	r5, r1
   11696:	24ff      	movs	r4, #255	; 0xff
   11698:	e6e5      	b.n	11466 <__aeabi_fadd+0x76>
   1169a:	003b      	movs	r3, r7
   1169c:	0004      	movs	r4, r0
   1169e:	000d      	movs	r5, r1
   116a0:	e6e1      	b.n	11466 <__aeabi_fadd+0x76>
   116a2:	28ff      	cmp	r0, #255	; 0xff
   116a4:	d01c      	beq.n	116e0 <__aeabi_fadd+0x2f0>
   116a6:	2480      	movs	r4, #128	; 0x80
   116a8:	04e4      	lsls	r4, r4, #19
   116aa:	4249      	negs	r1, r1
   116ac:	4323      	orrs	r3, r4
   116ae:	e7e0      	b.n	11672 <__aeabi_fadd+0x282>
   116b0:	2f00      	cmp	r7, #0
   116b2:	d100      	bne.n	116b6 <__aeabi_fadd+0x2c6>
   116b4:	e6d7      	b.n	11466 <__aeabi_fadd+0x76>
   116b6:	1bde      	subs	r6, r3, r7
   116b8:	0172      	lsls	r2, r6, #5
   116ba:	d51f      	bpl.n	116fc <__aeabi_fadd+0x30c>
   116bc:	1afb      	subs	r3, r7, r3
   116be:	000d      	movs	r5, r1
   116c0:	e6d1      	b.n	11466 <__aeabi_fadd+0x76>
   116c2:	24ff      	movs	r4, #255	; 0xff
   116c4:	2f00      	cmp	r7, #0
   116c6:	d100      	bne.n	116ca <__aeabi_fadd+0x2da>
   116c8:	e6cd      	b.n	11466 <__aeabi_fadd+0x76>
   116ca:	2280      	movs	r2, #128	; 0x80
   116cc:	4640      	mov	r0, r8
   116ce:	03d2      	lsls	r2, r2, #15
   116d0:	4210      	tst	r0, r2
   116d2:	d0af      	beq.n	11634 <__aeabi_fadd+0x244>
   116d4:	4216      	tst	r6, r2
   116d6:	d1ad      	bne.n	11634 <__aeabi_fadd+0x244>
   116d8:	003b      	movs	r3, r7
   116da:	000d      	movs	r5, r1
   116dc:	24ff      	movs	r4, #255	; 0xff
   116de:	e6c2      	b.n	11466 <__aeabi_fadd+0x76>
   116e0:	4663      	mov	r3, ip
   116e2:	24ff      	movs	r4, #255	; 0xff
   116e4:	e6bf      	b.n	11466 <__aeabi_fadd+0x76>
   116e6:	2301      	movs	r3, #1
   116e8:	e77a      	b.n	115e0 <__aeabi_fadd+0x1f0>
   116ea:	003b      	movs	r3, r7
   116ec:	0004      	movs	r4, r0
   116ee:	e6ba      	b.n	11466 <__aeabi_fadd+0x76>
   116f0:	2680      	movs	r6, #128	; 0x80
   116f2:	2200      	movs	r2, #0
   116f4:	03f6      	lsls	r6, r6, #15
   116f6:	e6f0      	b.n	114da <__aeabi_fadd+0xea>
   116f8:	003b      	movs	r3, r7
   116fa:	e6b4      	b.n	11466 <__aeabi_fadd+0x76>
   116fc:	1e33      	subs	r3, r6, #0
   116fe:	d000      	beq.n	11702 <__aeabi_fadd+0x312>
   11700:	e6e2      	b.n	114c8 <__aeabi_fadd+0xd8>
   11702:	2200      	movs	r2, #0
   11704:	e721      	b.n	1154a <__aeabi_fadd+0x15a>
   11706:	2301      	movs	r3, #1
   11708:	e7bd      	b.n	11686 <__aeabi_fadd+0x296>
   1170a:	46c0      	nop			; (mov r8, r8)
   1170c:	7dffffff 	.word	0x7dffffff
   11710:	fbffffff 	.word	0xfbffffff

00011714 <__aeabi_fdiv>:
   11714:	b5f0      	push	{r4, r5, r6, r7, lr}
   11716:	4657      	mov	r7, sl
   11718:	464e      	mov	r6, r9
   1171a:	46de      	mov	lr, fp
   1171c:	4645      	mov	r5, r8
   1171e:	b5e0      	push	{r5, r6, r7, lr}
   11720:	0244      	lsls	r4, r0, #9
   11722:	0043      	lsls	r3, r0, #1
   11724:	0fc6      	lsrs	r6, r0, #31
   11726:	b083      	sub	sp, #12
   11728:	1c0f      	adds	r7, r1, #0
   1172a:	0a64      	lsrs	r4, r4, #9
   1172c:	0e1b      	lsrs	r3, r3, #24
   1172e:	46b2      	mov	sl, r6
   11730:	d053      	beq.n	117da <__aeabi_fdiv+0xc6>
   11732:	2bff      	cmp	r3, #255	; 0xff
   11734:	d027      	beq.n	11786 <__aeabi_fdiv+0x72>
   11736:	2280      	movs	r2, #128	; 0x80
   11738:	00e4      	lsls	r4, r4, #3
   1173a:	04d2      	lsls	r2, r2, #19
   1173c:	4314      	orrs	r4, r2
   1173e:	227f      	movs	r2, #127	; 0x7f
   11740:	4252      	negs	r2, r2
   11742:	4690      	mov	r8, r2
   11744:	4498      	add	r8, r3
   11746:	2300      	movs	r3, #0
   11748:	4699      	mov	r9, r3
   1174a:	469b      	mov	fp, r3
   1174c:	027d      	lsls	r5, r7, #9
   1174e:	0078      	lsls	r0, r7, #1
   11750:	0ffb      	lsrs	r3, r7, #31
   11752:	0a6d      	lsrs	r5, r5, #9
   11754:	0e00      	lsrs	r0, r0, #24
   11756:	9300      	str	r3, [sp, #0]
   11758:	d024      	beq.n	117a4 <__aeabi_fdiv+0x90>
   1175a:	28ff      	cmp	r0, #255	; 0xff
   1175c:	d046      	beq.n	117ec <__aeabi_fdiv+0xd8>
   1175e:	2380      	movs	r3, #128	; 0x80
   11760:	2100      	movs	r1, #0
   11762:	00ed      	lsls	r5, r5, #3
   11764:	04db      	lsls	r3, r3, #19
   11766:	431d      	orrs	r5, r3
   11768:	387f      	subs	r0, #127	; 0x7f
   1176a:	4647      	mov	r7, r8
   1176c:	1a38      	subs	r0, r7, r0
   1176e:	464f      	mov	r7, r9
   11770:	430f      	orrs	r7, r1
   11772:	00bf      	lsls	r7, r7, #2
   11774:	46b9      	mov	r9, r7
   11776:	0033      	movs	r3, r6
   11778:	9a00      	ldr	r2, [sp, #0]
   1177a:	4f87      	ldr	r7, [pc, #540]	; (11998 <__aeabi_fdiv+0x284>)
   1177c:	4053      	eors	r3, r2
   1177e:	464a      	mov	r2, r9
   11780:	58ba      	ldr	r2, [r7, r2]
   11782:	9301      	str	r3, [sp, #4]
   11784:	4697      	mov	pc, r2
   11786:	2c00      	cmp	r4, #0
   11788:	d14e      	bne.n	11828 <__aeabi_fdiv+0x114>
   1178a:	2308      	movs	r3, #8
   1178c:	4699      	mov	r9, r3
   1178e:	33f7      	adds	r3, #247	; 0xf7
   11790:	4698      	mov	r8, r3
   11792:	3bfd      	subs	r3, #253	; 0xfd
   11794:	469b      	mov	fp, r3
   11796:	027d      	lsls	r5, r7, #9
   11798:	0078      	lsls	r0, r7, #1
   1179a:	0ffb      	lsrs	r3, r7, #31
   1179c:	0a6d      	lsrs	r5, r5, #9
   1179e:	0e00      	lsrs	r0, r0, #24
   117a0:	9300      	str	r3, [sp, #0]
   117a2:	d1da      	bne.n	1175a <__aeabi_fdiv+0x46>
   117a4:	2d00      	cmp	r5, #0
   117a6:	d126      	bne.n	117f6 <__aeabi_fdiv+0xe2>
   117a8:	2000      	movs	r0, #0
   117aa:	2101      	movs	r1, #1
   117ac:	0033      	movs	r3, r6
   117ae:	9a00      	ldr	r2, [sp, #0]
   117b0:	4f7a      	ldr	r7, [pc, #488]	; (1199c <__aeabi_fdiv+0x288>)
   117b2:	4053      	eors	r3, r2
   117b4:	4642      	mov	r2, r8
   117b6:	1a10      	subs	r0, r2, r0
   117b8:	464a      	mov	r2, r9
   117ba:	430a      	orrs	r2, r1
   117bc:	0092      	lsls	r2, r2, #2
   117be:	58ba      	ldr	r2, [r7, r2]
   117c0:	001d      	movs	r5, r3
   117c2:	4697      	mov	pc, r2
   117c4:	9b00      	ldr	r3, [sp, #0]
   117c6:	002c      	movs	r4, r5
   117c8:	469a      	mov	sl, r3
   117ca:	468b      	mov	fp, r1
   117cc:	465b      	mov	r3, fp
   117ce:	2b02      	cmp	r3, #2
   117d0:	d131      	bne.n	11836 <__aeabi_fdiv+0x122>
   117d2:	4653      	mov	r3, sl
   117d4:	21ff      	movs	r1, #255	; 0xff
   117d6:	2400      	movs	r4, #0
   117d8:	e038      	b.n	1184c <__aeabi_fdiv+0x138>
   117da:	2c00      	cmp	r4, #0
   117dc:	d117      	bne.n	1180e <__aeabi_fdiv+0xfa>
   117de:	2304      	movs	r3, #4
   117e0:	4699      	mov	r9, r3
   117e2:	2300      	movs	r3, #0
   117e4:	4698      	mov	r8, r3
   117e6:	3301      	adds	r3, #1
   117e8:	469b      	mov	fp, r3
   117ea:	e7af      	b.n	1174c <__aeabi_fdiv+0x38>
   117ec:	20ff      	movs	r0, #255	; 0xff
   117ee:	2d00      	cmp	r5, #0
   117f0:	d10b      	bne.n	1180a <__aeabi_fdiv+0xf6>
   117f2:	2102      	movs	r1, #2
   117f4:	e7da      	b.n	117ac <__aeabi_fdiv+0x98>
   117f6:	0028      	movs	r0, r5
   117f8:	f002 f986 	bl	13b08 <__clzsi2>
   117fc:	1f43      	subs	r3, r0, #5
   117fe:	409d      	lsls	r5, r3
   11800:	2376      	movs	r3, #118	; 0x76
   11802:	425b      	negs	r3, r3
   11804:	1a18      	subs	r0, r3, r0
   11806:	2100      	movs	r1, #0
   11808:	e7af      	b.n	1176a <__aeabi_fdiv+0x56>
   1180a:	2103      	movs	r1, #3
   1180c:	e7ad      	b.n	1176a <__aeabi_fdiv+0x56>
   1180e:	0020      	movs	r0, r4
   11810:	f002 f97a 	bl	13b08 <__clzsi2>
   11814:	1f43      	subs	r3, r0, #5
   11816:	409c      	lsls	r4, r3
   11818:	2376      	movs	r3, #118	; 0x76
   1181a:	425b      	negs	r3, r3
   1181c:	1a1b      	subs	r3, r3, r0
   1181e:	4698      	mov	r8, r3
   11820:	2300      	movs	r3, #0
   11822:	4699      	mov	r9, r3
   11824:	469b      	mov	fp, r3
   11826:	e791      	b.n	1174c <__aeabi_fdiv+0x38>
   11828:	230c      	movs	r3, #12
   1182a:	4699      	mov	r9, r3
   1182c:	33f3      	adds	r3, #243	; 0xf3
   1182e:	4698      	mov	r8, r3
   11830:	3bfc      	subs	r3, #252	; 0xfc
   11832:	469b      	mov	fp, r3
   11834:	e78a      	b.n	1174c <__aeabi_fdiv+0x38>
   11836:	2b03      	cmp	r3, #3
   11838:	d100      	bne.n	1183c <__aeabi_fdiv+0x128>
   1183a:	e0a5      	b.n	11988 <__aeabi_fdiv+0x274>
   1183c:	4655      	mov	r5, sl
   1183e:	2b01      	cmp	r3, #1
   11840:	d000      	beq.n	11844 <__aeabi_fdiv+0x130>
   11842:	e081      	b.n	11948 <__aeabi_fdiv+0x234>
   11844:	2301      	movs	r3, #1
   11846:	2100      	movs	r1, #0
   11848:	2400      	movs	r4, #0
   1184a:	402b      	ands	r3, r5
   1184c:	0264      	lsls	r4, r4, #9
   1184e:	05c9      	lsls	r1, r1, #23
   11850:	0a60      	lsrs	r0, r4, #9
   11852:	07db      	lsls	r3, r3, #31
   11854:	4308      	orrs	r0, r1
   11856:	4318      	orrs	r0, r3
   11858:	b003      	add	sp, #12
   1185a:	bc3c      	pop	{r2, r3, r4, r5}
   1185c:	4690      	mov	r8, r2
   1185e:	4699      	mov	r9, r3
   11860:	46a2      	mov	sl, r4
   11862:	46ab      	mov	fp, r5
   11864:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11866:	2480      	movs	r4, #128	; 0x80
   11868:	2300      	movs	r3, #0
   1186a:	03e4      	lsls	r4, r4, #15
   1186c:	21ff      	movs	r1, #255	; 0xff
   1186e:	e7ed      	b.n	1184c <__aeabi_fdiv+0x138>
   11870:	21ff      	movs	r1, #255	; 0xff
   11872:	2400      	movs	r4, #0
   11874:	e7ea      	b.n	1184c <__aeabi_fdiv+0x138>
   11876:	2301      	movs	r3, #1
   11878:	1a59      	subs	r1, r3, r1
   1187a:	291b      	cmp	r1, #27
   1187c:	dd66      	ble.n	1194c <__aeabi_fdiv+0x238>
   1187e:	9a01      	ldr	r2, [sp, #4]
   11880:	4013      	ands	r3, r2
   11882:	2100      	movs	r1, #0
   11884:	2400      	movs	r4, #0
   11886:	e7e1      	b.n	1184c <__aeabi_fdiv+0x138>
   11888:	2380      	movs	r3, #128	; 0x80
   1188a:	03db      	lsls	r3, r3, #15
   1188c:	421c      	tst	r4, r3
   1188e:	d038      	beq.n	11902 <__aeabi_fdiv+0x1ee>
   11890:	421d      	tst	r5, r3
   11892:	d051      	beq.n	11938 <__aeabi_fdiv+0x224>
   11894:	431c      	orrs	r4, r3
   11896:	0264      	lsls	r4, r4, #9
   11898:	0a64      	lsrs	r4, r4, #9
   1189a:	0033      	movs	r3, r6
   1189c:	21ff      	movs	r1, #255	; 0xff
   1189e:	e7d5      	b.n	1184c <__aeabi_fdiv+0x138>
   118a0:	0163      	lsls	r3, r4, #5
   118a2:	016c      	lsls	r4, r5, #5
   118a4:	42a3      	cmp	r3, r4
   118a6:	d23b      	bcs.n	11920 <__aeabi_fdiv+0x20c>
   118a8:	261b      	movs	r6, #27
   118aa:	2100      	movs	r1, #0
   118ac:	3801      	subs	r0, #1
   118ae:	2501      	movs	r5, #1
   118b0:	001f      	movs	r7, r3
   118b2:	0049      	lsls	r1, r1, #1
   118b4:	005b      	lsls	r3, r3, #1
   118b6:	2f00      	cmp	r7, #0
   118b8:	db01      	blt.n	118be <__aeabi_fdiv+0x1aa>
   118ba:	429c      	cmp	r4, r3
   118bc:	d801      	bhi.n	118c2 <__aeabi_fdiv+0x1ae>
   118be:	1b1b      	subs	r3, r3, r4
   118c0:	4329      	orrs	r1, r5
   118c2:	3e01      	subs	r6, #1
   118c4:	2e00      	cmp	r6, #0
   118c6:	d1f3      	bne.n	118b0 <__aeabi_fdiv+0x19c>
   118c8:	001c      	movs	r4, r3
   118ca:	1e63      	subs	r3, r4, #1
   118cc:	419c      	sbcs	r4, r3
   118ce:	430c      	orrs	r4, r1
   118d0:	0001      	movs	r1, r0
   118d2:	317f      	adds	r1, #127	; 0x7f
   118d4:	2900      	cmp	r1, #0
   118d6:	ddce      	ble.n	11876 <__aeabi_fdiv+0x162>
   118d8:	0763      	lsls	r3, r4, #29
   118da:	d004      	beq.n	118e6 <__aeabi_fdiv+0x1d2>
   118dc:	230f      	movs	r3, #15
   118de:	4023      	ands	r3, r4
   118e0:	2b04      	cmp	r3, #4
   118e2:	d000      	beq.n	118e6 <__aeabi_fdiv+0x1d2>
   118e4:	3404      	adds	r4, #4
   118e6:	0123      	lsls	r3, r4, #4
   118e8:	d503      	bpl.n	118f2 <__aeabi_fdiv+0x1de>
   118ea:	0001      	movs	r1, r0
   118ec:	4b2c      	ldr	r3, [pc, #176]	; (119a0 <__aeabi_fdiv+0x28c>)
   118ee:	3180      	adds	r1, #128	; 0x80
   118f0:	401c      	ands	r4, r3
   118f2:	29fe      	cmp	r1, #254	; 0xfe
   118f4:	dd0d      	ble.n	11912 <__aeabi_fdiv+0x1fe>
   118f6:	2301      	movs	r3, #1
   118f8:	9a01      	ldr	r2, [sp, #4]
   118fa:	21ff      	movs	r1, #255	; 0xff
   118fc:	4013      	ands	r3, r2
   118fe:	2400      	movs	r4, #0
   11900:	e7a4      	b.n	1184c <__aeabi_fdiv+0x138>
   11902:	2380      	movs	r3, #128	; 0x80
   11904:	03db      	lsls	r3, r3, #15
   11906:	431c      	orrs	r4, r3
   11908:	0264      	lsls	r4, r4, #9
   1190a:	0a64      	lsrs	r4, r4, #9
   1190c:	0033      	movs	r3, r6
   1190e:	21ff      	movs	r1, #255	; 0xff
   11910:	e79c      	b.n	1184c <__aeabi_fdiv+0x138>
   11912:	2301      	movs	r3, #1
   11914:	9a01      	ldr	r2, [sp, #4]
   11916:	01a4      	lsls	r4, r4, #6
   11918:	0a64      	lsrs	r4, r4, #9
   1191a:	b2c9      	uxtb	r1, r1
   1191c:	4013      	ands	r3, r2
   1191e:	e795      	b.n	1184c <__aeabi_fdiv+0x138>
   11920:	1b1b      	subs	r3, r3, r4
   11922:	261a      	movs	r6, #26
   11924:	2101      	movs	r1, #1
   11926:	e7c2      	b.n	118ae <__aeabi_fdiv+0x19a>
   11928:	9b00      	ldr	r3, [sp, #0]
   1192a:	468b      	mov	fp, r1
   1192c:	469a      	mov	sl, r3
   1192e:	2400      	movs	r4, #0
   11930:	e74c      	b.n	117cc <__aeabi_fdiv+0xb8>
   11932:	0263      	lsls	r3, r4, #9
   11934:	d5e5      	bpl.n	11902 <__aeabi_fdiv+0x1ee>
   11936:	2500      	movs	r5, #0
   11938:	2480      	movs	r4, #128	; 0x80
   1193a:	03e4      	lsls	r4, r4, #15
   1193c:	432c      	orrs	r4, r5
   1193e:	0264      	lsls	r4, r4, #9
   11940:	0a64      	lsrs	r4, r4, #9
   11942:	9b00      	ldr	r3, [sp, #0]
   11944:	21ff      	movs	r1, #255	; 0xff
   11946:	e781      	b.n	1184c <__aeabi_fdiv+0x138>
   11948:	9501      	str	r5, [sp, #4]
   1194a:	e7c1      	b.n	118d0 <__aeabi_fdiv+0x1bc>
   1194c:	0023      	movs	r3, r4
   1194e:	2020      	movs	r0, #32
   11950:	40cb      	lsrs	r3, r1
   11952:	1a41      	subs	r1, r0, r1
   11954:	408c      	lsls	r4, r1
   11956:	1e61      	subs	r1, r4, #1
   11958:	418c      	sbcs	r4, r1
   1195a:	431c      	orrs	r4, r3
   1195c:	0763      	lsls	r3, r4, #29
   1195e:	d004      	beq.n	1196a <__aeabi_fdiv+0x256>
   11960:	230f      	movs	r3, #15
   11962:	4023      	ands	r3, r4
   11964:	2b04      	cmp	r3, #4
   11966:	d000      	beq.n	1196a <__aeabi_fdiv+0x256>
   11968:	3404      	adds	r4, #4
   1196a:	0163      	lsls	r3, r4, #5
   1196c:	d505      	bpl.n	1197a <__aeabi_fdiv+0x266>
   1196e:	2301      	movs	r3, #1
   11970:	9a01      	ldr	r2, [sp, #4]
   11972:	2101      	movs	r1, #1
   11974:	4013      	ands	r3, r2
   11976:	2400      	movs	r4, #0
   11978:	e768      	b.n	1184c <__aeabi_fdiv+0x138>
   1197a:	2301      	movs	r3, #1
   1197c:	9a01      	ldr	r2, [sp, #4]
   1197e:	01a4      	lsls	r4, r4, #6
   11980:	0a64      	lsrs	r4, r4, #9
   11982:	4013      	ands	r3, r2
   11984:	2100      	movs	r1, #0
   11986:	e761      	b.n	1184c <__aeabi_fdiv+0x138>
   11988:	2380      	movs	r3, #128	; 0x80
   1198a:	03db      	lsls	r3, r3, #15
   1198c:	431c      	orrs	r4, r3
   1198e:	0264      	lsls	r4, r4, #9
   11990:	0a64      	lsrs	r4, r4, #9
   11992:	4653      	mov	r3, sl
   11994:	21ff      	movs	r1, #255	; 0xff
   11996:	e759      	b.n	1184c <__aeabi_fdiv+0x138>
   11998:	00019858 	.word	0x00019858
   1199c:	00019898 	.word	0x00019898
   119a0:	f7ffffff 	.word	0xf7ffffff

000119a4 <__eqsf2>:
   119a4:	b570      	push	{r4, r5, r6, lr}
   119a6:	0042      	lsls	r2, r0, #1
   119a8:	0245      	lsls	r5, r0, #9
   119aa:	024e      	lsls	r6, r1, #9
   119ac:	004c      	lsls	r4, r1, #1
   119ae:	0fc3      	lsrs	r3, r0, #31
   119b0:	0a6d      	lsrs	r5, r5, #9
   119b2:	0e12      	lsrs	r2, r2, #24
   119b4:	0a76      	lsrs	r6, r6, #9
   119b6:	0e24      	lsrs	r4, r4, #24
   119b8:	0fc9      	lsrs	r1, r1, #31
   119ba:	2001      	movs	r0, #1
   119bc:	2aff      	cmp	r2, #255	; 0xff
   119be:	d006      	beq.n	119ce <__eqsf2+0x2a>
   119c0:	2cff      	cmp	r4, #255	; 0xff
   119c2:	d003      	beq.n	119cc <__eqsf2+0x28>
   119c4:	42a2      	cmp	r2, r4
   119c6:	d101      	bne.n	119cc <__eqsf2+0x28>
   119c8:	42b5      	cmp	r5, r6
   119ca:	d006      	beq.n	119da <__eqsf2+0x36>
   119cc:	bd70      	pop	{r4, r5, r6, pc}
   119ce:	2d00      	cmp	r5, #0
   119d0:	d1fc      	bne.n	119cc <__eqsf2+0x28>
   119d2:	2cff      	cmp	r4, #255	; 0xff
   119d4:	d1fa      	bne.n	119cc <__eqsf2+0x28>
   119d6:	2e00      	cmp	r6, #0
   119d8:	d1f8      	bne.n	119cc <__eqsf2+0x28>
   119da:	428b      	cmp	r3, r1
   119dc:	d006      	beq.n	119ec <__eqsf2+0x48>
   119de:	2001      	movs	r0, #1
   119e0:	2a00      	cmp	r2, #0
   119e2:	d1f3      	bne.n	119cc <__eqsf2+0x28>
   119e4:	0028      	movs	r0, r5
   119e6:	1e45      	subs	r5, r0, #1
   119e8:	41a8      	sbcs	r0, r5
   119ea:	e7ef      	b.n	119cc <__eqsf2+0x28>
   119ec:	2000      	movs	r0, #0
   119ee:	e7ed      	b.n	119cc <__eqsf2+0x28>

000119f0 <__gesf2>:
   119f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   119f2:	0042      	lsls	r2, r0, #1
   119f4:	0245      	lsls	r5, r0, #9
   119f6:	024c      	lsls	r4, r1, #9
   119f8:	0fc3      	lsrs	r3, r0, #31
   119fa:	0048      	lsls	r0, r1, #1
   119fc:	0a6d      	lsrs	r5, r5, #9
   119fe:	0e12      	lsrs	r2, r2, #24
   11a00:	0a64      	lsrs	r4, r4, #9
   11a02:	0e00      	lsrs	r0, r0, #24
   11a04:	0fc9      	lsrs	r1, r1, #31
   11a06:	2aff      	cmp	r2, #255	; 0xff
   11a08:	d01e      	beq.n	11a48 <__gesf2+0x58>
   11a0a:	28ff      	cmp	r0, #255	; 0xff
   11a0c:	d021      	beq.n	11a52 <__gesf2+0x62>
   11a0e:	2a00      	cmp	r2, #0
   11a10:	d10a      	bne.n	11a28 <__gesf2+0x38>
   11a12:	426e      	negs	r6, r5
   11a14:	416e      	adcs	r6, r5
   11a16:	b2f6      	uxtb	r6, r6
   11a18:	2800      	cmp	r0, #0
   11a1a:	d10f      	bne.n	11a3c <__gesf2+0x4c>
   11a1c:	2c00      	cmp	r4, #0
   11a1e:	d10d      	bne.n	11a3c <__gesf2+0x4c>
   11a20:	2000      	movs	r0, #0
   11a22:	2d00      	cmp	r5, #0
   11a24:	d009      	beq.n	11a3a <__gesf2+0x4a>
   11a26:	e005      	b.n	11a34 <__gesf2+0x44>
   11a28:	2800      	cmp	r0, #0
   11a2a:	d101      	bne.n	11a30 <__gesf2+0x40>
   11a2c:	2c00      	cmp	r4, #0
   11a2e:	d001      	beq.n	11a34 <__gesf2+0x44>
   11a30:	428b      	cmp	r3, r1
   11a32:	d011      	beq.n	11a58 <__gesf2+0x68>
   11a34:	2101      	movs	r1, #1
   11a36:	4258      	negs	r0, r3
   11a38:	4308      	orrs	r0, r1
   11a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a3c:	2e00      	cmp	r6, #0
   11a3e:	d0f7      	beq.n	11a30 <__gesf2+0x40>
   11a40:	2001      	movs	r0, #1
   11a42:	3901      	subs	r1, #1
   11a44:	4308      	orrs	r0, r1
   11a46:	e7f8      	b.n	11a3a <__gesf2+0x4a>
   11a48:	2d00      	cmp	r5, #0
   11a4a:	d0de      	beq.n	11a0a <__gesf2+0x1a>
   11a4c:	2002      	movs	r0, #2
   11a4e:	4240      	negs	r0, r0
   11a50:	e7f3      	b.n	11a3a <__gesf2+0x4a>
   11a52:	2c00      	cmp	r4, #0
   11a54:	d0db      	beq.n	11a0e <__gesf2+0x1e>
   11a56:	e7f9      	b.n	11a4c <__gesf2+0x5c>
   11a58:	4282      	cmp	r2, r0
   11a5a:	dceb      	bgt.n	11a34 <__gesf2+0x44>
   11a5c:	db04      	blt.n	11a68 <__gesf2+0x78>
   11a5e:	42a5      	cmp	r5, r4
   11a60:	d8e8      	bhi.n	11a34 <__gesf2+0x44>
   11a62:	2000      	movs	r0, #0
   11a64:	42a5      	cmp	r5, r4
   11a66:	d2e8      	bcs.n	11a3a <__gesf2+0x4a>
   11a68:	2101      	movs	r1, #1
   11a6a:	1e58      	subs	r0, r3, #1
   11a6c:	4308      	orrs	r0, r1
   11a6e:	e7e4      	b.n	11a3a <__gesf2+0x4a>

00011a70 <__lesf2>:
   11a70:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a72:	0042      	lsls	r2, r0, #1
   11a74:	024d      	lsls	r5, r1, #9
   11a76:	004c      	lsls	r4, r1, #1
   11a78:	0246      	lsls	r6, r0, #9
   11a7a:	0a76      	lsrs	r6, r6, #9
   11a7c:	0e12      	lsrs	r2, r2, #24
   11a7e:	0fc3      	lsrs	r3, r0, #31
   11a80:	0a6d      	lsrs	r5, r5, #9
   11a82:	0e24      	lsrs	r4, r4, #24
   11a84:	0fc9      	lsrs	r1, r1, #31
   11a86:	2aff      	cmp	r2, #255	; 0xff
   11a88:	d016      	beq.n	11ab8 <__lesf2+0x48>
   11a8a:	2cff      	cmp	r4, #255	; 0xff
   11a8c:	d018      	beq.n	11ac0 <__lesf2+0x50>
   11a8e:	2a00      	cmp	r2, #0
   11a90:	d10a      	bne.n	11aa8 <__lesf2+0x38>
   11a92:	4270      	negs	r0, r6
   11a94:	4170      	adcs	r0, r6
   11a96:	b2c0      	uxtb	r0, r0
   11a98:	2c00      	cmp	r4, #0
   11a9a:	d015      	beq.n	11ac8 <__lesf2+0x58>
   11a9c:	2800      	cmp	r0, #0
   11a9e:	d005      	beq.n	11aac <__lesf2+0x3c>
   11aa0:	2001      	movs	r0, #1
   11aa2:	3901      	subs	r1, #1
   11aa4:	4308      	orrs	r0, r1
   11aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11aa8:	2c00      	cmp	r4, #0
   11aaa:	d013      	beq.n	11ad4 <__lesf2+0x64>
   11aac:	4299      	cmp	r1, r3
   11aae:	d014      	beq.n	11ada <__lesf2+0x6a>
   11ab0:	2001      	movs	r0, #1
   11ab2:	425b      	negs	r3, r3
   11ab4:	4318      	orrs	r0, r3
   11ab6:	e7f6      	b.n	11aa6 <__lesf2+0x36>
   11ab8:	2002      	movs	r0, #2
   11aba:	2e00      	cmp	r6, #0
   11abc:	d1f3      	bne.n	11aa6 <__lesf2+0x36>
   11abe:	e7e4      	b.n	11a8a <__lesf2+0x1a>
   11ac0:	2002      	movs	r0, #2
   11ac2:	2d00      	cmp	r5, #0
   11ac4:	d1ef      	bne.n	11aa6 <__lesf2+0x36>
   11ac6:	e7e2      	b.n	11a8e <__lesf2+0x1e>
   11ac8:	2d00      	cmp	r5, #0
   11aca:	d1e7      	bne.n	11a9c <__lesf2+0x2c>
   11acc:	2000      	movs	r0, #0
   11ace:	2e00      	cmp	r6, #0
   11ad0:	d0e9      	beq.n	11aa6 <__lesf2+0x36>
   11ad2:	e7ed      	b.n	11ab0 <__lesf2+0x40>
   11ad4:	2d00      	cmp	r5, #0
   11ad6:	d1e9      	bne.n	11aac <__lesf2+0x3c>
   11ad8:	e7ea      	b.n	11ab0 <__lesf2+0x40>
   11ada:	42a2      	cmp	r2, r4
   11adc:	dc06      	bgt.n	11aec <__lesf2+0x7c>
   11ade:	dbdf      	blt.n	11aa0 <__lesf2+0x30>
   11ae0:	42ae      	cmp	r6, r5
   11ae2:	d803      	bhi.n	11aec <__lesf2+0x7c>
   11ae4:	2000      	movs	r0, #0
   11ae6:	42ae      	cmp	r6, r5
   11ae8:	d3da      	bcc.n	11aa0 <__lesf2+0x30>
   11aea:	e7dc      	b.n	11aa6 <__lesf2+0x36>
   11aec:	2001      	movs	r0, #1
   11aee:	4249      	negs	r1, r1
   11af0:	4308      	orrs	r0, r1
   11af2:	e7d8      	b.n	11aa6 <__lesf2+0x36>

00011af4 <__aeabi_fmul>:
   11af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11af6:	4657      	mov	r7, sl
   11af8:	464e      	mov	r6, r9
   11afa:	4645      	mov	r5, r8
   11afc:	46de      	mov	lr, fp
   11afe:	b5e0      	push	{r5, r6, r7, lr}
   11b00:	0247      	lsls	r7, r0, #9
   11b02:	0046      	lsls	r6, r0, #1
   11b04:	4688      	mov	r8, r1
   11b06:	0a7f      	lsrs	r7, r7, #9
   11b08:	0e36      	lsrs	r6, r6, #24
   11b0a:	0fc4      	lsrs	r4, r0, #31
   11b0c:	2e00      	cmp	r6, #0
   11b0e:	d047      	beq.n	11ba0 <__aeabi_fmul+0xac>
   11b10:	2eff      	cmp	r6, #255	; 0xff
   11b12:	d024      	beq.n	11b5e <__aeabi_fmul+0x6a>
   11b14:	00fb      	lsls	r3, r7, #3
   11b16:	2780      	movs	r7, #128	; 0x80
   11b18:	04ff      	lsls	r7, r7, #19
   11b1a:	431f      	orrs	r7, r3
   11b1c:	2300      	movs	r3, #0
   11b1e:	4699      	mov	r9, r3
   11b20:	469a      	mov	sl, r3
   11b22:	3e7f      	subs	r6, #127	; 0x7f
   11b24:	4643      	mov	r3, r8
   11b26:	025d      	lsls	r5, r3, #9
   11b28:	0058      	lsls	r0, r3, #1
   11b2a:	0fdb      	lsrs	r3, r3, #31
   11b2c:	0a6d      	lsrs	r5, r5, #9
   11b2e:	0e00      	lsrs	r0, r0, #24
   11b30:	4698      	mov	r8, r3
   11b32:	d043      	beq.n	11bbc <__aeabi_fmul+0xc8>
   11b34:	28ff      	cmp	r0, #255	; 0xff
   11b36:	d03b      	beq.n	11bb0 <__aeabi_fmul+0xbc>
   11b38:	00eb      	lsls	r3, r5, #3
   11b3a:	2580      	movs	r5, #128	; 0x80
   11b3c:	2200      	movs	r2, #0
   11b3e:	04ed      	lsls	r5, r5, #19
   11b40:	431d      	orrs	r5, r3
   11b42:	387f      	subs	r0, #127	; 0x7f
   11b44:	1836      	adds	r6, r6, r0
   11b46:	1c73      	adds	r3, r6, #1
   11b48:	4641      	mov	r1, r8
   11b4a:	469b      	mov	fp, r3
   11b4c:	464b      	mov	r3, r9
   11b4e:	4061      	eors	r1, r4
   11b50:	4313      	orrs	r3, r2
   11b52:	2b0f      	cmp	r3, #15
   11b54:	d864      	bhi.n	11c20 <__aeabi_fmul+0x12c>
   11b56:	4875      	ldr	r0, [pc, #468]	; (11d2c <__aeabi_fmul+0x238>)
   11b58:	009b      	lsls	r3, r3, #2
   11b5a:	58c3      	ldr	r3, [r0, r3]
   11b5c:	469f      	mov	pc, r3
   11b5e:	2f00      	cmp	r7, #0
   11b60:	d142      	bne.n	11be8 <__aeabi_fmul+0xf4>
   11b62:	2308      	movs	r3, #8
   11b64:	4699      	mov	r9, r3
   11b66:	3b06      	subs	r3, #6
   11b68:	26ff      	movs	r6, #255	; 0xff
   11b6a:	469a      	mov	sl, r3
   11b6c:	e7da      	b.n	11b24 <__aeabi_fmul+0x30>
   11b6e:	4641      	mov	r1, r8
   11b70:	2a02      	cmp	r2, #2
   11b72:	d028      	beq.n	11bc6 <__aeabi_fmul+0xd2>
   11b74:	2a03      	cmp	r2, #3
   11b76:	d100      	bne.n	11b7a <__aeabi_fmul+0x86>
   11b78:	e0ce      	b.n	11d18 <__aeabi_fmul+0x224>
   11b7a:	2a01      	cmp	r2, #1
   11b7c:	d000      	beq.n	11b80 <__aeabi_fmul+0x8c>
   11b7e:	e0ac      	b.n	11cda <__aeabi_fmul+0x1e6>
   11b80:	4011      	ands	r1, r2
   11b82:	2000      	movs	r0, #0
   11b84:	2200      	movs	r2, #0
   11b86:	b2cc      	uxtb	r4, r1
   11b88:	0240      	lsls	r0, r0, #9
   11b8a:	05d2      	lsls	r2, r2, #23
   11b8c:	0a40      	lsrs	r0, r0, #9
   11b8e:	07e4      	lsls	r4, r4, #31
   11b90:	4310      	orrs	r0, r2
   11b92:	4320      	orrs	r0, r4
   11b94:	bc3c      	pop	{r2, r3, r4, r5}
   11b96:	4690      	mov	r8, r2
   11b98:	4699      	mov	r9, r3
   11b9a:	46a2      	mov	sl, r4
   11b9c:	46ab      	mov	fp, r5
   11b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11ba0:	2f00      	cmp	r7, #0
   11ba2:	d115      	bne.n	11bd0 <__aeabi_fmul+0xdc>
   11ba4:	2304      	movs	r3, #4
   11ba6:	4699      	mov	r9, r3
   11ba8:	3b03      	subs	r3, #3
   11baa:	2600      	movs	r6, #0
   11bac:	469a      	mov	sl, r3
   11bae:	e7b9      	b.n	11b24 <__aeabi_fmul+0x30>
   11bb0:	20ff      	movs	r0, #255	; 0xff
   11bb2:	2202      	movs	r2, #2
   11bb4:	2d00      	cmp	r5, #0
   11bb6:	d0c5      	beq.n	11b44 <__aeabi_fmul+0x50>
   11bb8:	2203      	movs	r2, #3
   11bba:	e7c3      	b.n	11b44 <__aeabi_fmul+0x50>
   11bbc:	2d00      	cmp	r5, #0
   11bbe:	d119      	bne.n	11bf4 <__aeabi_fmul+0x100>
   11bc0:	2000      	movs	r0, #0
   11bc2:	2201      	movs	r2, #1
   11bc4:	e7be      	b.n	11b44 <__aeabi_fmul+0x50>
   11bc6:	2401      	movs	r4, #1
   11bc8:	22ff      	movs	r2, #255	; 0xff
   11bca:	400c      	ands	r4, r1
   11bcc:	2000      	movs	r0, #0
   11bce:	e7db      	b.n	11b88 <__aeabi_fmul+0x94>
   11bd0:	0038      	movs	r0, r7
   11bd2:	f001 ff99 	bl	13b08 <__clzsi2>
   11bd6:	2676      	movs	r6, #118	; 0x76
   11bd8:	1f43      	subs	r3, r0, #5
   11bda:	409f      	lsls	r7, r3
   11bdc:	2300      	movs	r3, #0
   11bde:	4276      	negs	r6, r6
   11be0:	1a36      	subs	r6, r6, r0
   11be2:	4699      	mov	r9, r3
   11be4:	469a      	mov	sl, r3
   11be6:	e79d      	b.n	11b24 <__aeabi_fmul+0x30>
   11be8:	230c      	movs	r3, #12
   11bea:	4699      	mov	r9, r3
   11bec:	3b09      	subs	r3, #9
   11bee:	26ff      	movs	r6, #255	; 0xff
   11bf0:	469a      	mov	sl, r3
   11bf2:	e797      	b.n	11b24 <__aeabi_fmul+0x30>
   11bf4:	0028      	movs	r0, r5
   11bf6:	f001 ff87 	bl	13b08 <__clzsi2>
   11bfa:	1f43      	subs	r3, r0, #5
   11bfc:	409d      	lsls	r5, r3
   11bfe:	2376      	movs	r3, #118	; 0x76
   11c00:	425b      	negs	r3, r3
   11c02:	1a18      	subs	r0, r3, r0
   11c04:	2200      	movs	r2, #0
   11c06:	e79d      	b.n	11b44 <__aeabi_fmul+0x50>
   11c08:	2080      	movs	r0, #128	; 0x80
   11c0a:	2400      	movs	r4, #0
   11c0c:	03c0      	lsls	r0, r0, #15
   11c0e:	22ff      	movs	r2, #255	; 0xff
   11c10:	e7ba      	b.n	11b88 <__aeabi_fmul+0x94>
   11c12:	003d      	movs	r5, r7
   11c14:	4652      	mov	r2, sl
   11c16:	e7ab      	b.n	11b70 <__aeabi_fmul+0x7c>
   11c18:	003d      	movs	r5, r7
   11c1a:	0021      	movs	r1, r4
   11c1c:	4652      	mov	r2, sl
   11c1e:	e7a7      	b.n	11b70 <__aeabi_fmul+0x7c>
   11c20:	0c3b      	lsrs	r3, r7, #16
   11c22:	469c      	mov	ip, r3
   11c24:	042a      	lsls	r2, r5, #16
   11c26:	0c12      	lsrs	r2, r2, #16
   11c28:	0c2b      	lsrs	r3, r5, #16
   11c2a:	0014      	movs	r4, r2
   11c2c:	4660      	mov	r0, ip
   11c2e:	4665      	mov	r5, ip
   11c30:	043f      	lsls	r7, r7, #16
   11c32:	0c3f      	lsrs	r7, r7, #16
   11c34:	437c      	muls	r4, r7
   11c36:	4342      	muls	r2, r0
   11c38:	435d      	muls	r5, r3
   11c3a:	437b      	muls	r3, r7
   11c3c:	0c27      	lsrs	r7, r4, #16
   11c3e:	189b      	adds	r3, r3, r2
   11c40:	18ff      	adds	r7, r7, r3
   11c42:	42ba      	cmp	r2, r7
   11c44:	d903      	bls.n	11c4e <__aeabi_fmul+0x15a>
   11c46:	2380      	movs	r3, #128	; 0x80
   11c48:	025b      	lsls	r3, r3, #9
   11c4a:	469c      	mov	ip, r3
   11c4c:	4465      	add	r5, ip
   11c4e:	0424      	lsls	r4, r4, #16
   11c50:	043a      	lsls	r2, r7, #16
   11c52:	0c24      	lsrs	r4, r4, #16
   11c54:	1912      	adds	r2, r2, r4
   11c56:	0193      	lsls	r3, r2, #6
   11c58:	1e5c      	subs	r4, r3, #1
   11c5a:	41a3      	sbcs	r3, r4
   11c5c:	0c3f      	lsrs	r7, r7, #16
   11c5e:	0e92      	lsrs	r2, r2, #26
   11c60:	197d      	adds	r5, r7, r5
   11c62:	431a      	orrs	r2, r3
   11c64:	01ad      	lsls	r5, r5, #6
   11c66:	4315      	orrs	r5, r2
   11c68:	012b      	lsls	r3, r5, #4
   11c6a:	d504      	bpl.n	11c76 <__aeabi_fmul+0x182>
   11c6c:	2301      	movs	r3, #1
   11c6e:	465e      	mov	r6, fp
   11c70:	086a      	lsrs	r2, r5, #1
   11c72:	401d      	ands	r5, r3
   11c74:	4315      	orrs	r5, r2
   11c76:	0032      	movs	r2, r6
   11c78:	327f      	adds	r2, #127	; 0x7f
   11c7a:	2a00      	cmp	r2, #0
   11c7c:	dd25      	ble.n	11cca <__aeabi_fmul+0x1d6>
   11c7e:	076b      	lsls	r3, r5, #29
   11c80:	d004      	beq.n	11c8c <__aeabi_fmul+0x198>
   11c82:	230f      	movs	r3, #15
   11c84:	402b      	ands	r3, r5
   11c86:	2b04      	cmp	r3, #4
   11c88:	d000      	beq.n	11c8c <__aeabi_fmul+0x198>
   11c8a:	3504      	adds	r5, #4
   11c8c:	012b      	lsls	r3, r5, #4
   11c8e:	d503      	bpl.n	11c98 <__aeabi_fmul+0x1a4>
   11c90:	0032      	movs	r2, r6
   11c92:	4b27      	ldr	r3, [pc, #156]	; (11d30 <__aeabi_fmul+0x23c>)
   11c94:	3280      	adds	r2, #128	; 0x80
   11c96:	401d      	ands	r5, r3
   11c98:	2afe      	cmp	r2, #254	; 0xfe
   11c9a:	dc94      	bgt.n	11bc6 <__aeabi_fmul+0xd2>
   11c9c:	2401      	movs	r4, #1
   11c9e:	01a8      	lsls	r0, r5, #6
   11ca0:	0a40      	lsrs	r0, r0, #9
   11ca2:	b2d2      	uxtb	r2, r2
   11ca4:	400c      	ands	r4, r1
   11ca6:	e76f      	b.n	11b88 <__aeabi_fmul+0x94>
   11ca8:	2080      	movs	r0, #128	; 0x80
   11caa:	03c0      	lsls	r0, r0, #15
   11cac:	4207      	tst	r7, r0
   11cae:	d007      	beq.n	11cc0 <__aeabi_fmul+0x1cc>
   11cb0:	4205      	tst	r5, r0
   11cb2:	d105      	bne.n	11cc0 <__aeabi_fmul+0x1cc>
   11cb4:	4328      	orrs	r0, r5
   11cb6:	0240      	lsls	r0, r0, #9
   11cb8:	0a40      	lsrs	r0, r0, #9
   11cba:	4644      	mov	r4, r8
   11cbc:	22ff      	movs	r2, #255	; 0xff
   11cbe:	e763      	b.n	11b88 <__aeabi_fmul+0x94>
   11cc0:	4338      	orrs	r0, r7
   11cc2:	0240      	lsls	r0, r0, #9
   11cc4:	0a40      	lsrs	r0, r0, #9
   11cc6:	22ff      	movs	r2, #255	; 0xff
   11cc8:	e75e      	b.n	11b88 <__aeabi_fmul+0x94>
   11cca:	2401      	movs	r4, #1
   11ccc:	1aa3      	subs	r3, r4, r2
   11cce:	2b1b      	cmp	r3, #27
   11cd0:	dd05      	ble.n	11cde <__aeabi_fmul+0x1ea>
   11cd2:	400c      	ands	r4, r1
   11cd4:	2200      	movs	r2, #0
   11cd6:	2000      	movs	r0, #0
   11cd8:	e756      	b.n	11b88 <__aeabi_fmul+0x94>
   11cda:	465e      	mov	r6, fp
   11cdc:	e7cb      	b.n	11c76 <__aeabi_fmul+0x182>
   11cde:	002a      	movs	r2, r5
   11ce0:	2020      	movs	r0, #32
   11ce2:	40da      	lsrs	r2, r3
   11ce4:	1ac3      	subs	r3, r0, r3
   11ce6:	409d      	lsls	r5, r3
   11ce8:	002b      	movs	r3, r5
   11cea:	1e5d      	subs	r5, r3, #1
   11cec:	41ab      	sbcs	r3, r5
   11cee:	4313      	orrs	r3, r2
   11cf0:	075a      	lsls	r2, r3, #29
   11cf2:	d004      	beq.n	11cfe <__aeabi_fmul+0x20a>
   11cf4:	220f      	movs	r2, #15
   11cf6:	401a      	ands	r2, r3
   11cf8:	2a04      	cmp	r2, #4
   11cfa:	d000      	beq.n	11cfe <__aeabi_fmul+0x20a>
   11cfc:	3304      	adds	r3, #4
   11cfe:	015a      	lsls	r2, r3, #5
   11d00:	d504      	bpl.n	11d0c <__aeabi_fmul+0x218>
   11d02:	2401      	movs	r4, #1
   11d04:	2201      	movs	r2, #1
   11d06:	400c      	ands	r4, r1
   11d08:	2000      	movs	r0, #0
   11d0a:	e73d      	b.n	11b88 <__aeabi_fmul+0x94>
   11d0c:	2401      	movs	r4, #1
   11d0e:	019b      	lsls	r3, r3, #6
   11d10:	0a58      	lsrs	r0, r3, #9
   11d12:	400c      	ands	r4, r1
   11d14:	2200      	movs	r2, #0
   11d16:	e737      	b.n	11b88 <__aeabi_fmul+0x94>
   11d18:	2080      	movs	r0, #128	; 0x80
   11d1a:	2401      	movs	r4, #1
   11d1c:	03c0      	lsls	r0, r0, #15
   11d1e:	4328      	orrs	r0, r5
   11d20:	0240      	lsls	r0, r0, #9
   11d22:	0a40      	lsrs	r0, r0, #9
   11d24:	400c      	ands	r4, r1
   11d26:	22ff      	movs	r2, #255	; 0xff
   11d28:	e72e      	b.n	11b88 <__aeabi_fmul+0x94>
   11d2a:	46c0      	nop			; (mov r8, r8)
   11d2c:	000198d8 	.word	0x000198d8
   11d30:	f7ffffff 	.word	0xf7ffffff

00011d34 <__aeabi_fsub>:
   11d34:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d36:	464f      	mov	r7, r9
   11d38:	46d6      	mov	lr, sl
   11d3a:	4646      	mov	r6, r8
   11d3c:	0044      	lsls	r4, r0, #1
   11d3e:	b5c0      	push	{r6, r7, lr}
   11d40:	0fc2      	lsrs	r2, r0, #31
   11d42:	0247      	lsls	r7, r0, #9
   11d44:	0248      	lsls	r0, r1, #9
   11d46:	0a40      	lsrs	r0, r0, #9
   11d48:	4684      	mov	ip, r0
   11d4a:	4666      	mov	r6, ip
   11d4c:	0a7b      	lsrs	r3, r7, #9
   11d4e:	0048      	lsls	r0, r1, #1
   11d50:	0fc9      	lsrs	r1, r1, #31
   11d52:	469a      	mov	sl, r3
   11d54:	0e24      	lsrs	r4, r4, #24
   11d56:	0015      	movs	r5, r2
   11d58:	00db      	lsls	r3, r3, #3
   11d5a:	0e00      	lsrs	r0, r0, #24
   11d5c:	4689      	mov	r9, r1
   11d5e:	00f6      	lsls	r6, r6, #3
   11d60:	28ff      	cmp	r0, #255	; 0xff
   11d62:	d100      	bne.n	11d66 <__aeabi_fsub+0x32>
   11d64:	e08f      	b.n	11e86 <__aeabi_fsub+0x152>
   11d66:	2101      	movs	r1, #1
   11d68:	464f      	mov	r7, r9
   11d6a:	404f      	eors	r7, r1
   11d6c:	0039      	movs	r1, r7
   11d6e:	4291      	cmp	r1, r2
   11d70:	d066      	beq.n	11e40 <__aeabi_fsub+0x10c>
   11d72:	1a22      	subs	r2, r4, r0
   11d74:	2a00      	cmp	r2, #0
   11d76:	dc00      	bgt.n	11d7a <__aeabi_fsub+0x46>
   11d78:	e09d      	b.n	11eb6 <__aeabi_fsub+0x182>
   11d7a:	2800      	cmp	r0, #0
   11d7c:	d13d      	bne.n	11dfa <__aeabi_fsub+0xc6>
   11d7e:	2e00      	cmp	r6, #0
   11d80:	d100      	bne.n	11d84 <__aeabi_fsub+0x50>
   11d82:	e08b      	b.n	11e9c <__aeabi_fsub+0x168>
   11d84:	1e51      	subs	r1, r2, #1
   11d86:	2900      	cmp	r1, #0
   11d88:	d000      	beq.n	11d8c <__aeabi_fsub+0x58>
   11d8a:	e0b5      	b.n	11ef8 <__aeabi_fsub+0x1c4>
   11d8c:	2401      	movs	r4, #1
   11d8e:	1b9b      	subs	r3, r3, r6
   11d90:	015a      	lsls	r2, r3, #5
   11d92:	d544      	bpl.n	11e1e <__aeabi_fsub+0xea>
   11d94:	019b      	lsls	r3, r3, #6
   11d96:	099f      	lsrs	r7, r3, #6
   11d98:	0038      	movs	r0, r7
   11d9a:	f001 feb5 	bl	13b08 <__clzsi2>
   11d9e:	3805      	subs	r0, #5
   11da0:	4087      	lsls	r7, r0
   11da2:	4284      	cmp	r4, r0
   11da4:	dd00      	ble.n	11da8 <__aeabi_fsub+0x74>
   11da6:	e096      	b.n	11ed6 <__aeabi_fsub+0x1a2>
   11da8:	1b04      	subs	r4, r0, r4
   11daa:	003a      	movs	r2, r7
   11dac:	2020      	movs	r0, #32
   11dae:	3401      	adds	r4, #1
   11db0:	40e2      	lsrs	r2, r4
   11db2:	1b04      	subs	r4, r0, r4
   11db4:	40a7      	lsls	r7, r4
   11db6:	003b      	movs	r3, r7
   11db8:	1e5f      	subs	r7, r3, #1
   11dba:	41bb      	sbcs	r3, r7
   11dbc:	2400      	movs	r4, #0
   11dbe:	4313      	orrs	r3, r2
   11dc0:	075a      	lsls	r2, r3, #29
   11dc2:	d004      	beq.n	11dce <__aeabi_fsub+0x9a>
   11dc4:	220f      	movs	r2, #15
   11dc6:	401a      	ands	r2, r3
   11dc8:	2a04      	cmp	r2, #4
   11dca:	d000      	beq.n	11dce <__aeabi_fsub+0x9a>
   11dcc:	3304      	adds	r3, #4
   11dce:	015a      	lsls	r2, r3, #5
   11dd0:	d527      	bpl.n	11e22 <__aeabi_fsub+0xee>
   11dd2:	3401      	adds	r4, #1
   11dd4:	2cff      	cmp	r4, #255	; 0xff
   11dd6:	d100      	bne.n	11dda <__aeabi_fsub+0xa6>
   11dd8:	e079      	b.n	11ece <__aeabi_fsub+0x19a>
   11dda:	2201      	movs	r2, #1
   11ddc:	019b      	lsls	r3, r3, #6
   11dde:	0a5b      	lsrs	r3, r3, #9
   11de0:	b2e4      	uxtb	r4, r4
   11de2:	402a      	ands	r2, r5
   11de4:	025b      	lsls	r3, r3, #9
   11de6:	05e4      	lsls	r4, r4, #23
   11de8:	0a58      	lsrs	r0, r3, #9
   11dea:	07d2      	lsls	r2, r2, #31
   11dec:	4320      	orrs	r0, r4
   11dee:	4310      	orrs	r0, r2
   11df0:	bc1c      	pop	{r2, r3, r4}
   11df2:	4690      	mov	r8, r2
   11df4:	4699      	mov	r9, r3
   11df6:	46a2      	mov	sl, r4
   11df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11dfa:	2cff      	cmp	r4, #255	; 0xff
   11dfc:	d0e0      	beq.n	11dc0 <__aeabi_fsub+0x8c>
   11dfe:	2180      	movs	r1, #128	; 0x80
   11e00:	04c9      	lsls	r1, r1, #19
   11e02:	430e      	orrs	r6, r1
   11e04:	2a1b      	cmp	r2, #27
   11e06:	dc7b      	bgt.n	11f00 <__aeabi_fsub+0x1cc>
   11e08:	0031      	movs	r1, r6
   11e0a:	2020      	movs	r0, #32
   11e0c:	40d1      	lsrs	r1, r2
   11e0e:	1a82      	subs	r2, r0, r2
   11e10:	4096      	lsls	r6, r2
   11e12:	1e72      	subs	r2, r6, #1
   11e14:	4196      	sbcs	r6, r2
   11e16:	430e      	orrs	r6, r1
   11e18:	1b9b      	subs	r3, r3, r6
   11e1a:	015a      	lsls	r2, r3, #5
   11e1c:	d4ba      	bmi.n	11d94 <__aeabi_fsub+0x60>
   11e1e:	075a      	lsls	r2, r3, #29
   11e20:	d1d0      	bne.n	11dc4 <__aeabi_fsub+0x90>
   11e22:	2201      	movs	r2, #1
   11e24:	08df      	lsrs	r7, r3, #3
   11e26:	402a      	ands	r2, r5
   11e28:	2cff      	cmp	r4, #255	; 0xff
   11e2a:	d133      	bne.n	11e94 <__aeabi_fsub+0x160>
   11e2c:	2f00      	cmp	r7, #0
   11e2e:	d100      	bne.n	11e32 <__aeabi_fsub+0xfe>
   11e30:	e0a8      	b.n	11f84 <__aeabi_fsub+0x250>
   11e32:	2380      	movs	r3, #128	; 0x80
   11e34:	03db      	lsls	r3, r3, #15
   11e36:	433b      	orrs	r3, r7
   11e38:	025b      	lsls	r3, r3, #9
   11e3a:	0a5b      	lsrs	r3, r3, #9
   11e3c:	24ff      	movs	r4, #255	; 0xff
   11e3e:	e7d1      	b.n	11de4 <__aeabi_fsub+0xb0>
   11e40:	1a21      	subs	r1, r4, r0
   11e42:	2900      	cmp	r1, #0
   11e44:	dd4c      	ble.n	11ee0 <__aeabi_fsub+0x1ac>
   11e46:	2800      	cmp	r0, #0
   11e48:	d02a      	beq.n	11ea0 <__aeabi_fsub+0x16c>
   11e4a:	2cff      	cmp	r4, #255	; 0xff
   11e4c:	d0b8      	beq.n	11dc0 <__aeabi_fsub+0x8c>
   11e4e:	2080      	movs	r0, #128	; 0x80
   11e50:	04c0      	lsls	r0, r0, #19
   11e52:	4306      	orrs	r6, r0
   11e54:	291b      	cmp	r1, #27
   11e56:	dd00      	ble.n	11e5a <__aeabi_fsub+0x126>
   11e58:	e0af      	b.n	11fba <__aeabi_fsub+0x286>
   11e5a:	0030      	movs	r0, r6
   11e5c:	2720      	movs	r7, #32
   11e5e:	40c8      	lsrs	r0, r1
   11e60:	1a79      	subs	r1, r7, r1
   11e62:	408e      	lsls	r6, r1
   11e64:	1e71      	subs	r1, r6, #1
   11e66:	418e      	sbcs	r6, r1
   11e68:	4306      	orrs	r6, r0
   11e6a:	199b      	adds	r3, r3, r6
   11e6c:	0159      	lsls	r1, r3, #5
   11e6e:	d5d6      	bpl.n	11e1e <__aeabi_fsub+0xea>
   11e70:	3401      	adds	r4, #1
   11e72:	2cff      	cmp	r4, #255	; 0xff
   11e74:	d100      	bne.n	11e78 <__aeabi_fsub+0x144>
   11e76:	e085      	b.n	11f84 <__aeabi_fsub+0x250>
   11e78:	2201      	movs	r2, #1
   11e7a:	497a      	ldr	r1, [pc, #488]	; (12064 <__aeabi_fsub+0x330>)
   11e7c:	401a      	ands	r2, r3
   11e7e:	085b      	lsrs	r3, r3, #1
   11e80:	400b      	ands	r3, r1
   11e82:	4313      	orrs	r3, r2
   11e84:	e79c      	b.n	11dc0 <__aeabi_fsub+0x8c>
   11e86:	2e00      	cmp	r6, #0
   11e88:	d000      	beq.n	11e8c <__aeabi_fsub+0x158>
   11e8a:	e770      	b.n	11d6e <__aeabi_fsub+0x3a>
   11e8c:	e76b      	b.n	11d66 <__aeabi_fsub+0x32>
   11e8e:	1e3b      	subs	r3, r7, #0
   11e90:	d1c5      	bne.n	11e1e <__aeabi_fsub+0xea>
   11e92:	2200      	movs	r2, #0
   11e94:	027b      	lsls	r3, r7, #9
   11e96:	0a5b      	lsrs	r3, r3, #9
   11e98:	b2e4      	uxtb	r4, r4
   11e9a:	e7a3      	b.n	11de4 <__aeabi_fsub+0xb0>
   11e9c:	0014      	movs	r4, r2
   11e9e:	e78f      	b.n	11dc0 <__aeabi_fsub+0x8c>
   11ea0:	2e00      	cmp	r6, #0
   11ea2:	d04d      	beq.n	11f40 <__aeabi_fsub+0x20c>
   11ea4:	1e48      	subs	r0, r1, #1
   11ea6:	2800      	cmp	r0, #0
   11ea8:	d157      	bne.n	11f5a <__aeabi_fsub+0x226>
   11eaa:	199b      	adds	r3, r3, r6
   11eac:	2401      	movs	r4, #1
   11eae:	015a      	lsls	r2, r3, #5
   11eb0:	d5b5      	bpl.n	11e1e <__aeabi_fsub+0xea>
   11eb2:	2402      	movs	r4, #2
   11eb4:	e7e0      	b.n	11e78 <__aeabi_fsub+0x144>
   11eb6:	2a00      	cmp	r2, #0
   11eb8:	d125      	bne.n	11f06 <__aeabi_fsub+0x1d2>
   11eba:	1c62      	adds	r2, r4, #1
   11ebc:	b2d2      	uxtb	r2, r2
   11ebe:	2a01      	cmp	r2, #1
   11ec0:	dd72      	ble.n	11fa8 <__aeabi_fsub+0x274>
   11ec2:	1b9f      	subs	r7, r3, r6
   11ec4:	017a      	lsls	r2, r7, #5
   11ec6:	d535      	bpl.n	11f34 <__aeabi_fsub+0x200>
   11ec8:	1af7      	subs	r7, r6, r3
   11eca:	000d      	movs	r5, r1
   11ecc:	e764      	b.n	11d98 <__aeabi_fsub+0x64>
   11ece:	2201      	movs	r2, #1
   11ed0:	2300      	movs	r3, #0
   11ed2:	402a      	ands	r2, r5
   11ed4:	e786      	b.n	11de4 <__aeabi_fsub+0xb0>
   11ed6:	003b      	movs	r3, r7
   11ed8:	4a63      	ldr	r2, [pc, #396]	; (12068 <__aeabi_fsub+0x334>)
   11eda:	1a24      	subs	r4, r4, r0
   11edc:	4013      	ands	r3, r2
   11ede:	e76f      	b.n	11dc0 <__aeabi_fsub+0x8c>
   11ee0:	2900      	cmp	r1, #0
   11ee2:	d16c      	bne.n	11fbe <__aeabi_fsub+0x28a>
   11ee4:	1c61      	adds	r1, r4, #1
   11ee6:	b2c8      	uxtb	r0, r1
   11ee8:	2801      	cmp	r0, #1
   11eea:	dd4e      	ble.n	11f8a <__aeabi_fsub+0x256>
   11eec:	29ff      	cmp	r1, #255	; 0xff
   11eee:	d049      	beq.n	11f84 <__aeabi_fsub+0x250>
   11ef0:	199b      	adds	r3, r3, r6
   11ef2:	085b      	lsrs	r3, r3, #1
   11ef4:	000c      	movs	r4, r1
   11ef6:	e763      	b.n	11dc0 <__aeabi_fsub+0x8c>
   11ef8:	2aff      	cmp	r2, #255	; 0xff
   11efa:	d041      	beq.n	11f80 <__aeabi_fsub+0x24c>
   11efc:	000a      	movs	r2, r1
   11efe:	e781      	b.n	11e04 <__aeabi_fsub+0xd0>
   11f00:	2601      	movs	r6, #1
   11f02:	1b9b      	subs	r3, r3, r6
   11f04:	e789      	b.n	11e1a <__aeabi_fsub+0xe6>
   11f06:	2c00      	cmp	r4, #0
   11f08:	d01c      	beq.n	11f44 <__aeabi_fsub+0x210>
   11f0a:	28ff      	cmp	r0, #255	; 0xff
   11f0c:	d021      	beq.n	11f52 <__aeabi_fsub+0x21e>
   11f0e:	2480      	movs	r4, #128	; 0x80
   11f10:	04e4      	lsls	r4, r4, #19
   11f12:	4252      	negs	r2, r2
   11f14:	4323      	orrs	r3, r4
   11f16:	2a1b      	cmp	r2, #27
   11f18:	dd00      	ble.n	11f1c <__aeabi_fsub+0x1e8>
   11f1a:	e096      	b.n	1204a <__aeabi_fsub+0x316>
   11f1c:	001c      	movs	r4, r3
   11f1e:	2520      	movs	r5, #32
   11f20:	40d4      	lsrs	r4, r2
   11f22:	1aaa      	subs	r2, r5, r2
   11f24:	4093      	lsls	r3, r2
   11f26:	1e5a      	subs	r2, r3, #1
   11f28:	4193      	sbcs	r3, r2
   11f2a:	4323      	orrs	r3, r4
   11f2c:	1af3      	subs	r3, r6, r3
   11f2e:	0004      	movs	r4, r0
   11f30:	000d      	movs	r5, r1
   11f32:	e72d      	b.n	11d90 <__aeabi_fsub+0x5c>
   11f34:	2f00      	cmp	r7, #0
   11f36:	d000      	beq.n	11f3a <__aeabi_fsub+0x206>
   11f38:	e72e      	b.n	11d98 <__aeabi_fsub+0x64>
   11f3a:	2200      	movs	r2, #0
   11f3c:	2400      	movs	r4, #0
   11f3e:	e7a9      	b.n	11e94 <__aeabi_fsub+0x160>
   11f40:	000c      	movs	r4, r1
   11f42:	e73d      	b.n	11dc0 <__aeabi_fsub+0x8c>
   11f44:	2b00      	cmp	r3, #0
   11f46:	d058      	beq.n	11ffa <__aeabi_fsub+0x2c6>
   11f48:	43d2      	mvns	r2, r2
   11f4a:	2a00      	cmp	r2, #0
   11f4c:	d0ee      	beq.n	11f2c <__aeabi_fsub+0x1f8>
   11f4e:	28ff      	cmp	r0, #255	; 0xff
   11f50:	d1e1      	bne.n	11f16 <__aeabi_fsub+0x1e2>
   11f52:	0033      	movs	r3, r6
   11f54:	24ff      	movs	r4, #255	; 0xff
   11f56:	000d      	movs	r5, r1
   11f58:	e732      	b.n	11dc0 <__aeabi_fsub+0x8c>
   11f5a:	29ff      	cmp	r1, #255	; 0xff
   11f5c:	d010      	beq.n	11f80 <__aeabi_fsub+0x24c>
   11f5e:	0001      	movs	r1, r0
   11f60:	e778      	b.n	11e54 <__aeabi_fsub+0x120>
   11f62:	2b00      	cmp	r3, #0
   11f64:	d06e      	beq.n	12044 <__aeabi_fsub+0x310>
   11f66:	24ff      	movs	r4, #255	; 0xff
   11f68:	2e00      	cmp	r6, #0
   11f6a:	d100      	bne.n	11f6e <__aeabi_fsub+0x23a>
   11f6c:	e728      	b.n	11dc0 <__aeabi_fsub+0x8c>
   11f6e:	2280      	movs	r2, #128	; 0x80
   11f70:	4651      	mov	r1, sl
   11f72:	03d2      	lsls	r2, r2, #15
   11f74:	4211      	tst	r1, r2
   11f76:	d003      	beq.n	11f80 <__aeabi_fsub+0x24c>
   11f78:	4661      	mov	r1, ip
   11f7a:	4211      	tst	r1, r2
   11f7c:	d100      	bne.n	11f80 <__aeabi_fsub+0x24c>
   11f7e:	0033      	movs	r3, r6
   11f80:	24ff      	movs	r4, #255	; 0xff
   11f82:	e71d      	b.n	11dc0 <__aeabi_fsub+0x8c>
   11f84:	24ff      	movs	r4, #255	; 0xff
   11f86:	2300      	movs	r3, #0
   11f88:	e72c      	b.n	11de4 <__aeabi_fsub+0xb0>
   11f8a:	2c00      	cmp	r4, #0
   11f8c:	d1e9      	bne.n	11f62 <__aeabi_fsub+0x22e>
   11f8e:	2b00      	cmp	r3, #0
   11f90:	d063      	beq.n	1205a <__aeabi_fsub+0x326>
   11f92:	2e00      	cmp	r6, #0
   11f94:	d100      	bne.n	11f98 <__aeabi_fsub+0x264>
   11f96:	e713      	b.n	11dc0 <__aeabi_fsub+0x8c>
   11f98:	199b      	adds	r3, r3, r6
   11f9a:	015a      	lsls	r2, r3, #5
   11f9c:	d400      	bmi.n	11fa0 <__aeabi_fsub+0x26c>
   11f9e:	e73e      	b.n	11e1e <__aeabi_fsub+0xea>
   11fa0:	4a31      	ldr	r2, [pc, #196]	; (12068 <__aeabi_fsub+0x334>)
   11fa2:	000c      	movs	r4, r1
   11fa4:	4013      	ands	r3, r2
   11fa6:	e70b      	b.n	11dc0 <__aeabi_fsub+0x8c>
   11fa8:	2c00      	cmp	r4, #0
   11faa:	d11e      	bne.n	11fea <__aeabi_fsub+0x2b6>
   11fac:	2b00      	cmp	r3, #0
   11fae:	d12f      	bne.n	12010 <__aeabi_fsub+0x2dc>
   11fb0:	2e00      	cmp	r6, #0
   11fb2:	d04f      	beq.n	12054 <__aeabi_fsub+0x320>
   11fb4:	0033      	movs	r3, r6
   11fb6:	000d      	movs	r5, r1
   11fb8:	e702      	b.n	11dc0 <__aeabi_fsub+0x8c>
   11fba:	2601      	movs	r6, #1
   11fbc:	e755      	b.n	11e6a <__aeabi_fsub+0x136>
   11fbe:	2c00      	cmp	r4, #0
   11fc0:	d11f      	bne.n	12002 <__aeabi_fsub+0x2ce>
   11fc2:	2b00      	cmp	r3, #0
   11fc4:	d043      	beq.n	1204e <__aeabi_fsub+0x31a>
   11fc6:	43c9      	mvns	r1, r1
   11fc8:	2900      	cmp	r1, #0
   11fca:	d00b      	beq.n	11fe4 <__aeabi_fsub+0x2b0>
   11fcc:	28ff      	cmp	r0, #255	; 0xff
   11fce:	d039      	beq.n	12044 <__aeabi_fsub+0x310>
   11fd0:	291b      	cmp	r1, #27
   11fd2:	dc44      	bgt.n	1205e <__aeabi_fsub+0x32a>
   11fd4:	001c      	movs	r4, r3
   11fd6:	2720      	movs	r7, #32
   11fd8:	40cc      	lsrs	r4, r1
   11fda:	1a79      	subs	r1, r7, r1
   11fdc:	408b      	lsls	r3, r1
   11fde:	1e59      	subs	r1, r3, #1
   11fe0:	418b      	sbcs	r3, r1
   11fe2:	4323      	orrs	r3, r4
   11fe4:	199b      	adds	r3, r3, r6
   11fe6:	0004      	movs	r4, r0
   11fe8:	e740      	b.n	11e6c <__aeabi_fsub+0x138>
   11fea:	2b00      	cmp	r3, #0
   11fec:	d11a      	bne.n	12024 <__aeabi_fsub+0x2f0>
   11fee:	2e00      	cmp	r6, #0
   11ff0:	d124      	bne.n	1203c <__aeabi_fsub+0x308>
   11ff2:	2780      	movs	r7, #128	; 0x80
   11ff4:	2200      	movs	r2, #0
   11ff6:	03ff      	lsls	r7, r7, #15
   11ff8:	e71b      	b.n	11e32 <__aeabi_fsub+0xfe>
   11ffa:	0033      	movs	r3, r6
   11ffc:	0004      	movs	r4, r0
   11ffe:	000d      	movs	r5, r1
   12000:	e6de      	b.n	11dc0 <__aeabi_fsub+0x8c>
   12002:	28ff      	cmp	r0, #255	; 0xff
   12004:	d01e      	beq.n	12044 <__aeabi_fsub+0x310>
   12006:	2480      	movs	r4, #128	; 0x80
   12008:	04e4      	lsls	r4, r4, #19
   1200a:	4249      	negs	r1, r1
   1200c:	4323      	orrs	r3, r4
   1200e:	e7df      	b.n	11fd0 <__aeabi_fsub+0x29c>
   12010:	2e00      	cmp	r6, #0
   12012:	d100      	bne.n	12016 <__aeabi_fsub+0x2e2>
   12014:	e6d4      	b.n	11dc0 <__aeabi_fsub+0x8c>
   12016:	1b9f      	subs	r7, r3, r6
   12018:	017a      	lsls	r2, r7, #5
   1201a:	d400      	bmi.n	1201e <__aeabi_fsub+0x2ea>
   1201c:	e737      	b.n	11e8e <__aeabi_fsub+0x15a>
   1201e:	1af3      	subs	r3, r6, r3
   12020:	000d      	movs	r5, r1
   12022:	e6cd      	b.n	11dc0 <__aeabi_fsub+0x8c>
   12024:	24ff      	movs	r4, #255	; 0xff
   12026:	2e00      	cmp	r6, #0
   12028:	d100      	bne.n	1202c <__aeabi_fsub+0x2f8>
   1202a:	e6c9      	b.n	11dc0 <__aeabi_fsub+0x8c>
   1202c:	2280      	movs	r2, #128	; 0x80
   1202e:	4650      	mov	r0, sl
   12030:	03d2      	lsls	r2, r2, #15
   12032:	4210      	tst	r0, r2
   12034:	d0a4      	beq.n	11f80 <__aeabi_fsub+0x24c>
   12036:	4660      	mov	r0, ip
   12038:	4210      	tst	r0, r2
   1203a:	d1a1      	bne.n	11f80 <__aeabi_fsub+0x24c>
   1203c:	0033      	movs	r3, r6
   1203e:	000d      	movs	r5, r1
   12040:	24ff      	movs	r4, #255	; 0xff
   12042:	e6bd      	b.n	11dc0 <__aeabi_fsub+0x8c>
   12044:	0033      	movs	r3, r6
   12046:	24ff      	movs	r4, #255	; 0xff
   12048:	e6ba      	b.n	11dc0 <__aeabi_fsub+0x8c>
   1204a:	2301      	movs	r3, #1
   1204c:	e76e      	b.n	11f2c <__aeabi_fsub+0x1f8>
   1204e:	0033      	movs	r3, r6
   12050:	0004      	movs	r4, r0
   12052:	e6b5      	b.n	11dc0 <__aeabi_fsub+0x8c>
   12054:	2700      	movs	r7, #0
   12056:	2200      	movs	r2, #0
   12058:	e71c      	b.n	11e94 <__aeabi_fsub+0x160>
   1205a:	0033      	movs	r3, r6
   1205c:	e6b0      	b.n	11dc0 <__aeabi_fsub+0x8c>
   1205e:	2301      	movs	r3, #1
   12060:	e7c0      	b.n	11fe4 <__aeabi_fsub+0x2b0>
   12062:	46c0      	nop			; (mov r8, r8)
   12064:	7dffffff 	.word	0x7dffffff
   12068:	fbffffff 	.word	0xfbffffff

0001206c <__aeabi_f2iz>:
   1206c:	0241      	lsls	r1, r0, #9
   1206e:	0043      	lsls	r3, r0, #1
   12070:	0fc2      	lsrs	r2, r0, #31
   12072:	0a49      	lsrs	r1, r1, #9
   12074:	0e1b      	lsrs	r3, r3, #24
   12076:	2000      	movs	r0, #0
   12078:	2b7e      	cmp	r3, #126	; 0x7e
   1207a:	dd0d      	ble.n	12098 <__aeabi_f2iz+0x2c>
   1207c:	2b9d      	cmp	r3, #157	; 0x9d
   1207e:	dc0c      	bgt.n	1209a <__aeabi_f2iz+0x2e>
   12080:	2080      	movs	r0, #128	; 0x80
   12082:	0400      	lsls	r0, r0, #16
   12084:	4301      	orrs	r1, r0
   12086:	2b95      	cmp	r3, #149	; 0x95
   12088:	dc0a      	bgt.n	120a0 <__aeabi_f2iz+0x34>
   1208a:	2096      	movs	r0, #150	; 0x96
   1208c:	1ac3      	subs	r3, r0, r3
   1208e:	40d9      	lsrs	r1, r3
   12090:	4248      	negs	r0, r1
   12092:	2a00      	cmp	r2, #0
   12094:	d100      	bne.n	12098 <__aeabi_f2iz+0x2c>
   12096:	0008      	movs	r0, r1
   12098:	4770      	bx	lr
   1209a:	4b03      	ldr	r3, [pc, #12]	; (120a8 <__aeabi_f2iz+0x3c>)
   1209c:	18d0      	adds	r0, r2, r3
   1209e:	e7fb      	b.n	12098 <__aeabi_f2iz+0x2c>
   120a0:	3b96      	subs	r3, #150	; 0x96
   120a2:	4099      	lsls	r1, r3
   120a4:	e7f4      	b.n	12090 <__aeabi_f2iz+0x24>
   120a6:	46c0      	nop			; (mov r8, r8)
   120a8:	7fffffff 	.word	0x7fffffff

000120ac <__aeabi_i2f>:
   120ac:	b570      	push	{r4, r5, r6, lr}
   120ae:	2800      	cmp	r0, #0
   120b0:	d030      	beq.n	12114 <__aeabi_i2f+0x68>
   120b2:	17c3      	asrs	r3, r0, #31
   120b4:	18c4      	adds	r4, r0, r3
   120b6:	405c      	eors	r4, r3
   120b8:	0fc5      	lsrs	r5, r0, #31
   120ba:	0020      	movs	r0, r4
   120bc:	f001 fd24 	bl	13b08 <__clzsi2>
   120c0:	239e      	movs	r3, #158	; 0x9e
   120c2:	1a1b      	subs	r3, r3, r0
   120c4:	2b96      	cmp	r3, #150	; 0x96
   120c6:	dc0d      	bgt.n	120e4 <__aeabi_i2f+0x38>
   120c8:	2296      	movs	r2, #150	; 0x96
   120ca:	1ad2      	subs	r2, r2, r3
   120cc:	4094      	lsls	r4, r2
   120ce:	002a      	movs	r2, r5
   120d0:	0264      	lsls	r4, r4, #9
   120d2:	0a64      	lsrs	r4, r4, #9
   120d4:	b2db      	uxtb	r3, r3
   120d6:	0264      	lsls	r4, r4, #9
   120d8:	05db      	lsls	r3, r3, #23
   120da:	0a60      	lsrs	r0, r4, #9
   120dc:	07d2      	lsls	r2, r2, #31
   120de:	4318      	orrs	r0, r3
   120e0:	4310      	orrs	r0, r2
   120e2:	bd70      	pop	{r4, r5, r6, pc}
   120e4:	2b99      	cmp	r3, #153	; 0x99
   120e6:	dc19      	bgt.n	1211c <__aeabi_i2f+0x70>
   120e8:	2299      	movs	r2, #153	; 0x99
   120ea:	1ad2      	subs	r2, r2, r3
   120ec:	2a00      	cmp	r2, #0
   120ee:	dd29      	ble.n	12144 <__aeabi_i2f+0x98>
   120f0:	4094      	lsls	r4, r2
   120f2:	0022      	movs	r2, r4
   120f4:	4c14      	ldr	r4, [pc, #80]	; (12148 <__aeabi_i2f+0x9c>)
   120f6:	4014      	ands	r4, r2
   120f8:	0751      	lsls	r1, r2, #29
   120fa:	d004      	beq.n	12106 <__aeabi_i2f+0x5a>
   120fc:	210f      	movs	r1, #15
   120fe:	400a      	ands	r2, r1
   12100:	2a04      	cmp	r2, #4
   12102:	d000      	beq.n	12106 <__aeabi_i2f+0x5a>
   12104:	3404      	adds	r4, #4
   12106:	0162      	lsls	r2, r4, #5
   12108:	d413      	bmi.n	12132 <__aeabi_i2f+0x86>
   1210a:	01a4      	lsls	r4, r4, #6
   1210c:	0a64      	lsrs	r4, r4, #9
   1210e:	b2db      	uxtb	r3, r3
   12110:	002a      	movs	r2, r5
   12112:	e7e0      	b.n	120d6 <__aeabi_i2f+0x2a>
   12114:	2200      	movs	r2, #0
   12116:	2300      	movs	r3, #0
   12118:	2400      	movs	r4, #0
   1211a:	e7dc      	b.n	120d6 <__aeabi_i2f+0x2a>
   1211c:	2205      	movs	r2, #5
   1211e:	0021      	movs	r1, r4
   12120:	1a12      	subs	r2, r2, r0
   12122:	40d1      	lsrs	r1, r2
   12124:	22b9      	movs	r2, #185	; 0xb9
   12126:	1ad2      	subs	r2, r2, r3
   12128:	4094      	lsls	r4, r2
   1212a:	1e62      	subs	r2, r4, #1
   1212c:	4194      	sbcs	r4, r2
   1212e:	430c      	orrs	r4, r1
   12130:	e7da      	b.n	120e8 <__aeabi_i2f+0x3c>
   12132:	4b05      	ldr	r3, [pc, #20]	; (12148 <__aeabi_i2f+0x9c>)
   12134:	002a      	movs	r2, r5
   12136:	401c      	ands	r4, r3
   12138:	239f      	movs	r3, #159	; 0x9f
   1213a:	01a4      	lsls	r4, r4, #6
   1213c:	1a1b      	subs	r3, r3, r0
   1213e:	0a64      	lsrs	r4, r4, #9
   12140:	b2db      	uxtb	r3, r3
   12142:	e7c8      	b.n	120d6 <__aeabi_i2f+0x2a>
   12144:	0022      	movs	r2, r4
   12146:	e7d5      	b.n	120f4 <__aeabi_i2f+0x48>
   12148:	fbffffff 	.word	0xfbffffff

0001214c <__aeabi_ui2f>:
   1214c:	b510      	push	{r4, lr}
   1214e:	1e04      	subs	r4, r0, #0
   12150:	d027      	beq.n	121a2 <__aeabi_ui2f+0x56>
   12152:	f001 fcd9 	bl	13b08 <__clzsi2>
   12156:	239e      	movs	r3, #158	; 0x9e
   12158:	1a1b      	subs	r3, r3, r0
   1215a:	2b96      	cmp	r3, #150	; 0x96
   1215c:	dc0a      	bgt.n	12174 <__aeabi_ui2f+0x28>
   1215e:	2296      	movs	r2, #150	; 0x96
   12160:	1ad2      	subs	r2, r2, r3
   12162:	4094      	lsls	r4, r2
   12164:	0264      	lsls	r4, r4, #9
   12166:	0a64      	lsrs	r4, r4, #9
   12168:	b2db      	uxtb	r3, r3
   1216a:	0264      	lsls	r4, r4, #9
   1216c:	05db      	lsls	r3, r3, #23
   1216e:	0a60      	lsrs	r0, r4, #9
   12170:	4318      	orrs	r0, r3
   12172:	bd10      	pop	{r4, pc}
   12174:	2b99      	cmp	r3, #153	; 0x99
   12176:	dc17      	bgt.n	121a8 <__aeabi_ui2f+0x5c>
   12178:	2299      	movs	r2, #153	; 0x99
   1217a:	1ad2      	subs	r2, r2, r3
   1217c:	2a00      	cmp	r2, #0
   1217e:	dd27      	ble.n	121d0 <__aeabi_ui2f+0x84>
   12180:	4094      	lsls	r4, r2
   12182:	0022      	movs	r2, r4
   12184:	4c13      	ldr	r4, [pc, #76]	; (121d4 <__aeabi_ui2f+0x88>)
   12186:	4014      	ands	r4, r2
   12188:	0751      	lsls	r1, r2, #29
   1218a:	d004      	beq.n	12196 <__aeabi_ui2f+0x4a>
   1218c:	210f      	movs	r1, #15
   1218e:	400a      	ands	r2, r1
   12190:	2a04      	cmp	r2, #4
   12192:	d000      	beq.n	12196 <__aeabi_ui2f+0x4a>
   12194:	3404      	adds	r4, #4
   12196:	0162      	lsls	r2, r4, #5
   12198:	d412      	bmi.n	121c0 <__aeabi_ui2f+0x74>
   1219a:	01a4      	lsls	r4, r4, #6
   1219c:	0a64      	lsrs	r4, r4, #9
   1219e:	b2db      	uxtb	r3, r3
   121a0:	e7e3      	b.n	1216a <__aeabi_ui2f+0x1e>
   121a2:	2300      	movs	r3, #0
   121a4:	2400      	movs	r4, #0
   121a6:	e7e0      	b.n	1216a <__aeabi_ui2f+0x1e>
   121a8:	22b9      	movs	r2, #185	; 0xb9
   121aa:	0021      	movs	r1, r4
   121ac:	1ad2      	subs	r2, r2, r3
   121ae:	4091      	lsls	r1, r2
   121b0:	000a      	movs	r2, r1
   121b2:	1e51      	subs	r1, r2, #1
   121b4:	418a      	sbcs	r2, r1
   121b6:	2105      	movs	r1, #5
   121b8:	1a09      	subs	r1, r1, r0
   121ba:	40cc      	lsrs	r4, r1
   121bc:	4314      	orrs	r4, r2
   121be:	e7db      	b.n	12178 <__aeabi_ui2f+0x2c>
   121c0:	4b04      	ldr	r3, [pc, #16]	; (121d4 <__aeabi_ui2f+0x88>)
   121c2:	401c      	ands	r4, r3
   121c4:	239f      	movs	r3, #159	; 0x9f
   121c6:	01a4      	lsls	r4, r4, #6
   121c8:	1a1b      	subs	r3, r3, r0
   121ca:	0a64      	lsrs	r4, r4, #9
   121cc:	b2db      	uxtb	r3, r3
   121ce:	e7cc      	b.n	1216a <__aeabi_ui2f+0x1e>
   121d0:	0022      	movs	r2, r4
   121d2:	e7d7      	b.n	12184 <__aeabi_ui2f+0x38>
   121d4:	fbffffff 	.word	0xfbffffff

000121d8 <__aeabi_dadd>:
   121d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   121da:	4645      	mov	r5, r8
   121dc:	46de      	mov	lr, fp
   121de:	4657      	mov	r7, sl
   121e0:	464e      	mov	r6, r9
   121e2:	030c      	lsls	r4, r1, #12
   121e4:	b5e0      	push	{r5, r6, r7, lr}
   121e6:	004e      	lsls	r6, r1, #1
   121e8:	0fc9      	lsrs	r1, r1, #31
   121ea:	4688      	mov	r8, r1
   121ec:	000d      	movs	r5, r1
   121ee:	0a61      	lsrs	r1, r4, #9
   121f0:	0f44      	lsrs	r4, r0, #29
   121f2:	430c      	orrs	r4, r1
   121f4:	00c7      	lsls	r7, r0, #3
   121f6:	0319      	lsls	r1, r3, #12
   121f8:	0058      	lsls	r0, r3, #1
   121fa:	0fdb      	lsrs	r3, r3, #31
   121fc:	469b      	mov	fp, r3
   121fe:	0a4b      	lsrs	r3, r1, #9
   12200:	0f51      	lsrs	r1, r2, #29
   12202:	430b      	orrs	r3, r1
   12204:	0d76      	lsrs	r6, r6, #21
   12206:	0d40      	lsrs	r0, r0, #21
   12208:	0019      	movs	r1, r3
   1220a:	00d2      	lsls	r2, r2, #3
   1220c:	45d8      	cmp	r8, fp
   1220e:	d100      	bne.n	12212 <__aeabi_dadd+0x3a>
   12210:	e0ae      	b.n	12370 <__aeabi_dadd+0x198>
   12212:	1a35      	subs	r5, r6, r0
   12214:	2d00      	cmp	r5, #0
   12216:	dc00      	bgt.n	1221a <__aeabi_dadd+0x42>
   12218:	e0f6      	b.n	12408 <__aeabi_dadd+0x230>
   1221a:	2800      	cmp	r0, #0
   1221c:	d10f      	bne.n	1223e <__aeabi_dadd+0x66>
   1221e:	4313      	orrs	r3, r2
   12220:	d100      	bne.n	12224 <__aeabi_dadd+0x4c>
   12222:	e0db      	b.n	123dc <__aeabi_dadd+0x204>
   12224:	1e6b      	subs	r3, r5, #1
   12226:	2b00      	cmp	r3, #0
   12228:	d000      	beq.n	1222c <__aeabi_dadd+0x54>
   1222a:	e137      	b.n	1249c <__aeabi_dadd+0x2c4>
   1222c:	1aba      	subs	r2, r7, r2
   1222e:	4297      	cmp	r7, r2
   12230:	41bf      	sbcs	r7, r7
   12232:	1a64      	subs	r4, r4, r1
   12234:	427f      	negs	r7, r7
   12236:	1be4      	subs	r4, r4, r7
   12238:	2601      	movs	r6, #1
   1223a:	0017      	movs	r7, r2
   1223c:	e024      	b.n	12288 <__aeabi_dadd+0xb0>
   1223e:	4bc6      	ldr	r3, [pc, #792]	; (12558 <__aeabi_dadd+0x380>)
   12240:	429e      	cmp	r6, r3
   12242:	d04d      	beq.n	122e0 <__aeabi_dadd+0x108>
   12244:	2380      	movs	r3, #128	; 0x80
   12246:	041b      	lsls	r3, r3, #16
   12248:	4319      	orrs	r1, r3
   1224a:	2d38      	cmp	r5, #56	; 0x38
   1224c:	dd00      	ble.n	12250 <__aeabi_dadd+0x78>
   1224e:	e107      	b.n	12460 <__aeabi_dadd+0x288>
   12250:	2d1f      	cmp	r5, #31
   12252:	dd00      	ble.n	12256 <__aeabi_dadd+0x7e>
   12254:	e138      	b.n	124c8 <__aeabi_dadd+0x2f0>
   12256:	2020      	movs	r0, #32
   12258:	1b43      	subs	r3, r0, r5
   1225a:	469a      	mov	sl, r3
   1225c:	000b      	movs	r3, r1
   1225e:	4650      	mov	r0, sl
   12260:	4083      	lsls	r3, r0
   12262:	4699      	mov	r9, r3
   12264:	0013      	movs	r3, r2
   12266:	4648      	mov	r0, r9
   12268:	40eb      	lsrs	r3, r5
   1226a:	4318      	orrs	r0, r3
   1226c:	0003      	movs	r3, r0
   1226e:	4650      	mov	r0, sl
   12270:	4082      	lsls	r2, r0
   12272:	1e50      	subs	r0, r2, #1
   12274:	4182      	sbcs	r2, r0
   12276:	40e9      	lsrs	r1, r5
   12278:	431a      	orrs	r2, r3
   1227a:	1aba      	subs	r2, r7, r2
   1227c:	1a61      	subs	r1, r4, r1
   1227e:	4297      	cmp	r7, r2
   12280:	41a4      	sbcs	r4, r4
   12282:	0017      	movs	r7, r2
   12284:	4264      	negs	r4, r4
   12286:	1b0c      	subs	r4, r1, r4
   12288:	0223      	lsls	r3, r4, #8
   1228a:	d562      	bpl.n	12352 <__aeabi_dadd+0x17a>
   1228c:	0264      	lsls	r4, r4, #9
   1228e:	0a65      	lsrs	r5, r4, #9
   12290:	2d00      	cmp	r5, #0
   12292:	d100      	bne.n	12296 <__aeabi_dadd+0xbe>
   12294:	e0df      	b.n	12456 <__aeabi_dadd+0x27e>
   12296:	0028      	movs	r0, r5
   12298:	f001 fc36 	bl	13b08 <__clzsi2>
   1229c:	0003      	movs	r3, r0
   1229e:	3b08      	subs	r3, #8
   122a0:	2b1f      	cmp	r3, #31
   122a2:	dd00      	ble.n	122a6 <__aeabi_dadd+0xce>
   122a4:	e0d2      	b.n	1244c <__aeabi_dadd+0x274>
   122a6:	2220      	movs	r2, #32
   122a8:	003c      	movs	r4, r7
   122aa:	1ad2      	subs	r2, r2, r3
   122ac:	409d      	lsls	r5, r3
   122ae:	40d4      	lsrs	r4, r2
   122b0:	409f      	lsls	r7, r3
   122b2:	4325      	orrs	r5, r4
   122b4:	429e      	cmp	r6, r3
   122b6:	dd00      	ble.n	122ba <__aeabi_dadd+0xe2>
   122b8:	e0c4      	b.n	12444 <__aeabi_dadd+0x26c>
   122ba:	1b9e      	subs	r6, r3, r6
   122bc:	1c73      	adds	r3, r6, #1
   122be:	2b1f      	cmp	r3, #31
   122c0:	dd00      	ble.n	122c4 <__aeabi_dadd+0xec>
   122c2:	e0f1      	b.n	124a8 <__aeabi_dadd+0x2d0>
   122c4:	2220      	movs	r2, #32
   122c6:	0038      	movs	r0, r7
   122c8:	0029      	movs	r1, r5
   122ca:	1ad2      	subs	r2, r2, r3
   122cc:	40d8      	lsrs	r0, r3
   122ce:	4091      	lsls	r1, r2
   122d0:	4097      	lsls	r7, r2
   122d2:	002c      	movs	r4, r5
   122d4:	4301      	orrs	r1, r0
   122d6:	1e78      	subs	r0, r7, #1
   122d8:	4187      	sbcs	r7, r0
   122da:	40dc      	lsrs	r4, r3
   122dc:	2600      	movs	r6, #0
   122de:	430f      	orrs	r7, r1
   122e0:	077b      	lsls	r3, r7, #29
   122e2:	d009      	beq.n	122f8 <__aeabi_dadd+0x120>
   122e4:	230f      	movs	r3, #15
   122e6:	403b      	ands	r3, r7
   122e8:	2b04      	cmp	r3, #4
   122ea:	d005      	beq.n	122f8 <__aeabi_dadd+0x120>
   122ec:	1d3b      	adds	r3, r7, #4
   122ee:	42bb      	cmp	r3, r7
   122f0:	41bf      	sbcs	r7, r7
   122f2:	427f      	negs	r7, r7
   122f4:	19e4      	adds	r4, r4, r7
   122f6:	001f      	movs	r7, r3
   122f8:	0223      	lsls	r3, r4, #8
   122fa:	d52c      	bpl.n	12356 <__aeabi_dadd+0x17e>
   122fc:	4b96      	ldr	r3, [pc, #600]	; (12558 <__aeabi_dadd+0x380>)
   122fe:	3601      	adds	r6, #1
   12300:	429e      	cmp	r6, r3
   12302:	d100      	bne.n	12306 <__aeabi_dadd+0x12e>
   12304:	e09a      	b.n	1243c <__aeabi_dadd+0x264>
   12306:	4645      	mov	r5, r8
   12308:	4b94      	ldr	r3, [pc, #592]	; (1255c <__aeabi_dadd+0x384>)
   1230a:	08ff      	lsrs	r7, r7, #3
   1230c:	401c      	ands	r4, r3
   1230e:	0760      	lsls	r0, r4, #29
   12310:	0576      	lsls	r6, r6, #21
   12312:	0264      	lsls	r4, r4, #9
   12314:	4307      	orrs	r7, r0
   12316:	0b24      	lsrs	r4, r4, #12
   12318:	0d76      	lsrs	r6, r6, #21
   1231a:	2100      	movs	r1, #0
   1231c:	0324      	lsls	r4, r4, #12
   1231e:	0b23      	lsrs	r3, r4, #12
   12320:	0d0c      	lsrs	r4, r1, #20
   12322:	4a8f      	ldr	r2, [pc, #572]	; (12560 <__aeabi_dadd+0x388>)
   12324:	0524      	lsls	r4, r4, #20
   12326:	431c      	orrs	r4, r3
   12328:	4014      	ands	r4, r2
   1232a:	0533      	lsls	r3, r6, #20
   1232c:	4323      	orrs	r3, r4
   1232e:	005b      	lsls	r3, r3, #1
   12330:	07ed      	lsls	r5, r5, #31
   12332:	085b      	lsrs	r3, r3, #1
   12334:	432b      	orrs	r3, r5
   12336:	0038      	movs	r0, r7
   12338:	0019      	movs	r1, r3
   1233a:	bc3c      	pop	{r2, r3, r4, r5}
   1233c:	4690      	mov	r8, r2
   1233e:	4699      	mov	r9, r3
   12340:	46a2      	mov	sl, r4
   12342:	46ab      	mov	fp, r5
   12344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12346:	4664      	mov	r4, ip
   12348:	4304      	orrs	r4, r0
   1234a:	d100      	bne.n	1234e <__aeabi_dadd+0x176>
   1234c:	e211      	b.n	12772 <__aeabi_dadd+0x59a>
   1234e:	0004      	movs	r4, r0
   12350:	4667      	mov	r7, ip
   12352:	077b      	lsls	r3, r7, #29
   12354:	d1c6      	bne.n	122e4 <__aeabi_dadd+0x10c>
   12356:	4645      	mov	r5, r8
   12358:	0760      	lsls	r0, r4, #29
   1235a:	08ff      	lsrs	r7, r7, #3
   1235c:	4307      	orrs	r7, r0
   1235e:	08e4      	lsrs	r4, r4, #3
   12360:	4b7d      	ldr	r3, [pc, #500]	; (12558 <__aeabi_dadd+0x380>)
   12362:	429e      	cmp	r6, r3
   12364:	d030      	beq.n	123c8 <__aeabi_dadd+0x1f0>
   12366:	0324      	lsls	r4, r4, #12
   12368:	0576      	lsls	r6, r6, #21
   1236a:	0b24      	lsrs	r4, r4, #12
   1236c:	0d76      	lsrs	r6, r6, #21
   1236e:	e7d4      	b.n	1231a <__aeabi_dadd+0x142>
   12370:	1a33      	subs	r3, r6, r0
   12372:	469a      	mov	sl, r3
   12374:	2b00      	cmp	r3, #0
   12376:	dd78      	ble.n	1246a <__aeabi_dadd+0x292>
   12378:	2800      	cmp	r0, #0
   1237a:	d031      	beq.n	123e0 <__aeabi_dadd+0x208>
   1237c:	4876      	ldr	r0, [pc, #472]	; (12558 <__aeabi_dadd+0x380>)
   1237e:	4286      	cmp	r6, r0
   12380:	d0ae      	beq.n	122e0 <__aeabi_dadd+0x108>
   12382:	2080      	movs	r0, #128	; 0x80
   12384:	0400      	lsls	r0, r0, #16
   12386:	4301      	orrs	r1, r0
   12388:	4653      	mov	r3, sl
   1238a:	2b38      	cmp	r3, #56	; 0x38
   1238c:	dc00      	bgt.n	12390 <__aeabi_dadd+0x1b8>
   1238e:	e0e9      	b.n	12564 <__aeabi_dadd+0x38c>
   12390:	430a      	orrs	r2, r1
   12392:	1e51      	subs	r1, r2, #1
   12394:	418a      	sbcs	r2, r1
   12396:	2100      	movs	r1, #0
   12398:	19d2      	adds	r2, r2, r7
   1239a:	42ba      	cmp	r2, r7
   1239c:	41bf      	sbcs	r7, r7
   1239e:	1909      	adds	r1, r1, r4
   123a0:	427c      	negs	r4, r7
   123a2:	0017      	movs	r7, r2
   123a4:	190c      	adds	r4, r1, r4
   123a6:	0223      	lsls	r3, r4, #8
   123a8:	d5d3      	bpl.n	12352 <__aeabi_dadd+0x17a>
   123aa:	4b6b      	ldr	r3, [pc, #428]	; (12558 <__aeabi_dadd+0x380>)
   123ac:	3601      	adds	r6, #1
   123ae:	429e      	cmp	r6, r3
   123b0:	d100      	bne.n	123b4 <__aeabi_dadd+0x1dc>
   123b2:	e13a      	b.n	1262a <__aeabi_dadd+0x452>
   123b4:	2001      	movs	r0, #1
   123b6:	4b69      	ldr	r3, [pc, #420]	; (1255c <__aeabi_dadd+0x384>)
   123b8:	401c      	ands	r4, r3
   123ba:	087b      	lsrs	r3, r7, #1
   123bc:	4007      	ands	r7, r0
   123be:	431f      	orrs	r7, r3
   123c0:	07e0      	lsls	r0, r4, #31
   123c2:	4307      	orrs	r7, r0
   123c4:	0864      	lsrs	r4, r4, #1
   123c6:	e78b      	b.n	122e0 <__aeabi_dadd+0x108>
   123c8:	0023      	movs	r3, r4
   123ca:	433b      	orrs	r3, r7
   123cc:	d100      	bne.n	123d0 <__aeabi_dadd+0x1f8>
   123ce:	e1cb      	b.n	12768 <__aeabi_dadd+0x590>
   123d0:	2280      	movs	r2, #128	; 0x80
   123d2:	0312      	lsls	r2, r2, #12
   123d4:	4314      	orrs	r4, r2
   123d6:	0324      	lsls	r4, r4, #12
   123d8:	0b24      	lsrs	r4, r4, #12
   123da:	e79e      	b.n	1231a <__aeabi_dadd+0x142>
   123dc:	002e      	movs	r6, r5
   123de:	e77f      	b.n	122e0 <__aeabi_dadd+0x108>
   123e0:	0008      	movs	r0, r1
   123e2:	4310      	orrs	r0, r2
   123e4:	d100      	bne.n	123e8 <__aeabi_dadd+0x210>
   123e6:	e0b4      	b.n	12552 <__aeabi_dadd+0x37a>
   123e8:	1e58      	subs	r0, r3, #1
   123ea:	2800      	cmp	r0, #0
   123ec:	d000      	beq.n	123f0 <__aeabi_dadd+0x218>
   123ee:	e0de      	b.n	125ae <__aeabi_dadd+0x3d6>
   123f0:	18ba      	adds	r2, r7, r2
   123f2:	42ba      	cmp	r2, r7
   123f4:	419b      	sbcs	r3, r3
   123f6:	1864      	adds	r4, r4, r1
   123f8:	425b      	negs	r3, r3
   123fa:	18e4      	adds	r4, r4, r3
   123fc:	0017      	movs	r7, r2
   123fe:	2601      	movs	r6, #1
   12400:	0223      	lsls	r3, r4, #8
   12402:	d5a6      	bpl.n	12352 <__aeabi_dadd+0x17a>
   12404:	2602      	movs	r6, #2
   12406:	e7d5      	b.n	123b4 <__aeabi_dadd+0x1dc>
   12408:	2d00      	cmp	r5, #0
   1240a:	d16e      	bne.n	124ea <__aeabi_dadd+0x312>
   1240c:	1c70      	adds	r0, r6, #1
   1240e:	0540      	lsls	r0, r0, #21
   12410:	0d40      	lsrs	r0, r0, #21
   12412:	2801      	cmp	r0, #1
   12414:	dc00      	bgt.n	12418 <__aeabi_dadd+0x240>
   12416:	e0f9      	b.n	1260c <__aeabi_dadd+0x434>
   12418:	1ab8      	subs	r0, r7, r2
   1241a:	4684      	mov	ip, r0
   1241c:	4287      	cmp	r7, r0
   1241e:	4180      	sbcs	r0, r0
   12420:	1ae5      	subs	r5, r4, r3
   12422:	4240      	negs	r0, r0
   12424:	1a2d      	subs	r5, r5, r0
   12426:	0228      	lsls	r0, r5, #8
   12428:	d400      	bmi.n	1242c <__aeabi_dadd+0x254>
   1242a:	e089      	b.n	12540 <__aeabi_dadd+0x368>
   1242c:	1bd7      	subs	r7, r2, r7
   1242e:	42ba      	cmp	r2, r7
   12430:	4192      	sbcs	r2, r2
   12432:	1b1c      	subs	r4, r3, r4
   12434:	4252      	negs	r2, r2
   12436:	1aa5      	subs	r5, r4, r2
   12438:	46d8      	mov	r8, fp
   1243a:	e729      	b.n	12290 <__aeabi_dadd+0xb8>
   1243c:	4645      	mov	r5, r8
   1243e:	2400      	movs	r4, #0
   12440:	2700      	movs	r7, #0
   12442:	e76a      	b.n	1231a <__aeabi_dadd+0x142>
   12444:	4c45      	ldr	r4, [pc, #276]	; (1255c <__aeabi_dadd+0x384>)
   12446:	1af6      	subs	r6, r6, r3
   12448:	402c      	ands	r4, r5
   1244a:	e749      	b.n	122e0 <__aeabi_dadd+0x108>
   1244c:	003d      	movs	r5, r7
   1244e:	3828      	subs	r0, #40	; 0x28
   12450:	4085      	lsls	r5, r0
   12452:	2700      	movs	r7, #0
   12454:	e72e      	b.n	122b4 <__aeabi_dadd+0xdc>
   12456:	0038      	movs	r0, r7
   12458:	f001 fb56 	bl	13b08 <__clzsi2>
   1245c:	3020      	adds	r0, #32
   1245e:	e71d      	b.n	1229c <__aeabi_dadd+0xc4>
   12460:	430a      	orrs	r2, r1
   12462:	1e51      	subs	r1, r2, #1
   12464:	418a      	sbcs	r2, r1
   12466:	2100      	movs	r1, #0
   12468:	e707      	b.n	1227a <__aeabi_dadd+0xa2>
   1246a:	2b00      	cmp	r3, #0
   1246c:	d000      	beq.n	12470 <__aeabi_dadd+0x298>
   1246e:	e0f3      	b.n	12658 <__aeabi_dadd+0x480>
   12470:	1c70      	adds	r0, r6, #1
   12472:	0543      	lsls	r3, r0, #21
   12474:	0d5b      	lsrs	r3, r3, #21
   12476:	2b01      	cmp	r3, #1
   12478:	dc00      	bgt.n	1247c <__aeabi_dadd+0x2a4>
   1247a:	e0ad      	b.n	125d8 <__aeabi_dadd+0x400>
   1247c:	4b36      	ldr	r3, [pc, #216]	; (12558 <__aeabi_dadd+0x380>)
   1247e:	4298      	cmp	r0, r3
   12480:	d100      	bne.n	12484 <__aeabi_dadd+0x2ac>
   12482:	e0d1      	b.n	12628 <__aeabi_dadd+0x450>
   12484:	18ba      	adds	r2, r7, r2
   12486:	42ba      	cmp	r2, r7
   12488:	41bf      	sbcs	r7, r7
   1248a:	1864      	adds	r4, r4, r1
   1248c:	427f      	negs	r7, r7
   1248e:	19e4      	adds	r4, r4, r7
   12490:	07e7      	lsls	r7, r4, #31
   12492:	0852      	lsrs	r2, r2, #1
   12494:	4317      	orrs	r7, r2
   12496:	0864      	lsrs	r4, r4, #1
   12498:	0006      	movs	r6, r0
   1249a:	e721      	b.n	122e0 <__aeabi_dadd+0x108>
   1249c:	482e      	ldr	r0, [pc, #184]	; (12558 <__aeabi_dadd+0x380>)
   1249e:	4285      	cmp	r5, r0
   124a0:	d100      	bne.n	124a4 <__aeabi_dadd+0x2cc>
   124a2:	e093      	b.n	125cc <__aeabi_dadd+0x3f4>
   124a4:	001d      	movs	r5, r3
   124a6:	e6d0      	b.n	1224a <__aeabi_dadd+0x72>
   124a8:	0029      	movs	r1, r5
   124aa:	3e1f      	subs	r6, #31
   124ac:	40f1      	lsrs	r1, r6
   124ae:	2b20      	cmp	r3, #32
   124b0:	d100      	bne.n	124b4 <__aeabi_dadd+0x2dc>
   124b2:	e08d      	b.n	125d0 <__aeabi_dadd+0x3f8>
   124b4:	2240      	movs	r2, #64	; 0x40
   124b6:	1ad3      	subs	r3, r2, r3
   124b8:	409d      	lsls	r5, r3
   124ba:	432f      	orrs	r7, r5
   124bc:	1e7d      	subs	r5, r7, #1
   124be:	41af      	sbcs	r7, r5
   124c0:	2400      	movs	r4, #0
   124c2:	430f      	orrs	r7, r1
   124c4:	2600      	movs	r6, #0
   124c6:	e744      	b.n	12352 <__aeabi_dadd+0x17a>
   124c8:	002b      	movs	r3, r5
   124ca:	0008      	movs	r0, r1
   124cc:	3b20      	subs	r3, #32
   124ce:	40d8      	lsrs	r0, r3
   124d0:	0003      	movs	r3, r0
   124d2:	2d20      	cmp	r5, #32
   124d4:	d100      	bne.n	124d8 <__aeabi_dadd+0x300>
   124d6:	e07d      	b.n	125d4 <__aeabi_dadd+0x3fc>
   124d8:	2040      	movs	r0, #64	; 0x40
   124da:	1b45      	subs	r5, r0, r5
   124dc:	40a9      	lsls	r1, r5
   124de:	430a      	orrs	r2, r1
   124e0:	1e51      	subs	r1, r2, #1
   124e2:	418a      	sbcs	r2, r1
   124e4:	2100      	movs	r1, #0
   124e6:	431a      	orrs	r2, r3
   124e8:	e6c7      	b.n	1227a <__aeabi_dadd+0xa2>
   124ea:	2e00      	cmp	r6, #0
   124ec:	d050      	beq.n	12590 <__aeabi_dadd+0x3b8>
   124ee:	4e1a      	ldr	r6, [pc, #104]	; (12558 <__aeabi_dadd+0x380>)
   124f0:	42b0      	cmp	r0, r6
   124f2:	d057      	beq.n	125a4 <__aeabi_dadd+0x3cc>
   124f4:	2680      	movs	r6, #128	; 0x80
   124f6:	426b      	negs	r3, r5
   124f8:	4699      	mov	r9, r3
   124fa:	0436      	lsls	r6, r6, #16
   124fc:	4334      	orrs	r4, r6
   124fe:	464b      	mov	r3, r9
   12500:	2b38      	cmp	r3, #56	; 0x38
   12502:	dd00      	ble.n	12506 <__aeabi_dadd+0x32e>
   12504:	e0d6      	b.n	126b4 <__aeabi_dadd+0x4dc>
   12506:	2b1f      	cmp	r3, #31
   12508:	dd00      	ble.n	1250c <__aeabi_dadd+0x334>
   1250a:	e135      	b.n	12778 <__aeabi_dadd+0x5a0>
   1250c:	2620      	movs	r6, #32
   1250e:	1af5      	subs	r5, r6, r3
   12510:	0026      	movs	r6, r4
   12512:	40ae      	lsls	r6, r5
   12514:	46b2      	mov	sl, r6
   12516:	003e      	movs	r6, r7
   12518:	40de      	lsrs	r6, r3
   1251a:	46ac      	mov	ip, r5
   1251c:	0035      	movs	r5, r6
   1251e:	4656      	mov	r6, sl
   12520:	432e      	orrs	r6, r5
   12522:	4665      	mov	r5, ip
   12524:	40af      	lsls	r7, r5
   12526:	1e7d      	subs	r5, r7, #1
   12528:	41af      	sbcs	r7, r5
   1252a:	40dc      	lsrs	r4, r3
   1252c:	4337      	orrs	r7, r6
   1252e:	1bd7      	subs	r7, r2, r7
   12530:	42ba      	cmp	r2, r7
   12532:	4192      	sbcs	r2, r2
   12534:	1b0c      	subs	r4, r1, r4
   12536:	4252      	negs	r2, r2
   12538:	1aa4      	subs	r4, r4, r2
   1253a:	0006      	movs	r6, r0
   1253c:	46d8      	mov	r8, fp
   1253e:	e6a3      	b.n	12288 <__aeabi_dadd+0xb0>
   12540:	4664      	mov	r4, ip
   12542:	4667      	mov	r7, ip
   12544:	432c      	orrs	r4, r5
   12546:	d000      	beq.n	1254a <__aeabi_dadd+0x372>
   12548:	e6a2      	b.n	12290 <__aeabi_dadd+0xb8>
   1254a:	2500      	movs	r5, #0
   1254c:	2600      	movs	r6, #0
   1254e:	2700      	movs	r7, #0
   12550:	e706      	b.n	12360 <__aeabi_dadd+0x188>
   12552:	001e      	movs	r6, r3
   12554:	e6c4      	b.n	122e0 <__aeabi_dadd+0x108>
   12556:	46c0      	nop			; (mov r8, r8)
   12558:	000007ff 	.word	0x000007ff
   1255c:	ff7fffff 	.word	0xff7fffff
   12560:	800fffff 	.word	0x800fffff
   12564:	2b1f      	cmp	r3, #31
   12566:	dc63      	bgt.n	12630 <__aeabi_dadd+0x458>
   12568:	2020      	movs	r0, #32
   1256a:	1ac3      	subs	r3, r0, r3
   1256c:	0008      	movs	r0, r1
   1256e:	4098      	lsls	r0, r3
   12570:	469c      	mov	ip, r3
   12572:	4683      	mov	fp, r0
   12574:	4653      	mov	r3, sl
   12576:	0010      	movs	r0, r2
   12578:	40d8      	lsrs	r0, r3
   1257a:	0003      	movs	r3, r0
   1257c:	4658      	mov	r0, fp
   1257e:	4318      	orrs	r0, r3
   12580:	4663      	mov	r3, ip
   12582:	409a      	lsls	r2, r3
   12584:	1e53      	subs	r3, r2, #1
   12586:	419a      	sbcs	r2, r3
   12588:	4653      	mov	r3, sl
   1258a:	4302      	orrs	r2, r0
   1258c:	40d9      	lsrs	r1, r3
   1258e:	e703      	b.n	12398 <__aeabi_dadd+0x1c0>
   12590:	0026      	movs	r6, r4
   12592:	433e      	orrs	r6, r7
   12594:	d006      	beq.n	125a4 <__aeabi_dadd+0x3cc>
   12596:	43eb      	mvns	r3, r5
   12598:	4699      	mov	r9, r3
   1259a:	2b00      	cmp	r3, #0
   1259c:	d0c7      	beq.n	1252e <__aeabi_dadd+0x356>
   1259e:	4e94      	ldr	r6, [pc, #592]	; (127f0 <__aeabi_dadd+0x618>)
   125a0:	42b0      	cmp	r0, r6
   125a2:	d1ac      	bne.n	124fe <__aeabi_dadd+0x326>
   125a4:	000c      	movs	r4, r1
   125a6:	0017      	movs	r7, r2
   125a8:	0006      	movs	r6, r0
   125aa:	46d8      	mov	r8, fp
   125ac:	e698      	b.n	122e0 <__aeabi_dadd+0x108>
   125ae:	4b90      	ldr	r3, [pc, #576]	; (127f0 <__aeabi_dadd+0x618>)
   125b0:	459a      	cmp	sl, r3
   125b2:	d00b      	beq.n	125cc <__aeabi_dadd+0x3f4>
   125b4:	4682      	mov	sl, r0
   125b6:	e6e7      	b.n	12388 <__aeabi_dadd+0x1b0>
   125b8:	2800      	cmp	r0, #0
   125ba:	d000      	beq.n	125be <__aeabi_dadd+0x3e6>
   125bc:	e09e      	b.n	126fc <__aeabi_dadd+0x524>
   125be:	0018      	movs	r0, r3
   125c0:	4310      	orrs	r0, r2
   125c2:	d100      	bne.n	125c6 <__aeabi_dadd+0x3ee>
   125c4:	e0e9      	b.n	1279a <__aeabi_dadd+0x5c2>
   125c6:	001c      	movs	r4, r3
   125c8:	0017      	movs	r7, r2
   125ca:	46d8      	mov	r8, fp
   125cc:	4e88      	ldr	r6, [pc, #544]	; (127f0 <__aeabi_dadd+0x618>)
   125ce:	e687      	b.n	122e0 <__aeabi_dadd+0x108>
   125d0:	2500      	movs	r5, #0
   125d2:	e772      	b.n	124ba <__aeabi_dadd+0x2e2>
   125d4:	2100      	movs	r1, #0
   125d6:	e782      	b.n	124de <__aeabi_dadd+0x306>
   125d8:	0023      	movs	r3, r4
   125da:	433b      	orrs	r3, r7
   125dc:	2e00      	cmp	r6, #0
   125de:	d000      	beq.n	125e2 <__aeabi_dadd+0x40a>
   125e0:	e0ab      	b.n	1273a <__aeabi_dadd+0x562>
   125e2:	2b00      	cmp	r3, #0
   125e4:	d100      	bne.n	125e8 <__aeabi_dadd+0x410>
   125e6:	e0e7      	b.n	127b8 <__aeabi_dadd+0x5e0>
   125e8:	000b      	movs	r3, r1
   125ea:	4313      	orrs	r3, r2
   125ec:	d100      	bne.n	125f0 <__aeabi_dadd+0x418>
   125ee:	e677      	b.n	122e0 <__aeabi_dadd+0x108>
   125f0:	18ba      	adds	r2, r7, r2
   125f2:	42ba      	cmp	r2, r7
   125f4:	41bf      	sbcs	r7, r7
   125f6:	1864      	adds	r4, r4, r1
   125f8:	427f      	negs	r7, r7
   125fa:	19e4      	adds	r4, r4, r7
   125fc:	0223      	lsls	r3, r4, #8
   125fe:	d400      	bmi.n	12602 <__aeabi_dadd+0x42a>
   12600:	e0f2      	b.n	127e8 <__aeabi_dadd+0x610>
   12602:	4b7c      	ldr	r3, [pc, #496]	; (127f4 <__aeabi_dadd+0x61c>)
   12604:	0017      	movs	r7, r2
   12606:	401c      	ands	r4, r3
   12608:	0006      	movs	r6, r0
   1260a:	e669      	b.n	122e0 <__aeabi_dadd+0x108>
   1260c:	0020      	movs	r0, r4
   1260e:	4338      	orrs	r0, r7
   12610:	2e00      	cmp	r6, #0
   12612:	d1d1      	bne.n	125b8 <__aeabi_dadd+0x3e0>
   12614:	2800      	cmp	r0, #0
   12616:	d15b      	bne.n	126d0 <__aeabi_dadd+0x4f8>
   12618:	001c      	movs	r4, r3
   1261a:	4314      	orrs	r4, r2
   1261c:	d100      	bne.n	12620 <__aeabi_dadd+0x448>
   1261e:	e0a8      	b.n	12772 <__aeabi_dadd+0x59a>
   12620:	001c      	movs	r4, r3
   12622:	0017      	movs	r7, r2
   12624:	46d8      	mov	r8, fp
   12626:	e65b      	b.n	122e0 <__aeabi_dadd+0x108>
   12628:	0006      	movs	r6, r0
   1262a:	2400      	movs	r4, #0
   1262c:	2700      	movs	r7, #0
   1262e:	e697      	b.n	12360 <__aeabi_dadd+0x188>
   12630:	4650      	mov	r0, sl
   12632:	000b      	movs	r3, r1
   12634:	3820      	subs	r0, #32
   12636:	40c3      	lsrs	r3, r0
   12638:	4699      	mov	r9, r3
   1263a:	4653      	mov	r3, sl
   1263c:	2b20      	cmp	r3, #32
   1263e:	d100      	bne.n	12642 <__aeabi_dadd+0x46a>
   12640:	e095      	b.n	1276e <__aeabi_dadd+0x596>
   12642:	2340      	movs	r3, #64	; 0x40
   12644:	4650      	mov	r0, sl
   12646:	1a1b      	subs	r3, r3, r0
   12648:	4099      	lsls	r1, r3
   1264a:	430a      	orrs	r2, r1
   1264c:	1e51      	subs	r1, r2, #1
   1264e:	418a      	sbcs	r2, r1
   12650:	464b      	mov	r3, r9
   12652:	2100      	movs	r1, #0
   12654:	431a      	orrs	r2, r3
   12656:	e69f      	b.n	12398 <__aeabi_dadd+0x1c0>
   12658:	2e00      	cmp	r6, #0
   1265a:	d130      	bne.n	126be <__aeabi_dadd+0x4e6>
   1265c:	0026      	movs	r6, r4
   1265e:	433e      	orrs	r6, r7
   12660:	d067      	beq.n	12732 <__aeabi_dadd+0x55a>
   12662:	43db      	mvns	r3, r3
   12664:	469a      	mov	sl, r3
   12666:	2b00      	cmp	r3, #0
   12668:	d01c      	beq.n	126a4 <__aeabi_dadd+0x4cc>
   1266a:	4e61      	ldr	r6, [pc, #388]	; (127f0 <__aeabi_dadd+0x618>)
   1266c:	42b0      	cmp	r0, r6
   1266e:	d060      	beq.n	12732 <__aeabi_dadd+0x55a>
   12670:	4653      	mov	r3, sl
   12672:	2b38      	cmp	r3, #56	; 0x38
   12674:	dd00      	ble.n	12678 <__aeabi_dadd+0x4a0>
   12676:	e096      	b.n	127a6 <__aeabi_dadd+0x5ce>
   12678:	2b1f      	cmp	r3, #31
   1267a:	dd00      	ble.n	1267e <__aeabi_dadd+0x4a6>
   1267c:	e09f      	b.n	127be <__aeabi_dadd+0x5e6>
   1267e:	2620      	movs	r6, #32
   12680:	1af3      	subs	r3, r6, r3
   12682:	0026      	movs	r6, r4
   12684:	409e      	lsls	r6, r3
   12686:	469c      	mov	ip, r3
   12688:	46b3      	mov	fp, r6
   1268a:	4653      	mov	r3, sl
   1268c:	003e      	movs	r6, r7
   1268e:	40de      	lsrs	r6, r3
   12690:	0033      	movs	r3, r6
   12692:	465e      	mov	r6, fp
   12694:	431e      	orrs	r6, r3
   12696:	4663      	mov	r3, ip
   12698:	409f      	lsls	r7, r3
   1269a:	1e7b      	subs	r3, r7, #1
   1269c:	419f      	sbcs	r7, r3
   1269e:	4653      	mov	r3, sl
   126a0:	40dc      	lsrs	r4, r3
   126a2:	4337      	orrs	r7, r6
   126a4:	18bf      	adds	r7, r7, r2
   126a6:	4297      	cmp	r7, r2
   126a8:	4192      	sbcs	r2, r2
   126aa:	1864      	adds	r4, r4, r1
   126ac:	4252      	negs	r2, r2
   126ae:	18a4      	adds	r4, r4, r2
   126b0:	0006      	movs	r6, r0
   126b2:	e678      	b.n	123a6 <__aeabi_dadd+0x1ce>
   126b4:	4327      	orrs	r7, r4
   126b6:	1e7c      	subs	r4, r7, #1
   126b8:	41a7      	sbcs	r7, r4
   126ba:	2400      	movs	r4, #0
   126bc:	e737      	b.n	1252e <__aeabi_dadd+0x356>
   126be:	4e4c      	ldr	r6, [pc, #304]	; (127f0 <__aeabi_dadd+0x618>)
   126c0:	42b0      	cmp	r0, r6
   126c2:	d036      	beq.n	12732 <__aeabi_dadd+0x55a>
   126c4:	2680      	movs	r6, #128	; 0x80
   126c6:	425b      	negs	r3, r3
   126c8:	0436      	lsls	r6, r6, #16
   126ca:	469a      	mov	sl, r3
   126cc:	4334      	orrs	r4, r6
   126ce:	e7cf      	b.n	12670 <__aeabi_dadd+0x498>
   126d0:	0018      	movs	r0, r3
   126d2:	4310      	orrs	r0, r2
   126d4:	d100      	bne.n	126d8 <__aeabi_dadd+0x500>
   126d6:	e603      	b.n	122e0 <__aeabi_dadd+0x108>
   126d8:	1ab8      	subs	r0, r7, r2
   126da:	4684      	mov	ip, r0
   126dc:	4567      	cmp	r7, ip
   126de:	41ad      	sbcs	r5, r5
   126e0:	1ae0      	subs	r0, r4, r3
   126e2:	426d      	negs	r5, r5
   126e4:	1b40      	subs	r0, r0, r5
   126e6:	0205      	lsls	r5, r0, #8
   126e8:	d400      	bmi.n	126ec <__aeabi_dadd+0x514>
   126ea:	e62c      	b.n	12346 <__aeabi_dadd+0x16e>
   126ec:	1bd7      	subs	r7, r2, r7
   126ee:	42ba      	cmp	r2, r7
   126f0:	4192      	sbcs	r2, r2
   126f2:	1b1c      	subs	r4, r3, r4
   126f4:	4252      	negs	r2, r2
   126f6:	1aa4      	subs	r4, r4, r2
   126f8:	46d8      	mov	r8, fp
   126fa:	e5f1      	b.n	122e0 <__aeabi_dadd+0x108>
   126fc:	0018      	movs	r0, r3
   126fe:	4310      	orrs	r0, r2
   12700:	d100      	bne.n	12704 <__aeabi_dadd+0x52c>
   12702:	e763      	b.n	125cc <__aeabi_dadd+0x3f4>
   12704:	08f8      	lsrs	r0, r7, #3
   12706:	0767      	lsls	r7, r4, #29
   12708:	4307      	orrs	r7, r0
   1270a:	2080      	movs	r0, #128	; 0x80
   1270c:	08e4      	lsrs	r4, r4, #3
   1270e:	0300      	lsls	r0, r0, #12
   12710:	4204      	tst	r4, r0
   12712:	d008      	beq.n	12726 <__aeabi_dadd+0x54e>
   12714:	08dd      	lsrs	r5, r3, #3
   12716:	4205      	tst	r5, r0
   12718:	d105      	bne.n	12726 <__aeabi_dadd+0x54e>
   1271a:	08d2      	lsrs	r2, r2, #3
   1271c:	0759      	lsls	r1, r3, #29
   1271e:	4311      	orrs	r1, r2
   12720:	000f      	movs	r7, r1
   12722:	002c      	movs	r4, r5
   12724:	46d8      	mov	r8, fp
   12726:	0f7b      	lsrs	r3, r7, #29
   12728:	00e4      	lsls	r4, r4, #3
   1272a:	431c      	orrs	r4, r3
   1272c:	00ff      	lsls	r7, r7, #3
   1272e:	4e30      	ldr	r6, [pc, #192]	; (127f0 <__aeabi_dadd+0x618>)
   12730:	e5d6      	b.n	122e0 <__aeabi_dadd+0x108>
   12732:	000c      	movs	r4, r1
   12734:	0017      	movs	r7, r2
   12736:	0006      	movs	r6, r0
   12738:	e5d2      	b.n	122e0 <__aeabi_dadd+0x108>
   1273a:	2b00      	cmp	r3, #0
   1273c:	d038      	beq.n	127b0 <__aeabi_dadd+0x5d8>
   1273e:	000b      	movs	r3, r1
   12740:	4313      	orrs	r3, r2
   12742:	d100      	bne.n	12746 <__aeabi_dadd+0x56e>
   12744:	e742      	b.n	125cc <__aeabi_dadd+0x3f4>
   12746:	08f8      	lsrs	r0, r7, #3
   12748:	0767      	lsls	r7, r4, #29
   1274a:	4307      	orrs	r7, r0
   1274c:	2080      	movs	r0, #128	; 0x80
   1274e:	08e4      	lsrs	r4, r4, #3
   12750:	0300      	lsls	r0, r0, #12
   12752:	4204      	tst	r4, r0
   12754:	d0e7      	beq.n	12726 <__aeabi_dadd+0x54e>
   12756:	08cb      	lsrs	r3, r1, #3
   12758:	4203      	tst	r3, r0
   1275a:	d1e4      	bne.n	12726 <__aeabi_dadd+0x54e>
   1275c:	08d2      	lsrs	r2, r2, #3
   1275e:	0749      	lsls	r1, r1, #29
   12760:	4311      	orrs	r1, r2
   12762:	000f      	movs	r7, r1
   12764:	001c      	movs	r4, r3
   12766:	e7de      	b.n	12726 <__aeabi_dadd+0x54e>
   12768:	2700      	movs	r7, #0
   1276a:	2400      	movs	r4, #0
   1276c:	e5d5      	b.n	1231a <__aeabi_dadd+0x142>
   1276e:	2100      	movs	r1, #0
   12770:	e76b      	b.n	1264a <__aeabi_dadd+0x472>
   12772:	2500      	movs	r5, #0
   12774:	2700      	movs	r7, #0
   12776:	e5f3      	b.n	12360 <__aeabi_dadd+0x188>
   12778:	464e      	mov	r6, r9
   1277a:	0025      	movs	r5, r4
   1277c:	3e20      	subs	r6, #32
   1277e:	40f5      	lsrs	r5, r6
   12780:	464b      	mov	r3, r9
   12782:	002e      	movs	r6, r5
   12784:	2b20      	cmp	r3, #32
   12786:	d02d      	beq.n	127e4 <__aeabi_dadd+0x60c>
   12788:	2540      	movs	r5, #64	; 0x40
   1278a:	1aed      	subs	r5, r5, r3
   1278c:	40ac      	lsls	r4, r5
   1278e:	4327      	orrs	r7, r4
   12790:	1e7c      	subs	r4, r7, #1
   12792:	41a7      	sbcs	r7, r4
   12794:	2400      	movs	r4, #0
   12796:	4337      	orrs	r7, r6
   12798:	e6c9      	b.n	1252e <__aeabi_dadd+0x356>
   1279a:	2480      	movs	r4, #128	; 0x80
   1279c:	2500      	movs	r5, #0
   1279e:	0324      	lsls	r4, r4, #12
   127a0:	4e13      	ldr	r6, [pc, #76]	; (127f0 <__aeabi_dadd+0x618>)
   127a2:	2700      	movs	r7, #0
   127a4:	e5dc      	b.n	12360 <__aeabi_dadd+0x188>
   127a6:	4327      	orrs	r7, r4
   127a8:	1e7c      	subs	r4, r7, #1
   127aa:	41a7      	sbcs	r7, r4
   127ac:	2400      	movs	r4, #0
   127ae:	e779      	b.n	126a4 <__aeabi_dadd+0x4cc>
   127b0:	000c      	movs	r4, r1
   127b2:	0017      	movs	r7, r2
   127b4:	4e0e      	ldr	r6, [pc, #56]	; (127f0 <__aeabi_dadd+0x618>)
   127b6:	e593      	b.n	122e0 <__aeabi_dadd+0x108>
   127b8:	000c      	movs	r4, r1
   127ba:	0017      	movs	r7, r2
   127bc:	e590      	b.n	122e0 <__aeabi_dadd+0x108>
   127be:	4656      	mov	r6, sl
   127c0:	0023      	movs	r3, r4
   127c2:	3e20      	subs	r6, #32
   127c4:	40f3      	lsrs	r3, r6
   127c6:	4699      	mov	r9, r3
   127c8:	4653      	mov	r3, sl
   127ca:	2b20      	cmp	r3, #32
   127cc:	d00e      	beq.n	127ec <__aeabi_dadd+0x614>
   127ce:	2340      	movs	r3, #64	; 0x40
   127d0:	4656      	mov	r6, sl
   127d2:	1b9b      	subs	r3, r3, r6
   127d4:	409c      	lsls	r4, r3
   127d6:	4327      	orrs	r7, r4
   127d8:	1e7c      	subs	r4, r7, #1
   127da:	41a7      	sbcs	r7, r4
   127dc:	464b      	mov	r3, r9
   127de:	2400      	movs	r4, #0
   127e0:	431f      	orrs	r7, r3
   127e2:	e75f      	b.n	126a4 <__aeabi_dadd+0x4cc>
   127e4:	2400      	movs	r4, #0
   127e6:	e7d2      	b.n	1278e <__aeabi_dadd+0x5b6>
   127e8:	0017      	movs	r7, r2
   127ea:	e5b2      	b.n	12352 <__aeabi_dadd+0x17a>
   127ec:	2400      	movs	r4, #0
   127ee:	e7f2      	b.n	127d6 <__aeabi_dadd+0x5fe>
   127f0:	000007ff 	.word	0x000007ff
   127f4:	ff7fffff 	.word	0xff7fffff

000127f8 <__aeabi_ddiv>:
   127f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   127fa:	4657      	mov	r7, sl
   127fc:	4645      	mov	r5, r8
   127fe:	46de      	mov	lr, fp
   12800:	464e      	mov	r6, r9
   12802:	b5e0      	push	{r5, r6, r7, lr}
   12804:	004c      	lsls	r4, r1, #1
   12806:	030e      	lsls	r6, r1, #12
   12808:	b087      	sub	sp, #28
   1280a:	4683      	mov	fp, r0
   1280c:	4692      	mov	sl, r2
   1280e:	001d      	movs	r5, r3
   12810:	4680      	mov	r8, r0
   12812:	0b36      	lsrs	r6, r6, #12
   12814:	0d64      	lsrs	r4, r4, #21
   12816:	0fcf      	lsrs	r7, r1, #31
   12818:	2c00      	cmp	r4, #0
   1281a:	d04f      	beq.n	128bc <__aeabi_ddiv+0xc4>
   1281c:	4b6f      	ldr	r3, [pc, #444]	; (129dc <__aeabi_ddiv+0x1e4>)
   1281e:	429c      	cmp	r4, r3
   12820:	d035      	beq.n	1288e <__aeabi_ddiv+0x96>
   12822:	2380      	movs	r3, #128	; 0x80
   12824:	0f42      	lsrs	r2, r0, #29
   12826:	041b      	lsls	r3, r3, #16
   12828:	00f6      	lsls	r6, r6, #3
   1282a:	4313      	orrs	r3, r2
   1282c:	4333      	orrs	r3, r6
   1282e:	4699      	mov	r9, r3
   12830:	00c3      	lsls	r3, r0, #3
   12832:	4698      	mov	r8, r3
   12834:	4b6a      	ldr	r3, [pc, #424]	; (129e0 <__aeabi_ddiv+0x1e8>)
   12836:	2600      	movs	r6, #0
   12838:	469c      	mov	ip, r3
   1283a:	2300      	movs	r3, #0
   1283c:	4464      	add	r4, ip
   1283e:	9303      	str	r3, [sp, #12]
   12840:	032b      	lsls	r3, r5, #12
   12842:	0b1b      	lsrs	r3, r3, #12
   12844:	469b      	mov	fp, r3
   12846:	006b      	lsls	r3, r5, #1
   12848:	0fed      	lsrs	r5, r5, #31
   1284a:	4650      	mov	r0, sl
   1284c:	0d5b      	lsrs	r3, r3, #21
   1284e:	9501      	str	r5, [sp, #4]
   12850:	d05e      	beq.n	12910 <__aeabi_ddiv+0x118>
   12852:	4a62      	ldr	r2, [pc, #392]	; (129dc <__aeabi_ddiv+0x1e4>)
   12854:	4293      	cmp	r3, r2
   12856:	d053      	beq.n	12900 <__aeabi_ddiv+0x108>
   12858:	465a      	mov	r2, fp
   1285a:	00d1      	lsls	r1, r2, #3
   1285c:	2280      	movs	r2, #128	; 0x80
   1285e:	0f40      	lsrs	r0, r0, #29
   12860:	0412      	lsls	r2, r2, #16
   12862:	4302      	orrs	r2, r0
   12864:	430a      	orrs	r2, r1
   12866:	4693      	mov	fp, r2
   12868:	4652      	mov	r2, sl
   1286a:	00d1      	lsls	r1, r2, #3
   1286c:	4a5c      	ldr	r2, [pc, #368]	; (129e0 <__aeabi_ddiv+0x1e8>)
   1286e:	4694      	mov	ip, r2
   12870:	2200      	movs	r2, #0
   12872:	4463      	add	r3, ip
   12874:	0038      	movs	r0, r7
   12876:	4068      	eors	r0, r5
   12878:	4684      	mov	ip, r0
   1287a:	9002      	str	r0, [sp, #8]
   1287c:	1ae4      	subs	r4, r4, r3
   1287e:	4316      	orrs	r6, r2
   12880:	2e0f      	cmp	r6, #15
   12882:	d900      	bls.n	12886 <__aeabi_ddiv+0x8e>
   12884:	e0b4      	b.n	129f0 <__aeabi_ddiv+0x1f8>
   12886:	4b57      	ldr	r3, [pc, #348]	; (129e4 <__aeabi_ddiv+0x1ec>)
   12888:	00b6      	lsls	r6, r6, #2
   1288a:	599b      	ldr	r3, [r3, r6]
   1288c:	469f      	mov	pc, r3
   1288e:	0003      	movs	r3, r0
   12890:	4333      	orrs	r3, r6
   12892:	4699      	mov	r9, r3
   12894:	d16c      	bne.n	12970 <__aeabi_ddiv+0x178>
   12896:	2300      	movs	r3, #0
   12898:	4698      	mov	r8, r3
   1289a:	3302      	adds	r3, #2
   1289c:	2608      	movs	r6, #8
   1289e:	9303      	str	r3, [sp, #12]
   128a0:	e7ce      	b.n	12840 <__aeabi_ddiv+0x48>
   128a2:	46cb      	mov	fp, r9
   128a4:	4641      	mov	r1, r8
   128a6:	9a03      	ldr	r2, [sp, #12]
   128a8:	9701      	str	r7, [sp, #4]
   128aa:	2a02      	cmp	r2, #2
   128ac:	d165      	bne.n	1297a <__aeabi_ddiv+0x182>
   128ae:	9b01      	ldr	r3, [sp, #4]
   128b0:	4c4a      	ldr	r4, [pc, #296]	; (129dc <__aeabi_ddiv+0x1e4>)
   128b2:	469c      	mov	ip, r3
   128b4:	2300      	movs	r3, #0
   128b6:	2200      	movs	r2, #0
   128b8:	4698      	mov	r8, r3
   128ba:	e06b      	b.n	12994 <__aeabi_ddiv+0x19c>
   128bc:	0003      	movs	r3, r0
   128be:	4333      	orrs	r3, r6
   128c0:	4699      	mov	r9, r3
   128c2:	d04e      	beq.n	12962 <__aeabi_ddiv+0x16a>
   128c4:	2e00      	cmp	r6, #0
   128c6:	d100      	bne.n	128ca <__aeabi_ddiv+0xd2>
   128c8:	e1bc      	b.n	12c44 <__aeabi_ddiv+0x44c>
   128ca:	0030      	movs	r0, r6
   128cc:	f001 f91c 	bl	13b08 <__clzsi2>
   128d0:	0003      	movs	r3, r0
   128d2:	3b0b      	subs	r3, #11
   128d4:	2b1c      	cmp	r3, #28
   128d6:	dd00      	ble.n	128da <__aeabi_ddiv+0xe2>
   128d8:	e1ac      	b.n	12c34 <__aeabi_ddiv+0x43c>
   128da:	221d      	movs	r2, #29
   128dc:	1ad3      	subs	r3, r2, r3
   128de:	465a      	mov	r2, fp
   128e0:	0001      	movs	r1, r0
   128e2:	40da      	lsrs	r2, r3
   128e4:	3908      	subs	r1, #8
   128e6:	408e      	lsls	r6, r1
   128e8:	0013      	movs	r3, r2
   128ea:	4333      	orrs	r3, r6
   128ec:	4699      	mov	r9, r3
   128ee:	465b      	mov	r3, fp
   128f0:	408b      	lsls	r3, r1
   128f2:	4698      	mov	r8, r3
   128f4:	2300      	movs	r3, #0
   128f6:	4c3c      	ldr	r4, [pc, #240]	; (129e8 <__aeabi_ddiv+0x1f0>)
   128f8:	2600      	movs	r6, #0
   128fa:	1a24      	subs	r4, r4, r0
   128fc:	9303      	str	r3, [sp, #12]
   128fe:	e79f      	b.n	12840 <__aeabi_ddiv+0x48>
   12900:	4651      	mov	r1, sl
   12902:	465a      	mov	r2, fp
   12904:	4311      	orrs	r1, r2
   12906:	d129      	bne.n	1295c <__aeabi_ddiv+0x164>
   12908:	2200      	movs	r2, #0
   1290a:	4693      	mov	fp, r2
   1290c:	3202      	adds	r2, #2
   1290e:	e7b1      	b.n	12874 <__aeabi_ddiv+0x7c>
   12910:	4659      	mov	r1, fp
   12912:	4301      	orrs	r1, r0
   12914:	d01e      	beq.n	12954 <__aeabi_ddiv+0x15c>
   12916:	465b      	mov	r3, fp
   12918:	2b00      	cmp	r3, #0
   1291a:	d100      	bne.n	1291e <__aeabi_ddiv+0x126>
   1291c:	e19e      	b.n	12c5c <__aeabi_ddiv+0x464>
   1291e:	4658      	mov	r0, fp
   12920:	f001 f8f2 	bl	13b08 <__clzsi2>
   12924:	0003      	movs	r3, r0
   12926:	3b0b      	subs	r3, #11
   12928:	2b1c      	cmp	r3, #28
   1292a:	dd00      	ble.n	1292e <__aeabi_ddiv+0x136>
   1292c:	e18f      	b.n	12c4e <__aeabi_ddiv+0x456>
   1292e:	0002      	movs	r2, r0
   12930:	4659      	mov	r1, fp
   12932:	3a08      	subs	r2, #8
   12934:	4091      	lsls	r1, r2
   12936:	468b      	mov	fp, r1
   12938:	211d      	movs	r1, #29
   1293a:	1acb      	subs	r3, r1, r3
   1293c:	4651      	mov	r1, sl
   1293e:	40d9      	lsrs	r1, r3
   12940:	000b      	movs	r3, r1
   12942:	4659      	mov	r1, fp
   12944:	430b      	orrs	r3, r1
   12946:	4651      	mov	r1, sl
   12948:	469b      	mov	fp, r3
   1294a:	4091      	lsls	r1, r2
   1294c:	4b26      	ldr	r3, [pc, #152]	; (129e8 <__aeabi_ddiv+0x1f0>)
   1294e:	2200      	movs	r2, #0
   12950:	1a1b      	subs	r3, r3, r0
   12952:	e78f      	b.n	12874 <__aeabi_ddiv+0x7c>
   12954:	2300      	movs	r3, #0
   12956:	2201      	movs	r2, #1
   12958:	469b      	mov	fp, r3
   1295a:	e78b      	b.n	12874 <__aeabi_ddiv+0x7c>
   1295c:	4651      	mov	r1, sl
   1295e:	2203      	movs	r2, #3
   12960:	e788      	b.n	12874 <__aeabi_ddiv+0x7c>
   12962:	2300      	movs	r3, #0
   12964:	4698      	mov	r8, r3
   12966:	3301      	adds	r3, #1
   12968:	2604      	movs	r6, #4
   1296a:	2400      	movs	r4, #0
   1296c:	9303      	str	r3, [sp, #12]
   1296e:	e767      	b.n	12840 <__aeabi_ddiv+0x48>
   12970:	2303      	movs	r3, #3
   12972:	46b1      	mov	r9, r6
   12974:	9303      	str	r3, [sp, #12]
   12976:	260c      	movs	r6, #12
   12978:	e762      	b.n	12840 <__aeabi_ddiv+0x48>
   1297a:	2a03      	cmp	r2, #3
   1297c:	d100      	bne.n	12980 <__aeabi_ddiv+0x188>
   1297e:	e25c      	b.n	12e3a <__aeabi_ddiv+0x642>
   12980:	9b01      	ldr	r3, [sp, #4]
   12982:	2a01      	cmp	r2, #1
   12984:	d000      	beq.n	12988 <__aeabi_ddiv+0x190>
   12986:	e1e4      	b.n	12d52 <__aeabi_ddiv+0x55a>
   12988:	4013      	ands	r3, r2
   1298a:	469c      	mov	ip, r3
   1298c:	2300      	movs	r3, #0
   1298e:	2400      	movs	r4, #0
   12990:	2200      	movs	r2, #0
   12992:	4698      	mov	r8, r3
   12994:	2100      	movs	r1, #0
   12996:	0312      	lsls	r2, r2, #12
   12998:	0b13      	lsrs	r3, r2, #12
   1299a:	0d0a      	lsrs	r2, r1, #20
   1299c:	0512      	lsls	r2, r2, #20
   1299e:	431a      	orrs	r2, r3
   129a0:	0523      	lsls	r3, r4, #20
   129a2:	4c12      	ldr	r4, [pc, #72]	; (129ec <__aeabi_ddiv+0x1f4>)
   129a4:	4640      	mov	r0, r8
   129a6:	4022      	ands	r2, r4
   129a8:	4313      	orrs	r3, r2
   129aa:	4662      	mov	r2, ip
   129ac:	005b      	lsls	r3, r3, #1
   129ae:	07d2      	lsls	r2, r2, #31
   129b0:	085b      	lsrs	r3, r3, #1
   129b2:	4313      	orrs	r3, r2
   129b4:	0019      	movs	r1, r3
   129b6:	b007      	add	sp, #28
   129b8:	bc3c      	pop	{r2, r3, r4, r5}
   129ba:	4690      	mov	r8, r2
   129bc:	4699      	mov	r9, r3
   129be:	46a2      	mov	sl, r4
   129c0:	46ab      	mov	fp, r5
   129c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   129c4:	2300      	movs	r3, #0
   129c6:	2280      	movs	r2, #128	; 0x80
   129c8:	469c      	mov	ip, r3
   129ca:	0312      	lsls	r2, r2, #12
   129cc:	4698      	mov	r8, r3
   129ce:	4c03      	ldr	r4, [pc, #12]	; (129dc <__aeabi_ddiv+0x1e4>)
   129d0:	e7e0      	b.n	12994 <__aeabi_ddiv+0x19c>
   129d2:	2300      	movs	r3, #0
   129d4:	4c01      	ldr	r4, [pc, #4]	; (129dc <__aeabi_ddiv+0x1e4>)
   129d6:	2200      	movs	r2, #0
   129d8:	4698      	mov	r8, r3
   129da:	e7db      	b.n	12994 <__aeabi_ddiv+0x19c>
   129dc:	000007ff 	.word	0x000007ff
   129e0:	fffffc01 	.word	0xfffffc01
   129e4:	00019918 	.word	0x00019918
   129e8:	fffffc0d 	.word	0xfffffc0d
   129ec:	800fffff 	.word	0x800fffff
   129f0:	45d9      	cmp	r9, fp
   129f2:	d900      	bls.n	129f6 <__aeabi_ddiv+0x1fe>
   129f4:	e139      	b.n	12c6a <__aeabi_ddiv+0x472>
   129f6:	d100      	bne.n	129fa <__aeabi_ddiv+0x202>
   129f8:	e134      	b.n	12c64 <__aeabi_ddiv+0x46c>
   129fa:	2300      	movs	r3, #0
   129fc:	4646      	mov	r6, r8
   129fe:	464d      	mov	r5, r9
   12a00:	469a      	mov	sl, r3
   12a02:	3c01      	subs	r4, #1
   12a04:	465b      	mov	r3, fp
   12a06:	0e0a      	lsrs	r2, r1, #24
   12a08:	021b      	lsls	r3, r3, #8
   12a0a:	431a      	orrs	r2, r3
   12a0c:	020b      	lsls	r3, r1, #8
   12a0e:	0c17      	lsrs	r7, r2, #16
   12a10:	9303      	str	r3, [sp, #12]
   12a12:	0413      	lsls	r3, r2, #16
   12a14:	0c1b      	lsrs	r3, r3, #16
   12a16:	0039      	movs	r1, r7
   12a18:	0028      	movs	r0, r5
   12a1a:	4690      	mov	r8, r2
   12a1c:	9301      	str	r3, [sp, #4]
   12a1e:	f7fe f9f5 	bl	10e0c <__udivsi3>
   12a22:	0002      	movs	r2, r0
   12a24:	9b01      	ldr	r3, [sp, #4]
   12a26:	4683      	mov	fp, r0
   12a28:	435a      	muls	r2, r3
   12a2a:	0028      	movs	r0, r5
   12a2c:	0039      	movs	r1, r7
   12a2e:	4691      	mov	r9, r2
   12a30:	f7fe fa72 	bl	10f18 <__aeabi_uidivmod>
   12a34:	0c35      	lsrs	r5, r6, #16
   12a36:	0409      	lsls	r1, r1, #16
   12a38:	430d      	orrs	r5, r1
   12a3a:	45a9      	cmp	r9, r5
   12a3c:	d90d      	bls.n	12a5a <__aeabi_ddiv+0x262>
   12a3e:	465b      	mov	r3, fp
   12a40:	4445      	add	r5, r8
   12a42:	3b01      	subs	r3, #1
   12a44:	45a8      	cmp	r8, r5
   12a46:	d900      	bls.n	12a4a <__aeabi_ddiv+0x252>
   12a48:	e13a      	b.n	12cc0 <__aeabi_ddiv+0x4c8>
   12a4a:	45a9      	cmp	r9, r5
   12a4c:	d800      	bhi.n	12a50 <__aeabi_ddiv+0x258>
   12a4e:	e137      	b.n	12cc0 <__aeabi_ddiv+0x4c8>
   12a50:	2302      	movs	r3, #2
   12a52:	425b      	negs	r3, r3
   12a54:	469c      	mov	ip, r3
   12a56:	4445      	add	r5, r8
   12a58:	44e3      	add	fp, ip
   12a5a:	464b      	mov	r3, r9
   12a5c:	1aeb      	subs	r3, r5, r3
   12a5e:	0039      	movs	r1, r7
   12a60:	0018      	movs	r0, r3
   12a62:	9304      	str	r3, [sp, #16]
   12a64:	f7fe f9d2 	bl	10e0c <__udivsi3>
   12a68:	9b01      	ldr	r3, [sp, #4]
   12a6a:	0005      	movs	r5, r0
   12a6c:	4343      	muls	r3, r0
   12a6e:	0039      	movs	r1, r7
   12a70:	9804      	ldr	r0, [sp, #16]
   12a72:	4699      	mov	r9, r3
   12a74:	f7fe fa50 	bl	10f18 <__aeabi_uidivmod>
   12a78:	0433      	lsls	r3, r6, #16
   12a7a:	0409      	lsls	r1, r1, #16
   12a7c:	0c1b      	lsrs	r3, r3, #16
   12a7e:	430b      	orrs	r3, r1
   12a80:	4599      	cmp	r9, r3
   12a82:	d909      	bls.n	12a98 <__aeabi_ddiv+0x2a0>
   12a84:	4443      	add	r3, r8
   12a86:	1e6a      	subs	r2, r5, #1
   12a88:	4598      	cmp	r8, r3
   12a8a:	d900      	bls.n	12a8e <__aeabi_ddiv+0x296>
   12a8c:	e11a      	b.n	12cc4 <__aeabi_ddiv+0x4cc>
   12a8e:	4599      	cmp	r9, r3
   12a90:	d800      	bhi.n	12a94 <__aeabi_ddiv+0x29c>
   12a92:	e117      	b.n	12cc4 <__aeabi_ddiv+0x4cc>
   12a94:	3d02      	subs	r5, #2
   12a96:	4443      	add	r3, r8
   12a98:	464a      	mov	r2, r9
   12a9a:	1a9b      	subs	r3, r3, r2
   12a9c:	465a      	mov	r2, fp
   12a9e:	0412      	lsls	r2, r2, #16
   12aa0:	432a      	orrs	r2, r5
   12aa2:	9903      	ldr	r1, [sp, #12]
   12aa4:	4693      	mov	fp, r2
   12aa6:	0c10      	lsrs	r0, r2, #16
   12aa8:	0c0a      	lsrs	r2, r1, #16
   12aaa:	4691      	mov	r9, r2
   12aac:	0409      	lsls	r1, r1, #16
   12aae:	465a      	mov	r2, fp
   12ab0:	0c09      	lsrs	r1, r1, #16
   12ab2:	464e      	mov	r6, r9
   12ab4:	000d      	movs	r5, r1
   12ab6:	0412      	lsls	r2, r2, #16
   12ab8:	0c12      	lsrs	r2, r2, #16
   12aba:	4345      	muls	r5, r0
   12abc:	9105      	str	r1, [sp, #20]
   12abe:	4351      	muls	r1, r2
   12ac0:	4372      	muls	r2, r6
   12ac2:	4370      	muls	r0, r6
   12ac4:	1952      	adds	r2, r2, r5
   12ac6:	0c0e      	lsrs	r6, r1, #16
   12ac8:	18b2      	adds	r2, r6, r2
   12aca:	4295      	cmp	r5, r2
   12acc:	d903      	bls.n	12ad6 <__aeabi_ddiv+0x2de>
   12ace:	2580      	movs	r5, #128	; 0x80
   12ad0:	026d      	lsls	r5, r5, #9
   12ad2:	46ac      	mov	ip, r5
   12ad4:	4460      	add	r0, ip
   12ad6:	0c15      	lsrs	r5, r2, #16
   12ad8:	0409      	lsls	r1, r1, #16
   12ada:	0412      	lsls	r2, r2, #16
   12adc:	0c09      	lsrs	r1, r1, #16
   12ade:	1828      	adds	r0, r5, r0
   12ae0:	1852      	adds	r2, r2, r1
   12ae2:	4283      	cmp	r3, r0
   12ae4:	d200      	bcs.n	12ae8 <__aeabi_ddiv+0x2f0>
   12ae6:	e0ce      	b.n	12c86 <__aeabi_ddiv+0x48e>
   12ae8:	d100      	bne.n	12aec <__aeabi_ddiv+0x2f4>
   12aea:	e0c8      	b.n	12c7e <__aeabi_ddiv+0x486>
   12aec:	1a1d      	subs	r5, r3, r0
   12aee:	4653      	mov	r3, sl
   12af0:	1a9e      	subs	r6, r3, r2
   12af2:	45b2      	cmp	sl, r6
   12af4:	4192      	sbcs	r2, r2
   12af6:	4252      	negs	r2, r2
   12af8:	1aab      	subs	r3, r5, r2
   12afa:	469a      	mov	sl, r3
   12afc:	4598      	cmp	r8, r3
   12afe:	d100      	bne.n	12b02 <__aeabi_ddiv+0x30a>
   12b00:	e117      	b.n	12d32 <__aeabi_ddiv+0x53a>
   12b02:	0039      	movs	r1, r7
   12b04:	0018      	movs	r0, r3
   12b06:	f7fe f981 	bl	10e0c <__udivsi3>
   12b0a:	9b01      	ldr	r3, [sp, #4]
   12b0c:	0005      	movs	r5, r0
   12b0e:	4343      	muls	r3, r0
   12b10:	0039      	movs	r1, r7
   12b12:	4650      	mov	r0, sl
   12b14:	9304      	str	r3, [sp, #16]
   12b16:	f7fe f9ff 	bl	10f18 <__aeabi_uidivmod>
   12b1a:	9804      	ldr	r0, [sp, #16]
   12b1c:	040b      	lsls	r3, r1, #16
   12b1e:	0c31      	lsrs	r1, r6, #16
   12b20:	4319      	orrs	r1, r3
   12b22:	4288      	cmp	r0, r1
   12b24:	d909      	bls.n	12b3a <__aeabi_ddiv+0x342>
   12b26:	4441      	add	r1, r8
   12b28:	1e6b      	subs	r3, r5, #1
   12b2a:	4588      	cmp	r8, r1
   12b2c:	d900      	bls.n	12b30 <__aeabi_ddiv+0x338>
   12b2e:	e107      	b.n	12d40 <__aeabi_ddiv+0x548>
   12b30:	4288      	cmp	r0, r1
   12b32:	d800      	bhi.n	12b36 <__aeabi_ddiv+0x33e>
   12b34:	e104      	b.n	12d40 <__aeabi_ddiv+0x548>
   12b36:	3d02      	subs	r5, #2
   12b38:	4441      	add	r1, r8
   12b3a:	9b04      	ldr	r3, [sp, #16]
   12b3c:	1acb      	subs	r3, r1, r3
   12b3e:	0018      	movs	r0, r3
   12b40:	0039      	movs	r1, r7
   12b42:	9304      	str	r3, [sp, #16]
   12b44:	f7fe f962 	bl	10e0c <__udivsi3>
   12b48:	9b01      	ldr	r3, [sp, #4]
   12b4a:	4682      	mov	sl, r0
   12b4c:	4343      	muls	r3, r0
   12b4e:	0039      	movs	r1, r7
   12b50:	9804      	ldr	r0, [sp, #16]
   12b52:	9301      	str	r3, [sp, #4]
   12b54:	f7fe f9e0 	bl	10f18 <__aeabi_uidivmod>
   12b58:	9801      	ldr	r0, [sp, #4]
   12b5a:	040b      	lsls	r3, r1, #16
   12b5c:	0431      	lsls	r1, r6, #16
   12b5e:	0c09      	lsrs	r1, r1, #16
   12b60:	4319      	orrs	r1, r3
   12b62:	4288      	cmp	r0, r1
   12b64:	d90d      	bls.n	12b82 <__aeabi_ddiv+0x38a>
   12b66:	4653      	mov	r3, sl
   12b68:	4441      	add	r1, r8
   12b6a:	3b01      	subs	r3, #1
   12b6c:	4588      	cmp	r8, r1
   12b6e:	d900      	bls.n	12b72 <__aeabi_ddiv+0x37a>
   12b70:	e0e8      	b.n	12d44 <__aeabi_ddiv+0x54c>
   12b72:	4288      	cmp	r0, r1
   12b74:	d800      	bhi.n	12b78 <__aeabi_ddiv+0x380>
   12b76:	e0e5      	b.n	12d44 <__aeabi_ddiv+0x54c>
   12b78:	2302      	movs	r3, #2
   12b7a:	425b      	negs	r3, r3
   12b7c:	469c      	mov	ip, r3
   12b7e:	4441      	add	r1, r8
   12b80:	44e2      	add	sl, ip
   12b82:	9b01      	ldr	r3, [sp, #4]
   12b84:	042d      	lsls	r5, r5, #16
   12b86:	1ace      	subs	r6, r1, r3
   12b88:	4651      	mov	r1, sl
   12b8a:	4329      	orrs	r1, r5
   12b8c:	9d05      	ldr	r5, [sp, #20]
   12b8e:	464f      	mov	r7, r9
   12b90:	002a      	movs	r2, r5
   12b92:	040b      	lsls	r3, r1, #16
   12b94:	0c08      	lsrs	r0, r1, #16
   12b96:	0c1b      	lsrs	r3, r3, #16
   12b98:	435a      	muls	r2, r3
   12b9a:	4345      	muls	r5, r0
   12b9c:	437b      	muls	r3, r7
   12b9e:	4378      	muls	r0, r7
   12ba0:	195b      	adds	r3, r3, r5
   12ba2:	0c17      	lsrs	r7, r2, #16
   12ba4:	18fb      	adds	r3, r7, r3
   12ba6:	429d      	cmp	r5, r3
   12ba8:	d903      	bls.n	12bb2 <__aeabi_ddiv+0x3ba>
   12baa:	2580      	movs	r5, #128	; 0x80
   12bac:	026d      	lsls	r5, r5, #9
   12bae:	46ac      	mov	ip, r5
   12bb0:	4460      	add	r0, ip
   12bb2:	0c1d      	lsrs	r5, r3, #16
   12bb4:	0412      	lsls	r2, r2, #16
   12bb6:	041b      	lsls	r3, r3, #16
   12bb8:	0c12      	lsrs	r2, r2, #16
   12bba:	1828      	adds	r0, r5, r0
   12bbc:	189b      	adds	r3, r3, r2
   12bbe:	4286      	cmp	r6, r0
   12bc0:	d200      	bcs.n	12bc4 <__aeabi_ddiv+0x3cc>
   12bc2:	e093      	b.n	12cec <__aeabi_ddiv+0x4f4>
   12bc4:	d100      	bne.n	12bc8 <__aeabi_ddiv+0x3d0>
   12bc6:	e08e      	b.n	12ce6 <__aeabi_ddiv+0x4ee>
   12bc8:	2301      	movs	r3, #1
   12bca:	4319      	orrs	r1, r3
   12bcc:	4ba0      	ldr	r3, [pc, #640]	; (12e50 <__aeabi_ddiv+0x658>)
   12bce:	18e3      	adds	r3, r4, r3
   12bd0:	2b00      	cmp	r3, #0
   12bd2:	dc00      	bgt.n	12bd6 <__aeabi_ddiv+0x3de>
   12bd4:	e099      	b.n	12d0a <__aeabi_ddiv+0x512>
   12bd6:	074a      	lsls	r2, r1, #29
   12bd8:	d000      	beq.n	12bdc <__aeabi_ddiv+0x3e4>
   12bda:	e09e      	b.n	12d1a <__aeabi_ddiv+0x522>
   12bdc:	465a      	mov	r2, fp
   12bde:	01d2      	lsls	r2, r2, #7
   12be0:	d506      	bpl.n	12bf0 <__aeabi_ddiv+0x3f8>
   12be2:	465a      	mov	r2, fp
   12be4:	4b9b      	ldr	r3, [pc, #620]	; (12e54 <__aeabi_ddiv+0x65c>)
   12be6:	401a      	ands	r2, r3
   12be8:	2380      	movs	r3, #128	; 0x80
   12bea:	4693      	mov	fp, r2
   12bec:	00db      	lsls	r3, r3, #3
   12bee:	18e3      	adds	r3, r4, r3
   12bf0:	4a99      	ldr	r2, [pc, #612]	; (12e58 <__aeabi_ddiv+0x660>)
   12bf2:	4293      	cmp	r3, r2
   12bf4:	dd68      	ble.n	12cc8 <__aeabi_ddiv+0x4d0>
   12bf6:	2301      	movs	r3, #1
   12bf8:	9a02      	ldr	r2, [sp, #8]
   12bfa:	4c98      	ldr	r4, [pc, #608]	; (12e5c <__aeabi_ddiv+0x664>)
   12bfc:	401a      	ands	r2, r3
   12bfe:	2300      	movs	r3, #0
   12c00:	4694      	mov	ip, r2
   12c02:	4698      	mov	r8, r3
   12c04:	2200      	movs	r2, #0
   12c06:	e6c5      	b.n	12994 <__aeabi_ddiv+0x19c>
   12c08:	2280      	movs	r2, #128	; 0x80
   12c0a:	464b      	mov	r3, r9
   12c0c:	0312      	lsls	r2, r2, #12
   12c0e:	4213      	tst	r3, r2
   12c10:	d00a      	beq.n	12c28 <__aeabi_ddiv+0x430>
   12c12:	465b      	mov	r3, fp
   12c14:	4213      	tst	r3, r2
   12c16:	d106      	bne.n	12c26 <__aeabi_ddiv+0x42e>
   12c18:	431a      	orrs	r2, r3
   12c1a:	0312      	lsls	r2, r2, #12
   12c1c:	0b12      	lsrs	r2, r2, #12
   12c1e:	46ac      	mov	ip, r5
   12c20:	4688      	mov	r8, r1
   12c22:	4c8e      	ldr	r4, [pc, #568]	; (12e5c <__aeabi_ddiv+0x664>)
   12c24:	e6b6      	b.n	12994 <__aeabi_ddiv+0x19c>
   12c26:	464b      	mov	r3, r9
   12c28:	431a      	orrs	r2, r3
   12c2a:	0312      	lsls	r2, r2, #12
   12c2c:	0b12      	lsrs	r2, r2, #12
   12c2e:	46bc      	mov	ip, r7
   12c30:	4c8a      	ldr	r4, [pc, #552]	; (12e5c <__aeabi_ddiv+0x664>)
   12c32:	e6af      	b.n	12994 <__aeabi_ddiv+0x19c>
   12c34:	0003      	movs	r3, r0
   12c36:	465a      	mov	r2, fp
   12c38:	3b28      	subs	r3, #40	; 0x28
   12c3a:	409a      	lsls	r2, r3
   12c3c:	2300      	movs	r3, #0
   12c3e:	4691      	mov	r9, r2
   12c40:	4698      	mov	r8, r3
   12c42:	e657      	b.n	128f4 <__aeabi_ddiv+0xfc>
   12c44:	4658      	mov	r0, fp
   12c46:	f000 ff5f 	bl	13b08 <__clzsi2>
   12c4a:	3020      	adds	r0, #32
   12c4c:	e640      	b.n	128d0 <__aeabi_ddiv+0xd8>
   12c4e:	0003      	movs	r3, r0
   12c50:	4652      	mov	r2, sl
   12c52:	3b28      	subs	r3, #40	; 0x28
   12c54:	409a      	lsls	r2, r3
   12c56:	2100      	movs	r1, #0
   12c58:	4693      	mov	fp, r2
   12c5a:	e677      	b.n	1294c <__aeabi_ddiv+0x154>
   12c5c:	f000 ff54 	bl	13b08 <__clzsi2>
   12c60:	3020      	adds	r0, #32
   12c62:	e65f      	b.n	12924 <__aeabi_ddiv+0x12c>
   12c64:	4588      	cmp	r8, r1
   12c66:	d200      	bcs.n	12c6a <__aeabi_ddiv+0x472>
   12c68:	e6c7      	b.n	129fa <__aeabi_ddiv+0x202>
   12c6a:	464b      	mov	r3, r9
   12c6c:	07de      	lsls	r6, r3, #31
   12c6e:	085d      	lsrs	r5, r3, #1
   12c70:	4643      	mov	r3, r8
   12c72:	085b      	lsrs	r3, r3, #1
   12c74:	431e      	orrs	r6, r3
   12c76:	4643      	mov	r3, r8
   12c78:	07db      	lsls	r3, r3, #31
   12c7a:	469a      	mov	sl, r3
   12c7c:	e6c2      	b.n	12a04 <__aeabi_ddiv+0x20c>
   12c7e:	2500      	movs	r5, #0
   12c80:	4592      	cmp	sl, r2
   12c82:	d300      	bcc.n	12c86 <__aeabi_ddiv+0x48e>
   12c84:	e733      	b.n	12aee <__aeabi_ddiv+0x2f6>
   12c86:	9e03      	ldr	r6, [sp, #12]
   12c88:	4659      	mov	r1, fp
   12c8a:	46b4      	mov	ip, r6
   12c8c:	44e2      	add	sl, ip
   12c8e:	45b2      	cmp	sl, r6
   12c90:	41ad      	sbcs	r5, r5
   12c92:	426d      	negs	r5, r5
   12c94:	4445      	add	r5, r8
   12c96:	18eb      	adds	r3, r5, r3
   12c98:	3901      	subs	r1, #1
   12c9a:	4598      	cmp	r8, r3
   12c9c:	d207      	bcs.n	12cae <__aeabi_ddiv+0x4b6>
   12c9e:	4298      	cmp	r0, r3
   12ca0:	d900      	bls.n	12ca4 <__aeabi_ddiv+0x4ac>
   12ca2:	e07f      	b.n	12da4 <__aeabi_ddiv+0x5ac>
   12ca4:	d100      	bne.n	12ca8 <__aeabi_ddiv+0x4b0>
   12ca6:	e0bc      	b.n	12e22 <__aeabi_ddiv+0x62a>
   12ca8:	1a1d      	subs	r5, r3, r0
   12caa:	468b      	mov	fp, r1
   12cac:	e71f      	b.n	12aee <__aeabi_ddiv+0x2f6>
   12cae:	4598      	cmp	r8, r3
   12cb0:	d1fa      	bne.n	12ca8 <__aeabi_ddiv+0x4b0>
   12cb2:	9d03      	ldr	r5, [sp, #12]
   12cb4:	4555      	cmp	r5, sl
   12cb6:	d9f2      	bls.n	12c9e <__aeabi_ddiv+0x4a6>
   12cb8:	4643      	mov	r3, r8
   12cba:	468b      	mov	fp, r1
   12cbc:	1a1d      	subs	r5, r3, r0
   12cbe:	e716      	b.n	12aee <__aeabi_ddiv+0x2f6>
   12cc0:	469b      	mov	fp, r3
   12cc2:	e6ca      	b.n	12a5a <__aeabi_ddiv+0x262>
   12cc4:	0015      	movs	r5, r2
   12cc6:	e6e7      	b.n	12a98 <__aeabi_ddiv+0x2a0>
   12cc8:	465a      	mov	r2, fp
   12cca:	08c9      	lsrs	r1, r1, #3
   12ccc:	0752      	lsls	r2, r2, #29
   12cce:	430a      	orrs	r2, r1
   12cd0:	055b      	lsls	r3, r3, #21
   12cd2:	4690      	mov	r8, r2
   12cd4:	0d5c      	lsrs	r4, r3, #21
   12cd6:	465a      	mov	r2, fp
   12cd8:	2301      	movs	r3, #1
   12cda:	9902      	ldr	r1, [sp, #8]
   12cdc:	0252      	lsls	r2, r2, #9
   12cde:	4019      	ands	r1, r3
   12ce0:	0b12      	lsrs	r2, r2, #12
   12ce2:	468c      	mov	ip, r1
   12ce4:	e656      	b.n	12994 <__aeabi_ddiv+0x19c>
   12ce6:	2b00      	cmp	r3, #0
   12ce8:	d100      	bne.n	12cec <__aeabi_ddiv+0x4f4>
   12cea:	e76f      	b.n	12bcc <__aeabi_ddiv+0x3d4>
   12cec:	4446      	add	r6, r8
   12cee:	1e4a      	subs	r2, r1, #1
   12cf0:	45b0      	cmp	r8, r6
   12cf2:	d929      	bls.n	12d48 <__aeabi_ddiv+0x550>
   12cf4:	0011      	movs	r1, r2
   12cf6:	4286      	cmp	r6, r0
   12cf8:	d000      	beq.n	12cfc <__aeabi_ddiv+0x504>
   12cfa:	e765      	b.n	12bc8 <__aeabi_ddiv+0x3d0>
   12cfc:	9a03      	ldr	r2, [sp, #12]
   12cfe:	4293      	cmp	r3, r2
   12d00:	d000      	beq.n	12d04 <__aeabi_ddiv+0x50c>
   12d02:	e761      	b.n	12bc8 <__aeabi_ddiv+0x3d0>
   12d04:	e762      	b.n	12bcc <__aeabi_ddiv+0x3d4>
   12d06:	2101      	movs	r1, #1
   12d08:	4249      	negs	r1, r1
   12d0a:	2001      	movs	r0, #1
   12d0c:	1ac2      	subs	r2, r0, r3
   12d0e:	2a38      	cmp	r2, #56	; 0x38
   12d10:	dd21      	ble.n	12d56 <__aeabi_ddiv+0x55e>
   12d12:	9b02      	ldr	r3, [sp, #8]
   12d14:	4003      	ands	r3, r0
   12d16:	469c      	mov	ip, r3
   12d18:	e638      	b.n	1298c <__aeabi_ddiv+0x194>
   12d1a:	220f      	movs	r2, #15
   12d1c:	400a      	ands	r2, r1
   12d1e:	2a04      	cmp	r2, #4
   12d20:	d100      	bne.n	12d24 <__aeabi_ddiv+0x52c>
   12d22:	e75b      	b.n	12bdc <__aeabi_ddiv+0x3e4>
   12d24:	000a      	movs	r2, r1
   12d26:	1d11      	adds	r1, r2, #4
   12d28:	4291      	cmp	r1, r2
   12d2a:	4192      	sbcs	r2, r2
   12d2c:	4252      	negs	r2, r2
   12d2e:	4493      	add	fp, r2
   12d30:	e754      	b.n	12bdc <__aeabi_ddiv+0x3e4>
   12d32:	4b47      	ldr	r3, [pc, #284]	; (12e50 <__aeabi_ddiv+0x658>)
   12d34:	18e3      	adds	r3, r4, r3
   12d36:	2b00      	cmp	r3, #0
   12d38:	dde5      	ble.n	12d06 <__aeabi_ddiv+0x50e>
   12d3a:	2201      	movs	r2, #1
   12d3c:	4252      	negs	r2, r2
   12d3e:	e7f2      	b.n	12d26 <__aeabi_ddiv+0x52e>
   12d40:	001d      	movs	r5, r3
   12d42:	e6fa      	b.n	12b3a <__aeabi_ddiv+0x342>
   12d44:	469a      	mov	sl, r3
   12d46:	e71c      	b.n	12b82 <__aeabi_ddiv+0x38a>
   12d48:	42b0      	cmp	r0, r6
   12d4a:	d839      	bhi.n	12dc0 <__aeabi_ddiv+0x5c8>
   12d4c:	d06e      	beq.n	12e2c <__aeabi_ddiv+0x634>
   12d4e:	0011      	movs	r1, r2
   12d50:	e73a      	b.n	12bc8 <__aeabi_ddiv+0x3d0>
   12d52:	9302      	str	r3, [sp, #8]
   12d54:	e73a      	b.n	12bcc <__aeabi_ddiv+0x3d4>
   12d56:	2a1f      	cmp	r2, #31
   12d58:	dc3c      	bgt.n	12dd4 <__aeabi_ddiv+0x5dc>
   12d5a:	2320      	movs	r3, #32
   12d5c:	1a9b      	subs	r3, r3, r2
   12d5e:	000c      	movs	r4, r1
   12d60:	4658      	mov	r0, fp
   12d62:	4099      	lsls	r1, r3
   12d64:	4098      	lsls	r0, r3
   12d66:	1e4b      	subs	r3, r1, #1
   12d68:	4199      	sbcs	r1, r3
   12d6a:	465b      	mov	r3, fp
   12d6c:	40d4      	lsrs	r4, r2
   12d6e:	40d3      	lsrs	r3, r2
   12d70:	4320      	orrs	r0, r4
   12d72:	4308      	orrs	r0, r1
   12d74:	001a      	movs	r2, r3
   12d76:	0743      	lsls	r3, r0, #29
   12d78:	d009      	beq.n	12d8e <__aeabi_ddiv+0x596>
   12d7a:	230f      	movs	r3, #15
   12d7c:	4003      	ands	r3, r0
   12d7e:	2b04      	cmp	r3, #4
   12d80:	d005      	beq.n	12d8e <__aeabi_ddiv+0x596>
   12d82:	0001      	movs	r1, r0
   12d84:	1d08      	adds	r0, r1, #4
   12d86:	4288      	cmp	r0, r1
   12d88:	419b      	sbcs	r3, r3
   12d8a:	425b      	negs	r3, r3
   12d8c:	18d2      	adds	r2, r2, r3
   12d8e:	0213      	lsls	r3, r2, #8
   12d90:	d53a      	bpl.n	12e08 <__aeabi_ddiv+0x610>
   12d92:	2301      	movs	r3, #1
   12d94:	9a02      	ldr	r2, [sp, #8]
   12d96:	2401      	movs	r4, #1
   12d98:	401a      	ands	r2, r3
   12d9a:	2300      	movs	r3, #0
   12d9c:	4694      	mov	ip, r2
   12d9e:	4698      	mov	r8, r3
   12da0:	2200      	movs	r2, #0
   12da2:	e5f7      	b.n	12994 <__aeabi_ddiv+0x19c>
   12da4:	2102      	movs	r1, #2
   12da6:	4249      	negs	r1, r1
   12da8:	468c      	mov	ip, r1
   12daa:	9d03      	ldr	r5, [sp, #12]
   12dac:	44e3      	add	fp, ip
   12dae:	46ac      	mov	ip, r5
   12db0:	44e2      	add	sl, ip
   12db2:	45aa      	cmp	sl, r5
   12db4:	41ad      	sbcs	r5, r5
   12db6:	426d      	negs	r5, r5
   12db8:	4445      	add	r5, r8
   12dba:	18ed      	adds	r5, r5, r3
   12dbc:	1a2d      	subs	r5, r5, r0
   12dbe:	e696      	b.n	12aee <__aeabi_ddiv+0x2f6>
   12dc0:	1e8a      	subs	r2, r1, #2
   12dc2:	9903      	ldr	r1, [sp, #12]
   12dc4:	004d      	lsls	r5, r1, #1
   12dc6:	428d      	cmp	r5, r1
   12dc8:	4189      	sbcs	r1, r1
   12dca:	4249      	negs	r1, r1
   12dcc:	4441      	add	r1, r8
   12dce:	1876      	adds	r6, r6, r1
   12dd0:	9503      	str	r5, [sp, #12]
   12dd2:	e78f      	b.n	12cf4 <__aeabi_ddiv+0x4fc>
   12dd4:	201f      	movs	r0, #31
   12dd6:	4240      	negs	r0, r0
   12dd8:	1ac3      	subs	r3, r0, r3
   12dda:	4658      	mov	r0, fp
   12ddc:	40d8      	lsrs	r0, r3
   12dde:	0003      	movs	r3, r0
   12de0:	2a20      	cmp	r2, #32
   12de2:	d028      	beq.n	12e36 <__aeabi_ddiv+0x63e>
   12de4:	2040      	movs	r0, #64	; 0x40
   12de6:	465d      	mov	r5, fp
   12de8:	1a82      	subs	r2, r0, r2
   12dea:	4095      	lsls	r5, r2
   12dec:	4329      	orrs	r1, r5
   12dee:	1e4a      	subs	r2, r1, #1
   12df0:	4191      	sbcs	r1, r2
   12df2:	4319      	orrs	r1, r3
   12df4:	2307      	movs	r3, #7
   12df6:	2200      	movs	r2, #0
   12df8:	400b      	ands	r3, r1
   12dfa:	d009      	beq.n	12e10 <__aeabi_ddiv+0x618>
   12dfc:	230f      	movs	r3, #15
   12dfe:	2200      	movs	r2, #0
   12e00:	400b      	ands	r3, r1
   12e02:	0008      	movs	r0, r1
   12e04:	2b04      	cmp	r3, #4
   12e06:	d1bd      	bne.n	12d84 <__aeabi_ddiv+0x58c>
   12e08:	0001      	movs	r1, r0
   12e0a:	0753      	lsls	r3, r2, #29
   12e0c:	0252      	lsls	r2, r2, #9
   12e0e:	0b12      	lsrs	r2, r2, #12
   12e10:	08c9      	lsrs	r1, r1, #3
   12e12:	4319      	orrs	r1, r3
   12e14:	2301      	movs	r3, #1
   12e16:	4688      	mov	r8, r1
   12e18:	9902      	ldr	r1, [sp, #8]
   12e1a:	2400      	movs	r4, #0
   12e1c:	4019      	ands	r1, r3
   12e1e:	468c      	mov	ip, r1
   12e20:	e5b8      	b.n	12994 <__aeabi_ddiv+0x19c>
   12e22:	4552      	cmp	r2, sl
   12e24:	d8be      	bhi.n	12da4 <__aeabi_ddiv+0x5ac>
   12e26:	468b      	mov	fp, r1
   12e28:	2500      	movs	r5, #0
   12e2a:	e660      	b.n	12aee <__aeabi_ddiv+0x2f6>
   12e2c:	9d03      	ldr	r5, [sp, #12]
   12e2e:	429d      	cmp	r5, r3
   12e30:	d3c6      	bcc.n	12dc0 <__aeabi_ddiv+0x5c8>
   12e32:	0011      	movs	r1, r2
   12e34:	e762      	b.n	12cfc <__aeabi_ddiv+0x504>
   12e36:	2500      	movs	r5, #0
   12e38:	e7d8      	b.n	12dec <__aeabi_ddiv+0x5f4>
   12e3a:	2280      	movs	r2, #128	; 0x80
   12e3c:	465b      	mov	r3, fp
   12e3e:	0312      	lsls	r2, r2, #12
   12e40:	431a      	orrs	r2, r3
   12e42:	9b01      	ldr	r3, [sp, #4]
   12e44:	0312      	lsls	r2, r2, #12
   12e46:	0b12      	lsrs	r2, r2, #12
   12e48:	469c      	mov	ip, r3
   12e4a:	4688      	mov	r8, r1
   12e4c:	4c03      	ldr	r4, [pc, #12]	; (12e5c <__aeabi_ddiv+0x664>)
   12e4e:	e5a1      	b.n	12994 <__aeabi_ddiv+0x19c>
   12e50:	000003ff 	.word	0x000003ff
   12e54:	feffffff 	.word	0xfeffffff
   12e58:	000007fe 	.word	0x000007fe
   12e5c:	000007ff 	.word	0x000007ff

00012e60 <__aeabi_dmul>:
   12e60:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e62:	4657      	mov	r7, sl
   12e64:	4645      	mov	r5, r8
   12e66:	46de      	mov	lr, fp
   12e68:	464e      	mov	r6, r9
   12e6a:	b5e0      	push	{r5, r6, r7, lr}
   12e6c:	030c      	lsls	r4, r1, #12
   12e6e:	4698      	mov	r8, r3
   12e70:	004e      	lsls	r6, r1, #1
   12e72:	0b23      	lsrs	r3, r4, #12
   12e74:	b087      	sub	sp, #28
   12e76:	0007      	movs	r7, r0
   12e78:	4692      	mov	sl, r2
   12e7a:	469b      	mov	fp, r3
   12e7c:	0d76      	lsrs	r6, r6, #21
   12e7e:	0fcd      	lsrs	r5, r1, #31
   12e80:	2e00      	cmp	r6, #0
   12e82:	d06b      	beq.n	12f5c <__aeabi_dmul+0xfc>
   12e84:	4b6d      	ldr	r3, [pc, #436]	; (1303c <__aeabi_dmul+0x1dc>)
   12e86:	429e      	cmp	r6, r3
   12e88:	d035      	beq.n	12ef6 <__aeabi_dmul+0x96>
   12e8a:	2480      	movs	r4, #128	; 0x80
   12e8c:	465b      	mov	r3, fp
   12e8e:	0f42      	lsrs	r2, r0, #29
   12e90:	0424      	lsls	r4, r4, #16
   12e92:	00db      	lsls	r3, r3, #3
   12e94:	4314      	orrs	r4, r2
   12e96:	431c      	orrs	r4, r3
   12e98:	00c3      	lsls	r3, r0, #3
   12e9a:	4699      	mov	r9, r3
   12e9c:	4b68      	ldr	r3, [pc, #416]	; (13040 <__aeabi_dmul+0x1e0>)
   12e9e:	46a3      	mov	fp, r4
   12ea0:	469c      	mov	ip, r3
   12ea2:	2300      	movs	r3, #0
   12ea4:	2700      	movs	r7, #0
   12ea6:	4466      	add	r6, ip
   12ea8:	9302      	str	r3, [sp, #8]
   12eaa:	4643      	mov	r3, r8
   12eac:	031c      	lsls	r4, r3, #12
   12eae:	005a      	lsls	r2, r3, #1
   12eb0:	0fdb      	lsrs	r3, r3, #31
   12eb2:	4650      	mov	r0, sl
   12eb4:	0b24      	lsrs	r4, r4, #12
   12eb6:	0d52      	lsrs	r2, r2, #21
   12eb8:	4698      	mov	r8, r3
   12eba:	d100      	bne.n	12ebe <__aeabi_dmul+0x5e>
   12ebc:	e076      	b.n	12fac <__aeabi_dmul+0x14c>
   12ebe:	4b5f      	ldr	r3, [pc, #380]	; (1303c <__aeabi_dmul+0x1dc>)
   12ec0:	429a      	cmp	r2, r3
   12ec2:	d06d      	beq.n	12fa0 <__aeabi_dmul+0x140>
   12ec4:	2380      	movs	r3, #128	; 0x80
   12ec6:	0f41      	lsrs	r1, r0, #29
   12ec8:	041b      	lsls	r3, r3, #16
   12eca:	430b      	orrs	r3, r1
   12ecc:	495c      	ldr	r1, [pc, #368]	; (13040 <__aeabi_dmul+0x1e0>)
   12ece:	00e4      	lsls	r4, r4, #3
   12ed0:	468c      	mov	ip, r1
   12ed2:	431c      	orrs	r4, r3
   12ed4:	00c3      	lsls	r3, r0, #3
   12ed6:	2000      	movs	r0, #0
   12ed8:	4462      	add	r2, ip
   12eda:	4641      	mov	r1, r8
   12edc:	18b6      	adds	r6, r6, r2
   12ede:	4069      	eors	r1, r5
   12ee0:	1c72      	adds	r2, r6, #1
   12ee2:	9101      	str	r1, [sp, #4]
   12ee4:	4694      	mov	ip, r2
   12ee6:	4307      	orrs	r7, r0
   12ee8:	2f0f      	cmp	r7, #15
   12eea:	d900      	bls.n	12eee <__aeabi_dmul+0x8e>
   12eec:	e0b0      	b.n	13050 <__aeabi_dmul+0x1f0>
   12eee:	4a55      	ldr	r2, [pc, #340]	; (13044 <__aeabi_dmul+0x1e4>)
   12ef0:	00bf      	lsls	r7, r7, #2
   12ef2:	59d2      	ldr	r2, [r2, r7]
   12ef4:	4697      	mov	pc, r2
   12ef6:	465b      	mov	r3, fp
   12ef8:	4303      	orrs	r3, r0
   12efa:	4699      	mov	r9, r3
   12efc:	d000      	beq.n	12f00 <__aeabi_dmul+0xa0>
   12efe:	e087      	b.n	13010 <__aeabi_dmul+0x1b0>
   12f00:	2300      	movs	r3, #0
   12f02:	469b      	mov	fp, r3
   12f04:	3302      	adds	r3, #2
   12f06:	2708      	movs	r7, #8
   12f08:	9302      	str	r3, [sp, #8]
   12f0a:	e7ce      	b.n	12eaa <__aeabi_dmul+0x4a>
   12f0c:	4642      	mov	r2, r8
   12f0e:	9201      	str	r2, [sp, #4]
   12f10:	2802      	cmp	r0, #2
   12f12:	d067      	beq.n	12fe4 <__aeabi_dmul+0x184>
   12f14:	2803      	cmp	r0, #3
   12f16:	d100      	bne.n	12f1a <__aeabi_dmul+0xba>
   12f18:	e20e      	b.n	13338 <__aeabi_dmul+0x4d8>
   12f1a:	2801      	cmp	r0, #1
   12f1c:	d000      	beq.n	12f20 <__aeabi_dmul+0xc0>
   12f1e:	e162      	b.n	131e6 <__aeabi_dmul+0x386>
   12f20:	2300      	movs	r3, #0
   12f22:	2400      	movs	r4, #0
   12f24:	2200      	movs	r2, #0
   12f26:	4699      	mov	r9, r3
   12f28:	9901      	ldr	r1, [sp, #4]
   12f2a:	4001      	ands	r1, r0
   12f2c:	b2cd      	uxtb	r5, r1
   12f2e:	2100      	movs	r1, #0
   12f30:	0312      	lsls	r2, r2, #12
   12f32:	0d0b      	lsrs	r3, r1, #20
   12f34:	0b12      	lsrs	r2, r2, #12
   12f36:	051b      	lsls	r3, r3, #20
   12f38:	4313      	orrs	r3, r2
   12f3a:	4a43      	ldr	r2, [pc, #268]	; (13048 <__aeabi_dmul+0x1e8>)
   12f3c:	0524      	lsls	r4, r4, #20
   12f3e:	4013      	ands	r3, r2
   12f40:	431c      	orrs	r4, r3
   12f42:	0064      	lsls	r4, r4, #1
   12f44:	07ed      	lsls	r5, r5, #31
   12f46:	0864      	lsrs	r4, r4, #1
   12f48:	432c      	orrs	r4, r5
   12f4a:	4648      	mov	r0, r9
   12f4c:	0021      	movs	r1, r4
   12f4e:	b007      	add	sp, #28
   12f50:	bc3c      	pop	{r2, r3, r4, r5}
   12f52:	4690      	mov	r8, r2
   12f54:	4699      	mov	r9, r3
   12f56:	46a2      	mov	sl, r4
   12f58:	46ab      	mov	fp, r5
   12f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f5c:	4303      	orrs	r3, r0
   12f5e:	4699      	mov	r9, r3
   12f60:	d04f      	beq.n	13002 <__aeabi_dmul+0x1a2>
   12f62:	465b      	mov	r3, fp
   12f64:	2b00      	cmp	r3, #0
   12f66:	d100      	bne.n	12f6a <__aeabi_dmul+0x10a>
   12f68:	e189      	b.n	1327e <__aeabi_dmul+0x41e>
   12f6a:	4658      	mov	r0, fp
   12f6c:	f000 fdcc 	bl	13b08 <__clzsi2>
   12f70:	0003      	movs	r3, r0
   12f72:	3b0b      	subs	r3, #11
   12f74:	2b1c      	cmp	r3, #28
   12f76:	dd00      	ble.n	12f7a <__aeabi_dmul+0x11a>
   12f78:	e17a      	b.n	13270 <__aeabi_dmul+0x410>
   12f7a:	221d      	movs	r2, #29
   12f7c:	1ad3      	subs	r3, r2, r3
   12f7e:	003a      	movs	r2, r7
   12f80:	0001      	movs	r1, r0
   12f82:	465c      	mov	r4, fp
   12f84:	40da      	lsrs	r2, r3
   12f86:	3908      	subs	r1, #8
   12f88:	408c      	lsls	r4, r1
   12f8a:	0013      	movs	r3, r2
   12f8c:	408f      	lsls	r7, r1
   12f8e:	4323      	orrs	r3, r4
   12f90:	469b      	mov	fp, r3
   12f92:	46b9      	mov	r9, r7
   12f94:	2300      	movs	r3, #0
   12f96:	4e2d      	ldr	r6, [pc, #180]	; (1304c <__aeabi_dmul+0x1ec>)
   12f98:	2700      	movs	r7, #0
   12f9a:	1a36      	subs	r6, r6, r0
   12f9c:	9302      	str	r3, [sp, #8]
   12f9e:	e784      	b.n	12eaa <__aeabi_dmul+0x4a>
   12fa0:	4653      	mov	r3, sl
   12fa2:	4323      	orrs	r3, r4
   12fa4:	d12a      	bne.n	12ffc <__aeabi_dmul+0x19c>
   12fa6:	2400      	movs	r4, #0
   12fa8:	2002      	movs	r0, #2
   12faa:	e796      	b.n	12eda <__aeabi_dmul+0x7a>
   12fac:	4653      	mov	r3, sl
   12fae:	4323      	orrs	r3, r4
   12fb0:	d020      	beq.n	12ff4 <__aeabi_dmul+0x194>
   12fb2:	2c00      	cmp	r4, #0
   12fb4:	d100      	bne.n	12fb8 <__aeabi_dmul+0x158>
   12fb6:	e157      	b.n	13268 <__aeabi_dmul+0x408>
   12fb8:	0020      	movs	r0, r4
   12fba:	f000 fda5 	bl	13b08 <__clzsi2>
   12fbe:	0003      	movs	r3, r0
   12fc0:	3b0b      	subs	r3, #11
   12fc2:	2b1c      	cmp	r3, #28
   12fc4:	dd00      	ble.n	12fc8 <__aeabi_dmul+0x168>
   12fc6:	e149      	b.n	1325c <__aeabi_dmul+0x3fc>
   12fc8:	211d      	movs	r1, #29
   12fca:	1acb      	subs	r3, r1, r3
   12fcc:	4651      	mov	r1, sl
   12fce:	0002      	movs	r2, r0
   12fd0:	40d9      	lsrs	r1, r3
   12fd2:	4653      	mov	r3, sl
   12fd4:	3a08      	subs	r2, #8
   12fd6:	4094      	lsls	r4, r2
   12fd8:	4093      	lsls	r3, r2
   12fda:	430c      	orrs	r4, r1
   12fdc:	4a1b      	ldr	r2, [pc, #108]	; (1304c <__aeabi_dmul+0x1ec>)
   12fde:	1a12      	subs	r2, r2, r0
   12fe0:	2000      	movs	r0, #0
   12fe2:	e77a      	b.n	12eda <__aeabi_dmul+0x7a>
   12fe4:	2501      	movs	r5, #1
   12fe6:	9b01      	ldr	r3, [sp, #4]
   12fe8:	4c14      	ldr	r4, [pc, #80]	; (1303c <__aeabi_dmul+0x1dc>)
   12fea:	401d      	ands	r5, r3
   12fec:	2300      	movs	r3, #0
   12fee:	2200      	movs	r2, #0
   12ff0:	4699      	mov	r9, r3
   12ff2:	e79c      	b.n	12f2e <__aeabi_dmul+0xce>
   12ff4:	2400      	movs	r4, #0
   12ff6:	2200      	movs	r2, #0
   12ff8:	2001      	movs	r0, #1
   12ffa:	e76e      	b.n	12eda <__aeabi_dmul+0x7a>
   12ffc:	4653      	mov	r3, sl
   12ffe:	2003      	movs	r0, #3
   13000:	e76b      	b.n	12eda <__aeabi_dmul+0x7a>
   13002:	2300      	movs	r3, #0
   13004:	469b      	mov	fp, r3
   13006:	3301      	adds	r3, #1
   13008:	2704      	movs	r7, #4
   1300a:	2600      	movs	r6, #0
   1300c:	9302      	str	r3, [sp, #8]
   1300e:	e74c      	b.n	12eaa <__aeabi_dmul+0x4a>
   13010:	2303      	movs	r3, #3
   13012:	4681      	mov	r9, r0
   13014:	270c      	movs	r7, #12
   13016:	9302      	str	r3, [sp, #8]
   13018:	e747      	b.n	12eaa <__aeabi_dmul+0x4a>
   1301a:	2280      	movs	r2, #128	; 0x80
   1301c:	2300      	movs	r3, #0
   1301e:	2500      	movs	r5, #0
   13020:	0312      	lsls	r2, r2, #12
   13022:	4699      	mov	r9, r3
   13024:	4c05      	ldr	r4, [pc, #20]	; (1303c <__aeabi_dmul+0x1dc>)
   13026:	e782      	b.n	12f2e <__aeabi_dmul+0xce>
   13028:	465c      	mov	r4, fp
   1302a:	464b      	mov	r3, r9
   1302c:	9802      	ldr	r0, [sp, #8]
   1302e:	e76f      	b.n	12f10 <__aeabi_dmul+0xb0>
   13030:	465c      	mov	r4, fp
   13032:	464b      	mov	r3, r9
   13034:	9501      	str	r5, [sp, #4]
   13036:	9802      	ldr	r0, [sp, #8]
   13038:	e76a      	b.n	12f10 <__aeabi_dmul+0xb0>
   1303a:	46c0      	nop			; (mov r8, r8)
   1303c:	000007ff 	.word	0x000007ff
   13040:	fffffc01 	.word	0xfffffc01
   13044:	00019958 	.word	0x00019958
   13048:	800fffff 	.word	0x800fffff
   1304c:	fffffc0d 	.word	0xfffffc0d
   13050:	464a      	mov	r2, r9
   13052:	4649      	mov	r1, r9
   13054:	0c17      	lsrs	r7, r2, #16
   13056:	0c1a      	lsrs	r2, r3, #16
   13058:	041b      	lsls	r3, r3, #16
   1305a:	0c1b      	lsrs	r3, r3, #16
   1305c:	0408      	lsls	r0, r1, #16
   1305e:	0019      	movs	r1, r3
   13060:	0c00      	lsrs	r0, r0, #16
   13062:	4341      	muls	r1, r0
   13064:	0015      	movs	r5, r2
   13066:	4688      	mov	r8, r1
   13068:	0019      	movs	r1, r3
   1306a:	437d      	muls	r5, r7
   1306c:	4379      	muls	r1, r7
   1306e:	9503      	str	r5, [sp, #12]
   13070:	4689      	mov	r9, r1
   13072:	0029      	movs	r1, r5
   13074:	0015      	movs	r5, r2
   13076:	4345      	muls	r5, r0
   13078:	444d      	add	r5, r9
   1307a:	9502      	str	r5, [sp, #8]
   1307c:	4645      	mov	r5, r8
   1307e:	0c2d      	lsrs	r5, r5, #16
   13080:	46aa      	mov	sl, r5
   13082:	9d02      	ldr	r5, [sp, #8]
   13084:	4455      	add	r5, sl
   13086:	45a9      	cmp	r9, r5
   13088:	d906      	bls.n	13098 <__aeabi_dmul+0x238>
   1308a:	468a      	mov	sl, r1
   1308c:	2180      	movs	r1, #128	; 0x80
   1308e:	0249      	lsls	r1, r1, #9
   13090:	4689      	mov	r9, r1
   13092:	44ca      	add	sl, r9
   13094:	4651      	mov	r1, sl
   13096:	9103      	str	r1, [sp, #12]
   13098:	0c29      	lsrs	r1, r5, #16
   1309a:	9104      	str	r1, [sp, #16]
   1309c:	4641      	mov	r1, r8
   1309e:	0409      	lsls	r1, r1, #16
   130a0:	042d      	lsls	r5, r5, #16
   130a2:	0c09      	lsrs	r1, r1, #16
   130a4:	4688      	mov	r8, r1
   130a6:	0029      	movs	r1, r5
   130a8:	0c25      	lsrs	r5, r4, #16
   130aa:	0424      	lsls	r4, r4, #16
   130ac:	4441      	add	r1, r8
   130ae:	0c24      	lsrs	r4, r4, #16
   130b0:	9105      	str	r1, [sp, #20]
   130b2:	0021      	movs	r1, r4
   130b4:	4341      	muls	r1, r0
   130b6:	4688      	mov	r8, r1
   130b8:	0021      	movs	r1, r4
   130ba:	4379      	muls	r1, r7
   130bc:	468a      	mov	sl, r1
   130be:	4368      	muls	r0, r5
   130c0:	4641      	mov	r1, r8
   130c2:	4450      	add	r0, sl
   130c4:	4681      	mov	r9, r0
   130c6:	0c08      	lsrs	r0, r1, #16
   130c8:	4448      	add	r0, r9
   130ca:	436f      	muls	r7, r5
   130cc:	4582      	cmp	sl, r0
   130ce:	d903      	bls.n	130d8 <__aeabi_dmul+0x278>
   130d0:	2180      	movs	r1, #128	; 0x80
   130d2:	0249      	lsls	r1, r1, #9
   130d4:	4689      	mov	r9, r1
   130d6:	444f      	add	r7, r9
   130d8:	0c01      	lsrs	r1, r0, #16
   130da:	4689      	mov	r9, r1
   130dc:	0039      	movs	r1, r7
   130de:	4449      	add	r1, r9
   130e0:	9102      	str	r1, [sp, #8]
   130e2:	4641      	mov	r1, r8
   130e4:	040f      	lsls	r7, r1, #16
   130e6:	9904      	ldr	r1, [sp, #16]
   130e8:	0c3f      	lsrs	r7, r7, #16
   130ea:	4688      	mov	r8, r1
   130ec:	0400      	lsls	r0, r0, #16
   130ee:	19c0      	adds	r0, r0, r7
   130f0:	4480      	add	r8, r0
   130f2:	4641      	mov	r1, r8
   130f4:	9104      	str	r1, [sp, #16]
   130f6:	4659      	mov	r1, fp
   130f8:	0c0f      	lsrs	r7, r1, #16
   130fa:	0409      	lsls	r1, r1, #16
   130fc:	0c09      	lsrs	r1, r1, #16
   130fe:	4688      	mov	r8, r1
   13100:	4359      	muls	r1, r3
   13102:	468a      	mov	sl, r1
   13104:	0039      	movs	r1, r7
   13106:	4351      	muls	r1, r2
   13108:	4689      	mov	r9, r1
   1310a:	4641      	mov	r1, r8
   1310c:	434a      	muls	r2, r1
   1310e:	4651      	mov	r1, sl
   13110:	0c09      	lsrs	r1, r1, #16
   13112:	468b      	mov	fp, r1
   13114:	437b      	muls	r3, r7
   13116:	18d2      	adds	r2, r2, r3
   13118:	445a      	add	r2, fp
   1311a:	4293      	cmp	r3, r2
   1311c:	d903      	bls.n	13126 <__aeabi_dmul+0x2c6>
   1311e:	2380      	movs	r3, #128	; 0x80
   13120:	025b      	lsls	r3, r3, #9
   13122:	469b      	mov	fp, r3
   13124:	44d9      	add	r9, fp
   13126:	4651      	mov	r1, sl
   13128:	0409      	lsls	r1, r1, #16
   1312a:	0c09      	lsrs	r1, r1, #16
   1312c:	468a      	mov	sl, r1
   1312e:	4641      	mov	r1, r8
   13130:	4361      	muls	r1, r4
   13132:	437c      	muls	r4, r7
   13134:	0c13      	lsrs	r3, r2, #16
   13136:	0412      	lsls	r2, r2, #16
   13138:	444b      	add	r3, r9
   1313a:	4452      	add	r2, sl
   1313c:	46a1      	mov	r9, r4
   1313e:	468a      	mov	sl, r1
   13140:	003c      	movs	r4, r7
   13142:	4641      	mov	r1, r8
   13144:	436c      	muls	r4, r5
   13146:	434d      	muls	r5, r1
   13148:	4651      	mov	r1, sl
   1314a:	444d      	add	r5, r9
   1314c:	0c0f      	lsrs	r7, r1, #16
   1314e:	197d      	adds	r5, r7, r5
   13150:	45a9      	cmp	r9, r5
   13152:	d903      	bls.n	1315c <__aeabi_dmul+0x2fc>
   13154:	2180      	movs	r1, #128	; 0x80
   13156:	0249      	lsls	r1, r1, #9
   13158:	4688      	mov	r8, r1
   1315a:	4444      	add	r4, r8
   1315c:	9f04      	ldr	r7, [sp, #16]
   1315e:	9903      	ldr	r1, [sp, #12]
   13160:	46b8      	mov	r8, r7
   13162:	4441      	add	r1, r8
   13164:	468b      	mov	fp, r1
   13166:	4583      	cmp	fp, r0
   13168:	4180      	sbcs	r0, r0
   1316a:	4241      	negs	r1, r0
   1316c:	4688      	mov	r8, r1
   1316e:	4651      	mov	r1, sl
   13170:	0408      	lsls	r0, r1, #16
   13172:	042f      	lsls	r7, r5, #16
   13174:	0c00      	lsrs	r0, r0, #16
   13176:	183f      	adds	r7, r7, r0
   13178:	4658      	mov	r0, fp
   1317a:	9902      	ldr	r1, [sp, #8]
   1317c:	1810      	adds	r0, r2, r0
   1317e:	4689      	mov	r9, r1
   13180:	4290      	cmp	r0, r2
   13182:	4192      	sbcs	r2, r2
   13184:	444f      	add	r7, r9
   13186:	46ba      	mov	sl, r7
   13188:	4252      	negs	r2, r2
   1318a:	4699      	mov	r9, r3
   1318c:	4693      	mov	fp, r2
   1318e:	44c2      	add	sl, r8
   13190:	44d1      	add	r9, sl
   13192:	44cb      	add	fp, r9
   13194:	428f      	cmp	r7, r1
   13196:	41bf      	sbcs	r7, r7
   13198:	45c2      	cmp	sl, r8
   1319a:	4189      	sbcs	r1, r1
   1319c:	4599      	cmp	r9, r3
   1319e:	419b      	sbcs	r3, r3
   131a0:	4593      	cmp	fp, r2
   131a2:	4192      	sbcs	r2, r2
   131a4:	427f      	negs	r7, r7
   131a6:	4249      	negs	r1, r1
   131a8:	0c2d      	lsrs	r5, r5, #16
   131aa:	4252      	negs	r2, r2
   131ac:	430f      	orrs	r7, r1
   131ae:	425b      	negs	r3, r3
   131b0:	4313      	orrs	r3, r2
   131b2:	197f      	adds	r7, r7, r5
   131b4:	18ff      	adds	r7, r7, r3
   131b6:	465b      	mov	r3, fp
   131b8:	193c      	adds	r4, r7, r4
   131ba:	0ddb      	lsrs	r3, r3, #23
   131bc:	9a05      	ldr	r2, [sp, #20]
   131be:	0264      	lsls	r4, r4, #9
   131c0:	431c      	orrs	r4, r3
   131c2:	0243      	lsls	r3, r0, #9
   131c4:	4313      	orrs	r3, r2
   131c6:	1e5d      	subs	r5, r3, #1
   131c8:	41ab      	sbcs	r3, r5
   131ca:	465a      	mov	r2, fp
   131cc:	0dc0      	lsrs	r0, r0, #23
   131ce:	4303      	orrs	r3, r0
   131d0:	0252      	lsls	r2, r2, #9
   131d2:	4313      	orrs	r3, r2
   131d4:	01e2      	lsls	r2, r4, #7
   131d6:	d556      	bpl.n	13286 <__aeabi_dmul+0x426>
   131d8:	2001      	movs	r0, #1
   131da:	085a      	lsrs	r2, r3, #1
   131dc:	4003      	ands	r3, r0
   131de:	4313      	orrs	r3, r2
   131e0:	07e2      	lsls	r2, r4, #31
   131e2:	4313      	orrs	r3, r2
   131e4:	0864      	lsrs	r4, r4, #1
   131e6:	485a      	ldr	r0, [pc, #360]	; (13350 <__aeabi_dmul+0x4f0>)
   131e8:	4460      	add	r0, ip
   131ea:	2800      	cmp	r0, #0
   131ec:	dd4d      	ble.n	1328a <__aeabi_dmul+0x42a>
   131ee:	075a      	lsls	r2, r3, #29
   131f0:	d009      	beq.n	13206 <__aeabi_dmul+0x3a6>
   131f2:	220f      	movs	r2, #15
   131f4:	401a      	ands	r2, r3
   131f6:	2a04      	cmp	r2, #4
   131f8:	d005      	beq.n	13206 <__aeabi_dmul+0x3a6>
   131fa:	1d1a      	adds	r2, r3, #4
   131fc:	429a      	cmp	r2, r3
   131fe:	419b      	sbcs	r3, r3
   13200:	425b      	negs	r3, r3
   13202:	18e4      	adds	r4, r4, r3
   13204:	0013      	movs	r3, r2
   13206:	01e2      	lsls	r2, r4, #7
   13208:	d504      	bpl.n	13214 <__aeabi_dmul+0x3b4>
   1320a:	2080      	movs	r0, #128	; 0x80
   1320c:	4a51      	ldr	r2, [pc, #324]	; (13354 <__aeabi_dmul+0x4f4>)
   1320e:	00c0      	lsls	r0, r0, #3
   13210:	4014      	ands	r4, r2
   13212:	4460      	add	r0, ip
   13214:	4a50      	ldr	r2, [pc, #320]	; (13358 <__aeabi_dmul+0x4f8>)
   13216:	4290      	cmp	r0, r2
   13218:	dd00      	ble.n	1321c <__aeabi_dmul+0x3bc>
   1321a:	e6e3      	b.n	12fe4 <__aeabi_dmul+0x184>
   1321c:	2501      	movs	r5, #1
   1321e:	08db      	lsrs	r3, r3, #3
   13220:	0762      	lsls	r2, r4, #29
   13222:	431a      	orrs	r2, r3
   13224:	0264      	lsls	r4, r4, #9
   13226:	9b01      	ldr	r3, [sp, #4]
   13228:	4691      	mov	r9, r2
   1322a:	0b22      	lsrs	r2, r4, #12
   1322c:	0544      	lsls	r4, r0, #21
   1322e:	0d64      	lsrs	r4, r4, #21
   13230:	401d      	ands	r5, r3
   13232:	e67c      	b.n	12f2e <__aeabi_dmul+0xce>
   13234:	2280      	movs	r2, #128	; 0x80
   13236:	4659      	mov	r1, fp
   13238:	0312      	lsls	r2, r2, #12
   1323a:	4211      	tst	r1, r2
   1323c:	d008      	beq.n	13250 <__aeabi_dmul+0x3f0>
   1323e:	4214      	tst	r4, r2
   13240:	d106      	bne.n	13250 <__aeabi_dmul+0x3f0>
   13242:	4322      	orrs	r2, r4
   13244:	0312      	lsls	r2, r2, #12
   13246:	0b12      	lsrs	r2, r2, #12
   13248:	4645      	mov	r5, r8
   1324a:	4699      	mov	r9, r3
   1324c:	4c43      	ldr	r4, [pc, #268]	; (1335c <__aeabi_dmul+0x4fc>)
   1324e:	e66e      	b.n	12f2e <__aeabi_dmul+0xce>
   13250:	465b      	mov	r3, fp
   13252:	431a      	orrs	r2, r3
   13254:	0312      	lsls	r2, r2, #12
   13256:	0b12      	lsrs	r2, r2, #12
   13258:	4c40      	ldr	r4, [pc, #256]	; (1335c <__aeabi_dmul+0x4fc>)
   1325a:	e668      	b.n	12f2e <__aeabi_dmul+0xce>
   1325c:	0003      	movs	r3, r0
   1325e:	4654      	mov	r4, sl
   13260:	3b28      	subs	r3, #40	; 0x28
   13262:	409c      	lsls	r4, r3
   13264:	2300      	movs	r3, #0
   13266:	e6b9      	b.n	12fdc <__aeabi_dmul+0x17c>
   13268:	f000 fc4e 	bl	13b08 <__clzsi2>
   1326c:	3020      	adds	r0, #32
   1326e:	e6a6      	b.n	12fbe <__aeabi_dmul+0x15e>
   13270:	0003      	movs	r3, r0
   13272:	3b28      	subs	r3, #40	; 0x28
   13274:	409f      	lsls	r7, r3
   13276:	2300      	movs	r3, #0
   13278:	46bb      	mov	fp, r7
   1327a:	4699      	mov	r9, r3
   1327c:	e68a      	b.n	12f94 <__aeabi_dmul+0x134>
   1327e:	f000 fc43 	bl	13b08 <__clzsi2>
   13282:	3020      	adds	r0, #32
   13284:	e674      	b.n	12f70 <__aeabi_dmul+0x110>
   13286:	46b4      	mov	ip, r6
   13288:	e7ad      	b.n	131e6 <__aeabi_dmul+0x386>
   1328a:	2501      	movs	r5, #1
   1328c:	1a2a      	subs	r2, r5, r0
   1328e:	2a38      	cmp	r2, #56	; 0x38
   13290:	dd06      	ble.n	132a0 <__aeabi_dmul+0x440>
   13292:	9b01      	ldr	r3, [sp, #4]
   13294:	2400      	movs	r4, #0
   13296:	401d      	ands	r5, r3
   13298:	2300      	movs	r3, #0
   1329a:	2200      	movs	r2, #0
   1329c:	4699      	mov	r9, r3
   1329e:	e646      	b.n	12f2e <__aeabi_dmul+0xce>
   132a0:	2a1f      	cmp	r2, #31
   132a2:	dc21      	bgt.n	132e8 <__aeabi_dmul+0x488>
   132a4:	2520      	movs	r5, #32
   132a6:	0020      	movs	r0, r4
   132a8:	1aad      	subs	r5, r5, r2
   132aa:	001e      	movs	r6, r3
   132ac:	40ab      	lsls	r3, r5
   132ae:	40a8      	lsls	r0, r5
   132b0:	40d6      	lsrs	r6, r2
   132b2:	1e5d      	subs	r5, r3, #1
   132b4:	41ab      	sbcs	r3, r5
   132b6:	4330      	orrs	r0, r6
   132b8:	4318      	orrs	r0, r3
   132ba:	40d4      	lsrs	r4, r2
   132bc:	0743      	lsls	r3, r0, #29
   132be:	d009      	beq.n	132d4 <__aeabi_dmul+0x474>
   132c0:	230f      	movs	r3, #15
   132c2:	4003      	ands	r3, r0
   132c4:	2b04      	cmp	r3, #4
   132c6:	d005      	beq.n	132d4 <__aeabi_dmul+0x474>
   132c8:	0003      	movs	r3, r0
   132ca:	1d18      	adds	r0, r3, #4
   132cc:	4298      	cmp	r0, r3
   132ce:	419b      	sbcs	r3, r3
   132d0:	425b      	negs	r3, r3
   132d2:	18e4      	adds	r4, r4, r3
   132d4:	0223      	lsls	r3, r4, #8
   132d6:	d521      	bpl.n	1331c <__aeabi_dmul+0x4bc>
   132d8:	2501      	movs	r5, #1
   132da:	9b01      	ldr	r3, [sp, #4]
   132dc:	2401      	movs	r4, #1
   132de:	401d      	ands	r5, r3
   132e0:	2300      	movs	r3, #0
   132e2:	2200      	movs	r2, #0
   132e4:	4699      	mov	r9, r3
   132e6:	e622      	b.n	12f2e <__aeabi_dmul+0xce>
   132e8:	251f      	movs	r5, #31
   132ea:	0021      	movs	r1, r4
   132ec:	426d      	negs	r5, r5
   132ee:	1a28      	subs	r0, r5, r0
   132f0:	40c1      	lsrs	r1, r0
   132f2:	0008      	movs	r0, r1
   132f4:	2a20      	cmp	r2, #32
   132f6:	d01d      	beq.n	13334 <__aeabi_dmul+0x4d4>
   132f8:	355f      	adds	r5, #95	; 0x5f
   132fa:	1aaa      	subs	r2, r5, r2
   132fc:	4094      	lsls	r4, r2
   132fe:	4323      	orrs	r3, r4
   13300:	1e5c      	subs	r4, r3, #1
   13302:	41a3      	sbcs	r3, r4
   13304:	2507      	movs	r5, #7
   13306:	4303      	orrs	r3, r0
   13308:	401d      	ands	r5, r3
   1330a:	2200      	movs	r2, #0
   1330c:	2d00      	cmp	r5, #0
   1330e:	d009      	beq.n	13324 <__aeabi_dmul+0x4c4>
   13310:	220f      	movs	r2, #15
   13312:	2400      	movs	r4, #0
   13314:	401a      	ands	r2, r3
   13316:	0018      	movs	r0, r3
   13318:	2a04      	cmp	r2, #4
   1331a:	d1d6      	bne.n	132ca <__aeabi_dmul+0x46a>
   1331c:	0003      	movs	r3, r0
   1331e:	0765      	lsls	r5, r4, #29
   13320:	0264      	lsls	r4, r4, #9
   13322:	0b22      	lsrs	r2, r4, #12
   13324:	08db      	lsrs	r3, r3, #3
   13326:	432b      	orrs	r3, r5
   13328:	2501      	movs	r5, #1
   1332a:	4699      	mov	r9, r3
   1332c:	9b01      	ldr	r3, [sp, #4]
   1332e:	2400      	movs	r4, #0
   13330:	401d      	ands	r5, r3
   13332:	e5fc      	b.n	12f2e <__aeabi_dmul+0xce>
   13334:	2400      	movs	r4, #0
   13336:	e7e2      	b.n	132fe <__aeabi_dmul+0x49e>
   13338:	2280      	movs	r2, #128	; 0x80
   1333a:	2501      	movs	r5, #1
   1333c:	0312      	lsls	r2, r2, #12
   1333e:	4322      	orrs	r2, r4
   13340:	9901      	ldr	r1, [sp, #4]
   13342:	0312      	lsls	r2, r2, #12
   13344:	0b12      	lsrs	r2, r2, #12
   13346:	400d      	ands	r5, r1
   13348:	4699      	mov	r9, r3
   1334a:	4c04      	ldr	r4, [pc, #16]	; (1335c <__aeabi_dmul+0x4fc>)
   1334c:	e5ef      	b.n	12f2e <__aeabi_dmul+0xce>
   1334e:	46c0      	nop			; (mov r8, r8)
   13350:	000003ff 	.word	0x000003ff
   13354:	feffffff 	.word	0xfeffffff
   13358:	000007fe 	.word	0x000007fe
   1335c:	000007ff 	.word	0x000007ff

00013360 <__aeabi_dsub>:
   13360:	b5f0      	push	{r4, r5, r6, r7, lr}
   13362:	4646      	mov	r6, r8
   13364:	46d6      	mov	lr, sl
   13366:	464f      	mov	r7, r9
   13368:	030c      	lsls	r4, r1, #12
   1336a:	b5c0      	push	{r6, r7, lr}
   1336c:	0fcd      	lsrs	r5, r1, #31
   1336e:	004e      	lsls	r6, r1, #1
   13370:	0a61      	lsrs	r1, r4, #9
   13372:	0f44      	lsrs	r4, r0, #29
   13374:	430c      	orrs	r4, r1
   13376:	00c1      	lsls	r1, r0, #3
   13378:	0058      	lsls	r0, r3, #1
   1337a:	0d40      	lsrs	r0, r0, #21
   1337c:	4684      	mov	ip, r0
   1337e:	468a      	mov	sl, r1
   13380:	000f      	movs	r7, r1
   13382:	0319      	lsls	r1, r3, #12
   13384:	0f50      	lsrs	r0, r2, #29
   13386:	0a49      	lsrs	r1, r1, #9
   13388:	4301      	orrs	r1, r0
   1338a:	48c6      	ldr	r0, [pc, #792]	; (136a4 <__aeabi_dsub+0x344>)
   1338c:	0d76      	lsrs	r6, r6, #21
   1338e:	46a8      	mov	r8, r5
   13390:	0fdb      	lsrs	r3, r3, #31
   13392:	00d2      	lsls	r2, r2, #3
   13394:	4584      	cmp	ip, r0
   13396:	d100      	bne.n	1339a <__aeabi_dsub+0x3a>
   13398:	e0d8      	b.n	1354c <__aeabi_dsub+0x1ec>
   1339a:	2001      	movs	r0, #1
   1339c:	4043      	eors	r3, r0
   1339e:	42ab      	cmp	r3, r5
   133a0:	d100      	bne.n	133a4 <__aeabi_dsub+0x44>
   133a2:	e0a6      	b.n	134f2 <__aeabi_dsub+0x192>
   133a4:	4660      	mov	r0, ip
   133a6:	1a35      	subs	r5, r6, r0
   133a8:	2d00      	cmp	r5, #0
   133aa:	dc00      	bgt.n	133ae <__aeabi_dsub+0x4e>
   133ac:	e105      	b.n	135ba <__aeabi_dsub+0x25a>
   133ae:	2800      	cmp	r0, #0
   133b0:	d110      	bne.n	133d4 <__aeabi_dsub+0x74>
   133b2:	000b      	movs	r3, r1
   133b4:	4313      	orrs	r3, r2
   133b6:	d100      	bne.n	133ba <__aeabi_dsub+0x5a>
   133b8:	e0d7      	b.n	1356a <__aeabi_dsub+0x20a>
   133ba:	1e6b      	subs	r3, r5, #1
   133bc:	2b00      	cmp	r3, #0
   133be:	d000      	beq.n	133c2 <__aeabi_dsub+0x62>
   133c0:	e14b      	b.n	1365a <__aeabi_dsub+0x2fa>
   133c2:	4653      	mov	r3, sl
   133c4:	1a9f      	subs	r7, r3, r2
   133c6:	45ba      	cmp	sl, r7
   133c8:	4180      	sbcs	r0, r0
   133ca:	1a64      	subs	r4, r4, r1
   133cc:	4240      	negs	r0, r0
   133ce:	1a24      	subs	r4, r4, r0
   133d0:	2601      	movs	r6, #1
   133d2:	e01e      	b.n	13412 <__aeabi_dsub+0xb2>
   133d4:	4bb3      	ldr	r3, [pc, #716]	; (136a4 <__aeabi_dsub+0x344>)
   133d6:	429e      	cmp	r6, r3
   133d8:	d048      	beq.n	1346c <__aeabi_dsub+0x10c>
   133da:	2380      	movs	r3, #128	; 0x80
   133dc:	041b      	lsls	r3, r3, #16
   133de:	4319      	orrs	r1, r3
   133e0:	2d38      	cmp	r5, #56	; 0x38
   133e2:	dd00      	ble.n	133e6 <__aeabi_dsub+0x86>
   133e4:	e119      	b.n	1361a <__aeabi_dsub+0x2ba>
   133e6:	2d1f      	cmp	r5, #31
   133e8:	dd00      	ble.n	133ec <__aeabi_dsub+0x8c>
   133ea:	e14c      	b.n	13686 <__aeabi_dsub+0x326>
   133ec:	2320      	movs	r3, #32
   133ee:	000f      	movs	r7, r1
   133f0:	1b5b      	subs	r3, r3, r5
   133f2:	0010      	movs	r0, r2
   133f4:	409a      	lsls	r2, r3
   133f6:	409f      	lsls	r7, r3
   133f8:	40e8      	lsrs	r0, r5
   133fa:	1e53      	subs	r3, r2, #1
   133fc:	419a      	sbcs	r2, r3
   133fe:	40e9      	lsrs	r1, r5
   13400:	4307      	orrs	r7, r0
   13402:	4317      	orrs	r7, r2
   13404:	4653      	mov	r3, sl
   13406:	1bdf      	subs	r7, r3, r7
   13408:	1a61      	subs	r1, r4, r1
   1340a:	45ba      	cmp	sl, r7
   1340c:	41a4      	sbcs	r4, r4
   1340e:	4264      	negs	r4, r4
   13410:	1b0c      	subs	r4, r1, r4
   13412:	0223      	lsls	r3, r4, #8
   13414:	d400      	bmi.n	13418 <__aeabi_dsub+0xb8>
   13416:	e0c5      	b.n	135a4 <__aeabi_dsub+0x244>
   13418:	0264      	lsls	r4, r4, #9
   1341a:	0a65      	lsrs	r5, r4, #9
   1341c:	2d00      	cmp	r5, #0
   1341e:	d100      	bne.n	13422 <__aeabi_dsub+0xc2>
   13420:	e0f6      	b.n	13610 <__aeabi_dsub+0x2b0>
   13422:	0028      	movs	r0, r5
   13424:	f000 fb70 	bl	13b08 <__clzsi2>
   13428:	0003      	movs	r3, r0
   1342a:	3b08      	subs	r3, #8
   1342c:	2b1f      	cmp	r3, #31
   1342e:	dd00      	ble.n	13432 <__aeabi_dsub+0xd2>
   13430:	e0e9      	b.n	13606 <__aeabi_dsub+0x2a6>
   13432:	2220      	movs	r2, #32
   13434:	003c      	movs	r4, r7
   13436:	1ad2      	subs	r2, r2, r3
   13438:	409d      	lsls	r5, r3
   1343a:	40d4      	lsrs	r4, r2
   1343c:	409f      	lsls	r7, r3
   1343e:	4325      	orrs	r5, r4
   13440:	429e      	cmp	r6, r3
   13442:	dd00      	ble.n	13446 <__aeabi_dsub+0xe6>
   13444:	e0db      	b.n	135fe <__aeabi_dsub+0x29e>
   13446:	1b9e      	subs	r6, r3, r6
   13448:	1c73      	adds	r3, r6, #1
   1344a:	2b1f      	cmp	r3, #31
   1344c:	dd00      	ble.n	13450 <__aeabi_dsub+0xf0>
   1344e:	e10a      	b.n	13666 <__aeabi_dsub+0x306>
   13450:	2220      	movs	r2, #32
   13452:	0038      	movs	r0, r7
   13454:	1ad2      	subs	r2, r2, r3
   13456:	0029      	movs	r1, r5
   13458:	4097      	lsls	r7, r2
   1345a:	002c      	movs	r4, r5
   1345c:	4091      	lsls	r1, r2
   1345e:	40d8      	lsrs	r0, r3
   13460:	1e7a      	subs	r2, r7, #1
   13462:	4197      	sbcs	r7, r2
   13464:	40dc      	lsrs	r4, r3
   13466:	2600      	movs	r6, #0
   13468:	4301      	orrs	r1, r0
   1346a:	430f      	orrs	r7, r1
   1346c:	077b      	lsls	r3, r7, #29
   1346e:	d009      	beq.n	13484 <__aeabi_dsub+0x124>
   13470:	230f      	movs	r3, #15
   13472:	403b      	ands	r3, r7
   13474:	2b04      	cmp	r3, #4
   13476:	d005      	beq.n	13484 <__aeabi_dsub+0x124>
   13478:	1d3b      	adds	r3, r7, #4
   1347a:	42bb      	cmp	r3, r7
   1347c:	41bf      	sbcs	r7, r7
   1347e:	427f      	negs	r7, r7
   13480:	19e4      	adds	r4, r4, r7
   13482:	001f      	movs	r7, r3
   13484:	0223      	lsls	r3, r4, #8
   13486:	d525      	bpl.n	134d4 <__aeabi_dsub+0x174>
   13488:	4b86      	ldr	r3, [pc, #536]	; (136a4 <__aeabi_dsub+0x344>)
   1348a:	3601      	adds	r6, #1
   1348c:	429e      	cmp	r6, r3
   1348e:	d100      	bne.n	13492 <__aeabi_dsub+0x132>
   13490:	e0af      	b.n	135f2 <__aeabi_dsub+0x292>
   13492:	4b85      	ldr	r3, [pc, #532]	; (136a8 <__aeabi_dsub+0x348>)
   13494:	2501      	movs	r5, #1
   13496:	401c      	ands	r4, r3
   13498:	4643      	mov	r3, r8
   1349a:	0762      	lsls	r2, r4, #29
   1349c:	08ff      	lsrs	r7, r7, #3
   1349e:	0264      	lsls	r4, r4, #9
   134a0:	0576      	lsls	r6, r6, #21
   134a2:	4317      	orrs	r7, r2
   134a4:	0b24      	lsrs	r4, r4, #12
   134a6:	0d76      	lsrs	r6, r6, #21
   134a8:	401d      	ands	r5, r3
   134aa:	2100      	movs	r1, #0
   134ac:	0324      	lsls	r4, r4, #12
   134ae:	0b23      	lsrs	r3, r4, #12
   134b0:	0d0c      	lsrs	r4, r1, #20
   134b2:	4a7e      	ldr	r2, [pc, #504]	; (136ac <__aeabi_dsub+0x34c>)
   134b4:	0524      	lsls	r4, r4, #20
   134b6:	431c      	orrs	r4, r3
   134b8:	4014      	ands	r4, r2
   134ba:	0533      	lsls	r3, r6, #20
   134bc:	4323      	orrs	r3, r4
   134be:	005b      	lsls	r3, r3, #1
   134c0:	07ed      	lsls	r5, r5, #31
   134c2:	085b      	lsrs	r3, r3, #1
   134c4:	432b      	orrs	r3, r5
   134c6:	0038      	movs	r0, r7
   134c8:	0019      	movs	r1, r3
   134ca:	bc1c      	pop	{r2, r3, r4}
   134cc:	4690      	mov	r8, r2
   134ce:	4699      	mov	r9, r3
   134d0:	46a2      	mov	sl, r4
   134d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   134d4:	2501      	movs	r5, #1
   134d6:	4643      	mov	r3, r8
   134d8:	0762      	lsls	r2, r4, #29
   134da:	08ff      	lsrs	r7, r7, #3
   134dc:	4317      	orrs	r7, r2
   134de:	08e4      	lsrs	r4, r4, #3
   134e0:	401d      	ands	r5, r3
   134e2:	4b70      	ldr	r3, [pc, #448]	; (136a4 <__aeabi_dsub+0x344>)
   134e4:	429e      	cmp	r6, r3
   134e6:	d036      	beq.n	13556 <__aeabi_dsub+0x1f6>
   134e8:	0324      	lsls	r4, r4, #12
   134ea:	0576      	lsls	r6, r6, #21
   134ec:	0b24      	lsrs	r4, r4, #12
   134ee:	0d76      	lsrs	r6, r6, #21
   134f0:	e7db      	b.n	134aa <__aeabi_dsub+0x14a>
   134f2:	4663      	mov	r3, ip
   134f4:	1af3      	subs	r3, r6, r3
   134f6:	2b00      	cmp	r3, #0
   134f8:	dc00      	bgt.n	134fc <__aeabi_dsub+0x19c>
   134fa:	e094      	b.n	13626 <__aeabi_dsub+0x2c6>
   134fc:	4660      	mov	r0, ip
   134fe:	2800      	cmp	r0, #0
   13500:	d035      	beq.n	1356e <__aeabi_dsub+0x20e>
   13502:	4868      	ldr	r0, [pc, #416]	; (136a4 <__aeabi_dsub+0x344>)
   13504:	4286      	cmp	r6, r0
   13506:	d0b1      	beq.n	1346c <__aeabi_dsub+0x10c>
   13508:	2780      	movs	r7, #128	; 0x80
   1350a:	043f      	lsls	r7, r7, #16
   1350c:	4339      	orrs	r1, r7
   1350e:	2b38      	cmp	r3, #56	; 0x38
   13510:	dc00      	bgt.n	13514 <__aeabi_dsub+0x1b4>
   13512:	e0fd      	b.n	13710 <__aeabi_dsub+0x3b0>
   13514:	430a      	orrs	r2, r1
   13516:	0017      	movs	r7, r2
   13518:	2100      	movs	r1, #0
   1351a:	1e7a      	subs	r2, r7, #1
   1351c:	4197      	sbcs	r7, r2
   1351e:	4457      	add	r7, sl
   13520:	4557      	cmp	r7, sl
   13522:	4180      	sbcs	r0, r0
   13524:	1909      	adds	r1, r1, r4
   13526:	4244      	negs	r4, r0
   13528:	190c      	adds	r4, r1, r4
   1352a:	0223      	lsls	r3, r4, #8
   1352c:	d53a      	bpl.n	135a4 <__aeabi_dsub+0x244>
   1352e:	4b5d      	ldr	r3, [pc, #372]	; (136a4 <__aeabi_dsub+0x344>)
   13530:	3601      	adds	r6, #1
   13532:	429e      	cmp	r6, r3
   13534:	d100      	bne.n	13538 <__aeabi_dsub+0x1d8>
   13536:	e14b      	b.n	137d0 <__aeabi_dsub+0x470>
   13538:	2201      	movs	r2, #1
   1353a:	4b5b      	ldr	r3, [pc, #364]	; (136a8 <__aeabi_dsub+0x348>)
   1353c:	401c      	ands	r4, r3
   1353e:	087b      	lsrs	r3, r7, #1
   13540:	4017      	ands	r7, r2
   13542:	431f      	orrs	r7, r3
   13544:	07e2      	lsls	r2, r4, #31
   13546:	4317      	orrs	r7, r2
   13548:	0864      	lsrs	r4, r4, #1
   1354a:	e78f      	b.n	1346c <__aeabi_dsub+0x10c>
   1354c:	0008      	movs	r0, r1
   1354e:	4310      	orrs	r0, r2
   13550:	d000      	beq.n	13554 <__aeabi_dsub+0x1f4>
   13552:	e724      	b.n	1339e <__aeabi_dsub+0x3e>
   13554:	e721      	b.n	1339a <__aeabi_dsub+0x3a>
   13556:	0023      	movs	r3, r4
   13558:	433b      	orrs	r3, r7
   1355a:	d100      	bne.n	1355e <__aeabi_dsub+0x1fe>
   1355c:	e1b9      	b.n	138d2 <__aeabi_dsub+0x572>
   1355e:	2280      	movs	r2, #128	; 0x80
   13560:	0312      	lsls	r2, r2, #12
   13562:	4314      	orrs	r4, r2
   13564:	0324      	lsls	r4, r4, #12
   13566:	0b24      	lsrs	r4, r4, #12
   13568:	e79f      	b.n	134aa <__aeabi_dsub+0x14a>
   1356a:	002e      	movs	r6, r5
   1356c:	e77e      	b.n	1346c <__aeabi_dsub+0x10c>
   1356e:	0008      	movs	r0, r1
   13570:	4310      	orrs	r0, r2
   13572:	d100      	bne.n	13576 <__aeabi_dsub+0x216>
   13574:	e0ca      	b.n	1370c <__aeabi_dsub+0x3ac>
   13576:	1e58      	subs	r0, r3, #1
   13578:	4684      	mov	ip, r0
   1357a:	2800      	cmp	r0, #0
   1357c:	d000      	beq.n	13580 <__aeabi_dsub+0x220>
   1357e:	e0e7      	b.n	13750 <__aeabi_dsub+0x3f0>
   13580:	4452      	add	r2, sl
   13582:	4552      	cmp	r2, sl
   13584:	4180      	sbcs	r0, r0
   13586:	1864      	adds	r4, r4, r1
   13588:	4240      	negs	r0, r0
   1358a:	1824      	adds	r4, r4, r0
   1358c:	0017      	movs	r7, r2
   1358e:	2601      	movs	r6, #1
   13590:	0223      	lsls	r3, r4, #8
   13592:	d507      	bpl.n	135a4 <__aeabi_dsub+0x244>
   13594:	2602      	movs	r6, #2
   13596:	e7cf      	b.n	13538 <__aeabi_dsub+0x1d8>
   13598:	4664      	mov	r4, ip
   1359a:	432c      	orrs	r4, r5
   1359c:	d100      	bne.n	135a0 <__aeabi_dsub+0x240>
   1359e:	e1b3      	b.n	13908 <__aeabi_dsub+0x5a8>
   135a0:	002c      	movs	r4, r5
   135a2:	4667      	mov	r7, ip
   135a4:	077b      	lsls	r3, r7, #29
   135a6:	d000      	beq.n	135aa <__aeabi_dsub+0x24a>
   135a8:	e762      	b.n	13470 <__aeabi_dsub+0x110>
   135aa:	0763      	lsls	r3, r4, #29
   135ac:	08ff      	lsrs	r7, r7, #3
   135ae:	431f      	orrs	r7, r3
   135b0:	2501      	movs	r5, #1
   135b2:	4643      	mov	r3, r8
   135b4:	08e4      	lsrs	r4, r4, #3
   135b6:	401d      	ands	r5, r3
   135b8:	e793      	b.n	134e2 <__aeabi_dsub+0x182>
   135ba:	2d00      	cmp	r5, #0
   135bc:	d178      	bne.n	136b0 <__aeabi_dsub+0x350>
   135be:	1c75      	adds	r5, r6, #1
   135c0:	056d      	lsls	r5, r5, #21
   135c2:	0d6d      	lsrs	r5, r5, #21
   135c4:	2d01      	cmp	r5, #1
   135c6:	dc00      	bgt.n	135ca <__aeabi_dsub+0x26a>
   135c8:	e0f2      	b.n	137b0 <__aeabi_dsub+0x450>
   135ca:	4650      	mov	r0, sl
   135cc:	1a80      	subs	r0, r0, r2
   135ce:	4582      	cmp	sl, r0
   135d0:	41bf      	sbcs	r7, r7
   135d2:	1a65      	subs	r5, r4, r1
   135d4:	427f      	negs	r7, r7
   135d6:	1bed      	subs	r5, r5, r7
   135d8:	4684      	mov	ip, r0
   135da:	0228      	lsls	r0, r5, #8
   135dc:	d400      	bmi.n	135e0 <__aeabi_dsub+0x280>
   135de:	e08c      	b.n	136fa <__aeabi_dsub+0x39a>
   135e0:	4650      	mov	r0, sl
   135e2:	1a17      	subs	r7, r2, r0
   135e4:	42ba      	cmp	r2, r7
   135e6:	4192      	sbcs	r2, r2
   135e8:	1b0c      	subs	r4, r1, r4
   135ea:	4255      	negs	r5, r2
   135ec:	1b65      	subs	r5, r4, r5
   135ee:	4698      	mov	r8, r3
   135f0:	e714      	b.n	1341c <__aeabi_dsub+0xbc>
   135f2:	2501      	movs	r5, #1
   135f4:	4643      	mov	r3, r8
   135f6:	2400      	movs	r4, #0
   135f8:	401d      	ands	r5, r3
   135fa:	2700      	movs	r7, #0
   135fc:	e755      	b.n	134aa <__aeabi_dsub+0x14a>
   135fe:	4c2a      	ldr	r4, [pc, #168]	; (136a8 <__aeabi_dsub+0x348>)
   13600:	1af6      	subs	r6, r6, r3
   13602:	402c      	ands	r4, r5
   13604:	e732      	b.n	1346c <__aeabi_dsub+0x10c>
   13606:	003d      	movs	r5, r7
   13608:	3828      	subs	r0, #40	; 0x28
   1360a:	4085      	lsls	r5, r0
   1360c:	2700      	movs	r7, #0
   1360e:	e717      	b.n	13440 <__aeabi_dsub+0xe0>
   13610:	0038      	movs	r0, r7
   13612:	f000 fa79 	bl	13b08 <__clzsi2>
   13616:	3020      	adds	r0, #32
   13618:	e706      	b.n	13428 <__aeabi_dsub+0xc8>
   1361a:	430a      	orrs	r2, r1
   1361c:	0017      	movs	r7, r2
   1361e:	2100      	movs	r1, #0
   13620:	1e7a      	subs	r2, r7, #1
   13622:	4197      	sbcs	r7, r2
   13624:	e6ee      	b.n	13404 <__aeabi_dsub+0xa4>
   13626:	2b00      	cmp	r3, #0
   13628:	d000      	beq.n	1362c <__aeabi_dsub+0x2cc>
   1362a:	e0e5      	b.n	137f8 <__aeabi_dsub+0x498>
   1362c:	1c73      	adds	r3, r6, #1
   1362e:	469c      	mov	ip, r3
   13630:	055b      	lsls	r3, r3, #21
   13632:	0d5b      	lsrs	r3, r3, #21
   13634:	2b01      	cmp	r3, #1
   13636:	dc00      	bgt.n	1363a <__aeabi_dsub+0x2da>
   13638:	e09f      	b.n	1377a <__aeabi_dsub+0x41a>
   1363a:	4b1a      	ldr	r3, [pc, #104]	; (136a4 <__aeabi_dsub+0x344>)
   1363c:	459c      	cmp	ip, r3
   1363e:	d100      	bne.n	13642 <__aeabi_dsub+0x2e2>
   13640:	e0c5      	b.n	137ce <__aeabi_dsub+0x46e>
   13642:	4452      	add	r2, sl
   13644:	4552      	cmp	r2, sl
   13646:	4180      	sbcs	r0, r0
   13648:	1864      	adds	r4, r4, r1
   1364a:	4240      	negs	r0, r0
   1364c:	1824      	adds	r4, r4, r0
   1364e:	07e7      	lsls	r7, r4, #31
   13650:	0852      	lsrs	r2, r2, #1
   13652:	4317      	orrs	r7, r2
   13654:	0864      	lsrs	r4, r4, #1
   13656:	4666      	mov	r6, ip
   13658:	e708      	b.n	1346c <__aeabi_dsub+0x10c>
   1365a:	4812      	ldr	r0, [pc, #72]	; (136a4 <__aeabi_dsub+0x344>)
   1365c:	4285      	cmp	r5, r0
   1365e:	d100      	bne.n	13662 <__aeabi_dsub+0x302>
   13660:	e085      	b.n	1376e <__aeabi_dsub+0x40e>
   13662:	001d      	movs	r5, r3
   13664:	e6bc      	b.n	133e0 <__aeabi_dsub+0x80>
   13666:	0029      	movs	r1, r5
   13668:	3e1f      	subs	r6, #31
   1366a:	40f1      	lsrs	r1, r6
   1366c:	2b20      	cmp	r3, #32
   1366e:	d100      	bne.n	13672 <__aeabi_dsub+0x312>
   13670:	e07f      	b.n	13772 <__aeabi_dsub+0x412>
   13672:	2240      	movs	r2, #64	; 0x40
   13674:	1ad3      	subs	r3, r2, r3
   13676:	409d      	lsls	r5, r3
   13678:	432f      	orrs	r7, r5
   1367a:	1e7d      	subs	r5, r7, #1
   1367c:	41af      	sbcs	r7, r5
   1367e:	2400      	movs	r4, #0
   13680:	430f      	orrs	r7, r1
   13682:	2600      	movs	r6, #0
   13684:	e78e      	b.n	135a4 <__aeabi_dsub+0x244>
   13686:	002b      	movs	r3, r5
   13688:	000f      	movs	r7, r1
   1368a:	3b20      	subs	r3, #32
   1368c:	40df      	lsrs	r7, r3
   1368e:	2d20      	cmp	r5, #32
   13690:	d071      	beq.n	13776 <__aeabi_dsub+0x416>
   13692:	2340      	movs	r3, #64	; 0x40
   13694:	1b5d      	subs	r5, r3, r5
   13696:	40a9      	lsls	r1, r5
   13698:	430a      	orrs	r2, r1
   1369a:	1e51      	subs	r1, r2, #1
   1369c:	418a      	sbcs	r2, r1
   1369e:	2100      	movs	r1, #0
   136a0:	4317      	orrs	r7, r2
   136a2:	e6af      	b.n	13404 <__aeabi_dsub+0xa4>
   136a4:	000007ff 	.word	0x000007ff
   136a8:	ff7fffff 	.word	0xff7fffff
   136ac:	800fffff 	.word	0x800fffff
   136b0:	2e00      	cmp	r6, #0
   136b2:	d03e      	beq.n	13732 <__aeabi_dsub+0x3d2>
   136b4:	4eb3      	ldr	r6, [pc, #716]	; (13984 <__aeabi_dsub+0x624>)
   136b6:	45b4      	cmp	ip, r6
   136b8:	d045      	beq.n	13746 <__aeabi_dsub+0x3e6>
   136ba:	2680      	movs	r6, #128	; 0x80
   136bc:	0436      	lsls	r6, r6, #16
   136be:	426d      	negs	r5, r5
   136c0:	4334      	orrs	r4, r6
   136c2:	2d38      	cmp	r5, #56	; 0x38
   136c4:	dd00      	ble.n	136c8 <__aeabi_dsub+0x368>
   136c6:	e0a8      	b.n	1381a <__aeabi_dsub+0x4ba>
   136c8:	2d1f      	cmp	r5, #31
   136ca:	dd00      	ble.n	136ce <__aeabi_dsub+0x36e>
   136cc:	e11f      	b.n	1390e <__aeabi_dsub+0x5ae>
   136ce:	2620      	movs	r6, #32
   136d0:	0027      	movs	r7, r4
   136d2:	4650      	mov	r0, sl
   136d4:	1b76      	subs	r6, r6, r5
   136d6:	40b7      	lsls	r7, r6
   136d8:	40e8      	lsrs	r0, r5
   136da:	4307      	orrs	r7, r0
   136dc:	4650      	mov	r0, sl
   136de:	40b0      	lsls	r0, r6
   136e0:	1e46      	subs	r6, r0, #1
   136e2:	41b0      	sbcs	r0, r6
   136e4:	40ec      	lsrs	r4, r5
   136e6:	4338      	orrs	r0, r7
   136e8:	1a17      	subs	r7, r2, r0
   136ea:	42ba      	cmp	r2, r7
   136ec:	4192      	sbcs	r2, r2
   136ee:	1b0c      	subs	r4, r1, r4
   136f0:	4252      	negs	r2, r2
   136f2:	1aa4      	subs	r4, r4, r2
   136f4:	4666      	mov	r6, ip
   136f6:	4698      	mov	r8, r3
   136f8:	e68b      	b.n	13412 <__aeabi_dsub+0xb2>
   136fa:	4664      	mov	r4, ip
   136fc:	4667      	mov	r7, ip
   136fe:	432c      	orrs	r4, r5
   13700:	d000      	beq.n	13704 <__aeabi_dsub+0x3a4>
   13702:	e68b      	b.n	1341c <__aeabi_dsub+0xbc>
   13704:	2500      	movs	r5, #0
   13706:	2600      	movs	r6, #0
   13708:	2700      	movs	r7, #0
   1370a:	e6ea      	b.n	134e2 <__aeabi_dsub+0x182>
   1370c:	001e      	movs	r6, r3
   1370e:	e6ad      	b.n	1346c <__aeabi_dsub+0x10c>
   13710:	2b1f      	cmp	r3, #31
   13712:	dc60      	bgt.n	137d6 <__aeabi_dsub+0x476>
   13714:	2720      	movs	r7, #32
   13716:	1af8      	subs	r0, r7, r3
   13718:	000f      	movs	r7, r1
   1371a:	4684      	mov	ip, r0
   1371c:	4087      	lsls	r7, r0
   1371e:	0010      	movs	r0, r2
   13720:	40d8      	lsrs	r0, r3
   13722:	4307      	orrs	r7, r0
   13724:	4660      	mov	r0, ip
   13726:	4082      	lsls	r2, r0
   13728:	1e50      	subs	r0, r2, #1
   1372a:	4182      	sbcs	r2, r0
   1372c:	40d9      	lsrs	r1, r3
   1372e:	4317      	orrs	r7, r2
   13730:	e6f5      	b.n	1351e <__aeabi_dsub+0x1be>
   13732:	0026      	movs	r6, r4
   13734:	4650      	mov	r0, sl
   13736:	4306      	orrs	r6, r0
   13738:	d005      	beq.n	13746 <__aeabi_dsub+0x3e6>
   1373a:	43ed      	mvns	r5, r5
   1373c:	2d00      	cmp	r5, #0
   1373e:	d0d3      	beq.n	136e8 <__aeabi_dsub+0x388>
   13740:	4e90      	ldr	r6, [pc, #576]	; (13984 <__aeabi_dsub+0x624>)
   13742:	45b4      	cmp	ip, r6
   13744:	d1bd      	bne.n	136c2 <__aeabi_dsub+0x362>
   13746:	000c      	movs	r4, r1
   13748:	0017      	movs	r7, r2
   1374a:	4666      	mov	r6, ip
   1374c:	4698      	mov	r8, r3
   1374e:	e68d      	b.n	1346c <__aeabi_dsub+0x10c>
   13750:	488c      	ldr	r0, [pc, #560]	; (13984 <__aeabi_dsub+0x624>)
   13752:	4283      	cmp	r3, r0
   13754:	d00b      	beq.n	1376e <__aeabi_dsub+0x40e>
   13756:	4663      	mov	r3, ip
   13758:	e6d9      	b.n	1350e <__aeabi_dsub+0x1ae>
   1375a:	2d00      	cmp	r5, #0
   1375c:	d000      	beq.n	13760 <__aeabi_dsub+0x400>
   1375e:	e096      	b.n	1388e <__aeabi_dsub+0x52e>
   13760:	0008      	movs	r0, r1
   13762:	4310      	orrs	r0, r2
   13764:	d100      	bne.n	13768 <__aeabi_dsub+0x408>
   13766:	e0e2      	b.n	1392e <__aeabi_dsub+0x5ce>
   13768:	000c      	movs	r4, r1
   1376a:	0017      	movs	r7, r2
   1376c:	4698      	mov	r8, r3
   1376e:	4e85      	ldr	r6, [pc, #532]	; (13984 <__aeabi_dsub+0x624>)
   13770:	e67c      	b.n	1346c <__aeabi_dsub+0x10c>
   13772:	2500      	movs	r5, #0
   13774:	e780      	b.n	13678 <__aeabi_dsub+0x318>
   13776:	2100      	movs	r1, #0
   13778:	e78e      	b.n	13698 <__aeabi_dsub+0x338>
   1377a:	0023      	movs	r3, r4
   1377c:	4650      	mov	r0, sl
   1377e:	4303      	orrs	r3, r0
   13780:	2e00      	cmp	r6, #0
   13782:	d000      	beq.n	13786 <__aeabi_dsub+0x426>
   13784:	e0a8      	b.n	138d8 <__aeabi_dsub+0x578>
   13786:	2b00      	cmp	r3, #0
   13788:	d100      	bne.n	1378c <__aeabi_dsub+0x42c>
   1378a:	e0de      	b.n	1394a <__aeabi_dsub+0x5ea>
   1378c:	000b      	movs	r3, r1
   1378e:	4313      	orrs	r3, r2
   13790:	d100      	bne.n	13794 <__aeabi_dsub+0x434>
   13792:	e66b      	b.n	1346c <__aeabi_dsub+0x10c>
   13794:	4452      	add	r2, sl
   13796:	4552      	cmp	r2, sl
   13798:	4180      	sbcs	r0, r0
   1379a:	1864      	adds	r4, r4, r1
   1379c:	4240      	negs	r0, r0
   1379e:	1824      	adds	r4, r4, r0
   137a0:	0017      	movs	r7, r2
   137a2:	0223      	lsls	r3, r4, #8
   137a4:	d400      	bmi.n	137a8 <__aeabi_dsub+0x448>
   137a6:	e6fd      	b.n	135a4 <__aeabi_dsub+0x244>
   137a8:	4b77      	ldr	r3, [pc, #476]	; (13988 <__aeabi_dsub+0x628>)
   137aa:	4666      	mov	r6, ip
   137ac:	401c      	ands	r4, r3
   137ae:	e65d      	b.n	1346c <__aeabi_dsub+0x10c>
   137b0:	0025      	movs	r5, r4
   137b2:	4650      	mov	r0, sl
   137b4:	4305      	orrs	r5, r0
   137b6:	2e00      	cmp	r6, #0
   137b8:	d1cf      	bne.n	1375a <__aeabi_dsub+0x3fa>
   137ba:	2d00      	cmp	r5, #0
   137bc:	d14f      	bne.n	1385e <__aeabi_dsub+0x4fe>
   137be:	000c      	movs	r4, r1
   137c0:	4314      	orrs	r4, r2
   137c2:	d100      	bne.n	137c6 <__aeabi_dsub+0x466>
   137c4:	e0a0      	b.n	13908 <__aeabi_dsub+0x5a8>
   137c6:	000c      	movs	r4, r1
   137c8:	0017      	movs	r7, r2
   137ca:	4698      	mov	r8, r3
   137cc:	e64e      	b.n	1346c <__aeabi_dsub+0x10c>
   137ce:	4666      	mov	r6, ip
   137d0:	2400      	movs	r4, #0
   137d2:	2700      	movs	r7, #0
   137d4:	e685      	b.n	134e2 <__aeabi_dsub+0x182>
   137d6:	001f      	movs	r7, r3
   137d8:	0008      	movs	r0, r1
   137da:	3f20      	subs	r7, #32
   137dc:	40f8      	lsrs	r0, r7
   137de:	0007      	movs	r7, r0
   137e0:	2b20      	cmp	r3, #32
   137e2:	d100      	bne.n	137e6 <__aeabi_dsub+0x486>
   137e4:	e08e      	b.n	13904 <__aeabi_dsub+0x5a4>
   137e6:	2040      	movs	r0, #64	; 0x40
   137e8:	1ac3      	subs	r3, r0, r3
   137ea:	4099      	lsls	r1, r3
   137ec:	430a      	orrs	r2, r1
   137ee:	1e51      	subs	r1, r2, #1
   137f0:	418a      	sbcs	r2, r1
   137f2:	2100      	movs	r1, #0
   137f4:	4317      	orrs	r7, r2
   137f6:	e692      	b.n	1351e <__aeabi_dsub+0x1be>
   137f8:	2e00      	cmp	r6, #0
   137fa:	d114      	bne.n	13826 <__aeabi_dsub+0x4c6>
   137fc:	0026      	movs	r6, r4
   137fe:	4650      	mov	r0, sl
   13800:	4306      	orrs	r6, r0
   13802:	d062      	beq.n	138ca <__aeabi_dsub+0x56a>
   13804:	43db      	mvns	r3, r3
   13806:	2b00      	cmp	r3, #0
   13808:	d15c      	bne.n	138c4 <__aeabi_dsub+0x564>
   1380a:	1887      	adds	r7, r0, r2
   1380c:	4297      	cmp	r7, r2
   1380e:	4192      	sbcs	r2, r2
   13810:	1864      	adds	r4, r4, r1
   13812:	4252      	negs	r2, r2
   13814:	18a4      	adds	r4, r4, r2
   13816:	4666      	mov	r6, ip
   13818:	e687      	b.n	1352a <__aeabi_dsub+0x1ca>
   1381a:	4650      	mov	r0, sl
   1381c:	4320      	orrs	r0, r4
   1381e:	1e44      	subs	r4, r0, #1
   13820:	41a0      	sbcs	r0, r4
   13822:	2400      	movs	r4, #0
   13824:	e760      	b.n	136e8 <__aeabi_dsub+0x388>
   13826:	4e57      	ldr	r6, [pc, #348]	; (13984 <__aeabi_dsub+0x624>)
   13828:	45b4      	cmp	ip, r6
   1382a:	d04e      	beq.n	138ca <__aeabi_dsub+0x56a>
   1382c:	2680      	movs	r6, #128	; 0x80
   1382e:	0436      	lsls	r6, r6, #16
   13830:	425b      	negs	r3, r3
   13832:	4334      	orrs	r4, r6
   13834:	2b38      	cmp	r3, #56	; 0x38
   13836:	dd00      	ble.n	1383a <__aeabi_dsub+0x4da>
   13838:	e07f      	b.n	1393a <__aeabi_dsub+0x5da>
   1383a:	2b1f      	cmp	r3, #31
   1383c:	dd00      	ble.n	13840 <__aeabi_dsub+0x4e0>
   1383e:	e08b      	b.n	13958 <__aeabi_dsub+0x5f8>
   13840:	2620      	movs	r6, #32
   13842:	0027      	movs	r7, r4
   13844:	4650      	mov	r0, sl
   13846:	1af6      	subs	r6, r6, r3
   13848:	40b7      	lsls	r7, r6
   1384a:	40d8      	lsrs	r0, r3
   1384c:	4307      	orrs	r7, r0
   1384e:	4650      	mov	r0, sl
   13850:	40b0      	lsls	r0, r6
   13852:	1e46      	subs	r6, r0, #1
   13854:	41b0      	sbcs	r0, r6
   13856:	4307      	orrs	r7, r0
   13858:	40dc      	lsrs	r4, r3
   1385a:	18bf      	adds	r7, r7, r2
   1385c:	e7d6      	b.n	1380c <__aeabi_dsub+0x4ac>
   1385e:	000d      	movs	r5, r1
   13860:	4315      	orrs	r5, r2
   13862:	d100      	bne.n	13866 <__aeabi_dsub+0x506>
   13864:	e602      	b.n	1346c <__aeabi_dsub+0x10c>
   13866:	4650      	mov	r0, sl
   13868:	1a80      	subs	r0, r0, r2
   1386a:	4582      	cmp	sl, r0
   1386c:	41bf      	sbcs	r7, r7
   1386e:	1a65      	subs	r5, r4, r1
   13870:	427f      	negs	r7, r7
   13872:	1bed      	subs	r5, r5, r7
   13874:	4684      	mov	ip, r0
   13876:	0228      	lsls	r0, r5, #8
   13878:	d400      	bmi.n	1387c <__aeabi_dsub+0x51c>
   1387a:	e68d      	b.n	13598 <__aeabi_dsub+0x238>
   1387c:	4650      	mov	r0, sl
   1387e:	1a17      	subs	r7, r2, r0
   13880:	42ba      	cmp	r2, r7
   13882:	4192      	sbcs	r2, r2
   13884:	1b0c      	subs	r4, r1, r4
   13886:	4252      	negs	r2, r2
   13888:	1aa4      	subs	r4, r4, r2
   1388a:	4698      	mov	r8, r3
   1388c:	e5ee      	b.n	1346c <__aeabi_dsub+0x10c>
   1388e:	000d      	movs	r5, r1
   13890:	4315      	orrs	r5, r2
   13892:	d100      	bne.n	13896 <__aeabi_dsub+0x536>
   13894:	e76b      	b.n	1376e <__aeabi_dsub+0x40e>
   13896:	4650      	mov	r0, sl
   13898:	0767      	lsls	r7, r4, #29
   1389a:	08c0      	lsrs	r0, r0, #3
   1389c:	4307      	orrs	r7, r0
   1389e:	2080      	movs	r0, #128	; 0x80
   138a0:	08e4      	lsrs	r4, r4, #3
   138a2:	0300      	lsls	r0, r0, #12
   138a4:	4204      	tst	r4, r0
   138a6:	d007      	beq.n	138b8 <__aeabi_dsub+0x558>
   138a8:	08cd      	lsrs	r5, r1, #3
   138aa:	4205      	tst	r5, r0
   138ac:	d104      	bne.n	138b8 <__aeabi_dsub+0x558>
   138ae:	002c      	movs	r4, r5
   138b0:	4698      	mov	r8, r3
   138b2:	08d7      	lsrs	r7, r2, #3
   138b4:	0749      	lsls	r1, r1, #29
   138b6:	430f      	orrs	r7, r1
   138b8:	0f7b      	lsrs	r3, r7, #29
   138ba:	00e4      	lsls	r4, r4, #3
   138bc:	431c      	orrs	r4, r3
   138be:	00ff      	lsls	r7, r7, #3
   138c0:	4e30      	ldr	r6, [pc, #192]	; (13984 <__aeabi_dsub+0x624>)
   138c2:	e5d3      	b.n	1346c <__aeabi_dsub+0x10c>
   138c4:	4e2f      	ldr	r6, [pc, #188]	; (13984 <__aeabi_dsub+0x624>)
   138c6:	45b4      	cmp	ip, r6
   138c8:	d1b4      	bne.n	13834 <__aeabi_dsub+0x4d4>
   138ca:	000c      	movs	r4, r1
   138cc:	0017      	movs	r7, r2
   138ce:	4666      	mov	r6, ip
   138d0:	e5cc      	b.n	1346c <__aeabi_dsub+0x10c>
   138d2:	2700      	movs	r7, #0
   138d4:	2400      	movs	r4, #0
   138d6:	e5e8      	b.n	134aa <__aeabi_dsub+0x14a>
   138d8:	2b00      	cmp	r3, #0
   138da:	d039      	beq.n	13950 <__aeabi_dsub+0x5f0>
   138dc:	000b      	movs	r3, r1
   138de:	4313      	orrs	r3, r2
   138e0:	d100      	bne.n	138e4 <__aeabi_dsub+0x584>
   138e2:	e744      	b.n	1376e <__aeabi_dsub+0x40e>
   138e4:	08c0      	lsrs	r0, r0, #3
   138e6:	0767      	lsls	r7, r4, #29
   138e8:	4307      	orrs	r7, r0
   138ea:	2080      	movs	r0, #128	; 0x80
   138ec:	08e4      	lsrs	r4, r4, #3
   138ee:	0300      	lsls	r0, r0, #12
   138f0:	4204      	tst	r4, r0
   138f2:	d0e1      	beq.n	138b8 <__aeabi_dsub+0x558>
   138f4:	08cb      	lsrs	r3, r1, #3
   138f6:	4203      	tst	r3, r0
   138f8:	d1de      	bne.n	138b8 <__aeabi_dsub+0x558>
   138fa:	08d7      	lsrs	r7, r2, #3
   138fc:	0749      	lsls	r1, r1, #29
   138fe:	430f      	orrs	r7, r1
   13900:	001c      	movs	r4, r3
   13902:	e7d9      	b.n	138b8 <__aeabi_dsub+0x558>
   13904:	2100      	movs	r1, #0
   13906:	e771      	b.n	137ec <__aeabi_dsub+0x48c>
   13908:	2500      	movs	r5, #0
   1390a:	2700      	movs	r7, #0
   1390c:	e5e9      	b.n	134e2 <__aeabi_dsub+0x182>
   1390e:	002e      	movs	r6, r5
   13910:	0027      	movs	r7, r4
   13912:	3e20      	subs	r6, #32
   13914:	40f7      	lsrs	r7, r6
   13916:	2d20      	cmp	r5, #32
   13918:	d02f      	beq.n	1397a <__aeabi_dsub+0x61a>
   1391a:	2640      	movs	r6, #64	; 0x40
   1391c:	1b75      	subs	r5, r6, r5
   1391e:	40ac      	lsls	r4, r5
   13920:	4650      	mov	r0, sl
   13922:	4320      	orrs	r0, r4
   13924:	1e44      	subs	r4, r0, #1
   13926:	41a0      	sbcs	r0, r4
   13928:	2400      	movs	r4, #0
   1392a:	4338      	orrs	r0, r7
   1392c:	e6dc      	b.n	136e8 <__aeabi_dsub+0x388>
   1392e:	2480      	movs	r4, #128	; 0x80
   13930:	2500      	movs	r5, #0
   13932:	0324      	lsls	r4, r4, #12
   13934:	4e13      	ldr	r6, [pc, #76]	; (13984 <__aeabi_dsub+0x624>)
   13936:	2700      	movs	r7, #0
   13938:	e5d3      	b.n	134e2 <__aeabi_dsub+0x182>
   1393a:	4650      	mov	r0, sl
   1393c:	4320      	orrs	r0, r4
   1393e:	0007      	movs	r7, r0
   13940:	1e78      	subs	r0, r7, #1
   13942:	4187      	sbcs	r7, r0
   13944:	2400      	movs	r4, #0
   13946:	18bf      	adds	r7, r7, r2
   13948:	e760      	b.n	1380c <__aeabi_dsub+0x4ac>
   1394a:	000c      	movs	r4, r1
   1394c:	0017      	movs	r7, r2
   1394e:	e58d      	b.n	1346c <__aeabi_dsub+0x10c>
   13950:	000c      	movs	r4, r1
   13952:	0017      	movs	r7, r2
   13954:	4e0b      	ldr	r6, [pc, #44]	; (13984 <__aeabi_dsub+0x624>)
   13956:	e589      	b.n	1346c <__aeabi_dsub+0x10c>
   13958:	001e      	movs	r6, r3
   1395a:	0027      	movs	r7, r4
   1395c:	3e20      	subs	r6, #32
   1395e:	40f7      	lsrs	r7, r6
   13960:	2b20      	cmp	r3, #32
   13962:	d00c      	beq.n	1397e <__aeabi_dsub+0x61e>
   13964:	2640      	movs	r6, #64	; 0x40
   13966:	1af3      	subs	r3, r6, r3
   13968:	409c      	lsls	r4, r3
   1396a:	4650      	mov	r0, sl
   1396c:	4320      	orrs	r0, r4
   1396e:	1e44      	subs	r4, r0, #1
   13970:	41a0      	sbcs	r0, r4
   13972:	4307      	orrs	r7, r0
   13974:	2400      	movs	r4, #0
   13976:	18bf      	adds	r7, r7, r2
   13978:	e748      	b.n	1380c <__aeabi_dsub+0x4ac>
   1397a:	2400      	movs	r4, #0
   1397c:	e7d0      	b.n	13920 <__aeabi_dsub+0x5c0>
   1397e:	2400      	movs	r4, #0
   13980:	e7f3      	b.n	1396a <__aeabi_dsub+0x60a>
   13982:	46c0      	nop			; (mov r8, r8)
   13984:	000007ff 	.word	0x000007ff
   13988:	ff7fffff 	.word	0xff7fffff

0001398c <__aeabi_d2iz>:
   1398c:	b530      	push	{r4, r5, lr}
   1398e:	4d13      	ldr	r5, [pc, #76]	; (139dc <__aeabi_d2iz+0x50>)
   13990:	030a      	lsls	r2, r1, #12
   13992:	004b      	lsls	r3, r1, #1
   13994:	0b12      	lsrs	r2, r2, #12
   13996:	0d5b      	lsrs	r3, r3, #21
   13998:	0fc9      	lsrs	r1, r1, #31
   1399a:	2400      	movs	r4, #0
   1399c:	42ab      	cmp	r3, r5
   1399e:	dd10      	ble.n	139c2 <__aeabi_d2iz+0x36>
   139a0:	4c0f      	ldr	r4, [pc, #60]	; (139e0 <__aeabi_d2iz+0x54>)
   139a2:	42a3      	cmp	r3, r4
   139a4:	dc0f      	bgt.n	139c6 <__aeabi_d2iz+0x3a>
   139a6:	2480      	movs	r4, #128	; 0x80
   139a8:	4d0e      	ldr	r5, [pc, #56]	; (139e4 <__aeabi_d2iz+0x58>)
   139aa:	0364      	lsls	r4, r4, #13
   139ac:	4322      	orrs	r2, r4
   139ae:	1aed      	subs	r5, r5, r3
   139b0:	2d1f      	cmp	r5, #31
   139b2:	dd0b      	ble.n	139cc <__aeabi_d2iz+0x40>
   139b4:	480c      	ldr	r0, [pc, #48]	; (139e8 <__aeabi_d2iz+0x5c>)
   139b6:	1ac3      	subs	r3, r0, r3
   139b8:	40da      	lsrs	r2, r3
   139ba:	4254      	negs	r4, r2
   139bc:	2900      	cmp	r1, #0
   139be:	d100      	bne.n	139c2 <__aeabi_d2iz+0x36>
   139c0:	0014      	movs	r4, r2
   139c2:	0020      	movs	r0, r4
   139c4:	bd30      	pop	{r4, r5, pc}
   139c6:	4b09      	ldr	r3, [pc, #36]	; (139ec <__aeabi_d2iz+0x60>)
   139c8:	18cc      	adds	r4, r1, r3
   139ca:	e7fa      	b.n	139c2 <__aeabi_d2iz+0x36>
   139cc:	4c08      	ldr	r4, [pc, #32]	; (139f0 <__aeabi_d2iz+0x64>)
   139ce:	40e8      	lsrs	r0, r5
   139d0:	46a4      	mov	ip, r4
   139d2:	4463      	add	r3, ip
   139d4:	409a      	lsls	r2, r3
   139d6:	4302      	orrs	r2, r0
   139d8:	e7ef      	b.n	139ba <__aeabi_d2iz+0x2e>
   139da:	46c0      	nop			; (mov r8, r8)
   139dc:	000003fe 	.word	0x000003fe
   139e0:	0000041d 	.word	0x0000041d
   139e4:	00000433 	.word	0x00000433
   139e8:	00000413 	.word	0x00000413
   139ec:	7fffffff 	.word	0x7fffffff
   139f0:	fffffbed 	.word	0xfffffbed

000139f4 <__aeabi_ui2d>:
   139f4:	b510      	push	{r4, lr}
   139f6:	1e04      	subs	r4, r0, #0
   139f8:	d028      	beq.n	13a4c <__aeabi_ui2d+0x58>
   139fa:	f000 f885 	bl	13b08 <__clzsi2>
   139fe:	4b15      	ldr	r3, [pc, #84]	; (13a54 <__aeabi_ui2d+0x60>)
   13a00:	4a15      	ldr	r2, [pc, #84]	; (13a58 <__aeabi_ui2d+0x64>)
   13a02:	1a1b      	subs	r3, r3, r0
   13a04:	1ad2      	subs	r2, r2, r3
   13a06:	2a1f      	cmp	r2, #31
   13a08:	dd15      	ble.n	13a36 <__aeabi_ui2d+0x42>
   13a0a:	4a14      	ldr	r2, [pc, #80]	; (13a5c <__aeabi_ui2d+0x68>)
   13a0c:	1ad2      	subs	r2, r2, r3
   13a0e:	4094      	lsls	r4, r2
   13a10:	2200      	movs	r2, #0
   13a12:	0324      	lsls	r4, r4, #12
   13a14:	055b      	lsls	r3, r3, #21
   13a16:	0b24      	lsrs	r4, r4, #12
   13a18:	0d5b      	lsrs	r3, r3, #21
   13a1a:	2100      	movs	r1, #0
   13a1c:	0010      	movs	r0, r2
   13a1e:	0324      	lsls	r4, r4, #12
   13a20:	0d0a      	lsrs	r2, r1, #20
   13a22:	0b24      	lsrs	r4, r4, #12
   13a24:	0512      	lsls	r2, r2, #20
   13a26:	4322      	orrs	r2, r4
   13a28:	4c0d      	ldr	r4, [pc, #52]	; (13a60 <__aeabi_ui2d+0x6c>)
   13a2a:	051b      	lsls	r3, r3, #20
   13a2c:	4022      	ands	r2, r4
   13a2e:	4313      	orrs	r3, r2
   13a30:	005b      	lsls	r3, r3, #1
   13a32:	0859      	lsrs	r1, r3, #1
   13a34:	bd10      	pop	{r4, pc}
   13a36:	0021      	movs	r1, r4
   13a38:	4091      	lsls	r1, r2
   13a3a:	000a      	movs	r2, r1
   13a3c:	210b      	movs	r1, #11
   13a3e:	1a08      	subs	r0, r1, r0
   13a40:	40c4      	lsrs	r4, r0
   13a42:	055b      	lsls	r3, r3, #21
   13a44:	0324      	lsls	r4, r4, #12
   13a46:	0b24      	lsrs	r4, r4, #12
   13a48:	0d5b      	lsrs	r3, r3, #21
   13a4a:	e7e6      	b.n	13a1a <__aeabi_ui2d+0x26>
   13a4c:	2300      	movs	r3, #0
   13a4e:	2400      	movs	r4, #0
   13a50:	2200      	movs	r2, #0
   13a52:	e7e2      	b.n	13a1a <__aeabi_ui2d+0x26>
   13a54:	0000041e 	.word	0x0000041e
   13a58:	00000433 	.word	0x00000433
   13a5c:	00000413 	.word	0x00000413
   13a60:	800fffff 	.word	0x800fffff

00013a64 <__aeabi_f2d>:
   13a64:	0041      	lsls	r1, r0, #1
   13a66:	0e09      	lsrs	r1, r1, #24
   13a68:	1c4b      	adds	r3, r1, #1
   13a6a:	b570      	push	{r4, r5, r6, lr}
   13a6c:	b2db      	uxtb	r3, r3
   13a6e:	0246      	lsls	r6, r0, #9
   13a70:	0a75      	lsrs	r5, r6, #9
   13a72:	0fc4      	lsrs	r4, r0, #31
   13a74:	2b01      	cmp	r3, #1
   13a76:	dd14      	ble.n	13aa2 <__aeabi_f2d+0x3e>
   13a78:	23e0      	movs	r3, #224	; 0xe0
   13a7a:	009b      	lsls	r3, r3, #2
   13a7c:	076d      	lsls	r5, r5, #29
   13a7e:	0b36      	lsrs	r6, r6, #12
   13a80:	18cb      	adds	r3, r1, r3
   13a82:	2100      	movs	r1, #0
   13a84:	0d0a      	lsrs	r2, r1, #20
   13a86:	0028      	movs	r0, r5
   13a88:	0512      	lsls	r2, r2, #20
   13a8a:	4d1c      	ldr	r5, [pc, #112]	; (13afc <__aeabi_f2d+0x98>)
   13a8c:	4332      	orrs	r2, r6
   13a8e:	055b      	lsls	r3, r3, #21
   13a90:	402a      	ands	r2, r5
   13a92:	085b      	lsrs	r3, r3, #1
   13a94:	4313      	orrs	r3, r2
   13a96:	005b      	lsls	r3, r3, #1
   13a98:	07e4      	lsls	r4, r4, #31
   13a9a:	085b      	lsrs	r3, r3, #1
   13a9c:	4323      	orrs	r3, r4
   13a9e:	0019      	movs	r1, r3
   13aa0:	bd70      	pop	{r4, r5, r6, pc}
   13aa2:	2900      	cmp	r1, #0
   13aa4:	d114      	bne.n	13ad0 <__aeabi_f2d+0x6c>
   13aa6:	2d00      	cmp	r5, #0
   13aa8:	d01e      	beq.n	13ae8 <__aeabi_f2d+0x84>
   13aaa:	0028      	movs	r0, r5
   13aac:	f000 f82c 	bl	13b08 <__clzsi2>
   13ab0:	280a      	cmp	r0, #10
   13ab2:	dc1c      	bgt.n	13aee <__aeabi_f2d+0x8a>
   13ab4:	230b      	movs	r3, #11
   13ab6:	002a      	movs	r2, r5
   13ab8:	1a1b      	subs	r3, r3, r0
   13aba:	40da      	lsrs	r2, r3
   13abc:	0003      	movs	r3, r0
   13abe:	3315      	adds	r3, #21
   13ac0:	409d      	lsls	r5, r3
   13ac2:	4b0f      	ldr	r3, [pc, #60]	; (13b00 <__aeabi_f2d+0x9c>)
   13ac4:	0312      	lsls	r2, r2, #12
   13ac6:	1a1b      	subs	r3, r3, r0
   13ac8:	055b      	lsls	r3, r3, #21
   13aca:	0b16      	lsrs	r6, r2, #12
   13acc:	0d5b      	lsrs	r3, r3, #21
   13ace:	e7d8      	b.n	13a82 <__aeabi_f2d+0x1e>
   13ad0:	2d00      	cmp	r5, #0
   13ad2:	d006      	beq.n	13ae2 <__aeabi_f2d+0x7e>
   13ad4:	0b32      	lsrs	r2, r6, #12
   13ad6:	2680      	movs	r6, #128	; 0x80
   13ad8:	0336      	lsls	r6, r6, #12
   13ada:	076d      	lsls	r5, r5, #29
   13adc:	4316      	orrs	r6, r2
   13ade:	4b09      	ldr	r3, [pc, #36]	; (13b04 <__aeabi_f2d+0xa0>)
   13ae0:	e7cf      	b.n	13a82 <__aeabi_f2d+0x1e>
   13ae2:	4b08      	ldr	r3, [pc, #32]	; (13b04 <__aeabi_f2d+0xa0>)
   13ae4:	2600      	movs	r6, #0
   13ae6:	e7cc      	b.n	13a82 <__aeabi_f2d+0x1e>
   13ae8:	2300      	movs	r3, #0
   13aea:	2600      	movs	r6, #0
   13aec:	e7c9      	b.n	13a82 <__aeabi_f2d+0x1e>
   13aee:	0003      	movs	r3, r0
   13af0:	002a      	movs	r2, r5
   13af2:	3b0b      	subs	r3, #11
   13af4:	409a      	lsls	r2, r3
   13af6:	2500      	movs	r5, #0
   13af8:	e7e3      	b.n	13ac2 <__aeabi_f2d+0x5e>
   13afa:	46c0      	nop			; (mov r8, r8)
   13afc:	800fffff 	.word	0x800fffff
   13b00:	00000389 	.word	0x00000389
   13b04:	000007ff 	.word	0x000007ff

00013b08 <__clzsi2>:
   13b08:	211c      	movs	r1, #28
   13b0a:	2301      	movs	r3, #1
   13b0c:	041b      	lsls	r3, r3, #16
   13b0e:	4298      	cmp	r0, r3
   13b10:	d301      	bcc.n	13b16 <__clzsi2+0xe>
   13b12:	0c00      	lsrs	r0, r0, #16
   13b14:	3910      	subs	r1, #16
   13b16:	0a1b      	lsrs	r3, r3, #8
   13b18:	4298      	cmp	r0, r3
   13b1a:	d301      	bcc.n	13b20 <__clzsi2+0x18>
   13b1c:	0a00      	lsrs	r0, r0, #8
   13b1e:	3908      	subs	r1, #8
   13b20:	091b      	lsrs	r3, r3, #4
   13b22:	4298      	cmp	r0, r3
   13b24:	d301      	bcc.n	13b2a <__clzsi2+0x22>
   13b26:	0900      	lsrs	r0, r0, #4
   13b28:	3904      	subs	r1, #4
   13b2a:	a202      	add	r2, pc, #8	; (adr r2, 13b34 <__clzsi2+0x2c>)
   13b2c:	5c10      	ldrb	r0, [r2, r0]
   13b2e:	1840      	adds	r0, r0, r1
   13b30:	4770      	bx	lr
   13b32:	46c0      	nop			; (mov r8, r8)
   13b34:	02020304 	.word	0x02020304
   13b38:	01010101 	.word	0x01010101
	...

00013b44 <__clzdi2>:
   13b44:	b510      	push	{r4, lr}
   13b46:	2900      	cmp	r1, #0
   13b48:	d103      	bne.n	13b52 <__clzdi2+0xe>
   13b4a:	f7ff ffdd 	bl	13b08 <__clzsi2>
   13b4e:	3020      	adds	r0, #32
   13b50:	e002      	b.n	13b58 <__clzdi2+0x14>
   13b52:	1c08      	adds	r0, r1, #0
   13b54:	f7ff ffd8 	bl	13b08 <__clzsi2>
   13b58:	bd10      	pop	{r4, pc}
   13b5a:	46c0      	nop			; (mov r8, r8)

00013b5c <__aeabi_d2uiz>:
   13b5c:	b570      	push	{r4, r5, r6, lr}
   13b5e:	2200      	movs	r2, #0
   13b60:	4b0c      	ldr	r3, [pc, #48]	; (13b94 <__aeabi_d2uiz+0x38>)
   13b62:	0004      	movs	r4, r0
   13b64:	000d      	movs	r5, r1
   13b66:	f000 f84b 	bl	13c00 <__aeabi_dcmpge>
   13b6a:	2800      	cmp	r0, #0
   13b6c:	d104      	bne.n	13b78 <__aeabi_d2uiz+0x1c>
   13b6e:	0020      	movs	r0, r4
   13b70:	0029      	movs	r1, r5
   13b72:	f7ff ff0b 	bl	1398c <__aeabi_d2iz>
   13b76:	bd70      	pop	{r4, r5, r6, pc}
   13b78:	4b06      	ldr	r3, [pc, #24]	; (13b94 <__aeabi_d2uiz+0x38>)
   13b7a:	2200      	movs	r2, #0
   13b7c:	0020      	movs	r0, r4
   13b7e:	0029      	movs	r1, r5
   13b80:	f7ff fbee 	bl	13360 <__aeabi_dsub>
   13b84:	f7ff ff02 	bl	1398c <__aeabi_d2iz>
   13b88:	2380      	movs	r3, #128	; 0x80
   13b8a:	061b      	lsls	r3, r3, #24
   13b8c:	469c      	mov	ip, r3
   13b8e:	4460      	add	r0, ip
   13b90:	e7f1      	b.n	13b76 <__aeabi_d2uiz+0x1a>
   13b92:	46c0      	nop			; (mov r8, r8)
   13b94:	41e00000 	.word	0x41e00000

00013b98 <__aeabi_cdrcmple>:
   13b98:	4684      	mov	ip, r0
   13b9a:	1c10      	adds	r0, r2, #0
   13b9c:	4662      	mov	r2, ip
   13b9e:	468c      	mov	ip, r1
   13ba0:	1c19      	adds	r1, r3, #0
   13ba2:	4663      	mov	r3, ip
   13ba4:	e000      	b.n	13ba8 <__aeabi_cdcmpeq>
   13ba6:	46c0      	nop			; (mov r8, r8)

00013ba8 <__aeabi_cdcmpeq>:
   13ba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   13baa:	f000 f8d1 	bl	13d50 <__ledf2>
   13bae:	2800      	cmp	r0, #0
   13bb0:	d401      	bmi.n	13bb6 <__aeabi_cdcmpeq+0xe>
   13bb2:	2100      	movs	r1, #0
   13bb4:	42c8      	cmn	r0, r1
   13bb6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00013bb8 <__aeabi_dcmpeq>:
   13bb8:	b510      	push	{r4, lr}
   13bba:	f000 f82b 	bl	13c14 <__eqdf2>
   13bbe:	4240      	negs	r0, r0
   13bc0:	3001      	adds	r0, #1
   13bc2:	bd10      	pop	{r4, pc}

00013bc4 <__aeabi_dcmplt>:
   13bc4:	b510      	push	{r4, lr}
   13bc6:	f000 f8c3 	bl	13d50 <__ledf2>
   13bca:	2800      	cmp	r0, #0
   13bcc:	db01      	blt.n	13bd2 <__aeabi_dcmplt+0xe>
   13bce:	2000      	movs	r0, #0
   13bd0:	bd10      	pop	{r4, pc}
   13bd2:	2001      	movs	r0, #1
   13bd4:	bd10      	pop	{r4, pc}
   13bd6:	46c0      	nop			; (mov r8, r8)

00013bd8 <__aeabi_dcmple>:
   13bd8:	b510      	push	{r4, lr}
   13bda:	f000 f8b9 	bl	13d50 <__ledf2>
   13bde:	2800      	cmp	r0, #0
   13be0:	dd01      	ble.n	13be6 <__aeabi_dcmple+0xe>
   13be2:	2000      	movs	r0, #0
   13be4:	bd10      	pop	{r4, pc}
   13be6:	2001      	movs	r0, #1
   13be8:	bd10      	pop	{r4, pc}
   13bea:	46c0      	nop			; (mov r8, r8)

00013bec <__aeabi_dcmpgt>:
   13bec:	b510      	push	{r4, lr}
   13bee:	f000 f84b 	bl	13c88 <__gedf2>
   13bf2:	2800      	cmp	r0, #0
   13bf4:	dc01      	bgt.n	13bfa <__aeabi_dcmpgt+0xe>
   13bf6:	2000      	movs	r0, #0
   13bf8:	bd10      	pop	{r4, pc}
   13bfa:	2001      	movs	r0, #1
   13bfc:	bd10      	pop	{r4, pc}
   13bfe:	46c0      	nop			; (mov r8, r8)

00013c00 <__aeabi_dcmpge>:
   13c00:	b510      	push	{r4, lr}
   13c02:	f000 f841 	bl	13c88 <__gedf2>
   13c06:	2800      	cmp	r0, #0
   13c08:	da01      	bge.n	13c0e <__aeabi_dcmpge+0xe>
   13c0a:	2000      	movs	r0, #0
   13c0c:	bd10      	pop	{r4, pc}
   13c0e:	2001      	movs	r0, #1
   13c10:	bd10      	pop	{r4, pc}
   13c12:	46c0      	nop			; (mov r8, r8)

00013c14 <__eqdf2>:
   13c14:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c16:	464f      	mov	r7, r9
   13c18:	4646      	mov	r6, r8
   13c1a:	46d6      	mov	lr, sl
   13c1c:	005c      	lsls	r4, r3, #1
   13c1e:	b5c0      	push	{r6, r7, lr}
   13c20:	031f      	lsls	r7, r3, #12
   13c22:	0fdb      	lsrs	r3, r3, #31
   13c24:	469a      	mov	sl, r3
   13c26:	4b17      	ldr	r3, [pc, #92]	; (13c84 <__eqdf2+0x70>)
   13c28:	030e      	lsls	r6, r1, #12
   13c2a:	004d      	lsls	r5, r1, #1
   13c2c:	4684      	mov	ip, r0
   13c2e:	4680      	mov	r8, r0
   13c30:	0b36      	lsrs	r6, r6, #12
   13c32:	0d6d      	lsrs	r5, r5, #21
   13c34:	0fc9      	lsrs	r1, r1, #31
   13c36:	4691      	mov	r9, r2
   13c38:	0b3f      	lsrs	r7, r7, #12
   13c3a:	0d64      	lsrs	r4, r4, #21
   13c3c:	2001      	movs	r0, #1
   13c3e:	429d      	cmp	r5, r3
   13c40:	d008      	beq.n	13c54 <__eqdf2+0x40>
   13c42:	429c      	cmp	r4, r3
   13c44:	d001      	beq.n	13c4a <__eqdf2+0x36>
   13c46:	42a5      	cmp	r5, r4
   13c48:	d00b      	beq.n	13c62 <__eqdf2+0x4e>
   13c4a:	bc1c      	pop	{r2, r3, r4}
   13c4c:	4690      	mov	r8, r2
   13c4e:	4699      	mov	r9, r3
   13c50:	46a2      	mov	sl, r4
   13c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13c54:	4663      	mov	r3, ip
   13c56:	4333      	orrs	r3, r6
   13c58:	d1f7      	bne.n	13c4a <__eqdf2+0x36>
   13c5a:	42ac      	cmp	r4, r5
   13c5c:	d1f5      	bne.n	13c4a <__eqdf2+0x36>
   13c5e:	433a      	orrs	r2, r7
   13c60:	d1f3      	bne.n	13c4a <__eqdf2+0x36>
   13c62:	2001      	movs	r0, #1
   13c64:	42be      	cmp	r6, r7
   13c66:	d1f0      	bne.n	13c4a <__eqdf2+0x36>
   13c68:	45c8      	cmp	r8, r9
   13c6a:	d1ee      	bne.n	13c4a <__eqdf2+0x36>
   13c6c:	4551      	cmp	r1, sl
   13c6e:	d007      	beq.n	13c80 <__eqdf2+0x6c>
   13c70:	2d00      	cmp	r5, #0
   13c72:	d1ea      	bne.n	13c4a <__eqdf2+0x36>
   13c74:	4663      	mov	r3, ip
   13c76:	431e      	orrs	r6, r3
   13c78:	0030      	movs	r0, r6
   13c7a:	1e46      	subs	r6, r0, #1
   13c7c:	41b0      	sbcs	r0, r6
   13c7e:	e7e4      	b.n	13c4a <__eqdf2+0x36>
   13c80:	2000      	movs	r0, #0
   13c82:	e7e2      	b.n	13c4a <__eqdf2+0x36>
   13c84:	000007ff 	.word	0x000007ff

00013c88 <__gedf2>:
   13c88:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c8a:	4645      	mov	r5, r8
   13c8c:	46de      	mov	lr, fp
   13c8e:	4657      	mov	r7, sl
   13c90:	464e      	mov	r6, r9
   13c92:	b5e0      	push	{r5, r6, r7, lr}
   13c94:	031f      	lsls	r7, r3, #12
   13c96:	0b3d      	lsrs	r5, r7, #12
   13c98:	4f2c      	ldr	r7, [pc, #176]	; (13d4c <__gedf2+0xc4>)
   13c9a:	030e      	lsls	r6, r1, #12
   13c9c:	004c      	lsls	r4, r1, #1
   13c9e:	46ab      	mov	fp, r5
   13ca0:	005d      	lsls	r5, r3, #1
   13ca2:	4684      	mov	ip, r0
   13ca4:	0b36      	lsrs	r6, r6, #12
   13ca6:	0d64      	lsrs	r4, r4, #21
   13ca8:	0fc9      	lsrs	r1, r1, #31
   13caa:	4690      	mov	r8, r2
   13cac:	0d6d      	lsrs	r5, r5, #21
   13cae:	0fdb      	lsrs	r3, r3, #31
   13cb0:	42bc      	cmp	r4, r7
   13cb2:	d02a      	beq.n	13d0a <__gedf2+0x82>
   13cb4:	4f25      	ldr	r7, [pc, #148]	; (13d4c <__gedf2+0xc4>)
   13cb6:	42bd      	cmp	r5, r7
   13cb8:	d02d      	beq.n	13d16 <__gedf2+0x8e>
   13cba:	2c00      	cmp	r4, #0
   13cbc:	d10f      	bne.n	13cde <__gedf2+0x56>
   13cbe:	4330      	orrs	r0, r6
   13cc0:	0007      	movs	r7, r0
   13cc2:	4681      	mov	r9, r0
   13cc4:	4278      	negs	r0, r7
   13cc6:	4178      	adcs	r0, r7
   13cc8:	b2c0      	uxtb	r0, r0
   13cca:	2d00      	cmp	r5, #0
   13ccc:	d117      	bne.n	13cfe <__gedf2+0x76>
   13cce:	465f      	mov	r7, fp
   13cd0:	433a      	orrs	r2, r7
   13cd2:	d114      	bne.n	13cfe <__gedf2+0x76>
   13cd4:	464b      	mov	r3, r9
   13cd6:	2000      	movs	r0, #0
   13cd8:	2b00      	cmp	r3, #0
   13cda:	d00a      	beq.n	13cf2 <__gedf2+0x6a>
   13cdc:	e006      	b.n	13cec <__gedf2+0x64>
   13cde:	2d00      	cmp	r5, #0
   13ce0:	d102      	bne.n	13ce8 <__gedf2+0x60>
   13ce2:	4658      	mov	r0, fp
   13ce4:	4302      	orrs	r2, r0
   13ce6:	d001      	beq.n	13cec <__gedf2+0x64>
   13ce8:	4299      	cmp	r1, r3
   13cea:	d018      	beq.n	13d1e <__gedf2+0x96>
   13cec:	4248      	negs	r0, r1
   13cee:	2101      	movs	r1, #1
   13cf0:	4308      	orrs	r0, r1
   13cf2:	bc3c      	pop	{r2, r3, r4, r5}
   13cf4:	4690      	mov	r8, r2
   13cf6:	4699      	mov	r9, r3
   13cf8:	46a2      	mov	sl, r4
   13cfa:	46ab      	mov	fp, r5
   13cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13cfe:	2800      	cmp	r0, #0
   13d00:	d0f2      	beq.n	13ce8 <__gedf2+0x60>
   13d02:	2001      	movs	r0, #1
   13d04:	3b01      	subs	r3, #1
   13d06:	4318      	orrs	r0, r3
   13d08:	e7f3      	b.n	13cf2 <__gedf2+0x6a>
   13d0a:	0037      	movs	r7, r6
   13d0c:	4307      	orrs	r7, r0
   13d0e:	d0d1      	beq.n	13cb4 <__gedf2+0x2c>
   13d10:	2002      	movs	r0, #2
   13d12:	4240      	negs	r0, r0
   13d14:	e7ed      	b.n	13cf2 <__gedf2+0x6a>
   13d16:	465f      	mov	r7, fp
   13d18:	4317      	orrs	r7, r2
   13d1a:	d0ce      	beq.n	13cba <__gedf2+0x32>
   13d1c:	e7f8      	b.n	13d10 <__gedf2+0x88>
   13d1e:	42ac      	cmp	r4, r5
   13d20:	dce4      	bgt.n	13cec <__gedf2+0x64>
   13d22:	da03      	bge.n	13d2c <__gedf2+0xa4>
   13d24:	1e48      	subs	r0, r1, #1
   13d26:	2101      	movs	r1, #1
   13d28:	4308      	orrs	r0, r1
   13d2a:	e7e2      	b.n	13cf2 <__gedf2+0x6a>
   13d2c:	455e      	cmp	r6, fp
   13d2e:	d8dd      	bhi.n	13cec <__gedf2+0x64>
   13d30:	d006      	beq.n	13d40 <__gedf2+0xb8>
   13d32:	2000      	movs	r0, #0
   13d34:	455e      	cmp	r6, fp
   13d36:	d2dc      	bcs.n	13cf2 <__gedf2+0x6a>
   13d38:	2301      	movs	r3, #1
   13d3a:	1e48      	subs	r0, r1, #1
   13d3c:	4318      	orrs	r0, r3
   13d3e:	e7d8      	b.n	13cf2 <__gedf2+0x6a>
   13d40:	45c4      	cmp	ip, r8
   13d42:	d8d3      	bhi.n	13cec <__gedf2+0x64>
   13d44:	2000      	movs	r0, #0
   13d46:	45c4      	cmp	ip, r8
   13d48:	d3f6      	bcc.n	13d38 <__gedf2+0xb0>
   13d4a:	e7d2      	b.n	13cf2 <__gedf2+0x6a>
   13d4c:	000007ff 	.word	0x000007ff

00013d50 <__ledf2>:
   13d50:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d52:	464e      	mov	r6, r9
   13d54:	4645      	mov	r5, r8
   13d56:	46de      	mov	lr, fp
   13d58:	4657      	mov	r7, sl
   13d5a:	005c      	lsls	r4, r3, #1
   13d5c:	b5e0      	push	{r5, r6, r7, lr}
   13d5e:	031f      	lsls	r7, r3, #12
   13d60:	0fdb      	lsrs	r3, r3, #31
   13d62:	4699      	mov	r9, r3
   13d64:	4b2a      	ldr	r3, [pc, #168]	; (13e10 <__ledf2+0xc0>)
   13d66:	030e      	lsls	r6, r1, #12
   13d68:	004d      	lsls	r5, r1, #1
   13d6a:	0fc9      	lsrs	r1, r1, #31
   13d6c:	4684      	mov	ip, r0
   13d6e:	0b36      	lsrs	r6, r6, #12
   13d70:	0d6d      	lsrs	r5, r5, #21
   13d72:	468b      	mov	fp, r1
   13d74:	4690      	mov	r8, r2
   13d76:	0b3f      	lsrs	r7, r7, #12
   13d78:	0d64      	lsrs	r4, r4, #21
   13d7a:	429d      	cmp	r5, r3
   13d7c:	d020      	beq.n	13dc0 <__ledf2+0x70>
   13d7e:	4b24      	ldr	r3, [pc, #144]	; (13e10 <__ledf2+0xc0>)
   13d80:	429c      	cmp	r4, r3
   13d82:	d022      	beq.n	13dca <__ledf2+0x7a>
   13d84:	2d00      	cmp	r5, #0
   13d86:	d112      	bne.n	13dae <__ledf2+0x5e>
   13d88:	4330      	orrs	r0, r6
   13d8a:	4243      	negs	r3, r0
   13d8c:	4143      	adcs	r3, r0
   13d8e:	b2db      	uxtb	r3, r3
   13d90:	2c00      	cmp	r4, #0
   13d92:	d01f      	beq.n	13dd4 <__ledf2+0x84>
   13d94:	2b00      	cmp	r3, #0
   13d96:	d00c      	beq.n	13db2 <__ledf2+0x62>
   13d98:	464b      	mov	r3, r9
   13d9a:	2001      	movs	r0, #1
   13d9c:	3b01      	subs	r3, #1
   13d9e:	4303      	orrs	r3, r0
   13da0:	0018      	movs	r0, r3
   13da2:	bc3c      	pop	{r2, r3, r4, r5}
   13da4:	4690      	mov	r8, r2
   13da6:	4699      	mov	r9, r3
   13da8:	46a2      	mov	sl, r4
   13daa:	46ab      	mov	fp, r5
   13dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13dae:	2c00      	cmp	r4, #0
   13db0:	d016      	beq.n	13de0 <__ledf2+0x90>
   13db2:	45cb      	cmp	fp, r9
   13db4:	d017      	beq.n	13de6 <__ledf2+0x96>
   13db6:	465b      	mov	r3, fp
   13db8:	4259      	negs	r1, r3
   13dba:	2301      	movs	r3, #1
   13dbc:	430b      	orrs	r3, r1
   13dbe:	e7ef      	b.n	13da0 <__ledf2+0x50>
   13dc0:	0031      	movs	r1, r6
   13dc2:	2302      	movs	r3, #2
   13dc4:	4301      	orrs	r1, r0
   13dc6:	d1eb      	bne.n	13da0 <__ledf2+0x50>
   13dc8:	e7d9      	b.n	13d7e <__ledf2+0x2e>
   13dca:	0039      	movs	r1, r7
   13dcc:	2302      	movs	r3, #2
   13dce:	4311      	orrs	r1, r2
   13dd0:	d1e6      	bne.n	13da0 <__ledf2+0x50>
   13dd2:	e7d7      	b.n	13d84 <__ledf2+0x34>
   13dd4:	433a      	orrs	r2, r7
   13dd6:	d1dd      	bne.n	13d94 <__ledf2+0x44>
   13dd8:	2300      	movs	r3, #0
   13dda:	2800      	cmp	r0, #0
   13ddc:	d0e0      	beq.n	13da0 <__ledf2+0x50>
   13dde:	e7ea      	b.n	13db6 <__ledf2+0x66>
   13de0:	433a      	orrs	r2, r7
   13de2:	d1e6      	bne.n	13db2 <__ledf2+0x62>
   13de4:	e7e7      	b.n	13db6 <__ledf2+0x66>
   13de6:	42a5      	cmp	r5, r4
   13de8:	dce5      	bgt.n	13db6 <__ledf2+0x66>
   13dea:	db05      	blt.n	13df8 <__ledf2+0xa8>
   13dec:	42be      	cmp	r6, r7
   13dee:	d8e2      	bhi.n	13db6 <__ledf2+0x66>
   13df0:	d007      	beq.n	13e02 <__ledf2+0xb2>
   13df2:	2300      	movs	r3, #0
   13df4:	42be      	cmp	r6, r7
   13df6:	d2d3      	bcs.n	13da0 <__ledf2+0x50>
   13df8:	4659      	mov	r1, fp
   13dfa:	2301      	movs	r3, #1
   13dfc:	3901      	subs	r1, #1
   13dfe:	430b      	orrs	r3, r1
   13e00:	e7ce      	b.n	13da0 <__ledf2+0x50>
   13e02:	45c4      	cmp	ip, r8
   13e04:	d8d7      	bhi.n	13db6 <__ledf2+0x66>
   13e06:	2300      	movs	r3, #0
   13e08:	45c4      	cmp	ip, r8
   13e0a:	d3f5      	bcc.n	13df8 <__ledf2+0xa8>
   13e0c:	e7c8      	b.n	13da0 <__ledf2+0x50>
   13e0e:	46c0      	nop			; (mov r8, r8)
   13e10:	000007ff 	.word	0x000007ff

00013e14 <__libc_init_array>:
   13e14:	b570      	push	{r4, r5, r6, lr}
   13e16:	4e0d      	ldr	r6, [pc, #52]	; (13e4c <__libc_init_array+0x38>)
   13e18:	4d0d      	ldr	r5, [pc, #52]	; (13e50 <__libc_init_array+0x3c>)
   13e1a:	2400      	movs	r4, #0
   13e1c:	1bad      	subs	r5, r5, r6
   13e1e:	10ad      	asrs	r5, r5, #2
   13e20:	d005      	beq.n	13e2e <__libc_init_array+0x1a>
   13e22:	00a3      	lsls	r3, r4, #2
   13e24:	58f3      	ldr	r3, [r6, r3]
   13e26:	3401      	adds	r4, #1
   13e28:	4798      	blx	r3
   13e2a:	42a5      	cmp	r5, r4
   13e2c:	d1f9      	bne.n	13e22 <__libc_init_array+0xe>
   13e2e:	f005 ffab 	bl	19d88 <_init>
   13e32:	4e08      	ldr	r6, [pc, #32]	; (13e54 <__libc_init_array+0x40>)
   13e34:	4d08      	ldr	r5, [pc, #32]	; (13e58 <__libc_init_array+0x44>)
   13e36:	2400      	movs	r4, #0
   13e38:	1bad      	subs	r5, r5, r6
   13e3a:	10ad      	asrs	r5, r5, #2
   13e3c:	d005      	beq.n	13e4a <__libc_init_array+0x36>
   13e3e:	00a3      	lsls	r3, r4, #2
   13e40:	58f3      	ldr	r3, [r6, r3]
   13e42:	3401      	adds	r4, #1
   13e44:	4798      	blx	r3
   13e46:	42a5      	cmp	r5, r4
   13e48:	d1f9      	bne.n	13e3e <__libc_init_array+0x2a>
   13e4a:	bd70      	pop	{r4, r5, r6, pc}
   13e4c:	00019d94 	.word	0x00019d94
   13e50:	00019d94 	.word	0x00019d94
   13e54:	00019d94 	.word	0x00019d94
   13e58:	00019d9c 	.word	0x00019d9c

00013e5c <memcpy>:
   13e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13e5e:	0005      	movs	r5, r0
   13e60:	2a0f      	cmp	r2, #15
   13e62:	d92f      	bls.n	13ec4 <memcpy+0x68>
   13e64:	000b      	movs	r3, r1
   13e66:	4303      	orrs	r3, r0
   13e68:	079b      	lsls	r3, r3, #30
   13e6a:	d134      	bne.n	13ed6 <memcpy+0x7a>
   13e6c:	0016      	movs	r6, r2
   13e6e:	000c      	movs	r4, r1
   13e70:	0003      	movs	r3, r0
   13e72:	3e10      	subs	r6, #16
   13e74:	0935      	lsrs	r5, r6, #4
   13e76:	3501      	adds	r5, #1
   13e78:	012d      	lsls	r5, r5, #4
   13e7a:	1945      	adds	r5, r0, r5
   13e7c:	6827      	ldr	r7, [r4, #0]
   13e7e:	601f      	str	r7, [r3, #0]
   13e80:	6867      	ldr	r7, [r4, #4]
   13e82:	605f      	str	r7, [r3, #4]
   13e84:	68a7      	ldr	r7, [r4, #8]
   13e86:	609f      	str	r7, [r3, #8]
   13e88:	68e7      	ldr	r7, [r4, #12]
   13e8a:	3410      	adds	r4, #16
   13e8c:	60df      	str	r7, [r3, #12]
   13e8e:	3310      	adds	r3, #16
   13e90:	429d      	cmp	r5, r3
   13e92:	d1f3      	bne.n	13e7c <memcpy+0x20>
   13e94:	230f      	movs	r3, #15
   13e96:	439e      	bics	r6, r3
   13e98:	3610      	adds	r6, #16
   13e9a:	1985      	adds	r5, r0, r6
   13e9c:	1989      	adds	r1, r1, r6
   13e9e:	4013      	ands	r3, r2
   13ea0:	2b03      	cmp	r3, #3
   13ea2:	d91a      	bls.n	13eda <memcpy+0x7e>
   13ea4:	1f1e      	subs	r6, r3, #4
   13ea6:	2300      	movs	r3, #0
   13ea8:	08b4      	lsrs	r4, r6, #2
   13eaa:	3401      	adds	r4, #1
   13eac:	00a4      	lsls	r4, r4, #2
   13eae:	58cf      	ldr	r7, [r1, r3]
   13eb0:	50ef      	str	r7, [r5, r3]
   13eb2:	3304      	adds	r3, #4
   13eb4:	42a3      	cmp	r3, r4
   13eb6:	d1fa      	bne.n	13eae <memcpy+0x52>
   13eb8:	2403      	movs	r4, #3
   13eba:	43a6      	bics	r6, r4
   13ebc:	1d33      	adds	r3, r6, #4
   13ebe:	4022      	ands	r2, r4
   13ec0:	18c9      	adds	r1, r1, r3
   13ec2:	18ed      	adds	r5, r5, r3
   13ec4:	2a00      	cmp	r2, #0
   13ec6:	d005      	beq.n	13ed4 <memcpy+0x78>
   13ec8:	2300      	movs	r3, #0
   13eca:	5ccc      	ldrb	r4, [r1, r3]
   13ecc:	54ec      	strb	r4, [r5, r3]
   13ece:	3301      	adds	r3, #1
   13ed0:	4293      	cmp	r3, r2
   13ed2:	d1fa      	bne.n	13eca <memcpy+0x6e>
   13ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13ed6:	0005      	movs	r5, r0
   13ed8:	e7f6      	b.n	13ec8 <memcpy+0x6c>
   13eda:	001a      	movs	r2, r3
   13edc:	e7f2      	b.n	13ec4 <memcpy+0x68>
   13ede:	46c0      	nop			; (mov r8, r8)

00013ee0 <memset>:
   13ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
   13ee2:	0783      	lsls	r3, r0, #30
   13ee4:	d043      	beq.n	13f6e <memset+0x8e>
   13ee6:	1e54      	subs	r4, r2, #1
   13ee8:	2a00      	cmp	r2, #0
   13eea:	d03f      	beq.n	13f6c <memset+0x8c>
   13eec:	b2ce      	uxtb	r6, r1
   13eee:	0002      	movs	r2, r0
   13ef0:	2503      	movs	r5, #3
   13ef2:	e002      	b.n	13efa <memset+0x1a>
   13ef4:	001a      	movs	r2, r3
   13ef6:	3c01      	subs	r4, #1
   13ef8:	d338      	bcc.n	13f6c <memset+0x8c>
   13efa:	1c53      	adds	r3, r2, #1
   13efc:	7016      	strb	r6, [r2, #0]
   13efe:	422b      	tst	r3, r5
   13f00:	d1f8      	bne.n	13ef4 <memset+0x14>
   13f02:	2c03      	cmp	r4, #3
   13f04:	d92a      	bls.n	13f5c <memset+0x7c>
   13f06:	22ff      	movs	r2, #255	; 0xff
   13f08:	400a      	ands	r2, r1
   13f0a:	0215      	lsls	r5, r2, #8
   13f0c:	4315      	orrs	r5, r2
   13f0e:	042a      	lsls	r2, r5, #16
   13f10:	4315      	orrs	r5, r2
   13f12:	2c0f      	cmp	r4, #15
   13f14:	d914      	bls.n	13f40 <memset+0x60>
   13f16:	0027      	movs	r7, r4
   13f18:	001a      	movs	r2, r3
   13f1a:	3f10      	subs	r7, #16
   13f1c:	093e      	lsrs	r6, r7, #4
   13f1e:	3601      	adds	r6, #1
   13f20:	0136      	lsls	r6, r6, #4
   13f22:	199e      	adds	r6, r3, r6
   13f24:	6015      	str	r5, [r2, #0]
   13f26:	6055      	str	r5, [r2, #4]
   13f28:	6095      	str	r5, [r2, #8]
   13f2a:	60d5      	str	r5, [r2, #12]
   13f2c:	3210      	adds	r2, #16
   13f2e:	4296      	cmp	r6, r2
   13f30:	d1f8      	bne.n	13f24 <memset+0x44>
   13f32:	220f      	movs	r2, #15
   13f34:	4397      	bics	r7, r2
   13f36:	3710      	adds	r7, #16
   13f38:	19db      	adds	r3, r3, r7
   13f3a:	4014      	ands	r4, r2
   13f3c:	2c03      	cmp	r4, #3
   13f3e:	d90d      	bls.n	13f5c <memset+0x7c>
   13f40:	001a      	movs	r2, r3
   13f42:	1f27      	subs	r7, r4, #4
   13f44:	08be      	lsrs	r6, r7, #2
   13f46:	3601      	adds	r6, #1
   13f48:	00b6      	lsls	r6, r6, #2
   13f4a:	199e      	adds	r6, r3, r6
   13f4c:	c220      	stmia	r2!, {r5}
   13f4e:	42b2      	cmp	r2, r6
   13f50:	d1fc      	bne.n	13f4c <memset+0x6c>
   13f52:	2203      	movs	r2, #3
   13f54:	4397      	bics	r7, r2
   13f56:	3704      	adds	r7, #4
   13f58:	19db      	adds	r3, r3, r7
   13f5a:	4014      	ands	r4, r2
   13f5c:	2c00      	cmp	r4, #0
   13f5e:	d005      	beq.n	13f6c <memset+0x8c>
   13f60:	b2c9      	uxtb	r1, r1
   13f62:	191c      	adds	r4, r3, r4
   13f64:	7019      	strb	r1, [r3, #0]
   13f66:	3301      	adds	r3, #1
   13f68:	429c      	cmp	r4, r3
   13f6a:	d1fb      	bne.n	13f64 <memset+0x84>
   13f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13f6e:	0014      	movs	r4, r2
   13f70:	0003      	movs	r3, r0
   13f72:	e7c6      	b.n	13f02 <memset+0x22>

00013f74 <printf>:
   13f74:	b40f      	push	{r0, r1, r2, r3}
   13f76:	b500      	push	{lr}
   13f78:	4906      	ldr	r1, [pc, #24]	; (13f94 <printf+0x20>)
   13f7a:	b083      	sub	sp, #12
   13f7c:	ab04      	add	r3, sp, #16
   13f7e:	6808      	ldr	r0, [r1, #0]
   13f80:	cb04      	ldmia	r3!, {r2}
   13f82:	6881      	ldr	r1, [r0, #8]
   13f84:	9301      	str	r3, [sp, #4]
   13f86:	f000 f991 	bl	142ac <_vfprintf_r>
   13f8a:	b003      	add	sp, #12
   13f8c:	bc08      	pop	{r3}
   13f8e:	b004      	add	sp, #16
   13f90:	4718      	bx	r3
   13f92:	46c0      	nop			; (mov r8, r8)
   13f94:	2000000c 	.word	0x2000000c

00013f98 <_puts_r>:
   13f98:	b530      	push	{r4, r5, lr}
   13f9a:	0004      	movs	r4, r0
   13f9c:	b089      	sub	sp, #36	; 0x24
   13f9e:	0008      	movs	r0, r1
   13fa0:	000d      	movs	r5, r1
   13fa2:	f000 f951 	bl	14248 <strlen>
   13fa6:	ab04      	add	r3, sp, #16
   13fa8:	4a21      	ldr	r2, [pc, #132]	; (14030 <_puts_r+0x98>)
   13faa:	9301      	str	r3, [sp, #4]
   13fac:	2302      	movs	r3, #2
   13fae:	9206      	str	r2, [sp, #24]
   13fb0:	2201      	movs	r2, #1
   13fb2:	9302      	str	r3, [sp, #8]
   13fb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13fb6:	9005      	str	r0, [sp, #20]
   13fb8:	3001      	adds	r0, #1
   13fba:	9504      	str	r5, [sp, #16]
   13fbc:	9207      	str	r2, [sp, #28]
   13fbe:	9003      	str	r0, [sp, #12]
   13fc0:	68a5      	ldr	r5, [r4, #8]
   13fc2:	2b00      	cmp	r3, #0
   13fc4:	d02f      	beq.n	14026 <_puts_r+0x8e>
   13fc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   13fc8:	07db      	lsls	r3, r3, #31
   13fca:	d424      	bmi.n	14016 <_puts_r+0x7e>
   13fcc:	230c      	movs	r3, #12
   13fce:	5eea      	ldrsh	r2, [r5, r3]
   13fd0:	b291      	uxth	r1, r2
   13fd2:	058b      	lsls	r3, r1, #22
   13fd4:	d51c      	bpl.n	14010 <_puts_r+0x78>
   13fd6:	2380      	movs	r3, #128	; 0x80
   13fd8:	019b      	lsls	r3, r3, #6
   13fda:	4219      	tst	r1, r3
   13fdc:	d105      	bne.n	13fea <_puts_r+0x52>
   13fde:	4313      	orrs	r3, r2
   13fe0:	81ab      	strh	r3, [r5, #12]
   13fe2:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   13fe4:	4b13      	ldr	r3, [pc, #76]	; (14034 <_puts_r+0x9c>)
   13fe6:	4013      	ands	r3, r2
   13fe8:	666b      	str	r3, [r5, #100]	; 0x64
   13fea:	0020      	movs	r0, r4
   13fec:	aa01      	add	r2, sp, #4
   13fee:	0029      	movs	r1, r5
   13ff0:	f003 f882 	bl	170f8 <__sfvwrite_r>
   13ff4:	1e44      	subs	r4, r0, #1
   13ff6:	41a0      	sbcs	r0, r4
   13ff8:	4244      	negs	r4, r0
   13ffa:	200a      	movs	r0, #10
   13ffc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   13ffe:	4304      	orrs	r4, r0
   14000:	07db      	lsls	r3, r3, #31
   14002:	d402      	bmi.n	1400a <_puts_r+0x72>
   14004:	89ab      	ldrh	r3, [r5, #12]
   14006:	059b      	lsls	r3, r3, #22
   14008:	d509      	bpl.n	1401e <_puts_r+0x86>
   1400a:	0020      	movs	r0, r4
   1400c:	b009      	add	sp, #36	; 0x24
   1400e:	bd30      	pop	{r4, r5, pc}
   14010:	6da8      	ldr	r0, [r5, #88]	; 0x58
   14012:	f003 fa2b 	bl	1746c <__retarget_lock_acquire_recursive>
   14016:	230c      	movs	r3, #12
   14018:	5eea      	ldrsh	r2, [r5, r3]
   1401a:	b291      	uxth	r1, r2
   1401c:	e7db      	b.n	13fd6 <_puts_r+0x3e>
   1401e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   14020:	f003 fa26 	bl	17470 <__retarget_lock_release_recursive>
   14024:	e7f1      	b.n	1400a <_puts_r+0x72>
   14026:	0020      	movs	r0, r4
   14028:	f002 fede 	bl	16de8 <__sinit>
   1402c:	e7cb      	b.n	13fc6 <_puts_r+0x2e>
   1402e:	46c0      	nop			; (mov r8, r8)
   14030:	0001999c 	.word	0x0001999c
   14034:	ffffdfff 	.word	0xffffdfff

00014038 <puts>:
   14038:	b510      	push	{r4, lr}
   1403a:	4b03      	ldr	r3, [pc, #12]	; (14048 <puts+0x10>)
   1403c:	0001      	movs	r1, r0
   1403e:	6818      	ldr	r0, [r3, #0]
   14040:	f7ff ffaa 	bl	13f98 <_puts_r>
   14044:	bd10      	pop	{r4, pc}
   14046:	46c0      	nop			; (mov r8, r8)
   14048:	2000000c 	.word	0x2000000c

0001404c <srand>:
   1404c:	2200      	movs	r2, #0
   1404e:	4b03      	ldr	r3, [pc, #12]	; (1405c <srand+0x10>)
   14050:	681b      	ldr	r3, [r3, #0]
   14052:	33a8      	adds	r3, #168	; 0xa8
   14054:	6018      	str	r0, [r3, #0]
   14056:	605a      	str	r2, [r3, #4]
   14058:	4770      	bx	lr
   1405a:	46c0      	nop			; (mov r8, r8)
   1405c:	2000000c 	.word	0x2000000c

00014060 <rand>:
   14060:	b510      	push	{r4, lr}
   14062:	4b09      	ldr	r3, [pc, #36]	; (14088 <rand+0x28>)
   14064:	4a09      	ldr	r2, [pc, #36]	; (1408c <rand+0x2c>)
   14066:	681c      	ldr	r4, [r3, #0]
   14068:	4b09      	ldr	r3, [pc, #36]	; (14090 <rand+0x30>)
   1406a:	34a8      	adds	r4, #168	; 0xa8
   1406c:	6820      	ldr	r0, [r4, #0]
   1406e:	6861      	ldr	r1, [r4, #4]
   14070:	f7fd f89c 	bl	111ac <__aeabi_lmul>
   14074:	2201      	movs	r2, #1
   14076:	2300      	movs	r3, #0
   14078:	1880      	adds	r0, r0, r2
   1407a:	4159      	adcs	r1, r3
   1407c:	6020      	str	r0, [r4, #0]
   1407e:	6061      	str	r1, [r4, #4]
   14080:	0048      	lsls	r0, r1, #1
   14082:	0840      	lsrs	r0, r0, #1
   14084:	bd10      	pop	{r4, pc}
   14086:	46c0      	nop			; (mov r8, r8)
   14088:	2000000c 	.word	0x2000000c
   1408c:	4c957f2d 	.word	0x4c957f2d
   14090:	5851f42d 	.word	0x5851f42d

00014094 <setbuf>:
   14094:	424a      	negs	r2, r1
   14096:	414a      	adcs	r2, r1
   14098:	2380      	movs	r3, #128	; 0x80
   1409a:	b510      	push	{r4, lr}
   1409c:	0052      	lsls	r2, r2, #1
   1409e:	00db      	lsls	r3, r3, #3
   140a0:	f000 f802 	bl	140a8 <setvbuf>
   140a4:	bd10      	pop	{r4, pc}
   140a6:	46c0      	nop			; (mov r8, r8)

000140a8 <setvbuf>:
   140a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   140aa:	4647      	mov	r7, r8
   140ac:	46ce      	mov	lr, r9
   140ae:	b580      	push	{r7, lr}
   140b0:	001f      	movs	r7, r3
   140b2:	4b63      	ldr	r3, [pc, #396]	; (14240 <setvbuf+0x198>)
   140b4:	b083      	sub	sp, #12
   140b6:	681d      	ldr	r5, [r3, #0]
   140b8:	0004      	movs	r4, r0
   140ba:	4688      	mov	r8, r1
   140bc:	0016      	movs	r6, r2
   140be:	2d00      	cmp	r5, #0
   140c0:	d002      	beq.n	140c8 <setvbuf+0x20>
   140c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   140c4:	2b00      	cmp	r3, #0
   140c6:	d066      	beq.n	14196 <setvbuf+0xee>
   140c8:	2e02      	cmp	r6, #2
   140ca:	d005      	beq.n	140d8 <setvbuf+0x30>
   140cc:	2e01      	cmp	r6, #1
   140ce:	d900      	bls.n	140d2 <setvbuf+0x2a>
   140d0:	e0a1      	b.n	14216 <setvbuf+0x16e>
   140d2:	2f00      	cmp	r7, #0
   140d4:	da00      	bge.n	140d8 <setvbuf+0x30>
   140d6:	e09e      	b.n	14216 <setvbuf+0x16e>
   140d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   140da:	07db      	lsls	r3, r3, #31
   140dc:	d533      	bpl.n	14146 <setvbuf+0x9e>
   140de:	0021      	movs	r1, r4
   140e0:	0028      	movs	r0, r5
   140e2:	f002 fe27 	bl	16d34 <_fflush_r>
   140e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   140e8:	2900      	cmp	r1, #0
   140ea:	d008      	beq.n	140fe <setvbuf+0x56>
   140ec:	0023      	movs	r3, r4
   140ee:	3340      	adds	r3, #64	; 0x40
   140f0:	4299      	cmp	r1, r3
   140f2:	d002      	beq.n	140fa <setvbuf+0x52>
   140f4:	0028      	movs	r0, r5
   140f6:	f002 ff21 	bl	16f3c <_free_r>
   140fa:	2300      	movs	r3, #0
   140fc:	6323      	str	r3, [r4, #48]	; 0x30
   140fe:	2300      	movs	r3, #0
   14100:	61a3      	str	r3, [r4, #24]
   14102:	6063      	str	r3, [r4, #4]
   14104:	220c      	movs	r2, #12
   14106:	5ea3      	ldrsh	r3, [r4, r2]
   14108:	061a      	lsls	r2, r3, #24
   1410a:	d43d      	bmi.n	14188 <setvbuf+0xe0>
   1410c:	4a4d      	ldr	r2, [pc, #308]	; (14244 <setvbuf+0x19c>)
   1410e:	4013      	ands	r3, r2
   14110:	81a3      	strh	r3, [r4, #12]
   14112:	2e02      	cmp	r6, #2
   14114:	d01e      	beq.n	14154 <setvbuf+0xac>
   14116:	ab01      	add	r3, sp, #4
   14118:	466a      	mov	r2, sp
   1411a:	0021      	movs	r1, r4
   1411c:	0028      	movs	r0, r5
   1411e:	f003 f9a9 	bl	17474 <__swhatbuf_r>
   14122:	89a3      	ldrh	r3, [r4, #12]
   14124:	4318      	orrs	r0, r3
   14126:	81a0      	strh	r0, [r4, #12]
   14128:	2f00      	cmp	r7, #0
   1412a:	d138      	bne.n	1419e <setvbuf+0xf6>
   1412c:	9f00      	ldr	r7, [sp, #0]
   1412e:	0038      	movs	r0, r7
   14130:	f003 fa18 	bl	17564 <malloc>
   14134:	4680      	mov	r8, r0
   14136:	2800      	cmp	r0, #0
   14138:	d100      	bne.n	1413c <setvbuf+0x94>
   1413a:	e06f      	b.n	1421c <setvbuf+0x174>
   1413c:	2280      	movs	r2, #128	; 0x80
   1413e:	89a3      	ldrh	r3, [r4, #12]
   14140:	4313      	orrs	r3, r2
   14142:	81a3      	strh	r3, [r4, #12]
   14144:	e02e      	b.n	141a4 <setvbuf+0xfc>
   14146:	89a3      	ldrh	r3, [r4, #12]
   14148:	059b      	lsls	r3, r3, #22
   1414a:	d4c8      	bmi.n	140de <setvbuf+0x36>
   1414c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1414e:	f003 f98d 	bl	1746c <__retarget_lock_acquire_recursive>
   14152:	e7c4      	b.n	140de <setvbuf+0x36>
   14154:	2500      	movs	r5, #0
   14156:	2202      	movs	r2, #2
   14158:	4313      	orrs	r3, r2
   1415a:	2200      	movs	r2, #0
   1415c:	60a2      	str	r2, [r4, #8]
   1415e:	0022      	movs	r2, r4
   14160:	3243      	adds	r2, #67	; 0x43
   14162:	6022      	str	r2, [r4, #0]
   14164:	6122      	str	r2, [r4, #16]
   14166:	2201      	movs	r2, #1
   14168:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1416a:	81a3      	strh	r3, [r4, #12]
   1416c:	6162      	str	r2, [r4, #20]
   1416e:	4211      	tst	r1, r2
   14170:	d104      	bne.n	1417c <setvbuf+0xd4>
   14172:	059b      	lsls	r3, r3, #22
   14174:	d402      	bmi.n	1417c <setvbuf+0xd4>
   14176:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14178:	f003 f97a 	bl	17470 <__retarget_lock_release_recursive>
   1417c:	0028      	movs	r0, r5
   1417e:	b003      	add	sp, #12
   14180:	bc0c      	pop	{r2, r3}
   14182:	4690      	mov	r8, r2
   14184:	4699      	mov	r9, r3
   14186:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14188:	6921      	ldr	r1, [r4, #16]
   1418a:	0028      	movs	r0, r5
   1418c:	f002 fed6 	bl	16f3c <_free_r>
   14190:	220c      	movs	r2, #12
   14192:	5ea3      	ldrsh	r3, [r4, r2]
   14194:	e7ba      	b.n	1410c <setvbuf+0x64>
   14196:	0028      	movs	r0, r5
   14198:	f002 fe26 	bl	16de8 <__sinit>
   1419c:	e794      	b.n	140c8 <setvbuf+0x20>
   1419e:	4643      	mov	r3, r8
   141a0:	2b00      	cmp	r3, #0
   141a2:	d0c4      	beq.n	1412e <setvbuf+0x86>
   141a4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   141a6:	2b00      	cmp	r3, #0
   141a8:	d027      	beq.n	141fa <setvbuf+0x152>
   141aa:	9b00      	ldr	r3, [sp, #0]
   141ac:	429f      	cmp	r7, r3
   141ae:	d02a      	beq.n	14206 <setvbuf+0x15e>
   141b0:	2380      	movs	r3, #128	; 0x80
   141b2:	89a2      	ldrh	r2, [r4, #12]
   141b4:	011b      	lsls	r3, r3, #4
   141b6:	4313      	orrs	r3, r2
   141b8:	b21b      	sxth	r3, r3
   141ba:	81a3      	strh	r3, [r4, #12]
   141bc:	2e01      	cmp	r6, #1
   141be:	d026      	beq.n	1420e <setvbuf+0x166>
   141c0:	4642      	mov	r2, r8
   141c2:	6022      	str	r2, [r4, #0]
   141c4:	6122      	str	r2, [r4, #16]
   141c6:	2208      	movs	r2, #8
   141c8:	b29b      	uxth	r3, r3
   141ca:	6167      	str	r7, [r4, #20]
   141cc:	401a      	ands	r2, r3
   141ce:	d00b      	beq.n	141e8 <setvbuf+0x140>
   141d0:	07da      	lsls	r2, r3, #31
   141d2:	d510      	bpl.n	141f6 <setvbuf+0x14e>
   141d4:	2200      	movs	r2, #0
   141d6:	2501      	movs	r5, #1
   141d8:	60a2      	str	r2, [r4, #8]
   141da:	6e62      	ldr	r2, [r4, #100]	; 0x64
   141dc:	427f      	negs	r7, r7
   141de:	61a7      	str	r7, [r4, #24]
   141e0:	4015      	ands	r5, r2
   141e2:	d0c6      	beq.n	14172 <setvbuf+0xca>
   141e4:	2500      	movs	r5, #0
   141e6:	e7c9      	b.n	1417c <setvbuf+0xd4>
   141e8:	60a2      	str	r2, [r4, #8]
   141ea:	2501      	movs	r5, #1
   141ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
   141ee:	4015      	ands	r5, r2
   141f0:	d0bf      	beq.n	14172 <setvbuf+0xca>
   141f2:	2500      	movs	r5, #0
   141f4:	e7c2      	b.n	1417c <setvbuf+0xd4>
   141f6:	60a7      	str	r7, [r4, #8]
   141f8:	e7f7      	b.n	141ea <setvbuf+0x142>
   141fa:	0028      	movs	r0, r5
   141fc:	f002 fdf4 	bl	16de8 <__sinit>
   14200:	9b00      	ldr	r3, [sp, #0]
   14202:	429f      	cmp	r7, r3
   14204:	d1d4      	bne.n	141b0 <setvbuf+0x108>
   14206:	220c      	movs	r2, #12
   14208:	5ea3      	ldrsh	r3, [r4, r2]
   1420a:	2e01      	cmp	r6, #1
   1420c:	d1d8      	bne.n	141c0 <setvbuf+0x118>
   1420e:	2201      	movs	r2, #1
   14210:	4313      	orrs	r3, r2
   14212:	81a3      	strh	r3, [r4, #12]
   14214:	e7d4      	b.n	141c0 <setvbuf+0x118>
   14216:	2501      	movs	r5, #1
   14218:	426d      	negs	r5, r5
   1421a:	e7af      	b.n	1417c <setvbuf+0xd4>
   1421c:	9b00      	ldr	r3, [sp, #0]
   1421e:	4699      	mov	r9, r3
   14220:	42bb      	cmp	r3, r7
   14222:	d005      	beq.n	14230 <setvbuf+0x188>
   14224:	0018      	movs	r0, r3
   14226:	f003 f99d 	bl	17564 <malloc>
   1422a:	4680      	mov	r8, r0
   1422c:	2800      	cmp	r0, #0
   1422e:	d104      	bne.n	1423a <setvbuf+0x192>
   14230:	2501      	movs	r5, #1
   14232:	220c      	movs	r2, #12
   14234:	5ea3      	ldrsh	r3, [r4, r2]
   14236:	426d      	negs	r5, r5
   14238:	e78d      	b.n	14156 <setvbuf+0xae>
   1423a:	464f      	mov	r7, r9
   1423c:	e77e      	b.n	1413c <setvbuf+0x94>
   1423e:	46c0      	nop			; (mov r8, r8)
   14240:	2000000c 	.word	0x2000000c
   14244:	fffff35c 	.word	0xfffff35c

00014248 <strlen>:
   14248:	b510      	push	{r4, lr}
   1424a:	0783      	lsls	r3, r0, #30
   1424c:	d025      	beq.n	1429a <strlen+0x52>
   1424e:	7803      	ldrb	r3, [r0, #0]
   14250:	2b00      	cmp	r3, #0
   14252:	d024      	beq.n	1429e <strlen+0x56>
   14254:	0003      	movs	r3, r0
   14256:	2103      	movs	r1, #3
   14258:	e002      	b.n	14260 <strlen+0x18>
   1425a:	781a      	ldrb	r2, [r3, #0]
   1425c:	2a00      	cmp	r2, #0
   1425e:	d01a      	beq.n	14296 <strlen+0x4e>
   14260:	3301      	adds	r3, #1
   14262:	420b      	tst	r3, r1
   14264:	d1f9      	bne.n	1425a <strlen+0x12>
   14266:	6819      	ldr	r1, [r3, #0]
   14268:	4a0e      	ldr	r2, [pc, #56]	; (142a4 <strlen+0x5c>)
   1426a:	4c0f      	ldr	r4, [pc, #60]	; (142a8 <strlen+0x60>)
   1426c:	188a      	adds	r2, r1, r2
   1426e:	438a      	bics	r2, r1
   14270:	4222      	tst	r2, r4
   14272:	d106      	bne.n	14282 <strlen+0x3a>
   14274:	3304      	adds	r3, #4
   14276:	6819      	ldr	r1, [r3, #0]
   14278:	4a0a      	ldr	r2, [pc, #40]	; (142a4 <strlen+0x5c>)
   1427a:	188a      	adds	r2, r1, r2
   1427c:	438a      	bics	r2, r1
   1427e:	4222      	tst	r2, r4
   14280:	d0f8      	beq.n	14274 <strlen+0x2c>
   14282:	001a      	movs	r2, r3
   14284:	781b      	ldrb	r3, [r3, #0]
   14286:	2b00      	cmp	r3, #0
   14288:	d003      	beq.n	14292 <strlen+0x4a>
   1428a:	3201      	adds	r2, #1
   1428c:	7811      	ldrb	r1, [r2, #0]
   1428e:	2900      	cmp	r1, #0
   14290:	d1fb      	bne.n	1428a <strlen+0x42>
   14292:	1a10      	subs	r0, r2, r0
   14294:	bd10      	pop	{r4, pc}
   14296:	1a18      	subs	r0, r3, r0
   14298:	e7fc      	b.n	14294 <strlen+0x4c>
   1429a:	0003      	movs	r3, r0
   1429c:	e7e3      	b.n	14266 <strlen+0x1e>
   1429e:	2000      	movs	r0, #0
   142a0:	e7f8      	b.n	14294 <strlen+0x4c>
   142a2:	46c0      	nop			; (mov r8, r8)
   142a4:	fefefeff 	.word	0xfefefeff
   142a8:	80808080 	.word	0x80808080

000142ac <_vfprintf_r>:
   142ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   142ae:	46de      	mov	lr, fp
   142b0:	464e      	mov	r6, r9
   142b2:	4645      	mov	r5, r8
   142b4:	4657      	mov	r7, sl
   142b6:	b5e0      	push	{r5, r6, r7, lr}
   142b8:	b0c3      	sub	sp, #268	; 0x10c
   142ba:	4689      	mov	r9, r1
   142bc:	0014      	movs	r4, r2
   142be:	001d      	movs	r5, r3
   142c0:	930f      	str	r3, [sp, #60]	; 0x3c
   142c2:	0006      	movs	r6, r0
   142c4:	9006      	str	r0, [sp, #24]
   142c6:	f003 f8bf 	bl	17448 <_localeconv_r>
   142ca:	6803      	ldr	r3, [r0, #0]
   142cc:	0018      	movs	r0, r3
   142ce:	9318      	str	r3, [sp, #96]	; 0x60
   142d0:	f7ff ffba 	bl	14248 <strlen>
   142d4:	9017      	str	r0, [sp, #92]	; 0x5c
   142d6:	2e00      	cmp	r6, #0
   142d8:	d004      	beq.n	142e4 <_vfprintf_r+0x38>
   142da:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   142dc:	9307      	str	r3, [sp, #28]
   142de:	2b00      	cmp	r3, #0
   142e0:	d100      	bne.n	142e4 <_vfprintf_r+0x38>
   142e2:	e0a7      	b.n	14434 <_vfprintf_r+0x188>
   142e4:	464b      	mov	r3, r9
   142e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   142e8:	07db      	lsls	r3, r3, #31
   142ea:	d478      	bmi.n	143de <_vfprintf_r+0x132>
   142ec:	464b      	mov	r3, r9
   142ee:	210c      	movs	r1, #12
   142f0:	5e59      	ldrsh	r1, [r3, r1]
   142f2:	b28b      	uxth	r3, r1
   142f4:	059a      	lsls	r2, r3, #22
   142f6:	d56e      	bpl.n	143d6 <_vfprintf_r+0x12a>
   142f8:	2280      	movs	r2, #128	; 0x80
   142fa:	0192      	lsls	r2, r2, #6
   142fc:	4213      	tst	r3, r2
   142fe:	d109      	bne.n	14314 <_vfprintf_r+0x68>
   14300:	430a      	orrs	r2, r1
   14302:	464b      	mov	r3, r9
   14304:	4649      	mov	r1, r9
   14306:	819a      	strh	r2, [r3, #12]
   14308:	6e49      	ldr	r1, [r1, #100]	; 0x64
   1430a:	4bcc      	ldr	r3, [pc, #816]	; (1463c <_vfprintf_r+0x390>)
   1430c:	400b      	ands	r3, r1
   1430e:	4649      	mov	r1, r9
   14310:	664b      	str	r3, [r1, #100]	; 0x64
   14312:	b293      	uxth	r3, r2
   14314:	071a      	lsls	r2, r3, #28
   14316:	d567      	bpl.n	143e8 <_vfprintf_r+0x13c>
   14318:	464a      	mov	r2, r9
   1431a:	6912      	ldr	r2, [r2, #16]
   1431c:	2a00      	cmp	r2, #0
   1431e:	d063      	beq.n	143e8 <_vfprintf_r+0x13c>
   14320:	221a      	movs	r2, #26
   14322:	401a      	ands	r2, r3
   14324:	2a0a      	cmp	r2, #10
   14326:	d100      	bne.n	1432a <_vfprintf_r+0x7e>
   14328:	e088      	b.n	1443c <_vfprintf_r+0x190>
   1432a:	ab32      	add	r3, sp, #200	; 0xc8
   1432c:	9325      	str	r3, [sp, #148]	; 0x94
   1432e:	2300      	movs	r3, #0
   14330:	46cb      	mov	fp, r9
   14332:	af25      	add	r7, sp, #148	; 0x94
   14334:	60bb      	str	r3, [r7, #8]
   14336:	607b      	str	r3, [r7, #4]
   14338:	9407      	str	r4, [sp, #28]
   1433a:	9314      	str	r3, [sp, #80]	; 0x50
   1433c:	9316      	str	r3, [sp, #88]	; 0x58
   1433e:	9315      	str	r3, [sp, #84]	; 0x54
   14340:	ae32      	add	r6, sp, #200	; 0xc8
   14342:	9319      	str	r3, [sp, #100]	; 0x64
   14344:	931a      	str	r3, [sp, #104]	; 0x68
   14346:	930a      	str	r3, [sp, #40]	; 0x28
   14348:	9c07      	ldr	r4, [sp, #28]
   1434a:	7823      	ldrb	r3, [r4, #0]
   1434c:	2b00      	cmp	r3, #0
   1434e:	d101      	bne.n	14354 <_vfprintf_r+0xa8>
   14350:	f000 fd9e 	bl	14e90 <_vfprintf_r+0xbe4>
   14354:	2b25      	cmp	r3, #37	; 0x25
   14356:	d103      	bne.n	14360 <_vfprintf_r+0xb4>
   14358:	f000 fd9a 	bl	14e90 <_vfprintf_r+0xbe4>
   1435c:	2b25      	cmp	r3, #37	; 0x25
   1435e:	d003      	beq.n	14368 <_vfprintf_r+0xbc>
   14360:	3401      	adds	r4, #1
   14362:	7823      	ldrb	r3, [r4, #0]
   14364:	2b00      	cmp	r3, #0
   14366:	d1f9      	bne.n	1435c <_vfprintf_r+0xb0>
   14368:	9b07      	ldr	r3, [sp, #28]
   1436a:	1ae5      	subs	r5, r4, r3
   1436c:	d010      	beq.n	14390 <_vfprintf_r+0xe4>
   1436e:	9b07      	ldr	r3, [sp, #28]
   14370:	6075      	str	r5, [r6, #4]
   14372:	6033      	str	r3, [r6, #0]
   14374:	68bb      	ldr	r3, [r7, #8]
   14376:	195b      	adds	r3, r3, r5
   14378:	60bb      	str	r3, [r7, #8]
   1437a:	687b      	ldr	r3, [r7, #4]
   1437c:	3301      	adds	r3, #1
   1437e:	607b      	str	r3, [r7, #4]
   14380:	2b07      	cmp	r3, #7
   14382:	dc4c      	bgt.n	1441e <_vfprintf_r+0x172>
   14384:	3608      	adds	r6, #8
   14386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14388:	469c      	mov	ip, r3
   1438a:	44ac      	add	ip, r5
   1438c:	4663      	mov	r3, ip
   1438e:	930a      	str	r3, [sp, #40]	; 0x28
   14390:	7823      	ldrb	r3, [r4, #0]
   14392:	2b00      	cmp	r3, #0
   14394:	d101      	bne.n	1439a <_vfprintf_r+0xee>
   14396:	f000 fc99 	bl	14ccc <_vfprintf_r+0xa20>
   1439a:	1c63      	adds	r3, r4, #1
   1439c:	9307      	str	r3, [sp, #28]
   1439e:	2300      	movs	r3, #0
   143a0:	aa16      	add	r2, sp, #88	; 0x58
   143a2:	77d3      	strb	r3, [r2, #31]
   143a4:	2201      	movs	r2, #1
   143a6:	4252      	negs	r2, r2
   143a8:	4692      	mov	sl, r2
   143aa:	2200      	movs	r2, #0
   143ac:	920b      	str	r2, [sp, #44]	; 0x2c
   143ae:	3220      	adds	r2, #32
   143b0:	4691      	mov	r9, r2
   143b2:	3220      	adds	r2, #32
   143b4:	7863      	ldrb	r3, [r4, #1]
   143b6:	2100      	movs	r1, #0
   143b8:	2000      	movs	r0, #0
   143ba:	2400      	movs	r4, #0
   143bc:	4694      	mov	ip, r2
   143be:	9a07      	ldr	r2, [sp, #28]
   143c0:	3201      	adds	r2, #1
   143c2:	9207      	str	r2, [sp, #28]
   143c4:	001a      	movs	r2, r3
   143c6:	3a20      	subs	r2, #32
   143c8:	2a58      	cmp	r2, #88	; 0x58
   143ca:	d900      	bls.n	143ce <_vfprintf_r+0x122>
   143cc:	e2e7      	b.n	1499e <_vfprintf_r+0x6f2>
   143ce:	4d9c      	ldr	r5, [pc, #624]	; (14640 <_vfprintf_r+0x394>)
   143d0:	0092      	lsls	r2, r2, #2
   143d2:	58aa      	ldr	r2, [r5, r2]
   143d4:	4697      	mov	pc, r2
   143d6:	464b      	mov	r3, r9
   143d8:	6d98      	ldr	r0, [r3, #88]	; 0x58
   143da:	f003 f847 	bl	1746c <__retarget_lock_acquire_recursive>
   143de:	464b      	mov	r3, r9
   143e0:	210c      	movs	r1, #12
   143e2:	5e59      	ldrsh	r1, [r3, r1]
   143e4:	b28b      	uxth	r3, r1
   143e6:	e787      	b.n	142f8 <_vfprintf_r+0x4c>
   143e8:	4649      	mov	r1, r9
   143ea:	9806      	ldr	r0, [sp, #24]
   143ec:	f001 fb0e 	bl	15a0c <__swsetup_r>
   143f0:	464b      	mov	r3, r9
   143f2:	2800      	cmp	r0, #0
   143f4:	d03a      	beq.n	1446c <_vfprintf_r+0x1c0>
   143f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   143f8:	07db      	lsls	r3, r3, #31
   143fa:	d405      	bmi.n	14408 <_vfprintf_r+0x15c>
   143fc:	464b      	mov	r3, r9
   143fe:	899b      	ldrh	r3, [r3, #12]
   14400:	059b      	lsls	r3, r3, #22
   14402:	d401      	bmi.n	14408 <_vfprintf_r+0x15c>
   14404:	f000 ffcf 	bl	153a6 <_vfprintf_r+0x10fa>
   14408:	2301      	movs	r3, #1
   1440a:	425b      	negs	r3, r3
   1440c:	930a      	str	r3, [sp, #40]	; 0x28
   1440e:	980a      	ldr	r0, [sp, #40]	; 0x28
   14410:	b043      	add	sp, #268	; 0x10c
   14412:	bc3c      	pop	{r2, r3, r4, r5}
   14414:	4690      	mov	r8, r2
   14416:	4699      	mov	r9, r3
   14418:	46a2      	mov	sl, r4
   1441a:	46ab      	mov	fp, r5
   1441c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1441e:	003a      	movs	r2, r7
   14420:	4659      	mov	r1, fp
   14422:	9806      	ldr	r0, [sp, #24]
   14424:	f004 f9a4 	bl	18770 <__sprint_r>
   14428:	2800      	cmp	r0, #0
   1442a:	d001      	beq.n	14430 <_vfprintf_r+0x184>
   1442c:	f000 fcce 	bl	14dcc <_vfprintf_r+0xb20>
   14430:	ae32      	add	r6, sp, #200	; 0xc8
   14432:	e7a8      	b.n	14386 <_vfprintf_r+0xda>
   14434:	9806      	ldr	r0, [sp, #24]
   14436:	f002 fcd7 	bl	16de8 <__sinit>
   1443a:	e753      	b.n	142e4 <_vfprintf_r+0x38>
   1443c:	464a      	mov	r2, r9
   1443e:	210e      	movs	r1, #14
   14440:	5e52      	ldrsh	r2, [r2, r1]
   14442:	2a00      	cmp	r2, #0
   14444:	da00      	bge.n	14448 <_vfprintf_r+0x19c>
   14446:	e770      	b.n	1432a <_vfprintf_r+0x7e>
   14448:	464a      	mov	r2, r9
   1444a:	6e52      	ldr	r2, [r2, #100]	; 0x64
   1444c:	07d2      	lsls	r2, r2, #31
   1444e:	d405      	bmi.n	1445c <_vfprintf_r+0x1b0>
   14450:	059b      	lsls	r3, r3, #22
   14452:	d403      	bmi.n	1445c <_vfprintf_r+0x1b0>
   14454:	464b      	mov	r3, r9
   14456:	6d98      	ldr	r0, [r3, #88]	; 0x58
   14458:	f003 f80a 	bl	17470 <__retarget_lock_release_recursive>
   1445c:	002b      	movs	r3, r5
   1445e:	0022      	movs	r2, r4
   14460:	4649      	mov	r1, r9
   14462:	9806      	ldr	r0, [sp, #24]
   14464:	f001 fa8e 	bl	15984 <__sbprintf>
   14468:	900a      	str	r0, [sp, #40]	; 0x28
   1446a:	e7d0      	b.n	1440e <_vfprintf_r+0x162>
   1446c:	899b      	ldrh	r3, [r3, #12]
   1446e:	e757      	b.n	14320 <_vfprintf_r+0x74>
   14470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14472:	920f      	str	r2, [sp, #60]	; 0x3c
   14474:	425b      	negs	r3, r3
   14476:	930b      	str	r3, [sp, #44]	; 0x2c
   14478:	2304      	movs	r3, #4
   1447a:	431c      	orrs	r4, r3
   1447c:	9b07      	ldr	r3, [sp, #28]
   1447e:	781b      	ldrb	r3, [r3, #0]
   14480:	e79d      	b.n	143be <_vfprintf_r+0x112>
   14482:	9b07      	ldr	r3, [sp, #28]
   14484:	2101      	movs	r1, #1
   14486:	781b      	ldrb	r3, [r3, #0]
   14488:	202b      	movs	r0, #43	; 0x2b
   1448a:	e798      	b.n	143be <_vfprintf_r+0x112>
   1448c:	9b07      	ldr	r3, [sp, #28]
   1448e:	1c5a      	adds	r2, r3, #1
   14490:	781b      	ldrb	r3, [r3, #0]
   14492:	4690      	mov	r8, r2
   14494:	2b2a      	cmp	r3, #42	; 0x2a
   14496:	d101      	bne.n	1449c <_vfprintf_r+0x1f0>
   14498:	f001 fa38 	bl	1590c <_vfprintf_r+0x1660>
   1449c:	001a      	movs	r2, r3
   1449e:	2500      	movs	r5, #0
   144a0:	3a30      	subs	r2, #48	; 0x30
   144a2:	46aa      	mov	sl, r5
   144a4:	2a09      	cmp	r2, #9
   144a6:	d901      	bls.n	144ac <_vfprintf_r+0x200>
   144a8:	f001 f96d 	bl	15786 <_vfprintf_r+0x14da>
   144ac:	0025      	movs	r5, r4
   144ae:	4643      	mov	r3, r8
   144b0:	4654      	mov	r4, sl
   144b2:	4688      	mov	r8, r1
   144b4:	4682      	mov	sl, r0
   144b6:	00a1      	lsls	r1, r4, #2
   144b8:	190c      	adds	r4, r1, r4
   144ba:	7818      	ldrb	r0, [r3, #0]
   144bc:	0064      	lsls	r4, r4, #1
   144be:	18a4      	adds	r4, r4, r2
   144c0:	0002      	movs	r2, r0
   144c2:	1c59      	adds	r1, r3, #1
   144c4:	3a30      	subs	r2, #48	; 0x30
   144c6:	000b      	movs	r3, r1
   144c8:	2a09      	cmp	r2, #9
   144ca:	d9f4      	bls.n	144b6 <_vfprintf_r+0x20a>
   144cc:	9107      	str	r1, [sp, #28]
   144ce:	0003      	movs	r3, r0
   144d0:	4641      	mov	r1, r8
   144d2:	4650      	mov	r0, sl
   144d4:	46a2      	mov	sl, r4
   144d6:	002c      	movs	r4, r5
   144d8:	e774      	b.n	143c4 <_vfprintf_r+0x118>
   144da:	9312      	str	r3, [sp, #72]	; 0x48
   144dc:	2900      	cmp	r1, #0
   144de:	d001      	beq.n	144e4 <_vfprintf_r+0x238>
   144e0:	f001 fa2e 	bl	15940 <_vfprintf_r+0x1694>
   144e4:	4b57      	ldr	r3, [pc, #348]	; (14644 <_vfprintf_r+0x398>)
   144e6:	9319      	str	r3, [sp, #100]	; 0x64
   144e8:	06a3      	lsls	r3, r4, #26
   144ea:	d501      	bpl.n	144f0 <_vfprintf_r+0x244>
   144ec:	f000 fe9a 	bl	15224 <_vfprintf_r+0xf78>
   144f0:	06e3      	lsls	r3, r4, #27
   144f2:	d501      	bpl.n	144f8 <_vfprintf_r+0x24c>
   144f4:	f000 fd9a 	bl	1502c <_vfprintf_r+0xd80>
   144f8:	0663      	lsls	r3, r4, #25
   144fa:	d401      	bmi.n	14500 <_vfprintf_r+0x254>
   144fc:	f000 fd96 	bl	1502c <_vfprintf_r+0xd80>
   14500:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14502:	881a      	ldrh	r2, [r3, #0]
   14504:	920c      	str	r2, [sp, #48]	; 0x30
   14506:	2200      	movs	r2, #0
   14508:	3304      	adds	r3, #4
   1450a:	920d      	str	r2, [sp, #52]	; 0x34
   1450c:	930f      	str	r3, [sp, #60]	; 0x3c
   1450e:	07e3      	lsls	r3, r4, #31
   14510:	d401      	bmi.n	14516 <_vfprintf_r+0x26a>
   14512:	f000 fd76 	bl	15002 <_vfprintf_r+0xd56>
   14516:	990c      	ldr	r1, [sp, #48]	; 0x30
   14518:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1451a:	000b      	movs	r3, r1
   1451c:	4313      	orrs	r3, r2
   1451e:	001a      	movs	r2, r3
   14520:	2302      	movs	r3, #2
   14522:	2a00      	cmp	r2, #0
   14524:	d008      	beq.n	14538 <_vfprintf_r+0x28c>
   14526:	2030      	movs	r0, #48	; 0x30
   14528:	a91e      	add	r1, sp, #120	; 0x78
   1452a:	7008      	strb	r0, [r1, #0]
   1452c:	2548      	movs	r5, #72	; 0x48
   1452e:	4668      	mov	r0, sp
   14530:	1940      	adds	r0, r0, r5
   14532:	7800      	ldrb	r0, [r0, #0]
   14534:	431c      	orrs	r4, r3
   14536:	7048      	strb	r0, [r1, #1]
   14538:	2100      	movs	r1, #0
   1453a:	4688      	mov	r8, r1
   1453c:	a816      	add	r0, sp, #88	; 0x58
   1453e:	77c1      	strb	r1, [r0, #31]
   14540:	4651      	mov	r1, sl
   14542:	3101      	adds	r1, #1
   14544:	d100      	bne.n	14548 <_vfprintf_r+0x29c>
   14546:	e0e6      	b.n	14716 <_vfprintf_r+0x46a>
   14548:	2180      	movs	r1, #128	; 0x80
   1454a:	0020      	movs	r0, r4
   1454c:	4388      	bics	r0, r1
   1454e:	9009      	str	r0, [sp, #36]	; 0x24
   14550:	2a00      	cmp	r2, #0
   14552:	d000      	beq.n	14556 <_vfprintf_r+0x2aa>
   14554:	e0e3      	b.n	1471e <_vfprintf_r+0x472>
   14556:	4652      	mov	r2, sl
   14558:	2a00      	cmp	r2, #0
   1455a:	d001      	beq.n	14560 <_vfprintf_r+0x2b4>
   1455c:	f000 fc38 	bl	14dd0 <_vfprintf_r+0xb24>
   14560:	2b00      	cmp	r3, #0
   14562:	d001      	beq.n	14568 <_vfprintf_r+0x2bc>
   14564:	f000 fd0c 	bl	14f80 <_vfprintf_r+0xcd4>
   14568:	2001      	movs	r0, #1
   1456a:	ab32      	add	r3, sp, #200	; 0xc8
   1456c:	4020      	ands	r0, r4
   1456e:	900e      	str	r0, [sp, #56]	; 0x38
   14570:	9311      	str	r3, [sp, #68]	; 0x44
   14572:	d008      	beq.n	14586 <_vfprintf_r+0x2da>
   14574:	2327      	movs	r3, #39	; 0x27
   14576:	2130      	movs	r1, #48	; 0x30
   14578:	aa28      	add	r2, sp, #160	; 0xa0
   1457a:	54d1      	strb	r1, [r2, r3]
   1457c:	aa16      	add	r2, sp, #88	; 0x58
   1457e:	4694      	mov	ip, r2
   14580:	3348      	adds	r3, #72	; 0x48
   14582:	4463      	add	r3, ip
   14584:	9311      	str	r3, [sp, #68]	; 0x44
   14586:	4653      	mov	r3, sl
   14588:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1458a:	9308      	str	r3, [sp, #32]
   1458c:	4592      	cmp	sl, r2
   1458e:	da00      	bge.n	14592 <_vfprintf_r+0x2e6>
   14590:	9208      	str	r2, [sp, #32]
   14592:	2300      	movs	r3, #0
   14594:	9313      	str	r3, [sp, #76]	; 0x4c
   14596:	4643      	mov	r3, r8
   14598:	2b00      	cmp	r3, #0
   1459a:	d002      	beq.n	145a2 <_vfprintf_r+0x2f6>
   1459c:	9b08      	ldr	r3, [sp, #32]
   1459e:	3301      	adds	r3, #1
   145a0:	9308      	str	r3, [sp, #32]
   145a2:	2302      	movs	r3, #2
   145a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   145a6:	401a      	ands	r2, r3
   145a8:	4691      	mov	r9, r2
   145aa:	d002      	beq.n	145b2 <_vfprintf_r+0x306>
   145ac:	9b08      	ldr	r3, [sp, #32]
   145ae:	3302      	adds	r3, #2
   145b0:	9308      	str	r3, [sp, #32]
   145b2:	2384      	movs	r3, #132	; 0x84
   145b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   145b6:	401a      	ands	r2, r3
   145b8:	9210      	str	r2, [sp, #64]	; 0x40
   145ba:	d000      	beq.n	145be <_vfprintf_r+0x312>
   145bc:	e207      	b.n	149ce <_vfprintf_r+0x722>
   145be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   145c0:	9a08      	ldr	r2, [sp, #32]
   145c2:	1a9c      	subs	r4, r3, r2
   145c4:	2c00      	cmp	r4, #0
   145c6:	dc00      	bgt.n	145ca <_vfprintf_r+0x31e>
   145c8:	e201      	b.n	149ce <_vfprintf_r+0x722>
   145ca:	491f      	ldr	r1, [pc, #124]	; (14648 <_vfprintf_r+0x39c>)
   145cc:	68ba      	ldr	r2, [r7, #8]
   145ce:	687b      	ldr	r3, [r7, #4]
   145d0:	4688      	mov	r8, r1
   145d2:	2c10      	cmp	r4, #16
   145d4:	dd21      	ble.n	1461a <_vfprintf_r+0x36e>
   145d6:	0031      	movs	r1, r6
   145d8:	2510      	movs	r5, #16
   145da:	465e      	mov	r6, fp
   145dc:	e003      	b.n	145e6 <_vfprintf_r+0x33a>
   145de:	3c10      	subs	r4, #16
   145e0:	3108      	adds	r1, #8
   145e2:	2c10      	cmp	r4, #16
   145e4:	dd17      	ble.n	14616 <_vfprintf_r+0x36a>
   145e6:	4640      	mov	r0, r8
   145e8:	3210      	adds	r2, #16
   145ea:	3301      	adds	r3, #1
   145ec:	6008      	str	r0, [r1, #0]
   145ee:	604d      	str	r5, [r1, #4]
   145f0:	60ba      	str	r2, [r7, #8]
   145f2:	607b      	str	r3, [r7, #4]
   145f4:	2b07      	cmp	r3, #7
   145f6:	ddf2      	ble.n	145de <_vfprintf_r+0x332>
   145f8:	003a      	movs	r2, r7
   145fa:	0031      	movs	r1, r6
   145fc:	9806      	ldr	r0, [sp, #24]
   145fe:	f004 f8b7 	bl	18770 <__sprint_r>
   14602:	2800      	cmp	r0, #0
   14604:	d001      	beq.n	1460a <_vfprintf_r+0x35e>
   14606:	f000 fccf 	bl	14fa8 <_vfprintf_r+0xcfc>
   1460a:	3c10      	subs	r4, #16
   1460c:	68ba      	ldr	r2, [r7, #8]
   1460e:	687b      	ldr	r3, [r7, #4]
   14610:	a932      	add	r1, sp, #200	; 0xc8
   14612:	2c10      	cmp	r4, #16
   14614:	dce7      	bgt.n	145e6 <_vfprintf_r+0x33a>
   14616:	46b3      	mov	fp, r6
   14618:	000e      	movs	r6, r1
   1461a:	4641      	mov	r1, r8
   1461c:	6074      	str	r4, [r6, #4]
   1461e:	3301      	adds	r3, #1
   14620:	18a4      	adds	r4, r4, r2
   14622:	6031      	str	r1, [r6, #0]
   14624:	60bc      	str	r4, [r7, #8]
   14626:	607b      	str	r3, [r7, #4]
   14628:	2b07      	cmp	r3, #7
   1462a:	dd01      	ble.n	14630 <_vfprintf_r+0x384>
   1462c:	f000 fcae 	bl	14f8c <_vfprintf_r+0xce0>
   14630:	ab16      	add	r3, sp, #88	; 0x58
   14632:	7fdb      	ldrb	r3, [r3, #31]
   14634:	3608      	adds	r6, #8
   14636:	4698      	mov	r8, r3
   14638:	e1ca      	b.n	149d0 <_vfprintf_r+0x724>
   1463a:	46c0      	nop			; (mov r8, r8)
   1463c:	ffffdfff 	.word	0xffffdfff
   14640:	000199a0 	.word	0x000199a0
   14644:	00019b28 	.word	0x00019b28
   14648:	00019b48 	.word	0x00019b48
   1464c:	2200      	movs	r2, #0
   1464e:	9d07      	ldr	r5, [sp, #28]
   14650:	3b30      	subs	r3, #48	; 0x30
   14652:	46a8      	mov	r8, r5
   14654:	920b      	str	r2, [sp, #44]	; 0x2c
   14656:	001a      	movs	r2, r3
   14658:	9408      	str	r4, [sp, #32]
   1465a:	002c      	movs	r4, r5
   1465c:	4655      	mov	r5, sl
   1465e:	4682      	mov	sl, r0
   14660:	4640      	mov	r0, r8
   14662:	4688      	mov	r8, r1
   14664:	0011      	movs	r1, r2
   14666:	2200      	movs	r2, #0
   14668:	0093      	lsls	r3, r2, #2
   1466a:	189a      	adds	r2, r3, r2
   1466c:	7803      	ldrb	r3, [r0, #0]
   1466e:	0052      	lsls	r2, r2, #1
   14670:	188a      	adds	r2, r1, r2
   14672:	0019      	movs	r1, r3
   14674:	3401      	adds	r4, #1
   14676:	3930      	subs	r1, #48	; 0x30
   14678:	0020      	movs	r0, r4
   1467a:	2909      	cmp	r1, #9
   1467c:	d9f4      	bls.n	14668 <_vfprintf_r+0x3bc>
   1467e:	9407      	str	r4, [sp, #28]
   14680:	4650      	mov	r0, sl
   14682:	9c08      	ldr	r4, [sp, #32]
   14684:	920b      	str	r2, [sp, #44]	; 0x2c
   14686:	4641      	mov	r1, r8
   14688:	46aa      	mov	sl, r5
   1468a:	e69b      	b.n	143c4 <_vfprintf_r+0x118>
   1468c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1468e:	9312      	str	r3, [sp, #72]	; 0x48
   14690:	6813      	ldr	r3, [r2, #0]
   14692:	2120      	movs	r1, #32
   14694:	9308      	str	r3, [sp, #32]
   14696:	466b      	mov	r3, sp
   14698:	185b      	adds	r3, r3, r1
   1469a:	781b      	ldrb	r3, [r3, #0]
   1469c:	ad28      	add	r5, sp, #160	; 0xa0
   1469e:	702b      	strb	r3, [r5, #0]
   146a0:	2300      	movs	r3, #0
   146a2:	a916      	add	r1, sp, #88	; 0x58
   146a4:	77cb      	strb	r3, [r1, #31]
   146a6:	0013      	movs	r3, r2
   146a8:	3304      	adds	r3, #4
   146aa:	930f      	str	r3, [sp, #60]	; 0x3c
   146ac:	2300      	movs	r3, #0
   146ae:	9409      	str	r4, [sp, #36]	; 0x24
   146b0:	4698      	mov	r8, r3
   146b2:	3301      	adds	r3, #1
   146b4:	9308      	str	r3, [sp, #32]
   146b6:	930e      	str	r3, [sp, #56]	; 0x38
   146b8:	2300      	movs	r3, #0
   146ba:	9511      	str	r5, [sp, #68]	; 0x44
   146bc:	469a      	mov	sl, r3
   146be:	9313      	str	r3, [sp, #76]	; 0x4c
   146c0:	e76f      	b.n	145a2 <_vfprintf_r+0x2f6>
   146c2:	9312      	str	r3, [sp, #72]	; 0x48
   146c4:	2900      	cmp	r1, #0
   146c6:	d001      	beq.n	146cc <_vfprintf_r+0x420>
   146c8:	f001 f94d 	bl	15966 <_vfprintf_r+0x16ba>
   146cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   146ce:	06a3      	lsls	r3, r4, #26
   146d0:	d501      	bpl.n	146d6 <_vfprintf_r+0x42a>
   146d2:	f000 fd5a 	bl	1518a <_vfprintf_r+0xede>
   146d6:	06e3      	lsls	r3, r4, #27
   146d8:	d501      	bpl.n	146de <_vfprintf_r+0x432>
   146da:	f000 fcab 	bl	15034 <_vfprintf_r+0xd88>
   146de:	0663      	lsls	r3, r4, #25
   146e0:	d401      	bmi.n	146e6 <_vfprintf_r+0x43a>
   146e2:	f000 fca7 	bl	15034 <_vfprintf_r+0xd88>
   146e6:	2100      	movs	r1, #0
   146e8:	5e53      	ldrsh	r3, [r2, r1]
   146ea:	930c      	str	r3, [sp, #48]	; 0x30
   146ec:	3204      	adds	r2, #4
   146ee:	17db      	asrs	r3, r3, #31
   146f0:	930d      	str	r3, [sp, #52]	; 0x34
   146f2:	920f      	str	r2, [sp, #60]	; 0x3c
   146f4:	2b00      	cmp	r3, #0
   146f6:	da01      	bge.n	146fc <_vfprintf_r+0x450>
   146f8:	f000 fdb2 	bl	15260 <_vfprintf_r+0xfb4>
   146fc:	990c      	ldr	r1, [sp, #48]	; 0x30
   146fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   14700:	0008      	movs	r0, r1
   14702:	4651      	mov	r1, sl
   14704:	ab16      	add	r3, sp, #88	; 0x58
   14706:	7fdb      	ldrb	r3, [r3, #31]
   14708:	4310      	orrs	r0, r2
   1470a:	4698      	mov	r8, r3
   1470c:	0002      	movs	r2, r0
   1470e:	2301      	movs	r3, #1
   14710:	3101      	adds	r1, #1
   14712:	d000      	beq.n	14716 <_vfprintf_r+0x46a>
   14714:	e718      	b.n	14548 <_vfprintf_r+0x29c>
   14716:	2a00      	cmp	r2, #0
   14718:	d100      	bne.n	1471c <_vfprintf_r+0x470>
   1471a:	e35a      	b.n	14dd2 <_vfprintf_r+0xb26>
   1471c:	9409      	str	r4, [sp, #36]	; 0x24
   1471e:	2b01      	cmp	r3, #1
   14720:	d101      	bne.n	14726 <_vfprintf_r+0x47a>
   14722:	f000 fc06 	bl	14f32 <_vfprintf_r+0xc86>
   14726:	2b02      	cmp	r3, #2
   14728:	d000      	beq.n	1472c <_vfprintf_r+0x480>
   1472a:	e380      	b.n	14e2e <_vfprintf_r+0xb82>
   1472c:	9c19      	ldr	r4, [sp, #100]	; 0x64
   1472e:	200f      	movs	r0, #15
   14730:	46a1      	mov	r9, r4
   14732:	46b4      	mov	ip, r6
   14734:	ab32      	add	r3, sp, #200	; 0xc8
   14736:	0019      	movs	r1, r3
   14738:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1473a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1473c:	0004      	movs	r4, r0
   1473e:	464d      	mov	r5, r9
   14740:	4014      	ands	r4, r2
   14742:	5d2c      	ldrb	r4, [r5, r4]
   14744:	071e      	lsls	r6, r3, #28
   14746:	0915      	lsrs	r5, r2, #4
   14748:	3901      	subs	r1, #1
   1474a:	432e      	orrs	r6, r5
   1474c:	700c      	strb	r4, [r1, #0]
   1474e:	091c      	lsrs	r4, r3, #4
   14750:	0023      	movs	r3, r4
   14752:	0034      	movs	r4, r6
   14754:	0032      	movs	r2, r6
   14756:	431c      	orrs	r4, r3
   14758:	d1f0      	bne.n	1473c <_vfprintf_r+0x490>
   1475a:	920c      	str	r2, [sp, #48]	; 0x30
   1475c:	930d      	str	r3, [sp, #52]	; 0x34
   1475e:	ab32      	add	r3, sp, #200	; 0xc8
   14760:	1a5b      	subs	r3, r3, r1
   14762:	9111      	str	r1, [sp, #68]	; 0x44
   14764:	4666      	mov	r6, ip
   14766:	930e      	str	r3, [sp, #56]	; 0x38
   14768:	e70d      	b.n	14586 <_vfprintf_r+0x2da>
   1476a:	4663      	mov	r3, ip
   1476c:	431c      	orrs	r4, r3
   1476e:	9b07      	ldr	r3, [sp, #28]
   14770:	781b      	ldrb	r3, [r3, #0]
   14772:	e624      	b.n	143be <_vfprintf_r+0x112>
   14774:	9b07      	ldr	r3, [sp, #28]
   14776:	781b      	ldrb	r3, [r3, #0]
   14778:	2b6c      	cmp	r3, #108	; 0x6c
   1477a:	d101      	bne.n	14780 <_vfprintf_r+0x4d4>
   1477c:	f000 fe8c 	bl	15498 <_vfprintf_r+0x11ec>
   14780:	2210      	movs	r2, #16
   14782:	4314      	orrs	r4, r2
   14784:	e61b      	b.n	143be <_vfprintf_r+0x112>
   14786:	2900      	cmp	r1, #0
   14788:	d001      	beq.n	1478e <_vfprintf_r+0x4e2>
   1478a:	f001 f8d5 	bl	15938 <_vfprintf_r+0x168c>
   1478e:	06a3      	lsls	r3, r4, #26
   14790:	d501      	bpl.n	14796 <_vfprintf_r+0x4ea>
   14792:	f000 fe76 	bl	15482 <_vfprintf_r+0x11d6>
   14796:	06e3      	lsls	r3, r4, #27
   14798:	d500      	bpl.n	1479c <_vfprintf_r+0x4f0>
   1479a:	e110      	b.n	149be <_vfprintf_r+0x712>
   1479c:	0663      	lsls	r3, r4, #25
   1479e:	d400      	bmi.n	147a2 <_vfprintf_r+0x4f6>
   147a0:	e10d      	b.n	149be <_vfprintf_r+0x712>
   147a2:	4669      	mov	r1, sp
   147a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   147a6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   147a8:	681a      	ldr	r2, [r3, #0]
   147aa:	3304      	adds	r3, #4
   147ac:	9208      	str	r2, [sp, #32]
   147ae:	8011      	strh	r1, [r2, #0]
   147b0:	930f      	str	r3, [sp, #60]	; 0x3c
   147b2:	e5c9      	b.n	14348 <_vfprintf_r+0x9c>
   147b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   147b6:	2230      	movs	r2, #48	; 0x30
   147b8:	680b      	ldr	r3, [r1, #0]
   147ba:	930c      	str	r3, [sp, #48]	; 0x30
   147bc:	2300      	movs	r3, #0
   147be:	930d      	str	r3, [sp, #52]	; 0x34
   147c0:	3302      	adds	r3, #2
   147c2:	431c      	orrs	r4, r3
   147c4:	ab1e      	add	r3, sp, #120	; 0x78
   147c6:	701a      	strb	r2, [r3, #0]
   147c8:	3248      	adds	r2, #72	; 0x48
   147ca:	705a      	strb	r2, [r3, #1]
   147cc:	000b      	movs	r3, r1
   147ce:	3304      	adds	r3, #4
   147d0:	930f      	str	r3, [sp, #60]	; 0x3c
   147d2:	4bc1      	ldr	r3, [pc, #772]	; (14ad8 <_vfprintf_r+0x82c>)
   147d4:	9212      	str	r2, [sp, #72]	; 0x48
   147d6:	9319      	str	r3, [sp, #100]	; 0x64
   147d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   147da:	2302      	movs	r3, #2
   147dc:	e6ac      	b.n	14538 <_vfprintf_r+0x28c>
   147de:	464b      	mov	r3, r9
   147e0:	431c      	orrs	r4, r3
   147e2:	9b07      	ldr	r3, [sp, #28]
   147e4:	781b      	ldrb	r3, [r3, #0]
   147e6:	e5ea      	b.n	143be <_vfprintf_r+0x112>
   147e8:	9312      	str	r3, [sp, #72]	; 0x48
   147ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   147ec:	a916      	add	r1, sp, #88	; 0x58
   147ee:	1d1d      	adds	r5, r3, #4
   147f0:	681b      	ldr	r3, [r3, #0]
   147f2:	001a      	movs	r2, r3
   147f4:	9311      	str	r3, [sp, #68]	; 0x44
   147f6:	2300      	movs	r3, #0
   147f8:	77cb      	strb	r3, [r1, #31]
   147fa:	2a00      	cmp	r2, #0
   147fc:	d101      	bne.n	14802 <_vfprintf_r+0x556>
   147fe:	f000 ff01 	bl	15604 <_vfprintf_r+0x1358>
   14802:	4653      	mov	r3, sl
   14804:	3301      	adds	r3, #1
   14806:	d101      	bne.n	1480c <_vfprintf_r+0x560>
   14808:	f000 fe64 	bl	154d4 <_vfprintf_r+0x1228>
   1480c:	4652      	mov	r2, sl
   1480e:	2100      	movs	r1, #0
   14810:	9811      	ldr	r0, [sp, #68]	; 0x44
   14812:	f003 f965 	bl	17ae0 <memchr>
   14816:	2800      	cmp	r0, #0
   14818:	d101      	bne.n	1481e <_vfprintf_r+0x572>
   1481a:	f000 ff78 	bl	1570e <_vfprintf_r+0x1462>
   1481e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14820:	1ac3      	subs	r3, r0, r3
   14822:	001a      	movs	r2, r3
   14824:	930e      	str	r3, [sp, #56]	; 0x38
   14826:	43db      	mvns	r3, r3
   14828:	17db      	asrs	r3, r3, #31
   1482a:	401a      	ands	r2, r3
   1482c:	ab16      	add	r3, sp, #88	; 0x58
   1482e:	7fdb      	ldrb	r3, [r3, #31]
   14830:	9208      	str	r2, [sp, #32]
   14832:	4698      	mov	r8, r3
   14834:	2300      	movs	r3, #0
   14836:	950f      	str	r5, [sp, #60]	; 0x3c
   14838:	9409      	str	r4, [sp, #36]	; 0x24
   1483a:	469a      	mov	sl, r3
   1483c:	9313      	str	r3, [sp, #76]	; 0x4c
   1483e:	e6aa      	b.n	14596 <_vfprintf_r+0x2ea>
   14840:	2308      	movs	r3, #8
   14842:	431c      	orrs	r4, r3
   14844:	9b07      	ldr	r3, [sp, #28]
   14846:	781b      	ldrb	r3, [r3, #0]
   14848:	e5b9      	b.n	143be <_vfprintf_r+0x112>
   1484a:	9312      	str	r3, [sp, #72]	; 0x48
   1484c:	2310      	movs	r3, #16
   1484e:	431c      	orrs	r4, r3
   14850:	06a3      	lsls	r3, r4, #26
   14852:	d501      	bpl.n	14858 <_vfprintf_r+0x5ac>
   14854:	f000 fca7 	bl	151a6 <_vfprintf_r+0xefa>
   14858:	06e3      	lsls	r3, r4, #27
   1485a:	d500      	bpl.n	1485e <_vfprintf_r+0x5b2>
   1485c:	e3ee      	b.n	1503c <_vfprintf_r+0xd90>
   1485e:	0663      	lsls	r3, r4, #25
   14860:	d400      	bmi.n	14864 <_vfprintf_r+0x5b8>
   14862:	e3eb      	b.n	1503c <_vfprintf_r+0xd90>
   14864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14866:	881a      	ldrh	r2, [r3, #0]
   14868:	920c      	str	r2, [sp, #48]	; 0x30
   1486a:	2200      	movs	r2, #0
   1486c:	3304      	adds	r3, #4
   1486e:	920d      	str	r2, [sp, #52]	; 0x34
   14870:	930f      	str	r3, [sp, #60]	; 0x3c
   14872:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14874:	2300      	movs	r3, #0
   14876:	e65f      	b.n	14538 <_vfprintf_r+0x28c>
   14878:	9312      	str	r3, [sp, #72]	; 0x48
   1487a:	2310      	movs	r3, #16
   1487c:	431c      	orrs	r4, r3
   1487e:	06a3      	lsls	r3, r4, #26
   14880:	d501      	bpl.n	14886 <_vfprintf_r+0x5da>
   14882:	f000 fcba 	bl	151fa <_vfprintf_r+0xf4e>
   14886:	06e3      	lsls	r3, r4, #27
   14888:	d500      	bpl.n	1488c <_vfprintf_r+0x5e0>
   1488a:	e3da      	b.n	15042 <_vfprintf_r+0xd96>
   1488c:	0663      	lsls	r3, r4, #25
   1488e:	d400      	bmi.n	14892 <_vfprintf_r+0x5e6>
   14890:	e3d7      	b.n	15042 <_vfprintf_r+0xd96>
   14892:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14894:	881a      	ldrh	r2, [r3, #0]
   14896:	920c      	str	r2, [sp, #48]	; 0x30
   14898:	2200      	movs	r2, #0
   1489a:	3304      	adds	r3, #4
   1489c:	920d      	str	r2, [sp, #52]	; 0x34
   1489e:	930f      	str	r3, [sp, #60]	; 0x3c
   148a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   148a2:	2301      	movs	r3, #1
   148a4:	e648      	b.n	14538 <_vfprintf_r+0x28c>
   148a6:	9312      	str	r3, [sp, #72]	; 0x48
   148a8:	2900      	cmp	r1, #0
   148aa:	d001      	beq.n	148b0 <_vfprintf_r+0x604>
   148ac:	f001 f857 	bl	1595e <_vfprintf_r+0x16b2>
   148b0:	4b8a      	ldr	r3, [pc, #552]	; (14adc <_vfprintf_r+0x830>)
   148b2:	9319      	str	r3, [sp, #100]	; 0x64
   148b4:	e618      	b.n	144e8 <_vfprintf_r+0x23c>
   148b6:	2301      	movs	r3, #1
   148b8:	431c      	orrs	r4, r3
   148ba:	9b07      	ldr	r3, [sp, #28]
   148bc:	781b      	ldrb	r3, [r3, #0]
   148be:	e57e      	b.n	143be <_vfprintf_r+0x112>
   148c0:	2380      	movs	r3, #128	; 0x80
   148c2:	431c      	orrs	r4, r3
   148c4:	9b07      	ldr	r3, [sp, #28]
   148c6:	781b      	ldrb	r3, [r3, #0]
   148c8:	e579      	b.n	143be <_vfprintf_r+0x112>
   148ca:	9b07      	ldr	r3, [sp, #28]
   148cc:	781b      	ldrb	r3, [r3, #0]
   148ce:	2800      	cmp	r0, #0
   148d0:	d000      	beq.n	148d4 <_vfprintf_r+0x628>
   148d2:	e574      	b.n	143be <_vfprintf_r+0x112>
   148d4:	2101      	movs	r1, #1
   148d6:	3020      	adds	r0, #32
   148d8:	e571      	b.n	143be <_vfprintf_r+0x112>
   148da:	9312      	str	r3, [sp, #72]	; 0x48
   148dc:	2900      	cmp	r1, #0
   148de:	d001      	beq.n	148e4 <_vfprintf_r+0x638>
   148e0:	f001 f839 	bl	15956 <_vfprintf_r+0x16aa>
   148e4:	2207      	movs	r2, #7
   148e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   148e8:	3307      	adds	r3, #7
   148ea:	4393      	bics	r3, r2
   148ec:	3201      	adds	r2, #1
   148ee:	4694      	mov	ip, r2
   148f0:	449c      	add	ip, r3
   148f2:	4662      	mov	r2, ip
   148f4:	920f      	str	r2, [sp, #60]	; 0x3c
   148f6:	681a      	ldr	r2, [r3, #0]
   148f8:	9216      	str	r2, [sp, #88]	; 0x58
   148fa:	685b      	ldr	r3, [r3, #4]
   148fc:	2201      	movs	r2, #1
   148fe:	9315      	str	r3, [sp, #84]	; 0x54
   14900:	9b15      	ldr	r3, [sp, #84]	; 0x54
   14902:	9d16      	ldr	r5, [sp, #88]	; 0x58
   14904:	005b      	lsls	r3, r3, #1
   14906:	085b      	lsrs	r3, r3, #1
   14908:	4698      	mov	r8, r3
   1490a:	4252      	negs	r2, r2
   1490c:	4b74      	ldr	r3, [pc, #464]	; (14ae0 <_vfprintf_r+0x834>)
   1490e:	0028      	movs	r0, r5
   14910:	4641      	mov	r1, r8
   14912:	f004 f9ed 	bl	18cf0 <__aeabi_dcmpun>
   14916:	2800      	cmp	r0, #0
   14918:	d001      	beq.n	1491e <_vfprintf_r+0x672>
   1491a:	f000 fcb4 	bl	15286 <_vfprintf_r+0xfda>
   1491e:	2201      	movs	r2, #1
   14920:	4b6f      	ldr	r3, [pc, #444]	; (14ae0 <_vfprintf_r+0x834>)
   14922:	4252      	negs	r2, r2
   14924:	0028      	movs	r0, r5
   14926:	4641      	mov	r1, r8
   14928:	f7ff f956 	bl	13bd8 <__aeabi_dcmple>
   1492c:	2800      	cmp	r0, #0
   1492e:	d001      	beq.n	14934 <_vfprintf_r+0x688>
   14930:	f000 fca9 	bl	15286 <_vfprintf_r+0xfda>
   14934:	2200      	movs	r2, #0
   14936:	2300      	movs	r3, #0
   14938:	9816      	ldr	r0, [sp, #88]	; 0x58
   1493a:	9915      	ldr	r1, [sp, #84]	; 0x54
   1493c:	f7ff f942 	bl	13bc4 <__aeabi_dcmplt>
   14940:	2800      	cmp	r0, #0
   14942:	d001      	beq.n	14948 <_vfprintf_r+0x69c>
   14944:	f000 fd55 	bl	153f2 <_vfprintf_r+0x1146>
   14948:	ab16      	add	r3, sp, #88	; 0x58
   1494a:	7fdb      	ldrb	r3, [r3, #31]
   1494c:	4698      	mov	r8, r3
   1494e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14950:	2b47      	cmp	r3, #71	; 0x47
   14952:	dd01      	ble.n	14958 <_vfprintf_r+0x6ac>
   14954:	f000 fdb4 	bl	154c0 <_vfprintf_r+0x1214>
   14958:	4b62      	ldr	r3, [pc, #392]	; (14ae4 <_vfprintf_r+0x838>)
   1495a:	9311      	str	r3, [sp, #68]	; 0x44
   1495c:	2380      	movs	r3, #128	; 0x80
   1495e:	439c      	bics	r4, r3
   14960:	3b7d      	subs	r3, #125	; 0x7d
   14962:	9308      	str	r3, [sp, #32]
   14964:	930e      	str	r3, [sp, #56]	; 0x38
   14966:	2300      	movs	r3, #0
   14968:	9409      	str	r4, [sp, #36]	; 0x24
   1496a:	469a      	mov	sl, r3
   1496c:	9313      	str	r3, [sp, #76]	; 0x4c
   1496e:	e612      	b.n	14596 <_vfprintf_r+0x2ea>
   14970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14972:	1d1a      	adds	r2, r3, #4
   14974:	681b      	ldr	r3, [r3, #0]
   14976:	930b      	str	r3, [sp, #44]	; 0x2c
   14978:	2b00      	cmp	r3, #0
   1497a:	da00      	bge.n	1497e <_vfprintf_r+0x6d2>
   1497c:	e578      	b.n	14470 <_vfprintf_r+0x1c4>
   1497e:	9b07      	ldr	r3, [sp, #28]
   14980:	920f      	str	r2, [sp, #60]	; 0x3c
   14982:	781b      	ldrb	r3, [r3, #0]
   14984:	e51b      	b.n	143be <_vfprintf_r+0x112>
   14986:	9312      	str	r3, [sp, #72]	; 0x48
   14988:	2900      	cmp	r1, #0
   1498a:	d001      	beq.n	14990 <_vfprintf_r+0x6e4>
   1498c:	f000 ffcc 	bl	15928 <_vfprintf_r+0x167c>
   14990:	2310      	movs	r3, #16
   14992:	431c      	orrs	r4, r3
   14994:	e69a      	b.n	146cc <_vfprintf_r+0x420>
   14996:	9312      	str	r3, [sp, #72]	; 0x48
   14998:	e771      	b.n	1487e <_vfprintf_r+0x5d2>
   1499a:	9312      	str	r3, [sp, #72]	; 0x48
   1499c:	e758      	b.n	14850 <_vfprintf_r+0x5a4>
   1499e:	9312      	str	r3, [sp, #72]	; 0x48
   149a0:	2900      	cmp	r1, #0
   149a2:	d001      	beq.n	149a8 <_vfprintf_r+0x6fc>
   149a4:	f000 ffd3 	bl	1594e <_vfprintf_r+0x16a2>
   149a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   149aa:	2b00      	cmp	r3, #0
   149ac:	d100      	bne.n	149b0 <_vfprintf_r+0x704>
   149ae:	e18d      	b.n	14ccc <_vfprintf_r+0xa20>
   149b0:	ad28      	add	r5, sp, #160	; 0xa0
   149b2:	702b      	strb	r3, [r5, #0]
   149b4:	2300      	movs	r3, #0
   149b6:	aa16      	add	r2, sp, #88	; 0x58
   149b8:	77d3      	strb	r3, [r2, #31]
   149ba:	9409      	str	r4, [sp, #36]	; 0x24
   149bc:	e678      	b.n	146b0 <_vfprintf_r+0x404>
   149be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   149c0:	990a      	ldr	r1, [sp, #40]	; 0x28
   149c2:	6813      	ldr	r3, [r2, #0]
   149c4:	6019      	str	r1, [r3, #0]
   149c6:	0013      	movs	r3, r2
   149c8:	3304      	adds	r3, #4
   149ca:	930f      	str	r3, [sp, #60]	; 0x3c
   149cc:	e4bc      	b.n	14348 <_vfprintf_r+0x9c>
   149ce:	68bc      	ldr	r4, [r7, #8]
   149d0:	4643      	mov	r3, r8
   149d2:	2b00      	cmp	r3, #0
   149d4:	d00f      	beq.n	149f6 <_vfprintf_r+0x74a>
   149d6:	aa16      	add	r2, sp, #88	; 0x58
   149d8:	231f      	movs	r3, #31
   149da:	4694      	mov	ip, r2
   149dc:	4463      	add	r3, ip
   149de:	6033      	str	r3, [r6, #0]
   149e0:	2301      	movs	r3, #1
   149e2:	6073      	str	r3, [r6, #4]
   149e4:	687b      	ldr	r3, [r7, #4]
   149e6:	3401      	adds	r4, #1
   149e8:	3301      	adds	r3, #1
   149ea:	60bc      	str	r4, [r7, #8]
   149ec:	607b      	str	r3, [r7, #4]
   149ee:	2b07      	cmp	r3, #7
   149f0:	dd00      	ble.n	149f4 <_vfprintf_r+0x748>
   149f2:	e203      	b.n	14dfc <_vfprintf_r+0xb50>
   149f4:	3608      	adds	r6, #8
   149f6:	464b      	mov	r3, r9
   149f8:	2b00      	cmp	r3, #0
   149fa:	d00c      	beq.n	14a16 <_vfprintf_r+0x76a>
   149fc:	ab1e      	add	r3, sp, #120	; 0x78
   149fe:	6033      	str	r3, [r6, #0]
   14a00:	2302      	movs	r3, #2
   14a02:	6073      	str	r3, [r6, #4]
   14a04:	687b      	ldr	r3, [r7, #4]
   14a06:	3402      	adds	r4, #2
   14a08:	3301      	adds	r3, #1
   14a0a:	60bc      	str	r4, [r7, #8]
   14a0c:	607b      	str	r3, [r7, #4]
   14a0e:	2b07      	cmp	r3, #7
   14a10:	dd00      	ble.n	14a14 <_vfprintf_r+0x768>
   14a12:	e1fd      	b.n	14e10 <_vfprintf_r+0xb64>
   14a14:	3608      	adds	r6, #8
   14a16:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14a18:	2b80      	cmp	r3, #128	; 0x80
   14a1a:	d100      	bne.n	14a1e <_vfprintf_r+0x772>
   14a1c:	e173      	b.n	14d06 <_vfprintf_r+0xa5a>
   14a1e:	4653      	mov	r3, sl
   14a20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14a22:	1a9d      	subs	r5, r3, r2
   14a24:	2d00      	cmp	r5, #0
   14a26:	dd32      	ble.n	14a8e <_vfprintf_r+0x7e2>
   14a28:	4a2f      	ldr	r2, [pc, #188]	; (14ae8 <_vfprintf_r+0x83c>)
   14a2a:	687b      	ldr	r3, [r7, #4]
   14a2c:	4691      	mov	r9, r2
   14a2e:	2d10      	cmp	r5, #16
   14a30:	dd22      	ble.n	14a78 <_vfprintf_r+0x7cc>
   14a32:	2210      	movs	r2, #16
   14a34:	4692      	mov	sl, r2
   14a36:	0022      	movs	r2, r4
   14a38:	465c      	mov	r4, fp
   14a3a:	e003      	b.n	14a44 <_vfprintf_r+0x798>
   14a3c:	3d10      	subs	r5, #16
   14a3e:	3608      	adds	r6, #8
   14a40:	2d10      	cmp	r5, #16
   14a42:	dd17      	ble.n	14a74 <_vfprintf_r+0x7c8>
   14a44:	4649      	mov	r1, r9
   14a46:	6031      	str	r1, [r6, #0]
   14a48:	4651      	mov	r1, sl
   14a4a:	3210      	adds	r2, #16
   14a4c:	3301      	adds	r3, #1
   14a4e:	6071      	str	r1, [r6, #4]
   14a50:	60ba      	str	r2, [r7, #8]
   14a52:	607b      	str	r3, [r7, #4]
   14a54:	2b07      	cmp	r3, #7
   14a56:	ddf1      	ble.n	14a3c <_vfprintf_r+0x790>
   14a58:	003a      	movs	r2, r7
   14a5a:	0021      	movs	r1, r4
   14a5c:	9806      	ldr	r0, [sp, #24]
   14a5e:	f003 fe87 	bl	18770 <__sprint_r>
   14a62:	2800      	cmp	r0, #0
   14a64:	d000      	beq.n	14a68 <_vfprintf_r+0x7bc>
   14a66:	e18a      	b.n	14d7e <_vfprintf_r+0xad2>
   14a68:	3d10      	subs	r5, #16
   14a6a:	68ba      	ldr	r2, [r7, #8]
   14a6c:	687b      	ldr	r3, [r7, #4]
   14a6e:	ae32      	add	r6, sp, #200	; 0xc8
   14a70:	2d10      	cmp	r5, #16
   14a72:	dce7      	bgt.n	14a44 <_vfprintf_r+0x798>
   14a74:	46a3      	mov	fp, r4
   14a76:	0014      	movs	r4, r2
   14a78:	464a      	mov	r2, r9
   14a7a:	1964      	adds	r4, r4, r5
   14a7c:	3301      	adds	r3, #1
   14a7e:	6032      	str	r2, [r6, #0]
   14a80:	6075      	str	r5, [r6, #4]
   14a82:	60bc      	str	r4, [r7, #8]
   14a84:	607b      	str	r3, [r7, #4]
   14a86:	2b07      	cmp	r3, #7
   14a88:	dd00      	ble.n	14a8c <_vfprintf_r+0x7e0>
   14a8a:	e1ad      	b.n	14de8 <_vfprintf_r+0xb3c>
   14a8c:	3608      	adds	r6, #8
   14a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14a90:	05db      	lsls	r3, r3, #23
   14a92:	d500      	bpl.n	14a96 <_vfprintf_r+0x7ea>
   14a94:	e0be      	b.n	14c14 <_vfprintf_r+0x968>
   14a96:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14a98:	6033      	str	r3, [r6, #0]
   14a9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14a9c:	469c      	mov	ip, r3
   14a9e:	6073      	str	r3, [r6, #4]
   14aa0:	687b      	ldr	r3, [r7, #4]
   14aa2:	4464      	add	r4, ip
   14aa4:	3301      	adds	r3, #1
   14aa6:	60bc      	str	r4, [r7, #8]
   14aa8:	607b      	str	r3, [r7, #4]
   14aaa:	2b07      	cmp	r3, #7
   14aac:	dd00      	ble.n	14ab0 <_vfprintf_r+0x804>
   14aae:	e0a6      	b.n	14bfe <_vfprintf_r+0x952>
   14ab0:	3608      	adds	r6, #8
   14ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14ab4:	075b      	lsls	r3, r3, #29
   14ab6:	d54a      	bpl.n	14b4e <_vfprintf_r+0x8a2>
   14ab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14aba:	9a08      	ldr	r2, [sp, #32]
   14abc:	1a9d      	subs	r5, r3, r2
   14abe:	2d00      	cmp	r5, #0
   14ac0:	dd45      	ble.n	14b4e <_vfprintf_r+0x8a2>
   14ac2:	4a0a      	ldr	r2, [pc, #40]	; (14aec <_vfprintf_r+0x840>)
   14ac4:	687b      	ldr	r3, [r7, #4]
   14ac6:	4690      	mov	r8, r2
   14ac8:	2d10      	cmp	r5, #16
   14aca:	dd2f      	ble.n	14b2c <_vfprintf_r+0x880>
   14acc:	2210      	movs	r2, #16
   14ace:	4691      	mov	r9, r2
   14ad0:	0022      	movs	r2, r4
   14ad2:	465c      	mov	r4, fp
   14ad4:	e010      	b.n	14af8 <_vfprintf_r+0x84c>
   14ad6:	46c0      	nop			; (mov r8, r8)
   14ad8:	00019b28 	.word	0x00019b28
   14adc:	00019b14 	.word	0x00019b14
   14ae0:	7fefffff 	.word	0x7fefffff
   14ae4:	00019b04 	.word	0x00019b04
   14ae8:	00019b58 	.word	0x00019b58
   14aec:	00019b48 	.word	0x00019b48
   14af0:	3d10      	subs	r5, #16
   14af2:	3608      	adds	r6, #8
   14af4:	2d10      	cmp	r5, #16
   14af6:	dd17      	ble.n	14b28 <_vfprintf_r+0x87c>
   14af8:	49d1      	ldr	r1, [pc, #836]	; (14e40 <_vfprintf_r+0xb94>)
   14afa:	3210      	adds	r2, #16
   14afc:	6031      	str	r1, [r6, #0]
   14afe:	4649      	mov	r1, r9
   14b00:	3301      	adds	r3, #1
   14b02:	6071      	str	r1, [r6, #4]
   14b04:	60ba      	str	r2, [r7, #8]
   14b06:	607b      	str	r3, [r7, #4]
   14b08:	2b07      	cmp	r3, #7
   14b0a:	ddf1      	ble.n	14af0 <_vfprintf_r+0x844>
   14b0c:	003a      	movs	r2, r7
   14b0e:	0021      	movs	r1, r4
   14b10:	9806      	ldr	r0, [sp, #24]
   14b12:	f003 fe2d 	bl	18770 <__sprint_r>
   14b16:	2800      	cmp	r0, #0
   14b18:	d000      	beq.n	14b1c <_vfprintf_r+0x870>
   14b1a:	e130      	b.n	14d7e <_vfprintf_r+0xad2>
   14b1c:	3d10      	subs	r5, #16
   14b1e:	68ba      	ldr	r2, [r7, #8]
   14b20:	687b      	ldr	r3, [r7, #4]
   14b22:	ae32      	add	r6, sp, #200	; 0xc8
   14b24:	2d10      	cmp	r5, #16
   14b26:	dce7      	bgt.n	14af8 <_vfprintf_r+0x84c>
   14b28:	46a3      	mov	fp, r4
   14b2a:	0014      	movs	r4, r2
   14b2c:	4642      	mov	r2, r8
   14b2e:	1964      	adds	r4, r4, r5
   14b30:	3301      	adds	r3, #1
   14b32:	c624      	stmia	r6!, {r2, r5}
   14b34:	60bc      	str	r4, [r7, #8]
   14b36:	607b      	str	r3, [r7, #4]
   14b38:	2b07      	cmp	r3, #7
   14b3a:	dd08      	ble.n	14b4e <_vfprintf_r+0x8a2>
   14b3c:	003a      	movs	r2, r7
   14b3e:	4659      	mov	r1, fp
   14b40:	9806      	ldr	r0, [sp, #24]
   14b42:	f003 fe15 	bl	18770 <__sprint_r>
   14b46:	2800      	cmp	r0, #0
   14b48:	d000      	beq.n	14b4c <_vfprintf_r+0x8a0>
   14b4a:	e13f      	b.n	14dcc <_vfprintf_r+0xb20>
   14b4c:	68bc      	ldr	r4, [r7, #8]
   14b4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14b50:	9908      	ldr	r1, [sp, #32]
   14b52:	428b      	cmp	r3, r1
   14b54:	da00      	bge.n	14b58 <_vfprintf_r+0x8ac>
   14b56:	000b      	movs	r3, r1
   14b58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14b5a:	4694      	mov	ip, r2
   14b5c:	449c      	add	ip, r3
   14b5e:	4663      	mov	r3, ip
   14b60:	930a      	str	r3, [sp, #40]	; 0x28
   14b62:	2c00      	cmp	r4, #0
   14b64:	d000      	beq.n	14b68 <_vfprintf_r+0x8bc>
   14b66:	e129      	b.n	14dbc <_vfprintf_r+0xb10>
   14b68:	2300      	movs	r3, #0
   14b6a:	ae32      	add	r6, sp, #200	; 0xc8
   14b6c:	607b      	str	r3, [r7, #4]
   14b6e:	f7ff fbeb 	bl	14348 <_vfprintf_r+0x9c>
   14b72:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14b74:	2b01      	cmp	r3, #1
   14b76:	dc00      	bgt.n	14b7a <_vfprintf_r+0x8ce>
   14b78:	e103      	b.n	14d82 <_vfprintf_r+0xad6>
   14b7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14b7c:	3401      	adds	r4, #1
   14b7e:	6033      	str	r3, [r6, #0]
   14b80:	2301      	movs	r3, #1
   14b82:	6073      	str	r3, [r6, #4]
   14b84:	687b      	ldr	r3, [r7, #4]
   14b86:	60bc      	str	r4, [r7, #8]
   14b88:	3301      	adds	r3, #1
   14b8a:	607b      	str	r3, [r7, #4]
   14b8c:	2b07      	cmp	r3, #7
   14b8e:	dd00      	ble.n	14b92 <_vfprintf_r+0x8e6>
   14b90:	e2ef      	b.n	15172 <_vfprintf_r+0xec6>
   14b92:	3608      	adds	r6, #8
   14b94:	9a18      	ldr	r2, [sp, #96]	; 0x60
   14b96:	3301      	adds	r3, #1
   14b98:	6032      	str	r2, [r6, #0]
   14b9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   14b9c:	4698      	mov	r8, r3
   14b9e:	4694      	mov	ip, r2
   14ba0:	4464      	add	r4, ip
   14ba2:	6072      	str	r2, [r6, #4]
   14ba4:	60bc      	str	r4, [r7, #8]
   14ba6:	607b      	str	r3, [r7, #4]
   14ba8:	2b07      	cmp	r3, #7
   14baa:	dd00      	ble.n	14bae <_vfprintf_r+0x902>
   14bac:	e318      	b.n	151e0 <_vfprintf_r+0xf34>
   14bae:	3608      	adds	r6, #8
   14bb0:	2200      	movs	r2, #0
   14bb2:	2300      	movs	r3, #0
   14bb4:	9816      	ldr	r0, [sp, #88]	; 0x58
   14bb6:	9915      	ldr	r1, [sp, #84]	; 0x54
   14bb8:	f7fe fffe 	bl	13bb8 <__aeabi_dcmpeq>
   14bbc:	2800      	cmp	r0, #0
   14bbe:	d000      	beq.n	14bc2 <_vfprintf_r+0x916>
   14bc0:	e1f4      	b.n	14fac <_vfprintf_r+0xd00>
   14bc2:	9d11      	ldr	r5, [sp, #68]	; 0x44
   14bc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14bc6:	3501      	adds	r5, #1
   14bc8:	3b01      	subs	r3, #1
   14bca:	6035      	str	r5, [r6, #0]
   14bcc:	6073      	str	r3, [r6, #4]
   14bce:	18e4      	adds	r4, r4, r3
   14bd0:	2301      	movs	r3, #1
   14bd2:	469c      	mov	ip, r3
   14bd4:	44e0      	add	r8, ip
   14bd6:	4643      	mov	r3, r8
   14bd8:	60bc      	str	r4, [r7, #8]
   14bda:	607b      	str	r3, [r7, #4]
   14bdc:	2b07      	cmp	r3, #7
   14bde:	dd00      	ble.n	14be2 <_vfprintf_r+0x936>
   14be0:	e0e0      	b.n	14da4 <_vfprintf_r+0xaf8>
   14be2:	3608      	adds	r6, #8
   14be4:	ab21      	add	r3, sp, #132	; 0x84
   14be6:	6033      	str	r3, [r6, #0]
   14be8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   14bea:	469c      	mov	ip, r3
   14bec:	6073      	str	r3, [r6, #4]
   14bee:	4643      	mov	r3, r8
   14bf0:	4464      	add	r4, ip
   14bf2:	3301      	adds	r3, #1
   14bf4:	60bc      	str	r4, [r7, #8]
   14bf6:	607b      	str	r3, [r7, #4]
   14bf8:	2b07      	cmp	r3, #7
   14bfa:	dc00      	bgt.n	14bfe <_vfprintf_r+0x952>
   14bfc:	e758      	b.n	14ab0 <_vfprintf_r+0x804>
   14bfe:	003a      	movs	r2, r7
   14c00:	4659      	mov	r1, fp
   14c02:	9806      	ldr	r0, [sp, #24]
   14c04:	f003 fdb4 	bl	18770 <__sprint_r>
   14c08:	2800      	cmp	r0, #0
   14c0a:	d000      	beq.n	14c0e <_vfprintf_r+0x962>
   14c0c:	e0de      	b.n	14dcc <_vfprintf_r+0xb20>
   14c0e:	68bc      	ldr	r4, [r7, #8]
   14c10:	ae32      	add	r6, sp, #200	; 0xc8
   14c12:	e74e      	b.n	14ab2 <_vfprintf_r+0x806>
   14c14:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14c16:	2b65      	cmp	r3, #101	; 0x65
   14c18:	ddab      	ble.n	14b72 <_vfprintf_r+0x8c6>
   14c1a:	2200      	movs	r2, #0
   14c1c:	2300      	movs	r3, #0
   14c1e:	9816      	ldr	r0, [sp, #88]	; 0x58
   14c20:	9915      	ldr	r1, [sp, #84]	; 0x54
   14c22:	f7fe ffc9 	bl	13bb8 <__aeabi_dcmpeq>
   14c26:	2800      	cmp	r0, #0
   14c28:	d100      	bne.n	14c2c <_vfprintf_r+0x980>
   14c2a:	e134      	b.n	14e96 <_vfprintf_r+0xbea>
   14c2c:	4b85      	ldr	r3, [pc, #532]	; (14e44 <_vfprintf_r+0xb98>)
   14c2e:	3401      	adds	r4, #1
   14c30:	6033      	str	r3, [r6, #0]
   14c32:	2301      	movs	r3, #1
   14c34:	6073      	str	r3, [r6, #4]
   14c36:	687b      	ldr	r3, [r7, #4]
   14c38:	60bc      	str	r4, [r7, #8]
   14c3a:	3301      	adds	r3, #1
   14c3c:	607b      	str	r3, [r7, #4]
   14c3e:	2b07      	cmp	r3, #7
   14c40:	dd00      	ble.n	14c44 <_vfprintf_r+0x998>
   14c42:	e3dc      	b.n	153fe <_vfprintf_r+0x1152>
   14c44:	3608      	adds	r6, #8
   14c46:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14c48:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14c4a:	4293      	cmp	r3, r2
   14c4c:	db03      	blt.n	14c56 <_vfprintf_r+0x9aa>
   14c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14c50:	07db      	lsls	r3, r3, #31
   14c52:	d400      	bmi.n	14c56 <_vfprintf_r+0x9aa>
   14c54:	e3b7      	b.n	153c6 <_vfprintf_r+0x111a>
   14c56:	9b18      	ldr	r3, [sp, #96]	; 0x60
   14c58:	68ba      	ldr	r2, [r7, #8]
   14c5a:	6033      	str	r3, [r6, #0]
   14c5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14c5e:	469c      	mov	ip, r3
   14c60:	6073      	str	r3, [r6, #4]
   14c62:	687b      	ldr	r3, [r7, #4]
   14c64:	4462      	add	r2, ip
   14c66:	3301      	adds	r3, #1
   14c68:	0014      	movs	r4, r2
   14c6a:	60ba      	str	r2, [r7, #8]
   14c6c:	607b      	str	r3, [r7, #4]
   14c6e:	2b07      	cmp	r3, #7
   14c70:	dd01      	ble.n	14c76 <_vfprintf_r+0x9ca>
   14c72:	f000 fc19 	bl	154a8 <_vfprintf_r+0x11fc>
   14c76:	3608      	adds	r6, #8
   14c78:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14c7a:	1e5d      	subs	r5, r3, #1
   14c7c:	2d00      	cmp	r5, #0
   14c7e:	dc00      	bgt.n	14c82 <_vfprintf_r+0x9d6>
   14c80:	e717      	b.n	14ab2 <_vfprintf_r+0x806>
   14c82:	4a71      	ldr	r2, [pc, #452]	; (14e48 <_vfprintf_r+0xb9c>)
   14c84:	687b      	ldr	r3, [r7, #4]
   14c86:	4691      	mov	r9, r2
   14c88:	2d10      	cmp	r5, #16
   14c8a:	dc00      	bgt.n	14c8e <_vfprintf_r+0x9e2>
   14c8c:	e1c3      	b.n	15016 <_vfprintf_r+0xd6a>
   14c8e:	2210      	movs	r2, #16
   14c90:	4690      	mov	r8, r2
   14c92:	0022      	movs	r2, r4
   14c94:	464c      	mov	r4, r9
   14c96:	46d9      	mov	r9, fp
   14c98:	e004      	b.n	14ca4 <_vfprintf_r+0x9f8>
   14c9a:	3608      	adds	r6, #8
   14c9c:	3d10      	subs	r5, #16
   14c9e:	2d10      	cmp	r5, #16
   14ca0:	dc00      	bgt.n	14ca4 <_vfprintf_r+0x9f8>
   14ca2:	e37c      	b.n	1539e <_vfprintf_r+0x10f2>
   14ca4:	4641      	mov	r1, r8
   14ca6:	3210      	adds	r2, #16
   14ca8:	3301      	adds	r3, #1
   14caa:	6034      	str	r4, [r6, #0]
   14cac:	6071      	str	r1, [r6, #4]
   14cae:	60ba      	str	r2, [r7, #8]
   14cb0:	607b      	str	r3, [r7, #4]
   14cb2:	2b07      	cmp	r3, #7
   14cb4:	ddf1      	ble.n	14c9a <_vfprintf_r+0x9ee>
   14cb6:	003a      	movs	r2, r7
   14cb8:	4649      	mov	r1, r9
   14cba:	9806      	ldr	r0, [sp, #24]
   14cbc:	f003 fd58 	bl	18770 <__sprint_r>
   14cc0:	2800      	cmp	r0, #0
   14cc2:	d10b      	bne.n	14cdc <_vfprintf_r+0xa30>
   14cc4:	68ba      	ldr	r2, [r7, #8]
   14cc6:	687b      	ldr	r3, [r7, #4]
   14cc8:	ae32      	add	r6, sp, #200	; 0xc8
   14cca:	e7e7      	b.n	14c9c <_vfprintf_r+0x9f0>
   14ccc:	68bb      	ldr	r3, [r7, #8]
   14cce:	46d9      	mov	r9, fp
   14cd0:	2b00      	cmp	r3, #0
   14cd2:	d001      	beq.n	14cd8 <_vfprintf_r+0xa2c>
   14cd4:	f000 fd4c 	bl	15770 <_vfprintf_r+0x14c4>
   14cd8:	2300      	movs	r3, #0
   14cda:	607b      	str	r3, [r7, #4]
   14cdc:	464b      	mov	r3, r9
   14cde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   14ce0:	07db      	lsls	r3, r3, #31
   14ce2:	d40d      	bmi.n	14d00 <_vfprintf_r+0xa54>
   14ce4:	464b      	mov	r3, r9
   14ce6:	899b      	ldrh	r3, [r3, #12]
   14ce8:	059a      	lsls	r2, r3, #22
   14cea:	d505      	bpl.n	14cf8 <_vfprintf_r+0xa4c>
   14cec:	065b      	lsls	r3, r3, #25
   14cee:	d401      	bmi.n	14cf4 <_vfprintf_r+0xa48>
   14cf0:	f7ff fb8d 	bl	1440e <_vfprintf_r+0x162>
   14cf4:	f7ff fb88 	bl	14408 <_vfprintf_r+0x15c>
   14cf8:	464b      	mov	r3, r9
   14cfa:	6d98      	ldr	r0, [r3, #88]	; 0x58
   14cfc:	f002 fbb8 	bl	17470 <__retarget_lock_release_recursive>
   14d00:	464b      	mov	r3, r9
   14d02:	899b      	ldrh	r3, [r3, #12]
   14d04:	e7f2      	b.n	14cec <_vfprintf_r+0xa40>
   14d06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14d08:	9a08      	ldr	r2, [sp, #32]
   14d0a:	1a9d      	subs	r5, r3, r2
   14d0c:	2d00      	cmp	r5, #0
   14d0e:	dc00      	bgt.n	14d12 <_vfprintf_r+0xa66>
   14d10:	e685      	b.n	14a1e <_vfprintf_r+0x772>
   14d12:	4a4d      	ldr	r2, [pc, #308]	; (14e48 <_vfprintf_r+0xb9c>)
   14d14:	687b      	ldr	r3, [r7, #4]
   14d16:	4691      	mov	r9, r2
   14d18:	2d10      	cmp	r5, #16
   14d1a:	dd24      	ble.n	14d66 <_vfprintf_r+0xaba>
   14d1c:	2210      	movs	r2, #16
   14d1e:	0021      	movs	r1, r4
   14d20:	4690      	mov	r8, r2
   14d22:	465c      	mov	r4, fp
   14d24:	0032      	movs	r2, r6
   14d26:	464e      	mov	r6, r9
   14d28:	e003      	b.n	14d32 <_vfprintf_r+0xa86>
   14d2a:	3d10      	subs	r5, #16
   14d2c:	3208      	adds	r2, #8
   14d2e:	2d10      	cmp	r5, #16
   14d30:	dd15      	ble.n	14d5e <_vfprintf_r+0xab2>
   14d32:	4640      	mov	r0, r8
   14d34:	3110      	adds	r1, #16
   14d36:	3301      	adds	r3, #1
   14d38:	6016      	str	r6, [r2, #0]
   14d3a:	6050      	str	r0, [r2, #4]
   14d3c:	60b9      	str	r1, [r7, #8]
   14d3e:	607b      	str	r3, [r7, #4]
   14d40:	2b07      	cmp	r3, #7
   14d42:	ddf2      	ble.n	14d2a <_vfprintf_r+0xa7e>
   14d44:	003a      	movs	r2, r7
   14d46:	0021      	movs	r1, r4
   14d48:	9806      	ldr	r0, [sp, #24]
   14d4a:	f003 fd11 	bl	18770 <__sprint_r>
   14d4e:	2800      	cmp	r0, #0
   14d50:	d115      	bne.n	14d7e <_vfprintf_r+0xad2>
   14d52:	3d10      	subs	r5, #16
   14d54:	68b9      	ldr	r1, [r7, #8]
   14d56:	687b      	ldr	r3, [r7, #4]
   14d58:	aa32      	add	r2, sp, #200	; 0xc8
   14d5a:	2d10      	cmp	r5, #16
   14d5c:	dce9      	bgt.n	14d32 <_vfprintf_r+0xa86>
   14d5e:	46a3      	mov	fp, r4
   14d60:	46b1      	mov	r9, r6
   14d62:	000c      	movs	r4, r1
   14d64:	0016      	movs	r6, r2
   14d66:	464a      	mov	r2, r9
   14d68:	1964      	adds	r4, r4, r5
   14d6a:	3301      	adds	r3, #1
   14d6c:	6032      	str	r2, [r6, #0]
   14d6e:	6075      	str	r5, [r6, #4]
   14d70:	60bc      	str	r4, [r7, #8]
   14d72:	607b      	str	r3, [r7, #4]
   14d74:	2b07      	cmp	r3, #7
   14d76:	dd00      	ble.n	14d7a <_vfprintf_r+0xace>
   14d78:	e263      	b.n	15242 <_vfprintf_r+0xf96>
   14d7a:	3608      	adds	r6, #8
   14d7c:	e64f      	b.n	14a1e <_vfprintf_r+0x772>
   14d7e:	46a1      	mov	r9, r4
   14d80:	e7ac      	b.n	14cdc <_vfprintf_r+0xa30>
   14d82:	2301      	movs	r3, #1
   14d84:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14d86:	4213      	tst	r3, r2
   14d88:	d000      	beq.n	14d8c <_vfprintf_r+0xae0>
   14d8a:	e6f6      	b.n	14b7a <_vfprintf_r+0x8ce>
   14d8c:	6073      	str	r3, [r6, #4]
   14d8e:	687b      	ldr	r3, [r7, #4]
   14d90:	9a11      	ldr	r2, [sp, #68]	; 0x44
   14d92:	3301      	adds	r3, #1
   14d94:	3401      	adds	r4, #1
   14d96:	6032      	str	r2, [r6, #0]
   14d98:	60bc      	str	r4, [r7, #8]
   14d9a:	4698      	mov	r8, r3
   14d9c:	607b      	str	r3, [r7, #4]
   14d9e:	2b07      	cmp	r3, #7
   14da0:	dc00      	bgt.n	14da4 <_vfprintf_r+0xaf8>
   14da2:	e71e      	b.n	14be2 <_vfprintf_r+0x936>
   14da4:	003a      	movs	r2, r7
   14da6:	4659      	mov	r1, fp
   14da8:	9806      	ldr	r0, [sp, #24]
   14daa:	f003 fce1 	bl	18770 <__sprint_r>
   14dae:	2800      	cmp	r0, #0
   14db0:	d10c      	bne.n	14dcc <_vfprintf_r+0xb20>
   14db2:	687b      	ldr	r3, [r7, #4]
   14db4:	68bc      	ldr	r4, [r7, #8]
   14db6:	4698      	mov	r8, r3
   14db8:	ae32      	add	r6, sp, #200	; 0xc8
   14dba:	e713      	b.n	14be4 <_vfprintf_r+0x938>
   14dbc:	003a      	movs	r2, r7
   14dbe:	4659      	mov	r1, fp
   14dc0:	9806      	ldr	r0, [sp, #24]
   14dc2:	f003 fcd5 	bl	18770 <__sprint_r>
   14dc6:	2800      	cmp	r0, #0
   14dc8:	d100      	bne.n	14dcc <_vfprintf_r+0xb20>
   14dca:	e6cd      	b.n	14b68 <_vfprintf_r+0x8bc>
   14dcc:	46d9      	mov	r9, fp
   14dce:	e785      	b.n	14cdc <_vfprintf_r+0xa30>
   14dd0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   14dd2:	2b01      	cmp	r3, #1
   14dd4:	d100      	bne.n	14dd8 <_vfprintf_r+0xb2c>
   14dd6:	e148      	b.n	1506a <_vfprintf_r+0xdbe>
   14dd8:	2b02      	cmp	r3, #2
   14dda:	d123      	bne.n	14e24 <_vfprintf_r+0xb78>
   14ddc:	9409      	str	r4, [sp, #36]	; 0x24
   14dde:	2300      	movs	r3, #0
   14de0:	2400      	movs	r4, #0
   14de2:	930c      	str	r3, [sp, #48]	; 0x30
   14de4:	940d      	str	r4, [sp, #52]	; 0x34
   14de6:	e4a1      	b.n	1472c <_vfprintf_r+0x480>
   14de8:	003a      	movs	r2, r7
   14dea:	4659      	mov	r1, fp
   14dec:	9806      	ldr	r0, [sp, #24]
   14dee:	f003 fcbf 	bl	18770 <__sprint_r>
   14df2:	2800      	cmp	r0, #0
   14df4:	d1ea      	bne.n	14dcc <_vfprintf_r+0xb20>
   14df6:	68bc      	ldr	r4, [r7, #8]
   14df8:	ae32      	add	r6, sp, #200	; 0xc8
   14dfa:	e648      	b.n	14a8e <_vfprintf_r+0x7e2>
   14dfc:	003a      	movs	r2, r7
   14dfe:	4659      	mov	r1, fp
   14e00:	9806      	ldr	r0, [sp, #24]
   14e02:	f003 fcb5 	bl	18770 <__sprint_r>
   14e06:	2800      	cmp	r0, #0
   14e08:	d1e0      	bne.n	14dcc <_vfprintf_r+0xb20>
   14e0a:	68bc      	ldr	r4, [r7, #8]
   14e0c:	ae32      	add	r6, sp, #200	; 0xc8
   14e0e:	e5f2      	b.n	149f6 <_vfprintf_r+0x74a>
   14e10:	003a      	movs	r2, r7
   14e12:	4659      	mov	r1, fp
   14e14:	9806      	ldr	r0, [sp, #24]
   14e16:	f003 fcab 	bl	18770 <__sprint_r>
   14e1a:	2800      	cmp	r0, #0
   14e1c:	d1d6      	bne.n	14dcc <_vfprintf_r+0xb20>
   14e1e:	68bc      	ldr	r4, [r7, #8]
   14e20:	ae32      	add	r6, sp, #200	; 0xc8
   14e22:	e5f8      	b.n	14a16 <_vfprintf_r+0x76a>
   14e24:	9409      	str	r4, [sp, #36]	; 0x24
   14e26:	2300      	movs	r3, #0
   14e28:	2400      	movs	r4, #0
   14e2a:	930c      	str	r3, [sp, #48]	; 0x30
   14e2c:	940d      	str	r4, [sp, #52]	; 0x34
   14e2e:	980c      	ldr	r0, [sp, #48]	; 0x30
   14e30:	990d      	ldr	r1, [sp, #52]	; 0x34
   14e32:	4653      	mov	r3, sl
   14e34:	aa32      	add	r2, sp, #200	; 0xc8
   14e36:	4691      	mov	r9, r2
   14e38:	9308      	str	r3, [sp, #32]
   14e3a:	46b2      	mov	sl, r6
   14e3c:	e007      	b.n	14e4e <_vfprintf_r+0xba2>
   14e3e:	46c0      	nop			; (mov r8, r8)
   14e40:	00019b48 	.word	0x00019b48
   14e44:	00019b44 	.word	0x00019b44
   14e48:	00019b58 	.word	0x00019b58
   14e4c:	46a1      	mov	r9, r4
   14e4e:	074a      	lsls	r2, r1, #29
   14e50:	4694      	mov	ip, r2
   14e52:	464b      	mov	r3, r9
   14e54:	4665      	mov	r5, ip
   14e56:	1e5c      	subs	r4, r3, #1
   14e58:	08c6      	lsrs	r6, r0, #3
   14e5a:	2307      	movs	r3, #7
   14e5c:	08ca      	lsrs	r2, r1, #3
   14e5e:	4335      	orrs	r5, r6
   14e60:	0011      	movs	r1, r2
   14e62:	002a      	movs	r2, r5
   14e64:	4003      	ands	r3, r0
   14e66:	3330      	adds	r3, #48	; 0x30
   14e68:	7023      	strb	r3, [r4, #0]
   14e6a:	0028      	movs	r0, r5
   14e6c:	430a      	orrs	r2, r1
   14e6e:	d1ed      	bne.n	14e4c <_vfprintf_r+0xba0>
   14e70:	900c      	str	r0, [sp, #48]	; 0x30
   14e72:	910d      	str	r1, [sp, #52]	; 0x34
   14e74:	9908      	ldr	r1, [sp, #32]
   14e76:	4656      	mov	r6, sl
   14e78:	468a      	mov	sl, r1
   14e7a:	9909      	ldr	r1, [sp, #36]	; 0x24
   14e7c:	464a      	mov	r2, r9
   14e7e:	9411      	str	r4, [sp, #68]	; 0x44
   14e80:	07c9      	lsls	r1, r1, #31
   14e82:	d500      	bpl.n	14e86 <_vfprintf_r+0xbda>
   14e84:	e0e0      	b.n	15048 <_vfprintf_r+0xd9c>
   14e86:	ab32      	add	r3, sp, #200	; 0xc8
   14e88:	1b1b      	subs	r3, r3, r4
   14e8a:	930e      	str	r3, [sp, #56]	; 0x38
   14e8c:	f7ff fb7b 	bl	14586 <_vfprintf_r+0x2da>
   14e90:	9c07      	ldr	r4, [sp, #28]
   14e92:	f7ff fa7d 	bl	14390 <_vfprintf_r+0xe4>
   14e96:	981f      	ldr	r0, [sp, #124]	; 0x7c
   14e98:	2800      	cmp	r0, #0
   14e9a:	dc00      	bgt.n	14e9e <_vfprintf_r+0xbf2>
   14e9c:	e2b9      	b.n	15412 <_vfprintf_r+0x1166>
   14e9e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14ea0:	9914      	ldr	r1, [sp, #80]	; 0x50
   14ea2:	0013      	movs	r3, r2
   14ea4:	4690      	mov	r8, r2
   14ea6:	428b      	cmp	r3, r1
   14ea8:	dd00      	ble.n	14eac <_vfprintf_r+0xc00>
   14eaa:	4688      	mov	r8, r1
   14eac:	4643      	mov	r3, r8
   14eae:	2b00      	cmp	r3, #0
   14eb0:	dd0c      	ble.n	14ecc <_vfprintf_r+0xc20>
   14eb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14eb4:	4444      	add	r4, r8
   14eb6:	6033      	str	r3, [r6, #0]
   14eb8:	4643      	mov	r3, r8
   14eba:	6073      	str	r3, [r6, #4]
   14ebc:	687b      	ldr	r3, [r7, #4]
   14ebe:	60bc      	str	r4, [r7, #8]
   14ec0:	3301      	adds	r3, #1
   14ec2:	607b      	str	r3, [r7, #4]
   14ec4:	2b07      	cmp	r3, #7
   14ec6:	dd00      	ble.n	14eca <_vfprintf_r+0xc1e>
   14ec8:	e389      	b.n	155de <_vfprintf_r+0x1332>
   14eca:	3608      	adds	r6, #8
   14ecc:	4643      	mov	r3, r8
   14ece:	43db      	mvns	r3, r3
   14ed0:	4642      	mov	r2, r8
   14ed2:	17db      	asrs	r3, r3, #31
   14ed4:	4013      	ands	r3, r2
   14ed6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14ed8:	1ad3      	subs	r3, r2, r3
   14eda:	4698      	mov	r8, r3
   14edc:	2b00      	cmp	r3, #0
   14ede:	dc00      	bgt.n	14ee2 <_vfprintf_r+0xc36>
   14ee0:	e0eb      	b.n	150ba <_vfprintf_r+0xe0e>
   14ee2:	2b10      	cmp	r3, #16
   14ee4:	dc01      	bgt.n	14eea <_vfprintf_r+0xc3e>
   14ee6:	f000 fcd9 	bl	1589c <_vfprintf_r+0x15f0>
   14eea:	4adc      	ldr	r2, [pc, #880]	; (1525c <_vfprintf_r+0xfb0>)
   14eec:	687b      	ldr	r3, [r7, #4]
   14eee:	4691      	mov	r9, r2
   14ef0:	2210      	movs	r2, #16
   14ef2:	464d      	mov	r5, r9
   14ef4:	4692      	mov	sl, r2
   14ef6:	0022      	movs	r2, r4
   14ef8:	4644      	mov	r4, r8
   14efa:	46d8      	mov	r8, fp
   14efc:	e004      	b.n	14f08 <_vfprintf_r+0xc5c>
   14efe:	3608      	adds	r6, #8
   14f00:	3c10      	subs	r4, #16
   14f02:	2c10      	cmp	r4, #16
   14f04:	dc00      	bgt.n	14f08 <_vfprintf_r+0xc5c>
   14f06:	e0bf      	b.n	15088 <_vfprintf_r+0xddc>
   14f08:	4651      	mov	r1, sl
   14f0a:	3210      	adds	r2, #16
   14f0c:	3301      	adds	r3, #1
   14f0e:	6035      	str	r5, [r6, #0]
   14f10:	6071      	str	r1, [r6, #4]
   14f12:	60ba      	str	r2, [r7, #8]
   14f14:	607b      	str	r3, [r7, #4]
   14f16:	2b07      	cmp	r3, #7
   14f18:	ddf1      	ble.n	14efe <_vfprintf_r+0xc52>
   14f1a:	003a      	movs	r2, r7
   14f1c:	4641      	mov	r1, r8
   14f1e:	9806      	ldr	r0, [sp, #24]
   14f20:	f003 fc26 	bl	18770 <__sprint_r>
   14f24:	2800      	cmp	r0, #0
   14f26:	d000      	beq.n	14f2a <_vfprintf_r+0xc7e>
   14f28:	e3b6      	b.n	15698 <_vfprintf_r+0x13ec>
   14f2a:	68ba      	ldr	r2, [r7, #8]
   14f2c:	687b      	ldr	r3, [r7, #4]
   14f2e:	ae32      	add	r6, sp, #200	; 0xc8
   14f30:	e7e6      	b.n	14f00 <_vfprintf_r+0xc54>
   14f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14f34:	2b00      	cmp	r3, #0
   14f36:	d100      	bne.n	14f3a <_vfprintf_r+0xc8e>
   14f38:	e092      	b.n	15060 <_vfprintf_r+0xdb4>
   14f3a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   14f3c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   14f3e:	ab32      	add	r3, sp, #200	; 0xc8
   14f40:	46b1      	mov	r9, r6
   14f42:	001e      	movs	r6, r3
   14f44:	0020      	movs	r0, r4
   14f46:	0029      	movs	r1, r5
   14f48:	220a      	movs	r2, #10
   14f4a:	2300      	movs	r3, #0
   14f4c:	f7fc f90e 	bl	1116c <__aeabi_uldivmod>
   14f50:	3e01      	subs	r6, #1
   14f52:	3230      	adds	r2, #48	; 0x30
   14f54:	7032      	strb	r2, [r6, #0]
   14f56:	2300      	movs	r3, #0
   14f58:	0020      	movs	r0, r4
   14f5a:	0029      	movs	r1, r5
   14f5c:	220a      	movs	r2, #10
   14f5e:	f7fc f905 	bl	1116c <__aeabi_uldivmod>
   14f62:	0003      	movs	r3, r0
   14f64:	0004      	movs	r4, r0
   14f66:	000d      	movs	r5, r1
   14f68:	430b      	orrs	r3, r1
   14f6a:	d1eb      	bne.n	14f44 <_vfprintf_r+0xc98>
   14f6c:	0032      	movs	r2, r6
   14f6e:	ab32      	add	r3, sp, #200	; 0xc8
   14f70:	1a9b      	subs	r3, r3, r2
   14f72:	9611      	str	r6, [sp, #68]	; 0x44
   14f74:	940c      	str	r4, [sp, #48]	; 0x30
   14f76:	950d      	str	r5, [sp, #52]	; 0x34
   14f78:	464e      	mov	r6, r9
   14f7a:	930e      	str	r3, [sp, #56]	; 0x38
   14f7c:	f7ff fb03 	bl	14586 <_vfprintf_r+0x2da>
   14f80:	2300      	movs	r3, #0
   14f82:	930e      	str	r3, [sp, #56]	; 0x38
   14f84:	ab32      	add	r3, sp, #200	; 0xc8
   14f86:	9311      	str	r3, [sp, #68]	; 0x44
   14f88:	f7ff fafd 	bl	14586 <_vfprintf_r+0x2da>
   14f8c:	003a      	movs	r2, r7
   14f8e:	4659      	mov	r1, fp
   14f90:	9806      	ldr	r0, [sp, #24]
   14f92:	f003 fbed 	bl	18770 <__sprint_r>
   14f96:	2800      	cmp	r0, #0
   14f98:	d000      	beq.n	14f9c <_vfprintf_r+0xcf0>
   14f9a:	e717      	b.n	14dcc <_vfprintf_r+0xb20>
   14f9c:	ab16      	add	r3, sp, #88	; 0x58
   14f9e:	7fdb      	ldrb	r3, [r3, #31]
   14fa0:	68bc      	ldr	r4, [r7, #8]
   14fa2:	4698      	mov	r8, r3
   14fa4:	ae32      	add	r6, sp, #200	; 0xc8
   14fa6:	e513      	b.n	149d0 <_vfprintf_r+0x724>
   14fa8:	46b1      	mov	r9, r6
   14faa:	e697      	b.n	14cdc <_vfprintf_r+0xa30>
   14fac:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14fae:	1e5d      	subs	r5, r3, #1
   14fb0:	2d00      	cmp	r5, #0
   14fb2:	dc00      	bgt.n	14fb6 <_vfprintf_r+0xd0a>
   14fb4:	e616      	b.n	14be4 <_vfprintf_r+0x938>
   14fb6:	4ba9      	ldr	r3, [pc, #676]	; (1525c <_vfprintf_r+0xfb0>)
   14fb8:	4699      	mov	r9, r3
   14fba:	2d10      	cmp	r5, #16
   14fbc:	dc00      	bgt.n	14fc0 <_vfprintf_r+0xd14>
   14fbe:	e10a      	b.n	151d6 <_vfprintf_r+0xf2a>
   14fc0:	2310      	movs	r3, #16
   14fc2:	0022      	movs	r2, r4
   14fc4:	469a      	mov	sl, r3
   14fc6:	465c      	mov	r4, fp
   14fc8:	4643      	mov	r3, r8
   14fca:	e004      	b.n	14fd6 <_vfprintf_r+0xd2a>
   14fcc:	3608      	adds	r6, #8
   14fce:	3d10      	subs	r5, #16
   14fd0:	2d10      	cmp	r5, #16
   14fd2:	dc00      	bgt.n	14fd6 <_vfprintf_r+0xd2a>
   14fd4:	e0fc      	b.n	151d0 <_vfprintf_r+0xf24>
   14fd6:	4649      	mov	r1, r9
   14fd8:	6031      	str	r1, [r6, #0]
   14fda:	4651      	mov	r1, sl
   14fdc:	3210      	adds	r2, #16
   14fde:	3301      	adds	r3, #1
   14fe0:	6071      	str	r1, [r6, #4]
   14fe2:	60ba      	str	r2, [r7, #8]
   14fe4:	607b      	str	r3, [r7, #4]
   14fe6:	2b07      	cmp	r3, #7
   14fe8:	ddf0      	ble.n	14fcc <_vfprintf_r+0xd20>
   14fea:	003a      	movs	r2, r7
   14fec:	0021      	movs	r1, r4
   14fee:	9806      	ldr	r0, [sp, #24]
   14ff0:	f003 fbbe 	bl	18770 <__sprint_r>
   14ff4:	2800      	cmp	r0, #0
   14ff6:	d000      	beq.n	14ffa <_vfprintf_r+0xd4e>
   14ff8:	e6c1      	b.n	14d7e <_vfprintf_r+0xad2>
   14ffa:	68ba      	ldr	r2, [r7, #8]
   14ffc:	687b      	ldr	r3, [r7, #4]
   14ffe:	ae32      	add	r6, sp, #200	; 0xc8
   15000:	e7e5      	b.n	14fce <_vfprintf_r+0xd22>
   15002:	990c      	ldr	r1, [sp, #48]	; 0x30
   15004:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15006:	0008      	movs	r0, r1
   15008:	4310      	orrs	r0, r2
   1500a:	2302      	movs	r3, #2
   1500c:	0002      	movs	r2, r0
   1500e:	f7ff fa93 	bl	14538 <_vfprintf_r+0x28c>
   15012:	46a3      	mov	fp, r4
   15014:	0014      	movs	r4, r2
   15016:	464a      	mov	r2, r9
   15018:	1964      	adds	r4, r4, r5
   1501a:	3301      	adds	r3, #1
   1501c:	6032      	str	r2, [r6, #0]
   1501e:	6075      	str	r5, [r6, #4]
   15020:	60bc      	str	r4, [r7, #8]
   15022:	607b      	str	r3, [r7, #4]
   15024:	2b07      	cmp	r3, #7
   15026:	dc00      	bgt.n	1502a <_vfprintf_r+0xd7e>
   15028:	e542      	b.n	14ab0 <_vfprintf_r+0x804>
   1502a:	e5e8      	b.n	14bfe <_vfprintf_r+0x952>
   1502c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1502e:	681a      	ldr	r2, [r3, #0]
   15030:	f7ff fa68 	bl	14504 <_vfprintf_r+0x258>
   15034:	6813      	ldr	r3, [r2, #0]
   15036:	9308      	str	r3, [sp, #32]
   15038:	f7ff fb57 	bl	146ea <_vfprintf_r+0x43e>
   1503c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1503e:	681a      	ldr	r2, [r3, #0]
   15040:	e412      	b.n	14868 <_vfprintf_r+0x5bc>
   15042:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15044:	681a      	ldr	r2, [r3, #0]
   15046:	e426      	b.n	14896 <_vfprintf_r+0x5ea>
   15048:	2b30      	cmp	r3, #48	; 0x30
   1504a:	d100      	bne.n	1504e <_vfprintf_r+0xda2>
   1504c:	e23c      	b.n	154c8 <_vfprintf_r+0x121c>
   1504e:	2330      	movs	r3, #48	; 0x30
   15050:	3a02      	subs	r2, #2
   15052:	7013      	strb	r3, [r2, #0]
   15054:	ab32      	add	r3, sp, #200	; 0xc8
   15056:	1a9b      	subs	r3, r3, r2
   15058:	930e      	str	r3, [sp, #56]	; 0x38
   1505a:	9211      	str	r2, [sp, #68]	; 0x44
   1505c:	f7ff fa93 	bl	14586 <_vfprintf_r+0x2da>
   15060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15062:	2b09      	cmp	r3, #9
   15064:	d900      	bls.n	15068 <_vfprintf_r+0xdbc>
   15066:	e768      	b.n	14f3a <_vfprintf_r+0xc8e>
   15068:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1506a:	2227      	movs	r2, #39	; 0x27
   1506c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1506e:	a928      	add	r1, sp, #160	; 0xa0
   15070:	3330      	adds	r3, #48	; 0x30
   15072:	548b      	strb	r3, [r1, r2]
   15074:	2301      	movs	r3, #1
   15076:	aa16      	add	r2, sp, #88	; 0x58
   15078:	4694      	mov	ip, r2
   1507a:	930e      	str	r3, [sp, #56]	; 0x38
   1507c:	336e      	adds	r3, #110	; 0x6e
   1507e:	4463      	add	r3, ip
   15080:	9409      	str	r4, [sp, #36]	; 0x24
   15082:	9311      	str	r3, [sp, #68]	; 0x44
   15084:	f7ff fa7f 	bl	14586 <_vfprintf_r+0x2da>
   15088:	46c3      	mov	fp, r8
   1508a:	46a9      	mov	r9, r5
   1508c:	46a0      	mov	r8, r4
   1508e:	0014      	movs	r4, r2
   15090:	464a      	mov	r2, r9
   15092:	6032      	str	r2, [r6, #0]
   15094:	4642      	mov	r2, r8
   15096:	4444      	add	r4, r8
   15098:	3301      	adds	r3, #1
   1509a:	6072      	str	r2, [r6, #4]
   1509c:	60bc      	str	r4, [r7, #8]
   1509e:	607b      	str	r3, [r7, #4]
   150a0:	2b07      	cmp	r3, #7
   150a2:	dc00      	bgt.n	150a6 <_vfprintf_r+0xdfa>
   150a4:	e18d      	b.n	153c2 <_vfprintf_r+0x1116>
   150a6:	003a      	movs	r2, r7
   150a8:	4659      	mov	r1, fp
   150aa:	9806      	ldr	r0, [sp, #24]
   150ac:	f003 fb60 	bl	18770 <__sprint_r>
   150b0:	2800      	cmp	r0, #0
   150b2:	d000      	beq.n	150b6 <_vfprintf_r+0xe0a>
   150b4:	e68a      	b.n	14dcc <_vfprintf_r+0xb20>
   150b6:	68bc      	ldr	r4, [r7, #8]
   150b8:	ae32      	add	r6, sp, #200	; 0xc8
   150ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   150bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   150be:	4293      	cmp	r3, r2
   150c0:	db00      	blt.n	150c4 <_vfprintf_r+0xe18>
   150c2:	e179      	b.n	153b8 <_vfprintf_r+0x110c>
   150c4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   150c6:	6032      	str	r2, [r6, #0]
   150c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   150ca:	4694      	mov	ip, r2
   150cc:	6072      	str	r2, [r6, #4]
   150ce:	687a      	ldr	r2, [r7, #4]
   150d0:	4464      	add	r4, ip
   150d2:	3201      	adds	r2, #1
   150d4:	60bc      	str	r4, [r7, #8]
   150d6:	607a      	str	r2, [r7, #4]
   150d8:	2a07      	cmp	r2, #7
   150da:	dd00      	ble.n	150de <_vfprintf_r+0xe32>
   150dc:	e176      	b.n	153cc <_vfprintf_r+0x1120>
   150de:	3608      	adds	r6, #8
   150e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   150e2:	9913      	ldr	r1, [sp, #76]	; 0x4c
   150e4:	1ad3      	subs	r3, r2, r3
   150e6:	1a52      	subs	r2, r2, r1
   150e8:	4690      	mov	r8, r2
   150ea:	429a      	cmp	r2, r3
   150ec:	dd00      	ble.n	150f0 <_vfprintf_r+0xe44>
   150ee:	4698      	mov	r8, r3
   150f0:	4642      	mov	r2, r8
   150f2:	2a00      	cmp	r2, #0
   150f4:	dd0f      	ble.n	15116 <_vfprintf_r+0xe6a>
   150f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   150f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   150fa:	468c      	mov	ip, r1
   150fc:	4462      	add	r2, ip
   150fe:	6032      	str	r2, [r6, #0]
   15100:	4642      	mov	r2, r8
   15102:	6072      	str	r2, [r6, #4]
   15104:	687a      	ldr	r2, [r7, #4]
   15106:	4444      	add	r4, r8
   15108:	3201      	adds	r2, #1
   1510a:	60bc      	str	r4, [r7, #8]
   1510c:	607a      	str	r2, [r7, #4]
   1510e:	2a07      	cmp	r2, #7
   15110:	dd00      	ble.n	15114 <_vfprintf_r+0xe68>
   15112:	e289      	b.n	15628 <_vfprintf_r+0x137c>
   15114:	3608      	adds	r6, #8
   15116:	4642      	mov	r2, r8
   15118:	43d5      	mvns	r5, r2
   1511a:	17ed      	asrs	r5, r5, #31
   1511c:	4015      	ands	r5, r2
   1511e:	1b5d      	subs	r5, r3, r5
   15120:	2d00      	cmp	r5, #0
   15122:	dc00      	bgt.n	15126 <_vfprintf_r+0xe7a>
   15124:	e4c5      	b.n	14ab2 <_vfprintf_r+0x806>
   15126:	4a4d      	ldr	r2, [pc, #308]	; (1525c <_vfprintf_r+0xfb0>)
   15128:	687b      	ldr	r3, [r7, #4]
   1512a:	4691      	mov	r9, r2
   1512c:	2d10      	cmp	r5, #16
   1512e:	dc00      	bgt.n	15132 <_vfprintf_r+0xe86>
   15130:	e771      	b.n	15016 <_vfprintf_r+0xd6a>
   15132:	2210      	movs	r2, #16
   15134:	4690      	mov	r8, r2
   15136:	0022      	movs	r2, r4
   15138:	465c      	mov	r4, fp
   1513a:	e004      	b.n	15146 <_vfprintf_r+0xe9a>
   1513c:	3608      	adds	r6, #8
   1513e:	3d10      	subs	r5, #16
   15140:	2d10      	cmp	r5, #16
   15142:	dc00      	bgt.n	15146 <_vfprintf_r+0xe9a>
   15144:	e765      	b.n	15012 <_vfprintf_r+0xd66>
   15146:	4649      	mov	r1, r9
   15148:	6031      	str	r1, [r6, #0]
   1514a:	4641      	mov	r1, r8
   1514c:	3210      	adds	r2, #16
   1514e:	3301      	adds	r3, #1
   15150:	6071      	str	r1, [r6, #4]
   15152:	60ba      	str	r2, [r7, #8]
   15154:	607b      	str	r3, [r7, #4]
   15156:	2b07      	cmp	r3, #7
   15158:	ddf0      	ble.n	1513c <_vfprintf_r+0xe90>
   1515a:	003a      	movs	r2, r7
   1515c:	0021      	movs	r1, r4
   1515e:	9806      	ldr	r0, [sp, #24]
   15160:	f003 fb06 	bl	18770 <__sprint_r>
   15164:	2800      	cmp	r0, #0
   15166:	d000      	beq.n	1516a <_vfprintf_r+0xebe>
   15168:	e609      	b.n	14d7e <_vfprintf_r+0xad2>
   1516a:	68ba      	ldr	r2, [r7, #8]
   1516c:	687b      	ldr	r3, [r7, #4]
   1516e:	ae32      	add	r6, sp, #200	; 0xc8
   15170:	e7e5      	b.n	1513e <_vfprintf_r+0xe92>
   15172:	003a      	movs	r2, r7
   15174:	4659      	mov	r1, fp
   15176:	9806      	ldr	r0, [sp, #24]
   15178:	f003 fafa 	bl	18770 <__sprint_r>
   1517c:	2800      	cmp	r0, #0
   1517e:	d000      	beq.n	15182 <_vfprintf_r+0xed6>
   15180:	e624      	b.n	14dcc <_vfprintf_r+0xb20>
   15182:	68bc      	ldr	r4, [r7, #8]
   15184:	687b      	ldr	r3, [r7, #4]
   15186:	ae32      	add	r6, sp, #200	; 0xc8
   15188:	e504      	b.n	14b94 <_vfprintf_r+0x8e8>
   1518a:	2307      	movs	r3, #7
   1518c:	3207      	adds	r2, #7
   1518e:	439a      	bics	r2, r3
   15190:	3301      	adds	r3, #1
   15192:	469c      	mov	ip, r3
   15194:	4494      	add	ip, r2
   15196:	4663      	mov	r3, ip
   15198:	930f      	str	r3, [sp, #60]	; 0x3c
   1519a:	6853      	ldr	r3, [r2, #4]
   1519c:	6812      	ldr	r2, [r2, #0]
   1519e:	930d      	str	r3, [sp, #52]	; 0x34
   151a0:	920c      	str	r2, [sp, #48]	; 0x30
   151a2:	f7ff faa7 	bl	146f4 <_vfprintf_r+0x448>
   151a6:	2207      	movs	r2, #7
   151a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   151aa:	3307      	adds	r3, #7
   151ac:	4393      	bics	r3, r2
   151ae:	3201      	adds	r2, #1
   151b0:	4694      	mov	ip, r2
   151b2:	449c      	add	ip, r3
   151b4:	4662      	mov	r2, ip
   151b6:	920f      	str	r2, [sp, #60]	; 0x3c
   151b8:	681a      	ldr	r2, [r3, #0]
   151ba:	685b      	ldr	r3, [r3, #4]
   151bc:	0011      	movs	r1, r2
   151be:	001a      	movs	r2, r3
   151c0:	0008      	movs	r0, r1
   151c2:	4310      	orrs	r0, r2
   151c4:	910c      	str	r1, [sp, #48]	; 0x30
   151c6:	920d      	str	r2, [sp, #52]	; 0x34
   151c8:	2300      	movs	r3, #0
   151ca:	0002      	movs	r2, r0
   151cc:	f7ff f9b4 	bl	14538 <_vfprintf_r+0x28c>
   151d0:	46a3      	mov	fp, r4
   151d2:	4698      	mov	r8, r3
   151d4:	0014      	movs	r4, r2
   151d6:	464b      	mov	r3, r9
   151d8:	6075      	str	r5, [r6, #4]
   151da:	6033      	str	r3, [r6, #0]
   151dc:	1964      	adds	r4, r4, r5
   151de:	e4f7      	b.n	14bd0 <_vfprintf_r+0x924>
   151e0:	003a      	movs	r2, r7
   151e2:	4659      	mov	r1, fp
   151e4:	9806      	ldr	r0, [sp, #24]
   151e6:	f003 fac3 	bl	18770 <__sprint_r>
   151ea:	2800      	cmp	r0, #0
   151ec:	d000      	beq.n	151f0 <_vfprintf_r+0xf44>
   151ee:	e5ed      	b.n	14dcc <_vfprintf_r+0xb20>
   151f0:	687b      	ldr	r3, [r7, #4]
   151f2:	68bc      	ldr	r4, [r7, #8]
   151f4:	4698      	mov	r8, r3
   151f6:	ae32      	add	r6, sp, #200	; 0xc8
   151f8:	e4da      	b.n	14bb0 <_vfprintf_r+0x904>
   151fa:	2207      	movs	r2, #7
   151fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   151fe:	3307      	adds	r3, #7
   15200:	4393      	bics	r3, r2
   15202:	3201      	adds	r2, #1
   15204:	4694      	mov	ip, r2
   15206:	449c      	add	ip, r3
   15208:	4662      	mov	r2, ip
   1520a:	920f      	str	r2, [sp, #60]	; 0x3c
   1520c:	681a      	ldr	r2, [r3, #0]
   1520e:	685b      	ldr	r3, [r3, #4]
   15210:	0011      	movs	r1, r2
   15212:	001a      	movs	r2, r3
   15214:	0008      	movs	r0, r1
   15216:	4310      	orrs	r0, r2
   15218:	910c      	str	r1, [sp, #48]	; 0x30
   1521a:	920d      	str	r2, [sp, #52]	; 0x34
   1521c:	2301      	movs	r3, #1
   1521e:	0002      	movs	r2, r0
   15220:	f7ff f98a 	bl	14538 <_vfprintf_r+0x28c>
   15224:	2207      	movs	r2, #7
   15226:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15228:	3307      	adds	r3, #7
   1522a:	4393      	bics	r3, r2
   1522c:	3201      	adds	r2, #1
   1522e:	4694      	mov	ip, r2
   15230:	449c      	add	ip, r3
   15232:	4662      	mov	r2, ip
   15234:	920f      	str	r2, [sp, #60]	; 0x3c
   15236:	681a      	ldr	r2, [r3, #0]
   15238:	685b      	ldr	r3, [r3, #4]
   1523a:	920c      	str	r2, [sp, #48]	; 0x30
   1523c:	930d      	str	r3, [sp, #52]	; 0x34
   1523e:	f7ff f966 	bl	1450e <_vfprintf_r+0x262>
   15242:	003a      	movs	r2, r7
   15244:	4659      	mov	r1, fp
   15246:	9806      	ldr	r0, [sp, #24]
   15248:	f003 fa92 	bl	18770 <__sprint_r>
   1524c:	2800      	cmp	r0, #0
   1524e:	d000      	beq.n	15252 <_vfprintf_r+0xfa6>
   15250:	e5bc      	b.n	14dcc <_vfprintf_r+0xb20>
   15252:	68bc      	ldr	r4, [r7, #8]
   15254:	ae32      	add	r6, sp, #200	; 0xc8
   15256:	f7ff fbe2 	bl	14a1e <_vfprintf_r+0x772>
   1525a:	46c0      	nop			; (mov r8, r8)
   1525c:	00019b58 	.word	0x00019b58
   15260:	980c      	ldr	r0, [sp, #48]	; 0x30
   15262:	990d      	ldr	r1, [sp, #52]	; 0x34
   15264:	2300      	movs	r3, #0
   15266:	4242      	negs	r2, r0
   15268:	418b      	sbcs	r3, r1
   1526a:	0011      	movs	r1, r2
   1526c:	001a      	movs	r2, r3
   1526e:	232d      	movs	r3, #45	; 0x2d
   15270:	a816      	add	r0, sp, #88	; 0x58
   15272:	77c3      	strb	r3, [r0, #31]
   15274:	0008      	movs	r0, r1
   15276:	4310      	orrs	r0, r2
   15278:	910c      	str	r1, [sp, #48]	; 0x30
   1527a:	920d      	str	r2, [sp, #52]	; 0x34
   1527c:	4698      	mov	r8, r3
   1527e:	0002      	movs	r2, r0
   15280:	3b2c      	subs	r3, #44	; 0x2c
   15282:	f7ff f95d 	bl	14540 <_vfprintf_r+0x294>
   15286:	9916      	ldr	r1, [sp, #88]	; 0x58
   15288:	9d15      	ldr	r5, [sp, #84]	; 0x54
   1528a:	000a      	movs	r2, r1
   1528c:	0008      	movs	r0, r1
   1528e:	002b      	movs	r3, r5
   15290:	0029      	movs	r1, r5
   15292:	f003 fd2d 	bl	18cf0 <__aeabi_dcmpun>
   15296:	2800      	cmp	r0, #0
   15298:	d000      	beq.n	1529c <_vfprintf_r+0xff0>
   1529a:	e2c6      	b.n	1582a <_vfprintf_r+0x157e>
   1529c:	4653      	mov	r3, sl
   1529e:	3301      	adds	r3, #1
   152a0:	d100      	bne.n	152a4 <_vfprintf_r+0xff8>
   152a2:	e09f      	b.n	153e4 <_vfprintf_r+0x1138>
   152a4:	2320      	movs	r3, #32
   152a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   152a8:	439a      	bics	r2, r3
   152aa:	920e      	str	r2, [sp, #56]	; 0x38
   152ac:	2a47      	cmp	r2, #71	; 0x47
   152ae:	d100      	bne.n	152b2 <_vfprintf_r+0x1006>
   152b0:	e1a1      	b.n	155f6 <_vfprintf_r+0x134a>
   152b2:	2380      	movs	r3, #128	; 0x80
   152b4:	005b      	lsls	r3, r3, #1
   152b6:	4323      	orrs	r3, r4
   152b8:	9309      	str	r3, [sp, #36]	; 0x24
   152ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
   152bc:	2b00      	cmp	r3, #0
   152be:	da00      	bge.n	152c2 <_vfprintf_r+0x1016>
   152c0:	e1ed      	b.n	1569e <_vfprintf_r+0x13f2>
   152c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
   152c4:	9308      	str	r3, [sp, #32]
   152c6:	2300      	movs	r3, #0
   152c8:	4691      	mov	r9, r2
   152ca:	9310      	str	r3, [sp, #64]	; 0x40
   152cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   152ce:	2b66      	cmp	r3, #102	; 0x66
   152d0:	d100      	bne.n	152d4 <_vfprintf_r+0x1028>
   152d2:	e1b8      	b.n	15646 <_vfprintf_r+0x139a>
   152d4:	2b46      	cmp	r3, #70	; 0x46
   152d6:	d100      	bne.n	152da <_vfprintf_r+0x102e>
   152d8:	e237      	b.n	1574a <_vfprintf_r+0x149e>
   152da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   152dc:	9806      	ldr	r0, [sp, #24]
   152de:	3a45      	subs	r2, #69	; 0x45
   152e0:	0013      	movs	r3, r2
   152e2:	4259      	negs	r1, r3
   152e4:	4159      	adcs	r1, r3
   152e6:	ab20      	add	r3, sp, #128	; 0x80
   152e8:	000d      	movs	r5, r1
   152ea:	9303      	str	r3, [sp, #12]
   152ec:	ab1f      	add	r3, sp, #124	; 0x7c
   152ee:	9302      	str	r3, [sp, #8]
   152f0:	2302      	movs	r3, #2
   152f2:	aa23      	add	r2, sp, #140	; 0x8c
   152f4:	4455      	add	r5, sl
   152f6:	921b      	str	r2, [sp, #108]	; 0x6c
   152f8:	9204      	str	r2, [sp, #16]
   152fa:	9300      	str	r3, [sp, #0]
   152fc:	9501      	str	r5, [sp, #4]
   152fe:	9b08      	ldr	r3, [sp, #32]
   15300:	464a      	mov	r2, r9
   15302:	f000 fcab 	bl	15c5c <_dtoa_r>
   15306:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15308:	9011      	str	r0, [sp, #68]	; 0x44
   1530a:	2b67      	cmp	r3, #103	; 0x67
   1530c:	d000      	beq.n	15310 <_vfprintf_r+0x1064>
   1530e:	e20b      	b.n	15728 <_vfprintf_r+0x147c>
   15310:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15312:	4698      	mov	r8, r3
   15314:	44a8      	add	r8, r5
   15316:	07e3      	lsls	r3, r4, #31
   15318:	d400      	bmi.n	1531c <_vfprintf_r+0x1070>
   1531a:	e277      	b.n	1580c <_vfprintf_r+0x1560>
   1531c:	2300      	movs	r3, #0
   1531e:	2200      	movs	r2, #0
   15320:	4648      	mov	r0, r9
   15322:	9908      	ldr	r1, [sp, #32]
   15324:	f7fe fc48 	bl	13bb8 <__aeabi_dcmpeq>
   15328:	4643      	mov	r3, r8
   1532a:	2800      	cmp	r0, #0
   1532c:	d10a      	bne.n	15344 <_vfprintf_r+0x1098>
   1532e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   15330:	4543      	cmp	r3, r8
   15332:	d207      	bcs.n	15344 <_vfprintf_r+0x1098>
   15334:	2130      	movs	r1, #48	; 0x30
   15336:	4640      	mov	r0, r8
   15338:	1c5a      	adds	r2, r3, #1
   1533a:	9223      	str	r2, [sp, #140]	; 0x8c
   1533c:	7019      	strb	r1, [r3, #0]
   1533e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   15340:	4298      	cmp	r0, r3
   15342:	d8f9      	bhi.n	15338 <_vfprintf_r+0x108c>
   15344:	9a11      	ldr	r2, [sp, #68]	; 0x44
   15346:	1a9b      	subs	r3, r3, r2
   15348:	9314      	str	r3, [sp, #80]	; 0x50
   1534a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1534c:	2b47      	cmp	r3, #71	; 0x47
   1534e:	d100      	bne.n	15352 <_vfprintf_r+0x10a6>
   15350:	e0d0      	b.n	154f4 <_vfprintf_r+0x1248>
   15352:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15354:	2b65      	cmp	r3, #101	; 0x65
   15356:	dc00      	bgt.n	1535a <_vfprintf_r+0x10ae>
   15358:	e2d5      	b.n	15906 <_vfprintf_r+0x165a>
   1535a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1535c:	2b66      	cmp	r3, #102	; 0x66
   1535e:	d100      	bne.n	15362 <_vfprintf_r+0x10b6>
   15360:	e1c6      	b.n	156f0 <_vfprintf_r+0x1444>
   15362:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15364:	9313      	str	r3, [sp, #76]	; 0x4c
   15366:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15368:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1536a:	0019      	movs	r1, r3
   1536c:	4291      	cmp	r1, r2
   1536e:	dd00      	ble.n	15372 <_vfprintf_r+0x10c6>
   15370:	e1a0      	b.n	156b4 <_vfprintf_r+0x1408>
   15372:	07e3      	lsls	r3, r4, #31
   15374:	d500      	bpl.n	15378 <_vfprintf_r+0x10cc>
   15376:	e242      	b.n	157fe <_vfprintf_r+0x1552>
   15378:	43d3      	mvns	r3, r2
   1537a:	17db      	asrs	r3, r3, #31
   1537c:	0011      	movs	r1, r2
   1537e:	401a      	ands	r2, r3
   15380:	2367      	movs	r3, #103	; 0x67
   15382:	9208      	str	r2, [sp, #32]
   15384:	910e      	str	r1, [sp, #56]	; 0x38
   15386:	9312      	str	r3, [sp, #72]	; 0x48
   15388:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1538a:	2b00      	cmp	r3, #0
   1538c:	d000      	beq.n	15390 <_vfprintf_r+0x10e4>
   1538e:	e0a9      	b.n	154e4 <_vfprintf_r+0x1238>
   15390:	ab16      	add	r3, sp, #88	; 0x58
   15392:	7fdb      	ldrb	r3, [r3, #31]
   15394:	4698      	mov	r8, r3
   15396:	2300      	movs	r3, #0
   15398:	469a      	mov	sl, r3
   1539a:	f7ff f8fc 	bl	14596 <_vfprintf_r+0x2ea>
   1539e:	46cb      	mov	fp, r9
   153a0:	46a1      	mov	r9, r4
   153a2:	0014      	movs	r4, r2
   153a4:	e637      	b.n	15016 <_vfprintf_r+0xd6a>
   153a6:	464b      	mov	r3, r9
   153a8:	6d98      	ldr	r0, [r3, #88]	; 0x58
   153aa:	f002 f861 	bl	17470 <__retarget_lock_release_recursive>
   153ae:	2301      	movs	r3, #1
   153b0:	425b      	negs	r3, r3
   153b2:	930a      	str	r3, [sp, #40]	; 0x28
   153b4:	f7ff f82b 	bl	1440e <_vfprintf_r+0x162>
   153b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   153ba:	07d2      	lsls	r2, r2, #31
   153bc:	d400      	bmi.n	153c0 <_vfprintf_r+0x1114>
   153be:	e68f      	b.n	150e0 <_vfprintf_r+0xe34>
   153c0:	e680      	b.n	150c4 <_vfprintf_r+0xe18>
   153c2:	3608      	adds	r6, #8
   153c4:	e679      	b.n	150ba <_vfprintf_r+0xe0e>
   153c6:	68bc      	ldr	r4, [r7, #8]
   153c8:	f7ff fb73 	bl	14ab2 <_vfprintf_r+0x806>
   153cc:	003a      	movs	r2, r7
   153ce:	4659      	mov	r1, fp
   153d0:	9806      	ldr	r0, [sp, #24]
   153d2:	f003 f9cd 	bl	18770 <__sprint_r>
   153d6:	2800      	cmp	r0, #0
   153d8:	d000      	beq.n	153dc <_vfprintf_r+0x1130>
   153da:	e4f7      	b.n	14dcc <_vfprintf_r+0xb20>
   153dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   153de:	68bc      	ldr	r4, [r7, #8]
   153e0:	ae32      	add	r6, sp, #200	; 0xc8
   153e2:	e67d      	b.n	150e0 <_vfprintf_r+0xe34>
   153e4:	2320      	movs	r3, #32
   153e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   153e8:	439a      	bics	r2, r3
   153ea:	3b1a      	subs	r3, #26
   153ec:	920e      	str	r2, [sp, #56]	; 0x38
   153ee:	469a      	mov	sl, r3
   153f0:	e75f      	b.n	152b2 <_vfprintf_r+0x1006>
   153f2:	232d      	movs	r3, #45	; 0x2d
   153f4:	aa16      	add	r2, sp, #88	; 0x58
   153f6:	77d3      	strb	r3, [r2, #31]
   153f8:	4698      	mov	r8, r3
   153fa:	f7ff faa8 	bl	1494e <_vfprintf_r+0x6a2>
   153fe:	003a      	movs	r2, r7
   15400:	4659      	mov	r1, fp
   15402:	9806      	ldr	r0, [sp, #24]
   15404:	f003 f9b4 	bl	18770 <__sprint_r>
   15408:	2800      	cmp	r0, #0
   1540a:	d000      	beq.n	1540e <_vfprintf_r+0x1162>
   1540c:	e4de      	b.n	14dcc <_vfprintf_r+0xb20>
   1540e:	ae32      	add	r6, sp, #200	; 0xc8
   15410:	e419      	b.n	14c46 <_vfprintf_r+0x99a>
   15412:	4be3      	ldr	r3, [pc, #908]	; (157a0 <_vfprintf_r+0x14f4>)
   15414:	3401      	adds	r4, #1
   15416:	6033      	str	r3, [r6, #0]
   15418:	2301      	movs	r3, #1
   1541a:	6073      	str	r3, [r6, #4]
   1541c:	687b      	ldr	r3, [r7, #4]
   1541e:	60bc      	str	r4, [r7, #8]
   15420:	3301      	adds	r3, #1
   15422:	607b      	str	r3, [r7, #4]
   15424:	2b07      	cmp	r3, #7
   15426:	dd00      	ble.n	1542a <_vfprintf_r+0x117e>
   15428:	e155      	b.n	156d6 <_vfprintf_r+0x142a>
   1542a:	3608      	adds	r6, #8
   1542c:	2800      	cmp	r0, #0
   1542e:	d107      	bne.n	15440 <_vfprintf_r+0x1194>
   15430:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15432:	2b00      	cmp	r3, #0
   15434:	d104      	bne.n	15440 <_vfprintf_r+0x1194>
   15436:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15438:	07db      	lsls	r3, r3, #31
   1543a:	d401      	bmi.n	15440 <_vfprintf_r+0x1194>
   1543c:	f7ff fb39 	bl	14ab2 <_vfprintf_r+0x806>
   15440:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15442:	6033      	str	r3, [r6, #0]
   15444:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15446:	1919      	adds	r1, r3, r4
   15448:	6073      	str	r3, [r6, #4]
   1544a:	687b      	ldr	r3, [r7, #4]
   1544c:	60b9      	str	r1, [r7, #8]
   1544e:	3301      	adds	r3, #1
   15450:	607b      	str	r3, [r7, #4]
   15452:	2b07      	cmp	r3, #7
   15454:	dd00      	ble.n	15458 <_vfprintf_r+0x11ac>
   15456:	e1c4      	b.n	157e2 <_vfprintf_r+0x1536>
   15458:	0032      	movs	r2, r6
   1545a:	3208      	adds	r2, #8
   1545c:	2800      	cmp	r0, #0
   1545e:	da00      	bge.n	15462 <_vfprintf_r+0x11b6>
   15460:	e195      	b.n	1578e <_vfprintf_r+0x14e2>
   15462:	9811      	ldr	r0, [sp, #68]	; 0x44
   15464:	3301      	adds	r3, #1
   15466:	6010      	str	r0, [r2, #0]
   15468:	9814      	ldr	r0, [sp, #80]	; 0x50
   1546a:	607b      	str	r3, [r7, #4]
   1546c:	1844      	adds	r4, r0, r1
   1546e:	6050      	str	r0, [r2, #4]
   15470:	60bc      	str	r4, [r7, #8]
   15472:	2b07      	cmp	r3, #7
   15474:	dd01      	ble.n	1547a <_vfprintf_r+0x11ce>
   15476:	f7ff fbc2 	bl	14bfe <_vfprintf_r+0x952>
   1547a:	3208      	adds	r2, #8
   1547c:	0016      	movs	r6, r2
   1547e:	f7ff fb18 	bl	14ab2 <_vfprintf_r+0x806>
   15482:	990f      	ldr	r1, [sp, #60]	; 0x3c
   15484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15486:	680b      	ldr	r3, [r1, #0]
   15488:	601a      	str	r2, [r3, #0]
   1548a:	17d2      	asrs	r2, r2, #31
   1548c:	605a      	str	r2, [r3, #4]
   1548e:	000b      	movs	r3, r1
   15490:	3304      	adds	r3, #4
   15492:	930f      	str	r3, [sp, #60]	; 0x3c
   15494:	f7fe ff58 	bl	14348 <_vfprintf_r+0x9c>
   15498:	464b      	mov	r3, r9
   1549a:	9a07      	ldr	r2, [sp, #28]
   1549c:	431c      	orrs	r4, r3
   1549e:	3201      	adds	r2, #1
   154a0:	7813      	ldrb	r3, [r2, #0]
   154a2:	9207      	str	r2, [sp, #28]
   154a4:	f7fe ff8b 	bl	143be <_vfprintf_r+0x112>
   154a8:	003a      	movs	r2, r7
   154aa:	4659      	mov	r1, fp
   154ac:	9806      	ldr	r0, [sp, #24]
   154ae:	f003 f95f 	bl	18770 <__sprint_r>
   154b2:	2800      	cmp	r0, #0
   154b4:	d000      	beq.n	154b8 <_vfprintf_r+0x120c>
   154b6:	e489      	b.n	14dcc <_vfprintf_r+0xb20>
   154b8:	68bc      	ldr	r4, [r7, #8]
   154ba:	ae32      	add	r6, sp, #200	; 0xc8
   154bc:	f7ff fbdc 	bl	14c78 <_vfprintf_r+0x9cc>
   154c0:	4bb8      	ldr	r3, [pc, #736]	; (157a4 <_vfprintf_r+0x14f8>)
   154c2:	9311      	str	r3, [sp, #68]	; 0x44
   154c4:	f7ff fa4a 	bl	1495c <_vfprintf_r+0x6b0>
   154c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   154ca:	ab32      	add	r3, sp, #200	; 0xc8
   154cc:	1a9b      	subs	r3, r3, r2
   154ce:	930e      	str	r3, [sp, #56]	; 0x38
   154d0:	f7ff f859 	bl	14586 <_vfprintf_r+0x2da>
   154d4:	9811      	ldr	r0, [sp, #68]	; 0x44
   154d6:	f7fe feb7 	bl	14248 <strlen>
   154da:	0002      	movs	r2, r0
   154dc:	900e      	str	r0, [sp, #56]	; 0x38
   154de:	0003      	movs	r3, r0
   154e0:	f7ff f9a1 	bl	14826 <_vfprintf_r+0x57a>
   154e4:	232d      	movs	r3, #45	; 0x2d
   154e6:	aa16      	add	r2, sp, #88	; 0x58
   154e8:	77d3      	strb	r3, [r2, #31]
   154ea:	4698      	mov	r8, r3
   154ec:	2300      	movs	r3, #0
   154ee:	469a      	mov	sl, r3
   154f0:	f7ff f854 	bl	1459c <_vfprintf_r+0x2f0>
   154f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   154f6:	9313      	str	r3, [sp, #76]	; 0x4c
   154f8:	1cda      	adds	r2, r3, #3
   154fa:	db02      	blt.n	15502 <_vfprintf_r+0x1256>
   154fc:	459a      	cmp	sl, r3
   154fe:	db00      	blt.n	15502 <_vfprintf_r+0x1256>
   15500:	e731      	b.n	15366 <_vfprintf_r+0x10ba>
   15502:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15504:	3b02      	subs	r3, #2
   15506:	9312      	str	r3, [sp, #72]	; 0x48
   15508:	222c      	movs	r2, #44	; 0x2c
   1550a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1550c:	2148      	movs	r1, #72	; 0x48
   1550e:	1e5d      	subs	r5, r3, #1
   15510:	ab16      	add	r3, sp, #88	; 0x58
   15512:	189b      	adds	r3, r3, r2
   15514:	466a      	mov	r2, sp
   15516:	1852      	adds	r2, r2, r1
   15518:	7812      	ldrb	r2, [r2, #0]
   1551a:	951f      	str	r5, [sp, #124]	; 0x7c
   1551c:	701a      	strb	r2, [r3, #0]
   1551e:	2d00      	cmp	r5, #0
   15520:	da00      	bge.n	15524 <_vfprintf_r+0x1278>
   15522:	e1cb      	b.n	158bc <_vfprintf_r+0x1610>
   15524:	212d      	movs	r1, #45	; 0x2d
   15526:	232b      	movs	r3, #43	; 0x2b
   15528:	aa16      	add	r2, sp, #88	; 0x58
   1552a:	1852      	adds	r2, r2, r1
   1552c:	7013      	strb	r3, [r2, #0]
   1552e:	2d09      	cmp	r5, #9
   15530:	dc00      	bgt.n	15534 <_vfprintf_r+0x1288>
   15532:	e16d      	b.n	15810 <_vfprintf_r+0x1564>
   15534:	aa16      	add	r2, sp, #88	; 0x58
   15536:	233b      	movs	r3, #59	; 0x3b
   15538:	4694      	mov	ip, r2
   1553a:	4463      	add	r3, ip
   1553c:	469a      	mov	sl, r3
   1553e:	46b1      	mov	r9, r6
   15540:	46a0      	mov	r8, r4
   15542:	4656      	mov	r6, sl
   15544:	e000      	b.n	15548 <_vfprintf_r+0x129c>
   15546:	0026      	movs	r6, r4
   15548:	0028      	movs	r0, r5
   1554a:	210a      	movs	r1, #10
   1554c:	f7fb fdce 	bl	110ec <__aeabi_idivmod>
   15550:	1e74      	subs	r4, r6, #1
   15552:	3130      	adds	r1, #48	; 0x30
   15554:	7021      	strb	r1, [r4, #0]
   15556:	0028      	movs	r0, r5
   15558:	210a      	movs	r1, #10
   1555a:	f7fb fce1 	bl	10f20 <__divsi3>
   1555e:	0005      	movs	r5, r0
   15560:	2809      	cmp	r0, #9
   15562:	dcf0      	bgt.n	15546 <_vfprintf_r+0x129a>
   15564:	0023      	movs	r3, r4
   15566:	4644      	mov	r4, r8
   15568:	46b0      	mov	r8, r6
   1556a:	464e      	mov	r6, r9
   1556c:	4699      	mov	r9, r3
   1556e:	0003      	movs	r3, r0
   15570:	3330      	adds	r3, #48	; 0x30
   15572:	b2d8      	uxtb	r0, r3
   15574:	4643      	mov	r3, r8
   15576:	3b02      	subs	r3, #2
   15578:	7018      	strb	r0, [r3, #0]
   1557a:	459a      	cmp	sl, r3
   1557c:	d800      	bhi.n	15580 <_vfprintf_r+0x12d4>
   1557e:	e1f6      	b.n	1596e <_vfprintf_r+0x16c2>
   15580:	4642      	mov	r2, r8
   15582:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15584:	4645      	mov	r5, r8
   15586:	1a99      	subs	r1, r3, r2
   15588:	2301      	movs	r3, #1
   1558a:	3107      	adds	r1, #7
   1558c:	425b      	negs	r3, r3
   1558e:	e001      	b.n	15594 <_vfprintf_r+0x12e8>
   15590:	5ce8      	ldrb	r0, [r5, r3]
   15592:	3301      	adds	r3, #1
   15594:	aa21      	add	r2, sp, #132	; 0x84
   15596:	18d2      	adds	r2, r2, r3
   15598:	70d0      	strb	r0, [r2, #3]
   1559a:	428b      	cmp	r3, r1
   1559c:	d1f8      	bne.n	15590 <_vfprintf_r+0x12e4>
   1559e:	a916      	add	r1, sp, #88	; 0x58
   155a0:	468c      	mov	ip, r1
   155a2:	222e      	movs	r2, #46	; 0x2e
   155a4:	464b      	mov	r3, r9
   155a6:	4462      	add	r2, ip
   155a8:	4694      	mov	ip, r2
   155aa:	1afb      	subs	r3, r7, r3
   155ac:	4463      	add	r3, ip
   155ae:	aa21      	add	r2, sp, #132	; 0x84
   155b0:	9914      	ldr	r1, [sp, #80]	; 0x50
   155b2:	1a9b      	subs	r3, r3, r2
   155b4:	469c      	mov	ip, r3
   155b6:	000a      	movs	r2, r1
   155b8:	4462      	add	r2, ip
   155ba:	931a      	str	r3, [sp, #104]	; 0x68
   155bc:	920e      	str	r2, [sp, #56]	; 0x38
   155be:	2901      	cmp	r1, #1
   155c0:	dc00      	bgt.n	155c4 <_vfprintf_r+0x1318>
   155c2:	e170      	b.n	158a6 <_vfprintf_r+0x15fa>
   155c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   155c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   155c8:	4694      	mov	ip, r2
   155ca:	4463      	add	r3, ip
   155cc:	001a      	movs	r2, r3
   155ce:	930e      	str	r3, [sp, #56]	; 0x38
   155d0:	43db      	mvns	r3, r3
   155d2:	17db      	asrs	r3, r3, #31
   155d4:	401a      	ands	r2, r3
   155d6:	2300      	movs	r3, #0
   155d8:	9208      	str	r2, [sp, #32]
   155da:	9313      	str	r3, [sp, #76]	; 0x4c
   155dc:	e6d4      	b.n	15388 <_vfprintf_r+0x10dc>
   155de:	003a      	movs	r2, r7
   155e0:	4659      	mov	r1, fp
   155e2:	9806      	ldr	r0, [sp, #24]
   155e4:	f003 f8c4 	bl	18770 <__sprint_r>
   155e8:	2800      	cmp	r0, #0
   155ea:	d001      	beq.n	155f0 <_vfprintf_r+0x1344>
   155ec:	f7ff fbee 	bl	14dcc <_vfprintf_r+0xb20>
   155f0:	68bc      	ldr	r4, [r7, #8]
   155f2:	ae32      	add	r6, sp, #200	; 0xc8
   155f4:	e46a      	b.n	14ecc <_vfprintf_r+0xc20>
   155f6:	4653      	mov	r3, sl
   155f8:	2b00      	cmp	r3, #0
   155fa:	d000      	beq.n	155fe <_vfprintf_r+0x1352>
   155fc:	e659      	b.n	152b2 <_vfprintf_r+0x1006>
   155fe:	3301      	adds	r3, #1
   15600:	469a      	mov	sl, r3
   15602:	e656      	b.n	152b2 <_vfprintf_r+0x1006>
   15604:	4653      	mov	r3, sl
   15606:	9308      	str	r3, [sp, #32]
   15608:	2b06      	cmp	r3, #6
   1560a:	d901      	bls.n	15610 <_vfprintf_r+0x1364>
   1560c:	2306      	movs	r3, #6
   1560e:	9308      	str	r3, [sp, #32]
   15610:	9b08      	ldr	r3, [sp, #32]
   15612:	950f      	str	r5, [sp, #60]	; 0x3c
   15614:	930e      	str	r3, [sp, #56]	; 0x38
   15616:	2300      	movs	r3, #0
   15618:	4698      	mov	r8, r3
   1561a:	469a      	mov	sl, r3
   1561c:	9313      	str	r3, [sp, #76]	; 0x4c
   1561e:	4b62      	ldr	r3, [pc, #392]	; (157a8 <_vfprintf_r+0x14fc>)
   15620:	9409      	str	r4, [sp, #36]	; 0x24
   15622:	9311      	str	r3, [sp, #68]	; 0x44
   15624:	f7fe ffbd 	bl	145a2 <_vfprintf_r+0x2f6>
   15628:	003a      	movs	r2, r7
   1562a:	4659      	mov	r1, fp
   1562c:	9806      	ldr	r0, [sp, #24]
   1562e:	f003 f89f 	bl	18770 <__sprint_r>
   15632:	2800      	cmp	r0, #0
   15634:	d001      	beq.n	1563a <_vfprintf_r+0x138e>
   15636:	f7ff fbc9 	bl	14dcc <_vfprintf_r+0xb20>
   1563a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1563c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1563e:	68bc      	ldr	r4, [r7, #8]
   15640:	1a9b      	subs	r3, r3, r2
   15642:	ae32      	add	r6, sp, #200	; 0xc8
   15644:	e567      	b.n	15116 <_vfprintf_r+0xe6a>
   15646:	ab23      	add	r3, sp, #140	; 0x8c
   15648:	931b      	str	r3, [sp, #108]	; 0x6c
   1564a:	9304      	str	r3, [sp, #16]
   1564c:	ab20      	add	r3, sp, #128	; 0x80
   1564e:	9303      	str	r3, [sp, #12]
   15650:	ab1f      	add	r3, sp, #124	; 0x7c
   15652:	9302      	str	r3, [sp, #8]
   15654:	4653      	mov	r3, sl
   15656:	9301      	str	r3, [sp, #4]
   15658:	2303      	movs	r3, #3
   1565a:	464a      	mov	r2, r9
   1565c:	9300      	str	r3, [sp, #0]
   1565e:	9806      	ldr	r0, [sp, #24]
   15660:	9b08      	ldr	r3, [sp, #32]
   15662:	f000 fafb 	bl	15c5c <_dtoa_r>
   15666:	0003      	movs	r3, r0
   15668:	4453      	add	r3, sl
   1566a:	4698      	mov	r8, r3
   1566c:	4655      	mov	r5, sl
   1566e:	9011      	str	r0, [sp, #68]	; 0x44
   15670:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15672:	781b      	ldrb	r3, [r3, #0]
   15674:	2b30      	cmp	r3, #48	; 0x30
   15676:	d002      	beq.n	1567e <_vfprintf_r+0x13d2>
   15678:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1567a:	4498      	add	r8, r3
   1567c:	e64e      	b.n	1531c <_vfprintf_r+0x1070>
   1567e:	2200      	movs	r2, #0
   15680:	2300      	movs	r3, #0
   15682:	4648      	mov	r0, r9
   15684:	9908      	ldr	r1, [sp, #32]
   15686:	f7fe fa97 	bl	13bb8 <__aeabi_dcmpeq>
   1568a:	2800      	cmp	r0, #0
   1568c:	d1f4      	bne.n	15678 <_vfprintf_r+0x13cc>
   1568e:	2301      	movs	r3, #1
   15690:	1b5b      	subs	r3, r3, r5
   15692:	931f      	str	r3, [sp, #124]	; 0x7c
   15694:	4498      	add	r8, r3
   15696:	e641      	b.n	1531c <_vfprintf_r+0x1070>
   15698:	46c1      	mov	r9, r8
   1569a:	f7ff fb1f 	bl	14cdc <_vfprintf_r+0xa30>
   1569e:	2280      	movs	r2, #128	; 0x80
   156a0:	0612      	lsls	r2, r2, #24
   156a2:	4694      	mov	ip, r2
   156a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   156a6:	4699      	mov	r9, r3
   156a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   156aa:	4463      	add	r3, ip
   156ac:	9308      	str	r3, [sp, #32]
   156ae:	232d      	movs	r3, #45	; 0x2d
   156b0:	9310      	str	r3, [sp, #64]	; 0x40
   156b2:	e60b      	b.n	152cc <_vfprintf_r+0x1020>
   156b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   156b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   156b8:	4694      	mov	ip, r2
   156ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   156bc:	4463      	add	r3, ip
   156be:	930e      	str	r3, [sp, #56]	; 0x38
   156c0:	2a00      	cmp	r2, #0
   156c2:	dc00      	bgt.n	156c6 <_vfprintf_r+0x141a>
   156c4:	e0e3      	b.n	1588e <_vfprintf_r+0x15e2>
   156c6:	001a      	movs	r2, r3
   156c8:	43db      	mvns	r3, r3
   156ca:	17db      	asrs	r3, r3, #31
   156cc:	401a      	ands	r2, r3
   156ce:	2367      	movs	r3, #103	; 0x67
   156d0:	9208      	str	r2, [sp, #32]
   156d2:	9312      	str	r3, [sp, #72]	; 0x48
   156d4:	e658      	b.n	15388 <_vfprintf_r+0x10dc>
   156d6:	003a      	movs	r2, r7
   156d8:	4659      	mov	r1, fp
   156da:	9806      	ldr	r0, [sp, #24]
   156dc:	f003 f848 	bl	18770 <__sprint_r>
   156e0:	2800      	cmp	r0, #0
   156e2:	d001      	beq.n	156e8 <_vfprintf_r+0x143c>
   156e4:	f7ff fb72 	bl	14dcc <_vfprintf_r+0xb20>
   156e8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   156ea:	68bc      	ldr	r4, [r7, #8]
   156ec:	ae32      	add	r6, sp, #200	; 0xc8
   156ee:	e69d      	b.n	1542c <_vfprintf_r+0x1180>
   156f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   156f2:	9313      	str	r3, [sp, #76]	; 0x4c
   156f4:	2b00      	cmp	r3, #0
   156f6:	dc00      	bgt.n	156fa <_vfprintf_r+0x144e>
   156f8:	e0f2      	b.n	158e0 <_vfprintf_r+0x1634>
   156fa:	4652      	mov	r2, sl
   156fc:	2a00      	cmp	r2, #0
   156fe:	d000      	beq.n	15702 <_vfprintf_r+0x1456>
   15700:	e0a0      	b.n	15844 <_vfprintf_r+0x1598>
   15702:	07e2      	lsls	r2, r4, #31
   15704:	d500      	bpl.n	15708 <_vfprintf_r+0x145c>
   15706:	e09d      	b.n	15844 <_vfprintf_r+0x1598>
   15708:	9308      	str	r3, [sp, #32]
   1570a:	930e      	str	r3, [sp, #56]	; 0x38
   1570c:	e63c      	b.n	15388 <_vfprintf_r+0x10dc>
   1570e:	ab16      	add	r3, sp, #88	; 0x58
   15710:	7fdb      	ldrb	r3, [r3, #31]
   15712:	950f      	str	r5, [sp, #60]	; 0x3c
   15714:	4698      	mov	r8, r3
   15716:	4653      	mov	r3, sl
   15718:	9308      	str	r3, [sp, #32]
   1571a:	930e      	str	r3, [sp, #56]	; 0x38
   1571c:	2300      	movs	r3, #0
   1571e:	9409      	str	r4, [sp, #36]	; 0x24
   15720:	469a      	mov	sl, r3
   15722:	9313      	str	r3, [sp, #76]	; 0x4c
   15724:	f7fe ff37 	bl	14596 <_vfprintf_r+0x2ea>
   15728:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1572a:	4698      	mov	r8, r3
   1572c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1572e:	44a8      	add	r8, r5
   15730:	2b47      	cmp	r3, #71	; 0x47
   15732:	d000      	beq.n	15736 <_vfprintf_r+0x148a>
   15734:	e5f2      	b.n	1531c <_vfprintf_r+0x1070>
   15736:	07e3      	lsls	r3, r4, #31
   15738:	d400      	bmi.n	1573c <_vfprintf_r+0x1490>
   1573a:	e0dc      	b.n	158f6 <_vfprintf_r+0x164a>
   1573c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1573e:	4698      	mov	r8, r3
   15740:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15742:	44a8      	add	r8, r5
   15744:	2b46      	cmp	r3, #70	; 0x46
   15746:	d093      	beq.n	15670 <_vfprintf_r+0x13c4>
   15748:	e5e8      	b.n	1531c <_vfprintf_r+0x1070>
   1574a:	ab23      	add	r3, sp, #140	; 0x8c
   1574c:	931b      	str	r3, [sp, #108]	; 0x6c
   1574e:	9304      	str	r3, [sp, #16]
   15750:	ab20      	add	r3, sp, #128	; 0x80
   15752:	9303      	str	r3, [sp, #12]
   15754:	ab1f      	add	r3, sp, #124	; 0x7c
   15756:	9302      	str	r3, [sp, #8]
   15758:	4653      	mov	r3, sl
   1575a:	9301      	str	r3, [sp, #4]
   1575c:	2303      	movs	r3, #3
   1575e:	464a      	mov	r2, r9
   15760:	9300      	str	r3, [sp, #0]
   15762:	9806      	ldr	r0, [sp, #24]
   15764:	9b08      	ldr	r3, [sp, #32]
   15766:	f000 fa79 	bl	15c5c <_dtoa_r>
   1576a:	4655      	mov	r5, sl
   1576c:	9011      	str	r0, [sp, #68]	; 0x44
   1576e:	e7e5      	b.n	1573c <_vfprintf_r+0x1490>
   15770:	003a      	movs	r2, r7
   15772:	4659      	mov	r1, fp
   15774:	9806      	ldr	r0, [sp, #24]
   15776:	f002 fffb 	bl	18770 <__sprint_r>
   1577a:	2800      	cmp	r0, #0
   1577c:	d101      	bne.n	15782 <_vfprintf_r+0x14d6>
   1577e:	f7ff faab 	bl	14cd8 <_vfprintf_r+0xa2c>
   15782:	f7ff faab 	bl	14cdc <_vfprintf_r+0xa30>
   15786:	4642      	mov	r2, r8
   15788:	9207      	str	r2, [sp, #28]
   1578a:	f7fe fe1b 	bl	143c4 <_vfprintf_r+0x118>
   1578e:	4244      	negs	r4, r0
   15790:	3010      	adds	r0, #16
   15792:	db00      	blt.n	15796 <_vfprintf_r+0x14ea>
   15794:	e0d8      	b.n	15948 <_vfprintf_r+0x169c>
   15796:	4805      	ldr	r0, [pc, #20]	; (157ac <_vfprintf_r+0x1500>)
   15798:	2610      	movs	r6, #16
   1579a:	0005      	movs	r5, r0
   1579c:	e00c      	b.n	157b8 <_vfprintf_r+0x150c>
   1579e:	46c0      	nop			; (mov r8, r8)
   157a0:	00019b44 	.word	0x00019b44
   157a4:	00019b08 	.word	0x00019b08
   157a8:	00019b3c 	.word	0x00019b3c
   157ac:	00019b58 	.word	0x00019b58
   157b0:	3208      	adds	r2, #8
   157b2:	3c10      	subs	r4, #16
   157b4:	2c10      	cmp	r4, #16
   157b6:	dd51      	ble.n	1585c <_vfprintf_r+0x15b0>
   157b8:	3110      	adds	r1, #16
   157ba:	3301      	adds	r3, #1
   157bc:	6015      	str	r5, [r2, #0]
   157be:	6056      	str	r6, [r2, #4]
   157c0:	60b9      	str	r1, [r7, #8]
   157c2:	607b      	str	r3, [r7, #4]
   157c4:	2b07      	cmp	r3, #7
   157c6:	ddf3      	ble.n	157b0 <_vfprintf_r+0x1504>
   157c8:	003a      	movs	r2, r7
   157ca:	4659      	mov	r1, fp
   157cc:	9806      	ldr	r0, [sp, #24]
   157ce:	f002 ffcf 	bl	18770 <__sprint_r>
   157d2:	2800      	cmp	r0, #0
   157d4:	d001      	beq.n	157da <_vfprintf_r+0x152e>
   157d6:	f7ff faf9 	bl	14dcc <_vfprintf_r+0xb20>
   157da:	68b9      	ldr	r1, [r7, #8]
   157dc:	687b      	ldr	r3, [r7, #4]
   157de:	aa32      	add	r2, sp, #200	; 0xc8
   157e0:	e7e7      	b.n	157b2 <_vfprintf_r+0x1506>
   157e2:	003a      	movs	r2, r7
   157e4:	4659      	mov	r1, fp
   157e6:	9806      	ldr	r0, [sp, #24]
   157e8:	f002 ffc2 	bl	18770 <__sprint_r>
   157ec:	2800      	cmp	r0, #0
   157ee:	d001      	beq.n	157f4 <_vfprintf_r+0x1548>
   157f0:	f7ff faec 	bl	14dcc <_vfprintf_r+0xb20>
   157f4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   157f6:	68b9      	ldr	r1, [r7, #8]
   157f8:	687b      	ldr	r3, [r7, #4]
   157fa:	aa32      	add	r2, sp, #200	; 0xc8
   157fc:	e62e      	b.n	1545c <_vfprintf_r+0x11b0>
   157fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   15800:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   15802:	4694      	mov	ip, r2
   15804:	4463      	add	r3, ip
   15806:	001a      	movs	r2, r3
   15808:	930e      	str	r3, [sp, #56]	; 0x38
   1580a:	e75d      	b.n	156c8 <_vfprintf_r+0x141c>
   1580c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1580e:	e599      	b.n	15344 <_vfprintf_r+0x1098>
   15810:	212e      	movs	r1, #46	; 0x2e
   15812:	2330      	movs	r3, #48	; 0x30
   15814:	aa16      	add	r2, sp, #88	; 0x58
   15816:	1852      	adds	r2, r2, r1
   15818:	7013      	strb	r3, [r2, #0]
   1581a:	002b      	movs	r3, r5
   1581c:	aa16      	add	r2, sp, #88	; 0x58
   1581e:	3101      	adds	r1, #1
   15820:	3330      	adds	r3, #48	; 0x30
   15822:	1852      	adds	r2, r2, r1
   15824:	7013      	strb	r3, [r2, #0]
   15826:	ab22      	add	r3, sp, #136	; 0x88
   15828:	e6c1      	b.n	155ae <_vfprintf_r+0x1302>
   1582a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1582c:	2b00      	cmp	r3, #0
   1582e:	db52      	blt.n	158d6 <_vfprintf_r+0x162a>
   15830:	ab16      	add	r3, sp, #88	; 0x58
   15832:	7fdb      	ldrb	r3, [r3, #31]
   15834:	4698      	mov	r8, r3
   15836:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15838:	2b47      	cmp	r3, #71	; 0x47
   1583a:	dc48      	bgt.n	158ce <_vfprintf_r+0x1622>
   1583c:	4b4e      	ldr	r3, [pc, #312]	; (15978 <_vfprintf_r+0x16cc>)
   1583e:	9311      	str	r3, [sp, #68]	; 0x44
   15840:	f7ff f88c 	bl	1495c <_vfprintf_r+0x6b0>
   15844:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   15846:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   15848:	4694      	mov	ip, r2
   1584a:	4463      	add	r3, ip
   1584c:	4453      	add	r3, sl
   1584e:	001a      	movs	r2, r3
   15850:	930e      	str	r3, [sp, #56]	; 0x38
   15852:	43db      	mvns	r3, r3
   15854:	17db      	asrs	r3, r3, #31
   15856:	401a      	ands	r2, r3
   15858:	9208      	str	r2, [sp, #32]
   1585a:	e595      	b.n	15388 <_vfprintf_r+0x10dc>
   1585c:	46a9      	mov	r9, r5
   1585e:	4648      	mov	r0, r9
   15860:	1909      	adds	r1, r1, r4
   15862:	3301      	adds	r3, #1
   15864:	6010      	str	r0, [r2, #0]
   15866:	6054      	str	r4, [r2, #4]
   15868:	60b9      	str	r1, [r7, #8]
   1586a:	3208      	adds	r2, #8
   1586c:	607b      	str	r3, [r7, #4]
   1586e:	2b07      	cmp	r3, #7
   15870:	dc00      	bgt.n	15874 <_vfprintf_r+0x15c8>
   15872:	e5f6      	b.n	15462 <_vfprintf_r+0x11b6>
   15874:	003a      	movs	r2, r7
   15876:	4659      	mov	r1, fp
   15878:	9806      	ldr	r0, [sp, #24]
   1587a:	f002 ff79 	bl	18770 <__sprint_r>
   1587e:	2800      	cmp	r0, #0
   15880:	d001      	beq.n	15886 <_vfprintf_r+0x15da>
   15882:	f7ff faa3 	bl	14dcc <_vfprintf_r+0xb20>
   15886:	68b9      	ldr	r1, [r7, #8]
   15888:	687b      	ldr	r3, [r7, #4]
   1588a:	aa32      	add	r2, sp, #200	; 0xc8
   1588c:	e5e9      	b.n	15462 <_vfprintf_r+0x11b6>
   1588e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15890:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15892:	1a98      	subs	r0, r3, r2
   15894:	1c43      	adds	r3, r0, #1
   15896:	001a      	movs	r2, r3
   15898:	930e      	str	r3, [sp, #56]	; 0x38
   1589a:	e715      	b.n	156c8 <_vfprintf_r+0x141c>
   1589c:	4a37      	ldr	r2, [pc, #220]	; (1597c <_vfprintf_r+0x16d0>)
   1589e:	687b      	ldr	r3, [r7, #4]
   158a0:	4691      	mov	r9, r2
   158a2:	f7ff fbf5 	bl	15090 <_vfprintf_r+0xde4>
   158a6:	2301      	movs	r3, #1
   158a8:	4023      	ands	r3, r4
   158aa:	9313      	str	r3, [sp, #76]	; 0x4c
   158ac:	d000      	beq.n	158b0 <_vfprintf_r+0x1604>
   158ae:	e689      	b.n	155c4 <_vfprintf_r+0x1318>
   158b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   158b2:	43d3      	mvns	r3, r2
   158b4:	17db      	asrs	r3, r3, #31
   158b6:	401a      	ands	r2, r3
   158b8:	9208      	str	r2, [sp, #32]
   158ba:	e565      	b.n	15388 <_vfprintf_r+0x10dc>
   158bc:	2301      	movs	r3, #1
   158be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   158c0:	391b      	subs	r1, #27
   158c2:	1a9d      	subs	r5, r3, r2
   158c4:	aa16      	add	r2, sp, #88	; 0x58
   158c6:	332c      	adds	r3, #44	; 0x2c
   158c8:	1852      	adds	r2, r2, r1
   158ca:	7013      	strb	r3, [r2, #0]
   158cc:	e62f      	b.n	1552e <_vfprintf_r+0x1282>
   158ce:	4b2c      	ldr	r3, [pc, #176]	; (15980 <_vfprintf_r+0x16d4>)
   158d0:	9311      	str	r3, [sp, #68]	; 0x44
   158d2:	f7ff f843 	bl	1495c <_vfprintf_r+0x6b0>
   158d6:	232d      	movs	r3, #45	; 0x2d
   158d8:	aa16      	add	r2, sp, #88	; 0x58
   158da:	77d3      	strb	r3, [r2, #31]
   158dc:	4698      	mov	r8, r3
   158de:	e7aa      	b.n	15836 <_vfprintf_r+0x158a>
   158e0:	4653      	mov	r3, sl
   158e2:	2b00      	cmp	r3, #0
   158e4:	d101      	bne.n	158ea <_vfprintf_r+0x163e>
   158e6:	07e3      	lsls	r3, r4, #31
   158e8:	d503      	bpl.n	158f2 <_vfprintf_r+0x1646>
   158ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   158ec:	1c58      	adds	r0, r3, #1
   158ee:	0003      	movs	r3, r0
   158f0:	e7ac      	b.n	1584c <_vfprintf_r+0x15a0>
   158f2:	2301      	movs	r3, #1
   158f4:	e708      	b.n	15708 <_vfprintf_r+0x145c>
   158f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   158f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   158fa:	1a9b      	subs	r3, r3, r2
   158fc:	9314      	str	r3, [sp, #80]	; 0x50
   158fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15900:	2b47      	cmp	r3, #71	; 0x47
   15902:	d100      	bne.n	15906 <_vfprintf_r+0x165a>
   15904:	e5f6      	b.n	154f4 <_vfprintf_r+0x1248>
   15906:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15908:	9313      	str	r3, [sp, #76]	; 0x4c
   1590a:	e5fd      	b.n	15508 <_vfprintf_r+0x125c>
   1590c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1590e:	1d1d      	adds	r5, r3, #4
   15910:	681b      	ldr	r3, [r3, #0]
   15912:	46a8      	mov	r8, r5
   15914:	469a      	mov	sl, r3
   15916:	2b00      	cmp	r3, #0
   15918:	db0a      	blt.n	15930 <_vfprintf_r+0x1684>
   1591a:	4645      	mov	r5, r8
   1591c:	9b07      	ldr	r3, [sp, #28]
   1591e:	950f      	str	r5, [sp, #60]	; 0x3c
   15920:	785b      	ldrb	r3, [r3, #1]
   15922:	9207      	str	r2, [sp, #28]
   15924:	f7fe fd4b 	bl	143be <_vfprintf_r+0x112>
   15928:	ab16      	add	r3, sp, #88	; 0x58
   1592a:	77d8      	strb	r0, [r3, #31]
   1592c:	f7ff f830 	bl	14990 <_vfprintf_r+0x6e4>
   15930:	2301      	movs	r3, #1
   15932:	425b      	negs	r3, r3
   15934:	469a      	mov	sl, r3
   15936:	e7f0      	b.n	1591a <_vfprintf_r+0x166e>
   15938:	ab16      	add	r3, sp, #88	; 0x58
   1593a:	77d8      	strb	r0, [r3, #31]
   1593c:	f7fe ff27 	bl	1478e <_vfprintf_r+0x4e2>
   15940:	ab16      	add	r3, sp, #88	; 0x58
   15942:	77d8      	strb	r0, [r3, #31]
   15944:	f7fe fdce 	bl	144e4 <_vfprintf_r+0x238>
   15948:	480c      	ldr	r0, [pc, #48]	; (1597c <_vfprintf_r+0x16d0>)
   1594a:	4681      	mov	r9, r0
   1594c:	e787      	b.n	1585e <_vfprintf_r+0x15b2>
   1594e:	ab16      	add	r3, sp, #88	; 0x58
   15950:	77d8      	strb	r0, [r3, #31]
   15952:	f7ff f829 	bl	149a8 <_vfprintf_r+0x6fc>
   15956:	ab16      	add	r3, sp, #88	; 0x58
   15958:	77d8      	strb	r0, [r3, #31]
   1595a:	f7fe ffc3 	bl	148e4 <_vfprintf_r+0x638>
   1595e:	ab16      	add	r3, sp, #88	; 0x58
   15960:	77d8      	strb	r0, [r3, #31]
   15962:	f7fe ffa5 	bl	148b0 <_vfprintf_r+0x604>
   15966:	ab16      	add	r3, sp, #88	; 0x58
   15968:	77d8      	strb	r0, [r3, #31]
   1596a:	f7fe feaf 	bl	146cc <_vfprintf_r+0x420>
   1596e:	aa16      	add	r2, sp, #88	; 0x58
   15970:	232e      	movs	r3, #46	; 0x2e
   15972:	4694      	mov	ip, r2
   15974:	4463      	add	r3, ip
   15976:	e61a      	b.n	155ae <_vfprintf_r+0x1302>
   15978:	00019b0c 	.word	0x00019b0c
   1597c:	00019b58 	.word	0x00019b58
   15980:	00019b10 	.word	0x00019b10

00015984 <__sbprintf>:
   15984:	b5f0      	push	{r4, r5, r6, r7, lr}
   15986:	0015      	movs	r5, r2
   15988:	2202      	movs	r2, #2
   1598a:	4c1e      	ldr	r4, [pc, #120]	; (15a04 <__sbprintf+0x80>)
   1598c:	001f      	movs	r7, r3
   1598e:	898b      	ldrh	r3, [r1, #12]
   15990:	44a5      	add	sp, r4
   15992:	4393      	bics	r3, r2
   15994:	466a      	mov	r2, sp
   15996:	8193      	strh	r3, [r2, #12]
   15998:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1599a:	0006      	movs	r6, r0
   1599c:	9319      	str	r3, [sp, #100]	; 0x64
   1599e:	89cb      	ldrh	r3, [r1, #14]
   159a0:	a816      	add	r0, sp, #88	; 0x58
   159a2:	81d3      	strh	r3, [r2, #14]
   159a4:	69cb      	ldr	r3, [r1, #28]
   159a6:	000c      	movs	r4, r1
   159a8:	9307      	str	r3, [sp, #28]
   159aa:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   159ac:	9309      	str	r3, [sp, #36]	; 0x24
   159ae:	ab1a      	add	r3, sp, #104	; 0x68
   159b0:	9300      	str	r3, [sp, #0]
   159b2:	9304      	str	r3, [sp, #16]
   159b4:	2380      	movs	r3, #128	; 0x80
   159b6:	00db      	lsls	r3, r3, #3
   159b8:	9302      	str	r3, [sp, #8]
   159ba:	9305      	str	r3, [sp, #20]
   159bc:	2300      	movs	r3, #0
   159be:	9306      	str	r3, [sp, #24]
   159c0:	f001 fd50 	bl	17464 <__retarget_lock_init_recursive>
   159c4:	002a      	movs	r2, r5
   159c6:	003b      	movs	r3, r7
   159c8:	4669      	mov	r1, sp
   159ca:	0030      	movs	r0, r6
   159cc:	f7fe fc6e 	bl	142ac <_vfprintf_r>
   159d0:	1e05      	subs	r5, r0, #0
   159d2:	db05      	blt.n	159e0 <__sbprintf+0x5c>
   159d4:	4669      	mov	r1, sp
   159d6:	0030      	movs	r0, r6
   159d8:	f001 f9ac 	bl	16d34 <_fflush_r>
   159dc:	2800      	cmp	r0, #0
   159de:	d10e      	bne.n	159fe <__sbprintf+0x7a>
   159e0:	466b      	mov	r3, sp
   159e2:	899b      	ldrh	r3, [r3, #12]
   159e4:	065b      	lsls	r3, r3, #25
   159e6:	d503      	bpl.n	159f0 <__sbprintf+0x6c>
   159e8:	2240      	movs	r2, #64	; 0x40
   159ea:	89a3      	ldrh	r3, [r4, #12]
   159ec:	4313      	orrs	r3, r2
   159ee:	81a3      	strh	r3, [r4, #12]
   159f0:	9816      	ldr	r0, [sp, #88]	; 0x58
   159f2:	f001 fd39 	bl	17468 <__retarget_lock_close_recursive>
   159f6:	0028      	movs	r0, r5
   159f8:	4b03      	ldr	r3, [pc, #12]	; (15a08 <__sbprintf+0x84>)
   159fa:	449d      	add	sp, r3
   159fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   159fe:	2501      	movs	r5, #1
   15a00:	426d      	negs	r5, r5
   15a02:	e7ed      	b.n	159e0 <__sbprintf+0x5c>
   15a04:	fffffb94 	.word	0xfffffb94
   15a08:	0000046c 	.word	0x0000046c

00015a0c <__swsetup_r>:
   15a0c:	4b33      	ldr	r3, [pc, #204]	; (15adc <__swsetup_r+0xd0>)
   15a0e:	b570      	push	{r4, r5, r6, lr}
   15a10:	0005      	movs	r5, r0
   15a12:	6818      	ldr	r0, [r3, #0]
   15a14:	000c      	movs	r4, r1
   15a16:	2800      	cmp	r0, #0
   15a18:	d002      	beq.n	15a20 <__swsetup_r+0x14>
   15a1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   15a1c:	2b00      	cmp	r3, #0
   15a1e:	d03c      	beq.n	15a9a <__swsetup_r+0x8e>
   15a20:	230c      	movs	r3, #12
   15a22:	5ee2      	ldrsh	r2, [r4, r3]
   15a24:	b293      	uxth	r3, r2
   15a26:	0719      	lsls	r1, r3, #28
   15a28:	d50d      	bpl.n	15a46 <__swsetup_r+0x3a>
   15a2a:	6921      	ldr	r1, [r4, #16]
   15a2c:	2900      	cmp	r1, #0
   15a2e:	d015      	beq.n	15a5c <__swsetup_r+0x50>
   15a30:	07da      	lsls	r2, r3, #31
   15a32:	d521      	bpl.n	15a78 <__swsetup_r+0x6c>
   15a34:	2300      	movs	r3, #0
   15a36:	60a3      	str	r3, [r4, #8]
   15a38:	6963      	ldr	r3, [r4, #20]
   15a3a:	2000      	movs	r0, #0
   15a3c:	425b      	negs	r3, r3
   15a3e:	61a3      	str	r3, [r4, #24]
   15a40:	2900      	cmp	r1, #0
   15a42:	d021      	beq.n	15a88 <__swsetup_r+0x7c>
   15a44:	bd70      	pop	{r4, r5, r6, pc}
   15a46:	06d9      	lsls	r1, r3, #27
   15a48:	d53f      	bpl.n	15aca <__swsetup_r+0xbe>
   15a4a:	075b      	lsls	r3, r3, #29
   15a4c:	d428      	bmi.n	15aa0 <__swsetup_r+0x94>
   15a4e:	6921      	ldr	r1, [r4, #16]
   15a50:	2308      	movs	r3, #8
   15a52:	4313      	orrs	r3, r2
   15a54:	81a3      	strh	r3, [r4, #12]
   15a56:	b29b      	uxth	r3, r3
   15a58:	2900      	cmp	r1, #0
   15a5a:	d1e9      	bne.n	15a30 <__swsetup_r+0x24>
   15a5c:	22a0      	movs	r2, #160	; 0xa0
   15a5e:	2080      	movs	r0, #128	; 0x80
   15a60:	0092      	lsls	r2, r2, #2
   15a62:	0080      	lsls	r0, r0, #2
   15a64:	401a      	ands	r2, r3
   15a66:	4282      	cmp	r2, r0
   15a68:	d0e2      	beq.n	15a30 <__swsetup_r+0x24>
   15a6a:	0021      	movs	r1, r4
   15a6c:	0028      	movs	r0, r5
   15a6e:	f001 fd31 	bl	174d4 <__smakebuf_r>
   15a72:	89a3      	ldrh	r3, [r4, #12]
   15a74:	6921      	ldr	r1, [r4, #16]
   15a76:	e7db      	b.n	15a30 <__swsetup_r+0x24>
   15a78:	2200      	movs	r2, #0
   15a7a:	079b      	lsls	r3, r3, #30
   15a7c:	d400      	bmi.n	15a80 <__swsetup_r+0x74>
   15a7e:	6962      	ldr	r2, [r4, #20]
   15a80:	60a2      	str	r2, [r4, #8]
   15a82:	2000      	movs	r0, #0
   15a84:	2900      	cmp	r1, #0
   15a86:	d1dd      	bne.n	15a44 <__swsetup_r+0x38>
   15a88:	220c      	movs	r2, #12
   15a8a:	5ea3      	ldrsh	r3, [r4, r2]
   15a8c:	061a      	lsls	r2, r3, #24
   15a8e:	d5d9      	bpl.n	15a44 <__swsetup_r+0x38>
   15a90:	2240      	movs	r2, #64	; 0x40
   15a92:	4313      	orrs	r3, r2
   15a94:	81a3      	strh	r3, [r4, #12]
   15a96:	3801      	subs	r0, #1
   15a98:	e7d4      	b.n	15a44 <__swsetup_r+0x38>
   15a9a:	f001 f9a5 	bl	16de8 <__sinit>
   15a9e:	e7bf      	b.n	15a20 <__swsetup_r+0x14>
   15aa0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   15aa2:	2900      	cmp	r1, #0
   15aa4:	d00a      	beq.n	15abc <__swsetup_r+0xb0>
   15aa6:	0023      	movs	r3, r4
   15aa8:	3340      	adds	r3, #64	; 0x40
   15aaa:	4299      	cmp	r1, r3
   15aac:	d004      	beq.n	15ab8 <__swsetup_r+0xac>
   15aae:	0028      	movs	r0, r5
   15ab0:	f001 fa44 	bl	16f3c <_free_r>
   15ab4:	230c      	movs	r3, #12
   15ab6:	5ee2      	ldrsh	r2, [r4, r3]
   15ab8:	2300      	movs	r3, #0
   15aba:	6323      	str	r3, [r4, #48]	; 0x30
   15abc:	2324      	movs	r3, #36	; 0x24
   15abe:	439a      	bics	r2, r3
   15ac0:	2300      	movs	r3, #0
   15ac2:	6921      	ldr	r1, [r4, #16]
   15ac4:	6063      	str	r3, [r4, #4]
   15ac6:	6021      	str	r1, [r4, #0]
   15ac8:	e7c2      	b.n	15a50 <__swsetup_r+0x44>
   15aca:	2309      	movs	r3, #9
   15acc:	602b      	str	r3, [r5, #0]
   15ace:	2340      	movs	r3, #64	; 0x40
   15ad0:	2001      	movs	r0, #1
   15ad2:	431a      	orrs	r2, r3
   15ad4:	81a2      	strh	r2, [r4, #12]
   15ad6:	4240      	negs	r0, r0
   15ad8:	e7b4      	b.n	15a44 <__swsetup_r+0x38>
   15ada:	46c0      	nop			; (mov r8, r8)
   15adc:	2000000c 	.word	0x2000000c

00015ae0 <register_fini>:
   15ae0:	4b03      	ldr	r3, [pc, #12]	; (15af0 <register_fini+0x10>)
   15ae2:	b510      	push	{r4, lr}
   15ae4:	2b00      	cmp	r3, #0
   15ae6:	d002      	beq.n	15aee <register_fini+0xe>
   15ae8:	4802      	ldr	r0, [pc, #8]	; (15af4 <register_fini+0x14>)
   15aea:	f000 f805 	bl	15af8 <atexit>
   15aee:	bd10      	pop	{r4, pc}
   15af0:	00000000 	.word	0x00000000
   15af4:	00016e69 	.word	0x00016e69

00015af8 <atexit>:
   15af8:	b510      	push	{r4, lr}
   15afa:	0001      	movs	r1, r0
   15afc:	2300      	movs	r3, #0
   15afe:	2200      	movs	r2, #0
   15b00:	2000      	movs	r0, #0
   15b02:	f002 fe53 	bl	187ac <__register_exitproc>
   15b06:	bd10      	pop	{r4, pc}

00015b08 <quorem>:
   15b08:	b5f0      	push	{r4, r5, r6, r7, lr}
   15b0a:	4645      	mov	r5, r8
   15b0c:	4680      	mov	r8, r0
   15b0e:	46de      	mov	lr, fp
   15b10:	4657      	mov	r7, sl
   15b12:	464e      	mov	r6, r9
   15b14:	4642      	mov	r2, r8
   15b16:	b5e0      	push	{r5, r6, r7, lr}
   15b18:	690c      	ldr	r4, [r1, #16]
   15b1a:	6912      	ldr	r2, [r2, #16]
   15b1c:	b085      	sub	sp, #20
   15b1e:	000b      	movs	r3, r1
   15b20:	9102      	str	r1, [sp, #8]
   15b22:	2000      	movs	r0, #0
   15b24:	4294      	cmp	r4, r2
   15b26:	dd00      	ble.n	15b2a <quorem+0x22>
   15b28:	e090      	b.n	15c4c <quorem+0x144>
   15b2a:	2214      	movs	r2, #20
   15b2c:	4694      	mov	ip, r2
   15b2e:	4463      	add	r3, ip
   15b30:	4699      	mov	r9, r3
   15b32:	464a      	mov	r2, r9
   15b34:	3c01      	subs	r4, #1
   15b36:	00a3      	lsls	r3, r4, #2
   15b38:	18d6      	adds	r6, r2, r3
   15b3a:	2214      	movs	r2, #20
   15b3c:	4442      	add	r2, r8
   15b3e:	4693      	mov	fp, r2
   15b40:	449b      	add	fp, r3
   15b42:	6833      	ldr	r3, [r6, #0]
   15b44:	0015      	movs	r5, r2
   15b46:	1c59      	adds	r1, r3, #1
   15b48:	465b      	mov	r3, fp
   15b4a:	6818      	ldr	r0, [r3, #0]
   15b4c:	9201      	str	r2, [sp, #4]
   15b4e:	f7fb f95d 	bl	10e0c <__udivsi3>
   15b52:	1e03      	subs	r3, r0, #0
   15b54:	9000      	str	r0, [sp, #0]
   15b56:	d042      	beq.n	15bde <quorem+0xd6>
   15b58:	0029      	movs	r1, r5
   15b5a:	2700      	movs	r7, #0
   15b5c:	464d      	mov	r5, r9
   15b5e:	2000      	movs	r0, #0
   15b60:	46b1      	mov	r9, r6
   15b62:	46a2      	mov	sl, r4
   15b64:	003e      	movs	r6, r7
   15b66:	0004      	movs	r4, r0
   15b68:	469c      	mov	ip, r3
   15b6a:	002f      	movs	r7, r5
   15b6c:	0008      	movs	r0, r1
   15b6e:	9503      	str	r5, [sp, #12]
   15b70:	4663      	mov	r3, ip
   15b72:	cf04      	ldmia	r7!, {r2}
   15b74:	0415      	lsls	r5, r2, #16
   15b76:	0c2d      	lsrs	r5, r5, #16
   15b78:	435d      	muls	r5, r3
   15b7a:	0c12      	lsrs	r2, r2, #16
   15b7c:	435a      	muls	r2, r3
   15b7e:	19ad      	adds	r5, r5, r6
   15b80:	0c2b      	lsrs	r3, r5, #16
   15b82:	18d2      	adds	r2, r2, r3
   15b84:	6803      	ldr	r3, [r0, #0]
   15b86:	042d      	lsls	r5, r5, #16
   15b88:	0419      	lsls	r1, r3, #16
   15b8a:	0c09      	lsrs	r1, r1, #16
   15b8c:	1909      	adds	r1, r1, r4
   15b8e:	0c16      	lsrs	r6, r2, #16
   15b90:	0c2d      	lsrs	r5, r5, #16
   15b92:	0412      	lsls	r2, r2, #16
   15b94:	1b49      	subs	r1, r1, r5
   15b96:	0c12      	lsrs	r2, r2, #16
   15b98:	0c1b      	lsrs	r3, r3, #16
   15b9a:	1a9b      	subs	r3, r3, r2
   15b9c:	140a      	asrs	r2, r1, #16
   15b9e:	189b      	adds	r3, r3, r2
   15ba0:	0409      	lsls	r1, r1, #16
   15ba2:	141c      	asrs	r4, r3, #16
   15ba4:	0c09      	lsrs	r1, r1, #16
   15ba6:	041b      	lsls	r3, r3, #16
   15ba8:	4319      	orrs	r1, r3
   15baa:	c002      	stmia	r0!, {r1}
   15bac:	45b9      	cmp	r9, r7
   15bae:	d2df      	bcs.n	15b70 <quorem+0x68>
   15bb0:	9b03      	ldr	r3, [sp, #12]
   15bb2:	464e      	mov	r6, r9
   15bb4:	4699      	mov	r9, r3
   15bb6:	465b      	mov	r3, fp
   15bb8:	681b      	ldr	r3, [r3, #0]
   15bba:	4654      	mov	r4, sl
   15bbc:	2b00      	cmp	r3, #0
   15bbe:	d10e      	bne.n	15bde <quorem+0xd6>
   15bc0:	465b      	mov	r3, fp
   15bc2:	9a01      	ldr	r2, [sp, #4]
   15bc4:	3b04      	subs	r3, #4
   15bc6:	429a      	cmp	r2, r3
   15bc8:	d304      	bcc.n	15bd4 <quorem+0xcc>
   15bca:	e006      	b.n	15bda <quorem+0xd2>
   15bcc:	3b04      	subs	r3, #4
   15bce:	3c01      	subs	r4, #1
   15bd0:	429a      	cmp	r2, r3
   15bd2:	d202      	bcs.n	15bda <quorem+0xd2>
   15bd4:	6819      	ldr	r1, [r3, #0]
   15bd6:	2900      	cmp	r1, #0
   15bd8:	d0f8      	beq.n	15bcc <quorem+0xc4>
   15bda:	4643      	mov	r3, r8
   15bdc:	611c      	str	r4, [r3, #16]
   15bde:	9902      	ldr	r1, [sp, #8]
   15be0:	4640      	mov	r0, r8
   15be2:	f002 fa51 	bl	18088 <__mcmp>
   15be6:	2800      	cmp	r0, #0
   15be8:	db2f      	blt.n	15c4a <quorem+0x142>
   15bea:	464f      	mov	r7, r9
   15bec:	2000      	movs	r0, #0
   15bee:	9b00      	ldr	r3, [sp, #0]
   15bf0:	9d01      	ldr	r5, [sp, #4]
   15bf2:	3301      	adds	r3, #1
   15bf4:	9300      	str	r3, [sp, #0]
   15bf6:	682b      	ldr	r3, [r5, #0]
   15bf8:	cf02      	ldmia	r7!, {r1}
   15bfa:	041a      	lsls	r2, r3, #16
   15bfc:	0c12      	lsrs	r2, r2, #16
   15bfe:	1810      	adds	r0, r2, r0
   15c00:	040a      	lsls	r2, r1, #16
   15c02:	0c12      	lsrs	r2, r2, #16
   15c04:	1a82      	subs	r2, r0, r2
   15c06:	0c09      	lsrs	r1, r1, #16
   15c08:	0c1b      	lsrs	r3, r3, #16
   15c0a:	1a5b      	subs	r3, r3, r1
   15c0c:	1411      	asrs	r1, r2, #16
   15c0e:	185b      	adds	r3, r3, r1
   15c10:	0412      	lsls	r2, r2, #16
   15c12:	1418      	asrs	r0, r3, #16
   15c14:	0c12      	lsrs	r2, r2, #16
   15c16:	041b      	lsls	r3, r3, #16
   15c18:	4313      	orrs	r3, r2
   15c1a:	c508      	stmia	r5!, {r3}
   15c1c:	42be      	cmp	r6, r7
   15c1e:	d2ea      	bcs.n	15bf6 <quorem+0xee>
   15c20:	9901      	ldr	r1, [sp, #4]
   15c22:	00a3      	lsls	r3, r4, #2
   15c24:	468c      	mov	ip, r1
   15c26:	4463      	add	r3, ip
   15c28:	681a      	ldr	r2, [r3, #0]
   15c2a:	2a00      	cmp	r2, #0
   15c2c:	d10d      	bne.n	15c4a <quorem+0x142>
   15c2e:	3b04      	subs	r3, #4
   15c30:	000a      	movs	r2, r1
   15c32:	4299      	cmp	r1, r3
   15c34:	d304      	bcc.n	15c40 <quorem+0x138>
   15c36:	e006      	b.n	15c46 <quorem+0x13e>
   15c38:	3b04      	subs	r3, #4
   15c3a:	3c01      	subs	r4, #1
   15c3c:	429a      	cmp	r2, r3
   15c3e:	d202      	bcs.n	15c46 <quorem+0x13e>
   15c40:	6819      	ldr	r1, [r3, #0]
   15c42:	2900      	cmp	r1, #0
   15c44:	d0f8      	beq.n	15c38 <quorem+0x130>
   15c46:	4643      	mov	r3, r8
   15c48:	611c      	str	r4, [r3, #16]
   15c4a:	9800      	ldr	r0, [sp, #0]
   15c4c:	b005      	add	sp, #20
   15c4e:	bc3c      	pop	{r2, r3, r4, r5}
   15c50:	4690      	mov	r8, r2
   15c52:	4699      	mov	r9, r3
   15c54:	46a2      	mov	sl, r4
   15c56:	46ab      	mov	fp, r5
   15c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15c5a:	46c0      	nop			; (mov r8, r8)

00015c5c <_dtoa_r>:
   15c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15c5e:	4657      	mov	r7, sl
   15c60:	464e      	mov	r6, r9
   15c62:	4645      	mov	r5, r8
   15c64:	46de      	mov	lr, fp
   15c66:	b5e0      	push	{r5, r6, r7, lr}
   15c68:	6c01      	ldr	r1, [r0, #64]	; 0x40
   15c6a:	b099      	sub	sp, #100	; 0x64
   15c6c:	4682      	mov	sl, r0
   15c6e:	001d      	movs	r5, r3
   15c70:	0016      	movs	r6, r2
   15c72:	001f      	movs	r7, r3
   15c74:	2900      	cmp	r1, #0
   15c76:	d009      	beq.n	15c8c <_dtoa_r+0x30>
   15c78:	2301      	movs	r3, #1
   15c7a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   15c7c:	4093      	lsls	r3, r2
   15c7e:	604a      	str	r2, [r1, #4]
   15c80:	608b      	str	r3, [r1, #8]
   15c82:	f001 fff5 	bl	17c70 <_Bfree>
   15c86:	2300      	movs	r3, #0
   15c88:	4652      	mov	r2, sl
   15c8a:	6413      	str	r3, [r2, #64]	; 0x40
   15c8c:	46b8      	mov	r8, r7
   15c8e:	2f00      	cmp	r7, #0
   15c90:	db37      	blt.n	15d02 <_dtoa_r+0xa6>
   15c92:	2300      	movs	r3, #0
   15c94:	9a25      	ldr	r2, [sp, #148]	; 0x94
   15c96:	6013      	str	r3, [r2, #0]
   15c98:	4642      	mov	r2, r8
   15c9a:	4bd6      	ldr	r3, [pc, #856]	; (15ff4 <_dtoa_r+0x398>)
   15c9c:	401a      	ands	r2, r3
   15c9e:	429a      	cmp	r2, r3
   15ca0:	d018      	beq.n	15cd4 <_dtoa_r+0x78>
   15ca2:	2200      	movs	r2, #0
   15ca4:	2300      	movs	r3, #0
   15ca6:	0030      	movs	r0, r6
   15ca8:	0039      	movs	r1, r7
   15caa:	f7fd ff85 	bl	13bb8 <__aeabi_dcmpeq>
   15cae:	2800      	cmp	r0, #0
   15cb0:	d02f      	beq.n	15d12 <_dtoa_r+0xb6>
   15cb2:	2301      	movs	r3, #1
   15cb4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   15cb6:	6013      	str	r3, [r2, #0]
   15cb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   15cba:	2b00      	cmp	r3, #0
   15cbc:	d100      	bne.n	15cc0 <_dtoa_r+0x64>
   15cbe:	e22a      	b.n	16116 <_dtoa_r+0x4ba>
   15cc0:	48cd      	ldr	r0, [pc, #820]	; (15ff8 <_dtoa_r+0x39c>)
   15cc2:	6018      	str	r0, [r3, #0]
   15cc4:	3801      	subs	r0, #1
   15cc6:	b019      	add	sp, #100	; 0x64
   15cc8:	bc3c      	pop	{r2, r3, r4, r5}
   15cca:	4690      	mov	r8, r2
   15ccc:	4699      	mov	r9, r3
   15cce:	46a2      	mov	sl, r4
   15cd0:	46ab      	mov	fp, r5
   15cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15cd4:	4bc9      	ldr	r3, [pc, #804]	; (15ffc <_dtoa_r+0x3a0>)
   15cd6:	9a24      	ldr	r2, [sp, #144]	; 0x90
   15cd8:	6013      	str	r3, [r2, #0]
   15cda:	2e00      	cmp	r6, #0
   15cdc:	d10b      	bne.n	15cf6 <_dtoa_r+0x9a>
   15cde:	4643      	mov	r3, r8
   15ce0:	0318      	lsls	r0, r3, #12
   15ce2:	d108      	bne.n	15cf6 <_dtoa_r+0x9a>
   15ce4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   15ce6:	48c6      	ldr	r0, [pc, #792]	; (16000 <_dtoa_r+0x3a4>)
   15ce8:	2b00      	cmp	r3, #0
   15cea:	d0ec      	beq.n	15cc6 <_dtoa_r+0x6a>
   15cec:	0003      	movs	r3, r0
   15cee:	3308      	adds	r3, #8
   15cf0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15cf2:	6013      	str	r3, [r2, #0]
   15cf4:	e7e7      	b.n	15cc6 <_dtoa_r+0x6a>
   15cf6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   15cf8:	48c2      	ldr	r0, [pc, #776]	; (16004 <_dtoa_r+0x3a8>)
   15cfa:	2b00      	cmp	r3, #0
   15cfc:	d0e3      	beq.n	15cc6 <_dtoa_r+0x6a>
   15cfe:	1cc3      	adds	r3, r0, #3
   15d00:	e7f6      	b.n	15cf0 <_dtoa_r+0x94>
   15d02:	2301      	movs	r3, #1
   15d04:	9a25      	ldr	r2, [sp, #148]	; 0x94
   15d06:	0068      	lsls	r0, r5, #1
   15d08:	6013      	str	r3, [r2, #0]
   15d0a:	0843      	lsrs	r3, r0, #1
   15d0c:	4698      	mov	r8, r3
   15d0e:	001f      	movs	r7, r3
   15d10:	e7c2      	b.n	15c98 <_dtoa_r+0x3c>
   15d12:	ab16      	add	r3, sp, #88	; 0x58
   15d14:	9301      	str	r3, [sp, #4]
   15d16:	ab17      	add	r3, sp, #92	; 0x5c
   15d18:	9300      	str	r3, [sp, #0]
   15d1a:	0032      	movs	r2, r6
   15d1c:	003b      	movs	r3, r7
   15d1e:	4650      	mov	r0, sl
   15d20:	f002 fa68 	bl	181f4 <__d2b>
   15d24:	4643      	mov	r3, r8
   15d26:	4683      	mov	fp, r0
   15d28:	0d1a      	lsrs	r2, r3, #20
   15d2a:	d100      	bne.n	15d2e <_dtoa_r+0xd2>
   15d2c:	e1d6      	b.n	160dc <_dtoa_r+0x480>
   15d2e:	033b      	lsls	r3, r7, #12
   15d30:	4cb5      	ldr	r4, [pc, #724]	; (16008 <_dtoa_r+0x3ac>)
   15d32:	0b1b      	lsrs	r3, r3, #12
   15d34:	431c      	orrs	r4, r3
   15d36:	4bb5      	ldr	r3, [pc, #724]	; (1600c <_dtoa_r+0x3b0>)
   15d38:	0030      	movs	r0, r6
   15d3a:	4698      	mov	r8, r3
   15d3c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15d3e:	0021      	movs	r1, r4
   15d40:	4699      	mov	r9, r3
   15d42:	2300      	movs	r3, #0
   15d44:	4490      	add	r8, r2
   15d46:	930f      	str	r3, [sp, #60]	; 0x3c
   15d48:	2200      	movs	r2, #0
   15d4a:	4bb1      	ldr	r3, [pc, #708]	; (16010 <_dtoa_r+0x3b4>)
   15d4c:	f7fd fb08 	bl	13360 <__aeabi_dsub>
   15d50:	4ab0      	ldr	r2, [pc, #704]	; (16014 <_dtoa_r+0x3b8>)
   15d52:	4bb1      	ldr	r3, [pc, #708]	; (16018 <_dtoa_r+0x3bc>)
   15d54:	f7fd f884 	bl	12e60 <__aeabi_dmul>
   15d58:	4ab0      	ldr	r2, [pc, #704]	; (1601c <_dtoa_r+0x3c0>)
   15d5a:	4bb1      	ldr	r3, [pc, #708]	; (16020 <_dtoa_r+0x3c4>)
   15d5c:	f7fc fa3c 	bl	121d8 <__aeabi_dadd>
   15d60:	0004      	movs	r4, r0
   15d62:	4640      	mov	r0, r8
   15d64:	000d      	movs	r5, r1
   15d66:	f002 ffe3 	bl	18d30 <__aeabi_i2d>
   15d6a:	4aae      	ldr	r2, [pc, #696]	; (16024 <_dtoa_r+0x3c8>)
   15d6c:	4bae      	ldr	r3, [pc, #696]	; (16028 <_dtoa_r+0x3cc>)
   15d6e:	f7fd f877 	bl	12e60 <__aeabi_dmul>
   15d72:	0002      	movs	r2, r0
   15d74:	000b      	movs	r3, r1
   15d76:	0020      	movs	r0, r4
   15d78:	0029      	movs	r1, r5
   15d7a:	f7fc fa2d 	bl	121d8 <__aeabi_dadd>
   15d7e:	0004      	movs	r4, r0
   15d80:	000d      	movs	r5, r1
   15d82:	f7fd fe03 	bl	1398c <__aeabi_d2iz>
   15d86:	2200      	movs	r2, #0
   15d88:	9003      	str	r0, [sp, #12]
   15d8a:	2300      	movs	r3, #0
   15d8c:	0020      	movs	r0, r4
   15d8e:	0029      	movs	r1, r5
   15d90:	f7fd ff18 	bl	13bc4 <__aeabi_dcmplt>
   15d94:	2800      	cmp	r0, #0
   15d96:	d000      	beq.n	15d9a <_dtoa_r+0x13e>
   15d98:	e2b1      	b.n	162fe <_dtoa_r+0x6a2>
   15d9a:	2301      	movs	r3, #1
   15d9c:	9c03      	ldr	r4, [sp, #12]
   15d9e:	930c      	str	r3, [sp, #48]	; 0x30
   15da0:	2c16      	cmp	r4, #22
   15da2:	d810      	bhi.n	15dc6 <_dtoa_r+0x16a>
   15da4:	49a1      	ldr	r1, [pc, #644]	; (1602c <_dtoa_r+0x3d0>)
   15da6:	00e3      	lsls	r3, r4, #3
   15da8:	18c9      	adds	r1, r1, r3
   15daa:	0032      	movs	r2, r6
   15dac:	6808      	ldr	r0, [r1, #0]
   15dae:	6849      	ldr	r1, [r1, #4]
   15db0:	003b      	movs	r3, r7
   15db2:	f7fd ff1b 	bl	13bec <__aeabi_dcmpgt>
   15db6:	2800      	cmp	r0, #0
   15db8:	d100      	bne.n	15dbc <_dtoa_r+0x160>
   15dba:	e31d      	b.n	163f8 <_dtoa_r+0x79c>
   15dbc:	0023      	movs	r3, r4
   15dbe:	3b01      	subs	r3, #1
   15dc0:	9303      	str	r3, [sp, #12]
   15dc2:	2300      	movs	r3, #0
   15dc4:	930c      	str	r3, [sp, #48]	; 0x30
   15dc6:	464b      	mov	r3, r9
   15dc8:	4642      	mov	r2, r8
   15dca:	1a9a      	subs	r2, r3, r2
   15dcc:	2300      	movs	r3, #0
   15dce:	9306      	str	r3, [sp, #24]
   15dd0:	0013      	movs	r3, r2
   15dd2:	3b01      	subs	r3, #1
   15dd4:	9304      	str	r3, [sp, #16]
   15dd6:	d500      	bpl.n	15dda <_dtoa_r+0x17e>
   15dd8:	e2a1      	b.n	1631e <_dtoa_r+0x6c2>
   15dda:	9b03      	ldr	r3, [sp, #12]
   15ddc:	2b00      	cmp	r3, #0
   15dde:	da00      	bge.n	15de2 <_dtoa_r+0x186>
   15de0:	e284      	b.n	162ec <_dtoa_r+0x690>
   15de2:	469c      	mov	ip, r3
   15de4:	930d      	str	r3, [sp, #52]	; 0x34
   15de6:	2300      	movs	r3, #0
   15de8:	9a04      	ldr	r2, [sp, #16]
   15dea:	4699      	mov	r9, r3
   15dec:	0011      	movs	r1, r2
   15dee:	4461      	add	r1, ip
   15df0:	9104      	str	r1, [sp, #16]
   15df2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15df4:	2b09      	cmp	r3, #9
   15df6:	d900      	bls.n	15dfa <_dtoa_r+0x19e>
   15df8:	e18f      	b.n	1611a <_dtoa_r+0x4be>
   15dfa:	2401      	movs	r4, #1
   15dfc:	2b05      	cmp	r3, #5
   15dfe:	dd02      	ble.n	15e06 <_dtoa_r+0x1aa>
   15e00:	2400      	movs	r4, #0
   15e02:	3b04      	subs	r3, #4
   15e04:	9322      	str	r3, [sp, #136]	; 0x88
   15e06:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15e08:	2b03      	cmp	r3, #3
   15e0a:	d101      	bne.n	15e10 <_dtoa_r+0x1b4>
   15e0c:	f000 fcce 	bl	167ac <_dtoa_r+0xb50>
   15e10:	dc01      	bgt.n	15e16 <_dtoa_r+0x1ba>
   15e12:	f000 fc92 	bl	1673a <_dtoa_r+0xade>
   15e16:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15e18:	2b04      	cmp	r3, #4
   15e1a:	d101      	bne.n	15e20 <_dtoa_r+0x1c4>
   15e1c:	f000 fc40 	bl	166a0 <_dtoa_r+0xa44>
   15e20:	2301      	movs	r3, #1
   15e22:	930b      	str	r3, [sp, #44]	; 0x2c
   15e24:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15e26:	2b05      	cmp	r3, #5
   15e28:	d001      	beq.n	15e2e <_dtoa_r+0x1d2>
   15e2a:	f000 fc8b 	bl	16744 <_dtoa_r+0xae8>
   15e2e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   15e30:	9b03      	ldr	r3, [sp, #12]
   15e32:	4694      	mov	ip, r2
   15e34:	4463      	add	r3, ip
   15e36:	930e      	str	r3, [sp, #56]	; 0x38
   15e38:	3301      	adds	r3, #1
   15e3a:	9307      	str	r3, [sp, #28]
   15e3c:	1e1d      	subs	r5, r3, #0
   15e3e:	dc01      	bgt.n	15e44 <_dtoa_r+0x1e8>
   15e40:	f000 fd49 	bl	168d6 <_dtoa_r+0xc7a>
   15e44:	9b07      	ldr	r3, [sp, #28]
   15e46:	4698      	mov	r8, r3
   15e48:	2300      	movs	r3, #0
   15e4a:	4652      	mov	r2, sl
   15e4c:	2100      	movs	r1, #0
   15e4e:	6453      	str	r3, [r2, #68]	; 0x44
   15e50:	2d17      	cmp	r5, #23
   15e52:	d90a      	bls.n	15e6a <_dtoa_r+0x20e>
   15e54:	2201      	movs	r2, #1
   15e56:	3304      	adds	r3, #4
   15e58:	005b      	lsls	r3, r3, #1
   15e5a:	0018      	movs	r0, r3
   15e5c:	3014      	adds	r0, #20
   15e5e:	0011      	movs	r1, r2
   15e60:	3201      	adds	r2, #1
   15e62:	4285      	cmp	r5, r0
   15e64:	d2f8      	bcs.n	15e58 <_dtoa_r+0x1fc>
   15e66:	4653      	mov	r3, sl
   15e68:	6459      	str	r1, [r3, #68]	; 0x44
   15e6a:	4650      	mov	r0, sl
   15e6c:	f001 fed8 	bl	17c20 <_Balloc>
   15e70:	4653      	mov	r3, sl
   15e72:	6418      	str	r0, [r3, #64]	; 0x40
   15e74:	4643      	mov	r3, r8
   15e76:	900a      	str	r0, [sp, #40]	; 0x28
   15e78:	2b0e      	cmp	r3, #14
   15e7a:	d900      	bls.n	15e7e <_dtoa_r+0x222>
   15e7c:	e161      	b.n	16142 <_dtoa_r+0x4e6>
   15e7e:	2c00      	cmp	r4, #0
   15e80:	d100      	bne.n	15e84 <_dtoa_r+0x228>
   15e82:	e15e      	b.n	16142 <_dtoa_r+0x4e6>
   15e84:	9610      	str	r6, [sp, #64]	; 0x40
   15e86:	9711      	str	r7, [sp, #68]	; 0x44
   15e88:	9e03      	ldr	r6, [sp, #12]
   15e8a:	2e00      	cmp	r6, #0
   15e8c:	dc01      	bgt.n	15e92 <_dtoa_r+0x236>
   15e8e:	f000 fd25 	bl	168dc <_dtoa_r+0xc80>
   15e92:	0032      	movs	r2, r6
   15e94:	210f      	movs	r1, #15
   15e96:	4b65      	ldr	r3, [pc, #404]	; (1602c <_dtoa_r+0x3d0>)
   15e98:	400a      	ands	r2, r1
   15e9a:	00d2      	lsls	r2, r2, #3
   15e9c:	189b      	adds	r3, r3, r2
   15e9e:	1136      	asrs	r6, r6, #4
   15ea0:	681c      	ldr	r4, [r3, #0]
   15ea2:	685d      	ldr	r5, [r3, #4]
   15ea4:	06f3      	lsls	r3, r6, #27
   15ea6:	d401      	bmi.n	15eac <_dtoa_r+0x250>
   15ea8:	f000 fcca 	bl	16840 <_dtoa_r+0xbe4>
   15eac:	4b60      	ldr	r3, [pc, #384]	; (16030 <_dtoa_r+0x3d4>)
   15eae:	400e      	ands	r6, r1
   15eb0:	6a1a      	ldr	r2, [r3, #32]
   15eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15eb4:	9810      	ldr	r0, [sp, #64]	; 0x40
   15eb6:	9911      	ldr	r1, [sp, #68]	; 0x44
   15eb8:	f7fc fc9e 	bl	127f8 <__aeabi_ddiv>
   15ebc:	2303      	movs	r3, #3
   15ebe:	4698      	mov	r8, r3
   15ec0:	9008      	str	r0, [sp, #32]
   15ec2:	9109      	str	r1, [sp, #36]	; 0x24
   15ec4:	2e00      	cmp	r6, #0
   15ec6:	d011      	beq.n	15eec <_dtoa_r+0x290>
   15ec8:	4f59      	ldr	r7, [pc, #356]	; (16030 <_dtoa_r+0x3d4>)
   15eca:	2301      	movs	r3, #1
   15ecc:	4233      	tst	r3, r6
   15ece:	d009      	beq.n	15ee4 <_dtoa_r+0x288>
   15ed0:	469c      	mov	ip, r3
   15ed2:	683a      	ldr	r2, [r7, #0]
   15ed4:	687b      	ldr	r3, [r7, #4]
   15ed6:	0020      	movs	r0, r4
   15ed8:	0029      	movs	r1, r5
   15eda:	44e0      	add	r8, ip
   15edc:	f7fc ffc0 	bl	12e60 <__aeabi_dmul>
   15ee0:	0004      	movs	r4, r0
   15ee2:	000d      	movs	r5, r1
   15ee4:	1076      	asrs	r6, r6, #1
   15ee6:	3708      	adds	r7, #8
   15ee8:	2e00      	cmp	r6, #0
   15eea:	d1ee      	bne.n	15eca <_dtoa_r+0x26e>
   15eec:	0022      	movs	r2, r4
   15eee:	9808      	ldr	r0, [sp, #32]
   15ef0:	9909      	ldr	r1, [sp, #36]	; 0x24
   15ef2:	002b      	movs	r3, r5
   15ef4:	f7fc fc80 	bl	127f8 <__aeabi_ddiv>
   15ef8:	0006      	movs	r6, r0
   15efa:	000f      	movs	r7, r1
   15efc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15efe:	2b00      	cmp	r3, #0
   15f00:	d009      	beq.n	15f16 <_dtoa_r+0x2ba>
   15f02:	2200      	movs	r2, #0
   15f04:	4b40      	ldr	r3, [pc, #256]	; (16008 <_dtoa_r+0x3ac>)
   15f06:	0030      	movs	r0, r6
   15f08:	0039      	movs	r1, r7
   15f0a:	f7fd fe5b 	bl	13bc4 <__aeabi_dcmplt>
   15f0e:	2800      	cmp	r0, #0
   15f10:	d001      	beq.n	15f16 <_dtoa_r+0x2ba>
   15f12:	f000 fdc2 	bl	16a9a <_dtoa_r+0xe3e>
   15f16:	4640      	mov	r0, r8
   15f18:	f002 ff0a 	bl	18d30 <__aeabi_i2d>
   15f1c:	0032      	movs	r2, r6
   15f1e:	003b      	movs	r3, r7
   15f20:	f7fc ff9e 	bl	12e60 <__aeabi_dmul>
   15f24:	2200      	movs	r2, #0
   15f26:	4b43      	ldr	r3, [pc, #268]	; (16034 <_dtoa_r+0x3d8>)
   15f28:	f7fc f956 	bl	121d8 <__aeabi_dadd>
   15f2c:	4a42      	ldr	r2, [pc, #264]	; (16038 <_dtoa_r+0x3dc>)
   15f2e:	000b      	movs	r3, r1
   15f30:	4694      	mov	ip, r2
   15f32:	4463      	add	r3, ip
   15f34:	9008      	str	r0, [sp, #32]
   15f36:	9109      	str	r1, [sp, #36]	; 0x24
   15f38:	9309      	str	r3, [sp, #36]	; 0x24
   15f3a:	9b07      	ldr	r3, [sp, #28]
   15f3c:	2b00      	cmp	r3, #0
   15f3e:	d101      	bne.n	15f44 <_dtoa_r+0x2e8>
   15f40:	f000 fc50 	bl	167e4 <_dtoa_r+0xb88>
   15f44:	9b03      	ldr	r3, [sp, #12]
   15f46:	9313      	str	r3, [sp, #76]	; 0x4c
   15f48:	9b07      	ldr	r3, [sp, #28]
   15f4a:	9312      	str	r3, [sp, #72]	; 0x48
   15f4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15f4e:	2b00      	cmp	r3, #0
   15f50:	d101      	bne.n	15f56 <_dtoa_r+0x2fa>
   15f52:	f000 fd1d 	bl	16990 <_dtoa_r+0xd34>
   15f56:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15f58:	2000      	movs	r0, #0
   15f5a:	1e5a      	subs	r2, r3, #1
   15f5c:	4b33      	ldr	r3, [pc, #204]	; (1602c <_dtoa_r+0x3d0>)
   15f5e:	00d2      	lsls	r2, r2, #3
   15f60:	189b      	adds	r3, r3, r2
   15f62:	681a      	ldr	r2, [r3, #0]
   15f64:	685b      	ldr	r3, [r3, #4]
   15f66:	4935      	ldr	r1, [pc, #212]	; (1603c <_dtoa_r+0x3e0>)
   15f68:	f7fc fc46 	bl	127f8 <__aeabi_ddiv>
   15f6c:	9a08      	ldr	r2, [sp, #32]
   15f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15f70:	f7fd f9f6 	bl	13360 <__aeabi_dsub>
   15f74:	9008      	str	r0, [sp, #32]
   15f76:	9109      	str	r1, [sp, #36]	; 0x24
   15f78:	0039      	movs	r1, r7
   15f7a:	0030      	movs	r0, r6
   15f7c:	f7fd fd06 	bl	1398c <__aeabi_d2iz>
   15f80:	0004      	movs	r4, r0
   15f82:	f002 fed5 	bl	18d30 <__aeabi_i2d>
   15f86:	0002      	movs	r2, r0
   15f88:	000b      	movs	r3, r1
   15f8a:	0030      	movs	r0, r6
   15f8c:	0039      	movs	r1, r7
   15f8e:	f7fd f9e7 	bl	13360 <__aeabi_dsub>
   15f92:	0005      	movs	r5, r0
   15f94:	000e      	movs	r6, r1
   15f96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15f98:	3430      	adds	r4, #48	; 0x30
   15f9a:	1c51      	adds	r1, r2, #1
   15f9c:	b2e7      	uxtb	r7, r4
   15f9e:	9114      	str	r1, [sp, #80]	; 0x50
   15fa0:	7017      	strb	r7, [r2, #0]
   15fa2:	0033      	movs	r3, r6
   15fa4:	9808      	ldr	r0, [sp, #32]
   15fa6:	9909      	ldr	r1, [sp, #36]	; 0x24
   15fa8:	002a      	movs	r2, r5
   15faa:	f7fd fe1f 	bl	13bec <__aeabi_dcmpgt>
   15fae:	2800      	cmp	r0, #0
   15fb0:	d001      	beq.n	15fb6 <_dtoa_r+0x35a>
   15fb2:	f000 fdfe 	bl	16bb2 <_dtoa_r+0xf56>
   15fb6:	002a      	movs	r2, r5
   15fb8:	0033      	movs	r3, r6
   15fba:	2000      	movs	r0, #0
   15fbc:	4912      	ldr	r1, [pc, #72]	; (16008 <_dtoa_r+0x3ac>)
   15fbe:	f7fd f9cf 	bl	13360 <__aeabi_dsub>
   15fc2:	0002      	movs	r2, r0
   15fc4:	000b      	movs	r3, r1
   15fc6:	9808      	ldr	r0, [sp, #32]
   15fc8:	9909      	ldr	r1, [sp, #36]	; 0x24
   15fca:	f7fd fe0f 	bl	13bec <__aeabi_dcmpgt>
   15fce:	2800      	cmp	r0, #0
   15fd0:	d001      	beq.n	15fd6 <_dtoa_r+0x37a>
   15fd2:	f000 fde7 	bl	16ba4 <_dtoa_r+0xf48>
   15fd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15fd8:	2b01      	cmp	r3, #1
   15fda:	d101      	bne.n	15fe0 <_dtoa_r+0x384>
   15fdc:	f000 fc78 	bl	168d0 <_dtoa_r+0xc74>
   15fe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15fe2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15fe4:	4694      	mov	ip, r2
   15fe6:	4463      	add	r3, ip
   15fe8:	4698      	mov	r8, r3
   15fea:	464b      	mov	r3, r9
   15fec:	9312      	str	r3, [sp, #72]	; 0x48
   15fee:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15ff0:	4699      	mov	r9, r3
   15ff2:	e038      	b.n	16066 <_dtoa_r+0x40a>
   15ff4:	7ff00000 	.word	0x7ff00000
   15ff8:	00019b45 	.word	0x00019b45
   15ffc:	0000270f 	.word	0x0000270f
   16000:	00019b68 	.word	0x00019b68
   16004:	00019b74 	.word	0x00019b74
   16008:	3ff00000 	.word	0x3ff00000
   1600c:	fffffc01 	.word	0xfffffc01
   16010:	3ff80000 	.word	0x3ff80000
   16014:	636f4361 	.word	0x636f4361
   16018:	3fd287a7 	.word	0x3fd287a7
   1601c:	8b60c8b3 	.word	0x8b60c8b3
   16020:	3fc68a28 	.word	0x3fc68a28
   16024:	509f79fb 	.word	0x509f79fb
   16028:	3fd34413 	.word	0x3fd34413
   1602c:	00019ba0 	.word	0x00019ba0
   16030:	00019b78 	.word	0x00019b78
   16034:	401c0000 	.word	0x401c0000
   16038:	fcc00000 	.word	0xfcc00000
   1603c:	3fe00000 	.word	0x3fe00000
   16040:	002a      	movs	r2, r5
   16042:	0033      	movs	r3, r6
   16044:	2000      	movs	r0, #0
   16046:	49b9      	ldr	r1, [pc, #740]	; (1632c <_dtoa_r+0x6d0>)
   16048:	f7fd f98a 	bl	13360 <__aeabi_dsub>
   1604c:	9a08      	ldr	r2, [sp, #32]
   1604e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16050:	f7fd fdb8 	bl	13bc4 <__aeabi_dcmplt>
   16054:	2800      	cmp	r0, #0
   16056:	d001      	beq.n	1605c <_dtoa_r+0x400>
   16058:	f000 fd74 	bl	16b44 <_dtoa_r+0xee8>
   1605c:	46a1      	mov	r9, r4
   1605e:	4544      	cmp	r4, r8
   16060:	d101      	bne.n	16066 <_dtoa_r+0x40a>
   16062:	f000 fc33 	bl	168cc <_dtoa_r+0xc70>
   16066:	9808      	ldr	r0, [sp, #32]
   16068:	9909      	ldr	r1, [sp, #36]	; 0x24
   1606a:	2200      	movs	r2, #0
   1606c:	4bb0      	ldr	r3, [pc, #704]	; (16330 <_dtoa_r+0x6d4>)
   1606e:	f7fc fef7 	bl	12e60 <__aeabi_dmul>
   16072:	2200      	movs	r2, #0
   16074:	4bae      	ldr	r3, [pc, #696]	; (16330 <_dtoa_r+0x6d4>)
   16076:	9008      	str	r0, [sp, #32]
   16078:	9109      	str	r1, [sp, #36]	; 0x24
   1607a:	0028      	movs	r0, r5
   1607c:	0031      	movs	r1, r6
   1607e:	f7fc feef 	bl	12e60 <__aeabi_dmul>
   16082:	000d      	movs	r5, r1
   16084:	0004      	movs	r4, r0
   16086:	f7fd fc81 	bl	1398c <__aeabi_d2iz>
   1608a:	0007      	movs	r7, r0
   1608c:	f002 fe50 	bl	18d30 <__aeabi_i2d>
   16090:	0002      	movs	r2, r0
   16092:	000b      	movs	r3, r1
   16094:	0020      	movs	r0, r4
   16096:	0029      	movs	r1, r5
   16098:	f7fd f962 	bl	13360 <__aeabi_dsub>
   1609c:	464b      	mov	r3, r9
   1609e:	3730      	adds	r7, #48	; 0x30
   160a0:	b2ff      	uxtb	r7, r7
   160a2:	1c5c      	adds	r4, r3, #1
   160a4:	701f      	strb	r7, [r3, #0]
   160a6:	9a08      	ldr	r2, [sp, #32]
   160a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   160aa:	0005      	movs	r5, r0
   160ac:	000e      	movs	r6, r1
   160ae:	f7fd fd89 	bl	13bc4 <__aeabi_dcmplt>
   160b2:	2800      	cmp	r0, #0
   160b4:	d0c4      	beq.n	16040 <_dtoa_r+0x3e4>
   160b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   160b8:	9303      	str	r3, [sp, #12]
   160ba:	4659      	mov	r1, fp
   160bc:	4650      	mov	r0, sl
   160be:	f001 fdd7 	bl	17c70 <_Bfree>
   160c2:	2300      	movs	r3, #0
   160c4:	7023      	strb	r3, [r4, #0]
   160c6:	9b03      	ldr	r3, [sp, #12]
   160c8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   160ca:	3301      	adds	r3, #1
   160cc:	6013      	str	r3, [r2, #0]
   160ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
   160d0:	2b00      	cmp	r3, #0
   160d2:	d100      	bne.n	160d6 <_dtoa_r+0x47a>
   160d4:	e3a8      	b.n	16828 <_dtoa_r+0xbcc>
   160d6:	601c      	str	r4, [r3, #0]
   160d8:	980a      	ldr	r0, [sp, #40]	; 0x28
   160da:	e5f4      	b.n	15cc6 <_dtoa_r+0x6a>
   160dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   160de:	4699      	mov	r9, r3
   160e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   160e2:	444b      	add	r3, r9
   160e4:	001c      	movs	r4, r3
   160e6:	4b93      	ldr	r3, [pc, #588]	; (16334 <_dtoa_r+0x6d8>)
   160e8:	18e3      	adds	r3, r4, r3
   160ea:	2b20      	cmp	r3, #32
   160ec:	dc00      	bgt.n	160f0 <_dtoa_r+0x494>
   160ee:	e17e      	b.n	163ee <_dtoa_r+0x792>
   160f0:	0031      	movs	r1, r6
   160f2:	4a91      	ldr	r2, [pc, #580]	; (16338 <_dtoa_r+0x6dc>)
   160f4:	4640      	mov	r0, r8
   160f6:	18a2      	adds	r2, r4, r2
   160f8:	40d1      	lsrs	r1, r2
   160fa:	000a      	movs	r2, r1
   160fc:	2140      	movs	r1, #64	; 0x40
   160fe:	1acb      	subs	r3, r1, r3
   16100:	4098      	lsls	r0, r3
   16102:	4310      	orrs	r0, r2
   16104:	f7fd fc76 	bl	139f4 <__aeabi_ui2d>
   16108:	1e63      	subs	r3, r4, #1
   1610a:	4698      	mov	r8, r3
   1610c:	2301      	movs	r3, #1
   1610e:	4d8b      	ldr	r5, [pc, #556]	; (1633c <_dtoa_r+0x6e0>)
   16110:	930f      	str	r3, [sp, #60]	; 0x3c
   16112:	1949      	adds	r1, r1, r5
   16114:	e618      	b.n	15d48 <_dtoa_r+0xec>
   16116:	488a      	ldr	r0, [pc, #552]	; (16340 <_dtoa_r+0x6e4>)
   16118:	e5d5      	b.n	15cc6 <_dtoa_r+0x6a>
   1611a:	2300      	movs	r3, #0
   1611c:	4652      	mov	r2, sl
   1611e:	2100      	movs	r1, #0
   16120:	6453      	str	r3, [r2, #68]	; 0x44
   16122:	4650      	mov	r0, sl
   16124:	f001 fd7c 	bl	17c20 <_Balloc>
   16128:	4653      	mov	r3, sl
   1612a:	6418      	str	r0, [r3, #64]	; 0x40
   1612c:	2301      	movs	r3, #1
   1612e:	425b      	negs	r3, r3
   16130:	9307      	str	r3, [sp, #28]
   16132:	930e      	str	r3, [sp, #56]	; 0x38
   16134:	3302      	adds	r3, #2
   16136:	2200      	movs	r2, #0
   16138:	930b      	str	r3, [sp, #44]	; 0x2c
   1613a:	2300      	movs	r3, #0
   1613c:	900a      	str	r0, [sp, #40]	; 0x28
   1613e:	9223      	str	r2, [sp, #140]	; 0x8c
   16140:	9322      	str	r3, [sp, #136]	; 0x88
   16142:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   16144:	2b00      	cmp	r3, #0
   16146:	da00      	bge.n	1614a <_dtoa_r+0x4ee>
   16148:	e0ab      	b.n	162a2 <_dtoa_r+0x646>
   1614a:	9a03      	ldr	r2, [sp, #12]
   1614c:	2a0e      	cmp	r2, #14
   1614e:	dd00      	ble.n	16152 <_dtoa_r+0x4f6>
   16150:	e0a7      	b.n	162a2 <_dtoa_r+0x646>
   16152:	4b7c      	ldr	r3, [pc, #496]	; (16344 <_dtoa_r+0x6e8>)
   16154:	00d2      	lsls	r2, r2, #3
   16156:	189b      	adds	r3, r3, r2
   16158:	685c      	ldr	r4, [r3, #4]
   1615a:	681b      	ldr	r3, [r3, #0]
   1615c:	9304      	str	r3, [sp, #16]
   1615e:	9405      	str	r4, [sp, #20]
   16160:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   16162:	2b00      	cmp	r3, #0
   16164:	da00      	bge.n	16168 <_dtoa_r+0x50c>
   16166:	e2a7      	b.n	166b8 <_dtoa_r+0xa5c>
   16168:	9c04      	ldr	r4, [sp, #16]
   1616a:	9d05      	ldr	r5, [sp, #20]
   1616c:	0030      	movs	r0, r6
   1616e:	0022      	movs	r2, r4
   16170:	002b      	movs	r3, r5
   16172:	0039      	movs	r1, r7
   16174:	f7fc fb40 	bl	127f8 <__aeabi_ddiv>
   16178:	f7fd fc08 	bl	1398c <__aeabi_d2iz>
   1617c:	4680      	mov	r8, r0
   1617e:	f002 fdd7 	bl	18d30 <__aeabi_i2d>
   16182:	0022      	movs	r2, r4
   16184:	002b      	movs	r3, r5
   16186:	f7fc fe6b 	bl	12e60 <__aeabi_dmul>
   1618a:	0002      	movs	r2, r0
   1618c:	000b      	movs	r3, r1
   1618e:	0030      	movs	r0, r6
   16190:	0039      	movs	r1, r7
   16192:	f7fd f8e5 	bl	13360 <__aeabi_dsub>
   16196:	4643      	mov	r3, r8
   16198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1619a:	3330      	adds	r3, #48	; 0x30
   1619c:	7013      	strb	r3, [r2, #0]
   1619e:	9b07      	ldr	r3, [sp, #28]
   161a0:	0006      	movs	r6, r0
   161a2:	000f      	movs	r7, r1
   161a4:	1c54      	adds	r4, r2, #1
   161a6:	2b01      	cmp	r3, #1
   161a8:	d04e      	beq.n	16248 <_dtoa_r+0x5ec>
   161aa:	2200      	movs	r2, #0
   161ac:	4b60      	ldr	r3, [pc, #384]	; (16330 <_dtoa_r+0x6d4>)
   161ae:	f7fc fe57 	bl	12e60 <__aeabi_dmul>
   161b2:	2200      	movs	r2, #0
   161b4:	2300      	movs	r3, #0
   161b6:	0006      	movs	r6, r0
   161b8:	000f      	movs	r7, r1
   161ba:	f7fd fcfd 	bl	13bb8 <__aeabi_dcmpeq>
   161be:	2800      	cmp	r0, #0
   161c0:	d000      	beq.n	161c4 <_dtoa_r+0x568>
   161c2:	e77a      	b.n	160ba <_dtoa_r+0x45e>
   161c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   161c6:	9a07      	ldr	r2, [sp, #28]
   161c8:	1c9d      	adds	r5, r3, #2
   161ca:	469c      	mov	ip, r3
   161cc:	465b      	mov	r3, fp
   161ce:	9306      	str	r3, [sp, #24]
   161d0:	4653      	mov	r3, sl
   161d2:	4462      	add	r2, ip
   161d4:	46aa      	mov	sl, r5
   161d6:	9c04      	ldr	r4, [sp, #16]
   161d8:	9d05      	ldr	r5, [sp, #20]
   161da:	4691      	mov	r9, r2
   161dc:	9307      	str	r3, [sp, #28]
   161de:	e00f      	b.n	16200 <_dtoa_r+0x5a4>
   161e0:	2200      	movs	r2, #0
   161e2:	4b53      	ldr	r3, [pc, #332]	; (16330 <_dtoa_r+0x6d4>)
   161e4:	f7fc fe3c 	bl	12e60 <__aeabi_dmul>
   161e8:	2301      	movs	r3, #1
   161ea:	469c      	mov	ip, r3
   161ec:	2200      	movs	r2, #0
   161ee:	2300      	movs	r3, #0
   161f0:	0006      	movs	r6, r0
   161f2:	000f      	movs	r7, r1
   161f4:	44e2      	add	sl, ip
   161f6:	f7fd fcdf 	bl	13bb8 <__aeabi_dcmpeq>
   161fa:	2800      	cmp	r0, #0
   161fc:	d000      	beq.n	16200 <_dtoa_r+0x5a4>
   161fe:	e2d9      	b.n	167b4 <_dtoa_r+0xb58>
   16200:	0022      	movs	r2, r4
   16202:	002b      	movs	r3, r5
   16204:	0030      	movs	r0, r6
   16206:	0039      	movs	r1, r7
   16208:	f7fc faf6 	bl	127f8 <__aeabi_ddiv>
   1620c:	f7fd fbbe 	bl	1398c <__aeabi_d2iz>
   16210:	4680      	mov	r8, r0
   16212:	f002 fd8d 	bl	18d30 <__aeabi_i2d>
   16216:	0022      	movs	r2, r4
   16218:	002b      	movs	r3, r5
   1621a:	f7fc fe21 	bl	12e60 <__aeabi_dmul>
   1621e:	0002      	movs	r2, r0
   16220:	000b      	movs	r3, r1
   16222:	0030      	movs	r0, r6
   16224:	0039      	movs	r1, r7
   16226:	f7fd f89b 	bl	13360 <__aeabi_dsub>
   1622a:	4653      	mov	r3, sl
   1622c:	4642      	mov	r2, r8
   1622e:	3b01      	subs	r3, #1
   16230:	3230      	adds	r2, #48	; 0x30
   16232:	0006      	movs	r6, r0
   16234:	000f      	movs	r7, r1
   16236:	46d3      	mov	fp, sl
   16238:	701a      	strb	r2, [r3, #0]
   1623a:	45d1      	cmp	r9, sl
   1623c:	d1d0      	bne.n	161e0 <_dtoa_r+0x584>
   1623e:	9b06      	ldr	r3, [sp, #24]
   16240:	4654      	mov	r4, sl
   16242:	469b      	mov	fp, r3
   16244:	9b07      	ldr	r3, [sp, #28]
   16246:	469a      	mov	sl, r3
   16248:	0032      	movs	r2, r6
   1624a:	003b      	movs	r3, r7
   1624c:	0030      	movs	r0, r6
   1624e:	0039      	movs	r1, r7
   16250:	f7fb ffc2 	bl	121d8 <__aeabi_dadd>
   16254:	0006      	movs	r6, r0
   16256:	000f      	movs	r7, r1
   16258:	0002      	movs	r2, r0
   1625a:	000b      	movs	r3, r1
   1625c:	9804      	ldr	r0, [sp, #16]
   1625e:	9905      	ldr	r1, [sp, #20]
   16260:	f7fd fcb0 	bl	13bc4 <__aeabi_dcmplt>
   16264:	2800      	cmp	r0, #0
   16266:	d10c      	bne.n	16282 <_dtoa_r+0x626>
   16268:	9804      	ldr	r0, [sp, #16]
   1626a:	9905      	ldr	r1, [sp, #20]
   1626c:	0032      	movs	r2, r6
   1626e:	003b      	movs	r3, r7
   16270:	f7fd fca2 	bl	13bb8 <__aeabi_dcmpeq>
   16274:	2800      	cmp	r0, #0
   16276:	d100      	bne.n	1627a <_dtoa_r+0x61e>
   16278:	e71f      	b.n	160ba <_dtoa_r+0x45e>
   1627a:	4643      	mov	r3, r8
   1627c:	07db      	lsls	r3, r3, #31
   1627e:	d400      	bmi.n	16282 <_dtoa_r+0x626>
   16280:	e71b      	b.n	160ba <_dtoa_r+0x45e>
   16282:	1e65      	subs	r5, r4, #1
   16284:	782f      	ldrb	r7, [r5, #0]
   16286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16288:	e006      	b.n	16298 <_dtoa_r+0x63c>
   1628a:	429d      	cmp	r5, r3
   1628c:	d100      	bne.n	16290 <_dtoa_r+0x634>
   1628e:	e351      	b.n	16934 <_dtoa_r+0xcd8>
   16290:	3c02      	subs	r4, #2
   16292:	7827      	ldrb	r7, [r4, #0]
   16294:	002c      	movs	r4, r5
   16296:	3d01      	subs	r5, #1
   16298:	2f39      	cmp	r7, #57	; 0x39
   1629a:	d0f6      	beq.n	1628a <_dtoa_r+0x62e>
   1629c:	3701      	adds	r7, #1
   1629e:	702f      	strb	r7, [r5, #0]
   162a0:	e70b      	b.n	160ba <_dtoa_r+0x45e>
   162a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   162a4:	2a00      	cmp	r2, #0
   162a6:	d04f      	beq.n	16348 <_dtoa_r+0x6ec>
   162a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
   162aa:	2a01      	cmp	r2, #1
   162ac:	dc00      	bgt.n	162b0 <_dtoa_r+0x654>
   162ae:	e22c      	b.n	1670a <_dtoa_r+0xaae>
   162b0:	9b07      	ldr	r3, [sp, #28]
   162b2:	1e5c      	subs	r4, r3, #1
   162b4:	464b      	mov	r3, r9
   162b6:	45a1      	cmp	r9, r4
   162b8:	da00      	bge.n	162bc <_dtoa_r+0x660>
   162ba:	e2b8      	b.n	1682e <_dtoa_r+0xbd2>
   162bc:	1b1c      	subs	r4, r3, r4
   162be:	9b07      	ldr	r3, [sp, #28]
   162c0:	2b00      	cmp	r3, #0
   162c2:	da00      	bge.n	162c6 <_dtoa_r+0x66a>
   162c4:	e3d4      	b.n	16a70 <_dtoa_r+0xe14>
   162c6:	9b06      	ldr	r3, [sp, #24]
   162c8:	9308      	str	r3, [sp, #32]
   162ca:	9b07      	ldr	r3, [sp, #28]
   162cc:	9a06      	ldr	r2, [sp, #24]
   162ce:	2101      	movs	r1, #1
   162d0:	4694      	mov	ip, r2
   162d2:	449c      	add	ip, r3
   162d4:	4662      	mov	r2, ip
   162d6:	9206      	str	r2, [sp, #24]
   162d8:	9a04      	ldr	r2, [sp, #16]
   162da:	4650      	mov	r0, sl
   162dc:	4694      	mov	ip, r2
   162de:	449c      	add	ip, r3
   162e0:	4663      	mov	r3, ip
   162e2:	9304      	str	r3, [sp, #16]
   162e4:	f001 fd5c 	bl	17da0 <__i2b>
   162e8:	4680      	mov	r8, r0
   162ea:	e032      	b.n	16352 <_dtoa_r+0x6f6>
   162ec:	9a06      	ldr	r2, [sp, #24]
   162ee:	9b03      	ldr	r3, [sp, #12]
   162f0:	1ad2      	subs	r2, r2, r3
   162f2:	425b      	negs	r3, r3
   162f4:	4699      	mov	r9, r3
   162f6:	2300      	movs	r3, #0
   162f8:	9206      	str	r2, [sp, #24]
   162fa:	930d      	str	r3, [sp, #52]	; 0x34
   162fc:	e579      	b.n	15df2 <_dtoa_r+0x196>
   162fe:	9803      	ldr	r0, [sp, #12]
   16300:	f002 fd16 	bl	18d30 <__aeabi_i2d>
   16304:	000b      	movs	r3, r1
   16306:	0002      	movs	r2, r0
   16308:	0029      	movs	r1, r5
   1630a:	0020      	movs	r0, r4
   1630c:	f7fd fc54 	bl	13bb8 <__aeabi_dcmpeq>
   16310:	0002      	movs	r2, r0
   16312:	4250      	negs	r0, r2
   16314:	4150      	adcs	r0, r2
   16316:	9b03      	ldr	r3, [sp, #12]
   16318:	1a1b      	subs	r3, r3, r0
   1631a:	9303      	str	r3, [sp, #12]
   1631c:	e53d      	b.n	15d9a <_dtoa_r+0x13e>
   1631e:	2301      	movs	r3, #1
   16320:	1a9b      	subs	r3, r3, r2
   16322:	9306      	str	r3, [sp, #24]
   16324:	2300      	movs	r3, #0
   16326:	9304      	str	r3, [sp, #16]
   16328:	e557      	b.n	15dda <_dtoa_r+0x17e>
   1632a:	46c0      	nop			; (mov r8, r8)
   1632c:	3ff00000 	.word	0x3ff00000
   16330:	40240000 	.word	0x40240000
   16334:	00000432 	.word	0x00000432
   16338:	00000412 	.word	0x00000412
   1633c:	fe100000 	.word	0xfe100000
   16340:	00019b44 	.word	0x00019b44
   16344:	00019ba0 	.word	0x00019ba0
   16348:	9b06      	ldr	r3, [sp, #24]
   1634a:	464c      	mov	r4, r9
   1634c:	9308      	str	r3, [sp, #32]
   1634e:	2300      	movs	r3, #0
   16350:	4698      	mov	r8, r3
   16352:	9908      	ldr	r1, [sp, #32]
   16354:	1e0b      	subs	r3, r1, #0
   16356:	dd0e      	ble.n	16376 <_dtoa_r+0x71a>
   16358:	9a04      	ldr	r2, [sp, #16]
   1635a:	2a00      	cmp	r2, #0
   1635c:	dd0b      	ble.n	16376 <_dtoa_r+0x71a>
   1635e:	4293      	cmp	r3, r2
   16360:	dd00      	ble.n	16364 <_dtoa_r+0x708>
   16362:	e187      	b.n	16674 <_dtoa_r+0xa18>
   16364:	9a06      	ldr	r2, [sp, #24]
   16366:	1ad2      	subs	r2, r2, r3
   16368:	9206      	str	r2, [sp, #24]
   1636a:	9a08      	ldr	r2, [sp, #32]
   1636c:	1ad2      	subs	r2, r2, r3
   1636e:	9208      	str	r2, [sp, #32]
   16370:	9a04      	ldr	r2, [sp, #16]
   16372:	1ad3      	subs	r3, r2, r3
   16374:	9304      	str	r3, [sp, #16]
   16376:	464b      	mov	r3, r9
   16378:	2b00      	cmp	r3, #0
   1637a:	d01a      	beq.n	163b2 <_dtoa_r+0x756>
   1637c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1637e:	2b00      	cmp	r3, #0
   16380:	d100      	bne.n	16384 <_dtoa_r+0x728>
   16382:	e1bb      	b.n	166fc <_dtoa_r+0xaa0>
   16384:	2c00      	cmp	r4, #0
   16386:	dd10      	ble.n	163aa <_dtoa_r+0x74e>
   16388:	4641      	mov	r1, r8
   1638a:	0022      	movs	r2, r4
   1638c:	4650      	mov	r0, sl
   1638e:	f001 fdbb 	bl	17f08 <__pow5mult>
   16392:	465a      	mov	r2, fp
   16394:	0001      	movs	r1, r0
   16396:	4680      	mov	r8, r0
   16398:	4650      	mov	r0, sl
   1639a:	f001 fd0b 	bl	17db4 <__multiply>
   1639e:	0005      	movs	r5, r0
   163a0:	4659      	mov	r1, fp
   163a2:	4650      	mov	r0, sl
   163a4:	f001 fc64 	bl	17c70 <_Bfree>
   163a8:	46ab      	mov	fp, r5
   163aa:	464b      	mov	r3, r9
   163ac:	1b1a      	subs	r2, r3, r4
   163ae:	d000      	beq.n	163b2 <_dtoa_r+0x756>
   163b0:	e1a5      	b.n	166fe <_dtoa_r+0xaa2>
   163b2:	2101      	movs	r1, #1
   163b4:	4650      	mov	r0, sl
   163b6:	f001 fcf3 	bl	17da0 <__i2b>
   163ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   163bc:	4681      	mov	r9, r0
   163be:	2b00      	cmp	r3, #0
   163c0:	dd1d      	ble.n	163fe <_dtoa_r+0x7a2>
   163c2:	001a      	movs	r2, r3
   163c4:	0001      	movs	r1, r0
   163c6:	4650      	mov	r0, sl
   163c8:	f001 fd9e 	bl	17f08 <__pow5mult>
   163cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   163ce:	4681      	mov	r9, r0
   163d0:	2b01      	cmp	r3, #1
   163d2:	dc00      	bgt.n	163d6 <_dtoa_r+0x77a>
   163d4:	e150      	b.n	16678 <_dtoa_r+0xa1c>
   163d6:	2400      	movs	r4, #0
   163d8:	464b      	mov	r3, r9
   163da:	691b      	ldr	r3, [r3, #16]
   163dc:	3303      	adds	r3, #3
   163de:	009b      	lsls	r3, r3, #2
   163e0:	444b      	add	r3, r9
   163e2:	6858      	ldr	r0, [r3, #4]
   163e4:	f001 fc94 	bl	17d10 <__hi0bits>
   163e8:	2320      	movs	r3, #32
   163ea:	1a1b      	subs	r3, r3, r0
   163ec:	e010      	b.n	16410 <_dtoa_r+0x7b4>
   163ee:	2220      	movs	r2, #32
   163f0:	0030      	movs	r0, r6
   163f2:	1ad3      	subs	r3, r2, r3
   163f4:	4098      	lsls	r0, r3
   163f6:	e685      	b.n	16104 <_dtoa_r+0x4a8>
   163f8:	2300      	movs	r3, #0
   163fa:	930c      	str	r3, [sp, #48]	; 0x30
   163fc:	e4e3      	b.n	15dc6 <_dtoa_r+0x16a>
   163fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16400:	2400      	movs	r4, #0
   16402:	2b01      	cmp	r3, #1
   16404:	dc00      	bgt.n	16408 <_dtoa_r+0x7ac>
   16406:	e18b      	b.n	16720 <_dtoa_r+0xac4>
   16408:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1640a:	2301      	movs	r3, #1
   1640c:	2a00      	cmp	r2, #0
   1640e:	d1e3      	bne.n	163d8 <_dtoa_r+0x77c>
   16410:	9904      	ldr	r1, [sp, #16]
   16412:	201f      	movs	r0, #31
   16414:	468c      	mov	ip, r1
   16416:	4463      	add	r3, ip
   16418:	4018      	ands	r0, r3
   1641a:	d100      	bne.n	1641e <_dtoa_r+0x7c2>
   1641c:	e0ae      	b.n	1657c <_dtoa_r+0x920>
   1641e:	2320      	movs	r3, #32
   16420:	1a1b      	subs	r3, r3, r0
   16422:	2b04      	cmp	r3, #4
   16424:	dc00      	bgt.n	16428 <_dtoa_r+0x7cc>
   16426:	e3cc      	b.n	16bc2 <_dtoa_r+0xf66>
   16428:	231c      	movs	r3, #28
   1642a:	1a18      	subs	r0, r3, r0
   1642c:	9b06      	ldr	r3, [sp, #24]
   1642e:	469c      	mov	ip, r3
   16430:	4484      	add	ip, r0
   16432:	4663      	mov	r3, ip
   16434:	9306      	str	r3, [sp, #24]
   16436:	9b08      	ldr	r3, [sp, #32]
   16438:	469c      	mov	ip, r3
   1643a:	4484      	add	ip, r0
   1643c:	4663      	mov	r3, ip
   1643e:	468c      	mov	ip, r1
   16440:	4484      	add	ip, r0
   16442:	9308      	str	r3, [sp, #32]
   16444:	4663      	mov	r3, ip
   16446:	9304      	str	r3, [sp, #16]
   16448:	9b06      	ldr	r3, [sp, #24]
   1644a:	2b00      	cmp	r3, #0
   1644c:	dd05      	ble.n	1645a <_dtoa_r+0x7fe>
   1644e:	4659      	mov	r1, fp
   16450:	001a      	movs	r2, r3
   16452:	4650      	mov	r0, sl
   16454:	f001 fdb8 	bl	17fc8 <__lshift>
   16458:	4683      	mov	fp, r0
   1645a:	9b04      	ldr	r3, [sp, #16]
   1645c:	2b00      	cmp	r3, #0
   1645e:	dd05      	ble.n	1646c <_dtoa_r+0x810>
   16460:	4649      	mov	r1, r9
   16462:	001a      	movs	r2, r3
   16464:	4650      	mov	r0, sl
   16466:	f001 fdaf 	bl	17fc8 <__lshift>
   1646a:	4681      	mov	r9, r0
   1646c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1646e:	2b00      	cmp	r3, #0
   16470:	d000      	beq.n	16474 <_dtoa_r+0x818>
   16472:	e094      	b.n	1659e <_dtoa_r+0x942>
   16474:	9b07      	ldr	r3, [sp, #28]
   16476:	2b00      	cmp	r3, #0
   16478:	dc00      	bgt.n	1647c <_dtoa_r+0x820>
   1647a:	e175      	b.n	16768 <_dtoa_r+0xb0c>
   1647c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1647e:	2b00      	cmp	r3, #0
   16480:	d100      	bne.n	16484 <_dtoa_r+0x828>
   16482:	e0a6      	b.n	165d2 <_dtoa_r+0x976>
   16484:	9b08      	ldr	r3, [sp, #32]
   16486:	2b00      	cmp	r3, #0
   16488:	dd05      	ble.n	16496 <_dtoa_r+0x83a>
   1648a:	4641      	mov	r1, r8
   1648c:	001a      	movs	r2, r3
   1648e:	4650      	mov	r0, sl
   16490:	f001 fd9a 	bl	17fc8 <__lshift>
   16494:	4680      	mov	r8, r0
   16496:	4643      	mov	r3, r8
   16498:	930c      	str	r3, [sp, #48]	; 0x30
   1649a:	2c00      	cmp	r4, #0
   1649c:	d000      	beq.n	164a0 <_dtoa_r+0x844>
   1649e:	e250      	b.n	16942 <_dtoa_r+0xce6>
   164a0:	9c07      	ldr	r4, [sp, #28]
   164a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   164a4:	3c01      	subs	r4, #1
   164a6:	0023      	movs	r3, r4
   164a8:	4694      	mov	ip, r2
   164aa:	4463      	add	r3, ip
   164ac:	9308      	str	r3, [sp, #32]
   164ae:	2301      	movs	r3, #1
   164b0:	4033      	ands	r3, r6
   164b2:	9307      	str	r3, [sp, #28]
   164b4:	464b      	mov	r3, r9
   164b6:	9306      	str	r3, [sp, #24]
   164b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   164ba:	4657      	mov	r7, sl
   164bc:	4645      	mov	r5, r8
   164be:	465e      	mov	r6, fp
   164c0:	4692      	mov	sl, r2
   164c2:	4698      	mov	r8, r3
   164c4:	9b06      	ldr	r3, [sp, #24]
   164c6:	0030      	movs	r0, r6
   164c8:	0019      	movs	r1, r3
   164ca:	4699      	mov	r9, r3
   164cc:	f7ff fb1c 	bl	15b08 <quorem>
   164d0:	0003      	movs	r3, r0
   164d2:	900b      	str	r0, [sp, #44]	; 0x2c
   164d4:	3330      	adds	r3, #48	; 0x30
   164d6:	0029      	movs	r1, r5
   164d8:	0030      	movs	r0, r6
   164da:	9304      	str	r3, [sp, #16]
   164dc:	f001 fdd4 	bl	18088 <__mcmp>
   164e0:	4649      	mov	r1, r9
   164e2:	0004      	movs	r4, r0
   164e4:	4642      	mov	r2, r8
   164e6:	0038      	movs	r0, r7
   164e8:	f001 fde8 	bl	180bc <__mdiff>
   164ec:	68c3      	ldr	r3, [r0, #12]
   164ee:	4681      	mov	r9, r0
   164f0:	2b00      	cmp	r3, #0
   164f2:	d000      	beq.n	164f6 <_dtoa_r+0x89a>
   164f4:	e11e      	b.n	16734 <_dtoa_r+0xad8>
   164f6:	0001      	movs	r1, r0
   164f8:	0030      	movs	r0, r6
   164fa:	f001 fdc5 	bl	18088 <__mcmp>
   164fe:	4683      	mov	fp, r0
   16500:	4649      	mov	r1, r9
   16502:	0038      	movs	r0, r7
   16504:	f001 fbb4 	bl	17c70 <_Bfree>
   16508:	465b      	mov	r3, fp
   1650a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1650c:	4313      	orrs	r3, r2
   1650e:	d103      	bne.n	16518 <_dtoa_r+0x8bc>
   16510:	9b07      	ldr	r3, [sp, #28]
   16512:	2b00      	cmp	r3, #0
   16514:	d100      	bne.n	16518 <_dtoa_r+0x8bc>
   16516:	e306      	b.n	16b26 <_dtoa_r+0xeca>
   16518:	2c00      	cmp	r4, #0
   1651a:	da00      	bge.n	1651e <_dtoa_r+0x8c2>
   1651c:	e1a8      	b.n	16870 <_dtoa_r+0xc14>
   1651e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16520:	431c      	orrs	r4, r3
   16522:	d103      	bne.n	1652c <_dtoa_r+0x8d0>
   16524:	9b07      	ldr	r3, [sp, #28]
   16526:	2b00      	cmp	r3, #0
   16528:	d100      	bne.n	1652c <_dtoa_r+0x8d0>
   1652a:	e1a1      	b.n	16870 <_dtoa_r+0xc14>
   1652c:	465b      	mov	r3, fp
   1652e:	2b00      	cmp	r3, #0
   16530:	dd00      	ble.n	16534 <_dtoa_r+0x8d8>
   16532:	e282      	b.n	16a3a <_dtoa_r+0xdde>
   16534:	4669      	mov	r1, sp
   16536:	4652      	mov	r2, sl
   16538:	4653      	mov	r3, sl
   1653a:	7c09      	ldrb	r1, [r1, #16]
   1653c:	1c5c      	adds	r4, r3, #1
   1653e:	7011      	strb	r1, [r2, #0]
   16540:	9a08      	ldr	r2, [sp, #32]
   16542:	4552      	cmp	r2, sl
   16544:	d100      	bne.n	16548 <_dtoa_r+0x8ec>
   16546:	e28a      	b.n	16a5e <_dtoa_r+0xe02>
   16548:	0031      	movs	r1, r6
   1654a:	2300      	movs	r3, #0
   1654c:	220a      	movs	r2, #10
   1654e:	0038      	movs	r0, r7
   16550:	f001 fb98 	bl	17c84 <__multadd>
   16554:	2300      	movs	r3, #0
   16556:	0006      	movs	r6, r0
   16558:	220a      	movs	r2, #10
   1655a:	0029      	movs	r1, r5
   1655c:	0038      	movs	r0, r7
   1655e:	4545      	cmp	r5, r8
   16560:	d100      	bne.n	16564 <_dtoa_r+0x908>
   16562:	e0e1      	b.n	16728 <_dtoa_r+0xacc>
   16564:	f001 fb8e 	bl	17c84 <__multadd>
   16568:	4641      	mov	r1, r8
   1656a:	0005      	movs	r5, r0
   1656c:	2300      	movs	r3, #0
   1656e:	220a      	movs	r2, #10
   16570:	0038      	movs	r0, r7
   16572:	f001 fb87 	bl	17c84 <__multadd>
   16576:	46a2      	mov	sl, r4
   16578:	4680      	mov	r8, r0
   1657a:	e7a3      	b.n	164c4 <_dtoa_r+0x868>
   1657c:	201c      	movs	r0, #28
   1657e:	9b06      	ldr	r3, [sp, #24]
   16580:	469c      	mov	ip, r3
   16582:	4484      	add	ip, r0
   16584:	4663      	mov	r3, ip
   16586:	9306      	str	r3, [sp, #24]
   16588:	9b08      	ldr	r3, [sp, #32]
   1658a:	469c      	mov	ip, r3
   1658c:	4484      	add	ip, r0
   1658e:	4663      	mov	r3, ip
   16590:	9308      	str	r3, [sp, #32]
   16592:	9b04      	ldr	r3, [sp, #16]
   16594:	469c      	mov	ip, r3
   16596:	4484      	add	ip, r0
   16598:	4663      	mov	r3, ip
   1659a:	9304      	str	r3, [sp, #16]
   1659c:	e754      	b.n	16448 <_dtoa_r+0x7ec>
   1659e:	4649      	mov	r1, r9
   165a0:	4658      	mov	r0, fp
   165a2:	f001 fd71 	bl	18088 <__mcmp>
   165a6:	2800      	cmp	r0, #0
   165a8:	db00      	blt.n	165ac <_dtoa_r+0x950>
   165aa:	e763      	b.n	16474 <_dtoa_r+0x818>
   165ac:	9b03      	ldr	r3, [sp, #12]
   165ae:	4659      	mov	r1, fp
   165b0:	3b01      	subs	r3, #1
   165b2:	9303      	str	r3, [sp, #12]
   165b4:	220a      	movs	r2, #10
   165b6:	2300      	movs	r3, #0
   165b8:	4650      	mov	r0, sl
   165ba:	f001 fb63 	bl	17c84 <__multadd>
   165be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   165c0:	4683      	mov	fp, r0
   165c2:	2b00      	cmp	r3, #0
   165c4:	d000      	beq.n	165c8 <_dtoa_r+0x96c>
   165c6:	e2ca      	b.n	16b5e <_dtoa_r+0xf02>
   165c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   165ca:	2b00      	cmp	r3, #0
   165cc:	dc00      	bgt.n	165d0 <_dtoa_r+0x974>
   165ce:	e2d8      	b.n	16b82 <_dtoa_r+0xf26>
   165d0:	9307      	str	r3, [sp, #28]
   165d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   165d4:	465d      	mov	r5, fp
   165d6:	2400      	movs	r4, #0
   165d8:	9f07      	ldr	r7, [sp, #28]
   165da:	469b      	mov	fp, r3
   165dc:	e006      	b.n	165ec <_dtoa_r+0x990>
   165de:	0029      	movs	r1, r5
   165e0:	2300      	movs	r3, #0
   165e2:	220a      	movs	r2, #10
   165e4:	4650      	mov	r0, sl
   165e6:	f001 fb4d 	bl	17c84 <__multadd>
   165ea:	0005      	movs	r5, r0
   165ec:	4649      	mov	r1, r9
   165ee:	0028      	movs	r0, r5
   165f0:	f7ff fa8a 	bl	15b08 <quorem>
   165f4:	465b      	mov	r3, fp
   165f6:	3030      	adds	r0, #48	; 0x30
   165f8:	5518      	strb	r0, [r3, r4]
   165fa:	3401      	adds	r4, #1
   165fc:	42bc      	cmp	r4, r7
   165fe:	dbee      	blt.n	165de <_dtoa_r+0x982>
   16600:	46ab      	mov	fp, r5
   16602:	0006      	movs	r6, r0
   16604:	9c07      	ldr	r4, [sp, #28]
   16606:	2c00      	cmp	r4, #0
   16608:	dc00      	bgt.n	1660c <_dtoa_r+0x9b0>
   1660a:	e237      	b.n	16a7c <_dtoa_r+0xe20>
   1660c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1660e:	2700      	movs	r7, #0
   16610:	469c      	mov	ip, r3
   16612:	4464      	add	r4, ip
   16614:	4659      	mov	r1, fp
   16616:	2201      	movs	r2, #1
   16618:	4650      	mov	r0, sl
   1661a:	f001 fcd5 	bl	17fc8 <__lshift>
   1661e:	4649      	mov	r1, r9
   16620:	4683      	mov	fp, r0
   16622:	f001 fd31 	bl	18088 <__mcmp>
   16626:	2800      	cmp	r0, #0
   16628:	dc00      	bgt.n	1662c <_dtoa_r+0x9d0>
   1662a:	e144      	b.n	168b6 <_dtoa_r+0xc5a>
   1662c:	1e65      	subs	r5, r4, #1
   1662e:	782b      	ldrb	r3, [r5, #0]
   16630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   16632:	e006      	b.n	16642 <_dtoa_r+0x9e6>
   16634:	4295      	cmp	r5, r2
   16636:	d100      	bne.n	1663a <_dtoa_r+0x9de>
   16638:	e0b1      	b.n	1679e <_dtoa_r+0xb42>
   1663a:	3c02      	subs	r4, #2
   1663c:	7823      	ldrb	r3, [r4, #0]
   1663e:	002c      	movs	r4, r5
   16640:	3d01      	subs	r5, #1
   16642:	2b39      	cmp	r3, #57	; 0x39
   16644:	d0f6      	beq.n	16634 <_dtoa_r+0x9d8>
   16646:	3301      	adds	r3, #1
   16648:	702b      	strb	r3, [r5, #0]
   1664a:	4649      	mov	r1, r9
   1664c:	4650      	mov	r0, sl
   1664e:	f001 fb0f 	bl	17c70 <_Bfree>
   16652:	4643      	mov	r3, r8
   16654:	2b00      	cmp	r3, #0
   16656:	d100      	bne.n	1665a <_dtoa_r+0x9fe>
   16658:	e52f      	b.n	160ba <_dtoa_r+0x45e>
   1665a:	2f00      	cmp	r7, #0
   1665c:	d005      	beq.n	1666a <_dtoa_r+0xa0e>
   1665e:	4547      	cmp	r7, r8
   16660:	d003      	beq.n	1666a <_dtoa_r+0xa0e>
   16662:	0039      	movs	r1, r7
   16664:	4650      	mov	r0, sl
   16666:	f001 fb03 	bl	17c70 <_Bfree>
   1666a:	4641      	mov	r1, r8
   1666c:	4650      	mov	r0, sl
   1666e:	f001 faff 	bl	17c70 <_Bfree>
   16672:	e522      	b.n	160ba <_dtoa_r+0x45e>
   16674:	0013      	movs	r3, r2
   16676:	e675      	b.n	16364 <_dtoa_r+0x708>
   16678:	2e00      	cmp	r6, #0
   1667a:	d000      	beq.n	1667e <_dtoa_r+0xa22>
   1667c:	e6ab      	b.n	163d6 <_dtoa_r+0x77a>
   1667e:	033b      	lsls	r3, r7, #12
   16680:	2400      	movs	r4, #0
   16682:	2b00      	cmp	r3, #0
   16684:	d000      	beq.n	16688 <_dtoa_r+0xa2c>
   16686:	e6bf      	b.n	16408 <_dtoa_r+0x7ac>
   16688:	4bba      	ldr	r3, [pc, #744]	; (16974 <_dtoa_r+0xd18>)
   1668a:	423b      	tst	r3, r7
   1668c:	d100      	bne.n	16690 <_dtoa_r+0xa34>
   1668e:	e6bb      	b.n	16408 <_dtoa_r+0x7ac>
   16690:	9b06      	ldr	r3, [sp, #24]
   16692:	3401      	adds	r4, #1
   16694:	3301      	adds	r3, #1
   16696:	9306      	str	r3, [sp, #24]
   16698:	9b04      	ldr	r3, [sp, #16]
   1669a:	3301      	adds	r3, #1
   1669c:	9304      	str	r3, [sp, #16]
   1669e:	e6b3      	b.n	16408 <_dtoa_r+0x7ac>
   166a0:	2301      	movs	r3, #1
   166a2:	930b      	str	r3, [sp, #44]	; 0x2c
   166a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   166a6:	2b00      	cmp	r3, #0
   166a8:	dc00      	bgt.n	166ac <_dtoa_r+0xa50>
   166aa:	e0d1      	b.n	16850 <_dtoa_r+0xbf4>
   166ac:	001d      	movs	r5, r3
   166ae:	4698      	mov	r8, r3
   166b0:	930e      	str	r3, [sp, #56]	; 0x38
   166b2:	9307      	str	r3, [sp, #28]
   166b4:	f7ff fbc8 	bl	15e48 <_dtoa_r+0x1ec>
   166b8:	9b07      	ldr	r3, [sp, #28]
   166ba:	2b00      	cmp	r3, #0
   166bc:	dd00      	ble.n	166c0 <_dtoa_r+0xa64>
   166be:	e553      	b.n	16168 <_dtoa_r+0x50c>
   166c0:	d000      	beq.n	166c4 <_dtoa_r+0xa68>
   166c2:	e0ad      	b.n	16820 <_dtoa_r+0xbc4>
   166c4:	9804      	ldr	r0, [sp, #16]
   166c6:	9905      	ldr	r1, [sp, #20]
   166c8:	2200      	movs	r2, #0
   166ca:	4bab      	ldr	r3, [pc, #684]	; (16978 <_dtoa_r+0xd1c>)
   166cc:	f7fc fbc8 	bl	12e60 <__aeabi_dmul>
   166d0:	003b      	movs	r3, r7
   166d2:	0032      	movs	r2, r6
   166d4:	f7fd fa94 	bl	13c00 <__aeabi_dcmpge>
   166d8:	2300      	movs	r3, #0
   166da:	4699      	mov	r9, r3
   166dc:	4698      	mov	r8, r3
   166de:	2800      	cmp	r0, #0
   166e0:	d055      	beq.n	1678e <_dtoa_r+0xb32>
   166e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   166e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   166e6:	43db      	mvns	r3, r3
   166e8:	9303      	str	r3, [sp, #12]
   166ea:	4649      	mov	r1, r9
   166ec:	4650      	mov	r0, sl
   166ee:	f001 fabf 	bl	17c70 <_Bfree>
   166f2:	4643      	mov	r3, r8
   166f4:	2b00      	cmp	r3, #0
   166f6:	d100      	bne.n	166fa <_dtoa_r+0xa9e>
   166f8:	e4df      	b.n	160ba <_dtoa_r+0x45e>
   166fa:	e7b6      	b.n	1666a <_dtoa_r+0xa0e>
   166fc:	464a      	mov	r2, r9
   166fe:	4659      	mov	r1, fp
   16700:	4650      	mov	r0, sl
   16702:	f001 fc01 	bl	17f08 <__pow5mult>
   16706:	4683      	mov	fp, r0
   16708:	e653      	b.n	163b2 <_dtoa_r+0x756>
   1670a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1670c:	2a00      	cmp	r2, #0
   1670e:	d100      	bne.n	16712 <_dtoa_r+0xab6>
   16710:	e1b6      	b.n	16a80 <_dtoa_r+0xe24>
   16712:	4a9a      	ldr	r2, [pc, #616]	; (1697c <_dtoa_r+0xd20>)
   16714:	464c      	mov	r4, r9
   16716:	4694      	mov	ip, r2
   16718:	9a06      	ldr	r2, [sp, #24]
   1671a:	4463      	add	r3, ip
   1671c:	9208      	str	r2, [sp, #32]
   1671e:	e5d5      	b.n	162cc <_dtoa_r+0x670>
   16720:	2e00      	cmp	r6, #0
   16722:	d000      	beq.n	16726 <_dtoa_r+0xaca>
   16724:	e670      	b.n	16408 <_dtoa_r+0x7ac>
   16726:	e7aa      	b.n	1667e <_dtoa_r+0xa22>
   16728:	f001 faac 	bl	17c84 <__multadd>
   1672c:	46a2      	mov	sl, r4
   1672e:	0005      	movs	r5, r0
   16730:	4680      	mov	r8, r0
   16732:	e6c7      	b.n	164c4 <_dtoa_r+0x868>
   16734:	2301      	movs	r3, #1
   16736:	469b      	mov	fp, r3
   16738:	e6e2      	b.n	16500 <_dtoa_r+0x8a4>
   1673a:	2300      	movs	r3, #0
   1673c:	930b      	str	r3, [sp, #44]	; 0x2c
   1673e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16740:	2b02      	cmp	r3, #2
   16742:	d0af      	beq.n	166a4 <_dtoa_r+0xa48>
   16744:	2400      	movs	r4, #0
   16746:	4653      	mov	r3, sl
   16748:	0021      	movs	r1, r4
   1674a:	645c      	str	r4, [r3, #68]	; 0x44
   1674c:	4650      	mov	r0, sl
   1674e:	f001 fa67 	bl	17c20 <_Balloc>
   16752:	4653      	mov	r3, sl
   16754:	6418      	str	r0, [r3, #64]	; 0x40
   16756:	2301      	movs	r3, #1
   16758:	425b      	negs	r3, r3
   1675a:	9307      	str	r3, [sp, #28]
   1675c:	930e      	str	r3, [sp, #56]	; 0x38
   1675e:	3302      	adds	r3, #2
   16760:	900a      	str	r0, [sp, #40]	; 0x28
   16762:	9423      	str	r4, [sp, #140]	; 0x8c
   16764:	930b      	str	r3, [sp, #44]	; 0x2c
   16766:	e4ec      	b.n	16142 <_dtoa_r+0x4e6>
   16768:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1676a:	2b02      	cmp	r3, #2
   1676c:	dc00      	bgt.n	16770 <_dtoa_r+0xb14>
   1676e:	e685      	b.n	1647c <_dtoa_r+0x820>
   16770:	9b07      	ldr	r3, [sp, #28]
   16772:	2b00      	cmp	r3, #0
   16774:	d1b5      	bne.n	166e2 <_dtoa_r+0xa86>
   16776:	4649      	mov	r1, r9
   16778:	2205      	movs	r2, #5
   1677a:	4650      	mov	r0, sl
   1677c:	f001 fa82 	bl	17c84 <__multadd>
   16780:	4681      	mov	r9, r0
   16782:	0001      	movs	r1, r0
   16784:	4658      	mov	r0, fp
   16786:	f001 fc7f 	bl	18088 <__mcmp>
   1678a:	2800      	cmp	r0, #0
   1678c:	dda9      	ble.n	166e2 <_dtoa_r+0xa86>
   1678e:	2331      	movs	r3, #49	; 0x31
   16790:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   16792:	7013      	strb	r3, [r2, #0]
   16794:	9b03      	ldr	r3, [sp, #12]
   16796:	1c54      	adds	r4, r2, #1
   16798:	3301      	adds	r3, #1
   1679a:	9303      	str	r3, [sp, #12]
   1679c:	e7a5      	b.n	166ea <_dtoa_r+0xa8e>
   1679e:	9b03      	ldr	r3, [sp, #12]
   167a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   167a2:	3301      	adds	r3, #1
   167a4:	9303      	str	r3, [sp, #12]
   167a6:	2331      	movs	r3, #49	; 0x31
   167a8:	7013      	strb	r3, [r2, #0]
   167aa:	e74e      	b.n	1664a <_dtoa_r+0x9ee>
   167ac:	2300      	movs	r3, #0
   167ae:	930b      	str	r3, [sp, #44]	; 0x2c
   167b0:	f7ff fb3d 	bl	15e2e <_dtoa_r+0x1d2>
   167b4:	9b06      	ldr	r3, [sp, #24]
   167b6:	465c      	mov	r4, fp
   167b8:	469b      	mov	fp, r3
   167ba:	9b07      	ldr	r3, [sp, #28]
   167bc:	469a      	mov	sl, r3
   167be:	e47c      	b.n	160ba <_dtoa_r+0x45e>
   167c0:	4640      	mov	r0, r8
   167c2:	f002 fab5 	bl	18d30 <__aeabi_i2d>
   167c6:	0032      	movs	r2, r6
   167c8:	003b      	movs	r3, r7
   167ca:	f7fc fb49 	bl	12e60 <__aeabi_dmul>
   167ce:	2200      	movs	r2, #0
   167d0:	4b6b      	ldr	r3, [pc, #428]	; (16980 <_dtoa_r+0xd24>)
   167d2:	f7fb fd01 	bl	121d8 <__aeabi_dadd>
   167d6:	4a6b      	ldr	r2, [pc, #428]	; (16984 <_dtoa_r+0xd28>)
   167d8:	000b      	movs	r3, r1
   167da:	4694      	mov	ip, r2
   167dc:	4463      	add	r3, ip
   167de:	9008      	str	r0, [sp, #32]
   167e0:	9109      	str	r1, [sp, #36]	; 0x24
   167e2:	9309      	str	r3, [sp, #36]	; 0x24
   167e4:	2200      	movs	r2, #0
   167e6:	4b64      	ldr	r3, [pc, #400]	; (16978 <_dtoa_r+0xd1c>)
   167e8:	0030      	movs	r0, r6
   167ea:	0039      	movs	r1, r7
   167ec:	f7fc fdb8 	bl	13360 <__aeabi_dsub>
   167f0:	9e08      	ldr	r6, [sp, #32]
   167f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
   167f4:	0032      	movs	r2, r6
   167f6:	003b      	movs	r3, r7
   167f8:	0004      	movs	r4, r0
   167fa:	000d      	movs	r5, r1
   167fc:	f7fd f9f6 	bl	13bec <__aeabi_dcmpgt>
   16800:	2800      	cmp	r0, #0
   16802:	d000      	beq.n	16806 <_dtoa_r+0xbaa>
   16804:	e0b2      	b.n	1696c <_dtoa_r+0xd10>
   16806:	2080      	movs	r0, #128	; 0x80
   16808:	0600      	lsls	r0, r0, #24
   1680a:	4684      	mov	ip, r0
   1680c:	0039      	movs	r1, r7
   1680e:	4461      	add	r1, ip
   16810:	000b      	movs	r3, r1
   16812:	0032      	movs	r2, r6
   16814:	0020      	movs	r0, r4
   16816:	0029      	movs	r1, r5
   16818:	f7fd f9d4 	bl	13bc4 <__aeabi_dcmplt>
   1681c:	2800      	cmp	r0, #0
   1681e:	d057      	beq.n	168d0 <_dtoa_r+0xc74>
   16820:	2300      	movs	r3, #0
   16822:	4699      	mov	r9, r3
   16824:	4698      	mov	r8, r3
   16826:	e75c      	b.n	166e2 <_dtoa_r+0xa86>
   16828:	980a      	ldr	r0, [sp, #40]	; 0x28
   1682a:	f7ff fa4c 	bl	15cc6 <_dtoa_r+0x6a>
   1682e:	1ae2      	subs	r2, r4, r3
   16830:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16832:	46a1      	mov	r9, r4
   16834:	469c      	mov	ip, r3
   16836:	4494      	add	ip, r2
   16838:	4663      	mov	r3, ip
   1683a:	2400      	movs	r4, #0
   1683c:	930d      	str	r3, [sp, #52]	; 0x34
   1683e:	e53e      	b.n	162be <_dtoa_r+0x662>
   16840:	9a10      	ldr	r2, [sp, #64]	; 0x40
   16842:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16844:	9208      	str	r2, [sp, #32]
   16846:	9309      	str	r3, [sp, #36]	; 0x24
   16848:	2302      	movs	r3, #2
   1684a:	4698      	mov	r8, r3
   1684c:	f7ff fb3a 	bl	15ec4 <_dtoa_r+0x268>
   16850:	2300      	movs	r3, #0
   16852:	4652      	mov	r2, sl
   16854:	2100      	movs	r1, #0
   16856:	6453      	str	r3, [r2, #68]	; 0x44
   16858:	4650      	mov	r0, sl
   1685a:	f001 f9e1 	bl	17c20 <_Balloc>
   1685e:	4653      	mov	r3, sl
   16860:	6418      	str	r0, [r3, #64]	; 0x40
   16862:	2301      	movs	r3, #1
   16864:	900a      	str	r0, [sp, #40]	; 0x28
   16866:	9307      	str	r3, [sp, #28]
   16868:	9323      	str	r3, [sp, #140]	; 0x8c
   1686a:	930e      	str	r3, [sp, #56]	; 0x38
   1686c:	f7ff fb07 	bl	15e7e <_dtoa_r+0x222>
   16870:	4643      	mov	r3, r8
   16872:	930c      	str	r3, [sp, #48]	; 0x30
   16874:	465b      	mov	r3, fp
   16876:	9a06      	ldr	r2, [sp, #24]
   16878:	46a8      	mov	r8, r5
   1687a:	46b3      	mov	fp, r6
   1687c:	4655      	mov	r5, sl
   1687e:	9e04      	ldr	r6, [sp, #16]
   16880:	4691      	mov	r9, r2
   16882:	46ba      	mov	sl, r7
   16884:	2b00      	cmp	r3, #0
   16886:	dd10      	ble.n	168aa <_dtoa_r+0xc4e>
   16888:	4659      	mov	r1, fp
   1688a:	2201      	movs	r2, #1
   1688c:	0038      	movs	r0, r7
   1688e:	f001 fb9b 	bl	17fc8 <__lshift>
   16892:	4649      	mov	r1, r9
   16894:	4683      	mov	fp, r0
   16896:	f001 fbf7 	bl	18088 <__mcmp>
   1689a:	2800      	cmp	r0, #0
   1689c:	dc00      	bgt.n	168a0 <_dtoa_r+0xc44>
   1689e:	e157      	b.n	16b50 <_dtoa_r+0xef4>
   168a0:	2e39      	cmp	r6, #57	; 0x39
   168a2:	d100      	bne.n	168a6 <_dtoa_r+0xc4a>
   168a4:	e122      	b.n	16aec <_dtoa_r+0xe90>
   168a6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   168a8:	3631      	adds	r6, #49	; 0x31
   168aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   168ac:	4647      	mov	r7, r8
   168ae:	1c6c      	adds	r4, r5, #1
   168b0:	702e      	strb	r6, [r5, #0]
   168b2:	4698      	mov	r8, r3
   168b4:	e6c9      	b.n	1664a <_dtoa_r+0x9ee>
   168b6:	2800      	cmp	r0, #0
   168b8:	d103      	bne.n	168c2 <_dtoa_r+0xc66>
   168ba:	07f3      	lsls	r3, r6, #31
   168bc:	d501      	bpl.n	168c2 <_dtoa_r+0xc66>
   168be:	e6b5      	b.n	1662c <_dtoa_r+0x9d0>
   168c0:	001c      	movs	r4, r3
   168c2:	1e63      	subs	r3, r4, #1
   168c4:	781a      	ldrb	r2, [r3, #0]
   168c6:	2a30      	cmp	r2, #48	; 0x30
   168c8:	d0fa      	beq.n	168c0 <_dtoa_r+0xc64>
   168ca:	e6be      	b.n	1664a <_dtoa_r+0x9ee>
   168cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   168ce:	4699      	mov	r9, r3
   168d0:	9e10      	ldr	r6, [sp, #64]	; 0x40
   168d2:	9f11      	ldr	r7, [sp, #68]	; 0x44
   168d4:	e435      	b.n	16142 <_dtoa_r+0x4e6>
   168d6:	2501      	movs	r5, #1
   168d8:	f7ff fab4 	bl	15e44 <_dtoa_r+0x1e8>
   168dc:	9b03      	ldr	r3, [sp, #12]
   168de:	2b00      	cmp	r3, #0
   168e0:	d100      	bne.n	168e4 <_dtoa_r+0xc88>
   168e2:	e0d4      	b.n	16a8e <_dtoa_r+0xe32>
   168e4:	9810      	ldr	r0, [sp, #64]	; 0x40
   168e6:	9911      	ldr	r1, [sp, #68]	; 0x44
   168e8:	425c      	negs	r4, r3
   168ea:	230f      	movs	r3, #15
   168ec:	4a26      	ldr	r2, [pc, #152]	; (16988 <_dtoa_r+0xd2c>)
   168ee:	4023      	ands	r3, r4
   168f0:	00db      	lsls	r3, r3, #3
   168f2:	18d3      	adds	r3, r2, r3
   168f4:	681a      	ldr	r2, [r3, #0]
   168f6:	685b      	ldr	r3, [r3, #4]
   168f8:	f7fc fab2 	bl	12e60 <__aeabi_dmul>
   168fc:	1124      	asrs	r4, r4, #4
   168fe:	0006      	movs	r6, r0
   16900:	000f      	movs	r7, r1
   16902:	2c00      	cmp	r4, #0
   16904:	d100      	bne.n	16908 <_dtoa_r+0xcac>
   16906:	e149      	b.n	16b9c <_dtoa_r+0xf40>
   16908:	2302      	movs	r3, #2
   1690a:	4698      	mov	r8, r3
   1690c:	4d1f      	ldr	r5, [pc, #124]	; (1698c <_dtoa_r+0xd30>)
   1690e:	2301      	movs	r3, #1
   16910:	4223      	tst	r3, r4
   16912:	d009      	beq.n	16928 <_dtoa_r+0xccc>
   16914:	469c      	mov	ip, r3
   16916:	682a      	ldr	r2, [r5, #0]
   16918:	686b      	ldr	r3, [r5, #4]
   1691a:	0030      	movs	r0, r6
   1691c:	0039      	movs	r1, r7
   1691e:	44e0      	add	r8, ip
   16920:	f7fc fa9e 	bl	12e60 <__aeabi_dmul>
   16924:	0006      	movs	r6, r0
   16926:	000f      	movs	r7, r1
   16928:	1064      	asrs	r4, r4, #1
   1692a:	3508      	adds	r5, #8
   1692c:	2c00      	cmp	r4, #0
   1692e:	d1ee      	bne.n	1690e <_dtoa_r+0xcb2>
   16930:	f7ff fae4 	bl	15efc <_dtoa_r+0x2a0>
   16934:	9b03      	ldr	r3, [sp, #12]
   16936:	2730      	movs	r7, #48	; 0x30
   16938:	3301      	adds	r3, #1
   1693a:	9303      	str	r3, [sp, #12]
   1693c:	2330      	movs	r3, #48	; 0x30
   1693e:	702b      	strb	r3, [r5, #0]
   16940:	e4ac      	b.n	1629c <_dtoa_r+0x640>
   16942:	6859      	ldr	r1, [r3, #4]
   16944:	4650      	mov	r0, sl
   16946:	f001 f96b 	bl	17c20 <_Balloc>
   1694a:	4643      	mov	r3, r8
   1694c:	4641      	mov	r1, r8
   1694e:	0004      	movs	r4, r0
   16950:	691b      	ldr	r3, [r3, #16]
   16952:	310c      	adds	r1, #12
   16954:	1c9a      	adds	r2, r3, #2
   16956:	0092      	lsls	r2, r2, #2
   16958:	300c      	adds	r0, #12
   1695a:	f7fd fa7f 	bl	13e5c <memcpy>
   1695e:	2201      	movs	r2, #1
   16960:	0021      	movs	r1, r4
   16962:	4650      	mov	r0, sl
   16964:	f001 fb30 	bl	17fc8 <__lshift>
   16968:	900c      	str	r0, [sp, #48]	; 0x30
   1696a:	e599      	b.n	164a0 <_dtoa_r+0x844>
   1696c:	2300      	movs	r3, #0
   1696e:	4699      	mov	r9, r3
   16970:	4698      	mov	r8, r3
   16972:	e70c      	b.n	1678e <_dtoa_r+0xb32>
   16974:	7ff00000 	.word	0x7ff00000
   16978:	40140000 	.word	0x40140000
   1697c:	00000433 	.word	0x00000433
   16980:	401c0000 	.word	0x401c0000
   16984:	fcc00000 	.word	0xfcc00000
   16988:	00019ba0 	.word	0x00019ba0
   1698c:	00019b78 	.word	0x00019b78
   16990:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16992:	498f      	ldr	r1, [pc, #572]	; (16bd0 <_dtoa_r+0xf74>)
   16994:	3b01      	subs	r3, #1
   16996:	00db      	lsls	r3, r3, #3
   16998:	18c9      	adds	r1, r1, r3
   1699a:	6808      	ldr	r0, [r1, #0]
   1699c:	6849      	ldr	r1, [r1, #4]
   1699e:	9a08      	ldr	r2, [sp, #32]
   169a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   169a2:	f7fc fa5d 	bl	12e60 <__aeabi_dmul>
   169a6:	9014      	str	r0, [sp, #80]	; 0x50
   169a8:	9115      	str	r1, [sp, #84]	; 0x54
   169aa:	0039      	movs	r1, r7
   169ac:	0030      	movs	r0, r6
   169ae:	f7fc ffed 	bl	1398c <__aeabi_d2iz>
   169b2:	0005      	movs	r5, r0
   169b4:	f002 f9bc 	bl	18d30 <__aeabi_i2d>
   169b8:	0002      	movs	r2, r0
   169ba:	000b      	movs	r3, r1
   169bc:	0030      	movs	r0, r6
   169be:	0039      	movs	r1, r7
   169c0:	f7fc fcce 	bl	13360 <__aeabi_dsub>
   169c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   169c6:	9008      	str	r0, [sp, #32]
   169c8:	9109      	str	r1, [sp, #36]	; 0x24
   169ca:	990a      	ldr	r1, [sp, #40]	; 0x28
   169cc:	001a      	movs	r2, r3
   169ce:	468c      	mov	ip, r1
   169d0:	3530      	adds	r5, #48	; 0x30
   169d2:	4462      	add	r2, ip
   169d4:	1c4c      	adds	r4, r1, #1
   169d6:	700d      	strb	r5, [r1, #0]
   169d8:	4690      	mov	r8, r2
   169da:	2b01      	cmp	r3, #1
   169dc:	d01b      	beq.n	16a16 <_dtoa_r+0xdba>
   169de:	9808      	ldr	r0, [sp, #32]
   169e0:	9909      	ldr	r1, [sp, #36]	; 0x24
   169e2:	0025      	movs	r5, r4
   169e4:	2200      	movs	r2, #0
   169e6:	4b7b      	ldr	r3, [pc, #492]	; (16bd4 <_dtoa_r+0xf78>)
   169e8:	f7fc fa3a 	bl	12e60 <__aeabi_dmul>
   169ec:	000f      	movs	r7, r1
   169ee:	0006      	movs	r6, r0
   169f0:	f7fc ffcc 	bl	1398c <__aeabi_d2iz>
   169f4:	0004      	movs	r4, r0
   169f6:	f002 f99b 	bl	18d30 <__aeabi_i2d>
   169fa:	3430      	adds	r4, #48	; 0x30
   169fc:	0002      	movs	r2, r0
   169fe:	000b      	movs	r3, r1
   16a00:	0030      	movs	r0, r6
   16a02:	0039      	movs	r1, r7
   16a04:	f7fc fcac 	bl	13360 <__aeabi_dsub>
   16a08:	702c      	strb	r4, [r5, #0]
   16a0a:	3501      	adds	r5, #1
   16a0c:	45a8      	cmp	r8, r5
   16a0e:	d1e9      	bne.n	169e4 <_dtoa_r+0xd88>
   16a10:	4644      	mov	r4, r8
   16a12:	9008      	str	r0, [sp, #32]
   16a14:	9109      	str	r1, [sp, #36]	; 0x24
   16a16:	9814      	ldr	r0, [sp, #80]	; 0x50
   16a18:	9915      	ldr	r1, [sp, #84]	; 0x54
   16a1a:	2200      	movs	r2, #0
   16a1c:	4b6e      	ldr	r3, [pc, #440]	; (16bd8 <_dtoa_r+0xf7c>)
   16a1e:	f7fb fbdb 	bl	121d8 <__aeabi_dadd>
   16a22:	9a08      	ldr	r2, [sp, #32]
   16a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16a26:	f7fd f8cd 	bl	13bc4 <__aeabi_dcmplt>
   16a2a:	2800      	cmp	r0, #0
   16a2c:	d067      	beq.n	16afe <_dtoa_r+0xea2>
   16a2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   16a30:	1e65      	subs	r5, r4, #1
   16a32:	9303      	str	r3, [sp, #12]
   16a34:	782f      	ldrb	r7, [r5, #0]
   16a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16a38:	e42e      	b.n	16298 <_dtoa_r+0x63c>
   16a3a:	4643      	mov	r3, r8
   16a3c:	46b3      	mov	fp, r6
   16a3e:	930c      	str	r3, [sp, #48]	; 0x30
   16a40:	9e04      	ldr	r6, [sp, #16]
   16a42:	9b06      	ldr	r3, [sp, #24]
   16a44:	46a8      	mov	r8, r5
   16a46:	4699      	mov	r9, r3
   16a48:	4655      	mov	r5, sl
   16a4a:	46ba      	mov	sl, r7
   16a4c:	2e39      	cmp	r6, #57	; 0x39
   16a4e:	d04d      	beq.n	16aec <_dtoa_r+0xe90>
   16a50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16a52:	3601      	adds	r6, #1
   16a54:	4647      	mov	r7, r8
   16a56:	1c6c      	adds	r4, r5, #1
   16a58:	702e      	strb	r6, [r5, #0]
   16a5a:	4698      	mov	r8, r3
   16a5c:	e5f5      	b.n	1664a <_dtoa_r+0x9ee>
   16a5e:	4642      	mov	r2, r8
   16a60:	9b06      	ldr	r3, [sp, #24]
   16a62:	46b3      	mov	fp, r6
   16a64:	46ba      	mov	sl, r7
   16a66:	9e04      	ldr	r6, [sp, #16]
   16a68:	4699      	mov	r9, r3
   16a6a:	002f      	movs	r7, r5
   16a6c:	4690      	mov	r8, r2
   16a6e:	e5d1      	b.n	16614 <_dtoa_r+0x9b8>
   16a70:	9b06      	ldr	r3, [sp, #24]
   16a72:	9a07      	ldr	r2, [sp, #28]
   16a74:	1a9b      	subs	r3, r3, r2
   16a76:	9308      	str	r3, [sp, #32]
   16a78:	2300      	movs	r3, #0
   16a7a:	e427      	b.n	162cc <_dtoa_r+0x670>
   16a7c:	2401      	movs	r4, #1
   16a7e:	e5c5      	b.n	1660c <_dtoa_r+0x9b0>
   16a80:	2336      	movs	r3, #54	; 0x36
   16a82:	9a16      	ldr	r2, [sp, #88]	; 0x58
   16a84:	464c      	mov	r4, r9
   16a86:	1a9b      	subs	r3, r3, r2
   16a88:	9a06      	ldr	r2, [sp, #24]
   16a8a:	9208      	str	r2, [sp, #32]
   16a8c:	e41e      	b.n	162cc <_dtoa_r+0x670>
   16a8e:	2302      	movs	r3, #2
   16a90:	9e10      	ldr	r6, [sp, #64]	; 0x40
   16a92:	9f11      	ldr	r7, [sp, #68]	; 0x44
   16a94:	4698      	mov	r8, r3
   16a96:	f7ff fa31 	bl	15efc <_dtoa_r+0x2a0>
   16a9a:	9b07      	ldr	r3, [sp, #28]
   16a9c:	2b00      	cmp	r3, #0
   16a9e:	d100      	bne.n	16aa2 <_dtoa_r+0xe46>
   16aa0:	e68e      	b.n	167c0 <_dtoa_r+0xb64>
   16aa2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   16aa4:	2c00      	cmp	r4, #0
   16aa6:	dc00      	bgt.n	16aaa <_dtoa_r+0xe4e>
   16aa8:	e712      	b.n	168d0 <_dtoa_r+0xc74>
   16aaa:	9b03      	ldr	r3, [sp, #12]
   16aac:	2200      	movs	r2, #0
   16aae:	3b01      	subs	r3, #1
   16ab0:	9313      	str	r3, [sp, #76]	; 0x4c
   16ab2:	0030      	movs	r0, r6
   16ab4:	4b47      	ldr	r3, [pc, #284]	; (16bd4 <_dtoa_r+0xf78>)
   16ab6:	0039      	movs	r1, r7
   16ab8:	f7fc f9d2 	bl	12e60 <__aeabi_dmul>
   16abc:	0006      	movs	r6, r0
   16abe:	4640      	mov	r0, r8
   16ac0:	000f      	movs	r7, r1
   16ac2:	3001      	adds	r0, #1
   16ac4:	f002 f934 	bl	18d30 <__aeabi_i2d>
   16ac8:	0032      	movs	r2, r6
   16aca:	003b      	movs	r3, r7
   16acc:	f7fc f9c8 	bl	12e60 <__aeabi_dmul>
   16ad0:	2200      	movs	r2, #0
   16ad2:	4b42      	ldr	r3, [pc, #264]	; (16bdc <_dtoa_r+0xf80>)
   16ad4:	f7fb fb80 	bl	121d8 <__aeabi_dadd>
   16ad8:	4a41      	ldr	r2, [pc, #260]	; (16be0 <_dtoa_r+0xf84>)
   16ada:	000b      	movs	r3, r1
   16adc:	4694      	mov	ip, r2
   16ade:	4463      	add	r3, ip
   16ae0:	9008      	str	r0, [sp, #32]
   16ae2:	9109      	str	r1, [sp, #36]	; 0x24
   16ae4:	9412      	str	r4, [sp, #72]	; 0x48
   16ae6:	9309      	str	r3, [sp, #36]	; 0x24
   16ae8:	f7ff fa30 	bl	15f4c <_dtoa_r+0x2f0>
   16aec:	2339      	movs	r3, #57	; 0x39
   16aee:	702b      	strb	r3, [r5, #0]
   16af0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16af2:	4647      	mov	r7, r8
   16af4:	1c6c      	adds	r4, r5, #1
   16af6:	4698      	mov	r8, r3
   16af8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   16afa:	2339      	movs	r3, #57	; 0x39
   16afc:	e5a1      	b.n	16642 <_dtoa_r+0x9e6>
   16afe:	9a14      	ldr	r2, [sp, #80]	; 0x50
   16b00:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16b02:	2000      	movs	r0, #0
   16b04:	4934      	ldr	r1, [pc, #208]	; (16bd8 <_dtoa_r+0xf7c>)
   16b06:	f7fc fc2b 	bl	13360 <__aeabi_dsub>
   16b0a:	9a08      	ldr	r2, [sp, #32]
   16b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16b0e:	f7fd f86d 	bl	13bec <__aeabi_dcmpgt>
   16b12:	2800      	cmp	r0, #0
   16b14:	d101      	bne.n	16b1a <_dtoa_r+0xebe>
   16b16:	e6db      	b.n	168d0 <_dtoa_r+0xc74>
   16b18:	001c      	movs	r4, r3
   16b1a:	1e63      	subs	r3, r4, #1
   16b1c:	781a      	ldrb	r2, [r3, #0]
   16b1e:	2a30      	cmp	r2, #48	; 0x30
   16b20:	d0fa      	beq.n	16b18 <_dtoa_r+0xebc>
   16b22:	f7ff fac8 	bl	160b6 <_dtoa_r+0x45a>
   16b26:	4643      	mov	r3, r8
   16b28:	46b3      	mov	fp, r6
   16b2a:	930c      	str	r3, [sp, #48]	; 0x30
   16b2c:	9e04      	ldr	r6, [sp, #16]
   16b2e:	9b06      	ldr	r3, [sp, #24]
   16b30:	46a8      	mov	r8, r5
   16b32:	4699      	mov	r9, r3
   16b34:	4655      	mov	r5, sl
   16b36:	46ba      	mov	sl, r7
   16b38:	2e39      	cmp	r6, #57	; 0x39
   16b3a:	d0d7      	beq.n	16aec <_dtoa_r+0xe90>
   16b3c:	2c00      	cmp	r4, #0
   16b3e:	dd00      	ble.n	16b42 <_dtoa_r+0xee6>
   16b40:	e6b1      	b.n	168a6 <_dtoa_r+0xc4a>
   16b42:	e6b2      	b.n	168aa <_dtoa_r+0xc4e>
   16b44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   16b46:	464d      	mov	r5, r9
   16b48:	9203      	str	r2, [sp, #12]
   16b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16b4c:	f7ff fba4 	bl	16298 <_dtoa_r+0x63c>
   16b50:	2800      	cmp	r0, #0
   16b52:	d000      	beq.n	16b56 <_dtoa_r+0xefa>
   16b54:	e6a9      	b.n	168aa <_dtoa_r+0xc4e>
   16b56:	07f3      	lsls	r3, r6, #31
   16b58:	d400      	bmi.n	16b5c <_dtoa_r+0xf00>
   16b5a:	e6a6      	b.n	168aa <_dtoa_r+0xc4e>
   16b5c:	e6a0      	b.n	168a0 <_dtoa_r+0xc44>
   16b5e:	2300      	movs	r3, #0
   16b60:	4641      	mov	r1, r8
   16b62:	220a      	movs	r2, #10
   16b64:	4650      	mov	r0, sl
   16b66:	f001 f88d 	bl	17c84 <__multadd>
   16b6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16b6c:	4680      	mov	r8, r0
   16b6e:	2b00      	cmp	r3, #0
   16b70:	dd01      	ble.n	16b76 <_dtoa_r+0xf1a>
   16b72:	9307      	str	r3, [sp, #28]
   16b74:	e486      	b.n	16484 <_dtoa_r+0x828>
   16b76:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16b78:	2b02      	cmp	r3, #2
   16b7a:	dc1f      	bgt.n	16bbc <_dtoa_r+0xf60>
   16b7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16b7e:	9307      	str	r3, [sp, #28]
   16b80:	e480      	b.n	16484 <_dtoa_r+0x828>
   16b82:	9b22      	ldr	r3, [sp, #136]	; 0x88
   16b84:	2b02      	cmp	r3, #2
   16b86:	dc19      	bgt.n	16bbc <_dtoa_r+0xf60>
   16b88:	4649      	mov	r1, r9
   16b8a:	f7fe ffbd 	bl	15b08 <quorem>
   16b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16b90:	3030      	adds	r0, #48	; 0x30
   16b92:	7018      	strb	r0, [r3, #0]
   16b94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16b96:	0006      	movs	r6, r0
   16b98:	9307      	str	r3, [sp, #28]
   16b9a:	e533      	b.n	16604 <_dtoa_r+0x9a8>
   16b9c:	2302      	movs	r3, #2
   16b9e:	4698      	mov	r8, r3
   16ba0:	f7ff f9ac 	bl	15efc <_dtoa_r+0x2a0>
   16ba4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   16ba6:	9c14      	ldr	r4, [sp, #80]	; 0x50
   16ba8:	9303      	str	r3, [sp, #12]
   16baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16bac:	001d      	movs	r5, r3
   16bae:	f7ff fb73 	bl	16298 <_dtoa_r+0x63c>
   16bb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   16bb4:	9c14      	ldr	r4, [sp, #80]	; 0x50
   16bb6:	9303      	str	r3, [sp, #12]
   16bb8:	f7ff fa7f 	bl	160ba <_dtoa_r+0x45e>
   16bbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16bbe:	9307      	str	r3, [sp, #28]
   16bc0:	e5d6      	b.n	16770 <_dtoa_r+0xb14>
   16bc2:	2b04      	cmp	r3, #4
   16bc4:	d100      	bne.n	16bc8 <_dtoa_r+0xf6c>
   16bc6:	e43f      	b.n	16448 <_dtoa_r+0x7ec>
   16bc8:	233c      	movs	r3, #60	; 0x3c
   16bca:	1a18      	subs	r0, r3, r0
   16bcc:	e4d7      	b.n	1657e <_dtoa_r+0x922>
   16bce:	46c0      	nop			; (mov r8, r8)
   16bd0:	00019ba0 	.word	0x00019ba0
   16bd4:	40240000 	.word	0x40240000
   16bd8:	3fe00000 	.word	0x3fe00000
   16bdc:	401c0000 	.word	0x401c0000
   16be0:	fcc00000 	.word	0xfcc00000

00016be4 <__sflush_r>:
   16be4:	b5f0      	push	{r4, r5, r6, r7, lr}
   16be6:	46c6      	mov	lr, r8
   16be8:	b500      	push	{lr}
   16bea:	230c      	movs	r3, #12
   16bec:	5eca      	ldrsh	r2, [r1, r3]
   16bee:	4680      	mov	r8, r0
   16bf0:	b293      	uxth	r3, r2
   16bf2:	000c      	movs	r4, r1
   16bf4:	0719      	lsls	r1, r3, #28
   16bf6:	d440      	bmi.n	16c7a <__sflush_r+0x96>
   16bf8:	2380      	movs	r3, #128	; 0x80
   16bfa:	011b      	lsls	r3, r3, #4
   16bfc:	4313      	orrs	r3, r2
   16bfe:	6862      	ldr	r2, [r4, #4]
   16c00:	81a3      	strh	r3, [r4, #12]
   16c02:	2a00      	cmp	r2, #0
   16c04:	dc00      	bgt.n	16c08 <__sflush_r+0x24>
   16c06:	e070      	b.n	16cea <__sflush_r+0x106>
   16c08:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   16c0a:	2e00      	cmp	r6, #0
   16c0c:	d031      	beq.n	16c72 <__sflush_r+0x8e>
   16c0e:	4642      	mov	r2, r8
   16c10:	4641      	mov	r1, r8
   16c12:	6815      	ldr	r5, [r2, #0]
   16c14:	2200      	movs	r2, #0
   16c16:	b29b      	uxth	r3, r3
   16c18:	600a      	str	r2, [r1, #0]
   16c1a:	04da      	lsls	r2, r3, #19
   16c1c:	d400      	bmi.n	16c20 <__sflush_r+0x3c>
   16c1e:	e069      	b.n	16cf4 <__sflush_r+0x110>
   16c20:	6d22      	ldr	r2, [r4, #80]	; 0x50
   16c22:	075b      	lsls	r3, r3, #29
   16c24:	d506      	bpl.n	16c34 <__sflush_r+0x50>
   16c26:	6863      	ldr	r3, [r4, #4]
   16c28:	1ad2      	subs	r2, r2, r3
   16c2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16c2c:	2b00      	cmp	r3, #0
   16c2e:	d001      	beq.n	16c34 <__sflush_r+0x50>
   16c30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   16c32:	1ad2      	subs	r2, r2, r3
   16c34:	2300      	movs	r3, #0
   16c36:	69e1      	ldr	r1, [r4, #28]
   16c38:	4640      	mov	r0, r8
   16c3a:	47b0      	blx	r6
   16c3c:	1c43      	adds	r3, r0, #1
   16c3e:	d03d      	beq.n	16cbc <__sflush_r+0xd8>
   16c40:	89a3      	ldrh	r3, [r4, #12]
   16c42:	4a3a      	ldr	r2, [pc, #232]	; (16d2c <__sflush_r+0x148>)
   16c44:	4013      	ands	r3, r2
   16c46:	2200      	movs	r2, #0
   16c48:	6062      	str	r2, [r4, #4]
   16c4a:	6922      	ldr	r2, [r4, #16]
   16c4c:	b21b      	sxth	r3, r3
   16c4e:	81a3      	strh	r3, [r4, #12]
   16c50:	6022      	str	r2, [r4, #0]
   16c52:	04db      	lsls	r3, r3, #19
   16c54:	d447      	bmi.n	16ce6 <__sflush_r+0x102>
   16c56:	4643      	mov	r3, r8
   16c58:	6b21      	ldr	r1, [r4, #48]	; 0x30
   16c5a:	601d      	str	r5, [r3, #0]
   16c5c:	2900      	cmp	r1, #0
   16c5e:	d008      	beq.n	16c72 <__sflush_r+0x8e>
   16c60:	0023      	movs	r3, r4
   16c62:	3340      	adds	r3, #64	; 0x40
   16c64:	4299      	cmp	r1, r3
   16c66:	d002      	beq.n	16c6e <__sflush_r+0x8a>
   16c68:	4640      	mov	r0, r8
   16c6a:	f000 f967 	bl	16f3c <_free_r>
   16c6e:	2300      	movs	r3, #0
   16c70:	6323      	str	r3, [r4, #48]	; 0x30
   16c72:	2000      	movs	r0, #0
   16c74:	bc04      	pop	{r2}
   16c76:	4690      	mov	r8, r2
   16c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16c7a:	6926      	ldr	r6, [r4, #16]
   16c7c:	2e00      	cmp	r6, #0
   16c7e:	d0f8      	beq.n	16c72 <__sflush_r+0x8e>
   16c80:	6822      	ldr	r2, [r4, #0]
   16c82:	6026      	str	r6, [r4, #0]
   16c84:	1b95      	subs	r5, r2, r6
   16c86:	2200      	movs	r2, #0
   16c88:	079b      	lsls	r3, r3, #30
   16c8a:	d100      	bne.n	16c8e <__sflush_r+0xaa>
   16c8c:	6962      	ldr	r2, [r4, #20]
   16c8e:	60a2      	str	r2, [r4, #8]
   16c90:	2d00      	cmp	r5, #0
   16c92:	dc04      	bgt.n	16c9e <__sflush_r+0xba>
   16c94:	e7ed      	b.n	16c72 <__sflush_r+0x8e>
   16c96:	1836      	adds	r6, r6, r0
   16c98:	1a2d      	subs	r5, r5, r0
   16c9a:	2d00      	cmp	r5, #0
   16c9c:	dde9      	ble.n	16c72 <__sflush_r+0x8e>
   16c9e:	002b      	movs	r3, r5
   16ca0:	0032      	movs	r2, r6
   16ca2:	69e1      	ldr	r1, [r4, #28]
   16ca4:	4640      	mov	r0, r8
   16ca6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   16ca8:	47b8      	blx	r7
   16caa:	2800      	cmp	r0, #0
   16cac:	dcf3      	bgt.n	16c96 <__sflush_r+0xb2>
   16cae:	2240      	movs	r2, #64	; 0x40
   16cb0:	2001      	movs	r0, #1
   16cb2:	89a3      	ldrh	r3, [r4, #12]
   16cb4:	4240      	negs	r0, r0
   16cb6:	4313      	orrs	r3, r2
   16cb8:	81a3      	strh	r3, [r4, #12]
   16cba:	e7db      	b.n	16c74 <__sflush_r+0x90>
   16cbc:	4643      	mov	r3, r8
   16cbe:	6819      	ldr	r1, [r3, #0]
   16cc0:	291d      	cmp	r1, #29
   16cc2:	d8f4      	bhi.n	16cae <__sflush_r+0xca>
   16cc4:	4b1a      	ldr	r3, [pc, #104]	; (16d30 <__sflush_r+0x14c>)
   16cc6:	2201      	movs	r2, #1
   16cc8:	40cb      	lsrs	r3, r1
   16cca:	439a      	bics	r2, r3
   16ccc:	d1ef      	bne.n	16cae <__sflush_r+0xca>
   16cce:	89a3      	ldrh	r3, [r4, #12]
   16cd0:	4e16      	ldr	r6, [pc, #88]	; (16d2c <__sflush_r+0x148>)
   16cd2:	6062      	str	r2, [r4, #4]
   16cd4:	4033      	ands	r3, r6
   16cd6:	6922      	ldr	r2, [r4, #16]
   16cd8:	b21b      	sxth	r3, r3
   16cda:	81a3      	strh	r3, [r4, #12]
   16cdc:	6022      	str	r2, [r4, #0]
   16cde:	04db      	lsls	r3, r3, #19
   16ce0:	d5b9      	bpl.n	16c56 <__sflush_r+0x72>
   16ce2:	2900      	cmp	r1, #0
   16ce4:	d1b7      	bne.n	16c56 <__sflush_r+0x72>
   16ce6:	6520      	str	r0, [r4, #80]	; 0x50
   16ce8:	e7b5      	b.n	16c56 <__sflush_r+0x72>
   16cea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   16cec:	2a00      	cmp	r2, #0
   16cee:	dd00      	ble.n	16cf2 <__sflush_r+0x10e>
   16cf0:	e78a      	b.n	16c08 <__sflush_r+0x24>
   16cf2:	e7be      	b.n	16c72 <__sflush_r+0x8e>
   16cf4:	2200      	movs	r2, #0
   16cf6:	2301      	movs	r3, #1
   16cf8:	69e1      	ldr	r1, [r4, #28]
   16cfa:	4640      	mov	r0, r8
   16cfc:	47b0      	blx	r6
   16cfe:	0002      	movs	r2, r0
   16d00:	1c43      	adds	r3, r0, #1
   16d02:	d002      	beq.n	16d0a <__sflush_r+0x126>
   16d04:	89a3      	ldrh	r3, [r4, #12]
   16d06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   16d08:	e78b      	b.n	16c22 <__sflush_r+0x3e>
   16d0a:	4643      	mov	r3, r8
   16d0c:	681b      	ldr	r3, [r3, #0]
   16d0e:	2b00      	cmp	r3, #0
   16d10:	d0f8      	beq.n	16d04 <__sflush_r+0x120>
   16d12:	2b1d      	cmp	r3, #29
   16d14:	d001      	beq.n	16d1a <__sflush_r+0x136>
   16d16:	2b16      	cmp	r3, #22
   16d18:	d103      	bne.n	16d22 <__sflush_r+0x13e>
   16d1a:	4643      	mov	r3, r8
   16d1c:	2000      	movs	r0, #0
   16d1e:	601d      	str	r5, [r3, #0]
   16d20:	e7a8      	b.n	16c74 <__sflush_r+0x90>
   16d22:	2140      	movs	r1, #64	; 0x40
   16d24:	89a3      	ldrh	r3, [r4, #12]
   16d26:	430b      	orrs	r3, r1
   16d28:	81a3      	strh	r3, [r4, #12]
   16d2a:	e7a3      	b.n	16c74 <__sflush_r+0x90>
   16d2c:	fffff7ff 	.word	0xfffff7ff
   16d30:	20400001 	.word	0x20400001

00016d34 <_fflush_r>:
   16d34:	b570      	push	{r4, r5, r6, lr}
   16d36:	0005      	movs	r5, r0
   16d38:	000c      	movs	r4, r1
   16d3a:	2800      	cmp	r0, #0
   16d3c:	d002      	beq.n	16d44 <_fflush_r+0x10>
   16d3e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   16d40:	2b00      	cmp	r3, #0
   16d42:	d016      	beq.n	16d72 <_fflush_r+0x3e>
   16d44:	220c      	movs	r2, #12
   16d46:	5ea3      	ldrsh	r3, [r4, r2]
   16d48:	2600      	movs	r6, #0
   16d4a:	2b00      	cmp	r3, #0
   16d4c:	d00f      	beq.n	16d6e <_fflush_r+0x3a>
   16d4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   16d50:	07d2      	lsls	r2, r2, #31
   16d52:	d401      	bmi.n	16d58 <_fflush_r+0x24>
   16d54:	059b      	lsls	r3, r3, #22
   16d56:	d513      	bpl.n	16d80 <_fflush_r+0x4c>
   16d58:	0021      	movs	r1, r4
   16d5a:	0028      	movs	r0, r5
   16d5c:	f7ff ff42 	bl	16be4 <__sflush_r>
   16d60:	6e63      	ldr	r3, [r4, #100]	; 0x64
   16d62:	0006      	movs	r6, r0
   16d64:	07db      	lsls	r3, r3, #31
   16d66:	d402      	bmi.n	16d6e <_fflush_r+0x3a>
   16d68:	89a3      	ldrh	r3, [r4, #12]
   16d6a:	059b      	lsls	r3, r3, #22
   16d6c:	d504      	bpl.n	16d78 <_fflush_r+0x44>
   16d6e:	0030      	movs	r0, r6
   16d70:	bd70      	pop	{r4, r5, r6, pc}
   16d72:	f000 f839 	bl	16de8 <__sinit>
   16d76:	e7e5      	b.n	16d44 <_fflush_r+0x10>
   16d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
   16d7a:	f000 fb79 	bl	17470 <__retarget_lock_release_recursive>
   16d7e:	e7f6      	b.n	16d6e <_fflush_r+0x3a>
   16d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
   16d82:	f000 fb73 	bl	1746c <__retarget_lock_acquire_recursive>
   16d86:	e7e7      	b.n	16d58 <_fflush_r+0x24>

00016d88 <_cleanup_r>:
   16d88:	b510      	push	{r4, lr}
   16d8a:	4902      	ldr	r1, [pc, #8]	; (16d94 <_cleanup_r+0xc>)
   16d8c:	f000 fb36 	bl	173fc <_fwalk_reent>
   16d90:	bd10      	pop	{r4, pc}
   16d92:	46c0      	nop			; (mov r8, r8)
   16d94:	0001891d 	.word	0x0001891d

00016d98 <std.isra.0>:
   16d98:	2300      	movs	r3, #0
   16d9a:	b510      	push	{r4, lr}
   16d9c:	0004      	movs	r4, r0
   16d9e:	6003      	str	r3, [r0, #0]
   16da0:	6043      	str	r3, [r0, #4]
   16da2:	6083      	str	r3, [r0, #8]
   16da4:	8181      	strh	r1, [r0, #12]
   16da6:	6643      	str	r3, [r0, #100]	; 0x64
   16da8:	81c2      	strh	r2, [r0, #14]
   16daa:	6103      	str	r3, [r0, #16]
   16dac:	6143      	str	r3, [r0, #20]
   16dae:	6183      	str	r3, [r0, #24]
   16db0:	2208      	movs	r2, #8
   16db2:	2100      	movs	r1, #0
   16db4:	305c      	adds	r0, #92	; 0x5c
   16db6:	f7fd f893 	bl	13ee0 <memset>
   16dba:	0020      	movs	r0, r4
   16dbc:	4b06      	ldr	r3, [pc, #24]	; (16dd8 <std.isra.0+0x40>)
   16dbe:	61e4      	str	r4, [r4, #28]
   16dc0:	6223      	str	r3, [r4, #32]
   16dc2:	4b06      	ldr	r3, [pc, #24]	; (16ddc <std.isra.0+0x44>)
   16dc4:	3058      	adds	r0, #88	; 0x58
   16dc6:	6263      	str	r3, [r4, #36]	; 0x24
   16dc8:	4b05      	ldr	r3, [pc, #20]	; (16de0 <std.isra.0+0x48>)
   16dca:	62a3      	str	r3, [r4, #40]	; 0x28
   16dcc:	4b05      	ldr	r3, [pc, #20]	; (16de4 <std.isra.0+0x4c>)
   16dce:	62e3      	str	r3, [r4, #44]	; 0x2c
   16dd0:	f000 fb48 	bl	17464 <__retarget_lock_init_recursive>
   16dd4:	bd10      	pop	{r4, pc}
   16dd6:	46c0      	nop			; (mov r8, r8)
   16dd8:	00018651 	.word	0x00018651
   16ddc:	00018679 	.word	0x00018679
   16de0:	000186b5 	.word	0x000186b5
   16de4:	000186e1 	.word	0x000186e1

00016de8 <__sinit>:
   16de8:	b570      	push	{r4, r5, r6, lr}
   16dea:	0004      	movs	r4, r0
   16dec:	4d14      	ldr	r5, [pc, #80]	; (16e40 <__sinit+0x58>)
   16dee:	0028      	movs	r0, r5
   16df0:	f000 fb3c 	bl	1746c <__retarget_lock_acquire_recursive>
   16df4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16df6:	2b00      	cmp	r3, #0
   16df8:	d11d      	bne.n	16e36 <__sinit+0x4e>
   16dfa:	4a12      	ldr	r2, [pc, #72]	; (16e44 <__sinit+0x5c>)
   16dfc:	2104      	movs	r1, #4
   16dfe:	63e2      	str	r2, [r4, #60]	; 0x3c
   16e00:	22b8      	movs	r2, #184	; 0xb8
   16e02:	0092      	lsls	r2, r2, #2
   16e04:	50a3      	str	r3, [r4, r2]
   16e06:	23b9      	movs	r3, #185	; 0xb9
   16e08:	2203      	movs	r2, #3
   16e0a:	009b      	lsls	r3, r3, #2
   16e0c:	50e2      	str	r2, [r4, r3]
   16e0e:	3308      	adds	r3, #8
   16e10:	18e2      	adds	r2, r4, r3
   16e12:	3b04      	subs	r3, #4
   16e14:	50e2      	str	r2, [r4, r3]
   16e16:	6860      	ldr	r0, [r4, #4]
   16e18:	2200      	movs	r2, #0
   16e1a:	f7ff ffbd 	bl	16d98 <std.isra.0>
   16e1e:	2201      	movs	r2, #1
   16e20:	2109      	movs	r1, #9
   16e22:	68a0      	ldr	r0, [r4, #8]
   16e24:	f7ff ffb8 	bl	16d98 <std.isra.0>
   16e28:	2202      	movs	r2, #2
   16e2a:	2112      	movs	r1, #18
   16e2c:	68e0      	ldr	r0, [r4, #12]
   16e2e:	f7ff ffb3 	bl	16d98 <std.isra.0>
   16e32:	2301      	movs	r3, #1
   16e34:	63a3      	str	r3, [r4, #56]	; 0x38
   16e36:	0028      	movs	r0, r5
   16e38:	f000 fb1a 	bl	17470 <__retarget_lock_release_recursive>
   16e3c:	bd70      	pop	{r4, r5, r6, pc}
   16e3e:	46c0      	nop			; (mov r8, r8)
   16e40:	20001dd0 	.word	0x20001dd0
   16e44:	00016d89 	.word	0x00016d89

00016e48 <__sfp_lock_acquire>:
   16e48:	b510      	push	{r4, lr}
   16e4a:	4802      	ldr	r0, [pc, #8]	; (16e54 <__sfp_lock_acquire+0xc>)
   16e4c:	f000 fb0e 	bl	1746c <__retarget_lock_acquire_recursive>
   16e50:	bd10      	pop	{r4, pc}
   16e52:	46c0      	nop			; (mov r8, r8)
   16e54:	20001de4 	.word	0x20001de4

00016e58 <__sfp_lock_release>:
   16e58:	b510      	push	{r4, lr}
   16e5a:	4802      	ldr	r0, [pc, #8]	; (16e64 <__sfp_lock_release+0xc>)
   16e5c:	f000 fb08 	bl	17470 <__retarget_lock_release_recursive>
   16e60:	bd10      	pop	{r4, pc}
   16e62:	46c0      	nop			; (mov r8, r8)
   16e64:	20001de4 	.word	0x20001de4

00016e68 <__libc_fini_array>:
   16e68:	b570      	push	{r4, r5, r6, lr}
   16e6a:	4b09      	ldr	r3, [pc, #36]	; (16e90 <__libc_fini_array+0x28>)
   16e6c:	4c09      	ldr	r4, [pc, #36]	; (16e94 <__libc_fini_array+0x2c>)
   16e6e:	1ae4      	subs	r4, r4, r3
   16e70:	10a4      	asrs	r4, r4, #2
   16e72:	d009      	beq.n	16e88 <__libc_fini_array+0x20>
   16e74:	4a08      	ldr	r2, [pc, #32]	; (16e98 <__libc_fini_array+0x30>)
   16e76:	18a5      	adds	r5, r4, r2
   16e78:	00ad      	lsls	r5, r5, #2
   16e7a:	18ed      	adds	r5, r5, r3
   16e7c:	682b      	ldr	r3, [r5, #0]
   16e7e:	3c01      	subs	r4, #1
   16e80:	4798      	blx	r3
   16e82:	3d04      	subs	r5, #4
   16e84:	2c00      	cmp	r4, #0
   16e86:	d1f9      	bne.n	16e7c <__libc_fini_array+0x14>
   16e88:	f002 ff88 	bl	19d9c <_fini>
   16e8c:	bd70      	pop	{r4, r5, r6, pc}
   16e8e:	46c0      	nop			; (mov r8, r8)
   16e90:	00019da8 	.word	0x00019da8
   16e94:	00019dac 	.word	0x00019dac
   16e98:	3fffffff 	.word	0x3fffffff

00016e9c <_malloc_trim_r>:
   16e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16e9e:	000c      	movs	r4, r1
   16ea0:	0006      	movs	r6, r0
   16ea2:	f000 fead 	bl	17c00 <__malloc_lock>
   16ea6:	4f20      	ldr	r7, [pc, #128]	; (16f28 <_malloc_trim_r+0x8c>)
   16ea8:	68bb      	ldr	r3, [r7, #8]
   16eaa:	685d      	ldr	r5, [r3, #4]
   16eac:	2303      	movs	r3, #3
   16eae:	439d      	bics	r5, r3
   16eb0:	4b1e      	ldr	r3, [pc, #120]	; (16f2c <_malloc_trim_r+0x90>)
   16eb2:	1b2c      	subs	r4, r5, r4
   16eb4:	469c      	mov	ip, r3
   16eb6:	4464      	add	r4, ip
   16eb8:	0b24      	lsrs	r4, r4, #12
   16eba:	4b1d      	ldr	r3, [pc, #116]	; (16f30 <_malloc_trim_r+0x94>)
   16ebc:	3c01      	subs	r4, #1
   16ebe:	0324      	lsls	r4, r4, #12
   16ec0:	429c      	cmp	r4, r3
   16ec2:	dd07      	ble.n	16ed4 <_malloc_trim_r+0x38>
   16ec4:	2100      	movs	r1, #0
   16ec6:	0030      	movs	r0, r6
   16ec8:	f001 fbb0 	bl	1862c <_sbrk_r>
   16ecc:	68bb      	ldr	r3, [r7, #8]
   16ece:	195b      	adds	r3, r3, r5
   16ed0:	4298      	cmp	r0, r3
   16ed2:	d004      	beq.n	16ede <_malloc_trim_r+0x42>
   16ed4:	0030      	movs	r0, r6
   16ed6:	f000 fe9b 	bl	17c10 <__malloc_unlock>
   16eda:	2000      	movs	r0, #0
   16edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16ede:	4261      	negs	r1, r4
   16ee0:	0030      	movs	r0, r6
   16ee2:	f001 fba3 	bl	1862c <_sbrk_r>
   16ee6:	1c43      	adds	r3, r0, #1
   16ee8:	d00d      	beq.n	16f06 <_malloc_trim_r+0x6a>
   16eea:	2201      	movs	r2, #1
   16eec:	68bb      	ldr	r3, [r7, #8]
   16eee:	1b2d      	subs	r5, r5, r4
   16ef0:	4315      	orrs	r5, r2
   16ef2:	605d      	str	r5, [r3, #4]
   16ef4:	4b0f      	ldr	r3, [pc, #60]	; (16f34 <_malloc_trim_r+0x98>)
   16ef6:	0030      	movs	r0, r6
   16ef8:	681a      	ldr	r2, [r3, #0]
   16efa:	1b14      	subs	r4, r2, r4
   16efc:	601c      	str	r4, [r3, #0]
   16efe:	f000 fe87 	bl	17c10 <__malloc_unlock>
   16f02:	2001      	movs	r0, #1
   16f04:	e7ea      	b.n	16edc <_malloc_trim_r+0x40>
   16f06:	2100      	movs	r1, #0
   16f08:	0030      	movs	r0, r6
   16f0a:	f001 fb8f 	bl	1862c <_sbrk_r>
   16f0e:	68ba      	ldr	r2, [r7, #8]
   16f10:	1a83      	subs	r3, r0, r2
   16f12:	2b0f      	cmp	r3, #15
   16f14:	ddde      	ble.n	16ed4 <_malloc_trim_r+0x38>
   16f16:	4908      	ldr	r1, [pc, #32]	; (16f38 <_malloc_trim_r+0x9c>)
   16f18:	6809      	ldr	r1, [r1, #0]
   16f1a:	1a40      	subs	r0, r0, r1
   16f1c:	4905      	ldr	r1, [pc, #20]	; (16f34 <_malloc_trim_r+0x98>)
   16f1e:	6008      	str	r0, [r1, #0]
   16f20:	2101      	movs	r1, #1
   16f22:	430b      	orrs	r3, r1
   16f24:	6053      	str	r3, [r2, #4]
   16f26:	e7d5      	b.n	16ed4 <_malloc_trim_r+0x38>
   16f28:	2000043c 	.word	0x2000043c
   16f2c:	00000fef 	.word	0x00000fef
   16f30:	00000fff 	.word	0x00000fff
   16f34:	20001010 	.word	0x20001010
   16f38:	20000844 	.word	0x20000844

00016f3c <_free_r>:
   16f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16f3e:	0004      	movs	r4, r0
   16f40:	1e0d      	subs	r5, r1, #0
   16f42:	d03c      	beq.n	16fbe <_free_r+0x82>
   16f44:	f000 fe5c 	bl	17c00 <__malloc_lock>
   16f48:	0029      	movs	r1, r5
   16f4a:	3908      	subs	r1, #8
   16f4c:	6848      	ldr	r0, [r1, #4]
   16f4e:	2301      	movs	r3, #1
   16f50:	0005      	movs	r5, r0
   16f52:	2603      	movs	r6, #3
   16f54:	439d      	bics	r5, r3
   16f56:	194a      	adds	r2, r1, r5
   16f58:	469c      	mov	ip, r3
   16f5a:	4f61      	ldr	r7, [pc, #388]	; (170e0 <_free_r+0x1a4>)
   16f5c:	6853      	ldr	r3, [r2, #4]
   16f5e:	43b3      	bics	r3, r6
   16f60:	68be      	ldr	r6, [r7, #8]
   16f62:	42b2      	cmp	r2, r6
   16f64:	d056      	beq.n	17014 <_free_r+0xd8>
   16f66:	4666      	mov	r6, ip
   16f68:	6053      	str	r3, [r2, #4]
   16f6a:	4206      	tst	r6, r0
   16f6c:	d10a      	bne.n	16f84 <_free_r+0x48>
   16f6e:	003e      	movs	r6, r7
   16f70:	6808      	ldr	r0, [r1, #0]
   16f72:	3608      	adds	r6, #8
   16f74:	1a09      	subs	r1, r1, r0
   16f76:	182d      	adds	r5, r5, r0
   16f78:	6888      	ldr	r0, [r1, #8]
   16f7a:	42b0      	cmp	r0, r6
   16f7c:	d065      	beq.n	1704a <_free_r+0x10e>
   16f7e:	68ce      	ldr	r6, [r1, #12]
   16f80:	60c6      	str	r6, [r0, #12]
   16f82:	60b0      	str	r0, [r6, #8]
   16f84:	2001      	movs	r0, #1
   16f86:	18d6      	adds	r6, r2, r3
   16f88:	6876      	ldr	r6, [r6, #4]
   16f8a:	4206      	tst	r6, r0
   16f8c:	d033      	beq.n	16ff6 <_free_r+0xba>
   16f8e:	4b55      	ldr	r3, [pc, #340]	; (170e4 <_free_r+0x1a8>)
   16f90:	4328      	orrs	r0, r5
   16f92:	6048      	str	r0, [r1, #4]
   16f94:	514d      	str	r5, [r1, r5]
   16f96:	429d      	cmp	r5, r3
   16f98:	d812      	bhi.n	16fc0 <_free_r+0x84>
   16f9a:	08ed      	lsrs	r5, r5, #3
   16f9c:	3bff      	subs	r3, #255	; 0xff
   16f9e:	10aa      	asrs	r2, r5, #2
   16fa0:	3bff      	subs	r3, #255	; 0xff
   16fa2:	4093      	lsls	r3, r2
   16fa4:	687a      	ldr	r2, [r7, #4]
   16fa6:	00ed      	lsls	r5, r5, #3
   16fa8:	4313      	orrs	r3, r2
   16faa:	607b      	str	r3, [r7, #4]
   16fac:	19ef      	adds	r7, r5, r7
   16fae:	68bb      	ldr	r3, [r7, #8]
   16fb0:	60cf      	str	r7, [r1, #12]
   16fb2:	608b      	str	r3, [r1, #8]
   16fb4:	60b9      	str	r1, [r7, #8]
   16fb6:	60d9      	str	r1, [r3, #12]
   16fb8:	0020      	movs	r0, r4
   16fba:	f000 fe29 	bl	17c10 <__malloc_unlock>
   16fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16fc0:	0a68      	lsrs	r0, r5, #9
   16fc2:	2804      	cmp	r0, #4
   16fc4:	d850      	bhi.n	17068 <_free_r+0x12c>
   16fc6:	09a8      	lsrs	r0, r5, #6
   16fc8:	0002      	movs	r2, r0
   16fca:	3039      	adds	r0, #57	; 0x39
   16fcc:	3238      	adds	r2, #56	; 0x38
   16fce:	00c0      	lsls	r0, r0, #3
   16fd0:	1838      	adds	r0, r7, r0
   16fd2:	3808      	subs	r0, #8
   16fd4:	6883      	ldr	r3, [r0, #8]
   16fd6:	2603      	movs	r6, #3
   16fd8:	4298      	cmp	r0, r3
   16fda:	d04c      	beq.n	17076 <_free_r+0x13a>
   16fdc:	685a      	ldr	r2, [r3, #4]
   16fde:	43b2      	bics	r2, r6
   16fe0:	4295      	cmp	r5, r2
   16fe2:	d230      	bcs.n	17046 <_free_r+0x10a>
   16fe4:	689b      	ldr	r3, [r3, #8]
   16fe6:	4298      	cmp	r0, r3
   16fe8:	d1f8      	bne.n	16fdc <_free_r+0xa0>
   16fea:	68c3      	ldr	r3, [r0, #12]
   16fec:	60cb      	str	r3, [r1, #12]
   16fee:	6088      	str	r0, [r1, #8]
   16ff0:	6099      	str	r1, [r3, #8]
   16ff2:	60c1      	str	r1, [r0, #12]
   16ff4:	e7e0      	b.n	16fb8 <_free_r+0x7c>
   16ff6:	18ed      	adds	r5, r5, r3
   16ff8:	4e3b      	ldr	r6, [pc, #236]	; (170e8 <_free_r+0x1ac>)
   16ffa:	6893      	ldr	r3, [r2, #8]
   16ffc:	42b3      	cmp	r3, r6
   16ffe:	d042      	beq.n	17086 <_free_r+0x14a>
   17000:	68d2      	ldr	r2, [r2, #12]
   17002:	4328      	orrs	r0, r5
   17004:	60da      	str	r2, [r3, #12]
   17006:	6093      	str	r3, [r2, #8]
   17008:	4b36      	ldr	r3, [pc, #216]	; (170e4 <_free_r+0x1a8>)
   1700a:	6048      	str	r0, [r1, #4]
   1700c:	514d      	str	r5, [r1, r5]
   1700e:	429d      	cmp	r5, r3
   17010:	d8d6      	bhi.n	16fc0 <_free_r+0x84>
   17012:	e7c2      	b.n	16f9a <_free_r+0x5e>
   17014:	4662      	mov	r2, ip
   17016:	18eb      	adds	r3, r5, r3
   17018:	4202      	tst	r2, r0
   1701a:	d106      	bne.n	1702a <_free_r+0xee>
   1701c:	680a      	ldr	r2, [r1, #0]
   1701e:	1a89      	subs	r1, r1, r2
   17020:	6888      	ldr	r0, [r1, #8]
   17022:	189b      	adds	r3, r3, r2
   17024:	68ca      	ldr	r2, [r1, #12]
   17026:	60c2      	str	r2, [r0, #12]
   17028:	6090      	str	r0, [r2, #8]
   1702a:	2201      	movs	r2, #1
   1702c:	431a      	orrs	r2, r3
   1702e:	604a      	str	r2, [r1, #4]
   17030:	4a2e      	ldr	r2, [pc, #184]	; (170ec <_free_r+0x1b0>)
   17032:	60b9      	str	r1, [r7, #8]
   17034:	6812      	ldr	r2, [r2, #0]
   17036:	4293      	cmp	r3, r2
   17038:	d3be      	bcc.n	16fb8 <_free_r+0x7c>
   1703a:	4b2d      	ldr	r3, [pc, #180]	; (170f0 <_free_r+0x1b4>)
   1703c:	0020      	movs	r0, r4
   1703e:	6819      	ldr	r1, [r3, #0]
   17040:	f7ff ff2c 	bl	16e9c <_malloc_trim_r>
   17044:	e7b8      	b.n	16fb8 <_free_r+0x7c>
   17046:	0018      	movs	r0, r3
   17048:	e7cf      	b.n	16fea <_free_r+0xae>
   1704a:	4666      	mov	r6, ip
   1704c:	18d0      	adds	r0, r2, r3
   1704e:	6840      	ldr	r0, [r0, #4]
   17050:	4230      	tst	r0, r6
   17052:	d13f      	bne.n	170d4 <_free_r+0x198>
   17054:	6890      	ldr	r0, [r2, #8]
   17056:	195d      	adds	r5, r3, r5
   17058:	68d3      	ldr	r3, [r2, #12]
   1705a:	60c3      	str	r3, [r0, #12]
   1705c:	6098      	str	r0, [r3, #8]
   1705e:	4663      	mov	r3, ip
   17060:	432b      	orrs	r3, r5
   17062:	604b      	str	r3, [r1, #4]
   17064:	514d      	str	r5, [r1, r5]
   17066:	e7a7      	b.n	16fb8 <_free_r+0x7c>
   17068:	2814      	cmp	r0, #20
   1706a:	d814      	bhi.n	17096 <_free_r+0x15a>
   1706c:	0002      	movs	r2, r0
   1706e:	305c      	adds	r0, #92	; 0x5c
   17070:	325b      	adds	r2, #91	; 0x5b
   17072:	00c0      	lsls	r0, r0, #3
   17074:	e7ac      	b.n	16fd0 <_free_r+0x94>
   17076:	2301      	movs	r3, #1
   17078:	1092      	asrs	r2, r2, #2
   1707a:	4093      	lsls	r3, r2
   1707c:	687a      	ldr	r2, [r7, #4]
   1707e:	4313      	orrs	r3, r2
   17080:	607b      	str	r3, [r7, #4]
   17082:	0003      	movs	r3, r0
   17084:	e7b2      	b.n	16fec <_free_r+0xb0>
   17086:	4328      	orrs	r0, r5
   17088:	60d9      	str	r1, [r3, #12]
   1708a:	6099      	str	r1, [r3, #8]
   1708c:	60cb      	str	r3, [r1, #12]
   1708e:	608b      	str	r3, [r1, #8]
   17090:	6048      	str	r0, [r1, #4]
   17092:	514d      	str	r5, [r1, r5]
   17094:	e790      	b.n	16fb8 <_free_r+0x7c>
   17096:	2854      	cmp	r0, #84	; 0x54
   17098:	d805      	bhi.n	170a6 <_free_r+0x16a>
   1709a:	0b28      	lsrs	r0, r5, #12
   1709c:	0002      	movs	r2, r0
   1709e:	306f      	adds	r0, #111	; 0x6f
   170a0:	326e      	adds	r2, #110	; 0x6e
   170a2:	00c0      	lsls	r0, r0, #3
   170a4:	e794      	b.n	16fd0 <_free_r+0x94>
   170a6:	22aa      	movs	r2, #170	; 0xaa
   170a8:	0052      	lsls	r2, r2, #1
   170aa:	4290      	cmp	r0, r2
   170ac:	d805      	bhi.n	170ba <_free_r+0x17e>
   170ae:	0be8      	lsrs	r0, r5, #15
   170b0:	0002      	movs	r2, r0
   170b2:	3078      	adds	r0, #120	; 0x78
   170b4:	3277      	adds	r2, #119	; 0x77
   170b6:	00c0      	lsls	r0, r0, #3
   170b8:	e78a      	b.n	16fd0 <_free_r+0x94>
   170ba:	4a0e      	ldr	r2, [pc, #56]	; (170f4 <_free_r+0x1b8>)
   170bc:	4290      	cmp	r0, r2
   170be:	d805      	bhi.n	170cc <_free_r+0x190>
   170c0:	0ca8      	lsrs	r0, r5, #18
   170c2:	0002      	movs	r2, r0
   170c4:	307d      	adds	r0, #125	; 0x7d
   170c6:	327c      	adds	r2, #124	; 0x7c
   170c8:	00c0      	lsls	r0, r0, #3
   170ca:	e781      	b.n	16fd0 <_free_r+0x94>
   170cc:	20fe      	movs	r0, #254	; 0xfe
   170ce:	227e      	movs	r2, #126	; 0x7e
   170d0:	0080      	lsls	r0, r0, #2
   170d2:	e77d      	b.n	16fd0 <_free_r+0x94>
   170d4:	4663      	mov	r3, ip
   170d6:	432b      	orrs	r3, r5
   170d8:	604b      	str	r3, [r1, #4]
   170da:	6015      	str	r5, [r2, #0]
   170dc:	e76c      	b.n	16fb8 <_free_r+0x7c>
   170de:	46c0      	nop			; (mov r8, r8)
   170e0:	2000043c 	.word	0x2000043c
   170e4:	000001ff 	.word	0x000001ff
   170e8:	20000444 	.word	0x20000444
   170ec:	20000848 	.word	0x20000848
   170f0:	20001040 	.word	0x20001040
   170f4:	00000554 	.word	0x00000554

000170f8 <__sfvwrite_r>:
   170f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   170fa:	464e      	mov	r6, r9
   170fc:	46de      	mov	lr, fp
   170fe:	4657      	mov	r7, sl
   17100:	4645      	mov	r5, r8
   17102:	b5e0      	push	{r5, r6, r7, lr}
   17104:	6893      	ldr	r3, [r2, #8]
   17106:	b083      	sub	sp, #12
   17108:	9000      	str	r0, [sp, #0]
   1710a:	000c      	movs	r4, r1
   1710c:	0016      	movs	r6, r2
   1710e:	2b00      	cmp	r3, #0
   17110:	d025      	beq.n	1715e <__sfvwrite_r+0x66>
   17112:	898b      	ldrh	r3, [r1, #12]
   17114:	071a      	lsls	r2, r3, #28
   17116:	d52a      	bpl.n	1716e <__sfvwrite_r+0x76>
   17118:	690a      	ldr	r2, [r1, #16]
   1711a:	2a00      	cmp	r2, #0
   1711c:	d027      	beq.n	1716e <__sfvwrite_r+0x76>
   1711e:	6832      	ldr	r2, [r6, #0]
   17120:	4693      	mov	fp, r2
   17122:	079a      	lsls	r2, r3, #30
   17124:	d52f      	bpl.n	17186 <__sfvwrite_r+0x8e>
   17126:	4bb2      	ldr	r3, [pc, #712]	; (173f0 <__sfvwrite_r+0x2f8>)
   17128:	2700      	movs	r7, #0
   1712a:	2500      	movs	r5, #0
   1712c:	4698      	mov	r8, r3
   1712e:	46b1      	mov	r9, r6
   17130:	2d00      	cmp	r5, #0
   17132:	d100      	bne.n	17136 <__sfvwrite_r+0x3e>
   17134:	e072      	b.n	1721c <__sfvwrite_r+0x124>
   17136:	002b      	movs	r3, r5
   17138:	4545      	cmp	r5, r8
   1713a:	d900      	bls.n	1713e <__sfvwrite_r+0x46>
   1713c:	4bac      	ldr	r3, [pc, #688]	; (173f0 <__sfvwrite_r+0x2f8>)
   1713e:	003a      	movs	r2, r7
   17140:	69e1      	ldr	r1, [r4, #28]
   17142:	9800      	ldr	r0, [sp, #0]
   17144:	6a66      	ldr	r6, [r4, #36]	; 0x24
   17146:	47b0      	blx	r6
   17148:	2800      	cmp	r0, #0
   1714a:	dc00      	bgt.n	1714e <__sfvwrite_r+0x56>
   1714c:	e073      	b.n	17236 <__sfvwrite_r+0x13e>
   1714e:	464b      	mov	r3, r9
   17150:	689b      	ldr	r3, [r3, #8]
   17152:	183f      	adds	r7, r7, r0
   17154:	1a2d      	subs	r5, r5, r0
   17156:	1a18      	subs	r0, r3, r0
   17158:	464b      	mov	r3, r9
   1715a:	6098      	str	r0, [r3, #8]
   1715c:	d1e8      	bne.n	17130 <__sfvwrite_r+0x38>
   1715e:	2000      	movs	r0, #0
   17160:	b003      	add	sp, #12
   17162:	bc3c      	pop	{r2, r3, r4, r5}
   17164:	4690      	mov	r8, r2
   17166:	4699      	mov	r9, r3
   17168:	46a2      	mov	sl, r4
   1716a:	46ab      	mov	fp, r5
   1716c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1716e:	0021      	movs	r1, r4
   17170:	9800      	ldr	r0, [sp, #0]
   17172:	f7fe fc4b 	bl	15a0c <__swsetup_r>
   17176:	2800      	cmp	r0, #0
   17178:	d000      	beq.n	1717c <__sfvwrite_r+0x84>
   1717a:	e130      	b.n	173de <__sfvwrite_r+0x2e6>
   1717c:	6832      	ldr	r2, [r6, #0]
   1717e:	89a3      	ldrh	r3, [r4, #12]
   17180:	4693      	mov	fp, r2
   17182:	079a      	lsls	r2, r3, #30
   17184:	d4cf      	bmi.n	17126 <__sfvwrite_r+0x2e>
   17186:	07da      	lsls	r2, r3, #31
   17188:	d55d      	bpl.n	17246 <__sfvwrite_r+0x14e>
   1718a:	2300      	movs	r3, #0
   1718c:	2000      	movs	r0, #0
   1718e:	469a      	mov	sl, r3
   17190:	2700      	movs	r7, #0
   17192:	001d      	movs	r5, r3
   17194:	46b1      	mov	r9, r6
   17196:	e029      	b.n	171ec <__sfvwrite_r+0xf4>
   17198:	2800      	cmp	r0, #0
   1719a:	d033      	beq.n	17204 <__sfvwrite_r+0x10c>
   1719c:	46a8      	mov	r8, r5
   1719e:	42bd      	cmp	r5, r7
   171a0:	d900      	bls.n	171a4 <__sfvwrite_r+0xac>
   171a2:	46b8      	mov	r8, r7
   171a4:	6820      	ldr	r0, [r4, #0]
   171a6:	6922      	ldr	r2, [r4, #16]
   171a8:	4646      	mov	r6, r8
   171aa:	6963      	ldr	r3, [r4, #20]
   171ac:	4290      	cmp	r0, r2
   171ae:	d907      	bls.n	171c0 <__sfvwrite_r+0xc8>
   171b0:	68a2      	ldr	r2, [r4, #8]
   171b2:	4694      	mov	ip, r2
   171b4:	449c      	add	ip, r3
   171b6:	4662      	mov	r2, ip
   171b8:	9201      	str	r2, [sp, #4]
   171ba:	45e0      	cmp	r8, ip
   171bc:	dd00      	ble.n	171c0 <__sfvwrite_r+0xc8>
   171be:	e0e9      	b.n	17394 <__sfvwrite_r+0x29c>
   171c0:	4598      	cmp	r8, r3
   171c2:	da00      	bge.n	171c6 <__sfvwrite_r+0xce>
   171c4:	e08f      	b.n	172e6 <__sfvwrite_r+0x1ee>
   171c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   171c8:	4652      	mov	r2, sl
   171ca:	69e1      	ldr	r1, [r4, #28]
   171cc:	9800      	ldr	r0, [sp, #0]
   171ce:	47b0      	blx	r6
   171d0:	1e06      	subs	r6, r0, #0
   171d2:	dd30      	ble.n	17236 <__sfvwrite_r+0x13e>
   171d4:	1bad      	subs	r5, r5, r6
   171d6:	2001      	movs	r0, #1
   171d8:	2d00      	cmp	r5, #0
   171da:	d026      	beq.n	1722a <__sfvwrite_r+0x132>
   171dc:	464b      	mov	r3, r9
   171de:	689b      	ldr	r3, [r3, #8]
   171e0:	44b2      	add	sl, r6
   171e2:	1bbf      	subs	r7, r7, r6
   171e4:	1b9e      	subs	r6, r3, r6
   171e6:	464b      	mov	r3, r9
   171e8:	609e      	str	r6, [r3, #8]
   171ea:	d0b8      	beq.n	1715e <__sfvwrite_r+0x66>
   171ec:	2f00      	cmp	r7, #0
   171ee:	d1d3      	bne.n	17198 <__sfvwrite_r+0xa0>
   171f0:	465b      	mov	r3, fp
   171f2:	681b      	ldr	r3, [r3, #0]
   171f4:	469a      	mov	sl, r3
   171f6:	465b      	mov	r3, fp
   171f8:	685f      	ldr	r7, [r3, #4]
   171fa:	2308      	movs	r3, #8
   171fc:	469c      	mov	ip, r3
   171fe:	44e3      	add	fp, ip
   17200:	2f00      	cmp	r7, #0
   17202:	d0f5      	beq.n	171f0 <__sfvwrite_r+0xf8>
   17204:	003a      	movs	r2, r7
   17206:	210a      	movs	r1, #10
   17208:	4650      	mov	r0, sl
   1720a:	f000 fc69 	bl	17ae0 <memchr>
   1720e:	2800      	cmp	r0, #0
   17210:	d100      	bne.n	17214 <__sfvwrite_r+0x11c>
   17212:	e0e2      	b.n	173da <__sfvwrite_r+0x2e2>
   17214:	4653      	mov	r3, sl
   17216:	3001      	adds	r0, #1
   17218:	1ac5      	subs	r5, r0, r3
   1721a:	e7bf      	b.n	1719c <__sfvwrite_r+0xa4>
   1721c:	465b      	mov	r3, fp
   1721e:	681f      	ldr	r7, [r3, #0]
   17220:	685d      	ldr	r5, [r3, #4]
   17222:	2308      	movs	r3, #8
   17224:	469c      	mov	ip, r3
   17226:	44e3      	add	fp, ip
   17228:	e782      	b.n	17130 <__sfvwrite_r+0x38>
   1722a:	0021      	movs	r1, r4
   1722c:	9800      	ldr	r0, [sp, #0]
   1722e:	f7ff fd81 	bl	16d34 <_fflush_r>
   17232:	2800      	cmp	r0, #0
   17234:	d0d2      	beq.n	171dc <__sfvwrite_r+0xe4>
   17236:	220c      	movs	r2, #12
   17238:	5ea3      	ldrsh	r3, [r4, r2]
   1723a:	2240      	movs	r2, #64	; 0x40
   1723c:	2001      	movs	r0, #1
   1723e:	4313      	orrs	r3, r2
   17240:	81a3      	strh	r3, [r4, #12]
   17242:	4240      	negs	r0, r0
   17244:	e78c      	b.n	17160 <__sfvwrite_r+0x68>
   17246:	2200      	movs	r2, #0
   17248:	4691      	mov	r9, r2
   1724a:	464d      	mov	r5, r9
   1724c:	2d00      	cmp	r5, #0
   1724e:	d023      	beq.n	17298 <__sfvwrite_r+0x1a0>
   17250:	68a2      	ldr	r2, [r4, #8]
   17252:	4690      	mov	r8, r2
   17254:	2280      	movs	r2, #128	; 0x80
   17256:	0092      	lsls	r2, r2, #2
   17258:	4213      	tst	r3, r2
   1725a:	d026      	beq.n	172aa <__sfvwrite_r+0x1b2>
   1725c:	46c2      	mov	sl, r8
   1725e:	4545      	cmp	r5, r8
   17260:	d34d      	bcc.n	172fe <__sfvwrite_r+0x206>
   17262:	2290      	movs	r2, #144	; 0x90
   17264:	00d2      	lsls	r2, r2, #3
   17266:	4213      	tst	r3, r2
   17268:	d14e      	bne.n	17308 <__sfvwrite_r+0x210>
   1726a:	002f      	movs	r7, r5
   1726c:	6820      	ldr	r0, [r4, #0]
   1726e:	4652      	mov	r2, sl
   17270:	4649      	mov	r1, r9
   17272:	f000 fc75 	bl	17b60 <memmove>
   17276:	4642      	mov	r2, r8
   17278:	68a3      	ldr	r3, [r4, #8]
   1727a:	1a98      	subs	r0, r3, r2
   1727c:	6823      	ldr	r3, [r4, #0]
   1727e:	60a0      	str	r0, [r4, #8]
   17280:	4453      	add	r3, sl
   17282:	6023      	str	r3, [r4, #0]
   17284:	68b3      	ldr	r3, [r6, #8]
   17286:	44b9      	add	r9, r7
   17288:	1bed      	subs	r5, r5, r7
   1728a:	1bdf      	subs	r7, r3, r7
   1728c:	60b7      	str	r7, [r6, #8]
   1728e:	d100      	bne.n	17292 <__sfvwrite_r+0x19a>
   17290:	e765      	b.n	1715e <__sfvwrite_r+0x66>
   17292:	89a3      	ldrh	r3, [r4, #12]
   17294:	2d00      	cmp	r5, #0
   17296:	d1db      	bne.n	17250 <__sfvwrite_r+0x158>
   17298:	465a      	mov	r2, fp
   1729a:	6812      	ldr	r2, [r2, #0]
   1729c:	4691      	mov	r9, r2
   1729e:	465a      	mov	r2, fp
   172a0:	6855      	ldr	r5, [r2, #4]
   172a2:	2208      	movs	r2, #8
   172a4:	4694      	mov	ip, r2
   172a6:	44e3      	add	fp, ip
   172a8:	e7d0      	b.n	1724c <__sfvwrite_r+0x154>
   172aa:	6820      	ldr	r0, [r4, #0]
   172ac:	6923      	ldr	r3, [r4, #16]
   172ae:	4298      	cmp	r0, r3
   172b0:	d802      	bhi.n	172b8 <__sfvwrite_r+0x1c0>
   172b2:	6967      	ldr	r7, [r4, #20]
   172b4:	42bd      	cmp	r5, r7
   172b6:	d259      	bcs.n	1736c <__sfvwrite_r+0x274>
   172b8:	4647      	mov	r7, r8
   172ba:	42af      	cmp	r7, r5
   172bc:	d900      	bls.n	172c0 <__sfvwrite_r+0x1c8>
   172be:	002f      	movs	r7, r5
   172c0:	003a      	movs	r2, r7
   172c2:	4649      	mov	r1, r9
   172c4:	f000 fc4c 	bl	17b60 <memmove>
   172c8:	68a3      	ldr	r3, [r4, #8]
   172ca:	6822      	ldr	r2, [r4, #0]
   172cc:	1bdb      	subs	r3, r3, r7
   172ce:	19d2      	adds	r2, r2, r7
   172d0:	60a3      	str	r3, [r4, #8]
   172d2:	6022      	str	r2, [r4, #0]
   172d4:	2b00      	cmp	r3, #0
   172d6:	d1d5      	bne.n	17284 <__sfvwrite_r+0x18c>
   172d8:	0021      	movs	r1, r4
   172da:	9800      	ldr	r0, [sp, #0]
   172dc:	f7ff fd2a 	bl	16d34 <_fflush_r>
   172e0:	2800      	cmp	r0, #0
   172e2:	d0cf      	beq.n	17284 <__sfvwrite_r+0x18c>
   172e4:	e7a7      	b.n	17236 <__sfvwrite_r+0x13e>
   172e6:	4642      	mov	r2, r8
   172e8:	4651      	mov	r1, sl
   172ea:	f000 fc39 	bl	17b60 <memmove>
   172ee:	4642      	mov	r2, r8
   172f0:	68a3      	ldr	r3, [r4, #8]
   172f2:	1a9b      	subs	r3, r3, r2
   172f4:	60a3      	str	r3, [r4, #8]
   172f6:	6823      	ldr	r3, [r4, #0]
   172f8:	4443      	add	r3, r8
   172fa:	6023      	str	r3, [r4, #0]
   172fc:	e76a      	b.n	171d4 <__sfvwrite_r+0xdc>
   172fe:	46a8      	mov	r8, r5
   17300:	6820      	ldr	r0, [r4, #0]
   17302:	002f      	movs	r7, r5
   17304:	46aa      	mov	sl, r5
   17306:	e7b2      	b.n	1726e <__sfvwrite_r+0x176>
   17308:	6921      	ldr	r1, [r4, #16]
   1730a:	6822      	ldr	r2, [r4, #0]
   1730c:	1a52      	subs	r2, r2, r1
   1730e:	4692      	mov	sl, r2
   17310:	6962      	ldr	r2, [r4, #20]
   17312:	0057      	lsls	r7, r2, #1
   17314:	18bf      	adds	r7, r7, r2
   17316:	0ffa      	lsrs	r2, r7, #31
   17318:	19d7      	adds	r7, r2, r7
   1731a:	4652      	mov	r2, sl
   1731c:	1c50      	adds	r0, r2, #1
   1731e:	107f      	asrs	r7, r7, #1
   17320:	1940      	adds	r0, r0, r5
   17322:	003a      	movs	r2, r7
   17324:	42b8      	cmp	r0, r7
   17326:	d901      	bls.n	1732c <__sfvwrite_r+0x234>
   17328:	0007      	movs	r7, r0
   1732a:	0002      	movs	r2, r0
   1732c:	055b      	lsls	r3, r3, #21
   1732e:	d542      	bpl.n	173b6 <__sfvwrite_r+0x2be>
   17330:	0011      	movs	r1, r2
   17332:	9800      	ldr	r0, [sp, #0]
   17334:	f000 f920 	bl	17578 <_malloc_r>
   17338:	4680      	mov	r8, r0
   1733a:	1e03      	subs	r3, r0, #0
   1733c:	d052      	beq.n	173e4 <__sfvwrite_r+0x2ec>
   1733e:	4652      	mov	r2, sl
   17340:	6921      	ldr	r1, [r4, #16]
   17342:	f7fc fd8b 	bl	13e5c <memcpy>
   17346:	89a3      	ldrh	r3, [r4, #12]
   17348:	4a2a      	ldr	r2, [pc, #168]	; (173f4 <__sfvwrite_r+0x2fc>)
   1734a:	4013      	ands	r3, r2
   1734c:	2280      	movs	r2, #128	; 0x80
   1734e:	4313      	orrs	r3, r2
   17350:	81a3      	strh	r3, [r4, #12]
   17352:	4643      	mov	r3, r8
   17354:	4640      	mov	r0, r8
   17356:	6123      	str	r3, [r4, #16]
   17358:	4653      	mov	r3, sl
   1735a:	4450      	add	r0, sl
   1735c:	6167      	str	r7, [r4, #20]
   1735e:	1aff      	subs	r7, r7, r3
   17360:	60a7      	str	r7, [r4, #8]
   17362:	6020      	str	r0, [r4, #0]
   17364:	46a8      	mov	r8, r5
   17366:	002f      	movs	r7, r5
   17368:	46aa      	mov	sl, r5
   1736a:	e780      	b.n	1726e <__sfvwrite_r+0x176>
   1736c:	4b22      	ldr	r3, [pc, #136]	; (173f8 <__sfvwrite_r+0x300>)
   1736e:	0028      	movs	r0, r5
   17370:	429d      	cmp	r5, r3
   17372:	d900      	bls.n	17376 <__sfvwrite_r+0x27e>
   17374:	0018      	movs	r0, r3
   17376:	0039      	movs	r1, r7
   17378:	f7f9 fdd2 	bl	10f20 <__divsi3>
   1737c:	003b      	movs	r3, r7
   1737e:	464a      	mov	r2, r9
   17380:	4343      	muls	r3, r0
   17382:	69e1      	ldr	r1, [r4, #28]
   17384:	9800      	ldr	r0, [sp, #0]
   17386:	6a67      	ldr	r7, [r4, #36]	; 0x24
   17388:	47b8      	blx	r7
   1738a:	2800      	cmp	r0, #0
   1738c:	dc00      	bgt.n	17390 <__sfvwrite_r+0x298>
   1738e:	e752      	b.n	17236 <__sfvwrite_r+0x13e>
   17390:	0007      	movs	r7, r0
   17392:	e777      	b.n	17284 <__sfvwrite_r+0x18c>
   17394:	4666      	mov	r6, ip
   17396:	4651      	mov	r1, sl
   17398:	f000 fbe2 	bl	17b60 <memmove>
   1739c:	46b4      	mov	ip, r6
   1739e:	6823      	ldr	r3, [r4, #0]
   173a0:	0021      	movs	r1, r4
   173a2:	4463      	add	r3, ip
   173a4:	6023      	str	r3, [r4, #0]
   173a6:	9800      	ldr	r0, [sp, #0]
   173a8:	f7ff fcc4 	bl	16d34 <_fflush_r>
   173ac:	2800      	cmp	r0, #0
   173ae:	d000      	beq.n	173b2 <__sfvwrite_r+0x2ba>
   173b0:	e741      	b.n	17236 <__sfvwrite_r+0x13e>
   173b2:	9e01      	ldr	r6, [sp, #4]
   173b4:	e70e      	b.n	171d4 <__sfvwrite_r+0xdc>
   173b6:	9800      	ldr	r0, [sp, #0]
   173b8:	f000 ff7a 	bl	182b0 <_realloc_r>
   173bc:	4680      	mov	r8, r0
   173be:	2800      	cmp	r0, #0
   173c0:	d1c7      	bne.n	17352 <__sfvwrite_r+0x25a>
   173c2:	9d00      	ldr	r5, [sp, #0]
   173c4:	6921      	ldr	r1, [r4, #16]
   173c6:	0028      	movs	r0, r5
   173c8:	f7ff fdb8 	bl	16f3c <_free_r>
   173cc:	2280      	movs	r2, #128	; 0x80
   173ce:	89a3      	ldrh	r3, [r4, #12]
   173d0:	4393      	bics	r3, r2
   173d2:	3a74      	subs	r2, #116	; 0x74
   173d4:	b21b      	sxth	r3, r3
   173d6:	602a      	str	r2, [r5, #0]
   173d8:	e72f      	b.n	1723a <__sfvwrite_r+0x142>
   173da:	1c7d      	adds	r5, r7, #1
   173dc:	e6de      	b.n	1719c <__sfvwrite_r+0xa4>
   173de:	2001      	movs	r0, #1
   173e0:	4240      	negs	r0, r0
   173e2:	e6bd      	b.n	17160 <__sfvwrite_r+0x68>
   173e4:	9a00      	ldr	r2, [sp, #0]
   173e6:	330c      	adds	r3, #12
   173e8:	6013      	str	r3, [r2, #0]
   173ea:	220c      	movs	r2, #12
   173ec:	5ea3      	ldrsh	r3, [r4, r2]
   173ee:	e724      	b.n	1723a <__sfvwrite_r+0x142>
   173f0:	7ffffc00 	.word	0x7ffffc00
   173f4:	fffffb7f 	.word	0xfffffb7f
   173f8:	7fffffff 	.word	0x7fffffff

000173fc <_fwalk_reent>:
   173fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   173fe:	4647      	mov	r7, r8
   17400:	46ce      	mov	lr, r9
   17402:	b580      	push	{r7, lr}
   17404:	27b8      	movs	r7, #184	; 0xb8
   17406:	4680      	mov	r8, r0
   17408:	00bf      	lsls	r7, r7, #2
   1740a:	4447      	add	r7, r8
   1740c:	4689      	mov	r9, r1
   1740e:	2600      	movs	r6, #0
   17410:	2f00      	cmp	r7, #0
   17412:	d014      	beq.n	1743e <_fwalk_reent+0x42>
   17414:	687b      	ldr	r3, [r7, #4]
   17416:	68bc      	ldr	r4, [r7, #8]
   17418:	1e5d      	subs	r5, r3, #1
   1741a:	d40d      	bmi.n	17438 <_fwalk_reent+0x3c>
   1741c:	89a3      	ldrh	r3, [r4, #12]
   1741e:	2b01      	cmp	r3, #1
   17420:	d907      	bls.n	17432 <_fwalk_reent+0x36>
   17422:	220e      	movs	r2, #14
   17424:	5ea3      	ldrsh	r3, [r4, r2]
   17426:	3301      	adds	r3, #1
   17428:	d003      	beq.n	17432 <_fwalk_reent+0x36>
   1742a:	0021      	movs	r1, r4
   1742c:	4640      	mov	r0, r8
   1742e:	47c8      	blx	r9
   17430:	4306      	orrs	r6, r0
   17432:	3468      	adds	r4, #104	; 0x68
   17434:	3d01      	subs	r5, #1
   17436:	d2f1      	bcs.n	1741c <_fwalk_reent+0x20>
   17438:	683f      	ldr	r7, [r7, #0]
   1743a:	2f00      	cmp	r7, #0
   1743c:	d1ea      	bne.n	17414 <_fwalk_reent+0x18>
   1743e:	0030      	movs	r0, r6
   17440:	bc0c      	pop	{r2, r3}
   17442:	4690      	mov	r8, r2
   17444:	4699      	mov	r9, r3
   17446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00017448 <_localeconv_r>:
   17448:	4b04      	ldr	r3, [pc, #16]	; (1745c <_localeconv_r+0x14>)
   1744a:	681b      	ldr	r3, [r3, #0]
   1744c:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1744e:	2800      	cmp	r0, #0
   17450:	d001      	beq.n	17456 <_localeconv_r+0xe>
   17452:	30f0      	adds	r0, #240	; 0xf0
   17454:	4770      	bx	lr
   17456:	4802      	ldr	r0, [pc, #8]	; (17460 <_localeconv_r+0x18>)
   17458:	e7fb      	b.n	17452 <_localeconv_r+0xa>
   1745a:	46c0      	nop			; (mov r8, r8)
   1745c:	2000000c 	.word	0x2000000c
   17460:	2000084c 	.word	0x2000084c

00017464 <__retarget_lock_init_recursive>:
   17464:	4770      	bx	lr
   17466:	46c0      	nop			; (mov r8, r8)

00017468 <__retarget_lock_close_recursive>:
   17468:	4770      	bx	lr
   1746a:	46c0      	nop			; (mov r8, r8)

0001746c <__retarget_lock_acquire_recursive>:
   1746c:	4770      	bx	lr
   1746e:	46c0      	nop			; (mov r8, r8)

00017470 <__retarget_lock_release_recursive>:
   17470:	4770      	bx	lr
   17472:	46c0      	nop			; (mov r8, r8)

00017474 <__swhatbuf_r>:
   17474:	b570      	push	{r4, r5, r6, lr}
   17476:	000c      	movs	r4, r1
   17478:	001e      	movs	r6, r3
   1747a:	230e      	movs	r3, #14
   1747c:	5ec9      	ldrsh	r1, [r1, r3]
   1747e:	b090      	sub	sp, #64	; 0x40
   17480:	0015      	movs	r5, r2
   17482:	2900      	cmp	r1, #0
   17484:	db15      	blt.n	174b2 <__swhatbuf_r+0x3e>
   17486:	aa01      	add	r2, sp, #4
   17488:	f001 fb28 	bl	18adc <_fstat_r>
   1748c:	2800      	cmp	r0, #0
   1748e:	db10      	blt.n	174b2 <__swhatbuf_r+0x3e>
   17490:	22f0      	movs	r2, #240	; 0xf0
   17492:	9b02      	ldr	r3, [sp, #8]
   17494:	0212      	lsls	r2, r2, #8
   17496:	4013      	ands	r3, r2
   17498:	4a0d      	ldr	r2, [pc, #52]	; (174d0 <__swhatbuf_r+0x5c>)
   1749a:	2080      	movs	r0, #128	; 0x80
   1749c:	4694      	mov	ip, r2
   1749e:	4463      	add	r3, ip
   174a0:	425a      	negs	r2, r3
   174a2:	4153      	adcs	r3, r2
   174a4:	6033      	str	r3, [r6, #0]
   174a6:	2380      	movs	r3, #128	; 0x80
   174a8:	00db      	lsls	r3, r3, #3
   174aa:	602b      	str	r3, [r5, #0]
   174ac:	0100      	lsls	r0, r0, #4
   174ae:	b010      	add	sp, #64	; 0x40
   174b0:	bd70      	pop	{r4, r5, r6, pc}
   174b2:	2300      	movs	r3, #0
   174b4:	6033      	str	r3, [r6, #0]
   174b6:	89a3      	ldrh	r3, [r4, #12]
   174b8:	061b      	lsls	r3, r3, #24
   174ba:	d503      	bpl.n	174c4 <__swhatbuf_r+0x50>
   174bc:	2340      	movs	r3, #64	; 0x40
   174be:	2000      	movs	r0, #0
   174c0:	602b      	str	r3, [r5, #0]
   174c2:	e7f4      	b.n	174ae <__swhatbuf_r+0x3a>
   174c4:	2380      	movs	r3, #128	; 0x80
   174c6:	00db      	lsls	r3, r3, #3
   174c8:	602b      	str	r3, [r5, #0]
   174ca:	2000      	movs	r0, #0
   174cc:	e7ef      	b.n	174ae <__swhatbuf_r+0x3a>
   174ce:	46c0      	nop			; (mov r8, r8)
   174d0:	ffffe000 	.word	0xffffe000

000174d4 <__smakebuf_r>:
   174d4:	b570      	push	{r4, r5, r6, lr}
   174d6:	898b      	ldrh	r3, [r1, #12]
   174d8:	b082      	sub	sp, #8
   174da:	0006      	movs	r6, r0
   174dc:	000c      	movs	r4, r1
   174de:	079b      	lsls	r3, r3, #30
   174e0:	d507      	bpl.n	174f2 <__smakebuf_r+0x1e>
   174e2:	0023      	movs	r3, r4
   174e4:	3343      	adds	r3, #67	; 0x43
   174e6:	6023      	str	r3, [r4, #0]
   174e8:	6123      	str	r3, [r4, #16]
   174ea:	2301      	movs	r3, #1
   174ec:	6163      	str	r3, [r4, #20]
   174ee:	b002      	add	sp, #8
   174f0:	bd70      	pop	{r4, r5, r6, pc}
   174f2:	ab01      	add	r3, sp, #4
   174f4:	466a      	mov	r2, sp
   174f6:	f7ff ffbd 	bl	17474 <__swhatbuf_r>
   174fa:	9900      	ldr	r1, [sp, #0]
   174fc:	0005      	movs	r5, r0
   174fe:	0030      	movs	r0, r6
   17500:	f000 f83a 	bl	17578 <_malloc_r>
   17504:	2800      	cmp	r0, #0
   17506:	d01e      	beq.n	17546 <__smakebuf_r+0x72>
   17508:	2280      	movs	r2, #128	; 0x80
   1750a:	4b15      	ldr	r3, [pc, #84]	; (17560 <__smakebuf_r+0x8c>)
   1750c:	63f3      	str	r3, [r6, #60]	; 0x3c
   1750e:	89a3      	ldrh	r3, [r4, #12]
   17510:	6020      	str	r0, [r4, #0]
   17512:	4313      	orrs	r3, r2
   17514:	9a00      	ldr	r2, [sp, #0]
   17516:	b21b      	sxth	r3, r3
   17518:	6162      	str	r2, [r4, #20]
   1751a:	9a01      	ldr	r2, [sp, #4]
   1751c:	81a3      	strh	r3, [r4, #12]
   1751e:	6120      	str	r0, [r4, #16]
   17520:	2a00      	cmp	r2, #0
   17522:	d102      	bne.n	1752a <__smakebuf_r+0x56>
   17524:	432b      	orrs	r3, r5
   17526:	81a3      	strh	r3, [r4, #12]
   17528:	e7e1      	b.n	174ee <__smakebuf_r+0x1a>
   1752a:	230e      	movs	r3, #14
   1752c:	5ee1      	ldrsh	r1, [r4, r3]
   1752e:	0030      	movs	r0, r6
   17530:	f001 fae8 	bl	18b04 <_isatty_r>
   17534:	2800      	cmp	r0, #0
   17536:	d010      	beq.n	1755a <__smakebuf_r+0x86>
   17538:	2203      	movs	r2, #3
   1753a:	89a3      	ldrh	r3, [r4, #12]
   1753c:	4393      	bics	r3, r2
   1753e:	2201      	movs	r2, #1
   17540:	4313      	orrs	r3, r2
   17542:	b21b      	sxth	r3, r3
   17544:	e7ee      	b.n	17524 <__smakebuf_r+0x50>
   17546:	220c      	movs	r2, #12
   17548:	5ea3      	ldrsh	r3, [r4, r2]
   1754a:	059a      	lsls	r2, r3, #22
   1754c:	d4cf      	bmi.n	174ee <__smakebuf_r+0x1a>
   1754e:	2203      	movs	r2, #3
   17550:	4393      	bics	r3, r2
   17552:	2202      	movs	r2, #2
   17554:	4313      	orrs	r3, r2
   17556:	81a3      	strh	r3, [r4, #12]
   17558:	e7c3      	b.n	174e2 <__smakebuf_r+0xe>
   1755a:	220c      	movs	r2, #12
   1755c:	5ea3      	ldrsh	r3, [r4, r2]
   1755e:	e7e1      	b.n	17524 <__smakebuf_r+0x50>
   17560:	00016d89 	.word	0x00016d89

00017564 <malloc>:
   17564:	b510      	push	{r4, lr}
   17566:	4b03      	ldr	r3, [pc, #12]	; (17574 <malloc+0x10>)
   17568:	0001      	movs	r1, r0
   1756a:	6818      	ldr	r0, [r3, #0]
   1756c:	f000 f804 	bl	17578 <_malloc_r>
   17570:	bd10      	pop	{r4, pc}
   17572:	46c0      	nop			; (mov r8, r8)
   17574:	2000000c 	.word	0x2000000c

00017578 <_malloc_r>:
   17578:	b5f0      	push	{r4, r5, r6, r7, lr}
   1757a:	4657      	mov	r7, sl
   1757c:	4645      	mov	r5, r8
   1757e:	46de      	mov	lr, fp
   17580:	464e      	mov	r6, r9
   17582:	b5e0      	push	{r5, r6, r7, lr}
   17584:	000d      	movs	r5, r1
   17586:	350b      	adds	r5, #11
   17588:	b083      	sub	sp, #12
   1758a:	0007      	movs	r7, r0
   1758c:	2d16      	cmp	r5, #22
   1758e:	d800      	bhi.n	17592 <_malloc_r+0x1a>
   17590:	e09f      	b.n	176d2 <_malloc_r+0x15a>
   17592:	2307      	movs	r3, #7
   17594:	439d      	bics	r5, r3
   17596:	d500      	bpl.n	1759a <_malloc_r+0x22>
   17598:	e0c4      	b.n	17724 <_malloc_r+0x1ac>
   1759a:	42a9      	cmp	r1, r5
   1759c:	d900      	bls.n	175a0 <_malloc_r+0x28>
   1759e:	e0c1      	b.n	17724 <_malloc_r+0x1ac>
   175a0:	f000 fb2e 	bl	17c00 <__malloc_lock>
   175a4:	23f8      	movs	r3, #248	; 0xf8
   175a6:	33ff      	adds	r3, #255	; 0xff
   175a8:	429d      	cmp	r5, r3
   175aa:	d800      	bhi.n	175ae <_malloc_r+0x36>
   175ac:	e28f      	b.n	17ace <_malloc_r+0x556>
   175ae:	0a68      	lsrs	r0, r5, #9
   175b0:	d100      	bne.n	175b4 <_malloc_r+0x3c>
   175b2:	e0bb      	b.n	1772c <_malloc_r+0x1b4>
   175b4:	2804      	cmp	r0, #4
   175b6:	d900      	bls.n	175ba <_malloc_r+0x42>
   175b8:	e162      	b.n	17880 <_malloc_r+0x308>
   175ba:	2338      	movs	r3, #56	; 0x38
   175bc:	4698      	mov	r8, r3
   175be:	09a8      	lsrs	r0, r5, #6
   175c0:	4480      	add	r8, r0
   175c2:	3039      	adds	r0, #57	; 0x39
   175c4:	00c1      	lsls	r1, r0, #3
   175c6:	4ed2      	ldr	r6, [pc, #840]	; (17910 <_malloc_r+0x398>)
   175c8:	1871      	adds	r1, r6, r1
   175ca:	3908      	subs	r1, #8
   175cc:	68cc      	ldr	r4, [r1, #12]
   175ce:	42a1      	cmp	r1, r4
   175d0:	d019      	beq.n	17606 <_malloc_r+0x8e>
   175d2:	2303      	movs	r3, #3
   175d4:	6862      	ldr	r2, [r4, #4]
   175d6:	439a      	bics	r2, r3
   175d8:	0013      	movs	r3, r2
   175da:	1b52      	subs	r2, r2, r5
   175dc:	2a0f      	cmp	r2, #15
   175de:	dd00      	ble.n	175e2 <_malloc_r+0x6a>
   175e0:	e0aa      	b.n	17738 <_malloc_r+0x1c0>
   175e2:	2a00      	cmp	r2, #0
   175e4:	db00      	blt.n	175e8 <_malloc_r+0x70>
   175e6:	e088      	b.n	176fa <_malloc_r+0x182>
   175e8:	2303      	movs	r3, #3
   175ea:	469c      	mov	ip, r3
   175ec:	e008      	b.n	17600 <_malloc_r+0x88>
   175ee:	4662      	mov	r2, ip
   175f0:	6863      	ldr	r3, [r4, #4]
   175f2:	4393      	bics	r3, r2
   175f4:	1b5a      	subs	r2, r3, r5
   175f6:	2a0f      	cmp	r2, #15
   175f8:	dd00      	ble.n	175fc <_malloc_r+0x84>
   175fa:	e09d      	b.n	17738 <_malloc_r+0x1c0>
   175fc:	2a00      	cmp	r2, #0
   175fe:	da7c      	bge.n	176fa <_malloc_r+0x182>
   17600:	68e4      	ldr	r4, [r4, #12]
   17602:	42a1      	cmp	r1, r4
   17604:	d1f3      	bne.n	175ee <_malloc_r+0x76>
   17606:	0032      	movs	r2, r6
   17608:	6934      	ldr	r4, [r6, #16]
   1760a:	3208      	adds	r2, #8
   1760c:	4294      	cmp	r4, r2
   1760e:	d100      	bne.n	17612 <_malloc_r+0x9a>
   17610:	e190      	b.n	17934 <_malloc_r+0x3bc>
   17612:	2303      	movs	r3, #3
   17614:	6861      	ldr	r1, [r4, #4]
   17616:	4399      	bics	r1, r3
   17618:	4689      	mov	r9, r1
   1761a:	1b49      	subs	r1, r1, r5
   1761c:	290f      	cmp	r1, #15
   1761e:	dd00      	ble.n	17622 <_malloc_r+0xaa>
   17620:	e162      	b.n	178e8 <_malloc_r+0x370>
   17622:	6172      	str	r2, [r6, #20]
   17624:	6132      	str	r2, [r6, #16]
   17626:	2900      	cmp	r1, #0
   17628:	db00      	blt.n	1762c <_malloc_r+0xb4>
   1762a:	e087      	b.n	1773c <_malloc_r+0x1c4>
   1762c:	4ab9      	ldr	r2, [pc, #740]	; (17914 <_malloc_r+0x39c>)
   1762e:	464b      	mov	r3, r9
   17630:	4591      	cmp	r9, r2
   17632:	d900      	bls.n	17636 <_malloc_r+0xbe>
   17634:	e130      	b.n	17898 <_malloc_r+0x320>
   17636:	08db      	lsrs	r3, r3, #3
   17638:	3aff      	subs	r2, #255	; 0xff
   1763a:	1099      	asrs	r1, r3, #2
   1763c:	3aff      	subs	r2, #255	; 0xff
   1763e:	408a      	lsls	r2, r1
   17640:	00db      	lsls	r3, r3, #3
   17642:	6871      	ldr	r1, [r6, #4]
   17644:	199b      	adds	r3, r3, r6
   17646:	430a      	orrs	r2, r1
   17648:	6899      	ldr	r1, [r3, #8]
   1764a:	6072      	str	r2, [r6, #4]
   1764c:	60e3      	str	r3, [r4, #12]
   1764e:	60a1      	str	r1, [r4, #8]
   17650:	609c      	str	r4, [r3, #8]
   17652:	0013      	movs	r3, r2
   17654:	60cc      	str	r4, [r1, #12]
   17656:	2101      	movs	r1, #1
   17658:	1082      	asrs	r2, r0, #2
   1765a:	4091      	lsls	r1, r2
   1765c:	4299      	cmp	r1, r3
   1765e:	d86f      	bhi.n	17740 <_malloc_r+0x1c8>
   17660:	420b      	tst	r3, r1
   17662:	d105      	bne.n	17670 <_malloc_r+0xf8>
   17664:	2203      	movs	r2, #3
   17666:	4390      	bics	r0, r2
   17668:	0049      	lsls	r1, r1, #1
   1766a:	3004      	adds	r0, #4
   1766c:	420b      	tst	r3, r1
   1766e:	d0fb      	beq.n	17668 <_malloc_r+0xf0>
   17670:	2303      	movs	r3, #3
   17672:	4698      	mov	r8, r3
   17674:	00c3      	lsls	r3, r0, #3
   17676:	4699      	mov	r9, r3
   17678:	44b1      	add	r9, r6
   1767a:	46cc      	mov	ip, r9
   1767c:	4682      	mov	sl, r0
   1767e:	4663      	mov	r3, ip
   17680:	68dc      	ldr	r4, [r3, #12]
   17682:	45a4      	cmp	ip, r4
   17684:	d107      	bne.n	17696 <_malloc_r+0x11e>
   17686:	e157      	b.n	17938 <_malloc_r+0x3c0>
   17688:	2a00      	cmp	r2, #0
   1768a:	db00      	blt.n	1768e <_malloc_r+0x116>
   1768c:	e166      	b.n	1795c <_malloc_r+0x3e4>
   1768e:	68e4      	ldr	r4, [r4, #12]
   17690:	45a4      	cmp	ip, r4
   17692:	d100      	bne.n	17696 <_malloc_r+0x11e>
   17694:	e150      	b.n	17938 <_malloc_r+0x3c0>
   17696:	4642      	mov	r2, r8
   17698:	6863      	ldr	r3, [r4, #4]
   1769a:	4393      	bics	r3, r2
   1769c:	1b5a      	subs	r2, r3, r5
   1769e:	2a0f      	cmp	r2, #15
   176a0:	ddf2      	ble.n	17688 <_malloc_r+0x110>
   176a2:	2001      	movs	r0, #1
   176a4:	4680      	mov	r8, r0
   176a6:	1961      	adds	r1, r4, r5
   176a8:	4305      	orrs	r5, r0
   176aa:	6065      	str	r5, [r4, #4]
   176ac:	68a0      	ldr	r0, [r4, #8]
   176ae:	68e5      	ldr	r5, [r4, #12]
   176b0:	3608      	adds	r6, #8
   176b2:	60c5      	str	r5, [r0, #12]
   176b4:	60a8      	str	r0, [r5, #8]
   176b6:	4640      	mov	r0, r8
   176b8:	60f1      	str	r1, [r6, #12]
   176ba:	60b1      	str	r1, [r6, #8]
   176bc:	4310      	orrs	r0, r2
   176be:	6048      	str	r0, [r1, #4]
   176c0:	60ce      	str	r6, [r1, #12]
   176c2:	608e      	str	r6, [r1, #8]
   176c4:	0038      	movs	r0, r7
   176c6:	50e2      	str	r2, [r4, r3]
   176c8:	f000 faa2 	bl	17c10 <__malloc_unlock>
   176cc:	0020      	movs	r0, r4
   176ce:	3008      	adds	r0, #8
   176d0:	e021      	b.n	17716 <_malloc_r+0x19e>
   176d2:	2910      	cmp	r1, #16
   176d4:	d826      	bhi.n	17724 <_malloc_r+0x1ac>
   176d6:	0038      	movs	r0, r7
   176d8:	f000 fa92 	bl	17c00 <__malloc_lock>
   176dc:	2510      	movs	r5, #16
   176de:	2318      	movs	r3, #24
   176e0:	2002      	movs	r0, #2
   176e2:	4e8b      	ldr	r6, [pc, #556]	; (17910 <_malloc_r+0x398>)
   176e4:	18f3      	adds	r3, r6, r3
   176e6:	001a      	movs	r2, r3
   176e8:	685c      	ldr	r4, [r3, #4]
   176ea:	3a08      	subs	r2, #8
   176ec:	4294      	cmp	r4, r2
   176ee:	d100      	bne.n	176f2 <_malloc_r+0x17a>
   176f0:	e12e      	b.n	17950 <_malloc_r+0x3d8>
   176f2:	2303      	movs	r3, #3
   176f4:	6862      	ldr	r2, [r4, #4]
   176f6:	439a      	bics	r2, r3
   176f8:	0013      	movs	r3, r2
   176fa:	68e2      	ldr	r2, [r4, #12]
   176fc:	68a1      	ldr	r1, [r4, #8]
   176fe:	60ca      	str	r2, [r1, #12]
   17700:	6091      	str	r1, [r2, #8]
   17702:	2201      	movs	r2, #1
   17704:	18e3      	adds	r3, r4, r3
   17706:	6859      	ldr	r1, [r3, #4]
   17708:	0038      	movs	r0, r7
   1770a:	430a      	orrs	r2, r1
   1770c:	605a      	str	r2, [r3, #4]
   1770e:	f000 fa7f 	bl	17c10 <__malloc_unlock>
   17712:	0020      	movs	r0, r4
   17714:	3008      	adds	r0, #8
   17716:	b003      	add	sp, #12
   17718:	bc3c      	pop	{r2, r3, r4, r5}
   1771a:	4690      	mov	r8, r2
   1771c:	4699      	mov	r9, r3
   1771e:	46a2      	mov	sl, r4
   17720:	46ab      	mov	fp, r5
   17722:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17724:	230c      	movs	r3, #12
   17726:	2000      	movs	r0, #0
   17728:	603b      	str	r3, [r7, #0]
   1772a:	e7f4      	b.n	17716 <_malloc_r+0x19e>
   1772c:	2180      	movs	r1, #128	; 0x80
   1772e:	233f      	movs	r3, #63	; 0x3f
   17730:	2040      	movs	r0, #64	; 0x40
   17732:	0089      	lsls	r1, r1, #2
   17734:	4698      	mov	r8, r3
   17736:	e746      	b.n	175c6 <_malloc_r+0x4e>
   17738:	4640      	mov	r0, r8
   1773a:	e764      	b.n	17606 <_malloc_r+0x8e>
   1773c:	464b      	mov	r3, r9
   1773e:	e7e0      	b.n	17702 <_malloc_r+0x18a>
   17740:	2303      	movs	r3, #3
   17742:	68b4      	ldr	r4, [r6, #8]
   17744:	6862      	ldr	r2, [r4, #4]
   17746:	439a      	bics	r2, r3
   17748:	4690      	mov	r8, r2
   1774a:	42aa      	cmp	r2, r5
   1774c:	d303      	bcc.n	17756 <_malloc_r+0x1de>
   1774e:	1b53      	subs	r3, r2, r5
   17750:	2b0f      	cmp	r3, #15
   17752:	dd00      	ble.n	17756 <_malloc_r+0x1de>
   17754:	e086      	b.n	17864 <_malloc_r+0x2ec>
   17756:	0023      	movs	r3, r4
   17758:	4443      	add	r3, r8
   1775a:	4a6f      	ldr	r2, [pc, #444]	; (17918 <_malloc_r+0x3a0>)
   1775c:	9301      	str	r3, [sp, #4]
   1775e:	4b6f      	ldr	r3, [pc, #444]	; (1791c <_malloc_r+0x3a4>)
   17760:	4693      	mov	fp, r2
   17762:	681b      	ldr	r3, [r3, #0]
   17764:	6812      	ldr	r2, [r2, #0]
   17766:	18eb      	adds	r3, r5, r3
   17768:	3201      	adds	r2, #1
   1776a:	d100      	bne.n	1776e <_malloc_r+0x1f6>
   1776c:	e168      	b.n	17a40 <_malloc_r+0x4c8>
   1776e:	4a6c      	ldr	r2, [pc, #432]	; (17920 <_malloc_r+0x3a8>)
   17770:	4694      	mov	ip, r2
   17772:	4463      	add	r3, ip
   17774:	0b1b      	lsrs	r3, r3, #12
   17776:	031b      	lsls	r3, r3, #12
   17778:	9300      	str	r3, [sp, #0]
   1777a:	9900      	ldr	r1, [sp, #0]
   1777c:	0038      	movs	r0, r7
   1777e:	f000 ff55 	bl	1862c <_sbrk_r>
   17782:	0003      	movs	r3, r0
   17784:	4681      	mov	r9, r0
   17786:	3301      	adds	r3, #1
   17788:	d061      	beq.n	1784e <_malloc_r+0x2d6>
   1778a:	9b01      	ldr	r3, [sp, #4]
   1778c:	4283      	cmp	r3, r0
   1778e:	d900      	bls.n	17792 <_malloc_r+0x21a>
   17790:	e0ff      	b.n	17992 <_malloc_r+0x41a>
   17792:	4b64      	ldr	r3, [pc, #400]	; (17924 <_malloc_r+0x3ac>)
   17794:	9a00      	ldr	r2, [sp, #0]
   17796:	469a      	mov	sl, r3
   17798:	681b      	ldr	r3, [r3, #0]
   1779a:	469c      	mov	ip, r3
   1779c:	4653      	mov	r3, sl
   1779e:	4462      	add	r2, ip
   177a0:	601a      	str	r2, [r3, #0]
   177a2:	9b01      	ldr	r3, [sp, #4]
   177a4:	0011      	movs	r1, r2
   177a6:	4283      	cmp	r3, r0
   177a8:	d100      	bne.n	177ac <_malloc_r+0x234>
   177aa:	e155      	b.n	17a58 <_malloc_r+0x4e0>
   177ac:	465b      	mov	r3, fp
   177ae:	681b      	ldr	r3, [r3, #0]
   177b0:	3301      	adds	r3, #1
   177b2:	d100      	bne.n	177b6 <_malloc_r+0x23e>
   177b4:	e16c      	b.n	17a90 <_malloc_r+0x518>
   177b6:	464b      	mov	r3, r9
   177b8:	9a01      	ldr	r2, [sp, #4]
   177ba:	1a9b      	subs	r3, r3, r2
   177bc:	1859      	adds	r1, r3, r1
   177be:	4653      	mov	r3, sl
   177c0:	6019      	str	r1, [r3, #0]
   177c2:	2307      	movs	r3, #7
   177c4:	464a      	mov	r2, r9
   177c6:	4013      	ands	r3, r2
   177c8:	d100      	bne.n	177cc <_malloc_r+0x254>
   177ca:	e124      	b.n	17a16 <_malloc_r+0x49e>
   177cc:	2108      	movs	r1, #8
   177ce:	4689      	mov	r9, r1
   177d0:	4955      	ldr	r1, [pc, #340]	; (17928 <_malloc_r+0x3b0>)
   177d2:	1ad2      	subs	r2, r2, r3
   177d4:	4491      	add	r9, r2
   177d6:	1acb      	subs	r3, r1, r3
   177d8:	9a00      	ldr	r2, [sp, #0]
   177da:	0038      	movs	r0, r7
   177dc:	444a      	add	r2, r9
   177de:	0511      	lsls	r1, r2, #20
   177e0:	0d09      	lsrs	r1, r1, #20
   177e2:	1a5b      	subs	r3, r3, r1
   177e4:	0019      	movs	r1, r3
   177e6:	469b      	mov	fp, r3
   177e8:	f000 ff20 	bl	1862c <_sbrk_r>
   177ec:	1c43      	adds	r3, r0, #1
   177ee:	d100      	bne.n	177f2 <_malloc_r+0x27a>
   177f0:	e142      	b.n	17a78 <_malloc_r+0x500>
   177f2:	464b      	mov	r3, r9
   177f4:	1ac0      	subs	r0, r0, r3
   177f6:	2301      	movs	r3, #1
   177f8:	4458      	add	r0, fp
   177fa:	4318      	orrs	r0, r3
   177fc:	4653      	mov	r3, sl
   177fe:	681b      	ldr	r3, [r3, #0]
   17800:	445b      	add	r3, fp
   17802:	0019      	movs	r1, r3
   17804:	4653      	mov	r3, sl
   17806:	6019      	str	r1, [r3, #0]
   17808:	464b      	mov	r3, r9
   1780a:	60b3      	str	r3, [r6, #8]
   1780c:	6058      	str	r0, [r3, #4]
   1780e:	42b4      	cmp	r4, r6
   17810:	d013      	beq.n	1783a <_malloc_r+0x2c2>
   17812:	4643      	mov	r3, r8
   17814:	2b0f      	cmp	r3, #15
   17816:	d800      	bhi.n	1781a <_malloc_r+0x2a2>
   17818:	e0e8      	b.n	179ec <_malloc_r+0x474>
   1781a:	4643      	mov	r3, r8
   1781c:	2207      	movs	r2, #7
   1781e:	6860      	ldr	r0, [r4, #4]
   17820:	3b0c      	subs	r3, #12
   17822:	4393      	bics	r3, r2
   17824:	3a06      	subs	r2, #6
   17826:	4002      	ands	r2, r0
   17828:	2005      	movs	r0, #5
   1782a:	431a      	orrs	r2, r3
   1782c:	6062      	str	r2, [r4, #4]
   1782e:	18e2      	adds	r2, r4, r3
   17830:	6050      	str	r0, [r2, #4]
   17832:	6090      	str	r0, [r2, #8]
   17834:	2b0f      	cmp	r3, #15
   17836:	d900      	bls.n	1783a <_malloc_r+0x2c2>
   17838:	e122      	b.n	17a80 <_malloc_r+0x508>
   1783a:	4b3c      	ldr	r3, [pc, #240]	; (1792c <_malloc_r+0x3b4>)
   1783c:	681a      	ldr	r2, [r3, #0]
   1783e:	4291      	cmp	r1, r2
   17840:	d900      	bls.n	17844 <_malloc_r+0x2cc>
   17842:	6019      	str	r1, [r3, #0]
   17844:	4b3a      	ldr	r3, [pc, #232]	; (17930 <_malloc_r+0x3b8>)
   17846:	681a      	ldr	r2, [r3, #0]
   17848:	4291      	cmp	r1, r2
   1784a:	d900      	bls.n	1784e <_malloc_r+0x2d6>
   1784c:	6019      	str	r1, [r3, #0]
   1784e:	2303      	movs	r3, #3
   17850:	68b4      	ldr	r4, [r6, #8]
   17852:	6862      	ldr	r2, [r4, #4]
   17854:	439a      	bics	r2, r3
   17856:	1b53      	subs	r3, r2, r5
   17858:	4295      	cmp	r5, r2
   1785a:	d900      	bls.n	1785e <_malloc_r+0x2e6>
   1785c:	e0c9      	b.n	179f2 <_malloc_r+0x47a>
   1785e:	2b0f      	cmp	r3, #15
   17860:	dc00      	bgt.n	17864 <_malloc_r+0x2ec>
   17862:	e0c6      	b.n	179f2 <_malloc_r+0x47a>
   17864:	2201      	movs	r2, #1
   17866:	0029      	movs	r1, r5
   17868:	4313      	orrs	r3, r2
   1786a:	4311      	orrs	r1, r2
   1786c:	1965      	adds	r5, r4, r5
   1786e:	6061      	str	r1, [r4, #4]
   17870:	0038      	movs	r0, r7
   17872:	60b5      	str	r5, [r6, #8]
   17874:	606b      	str	r3, [r5, #4]
   17876:	f000 f9cb 	bl	17c10 <__malloc_unlock>
   1787a:	0020      	movs	r0, r4
   1787c:	3008      	adds	r0, #8
   1787e:	e74a      	b.n	17716 <_malloc_r+0x19e>
   17880:	2814      	cmp	r0, #20
   17882:	d97a      	bls.n	1797a <_malloc_r+0x402>
   17884:	2854      	cmp	r0, #84	; 0x54
   17886:	d900      	bls.n	1788a <_malloc_r+0x312>
   17888:	e0ba      	b.n	17a00 <_malloc_r+0x488>
   1788a:	236e      	movs	r3, #110	; 0x6e
   1788c:	4698      	mov	r8, r3
   1788e:	0b28      	lsrs	r0, r5, #12
   17890:	4480      	add	r8, r0
   17892:	306f      	adds	r0, #111	; 0x6f
   17894:	00c1      	lsls	r1, r0, #3
   17896:	e696      	b.n	175c6 <_malloc_r+0x4e>
   17898:	0a5a      	lsrs	r2, r3, #9
   1789a:	2a04      	cmp	r2, #4
   1789c:	d973      	bls.n	17986 <_malloc_r+0x40e>
   1789e:	2a14      	cmp	r2, #20
   178a0:	d900      	bls.n	178a4 <_malloc_r+0x32c>
   178a2:	e0d0      	b.n	17a46 <_malloc_r+0x4ce>
   178a4:	0011      	movs	r1, r2
   178a6:	325c      	adds	r2, #92	; 0x5c
   178a8:	315b      	adds	r1, #91	; 0x5b
   178aa:	00d2      	lsls	r2, r2, #3
   178ac:	2308      	movs	r3, #8
   178ae:	425b      	negs	r3, r3
   178b0:	469c      	mov	ip, r3
   178b2:	18b2      	adds	r2, r6, r2
   178b4:	4494      	add	ip, r2
   178b6:	4663      	mov	r3, ip
   178b8:	689a      	ldr	r2, [r3, #8]
   178ba:	2303      	movs	r3, #3
   178bc:	4698      	mov	r8, r3
   178be:	4594      	cmp	ip, r2
   178c0:	d100      	bne.n	178c4 <_malloc_r+0x34c>
   178c2:	e0ab      	b.n	17a1c <_malloc_r+0x4a4>
   178c4:	4643      	mov	r3, r8
   178c6:	6851      	ldr	r1, [r2, #4]
   178c8:	4399      	bics	r1, r3
   178ca:	4589      	cmp	r9, r1
   178cc:	d300      	bcc.n	178d0 <_malloc_r+0x358>
   178ce:	e095      	b.n	179fc <_malloc_r+0x484>
   178d0:	6892      	ldr	r2, [r2, #8]
   178d2:	4594      	cmp	ip, r2
   178d4:	d1f6      	bne.n	178c4 <_malloc_r+0x34c>
   178d6:	4663      	mov	r3, ip
   178d8:	68da      	ldr	r2, [r3, #12]
   178da:	6873      	ldr	r3, [r6, #4]
   178dc:	4661      	mov	r1, ip
   178de:	60e2      	str	r2, [r4, #12]
   178e0:	60a1      	str	r1, [r4, #8]
   178e2:	6094      	str	r4, [r2, #8]
   178e4:	60cc      	str	r4, [r1, #12]
   178e6:	e6b6      	b.n	17656 <_malloc_r+0xde>
   178e8:	2301      	movs	r3, #1
   178ea:	1960      	adds	r0, r4, r5
   178ec:	431d      	orrs	r5, r3
   178ee:	6065      	str	r5, [r4, #4]
   178f0:	6170      	str	r0, [r6, #20]
   178f2:	6130      	str	r0, [r6, #16]
   178f4:	60c2      	str	r2, [r0, #12]
   178f6:	6082      	str	r2, [r0, #8]
   178f8:	001a      	movs	r2, r3
   178fa:	464b      	mov	r3, r9
   178fc:	430a      	orrs	r2, r1
   178fe:	6042      	str	r2, [r0, #4]
   17900:	0038      	movs	r0, r7
   17902:	50e1      	str	r1, [r4, r3]
   17904:	f000 f984 	bl	17c10 <__malloc_unlock>
   17908:	0020      	movs	r0, r4
   1790a:	3008      	adds	r0, #8
   1790c:	e703      	b.n	17716 <_malloc_r+0x19e>
   1790e:	46c0      	nop			; (mov r8, r8)
   17910:	2000043c 	.word	0x2000043c
   17914:	000001ff 	.word	0x000001ff
   17918:	20000844 	.word	0x20000844
   1791c:	20001040 	.word	0x20001040
   17920:	0000100f 	.word	0x0000100f
   17924:	20001010 	.word	0x20001010
   17928:	00001008 	.word	0x00001008
   1792c:	20001038 	.word	0x20001038
   17930:	2000103c 	.word	0x2000103c
   17934:	6873      	ldr	r3, [r6, #4]
   17936:	e68e      	b.n	17656 <_malloc_r+0xde>
   17938:	2308      	movs	r3, #8
   1793a:	469b      	mov	fp, r3
   1793c:	3b07      	subs	r3, #7
   1793e:	44dc      	add	ip, fp
   17940:	469b      	mov	fp, r3
   17942:	44da      	add	sl, fp
   17944:	4643      	mov	r3, r8
   17946:	4652      	mov	r2, sl
   17948:	4213      	tst	r3, r2
   1794a:	d000      	beq.n	1794e <_malloc_r+0x3d6>
   1794c:	e697      	b.n	1767e <_malloc_r+0x106>
   1794e:	e037      	b.n	179c0 <_malloc_r+0x448>
   17950:	68dc      	ldr	r4, [r3, #12]
   17952:	3002      	adds	r0, #2
   17954:	42a3      	cmp	r3, r4
   17956:	d100      	bne.n	1795a <_malloc_r+0x3e2>
   17958:	e655      	b.n	17606 <_malloc_r+0x8e>
   1795a:	e6ca      	b.n	176f2 <_malloc_r+0x17a>
   1795c:	2201      	movs	r2, #1
   1795e:	18e3      	adds	r3, r4, r3
   17960:	6859      	ldr	r1, [r3, #4]
   17962:	0038      	movs	r0, r7
   17964:	430a      	orrs	r2, r1
   17966:	605a      	str	r2, [r3, #4]
   17968:	68e3      	ldr	r3, [r4, #12]
   1796a:	68a2      	ldr	r2, [r4, #8]
   1796c:	60d3      	str	r3, [r2, #12]
   1796e:	609a      	str	r2, [r3, #8]
   17970:	f000 f94e 	bl	17c10 <__malloc_unlock>
   17974:	0020      	movs	r0, r4
   17976:	3008      	adds	r0, #8
   17978:	e6cd      	b.n	17716 <_malloc_r+0x19e>
   1797a:	235b      	movs	r3, #91	; 0x5b
   1797c:	4698      	mov	r8, r3
   1797e:	4480      	add	r8, r0
   17980:	305c      	adds	r0, #92	; 0x5c
   17982:	00c1      	lsls	r1, r0, #3
   17984:	e61f      	b.n	175c6 <_malloc_r+0x4e>
   17986:	099a      	lsrs	r2, r3, #6
   17988:	0011      	movs	r1, r2
   1798a:	3239      	adds	r2, #57	; 0x39
   1798c:	3138      	adds	r1, #56	; 0x38
   1798e:	00d2      	lsls	r2, r2, #3
   17990:	e78c      	b.n	178ac <_malloc_r+0x334>
   17992:	42b4      	cmp	r4, r6
   17994:	d000      	beq.n	17998 <_malloc_r+0x420>
   17996:	e75a      	b.n	1784e <_malloc_r+0x2d6>
   17998:	4b4f      	ldr	r3, [pc, #316]	; (17ad8 <_malloc_r+0x560>)
   1799a:	9a00      	ldr	r2, [sp, #0]
   1799c:	469a      	mov	sl, r3
   1799e:	681b      	ldr	r3, [r3, #0]
   179a0:	469c      	mov	ip, r3
   179a2:	4653      	mov	r3, sl
   179a4:	4462      	add	r2, ip
   179a6:	0011      	movs	r1, r2
   179a8:	601a      	str	r2, [r3, #0]
   179aa:	e6ff      	b.n	177ac <_malloc_r+0x234>
   179ac:	2308      	movs	r3, #8
   179ae:	425b      	negs	r3, r3
   179b0:	469c      	mov	ip, r3
   179b2:	44e1      	add	r9, ip
   179b4:	464b      	mov	r3, r9
   179b6:	689b      	ldr	r3, [r3, #8]
   179b8:	3801      	subs	r0, #1
   179ba:	4599      	cmp	r9, r3
   179bc:	d000      	beq.n	179c0 <_malloc_r+0x448>
   179be:	e084      	b.n	17aca <_malloc_r+0x552>
   179c0:	4643      	mov	r3, r8
   179c2:	4203      	tst	r3, r0
   179c4:	d1f2      	bne.n	179ac <_malloc_r+0x434>
   179c6:	6873      	ldr	r3, [r6, #4]
   179c8:	438b      	bics	r3, r1
   179ca:	6073      	str	r3, [r6, #4]
   179cc:	0049      	lsls	r1, r1, #1
   179ce:	4299      	cmp	r1, r3
   179d0:	d900      	bls.n	179d4 <_malloc_r+0x45c>
   179d2:	e6b5      	b.n	17740 <_malloc_r+0x1c8>
   179d4:	2900      	cmp	r1, #0
   179d6:	d100      	bne.n	179da <_malloc_r+0x462>
   179d8:	e6b2      	b.n	17740 <_malloc_r+0x1c8>
   179da:	4650      	mov	r0, sl
   179dc:	420b      	tst	r3, r1
   179de:	d000      	beq.n	179e2 <_malloc_r+0x46a>
   179e0:	e648      	b.n	17674 <_malloc_r+0xfc>
   179e2:	0049      	lsls	r1, r1, #1
   179e4:	3004      	adds	r0, #4
   179e6:	420b      	tst	r3, r1
   179e8:	d0fb      	beq.n	179e2 <_malloc_r+0x46a>
   179ea:	e643      	b.n	17674 <_malloc_r+0xfc>
   179ec:	2301      	movs	r3, #1
   179ee:	464a      	mov	r2, r9
   179f0:	6053      	str	r3, [r2, #4]
   179f2:	0038      	movs	r0, r7
   179f4:	f000 f90c 	bl	17c10 <__malloc_unlock>
   179f8:	2000      	movs	r0, #0
   179fa:	e68c      	b.n	17716 <_malloc_r+0x19e>
   179fc:	4694      	mov	ip, r2
   179fe:	e76a      	b.n	178d6 <_malloc_r+0x35e>
   17a00:	23aa      	movs	r3, #170	; 0xaa
   17a02:	005b      	lsls	r3, r3, #1
   17a04:	4298      	cmp	r0, r3
   17a06:	d811      	bhi.n	17a2c <_malloc_r+0x4b4>
   17a08:	3bdd      	subs	r3, #221	; 0xdd
   17a0a:	4698      	mov	r8, r3
   17a0c:	0be8      	lsrs	r0, r5, #15
   17a0e:	4480      	add	r8, r0
   17a10:	3078      	adds	r0, #120	; 0x78
   17a12:	00c1      	lsls	r1, r0, #3
   17a14:	e5d7      	b.n	175c6 <_malloc_r+0x4e>
   17a16:	2380      	movs	r3, #128	; 0x80
   17a18:	015b      	lsls	r3, r3, #5
   17a1a:	e6dd      	b.n	177d8 <_malloc_r+0x260>
   17a1c:	1089      	asrs	r1, r1, #2
   17a1e:	3b02      	subs	r3, #2
   17a20:	408b      	lsls	r3, r1
   17a22:	6872      	ldr	r2, [r6, #4]
   17a24:	4313      	orrs	r3, r2
   17a26:	6073      	str	r3, [r6, #4]
   17a28:	4662      	mov	r2, ip
   17a2a:	e757      	b.n	178dc <_malloc_r+0x364>
   17a2c:	4b2b      	ldr	r3, [pc, #172]	; (17adc <_malloc_r+0x564>)
   17a2e:	4298      	cmp	r0, r3
   17a30:	d81c      	bhi.n	17a6c <_malloc_r+0x4f4>
   17a32:	237c      	movs	r3, #124	; 0x7c
   17a34:	4698      	mov	r8, r3
   17a36:	0ca8      	lsrs	r0, r5, #18
   17a38:	4480      	add	r8, r0
   17a3a:	307d      	adds	r0, #125	; 0x7d
   17a3c:	00c1      	lsls	r1, r0, #3
   17a3e:	e5c2      	b.n	175c6 <_malloc_r+0x4e>
   17a40:	3310      	adds	r3, #16
   17a42:	9300      	str	r3, [sp, #0]
   17a44:	e699      	b.n	1777a <_malloc_r+0x202>
   17a46:	2a54      	cmp	r2, #84	; 0x54
   17a48:	d826      	bhi.n	17a98 <_malloc_r+0x520>
   17a4a:	464b      	mov	r3, r9
   17a4c:	0b1a      	lsrs	r2, r3, #12
   17a4e:	0011      	movs	r1, r2
   17a50:	326f      	adds	r2, #111	; 0x6f
   17a52:	316e      	adds	r1, #110	; 0x6e
   17a54:	00d2      	lsls	r2, r2, #3
   17a56:	e729      	b.n	178ac <_malloc_r+0x334>
   17a58:	051b      	lsls	r3, r3, #20
   17a5a:	d000      	beq.n	17a5e <_malloc_r+0x4e6>
   17a5c:	e6a6      	b.n	177ac <_malloc_r+0x234>
   17a5e:	2001      	movs	r0, #1
   17a60:	9b00      	ldr	r3, [sp, #0]
   17a62:	68b2      	ldr	r2, [r6, #8]
   17a64:	4443      	add	r3, r8
   17a66:	4303      	orrs	r3, r0
   17a68:	6053      	str	r3, [r2, #4]
   17a6a:	e6e6      	b.n	1783a <_malloc_r+0x2c2>
   17a6c:	21fe      	movs	r1, #254	; 0xfe
   17a6e:	237e      	movs	r3, #126	; 0x7e
   17a70:	207f      	movs	r0, #127	; 0x7f
   17a72:	0089      	lsls	r1, r1, #2
   17a74:	4698      	mov	r8, r3
   17a76:	e5a6      	b.n	175c6 <_malloc_r+0x4e>
   17a78:	2300      	movs	r3, #0
   17a7a:	2001      	movs	r0, #1
   17a7c:	469b      	mov	fp, r3
   17a7e:	e6bd      	b.n	177fc <_malloc_r+0x284>
   17a80:	0021      	movs	r1, r4
   17a82:	0038      	movs	r0, r7
   17a84:	3108      	adds	r1, #8
   17a86:	f7ff fa59 	bl	16f3c <_free_r>
   17a8a:	4653      	mov	r3, sl
   17a8c:	6819      	ldr	r1, [r3, #0]
   17a8e:	e6d4      	b.n	1783a <_malloc_r+0x2c2>
   17a90:	465b      	mov	r3, fp
   17a92:	464a      	mov	r2, r9
   17a94:	601a      	str	r2, [r3, #0]
   17a96:	e694      	b.n	177c2 <_malloc_r+0x24a>
   17a98:	21aa      	movs	r1, #170	; 0xaa
   17a9a:	0049      	lsls	r1, r1, #1
   17a9c:	428a      	cmp	r2, r1
   17a9e:	d806      	bhi.n	17aae <_malloc_r+0x536>
   17aa0:	464b      	mov	r3, r9
   17aa2:	0bda      	lsrs	r2, r3, #15
   17aa4:	0011      	movs	r1, r2
   17aa6:	3278      	adds	r2, #120	; 0x78
   17aa8:	3177      	adds	r1, #119	; 0x77
   17aaa:	00d2      	lsls	r2, r2, #3
   17aac:	e6fe      	b.n	178ac <_malloc_r+0x334>
   17aae:	490b      	ldr	r1, [pc, #44]	; (17adc <_malloc_r+0x564>)
   17ab0:	428a      	cmp	r2, r1
   17ab2:	d806      	bhi.n	17ac2 <_malloc_r+0x54a>
   17ab4:	464b      	mov	r3, r9
   17ab6:	0c9a      	lsrs	r2, r3, #18
   17ab8:	0011      	movs	r1, r2
   17aba:	327d      	adds	r2, #125	; 0x7d
   17abc:	317c      	adds	r1, #124	; 0x7c
   17abe:	00d2      	lsls	r2, r2, #3
   17ac0:	e6f4      	b.n	178ac <_malloc_r+0x334>
   17ac2:	22fe      	movs	r2, #254	; 0xfe
   17ac4:	217e      	movs	r1, #126	; 0x7e
   17ac6:	0092      	lsls	r2, r2, #2
   17ac8:	e6f0      	b.n	178ac <_malloc_r+0x334>
   17aca:	6873      	ldr	r3, [r6, #4]
   17acc:	e77e      	b.n	179cc <_malloc_r+0x454>
   17ace:	002b      	movs	r3, r5
   17ad0:	08e8      	lsrs	r0, r5, #3
   17ad2:	3308      	adds	r3, #8
   17ad4:	e605      	b.n	176e2 <_malloc_r+0x16a>
   17ad6:	46c0      	nop			; (mov r8, r8)
   17ad8:	20001010 	.word	0x20001010
   17adc:	00000554 	.word	0x00000554

00017ae0 <memchr>:
   17ae0:	b570      	push	{r4, r5, r6, lr}
   17ae2:	b2cd      	uxtb	r5, r1
   17ae4:	0783      	lsls	r3, r0, #30
   17ae6:	d034      	beq.n	17b52 <memchr+0x72>
   17ae8:	1e54      	subs	r4, r2, #1
   17aea:	2a00      	cmp	r2, #0
   17aec:	d01b      	beq.n	17b26 <memchr+0x46>
   17aee:	7803      	ldrb	r3, [r0, #0]
   17af0:	42ab      	cmp	r3, r5
   17af2:	d019      	beq.n	17b28 <memchr+0x48>
   17af4:	2203      	movs	r2, #3
   17af6:	e004      	b.n	17b02 <memchr+0x22>
   17af8:	3c01      	subs	r4, #1
   17afa:	d314      	bcc.n	17b26 <memchr+0x46>
   17afc:	7803      	ldrb	r3, [r0, #0]
   17afe:	42ab      	cmp	r3, r5
   17b00:	d012      	beq.n	17b28 <memchr+0x48>
   17b02:	3001      	adds	r0, #1
   17b04:	4210      	tst	r0, r2
   17b06:	d1f7      	bne.n	17af8 <memchr+0x18>
   17b08:	2c03      	cmp	r4, #3
   17b0a:	d80e      	bhi.n	17b2a <memchr+0x4a>
   17b0c:	2c00      	cmp	r4, #0
   17b0e:	d00a      	beq.n	17b26 <memchr+0x46>
   17b10:	7803      	ldrb	r3, [r0, #0]
   17b12:	42ab      	cmp	r3, r5
   17b14:	d008      	beq.n	17b28 <memchr+0x48>
   17b16:	1904      	adds	r4, r0, r4
   17b18:	e002      	b.n	17b20 <memchr+0x40>
   17b1a:	7803      	ldrb	r3, [r0, #0]
   17b1c:	42ab      	cmp	r3, r5
   17b1e:	d003      	beq.n	17b28 <memchr+0x48>
   17b20:	3001      	adds	r0, #1
   17b22:	4284      	cmp	r4, r0
   17b24:	d1f9      	bne.n	17b1a <memchr+0x3a>
   17b26:	2000      	movs	r0, #0
   17b28:	bd70      	pop	{r4, r5, r6, pc}
   17b2a:	22ff      	movs	r2, #255	; 0xff
   17b2c:	060b      	lsls	r3, r1, #24
   17b2e:	0c1b      	lsrs	r3, r3, #16
   17b30:	4011      	ands	r1, r2
   17b32:	4319      	orrs	r1, r3
   17b34:	040b      	lsls	r3, r1, #16
   17b36:	4e08      	ldr	r6, [pc, #32]	; (17b58 <memchr+0x78>)
   17b38:	4319      	orrs	r1, r3
   17b3a:	6803      	ldr	r3, [r0, #0]
   17b3c:	4a07      	ldr	r2, [pc, #28]	; (17b5c <memchr+0x7c>)
   17b3e:	404b      	eors	r3, r1
   17b40:	189a      	adds	r2, r3, r2
   17b42:	439a      	bics	r2, r3
   17b44:	4232      	tst	r2, r6
   17b46:	d1e3      	bne.n	17b10 <memchr+0x30>
   17b48:	3c04      	subs	r4, #4
   17b4a:	3004      	adds	r0, #4
   17b4c:	2c03      	cmp	r4, #3
   17b4e:	d8f4      	bhi.n	17b3a <memchr+0x5a>
   17b50:	e7dc      	b.n	17b0c <memchr+0x2c>
   17b52:	0014      	movs	r4, r2
   17b54:	e7d8      	b.n	17b08 <memchr+0x28>
   17b56:	46c0      	nop			; (mov r8, r8)
   17b58:	80808080 	.word	0x80808080
   17b5c:	fefefeff 	.word	0xfefefeff

00017b60 <memmove>:
   17b60:	b5f0      	push	{r4, r5, r6, r7, lr}
   17b62:	4288      	cmp	r0, r1
   17b64:	d90a      	bls.n	17b7c <memmove+0x1c>
   17b66:	188b      	adds	r3, r1, r2
   17b68:	4298      	cmp	r0, r3
   17b6a:	d207      	bcs.n	17b7c <memmove+0x1c>
   17b6c:	1e53      	subs	r3, r2, #1
   17b6e:	2a00      	cmp	r2, #0
   17b70:	d003      	beq.n	17b7a <memmove+0x1a>
   17b72:	5cca      	ldrb	r2, [r1, r3]
   17b74:	54c2      	strb	r2, [r0, r3]
   17b76:	3b01      	subs	r3, #1
   17b78:	d2fb      	bcs.n	17b72 <memmove+0x12>
   17b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17b7c:	0005      	movs	r5, r0
   17b7e:	2a0f      	cmp	r2, #15
   17b80:	d808      	bhi.n	17b94 <memmove+0x34>
   17b82:	2a00      	cmp	r2, #0
   17b84:	d0f9      	beq.n	17b7a <memmove+0x1a>
   17b86:	2300      	movs	r3, #0
   17b88:	5ccc      	ldrb	r4, [r1, r3]
   17b8a:	54ec      	strb	r4, [r5, r3]
   17b8c:	3301      	adds	r3, #1
   17b8e:	4293      	cmp	r3, r2
   17b90:	d1fa      	bne.n	17b88 <memmove+0x28>
   17b92:	e7f2      	b.n	17b7a <memmove+0x1a>
   17b94:	000b      	movs	r3, r1
   17b96:	4303      	orrs	r3, r0
   17b98:	079b      	lsls	r3, r3, #30
   17b9a:	d12d      	bne.n	17bf8 <memmove+0x98>
   17b9c:	0015      	movs	r5, r2
   17b9e:	000c      	movs	r4, r1
   17ba0:	0003      	movs	r3, r0
   17ba2:	3d10      	subs	r5, #16
   17ba4:	092f      	lsrs	r7, r5, #4
   17ba6:	3701      	adds	r7, #1
   17ba8:	013f      	lsls	r7, r7, #4
   17baa:	19c7      	adds	r7, r0, r7
   17bac:	6826      	ldr	r6, [r4, #0]
   17bae:	601e      	str	r6, [r3, #0]
   17bb0:	6866      	ldr	r6, [r4, #4]
   17bb2:	605e      	str	r6, [r3, #4]
   17bb4:	68a6      	ldr	r6, [r4, #8]
   17bb6:	609e      	str	r6, [r3, #8]
   17bb8:	68e6      	ldr	r6, [r4, #12]
   17bba:	3410      	adds	r4, #16
   17bbc:	60de      	str	r6, [r3, #12]
   17bbe:	3310      	adds	r3, #16
   17bc0:	429f      	cmp	r7, r3
   17bc2:	d1f3      	bne.n	17bac <memmove+0x4c>
   17bc4:	240f      	movs	r4, #15
   17bc6:	43a5      	bics	r5, r4
   17bc8:	3510      	adds	r5, #16
   17bca:	1949      	adds	r1, r1, r5
   17bcc:	4014      	ands	r4, r2
   17bce:	1945      	adds	r5, r0, r5
   17bd0:	2c03      	cmp	r4, #3
   17bd2:	d913      	bls.n	17bfc <memmove+0x9c>
   17bd4:	2300      	movs	r3, #0
   17bd6:	1f27      	subs	r7, r4, #4
   17bd8:	08be      	lsrs	r6, r7, #2
   17bda:	3601      	adds	r6, #1
   17bdc:	00b6      	lsls	r6, r6, #2
   17bde:	58cc      	ldr	r4, [r1, r3]
   17be0:	50ec      	str	r4, [r5, r3]
   17be2:	3304      	adds	r3, #4
   17be4:	42b3      	cmp	r3, r6
   17be6:	d1fa      	bne.n	17bde <memmove+0x7e>
   17be8:	2603      	movs	r6, #3
   17bea:	43b7      	bics	r7, r6
   17bec:	1d3c      	adds	r4, r7, #4
   17bee:	1909      	adds	r1, r1, r4
   17bf0:	192d      	adds	r5, r5, r4
   17bf2:	4032      	ands	r2, r6
   17bf4:	d1c7      	bne.n	17b86 <memmove+0x26>
   17bf6:	e7c0      	b.n	17b7a <memmove+0x1a>
   17bf8:	0005      	movs	r5, r0
   17bfa:	e7c4      	b.n	17b86 <memmove+0x26>
   17bfc:	0022      	movs	r2, r4
   17bfe:	e7c0      	b.n	17b82 <memmove+0x22>

00017c00 <__malloc_lock>:
   17c00:	b510      	push	{r4, lr}
   17c02:	4802      	ldr	r0, [pc, #8]	; (17c0c <__malloc_lock+0xc>)
   17c04:	f7ff fc32 	bl	1746c <__retarget_lock_acquire_recursive>
   17c08:	bd10      	pop	{r4, pc}
   17c0a:	46c0      	nop			; (mov r8, r8)
   17c0c:	20001dd4 	.word	0x20001dd4

00017c10 <__malloc_unlock>:
   17c10:	b510      	push	{r4, lr}
   17c12:	4802      	ldr	r0, [pc, #8]	; (17c1c <__malloc_unlock+0xc>)
   17c14:	f7ff fc2c 	bl	17470 <__retarget_lock_release_recursive>
   17c18:	bd10      	pop	{r4, pc}
   17c1a:	46c0      	nop			; (mov r8, r8)
   17c1c:	20001dd4 	.word	0x20001dd4

00017c20 <_Balloc>:
   17c20:	b570      	push	{r4, r5, r6, lr}
   17c22:	0004      	movs	r4, r0
   17c24:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   17c26:	000d      	movs	r5, r1
   17c28:	2800      	cmp	r0, #0
   17c2a:	d00a      	beq.n	17c42 <_Balloc+0x22>
   17c2c:	00ab      	lsls	r3, r5, #2
   17c2e:	18c3      	adds	r3, r0, r3
   17c30:	6818      	ldr	r0, [r3, #0]
   17c32:	2800      	cmp	r0, #0
   17c34:	d00f      	beq.n	17c56 <_Balloc+0x36>
   17c36:	6802      	ldr	r2, [r0, #0]
   17c38:	601a      	str	r2, [r3, #0]
   17c3a:	2300      	movs	r3, #0
   17c3c:	6103      	str	r3, [r0, #16]
   17c3e:	60c3      	str	r3, [r0, #12]
   17c40:	bd70      	pop	{r4, r5, r6, pc}
   17c42:	2221      	movs	r2, #33	; 0x21
   17c44:	2104      	movs	r1, #4
   17c46:	0020      	movs	r0, r4
   17c48:	f000 fe2a 	bl	188a0 <_calloc_r>
   17c4c:	64e0      	str	r0, [r4, #76]	; 0x4c
   17c4e:	2800      	cmp	r0, #0
   17c50:	d1ec      	bne.n	17c2c <_Balloc+0xc>
   17c52:	2000      	movs	r0, #0
   17c54:	e7f4      	b.n	17c40 <_Balloc+0x20>
   17c56:	2601      	movs	r6, #1
   17c58:	40ae      	lsls	r6, r5
   17c5a:	1d72      	adds	r2, r6, #5
   17c5c:	0092      	lsls	r2, r2, #2
   17c5e:	2101      	movs	r1, #1
   17c60:	0020      	movs	r0, r4
   17c62:	f000 fe1d 	bl	188a0 <_calloc_r>
   17c66:	2800      	cmp	r0, #0
   17c68:	d0f3      	beq.n	17c52 <_Balloc+0x32>
   17c6a:	6045      	str	r5, [r0, #4]
   17c6c:	6086      	str	r6, [r0, #8]
   17c6e:	e7e4      	b.n	17c3a <_Balloc+0x1a>

00017c70 <_Bfree>:
   17c70:	2900      	cmp	r1, #0
   17c72:	d006      	beq.n	17c82 <_Bfree+0x12>
   17c74:	684b      	ldr	r3, [r1, #4]
   17c76:	009a      	lsls	r2, r3, #2
   17c78:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   17c7a:	189b      	adds	r3, r3, r2
   17c7c:	681a      	ldr	r2, [r3, #0]
   17c7e:	600a      	str	r2, [r1, #0]
   17c80:	6019      	str	r1, [r3, #0]
   17c82:	4770      	bx	lr

00017c84 <__multadd>:
   17c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17c86:	46ce      	mov	lr, r9
   17c88:	4647      	mov	r7, r8
   17c8a:	4681      	mov	r9, r0
   17c8c:	0008      	movs	r0, r1
   17c8e:	b580      	push	{r7, lr}
   17c90:	000d      	movs	r5, r1
   17c92:	690c      	ldr	r4, [r1, #16]
   17c94:	001f      	movs	r7, r3
   17c96:	2100      	movs	r1, #0
   17c98:	3014      	adds	r0, #20
   17c9a:	6803      	ldr	r3, [r0, #0]
   17c9c:	3101      	adds	r1, #1
   17c9e:	041e      	lsls	r6, r3, #16
   17ca0:	0c36      	lsrs	r6, r6, #16
   17ca2:	4356      	muls	r6, r2
   17ca4:	0c1b      	lsrs	r3, r3, #16
   17ca6:	4353      	muls	r3, r2
   17ca8:	19f6      	adds	r6, r6, r7
   17caa:	0c37      	lsrs	r7, r6, #16
   17cac:	19db      	adds	r3, r3, r7
   17cae:	0436      	lsls	r6, r6, #16
   17cb0:	0c1f      	lsrs	r7, r3, #16
   17cb2:	0c36      	lsrs	r6, r6, #16
   17cb4:	041b      	lsls	r3, r3, #16
   17cb6:	199b      	adds	r3, r3, r6
   17cb8:	c008      	stmia	r0!, {r3}
   17cba:	428c      	cmp	r4, r1
   17cbc:	dced      	bgt.n	17c9a <__multadd+0x16>
   17cbe:	2f00      	cmp	r7, #0
   17cc0:	d008      	beq.n	17cd4 <__multadd+0x50>
   17cc2:	68ab      	ldr	r3, [r5, #8]
   17cc4:	429c      	cmp	r4, r3
   17cc6:	da0a      	bge.n	17cde <__multadd+0x5a>
   17cc8:	1d23      	adds	r3, r4, #4
   17cca:	009b      	lsls	r3, r3, #2
   17ccc:	18eb      	adds	r3, r5, r3
   17cce:	3401      	adds	r4, #1
   17cd0:	605f      	str	r7, [r3, #4]
   17cd2:	612c      	str	r4, [r5, #16]
   17cd4:	0028      	movs	r0, r5
   17cd6:	bc0c      	pop	{r2, r3}
   17cd8:	4690      	mov	r8, r2
   17cda:	4699      	mov	r9, r3
   17cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17cde:	686b      	ldr	r3, [r5, #4]
   17ce0:	4648      	mov	r0, r9
   17ce2:	1c59      	adds	r1, r3, #1
   17ce4:	f7ff ff9c 	bl	17c20 <_Balloc>
   17ce8:	0029      	movs	r1, r5
   17cea:	692b      	ldr	r3, [r5, #16]
   17cec:	4680      	mov	r8, r0
   17cee:	1c9a      	adds	r2, r3, #2
   17cf0:	0092      	lsls	r2, r2, #2
   17cf2:	310c      	adds	r1, #12
   17cf4:	300c      	adds	r0, #12
   17cf6:	f7fc f8b1 	bl	13e5c <memcpy>
   17cfa:	686b      	ldr	r3, [r5, #4]
   17cfc:	009a      	lsls	r2, r3, #2
   17cfe:	464b      	mov	r3, r9
   17d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   17d02:	189b      	adds	r3, r3, r2
   17d04:	681a      	ldr	r2, [r3, #0]
   17d06:	602a      	str	r2, [r5, #0]
   17d08:	601d      	str	r5, [r3, #0]
   17d0a:	4645      	mov	r5, r8
   17d0c:	e7dc      	b.n	17cc8 <__multadd+0x44>
   17d0e:	46c0      	nop			; (mov r8, r8)

00017d10 <__hi0bits>:
   17d10:	0003      	movs	r3, r0
   17d12:	0c02      	lsrs	r2, r0, #16
   17d14:	2000      	movs	r0, #0
   17d16:	2a00      	cmp	r2, #0
   17d18:	d101      	bne.n	17d1e <__hi0bits+0xe>
   17d1a:	041b      	lsls	r3, r3, #16
   17d1c:	3010      	adds	r0, #16
   17d1e:	0e1a      	lsrs	r2, r3, #24
   17d20:	d101      	bne.n	17d26 <__hi0bits+0x16>
   17d22:	3008      	adds	r0, #8
   17d24:	021b      	lsls	r3, r3, #8
   17d26:	0f1a      	lsrs	r2, r3, #28
   17d28:	d101      	bne.n	17d2e <__hi0bits+0x1e>
   17d2a:	3004      	adds	r0, #4
   17d2c:	011b      	lsls	r3, r3, #4
   17d2e:	0f9a      	lsrs	r2, r3, #30
   17d30:	d101      	bne.n	17d36 <__hi0bits+0x26>
   17d32:	3002      	adds	r0, #2
   17d34:	009b      	lsls	r3, r3, #2
   17d36:	2b00      	cmp	r3, #0
   17d38:	db03      	blt.n	17d42 <__hi0bits+0x32>
   17d3a:	3001      	adds	r0, #1
   17d3c:	005b      	lsls	r3, r3, #1
   17d3e:	d400      	bmi.n	17d42 <__hi0bits+0x32>
   17d40:	2020      	movs	r0, #32
   17d42:	4770      	bx	lr

00017d44 <__lo0bits>:
   17d44:	6803      	ldr	r3, [r0, #0]
   17d46:	075a      	lsls	r2, r3, #29
   17d48:	d009      	beq.n	17d5e <__lo0bits+0x1a>
   17d4a:	2200      	movs	r2, #0
   17d4c:	07d9      	lsls	r1, r3, #31
   17d4e:	d404      	bmi.n	17d5a <__lo0bits+0x16>
   17d50:	079a      	lsls	r2, r3, #30
   17d52:	d420      	bmi.n	17d96 <__lo0bits+0x52>
   17d54:	2202      	movs	r2, #2
   17d56:	089b      	lsrs	r3, r3, #2
   17d58:	6003      	str	r3, [r0, #0]
   17d5a:	0010      	movs	r0, r2
   17d5c:	4770      	bx	lr
   17d5e:	0419      	lsls	r1, r3, #16
   17d60:	2200      	movs	r2, #0
   17d62:	2900      	cmp	r1, #0
   17d64:	d101      	bne.n	17d6a <__lo0bits+0x26>
   17d66:	0c1b      	lsrs	r3, r3, #16
   17d68:	3210      	adds	r2, #16
   17d6a:	21ff      	movs	r1, #255	; 0xff
   17d6c:	4219      	tst	r1, r3
   17d6e:	d101      	bne.n	17d74 <__lo0bits+0x30>
   17d70:	3208      	adds	r2, #8
   17d72:	0a1b      	lsrs	r3, r3, #8
   17d74:	0719      	lsls	r1, r3, #28
   17d76:	d101      	bne.n	17d7c <__lo0bits+0x38>
   17d78:	3204      	adds	r2, #4
   17d7a:	091b      	lsrs	r3, r3, #4
   17d7c:	0799      	lsls	r1, r3, #30
   17d7e:	d101      	bne.n	17d84 <__lo0bits+0x40>
   17d80:	3202      	adds	r2, #2
   17d82:	089b      	lsrs	r3, r3, #2
   17d84:	07d9      	lsls	r1, r3, #31
   17d86:	d404      	bmi.n	17d92 <__lo0bits+0x4e>
   17d88:	085b      	lsrs	r3, r3, #1
   17d8a:	d101      	bne.n	17d90 <__lo0bits+0x4c>
   17d8c:	2220      	movs	r2, #32
   17d8e:	e7e4      	b.n	17d5a <__lo0bits+0x16>
   17d90:	3201      	adds	r2, #1
   17d92:	6003      	str	r3, [r0, #0]
   17d94:	e7e1      	b.n	17d5a <__lo0bits+0x16>
   17d96:	085b      	lsrs	r3, r3, #1
   17d98:	6003      	str	r3, [r0, #0]
   17d9a:	2201      	movs	r2, #1
   17d9c:	e7dd      	b.n	17d5a <__lo0bits+0x16>
   17d9e:	46c0      	nop			; (mov r8, r8)

00017da0 <__i2b>:
   17da0:	b510      	push	{r4, lr}
   17da2:	000c      	movs	r4, r1
   17da4:	2101      	movs	r1, #1
   17da6:	f7ff ff3b 	bl	17c20 <_Balloc>
   17daa:	2301      	movs	r3, #1
   17dac:	6144      	str	r4, [r0, #20]
   17dae:	6103      	str	r3, [r0, #16]
   17db0:	bd10      	pop	{r4, pc}
   17db2:	46c0      	nop			; (mov r8, r8)

00017db4 <__multiply>:
   17db4:	b5f0      	push	{r4, r5, r6, r7, lr}
   17db6:	4657      	mov	r7, sl
   17db8:	464e      	mov	r6, r9
   17dba:	4645      	mov	r5, r8
   17dbc:	46de      	mov	lr, fp
   17dbe:	b5e0      	push	{r5, r6, r7, lr}
   17dc0:	6914      	ldr	r4, [r2, #16]
   17dc2:	690e      	ldr	r6, [r1, #16]
   17dc4:	b085      	sub	sp, #20
   17dc6:	000f      	movs	r7, r1
   17dc8:	0015      	movs	r5, r2
   17dca:	42a6      	cmp	r6, r4
   17dcc:	da04      	bge.n	17dd8 <__multiply+0x24>
   17dce:	0033      	movs	r3, r6
   17dd0:	0017      	movs	r7, r2
   17dd2:	0026      	movs	r6, r4
   17dd4:	000d      	movs	r5, r1
   17dd6:	001c      	movs	r4, r3
   17dd8:	1933      	adds	r3, r6, r4
   17dda:	4698      	mov	r8, r3
   17ddc:	68bb      	ldr	r3, [r7, #8]
   17dde:	6879      	ldr	r1, [r7, #4]
   17de0:	4598      	cmp	r8, r3
   17de2:	dd00      	ble.n	17de6 <__multiply+0x32>
   17de4:	3101      	adds	r1, #1
   17de6:	f7ff ff1b 	bl	17c20 <_Balloc>
   17dea:	2214      	movs	r2, #20
   17dec:	0003      	movs	r3, r0
   17dee:	4694      	mov	ip, r2
   17df0:	4463      	add	r3, ip
   17df2:	469b      	mov	fp, r3
   17df4:	4643      	mov	r3, r8
   17df6:	009b      	lsls	r3, r3, #2
   17df8:	445b      	add	r3, fp
   17dfa:	0019      	movs	r1, r3
   17dfc:	9302      	str	r3, [sp, #8]
   17dfe:	9003      	str	r0, [sp, #12]
   17e00:	465b      	mov	r3, fp
   17e02:	2200      	movs	r2, #0
   17e04:	458b      	cmp	fp, r1
   17e06:	d203      	bcs.n	17e10 <__multiply+0x5c>
   17e08:	9902      	ldr	r1, [sp, #8]
   17e0a:	c304      	stmia	r3!, {r2}
   17e0c:	4299      	cmp	r1, r3
   17e0e:	d8fc      	bhi.n	17e0a <__multiply+0x56>
   17e10:	2314      	movs	r3, #20
   17e12:	00a4      	lsls	r4, r4, #2
   17e14:	469a      	mov	sl, r3
   17e16:	3714      	adds	r7, #20
   17e18:	0023      	movs	r3, r4
   17e1a:	46bc      	mov	ip, r7
   17e1c:	44aa      	add	sl, r5
   17e1e:	00b6      	lsls	r6, r6, #2
   17e20:	4453      	add	r3, sl
   17e22:	9700      	str	r7, [sp, #0]
   17e24:	44b4      	add	ip, r6
   17e26:	9301      	str	r3, [sp, #4]
   17e28:	459a      	cmp	sl, r3
   17e2a:	d24f      	bcs.n	17ecc <__multiply+0x118>
   17e2c:	4653      	mov	r3, sl
   17e2e:	681b      	ldr	r3, [r3, #0]
   17e30:	041e      	lsls	r6, r3, #16
   17e32:	0c36      	lsrs	r6, r6, #16
   17e34:	d020      	beq.n	17e78 <__multiply+0xc4>
   17e36:	465c      	mov	r4, fp
   17e38:	2700      	movs	r7, #0
   17e3a:	9d00      	ldr	r5, [sp, #0]
   17e3c:	0021      	movs	r1, r4
   17e3e:	cc08      	ldmia	r4!, {r3}
   17e40:	cd04      	ldmia	r5!, {r2}
   17e42:	4699      	mov	r9, r3
   17e44:	4648      	mov	r0, r9
   17e46:	0413      	lsls	r3, r2, #16
   17e48:	0c1b      	lsrs	r3, r3, #16
   17e4a:	4373      	muls	r3, r6
   17e4c:	0400      	lsls	r0, r0, #16
   17e4e:	0c00      	lsrs	r0, r0, #16
   17e50:	181b      	adds	r3, r3, r0
   17e52:	19d8      	adds	r0, r3, r7
   17e54:	0c13      	lsrs	r3, r2, #16
   17e56:	464a      	mov	r2, r9
   17e58:	4373      	muls	r3, r6
   17e5a:	0c12      	lsrs	r2, r2, #16
   17e5c:	189b      	adds	r3, r3, r2
   17e5e:	0c02      	lsrs	r2, r0, #16
   17e60:	189b      	adds	r3, r3, r2
   17e62:	0402      	lsls	r2, r0, #16
   17e64:	0c1f      	lsrs	r7, r3, #16
   17e66:	0c12      	lsrs	r2, r2, #16
   17e68:	041b      	lsls	r3, r3, #16
   17e6a:	4313      	orrs	r3, r2
   17e6c:	600b      	str	r3, [r1, #0]
   17e6e:	45ac      	cmp	ip, r5
   17e70:	d8e4      	bhi.n	17e3c <__multiply+0x88>
   17e72:	4653      	mov	r3, sl
   17e74:	6027      	str	r7, [r4, #0]
   17e76:	681b      	ldr	r3, [r3, #0]
   17e78:	0c1e      	lsrs	r6, r3, #16
   17e7a:	d020      	beq.n	17ebe <__multiply+0x10a>
   17e7c:	465b      	mov	r3, fp
   17e7e:	2100      	movs	r1, #0
   17e80:	681b      	ldr	r3, [r3, #0]
   17e82:	465c      	mov	r4, fp
   17e84:	0018      	movs	r0, r3
   17e86:	000f      	movs	r7, r1
   17e88:	4662      	mov	r2, ip
   17e8a:	9d00      	ldr	r5, [sp, #0]
   17e8c:	8829      	ldrh	r1, [r5, #0]
   17e8e:	0c00      	lsrs	r0, r0, #16
   17e90:	4371      	muls	r1, r6
   17e92:	1809      	adds	r1, r1, r0
   17e94:	19c9      	adds	r1, r1, r7
   17e96:	041b      	lsls	r3, r3, #16
   17e98:	0408      	lsls	r0, r1, #16
   17e9a:	0c1b      	lsrs	r3, r3, #16
   17e9c:	4303      	orrs	r3, r0
   17e9e:	6023      	str	r3, [r4, #0]
   17ea0:	cd08      	ldmia	r5!, {r3}
   17ea2:	6860      	ldr	r0, [r4, #4]
   17ea4:	0c1b      	lsrs	r3, r3, #16
   17ea6:	4373      	muls	r3, r6
   17ea8:	0407      	lsls	r7, r0, #16
   17eaa:	0c3f      	lsrs	r7, r7, #16
   17eac:	19db      	adds	r3, r3, r7
   17eae:	0c09      	lsrs	r1, r1, #16
   17eb0:	185b      	adds	r3, r3, r1
   17eb2:	0c1f      	lsrs	r7, r3, #16
   17eb4:	3404      	adds	r4, #4
   17eb6:	42aa      	cmp	r2, r5
   17eb8:	d8e8      	bhi.n	17e8c <__multiply+0xd8>
   17eba:	4694      	mov	ip, r2
   17ebc:	6023      	str	r3, [r4, #0]
   17ebe:	2304      	movs	r3, #4
   17ec0:	4699      	mov	r9, r3
   17ec2:	9b01      	ldr	r3, [sp, #4]
   17ec4:	44ca      	add	sl, r9
   17ec6:	44cb      	add	fp, r9
   17ec8:	4553      	cmp	r3, sl
   17eca:	d8af      	bhi.n	17e2c <__multiply+0x78>
   17ecc:	4643      	mov	r3, r8
   17ece:	2b00      	cmp	r3, #0
   17ed0:	dd0e      	ble.n	17ef0 <__multiply+0x13c>
   17ed2:	9b02      	ldr	r3, [sp, #8]
   17ed4:	3b04      	subs	r3, #4
   17ed6:	681a      	ldr	r2, [r3, #0]
   17ed8:	2a00      	cmp	r2, #0
   17eda:	d109      	bne.n	17ef0 <__multiply+0x13c>
   17edc:	4642      	mov	r2, r8
   17ede:	e003      	b.n	17ee8 <__multiply+0x134>
   17ee0:	3b04      	subs	r3, #4
   17ee2:	6819      	ldr	r1, [r3, #0]
   17ee4:	2900      	cmp	r1, #0
   17ee6:	d102      	bne.n	17eee <__multiply+0x13a>
   17ee8:	3a01      	subs	r2, #1
   17eea:	2a00      	cmp	r2, #0
   17eec:	d1f8      	bne.n	17ee0 <__multiply+0x12c>
   17eee:	4690      	mov	r8, r2
   17ef0:	9b03      	ldr	r3, [sp, #12]
   17ef2:	4642      	mov	r2, r8
   17ef4:	0018      	movs	r0, r3
   17ef6:	611a      	str	r2, [r3, #16]
   17ef8:	b005      	add	sp, #20
   17efa:	bc3c      	pop	{r2, r3, r4, r5}
   17efc:	4690      	mov	r8, r2
   17efe:	4699      	mov	r9, r3
   17f00:	46a2      	mov	sl, r4
   17f02:	46ab      	mov	fp, r5
   17f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17f06:	46c0      	nop			; (mov r8, r8)

00017f08 <__pow5mult>:
   17f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f0a:	4647      	mov	r7, r8
   17f0c:	46ce      	mov	lr, r9
   17f0e:	2303      	movs	r3, #3
   17f10:	b580      	push	{r7, lr}
   17f12:	4680      	mov	r8, r0
   17f14:	000f      	movs	r7, r1
   17f16:	0014      	movs	r4, r2
   17f18:	4013      	ands	r3, r2
   17f1a:	d13a      	bne.n	17f92 <__pow5mult+0x8a>
   17f1c:	10a4      	asrs	r4, r4, #2
   17f1e:	003e      	movs	r6, r7
   17f20:	2c00      	cmp	r4, #0
   17f22:	d025      	beq.n	17f70 <__pow5mult+0x68>
   17f24:	4643      	mov	r3, r8
   17f26:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   17f28:	2d00      	cmp	r5, #0
   17f2a:	d03b      	beq.n	17fa4 <__pow5mult+0x9c>
   17f2c:	003e      	movs	r6, r7
   17f2e:	2300      	movs	r3, #0
   17f30:	2701      	movs	r7, #1
   17f32:	4699      	mov	r9, r3
   17f34:	4227      	tst	r7, r4
   17f36:	d107      	bne.n	17f48 <__pow5mult+0x40>
   17f38:	1064      	asrs	r4, r4, #1
   17f3a:	d019      	beq.n	17f70 <__pow5mult+0x68>
   17f3c:	6828      	ldr	r0, [r5, #0]
   17f3e:	2800      	cmp	r0, #0
   17f40:	d01b      	beq.n	17f7a <__pow5mult+0x72>
   17f42:	0005      	movs	r5, r0
   17f44:	4227      	tst	r7, r4
   17f46:	d0f7      	beq.n	17f38 <__pow5mult+0x30>
   17f48:	002a      	movs	r2, r5
   17f4a:	0031      	movs	r1, r6
   17f4c:	4640      	mov	r0, r8
   17f4e:	f7ff ff31 	bl	17db4 <__multiply>
   17f52:	2e00      	cmp	r6, #0
   17f54:	d01b      	beq.n	17f8e <__pow5mult+0x86>
   17f56:	4642      	mov	r2, r8
   17f58:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   17f5a:	6873      	ldr	r3, [r6, #4]
   17f5c:	4694      	mov	ip, r2
   17f5e:	009b      	lsls	r3, r3, #2
   17f60:	4463      	add	r3, ip
   17f62:	681a      	ldr	r2, [r3, #0]
   17f64:	1064      	asrs	r4, r4, #1
   17f66:	6032      	str	r2, [r6, #0]
   17f68:	601e      	str	r6, [r3, #0]
   17f6a:	0006      	movs	r6, r0
   17f6c:	2c00      	cmp	r4, #0
   17f6e:	d1e5      	bne.n	17f3c <__pow5mult+0x34>
   17f70:	0030      	movs	r0, r6
   17f72:	bc0c      	pop	{r2, r3}
   17f74:	4690      	mov	r8, r2
   17f76:	4699      	mov	r9, r3
   17f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17f7a:	002a      	movs	r2, r5
   17f7c:	0029      	movs	r1, r5
   17f7e:	4640      	mov	r0, r8
   17f80:	f7ff ff18 	bl	17db4 <__multiply>
   17f84:	464b      	mov	r3, r9
   17f86:	6028      	str	r0, [r5, #0]
   17f88:	6003      	str	r3, [r0, #0]
   17f8a:	0005      	movs	r5, r0
   17f8c:	e7da      	b.n	17f44 <__pow5mult+0x3c>
   17f8e:	0006      	movs	r6, r0
   17f90:	e7d2      	b.n	17f38 <__pow5mult+0x30>
   17f92:	4a0b      	ldr	r2, [pc, #44]	; (17fc0 <__pow5mult+0xb8>)
   17f94:	3b01      	subs	r3, #1
   17f96:	009b      	lsls	r3, r3, #2
   17f98:	589a      	ldr	r2, [r3, r2]
   17f9a:	2300      	movs	r3, #0
   17f9c:	f7ff fe72 	bl	17c84 <__multadd>
   17fa0:	0007      	movs	r7, r0
   17fa2:	e7bb      	b.n	17f1c <__pow5mult+0x14>
   17fa4:	2101      	movs	r1, #1
   17fa6:	4640      	mov	r0, r8
   17fa8:	f7ff fe3a 	bl	17c20 <_Balloc>
   17fac:	4b05      	ldr	r3, [pc, #20]	; (17fc4 <__pow5mult+0xbc>)
   17fae:	0005      	movs	r5, r0
   17fb0:	6143      	str	r3, [r0, #20]
   17fb2:	2301      	movs	r3, #1
   17fb4:	6103      	str	r3, [r0, #16]
   17fb6:	4643      	mov	r3, r8
   17fb8:	6498      	str	r0, [r3, #72]	; 0x48
   17fba:	2300      	movs	r3, #0
   17fbc:	6003      	str	r3, [r0, #0]
   17fbe:	e7b5      	b.n	17f2c <__pow5mult+0x24>
   17fc0:	00019c68 	.word	0x00019c68
   17fc4:	00000271 	.word	0x00000271

00017fc8 <__lshift>:
   17fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17fca:	464e      	mov	r6, r9
   17fcc:	4645      	mov	r5, r8
   17fce:	46de      	mov	lr, fp
   17fd0:	4657      	mov	r7, sl
   17fd2:	b5e0      	push	{r5, r6, r7, lr}
   17fd4:	000e      	movs	r6, r1
   17fd6:	6933      	ldr	r3, [r6, #16]
   17fd8:	1154      	asrs	r4, r2, #5
   17fda:	4698      	mov	r8, r3
   17fdc:	44a0      	add	r8, r4
   17fde:	4643      	mov	r3, r8
   17fe0:	1c5d      	adds	r5, r3, #1
   17fe2:	68b3      	ldr	r3, [r6, #8]
   17fe4:	4683      	mov	fp, r0
   17fe6:	4691      	mov	r9, r2
   17fe8:	6849      	ldr	r1, [r1, #4]
   17fea:	429d      	cmp	r5, r3
   17fec:	dd03      	ble.n	17ff6 <__lshift+0x2e>
   17fee:	3101      	adds	r1, #1
   17ff0:	005b      	lsls	r3, r3, #1
   17ff2:	429d      	cmp	r5, r3
   17ff4:	dcfb      	bgt.n	17fee <__lshift+0x26>
   17ff6:	4658      	mov	r0, fp
   17ff8:	f7ff fe12 	bl	17c20 <_Balloc>
   17ffc:	0003      	movs	r3, r0
   17ffe:	4684      	mov	ip, r0
   18000:	3314      	adds	r3, #20
   18002:	2c00      	cmp	r4, #0
   18004:	dd06      	ble.n	18014 <__lshift+0x4c>
   18006:	2100      	movs	r1, #0
   18008:	00a4      	lsls	r4, r4, #2
   1800a:	001a      	movs	r2, r3
   1800c:	191b      	adds	r3, r3, r4
   1800e:	c202      	stmia	r2!, {r1}
   18010:	4293      	cmp	r3, r2
   18012:	d1fc      	bne.n	1800e <__lshift+0x46>
   18014:	6932      	ldr	r2, [r6, #16]
   18016:	4648      	mov	r0, r9
   18018:	0097      	lsls	r7, r2, #2
   1801a:	0031      	movs	r1, r6
   1801c:	221f      	movs	r2, #31
   1801e:	3114      	adds	r1, #20
   18020:	4010      	ands	r0, r2
   18022:	19cf      	adds	r7, r1, r7
   18024:	4681      	mov	r9, r0
   18026:	2800      	cmp	r0, #0
   18028:	d025      	beq.n	18076 <__lshift+0xae>
   1802a:	2220      	movs	r2, #32
   1802c:	1a12      	subs	r2, r2, r0
   1802e:	4692      	mov	sl, r2
   18030:	2200      	movs	r2, #0
   18032:	4648      	mov	r0, r9
   18034:	680c      	ldr	r4, [r1, #0]
   18036:	4084      	lsls	r4, r0
   18038:	4650      	mov	r0, sl
   1803a:	4314      	orrs	r4, r2
   1803c:	601c      	str	r4, [r3, #0]
   1803e:	c904      	ldmia	r1!, {r2}
   18040:	3304      	adds	r3, #4
   18042:	40c2      	lsrs	r2, r0
   18044:	428f      	cmp	r7, r1
   18046:	d8f4      	bhi.n	18032 <__lshift+0x6a>
   18048:	601a      	str	r2, [r3, #0]
   1804a:	2a00      	cmp	r2, #0
   1804c:	d001      	beq.n	18052 <__lshift+0x8a>
   1804e:	4645      	mov	r5, r8
   18050:	3502      	adds	r5, #2
   18052:	4663      	mov	r3, ip
   18054:	3d01      	subs	r5, #1
   18056:	611d      	str	r5, [r3, #16]
   18058:	6873      	ldr	r3, [r6, #4]
   1805a:	4660      	mov	r0, ip
   1805c:	009a      	lsls	r2, r3, #2
   1805e:	465b      	mov	r3, fp
   18060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   18062:	189b      	adds	r3, r3, r2
   18064:	681a      	ldr	r2, [r3, #0]
   18066:	6032      	str	r2, [r6, #0]
   18068:	601e      	str	r6, [r3, #0]
   1806a:	bc3c      	pop	{r2, r3, r4, r5}
   1806c:	4690      	mov	r8, r2
   1806e:	4699      	mov	r9, r3
   18070:	46a2      	mov	sl, r4
   18072:	46ab      	mov	fp, r5
   18074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18076:	c904      	ldmia	r1!, {r2}
   18078:	c304      	stmia	r3!, {r2}
   1807a:	428f      	cmp	r7, r1
   1807c:	d9e9      	bls.n	18052 <__lshift+0x8a>
   1807e:	c904      	ldmia	r1!, {r2}
   18080:	c304      	stmia	r3!, {r2}
   18082:	428f      	cmp	r7, r1
   18084:	d8f7      	bhi.n	18076 <__lshift+0xae>
   18086:	e7e4      	b.n	18052 <__lshift+0x8a>

00018088 <__mcmp>:
   18088:	690a      	ldr	r2, [r1, #16]
   1808a:	6903      	ldr	r3, [r0, #16]
   1808c:	b530      	push	{r4, r5, lr}
   1808e:	0005      	movs	r5, r0
   18090:	1a98      	subs	r0, r3, r2
   18092:	d111      	bne.n	180b8 <__mcmp+0x30>
   18094:	0092      	lsls	r2, r2, #2
   18096:	3514      	adds	r5, #20
   18098:	3114      	adds	r1, #20
   1809a:	18ab      	adds	r3, r5, r2
   1809c:	1889      	adds	r1, r1, r2
   1809e:	e001      	b.n	180a4 <__mcmp+0x1c>
   180a0:	429d      	cmp	r5, r3
   180a2:	d209      	bcs.n	180b8 <__mcmp+0x30>
   180a4:	3b04      	subs	r3, #4
   180a6:	3904      	subs	r1, #4
   180a8:	681c      	ldr	r4, [r3, #0]
   180aa:	680a      	ldr	r2, [r1, #0]
   180ac:	4294      	cmp	r4, r2
   180ae:	d0f7      	beq.n	180a0 <__mcmp+0x18>
   180b0:	4294      	cmp	r4, r2
   180b2:	4180      	sbcs	r0, r0
   180b4:	2201      	movs	r2, #1
   180b6:	4310      	orrs	r0, r2
   180b8:	bd30      	pop	{r4, r5, pc}
   180ba:	46c0      	nop			; (mov r8, r8)

000180bc <__mdiff>:
   180bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   180be:	4645      	mov	r5, r8
   180c0:	46de      	mov	lr, fp
   180c2:	4657      	mov	r7, sl
   180c4:	464e      	mov	r6, r9
   180c6:	0014      	movs	r4, r2
   180c8:	690b      	ldr	r3, [r1, #16]
   180ca:	6912      	ldr	r2, [r2, #16]
   180cc:	b5e0      	push	{r5, r6, r7, lr}
   180ce:	4688      	mov	r8, r1
   180d0:	1a9d      	subs	r5, r3, r2
   180d2:	d11a      	bne.n	1810a <__mdiff+0x4e>
   180d4:	000f      	movs	r7, r1
   180d6:	2114      	movs	r1, #20
   180d8:	468c      	mov	ip, r1
   180da:	0092      	lsls	r2, r2, #2
   180dc:	3714      	adds	r7, #20
   180de:	44a4      	add	ip, r4
   180e0:	18bb      	adds	r3, r7, r2
   180e2:	4462      	add	r2, ip
   180e4:	e002      	b.n	180ec <__mdiff+0x30>
   180e6:	429f      	cmp	r7, r3
   180e8:	d300      	bcc.n	180ec <__mdiff+0x30>
   180ea:	e070      	b.n	181ce <__mdiff+0x112>
   180ec:	3b04      	subs	r3, #4
   180ee:	3a04      	subs	r2, #4
   180f0:	681e      	ldr	r6, [r3, #0]
   180f2:	6811      	ldr	r1, [r2, #0]
   180f4:	428e      	cmp	r6, r1
   180f6:	d0f6      	beq.n	180e6 <__mdiff+0x2a>
   180f8:	d300      	bcc.n	180fc <__mdiff+0x40>
   180fa:	e071      	b.n	181e0 <__mdiff+0x124>
   180fc:	4643      	mov	r3, r8
   180fe:	003e      	movs	r6, r7
   18100:	46a0      	mov	r8, r4
   18102:	4667      	mov	r7, ip
   18104:	001c      	movs	r4, r3
   18106:	2501      	movs	r5, #1
   18108:	e006      	b.n	18118 <__mdiff+0x5c>
   1810a:	2d00      	cmp	r5, #0
   1810c:	db6a      	blt.n	181e4 <__mdiff+0x128>
   1810e:	4647      	mov	r7, r8
   18110:	0026      	movs	r6, r4
   18112:	2500      	movs	r5, #0
   18114:	3714      	adds	r7, #20
   18116:	3614      	adds	r6, #20
   18118:	4643      	mov	r3, r8
   1811a:	6859      	ldr	r1, [r3, #4]
   1811c:	f7ff fd80 	bl	17c20 <_Balloc>
   18120:	4643      	mov	r3, r8
   18122:	4681      	mov	r9, r0
   18124:	60c5      	str	r5, [r0, #12]
   18126:	6918      	ldr	r0, [r3, #16]
   18128:	464d      	mov	r5, r9
   1812a:	0083      	lsls	r3, r0, #2
   1812c:	469c      	mov	ip, r3
   1812e:	6923      	ldr	r3, [r4, #16]
   18130:	44bc      	add	ip, r7
   18132:	009b      	lsls	r3, r3, #2
   18134:	4698      	mov	r8, r3
   18136:	2300      	movs	r3, #0
   18138:	44b0      	add	r8, r6
   1813a:	3514      	adds	r5, #20
   1813c:	469a      	mov	sl, r3
   1813e:	e000      	b.n	18142 <__mdiff+0x86>
   18140:	0027      	movs	r7, r4
   18142:	ce04      	ldmia	r6!, {r2}
   18144:	003c      	movs	r4, r7
   18146:	4693      	mov	fp, r2
   18148:	4659      	mov	r1, fp
   1814a:	cc08      	ldmia	r4!, {r3}
   1814c:	0409      	lsls	r1, r1, #16
   1814e:	041a      	lsls	r2, r3, #16
   18150:	0c12      	lsrs	r2, r2, #16
   18152:	4452      	add	r2, sl
   18154:	0c09      	lsrs	r1, r1, #16
   18156:	1a52      	subs	r2, r2, r1
   18158:	0c19      	lsrs	r1, r3, #16
   1815a:	465b      	mov	r3, fp
   1815c:	0c1b      	lsrs	r3, r3, #16
   1815e:	1acb      	subs	r3, r1, r3
   18160:	1411      	asrs	r1, r2, #16
   18162:	185b      	adds	r3, r3, r1
   18164:	0412      	lsls	r2, r2, #16
   18166:	1419      	asrs	r1, r3, #16
   18168:	0c12      	lsrs	r2, r2, #16
   1816a:	041b      	lsls	r3, r3, #16
   1816c:	468a      	mov	sl, r1
   1816e:	4313      	orrs	r3, r2
   18170:	1d29      	adds	r1, r5, #4
   18172:	602b      	str	r3, [r5, #0]
   18174:	000d      	movs	r5, r1
   18176:	45b0      	cmp	r8, r6
   18178:	d8e2      	bhi.n	18140 <__mdiff+0x84>
   1817a:	45a4      	cmp	ip, r4
   1817c:	d916      	bls.n	181ac <__mdiff+0xf0>
   1817e:	cc08      	ldmia	r4!, {r3}
   18180:	041a      	lsls	r2, r3, #16
   18182:	0c12      	lsrs	r2, r2, #16
   18184:	4452      	add	r2, sl
   18186:	1416      	asrs	r6, r2, #16
   18188:	0c1b      	lsrs	r3, r3, #16
   1818a:	199b      	adds	r3, r3, r6
   1818c:	0412      	lsls	r2, r2, #16
   1818e:	141e      	asrs	r6, r3, #16
   18190:	0c12      	lsrs	r2, r2, #16
   18192:	041b      	lsls	r3, r3, #16
   18194:	4313      	orrs	r3, r2
   18196:	46b2      	mov	sl, r6
   18198:	c508      	stmia	r5!, {r3}
   1819a:	45a4      	cmp	ip, r4
   1819c:	d8ef      	bhi.n	1817e <__mdiff+0xc2>
   1819e:	4662      	mov	r2, ip
   181a0:	2403      	movs	r4, #3
   181a2:	1bd2      	subs	r2, r2, r7
   181a4:	3a05      	subs	r2, #5
   181a6:	43a2      	bics	r2, r4
   181a8:	3204      	adds	r2, #4
   181aa:	1889      	adds	r1, r1, r2
   181ac:	3904      	subs	r1, #4
   181ae:	2b00      	cmp	r3, #0
   181b0:	d104      	bne.n	181bc <__mdiff+0x100>
   181b2:	3904      	subs	r1, #4
   181b4:	680b      	ldr	r3, [r1, #0]
   181b6:	3801      	subs	r0, #1
   181b8:	2b00      	cmp	r3, #0
   181ba:	d0fa      	beq.n	181b2 <__mdiff+0xf6>
   181bc:	464b      	mov	r3, r9
   181be:	6118      	str	r0, [r3, #16]
   181c0:	4648      	mov	r0, r9
   181c2:	bc3c      	pop	{r2, r3, r4, r5}
   181c4:	4690      	mov	r8, r2
   181c6:	4699      	mov	r9, r3
   181c8:	46a2      	mov	sl, r4
   181ca:	46ab      	mov	fp, r5
   181cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   181ce:	2100      	movs	r1, #0
   181d0:	f7ff fd26 	bl	17c20 <_Balloc>
   181d4:	2301      	movs	r3, #1
   181d6:	6103      	str	r3, [r0, #16]
   181d8:	2300      	movs	r3, #0
   181da:	4681      	mov	r9, r0
   181dc:	6143      	str	r3, [r0, #20]
   181de:	e7ef      	b.n	181c0 <__mdiff+0x104>
   181e0:	4666      	mov	r6, ip
   181e2:	e799      	b.n	18118 <__mdiff+0x5c>
   181e4:	0027      	movs	r7, r4
   181e6:	000e      	movs	r6, r1
   181e8:	46a0      	mov	r8, r4
   181ea:	3714      	adds	r7, #20
   181ec:	3614      	adds	r6, #20
   181ee:	000c      	movs	r4, r1
   181f0:	2501      	movs	r5, #1
   181f2:	e791      	b.n	18118 <__mdiff+0x5c>

000181f4 <__d2b>:
   181f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   181f6:	2101      	movs	r1, #1
   181f8:	001c      	movs	r4, r3
   181fa:	b083      	sub	sp, #12
   181fc:	9e08      	ldr	r6, [sp, #32]
   181fe:	0015      	movs	r5, r2
   18200:	f7ff fd0e 	bl	17c20 <_Balloc>
   18204:	0323      	lsls	r3, r4, #12
   18206:	0064      	lsls	r4, r4, #1
   18208:	0007      	movs	r7, r0
   1820a:	0b1b      	lsrs	r3, r3, #12
   1820c:	0d64      	lsrs	r4, r4, #21
   1820e:	d002      	beq.n	18216 <__d2b+0x22>
   18210:	2280      	movs	r2, #128	; 0x80
   18212:	0352      	lsls	r2, r2, #13
   18214:	4313      	orrs	r3, r2
   18216:	9301      	str	r3, [sp, #4]
   18218:	2d00      	cmp	r5, #0
   1821a:	d019      	beq.n	18250 <__d2b+0x5c>
   1821c:	4668      	mov	r0, sp
   1821e:	9500      	str	r5, [sp, #0]
   18220:	f7ff fd90 	bl	17d44 <__lo0bits>
   18224:	2800      	cmp	r0, #0
   18226:	d130      	bne.n	1828a <__d2b+0x96>
   18228:	9b00      	ldr	r3, [sp, #0]
   1822a:	617b      	str	r3, [r7, #20]
   1822c:	9b01      	ldr	r3, [sp, #4]
   1822e:	61bb      	str	r3, [r7, #24]
   18230:	1e5a      	subs	r2, r3, #1
   18232:	4193      	sbcs	r3, r2
   18234:	1c5d      	adds	r5, r3, #1
   18236:	613d      	str	r5, [r7, #16]
   18238:	2c00      	cmp	r4, #0
   1823a:	d014      	beq.n	18266 <__d2b+0x72>
   1823c:	4b19      	ldr	r3, [pc, #100]	; (182a4 <__d2b+0xb0>)
   1823e:	469c      	mov	ip, r3
   18240:	2335      	movs	r3, #53	; 0x35
   18242:	4464      	add	r4, ip
   18244:	1824      	adds	r4, r4, r0
   18246:	1a18      	subs	r0, r3, r0
   18248:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1824a:	6034      	str	r4, [r6, #0]
   1824c:	6018      	str	r0, [r3, #0]
   1824e:	e019      	b.n	18284 <__d2b+0x90>
   18250:	a801      	add	r0, sp, #4
   18252:	f7ff fd77 	bl	17d44 <__lo0bits>
   18256:	9b01      	ldr	r3, [sp, #4]
   18258:	3020      	adds	r0, #32
   1825a:	617b      	str	r3, [r7, #20]
   1825c:	2301      	movs	r3, #1
   1825e:	2501      	movs	r5, #1
   18260:	613b      	str	r3, [r7, #16]
   18262:	2c00      	cmp	r4, #0
   18264:	d1ea      	bne.n	1823c <__d2b+0x48>
   18266:	4b10      	ldr	r3, [pc, #64]	; (182a8 <__d2b+0xb4>)
   18268:	469c      	mov	ip, r3
   1826a:	4b10      	ldr	r3, [pc, #64]	; (182ac <__d2b+0xb8>)
   1826c:	4460      	add	r0, ip
   1826e:	18eb      	adds	r3, r5, r3
   18270:	009b      	lsls	r3, r3, #2
   18272:	18fb      	adds	r3, r7, r3
   18274:	6030      	str	r0, [r6, #0]
   18276:	6958      	ldr	r0, [r3, #20]
   18278:	f7ff fd4a 	bl	17d10 <__hi0bits>
   1827c:	016b      	lsls	r3, r5, #5
   1827e:	1a18      	subs	r0, r3, r0
   18280:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18282:	6018      	str	r0, [r3, #0]
   18284:	0038      	movs	r0, r7
   18286:	b003      	add	sp, #12
   18288:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1828a:	9b01      	ldr	r3, [sp, #4]
   1828c:	2220      	movs	r2, #32
   1828e:	0019      	movs	r1, r3
   18290:	1a12      	subs	r2, r2, r0
   18292:	4091      	lsls	r1, r2
   18294:	000a      	movs	r2, r1
   18296:	40c3      	lsrs	r3, r0
   18298:	9900      	ldr	r1, [sp, #0]
   1829a:	9301      	str	r3, [sp, #4]
   1829c:	430a      	orrs	r2, r1
   1829e:	617a      	str	r2, [r7, #20]
   182a0:	e7c5      	b.n	1822e <__d2b+0x3a>
   182a2:	46c0      	nop			; (mov r8, r8)
   182a4:	fffffbcd 	.word	0xfffffbcd
   182a8:	fffffbce 	.word	0xfffffbce
   182ac:	3fffffff 	.word	0x3fffffff

000182b0 <_realloc_r>:
   182b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   182b2:	464e      	mov	r6, r9
   182b4:	4645      	mov	r5, r8
   182b6:	46de      	mov	lr, fp
   182b8:	4657      	mov	r7, sl
   182ba:	b5e0      	push	{r5, r6, r7, lr}
   182bc:	b085      	sub	sp, #20
   182be:	9001      	str	r0, [sp, #4]
   182c0:	000e      	movs	r6, r1
   182c2:	0015      	movs	r5, r2
   182c4:	2900      	cmp	r1, #0
   182c6:	d100      	bne.n	182ca <_realloc_r+0x1a>
   182c8:	e09e      	b.n	18408 <_realloc_r+0x158>
   182ca:	0037      	movs	r7, r6
   182cc:	9801      	ldr	r0, [sp, #4]
   182ce:	3f08      	subs	r7, #8
   182d0:	f7ff fc96 	bl	17c00 <__malloc_lock>
   182d4:	687a      	ldr	r2, [r7, #4]
   182d6:	2303      	movs	r3, #3
   182d8:	0014      	movs	r4, r2
   182da:	439c      	bics	r4, r3
   182dc:	002b      	movs	r3, r5
   182de:	330b      	adds	r3, #11
   182e0:	46b9      	mov	r9, r7
   182e2:	2b16      	cmp	r3, #22
   182e4:	d847      	bhi.n	18376 <_realloc_r+0xc6>
   182e6:	2110      	movs	r1, #16
   182e8:	2310      	movs	r3, #16
   182ea:	4688      	mov	r8, r1
   182ec:	4545      	cmp	r5, r8
   182ee:	d846      	bhi.n	1837e <_realloc_r+0xce>
   182f0:	429c      	cmp	r4, r3
   182f2:	da49      	bge.n	18388 <_realloc_r+0xd8>
   182f4:	49cc      	ldr	r1, [pc, #816]	; (18628 <_realloc_r+0x378>)
   182f6:	1938      	adds	r0, r7, r4
   182f8:	468b      	mov	fp, r1
   182fa:	6889      	ldr	r1, [r1, #8]
   182fc:	9002      	str	r0, [sp, #8]
   182fe:	4288      	cmp	r0, r1
   18300:	d100      	bne.n	18304 <_realloc_r+0x54>
   18302:	e0c2      	b.n	1848a <_realloc_r+0x1da>
   18304:	2101      	movs	r1, #1
   18306:	468a      	mov	sl, r1
   18308:	6840      	ldr	r0, [r0, #4]
   1830a:	0001      	movs	r1, r0
   1830c:	9003      	str	r0, [sp, #12]
   1830e:	4650      	mov	r0, sl
   18310:	4381      	bics	r1, r0
   18312:	468c      	mov	ip, r1
   18314:	9902      	ldr	r1, [sp, #8]
   18316:	468b      	mov	fp, r1
   18318:	44dc      	add	ip, fp
   1831a:	4661      	mov	r1, ip
   1831c:	6849      	ldr	r1, [r1, #4]
   1831e:	4201      	tst	r1, r0
   18320:	d04d      	beq.n	183be <_realloc_r+0x10e>
   18322:	4210      	tst	r0, r2
   18324:	d100      	bne.n	18328 <_realloc_r+0x78>
   18326:	e0a2      	b.n	1846e <_realloc_r+0x1be>
   18328:	0029      	movs	r1, r5
   1832a:	9801      	ldr	r0, [sp, #4]
   1832c:	f7ff f924 	bl	17578 <_malloc_r>
   18330:	1e05      	subs	r5, r0, #0
   18332:	d039      	beq.n	183a8 <_realloc_r+0xf8>
   18334:	2301      	movs	r3, #1
   18336:	0002      	movs	r2, r0
   18338:	6879      	ldr	r1, [r7, #4]
   1833a:	3a08      	subs	r2, #8
   1833c:	4399      	bics	r1, r3
   1833e:	187f      	adds	r7, r7, r1
   18340:	42ba      	cmp	r2, r7
   18342:	d100      	bne.n	18346 <_realloc_r+0x96>
   18344:	e12e      	b.n	185a4 <_realloc_r+0x2f4>
   18346:	1f22      	subs	r2, r4, #4
   18348:	2a24      	cmp	r2, #36	; 0x24
   1834a:	d900      	bls.n	1834e <_realloc_r+0x9e>
   1834c:	e114      	b.n	18578 <_realloc_r+0x2c8>
   1834e:	2a13      	cmp	r2, #19
   18350:	d900      	bls.n	18354 <_realloc_r+0xa4>
   18352:	e0e8      	b.n	18526 <_realloc_r+0x276>
   18354:	0003      	movs	r3, r0
   18356:	0032      	movs	r2, r6
   18358:	6811      	ldr	r1, [r2, #0]
   1835a:	6019      	str	r1, [r3, #0]
   1835c:	6851      	ldr	r1, [r2, #4]
   1835e:	6059      	str	r1, [r3, #4]
   18360:	6892      	ldr	r2, [r2, #8]
   18362:	609a      	str	r2, [r3, #8]
   18364:	9c01      	ldr	r4, [sp, #4]
   18366:	0031      	movs	r1, r6
   18368:	0020      	movs	r0, r4
   1836a:	f7fe fde7 	bl	16f3c <_free_r>
   1836e:	0020      	movs	r0, r4
   18370:	f7ff fc4e 	bl	17c10 <__malloc_unlock>
   18374:	e01b      	b.n	183ae <_realloc_r+0xfe>
   18376:	2107      	movs	r1, #7
   18378:	438b      	bics	r3, r1
   1837a:	4698      	mov	r8, r3
   1837c:	d5b6      	bpl.n	182ec <_realloc_r+0x3c>
   1837e:	230c      	movs	r3, #12
   18380:	9a01      	ldr	r2, [sp, #4]
   18382:	2500      	movs	r5, #0
   18384:	6013      	str	r3, [r2, #0]
   18386:	e012      	b.n	183ae <_realloc_r+0xfe>
   18388:	0035      	movs	r5, r6
   1838a:	4643      	mov	r3, r8
   1838c:	1ae3      	subs	r3, r4, r3
   1838e:	2b0f      	cmp	r3, #15
   18390:	d825      	bhi.n	183de <_realloc_r+0x12e>
   18392:	464b      	mov	r3, r9
   18394:	2201      	movs	r2, #1
   18396:	4649      	mov	r1, r9
   18398:	685b      	ldr	r3, [r3, #4]
   1839a:	4013      	ands	r3, r2
   1839c:	4323      	orrs	r3, r4
   1839e:	604b      	str	r3, [r1, #4]
   183a0:	444c      	add	r4, r9
   183a2:	6863      	ldr	r3, [r4, #4]
   183a4:	431a      	orrs	r2, r3
   183a6:	6062      	str	r2, [r4, #4]
   183a8:	9801      	ldr	r0, [sp, #4]
   183aa:	f7ff fc31 	bl	17c10 <__malloc_unlock>
   183ae:	0028      	movs	r0, r5
   183b0:	b005      	add	sp, #20
   183b2:	bc3c      	pop	{r2, r3, r4, r5}
   183b4:	4690      	mov	r8, r2
   183b6:	4699      	mov	r9, r3
   183b8:	46a2      	mov	sl, r4
   183ba:	46ab      	mov	fp, r5
   183bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   183be:	2103      	movs	r1, #3
   183c0:	9803      	ldr	r0, [sp, #12]
   183c2:	468c      	mov	ip, r1
   183c4:	4388      	bics	r0, r1
   183c6:	1821      	adds	r1, r4, r0
   183c8:	468b      	mov	fp, r1
   183ca:	4299      	cmp	r1, r3
   183cc:	db21      	blt.n	18412 <_realloc_r+0x162>
   183ce:	9a02      	ldr	r2, [sp, #8]
   183d0:	0035      	movs	r5, r6
   183d2:	68d3      	ldr	r3, [r2, #12]
   183d4:	6892      	ldr	r2, [r2, #8]
   183d6:	465c      	mov	r4, fp
   183d8:	60d3      	str	r3, [r2, #12]
   183da:	609a      	str	r2, [r3, #8]
   183dc:	e7d5      	b.n	1838a <_realloc_r+0xda>
   183de:	464a      	mov	r2, r9
   183e0:	2001      	movs	r0, #1
   183e2:	4646      	mov	r6, r8
   183e4:	6852      	ldr	r2, [r2, #4]
   183e6:	4649      	mov	r1, r9
   183e8:	4002      	ands	r2, r0
   183ea:	4332      	orrs	r2, r6
   183ec:	464e      	mov	r6, r9
   183ee:	4441      	add	r1, r8
   183f0:	4303      	orrs	r3, r0
   183f2:	6072      	str	r2, [r6, #4]
   183f4:	444c      	add	r4, r9
   183f6:	604b      	str	r3, [r1, #4]
   183f8:	6863      	ldr	r3, [r4, #4]
   183fa:	3108      	adds	r1, #8
   183fc:	4318      	orrs	r0, r3
   183fe:	6060      	str	r0, [r4, #4]
   18400:	9801      	ldr	r0, [sp, #4]
   18402:	f7fe fd9b 	bl	16f3c <_free_r>
   18406:	e7cf      	b.n	183a8 <_realloc_r+0xf8>
   18408:	0011      	movs	r1, r2
   1840a:	f7ff f8b5 	bl	17578 <_malloc_r>
   1840e:	0005      	movs	r5, r0
   18410:	e7cd      	b.n	183ae <_realloc_r+0xfe>
   18412:	4651      	mov	r1, sl
   18414:	4211      	tst	r1, r2
   18416:	d000      	beq.n	1841a <_realloc_r+0x16a>
   18418:	e786      	b.n	18328 <_realloc_r+0x78>
   1841a:	4661      	mov	r1, ip
   1841c:	683a      	ldr	r2, [r7, #0]
   1841e:	1aba      	subs	r2, r7, r2
   18420:	4692      	mov	sl, r2
   18422:	6852      	ldr	r2, [r2, #4]
   18424:	438a      	bics	r2, r1
   18426:	1880      	adds	r0, r0, r2
   18428:	4683      	mov	fp, r0
   1842a:	44a3      	add	fp, r4
   1842c:	459b      	cmp	fp, r3
   1842e:	db26      	blt.n	1847e <_realloc_r+0x1ce>
   18430:	9a02      	ldr	r2, [sp, #8]
   18432:	68d3      	ldr	r3, [r2, #12]
   18434:	6892      	ldr	r2, [r2, #8]
   18436:	60d3      	str	r3, [r2, #12]
   18438:	609a      	str	r2, [r3, #8]
   1843a:	4653      	mov	r3, sl
   1843c:	4652      	mov	r2, sl
   1843e:	4655      	mov	r5, sl
   18440:	6892      	ldr	r2, [r2, #8]
   18442:	68db      	ldr	r3, [r3, #12]
   18444:	3508      	adds	r5, #8
   18446:	60d3      	str	r3, [r2, #12]
   18448:	609a      	str	r2, [r3, #8]
   1844a:	1f22      	subs	r2, r4, #4
   1844c:	2a24      	cmp	r2, #36	; 0x24
   1844e:	d900      	bls.n	18452 <_realloc_r+0x1a2>
   18450:	e096      	b.n	18580 <_realloc_r+0x2d0>
   18452:	2a13      	cmp	r2, #19
   18454:	d972      	bls.n	1853c <_realloc_r+0x28c>
   18456:	4653      	mov	r3, sl
   18458:	6831      	ldr	r1, [r6, #0]
   1845a:	6099      	str	r1, [r3, #8]
   1845c:	6871      	ldr	r1, [r6, #4]
   1845e:	60d9      	str	r1, [r3, #12]
   18460:	2a1b      	cmp	r2, #27
   18462:	d900      	bls.n	18466 <_realloc_r+0x1b6>
   18464:	e0a4      	b.n	185b0 <_realloc_r+0x300>
   18466:	0032      	movs	r2, r6
   18468:	3310      	adds	r3, #16
   1846a:	3208      	adds	r2, #8
   1846c:	e068      	b.n	18540 <_realloc_r+0x290>
   1846e:	683a      	ldr	r2, [r7, #0]
   18470:	1aba      	subs	r2, r7, r2
   18472:	4692      	mov	sl, r2
   18474:	4651      	mov	r1, sl
   18476:	2203      	movs	r2, #3
   18478:	6849      	ldr	r1, [r1, #4]
   1847a:	4391      	bics	r1, r2
   1847c:	000a      	movs	r2, r1
   1847e:	4693      	mov	fp, r2
   18480:	44a3      	add	fp, r4
   18482:	459b      	cmp	fp, r3
   18484:	da00      	bge.n	18488 <_realloc_r+0x1d8>
   18486:	e74f      	b.n	18328 <_realloc_r+0x78>
   18488:	e7d7      	b.n	1843a <_realloc_r+0x18a>
   1848a:	2003      	movs	r0, #3
   1848c:	9902      	ldr	r1, [sp, #8]
   1848e:	4684      	mov	ip, r0
   18490:	6849      	ldr	r1, [r1, #4]
   18492:	4381      	bics	r1, r0
   18494:	4640      	mov	r0, r8
   18496:	1909      	adds	r1, r1, r4
   18498:	3010      	adds	r0, #16
   1849a:	9002      	str	r0, [sp, #8]
   1849c:	4281      	cmp	r1, r0
   1849e:	da58      	bge.n	18552 <_realloc_r+0x2a2>
   184a0:	07d2      	lsls	r2, r2, #31
   184a2:	d500      	bpl.n	184a6 <_realloc_r+0x1f6>
   184a4:	e740      	b.n	18328 <_realloc_r+0x78>
   184a6:	4660      	mov	r0, ip
   184a8:	683a      	ldr	r2, [r7, #0]
   184aa:	1aba      	subs	r2, r7, r2
   184ac:	4692      	mov	sl, r2
   184ae:	6852      	ldr	r2, [r2, #4]
   184b0:	4382      	bics	r2, r0
   184b2:	9802      	ldr	r0, [sp, #8]
   184b4:	1851      	adds	r1, r2, r1
   184b6:	9103      	str	r1, [sp, #12]
   184b8:	4288      	cmp	r0, r1
   184ba:	dce0      	bgt.n	1847e <_realloc_r+0x1ce>
   184bc:	4653      	mov	r3, sl
   184be:	4652      	mov	r2, sl
   184c0:	4655      	mov	r5, sl
   184c2:	6892      	ldr	r2, [r2, #8]
   184c4:	68db      	ldr	r3, [r3, #12]
   184c6:	3508      	adds	r5, #8
   184c8:	60d3      	str	r3, [r2, #12]
   184ca:	609a      	str	r2, [r3, #8]
   184cc:	1f22      	subs	r2, r4, #4
   184ce:	2a24      	cmp	r2, #36	; 0x24
   184d0:	d900      	bls.n	184d4 <_realloc_r+0x224>
   184d2:	e08e      	b.n	185f2 <_realloc_r+0x342>
   184d4:	2a13      	cmp	r2, #19
   184d6:	d800      	bhi.n	184da <_realloc_r+0x22a>
   184d8:	e088      	b.n	185ec <_realloc_r+0x33c>
   184da:	4653      	mov	r3, sl
   184dc:	6831      	ldr	r1, [r6, #0]
   184de:	6099      	str	r1, [r3, #8]
   184e0:	6871      	ldr	r1, [r6, #4]
   184e2:	60d9      	str	r1, [r3, #12]
   184e4:	2a1b      	cmp	r2, #27
   184e6:	d900      	bls.n	184ea <_realloc_r+0x23a>
   184e8:	e088      	b.n	185fc <_realloc_r+0x34c>
   184ea:	0032      	movs	r2, r6
   184ec:	3310      	adds	r3, #16
   184ee:	3208      	adds	r2, #8
   184f0:	6811      	ldr	r1, [r2, #0]
   184f2:	6019      	str	r1, [r3, #0]
   184f4:	6851      	ldr	r1, [r2, #4]
   184f6:	6059      	str	r1, [r3, #4]
   184f8:	6892      	ldr	r2, [r2, #8]
   184fa:	609a      	str	r2, [r3, #8]
   184fc:	4651      	mov	r1, sl
   184fe:	465b      	mov	r3, fp
   18500:	4642      	mov	r2, r8
   18502:	4441      	add	r1, r8
   18504:	6099      	str	r1, [r3, #8]
   18506:	9b03      	ldr	r3, [sp, #12]
   18508:	9801      	ldr	r0, [sp, #4]
   1850a:	1a9a      	subs	r2, r3, r2
   1850c:	2301      	movs	r3, #1
   1850e:	431a      	orrs	r2, r3
   18510:	604a      	str	r2, [r1, #4]
   18512:	4652      	mov	r2, sl
   18514:	6852      	ldr	r2, [r2, #4]
   18516:	4013      	ands	r3, r2
   18518:	4642      	mov	r2, r8
   1851a:	4313      	orrs	r3, r2
   1851c:	4652      	mov	r2, sl
   1851e:	6053      	str	r3, [r2, #4]
   18520:	f7ff fb76 	bl	17c10 <__malloc_unlock>
   18524:	e743      	b.n	183ae <_realloc_r+0xfe>
   18526:	6833      	ldr	r3, [r6, #0]
   18528:	6003      	str	r3, [r0, #0]
   1852a:	6873      	ldr	r3, [r6, #4]
   1852c:	6043      	str	r3, [r0, #4]
   1852e:	2a1b      	cmp	r2, #27
   18530:	d82d      	bhi.n	1858e <_realloc_r+0x2de>
   18532:	0003      	movs	r3, r0
   18534:	0032      	movs	r2, r6
   18536:	3308      	adds	r3, #8
   18538:	3208      	adds	r2, #8
   1853a:	e70d      	b.n	18358 <_realloc_r+0xa8>
   1853c:	002b      	movs	r3, r5
   1853e:	0032      	movs	r2, r6
   18540:	6811      	ldr	r1, [r2, #0]
   18542:	465c      	mov	r4, fp
   18544:	6019      	str	r1, [r3, #0]
   18546:	6851      	ldr	r1, [r2, #4]
   18548:	46d1      	mov	r9, sl
   1854a:	6059      	str	r1, [r3, #4]
   1854c:	6892      	ldr	r2, [r2, #8]
   1854e:	609a      	str	r2, [r3, #8]
   18550:	e71b      	b.n	1838a <_realloc_r+0xda>
   18552:	4643      	mov	r3, r8
   18554:	18fa      	adds	r2, r7, r3
   18556:	465b      	mov	r3, fp
   18558:	609a      	str	r2, [r3, #8]
   1855a:	4643      	mov	r3, r8
   1855c:	1ac9      	subs	r1, r1, r3
   1855e:	2301      	movs	r3, #1
   18560:	4319      	orrs	r1, r3
   18562:	6051      	str	r1, [r2, #4]
   18564:	687a      	ldr	r2, [r7, #4]
   18566:	9801      	ldr	r0, [sp, #4]
   18568:	4013      	ands	r3, r2
   1856a:	4642      	mov	r2, r8
   1856c:	4313      	orrs	r3, r2
   1856e:	607b      	str	r3, [r7, #4]
   18570:	f7ff fb4e 	bl	17c10 <__malloc_unlock>
   18574:	0035      	movs	r5, r6
   18576:	e71a      	b.n	183ae <_realloc_r+0xfe>
   18578:	0031      	movs	r1, r6
   1857a:	f7ff faf1 	bl	17b60 <memmove>
   1857e:	e6f1      	b.n	18364 <_realloc_r+0xb4>
   18580:	0031      	movs	r1, r6
   18582:	0028      	movs	r0, r5
   18584:	f7ff faec 	bl	17b60 <memmove>
   18588:	465c      	mov	r4, fp
   1858a:	46d1      	mov	r9, sl
   1858c:	e6fd      	b.n	1838a <_realloc_r+0xda>
   1858e:	68b3      	ldr	r3, [r6, #8]
   18590:	6083      	str	r3, [r0, #8]
   18592:	68f3      	ldr	r3, [r6, #12]
   18594:	60c3      	str	r3, [r0, #12]
   18596:	2a24      	cmp	r2, #36	; 0x24
   18598:	d015      	beq.n	185c6 <_realloc_r+0x316>
   1859a:	0003      	movs	r3, r0
   1859c:	0032      	movs	r2, r6
   1859e:	3310      	adds	r3, #16
   185a0:	3210      	adds	r2, #16
   185a2:	e6d9      	b.n	18358 <_realloc_r+0xa8>
   185a4:	6853      	ldr	r3, [r2, #4]
   185a6:	2203      	movs	r2, #3
   185a8:	4393      	bics	r3, r2
   185aa:	18e4      	adds	r4, r4, r3
   185ac:	0035      	movs	r5, r6
   185ae:	e6ec      	b.n	1838a <_realloc_r+0xda>
   185b0:	4653      	mov	r3, sl
   185b2:	68b1      	ldr	r1, [r6, #8]
   185b4:	6119      	str	r1, [r3, #16]
   185b6:	68f1      	ldr	r1, [r6, #12]
   185b8:	6159      	str	r1, [r3, #20]
   185ba:	2a24      	cmp	r2, #36	; 0x24
   185bc:	d00c      	beq.n	185d8 <_realloc_r+0x328>
   185be:	0032      	movs	r2, r6
   185c0:	3318      	adds	r3, #24
   185c2:	3210      	adds	r2, #16
   185c4:	e7bc      	b.n	18540 <_realloc_r+0x290>
   185c6:	6933      	ldr	r3, [r6, #16]
   185c8:	0032      	movs	r2, r6
   185ca:	6103      	str	r3, [r0, #16]
   185cc:	0003      	movs	r3, r0
   185ce:	6971      	ldr	r1, [r6, #20]
   185d0:	3318      	adds	r3, #24
   185d2:	3218      	adds	r2, #24
   185d4:	6141      	str	r1, [r0, #20]
   185d6:	e6bf      	b.n	18358 <_realloc_r+0xa8>
   185d8:	4653      	mov	r3, sl
   185da:	6932      	ldr	r2, [r6, #16]
   185dc:	4651      	mov	r1, sl
   185de:	619a      	str	r2, [r3, #24]
   185e0:	0032      	movs	r2, r6
   185e2:	6970      	ldr	r0, [r6, #20]
   185e4:	3320      	adds	r3, #32
   185e6:	3218      	adds	r2, #24
   185e8:	61c8      	str	r0, [r1, #28]
   185ea:	e7a9      	b.n	18540 <_realloc_r+0x290>
   185ec:	002b      	movs	r3, r5
   185ee:	0032      	movs	r2, r6
   185f0:	e77e      	b.n	184f0 <_realloc_r+0x240>
   185f2:	0031      	movs	r1, r6
   185f4:	0028      	movs	r0, r5
   185f6:	f7ff fab3 	bl	17b60 <memmove>
   185fa:	e77f      	b.n	184fc <_realloc_r+0x24c>
   185fc:	4653      	mov	r3, sl
   185fe:	68b1      	ldr	r1, [r6, #8]
   18600:	6119      	str	r1, [r3, #16]
   18602:	68f1      	ldr	r1, [r6, #12]
   18604:	6159      	str	r1, [r3, #20]
   18606:	2a24      	cmp	r2, #36	; 0x24
   18608:	d003      	beq.n	18612 <_realloc_r+0x362>
   1860a:	0032      	movs	r2, r6
   1860c:	3318      	adds	r3, #24
   1860e:	3210      	adds	r2, #16
   18610:	e76e      	b.n	184f0 <_realloc_r+0x240>
   18612:	4653      	mov	r3, sl
   18614:	6932      	ldr	r2, [r6, #16]
   18616:	4651      	mov	r1, sl
   18618:	619a      	str	r2, [r3, #24]
   1861a:	0032      	movs	r2, r6
   1861c:	6970      	ldr	r0, [r6, #20]
   1861e:	3320      	adds	r3, #32
   18620:	3218      	adds	r2, #24
   18622:	61c8      	str	r0, [r1, #28]
   18624:	e764      	b.n	184f0 <_realloc_r+0x240>
   18626:	46c0      	nop			; (mov r8, r8)
   18628:	2000043c 	.word	0x2000043c

0001862c <_sbrk_r>:
   1862c:	2300      	movs	r3, #0
   1862e:	b570      	push	{r4, r5, r6, lr}
   18630:	4c06      	ldr	r4, [pc, #24]	; (1864c <_sbrk_r+0x20>)
   18632:	0005      	movs	r5, r0
   18634:	0008      	movs	r0, r1
   18636:	6023      	str	r3, [r4, #0]
   18638:	f7ea fa7a 	bl	2b30 <_sbrk>
   1863c:	1c43      	adds	r3, r0, #1
   1863e:	d000      	beq.n	18642 <_sbrk_r+0x16>
   18640:	bd70      	pop	{r4, r5, r6, pc}
   18642:	6823      	ldr	r3, [r4, #0]
   18644:	2b00      	cmp	r3, #0
   18646:	d0fb      	beq.n	18640 <_sbrk_r+0x14>
   18648:	602b      	str	r3, [r5, #0]
   1864a:	e7f9      	b.n	18640 <_sbrk_r+0x14>
   1864c:	20001de8 	.word	0x20001de8

00018650 <__sread>:
   18650:	b570      	push	{r4, r5, r6, lr}
   18652:	000c      	movs	r4, r1
   18654:	250e      	movs	r5, #14
   18656:	5f49      	ldrsh	r1, [r1, r5]
   18658:	f000 faa0 	bl	18b9c <_read_r>
   1865c:	2800      	cmp	r0, #0
   1865e:	db03      	blt.n	18668 <__sread+0x18>
   18660:	6d23      	ldr	r3, [r4, #80]	; 0x50
   18662:	181b      	adds	r3, r3, r0
   18664:	6523      	str	r3, [r4, #80]	; 0x50
   18666:	bd70      	pop	{r4, r5, r6, pc}
   18668:	89a3      	ldrh	r3, [r4, #12]
   1866a:	4a02      	ldr	r2, [pc, #8]	; (18674 <__sread+0x24>)
   1866c:	4013      	ands	r3, r2
   1866e:	81a3      	strh	r3, [r4, #12]
   18670:	e7f9      	b.n	18666 <__sread+0x16>
   18672:	46c0      	nop			; (mov r8, r8)
   18674:	ffffefff 	.word	0xffffefff

00018678 <__swrite>:
   18678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1867a:	0016      	movs	r6, r2
   1867c:	001f      	movs	r7, r3
   1867e:	220c      	movs	r2, #12
   18680:	5e8b      	ldrsh	r3, [r1, r2]
   18682:	0005      	movs	r5, r0
   18684:	000c      	movs	r4, r1
   18686:	05da      	lsls	r2, r3, #23
   18688:	d507      	bpl.n	1869a <__swrite+0x22>
   1868a:	230e      	movs	r3, #14
   1868c:	5ec9      	ldrsh	r1, [r1, r3]
   1868e:	2200      	movs	r2, #0
   18690:	2302      	movs	r3, #2
   18692:	f000 fa59 	bl	18b48 <_lseek_r>
   18696:	220c      	movs	r2, #12
   18698:	5ea3      	ldrsh	r3, [r4, r2]
   1869a:	4a05      	ldr	r2, [pc, #20]	; (186b0 <__swrite+0x38>)
   1869c:	0028      	movs	r0, r5
   1869e:	4013      	ands	r3, r2
   186a0:	81a3      	strh	r3, [r4, #12]
   186a2:	0032      	movs	r2, r6
   186a4:	230e      	movs	r3, #14
   186a6:	5ee1      	ldrsh	r1, [r4, r3]
   186a8:	003b      	movs	r3, r7
   186aa:	f000 f86b 	bl	18784 <_write_r>
   186ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   186b0:	ffffefff 	.word	0xffffefff

000186b4 <__sseek>:
   186b4:	b570      	push	{r4, r5, r6, lr}
   186b6:	000c      	movs	r4, r1
   186b8:	250e      	movs	r5, #14
   186ba:	5f49      	ldrsh	r1, [r1, r5]
   186bc:	f000 fa44 	bl	18b48 <_lseek_r>
   186c0:	1c43      	adds	r3, r0, #1
   186c2:	d006      	beq.n	186d2 <__sseek+0x1e>
   186c4:	2380      	movs	r3, #128	; 0x80
   186c6:	89a2      	ldrh	r2, [r4, #12]
   186c8:	015b      	lsls	r3, r3, #5
   186ca:	4313      	orrs	r3, r2
   186cc:	81a3      	strh	r3, [r4, #12]
   186ce:	6520      	str	r0, [r4, #80]	; 0x50
   186d0:	bd70      	pop	{r4, r5, r6, pc}
   186d2:	89a3      	ldrh	r3, [r4, #12]
   186d4:	4a01      	ldr	r2, [pc, #4]	; (186dc <__sseek+0x28>)
   186d6:	4013      	ands	r3, r2
   186d8:	81a3      	strh	r3, [r4, #12]
   186da:	e7f9      	b.n	186d0 <__sseek+0x1c>
   186dc:	ffffefff 	.word	0xffffefff

000186e0 <__sclose>:
   186e0:	b510      	push	{r4, lr}
   186e2:	230e      	movs	r3, #14
   186e4:	5ec9      	ldrsh	r1, [r1, r3]
   186e6:	f000 f907 	bl	188f8 <_close_r>
   186ea:	bd10      	pop	{r4, pc}

000186ec <__sprint_r.part.0>:
   186ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   186ee:	464e      	mov	r6, r9
   186f0:	4645      	mov	r5, r8
   186f2:	46de      	mov	lr, fp
   186f4:	4657      	mov	r7, sl
   186f6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   186f8:	b5e0      	push	{r5, r6, r7, lr}
   186fa:	4680      	mov	r8, r0
   186fc:	000e      	movs	r6, r1
   186fe:	4691      	mov	r9, r2
   18700:	049b      	lsls	r3, r3, #18
   18702:	d531      	bpl.n	18768 <__sprint_r.part.0+0x7c>
   18704:	6813      	ldr	r3, [r2, #0]
   18706:	469a      	mov	sl, r3
   18708:	6893      	ldr	r3, [r2, #8]
   1870a:	2b00      	cmp	r3, #0
   1870c:	d02a      	beq.n	18764 <__sprint_r.part.0+0x78>
   1870e:	4652      	mov	r2, sl
   18710:	6852      	ldr	r2, [r2, #4]
   18712:	2500      	movs	r5, #0
   18714:	4693      	mov	fp, r2
   18716:	0897      	lsrs	r7, r2, #2
   18718:	4652      	mov	r2, sl
   1871a:	6814      	ldr	r4, [r2, #0]
   1871c:	d104      	bne.n	18728 <__sprint_r.part.0+0x3c>
   1871e:	e016      	b.n	1874e <__sprint_r.part.0+0x62>
   18720:	3501      	adds	r5, #1
   18722:	3404      	adds	r4, #4
   18724:	42af      	cmp	r7, r5
   18726:	d010      	beq.n	1874a <__sprint_r.part.0+0x5e>
   18728:	0032      	movs	r2, r6
   1872a:	6821      	ldr	r1, [r4, #0]
   1872c:	4640      	mov	r0, r8
   1872e:	f000 f9a7 	bl	18a80 <_fputwc_r>
   18732:	1c43      	adds	r3, r0, #1
   18734:	d1f4      	bne.n	18720 <__sprint_r.part.0+0x34>
   18736:	464a      	mov	r2, r9
   18738:	2300      	movs	r3, #0
   1873a:	6093      	str	r3, [r2, #8]
   1873c:	6053      	str	r3, [r2, #4]
   1873e:	bc3c      	pop	{r2, r3, r4, r5}
   18740:	4690      	mov	r8, r2
   18742:	4699      	mov	r9, r3
   18744:	46a2      	mov	sl, r4
   18746:	46ab      	mov	fp, r5
   18748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1874a:	464b      	mov	r3, r9
   1874c:	689b      	ldr	r3, [r3, #8]
   1874e:	465a      	mov	r2, fp
   18750:	2103      	movs	r1, #3
   18752:	438a      	bics	r2, r1
   18754:	1a9b      	subs	r3, r3, r2
   18756:	464a      	mov	r2, r9
   18758:	6093      	str	r3, [r2, #8]
   1875a:	2208      	movs	r2, #8
   1875c:	4694      	mov	ip, r2
   1875e:	44e2      	add	sl, ip
   18760:	2b00      	cmp	r3, #0
   18762:	d1d4      	bne.n	1870e <__sprint_r.part.0+0x22>
   18764:	2000      	movs	r0, #0
   18766:	e7e6      	b.n	18736 <__sprint_r.part.0+0x4a>
   18768:	f7fe fcc6 	bl	170f8 <__sfvwrite_r>
   1876c:	e7e3      	b.n	18736 <__sprint_r.part.0+0x4a>
   1876e:	46c0      	nop			; (mov r8, r8)

00018770 <__sprint_r>:
   18770:	6893      	ldr	r3, [r2, #8]
   18772:	b510      	push	{r4, lr}
   18774:	2b00      	cmp	r3, #0
   18776:	d002      	beq.n	1877e <__sprint_r+0xe>
   18778:	f7ff ffb8 	bl	186ec <__sprint_r.part.0>
   1877c:	bd10      	pop	{r4, pc}
   1877e:	6053      	str	r3, [r2, #4]
   18780:	2000      	movs	r0, #0
   18782:	e7fb      	b.n	1877c <__sprint_r+0xc>

00018784 <_write_r>:
   18784:	b570      	push	{r4, r5, r6, lr}
   18786:	0005      	movs	r5, r0
   18788:	0008      	movs	r0, r1
   1878a:	0011      	movs	r1, r2
   1878c:	2200      	movs	r2, #0
   1878e:	4c06      	ldr	r4, [pc, #24]	; (187a8 <_write_r+0x24>)
   18790:	6022      	str	r2, [r4, #0]
   18792:	001a      	movs	r2, r3
   18794:	f7ea f9a4 	bl	2ae0 <_write>
   18798:	1c43      	adds	r3, r0, #1
   1879a:	d000      	beq.n	1879e <_write_r+0x1a>
   1879c:	bd70      	pop	{r4, r5, r6, pc}
   1879e:	6823      	ldr	r3, [r4, #0]
   187a0:	2b00      	cmp	r3, #0
   187a2:	d0fb      	beq.n	1879c <_write_r+0x18>
   187a4:	602b      	str	r3, [r5, #0]
   187a6:	e7f9      	b.n	1879c <_write_r+0x18>
   187a8:	20001de8 	.word	0x20001de8

000187ac <__register_exitproc>:
   187ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   187ae:	464e      	mov	r6, r9
   187b0:	4645      	mov	r5, r8
   187b2:	46de      	mov	lr, fp
   187b4:	4657      	mov	r7, sl
   187b6:	b5e0      	push	{r5, r6, r7, lr}
   187b8:	4d36      	ldr	r5, [pc, #216]	; (18894 <__register_exitproc+0xe8>)
   187ba:	b083      	sub	sp, #12
   187bc:	0006      	movs	r6, r0
   187be:	6828      	ldr	r0, [r5, #0]
   187c0:	4698      	mov	r8, r3
   187c2:	000f      	movs	r7, r1
   187c4:	4691      	mov	r9, r2
   187c6:	f7fe fe51 	bl	1746c <__retarget_lock_acquire_recursive>
   187ca:	4b33      	ldr	r3, [pc, #204]	; (18898 <__register_exitproc+0xec>)
   187cc:	681c      	ldr	r4, [r3, #0]
   187ce:	23a4      	movs	r3, #164	; 0xa4
   187d0:	005b      	lsls	r3, r3, #1
   187d2:	58e0      	ldr	r0, [r4, r3]
   187d4:	2800      	cmp	r0, #0
   187d6:	d052      	beq.n	1887e <__register_exitproc+0xd2>
   187d8:	6843      	ldr	r3, [r0, #4]
   187da:	2b1f      	cmp	r3, #31
   187dc:	dc13      	bgt.n	18806 <__register_exitproc+0x5a>
   187de:	1c5a      	adds	r2, r3, #1
   187e0:	9201      	str	r2, [sp, #4]
   187e2:	2e00      	cmp	r6, #0
   187e4:	d128      	bne.n	18838 <__register_exitproc+0x8c>
   187e6:	9a01      	ldr	r2, [sp, #4]
   187e8:	3302      	adds	r3, #2
   187ea:	009b      	lsls	r3, r3, #2
   187ec:	6042      	str	r2, [r0, #4]
   187ee:	501f      	str	r7, [r3, r0]
   187f0:	6828      	ldr	r0, [r5, #0]
   187f2:	f7fe fe3d 	bl	17470 <__retarget_lock_release_recursive>
   187f6:	2000      	movs	r0, #0
   187f8:	b003      	add	sp, #12
   187fa:	bc3c      	pop	{r2, r3, r4, r5}
   187fc:	4690      	mov	r8, r2
   187fe:	4699      	mov	r9, r3
   18800:	46a2      	mov	sl, r4
   18802:	46ab      	mov	fp, r5
   18804:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18806:	4b25      	ldr	r3, [pc, #148]	; (1889c <__register_exitproc+0xf0>)
   18808:	2b00      	cmp	r3, #0
   1880a:	d03d      	beq.n	18888 <__register_exitproc+0xdc>
   1880c:	20c8      	movs	r0, #200	; 0xc8
   1880e:	0040      	lsls	r0, r0, #1
   18810:	f7fe fea8 	bl	17564 <malloc>
   18814:	2800      	cmp	r0, #0
   18816:	d037      	beq.n	18888 <__register_exitproc+0xdc>
   18818:	22a4      	movs	r2, #164	; 0xa4
   1881a:	2300      	movs	r3, #0
   1881c:	0052      	lsls	r2, r2, #1
   1881e:	58a1      	ldr	r1, [r4, r2]
   18820:	6043      	str	r3, [r0, #4]
   18822:	6001      	str	r1, [r0, #0]
   18824:	50a0      	str	r0, [r4, r2]
   18826:	3240      	adds	r2, #64	; 0x40
   18828:	5083      	str	r3, [r0, r2]
   1882a:	3204      	adds	r2, #4
   1882c:	5083      	str	r3, [r0, r2]
   1882e:	3301      	adds	r3, #1
   18830:	9301      	str	r3, [sp, #4]
   18832:	2300      	movs	r3, #0
   18834:	2e00      	cmp	r6, #0
   18836:	d0d6      	beq.n	187e6 <__register_exitproc+0x3a>
   18838:	009a      	lsls	r2, r3, #2
   1883a:	4692      	mov	sl, r2
   1883c:	4482      	add	sl, r0
   1883e:	464a      	mov	r2, r9
   18840:	2188      	movs	r1, #136	; 0x88
   18842:	4654      	mov	r4, sl
   18844:	5062      	str	r2, [r4, r1]
   18846:	22c4      	movs	r2, #196	; 0xc4
   18848:	0052      	lsls	r2, r2, #1
   1884a:	4691      	mov	r9, r2
   1884c:	4481      	add	r9, r0
   1884e:	464a      	mov	r2, r9
   18850:	3987      	subs	r1, #135	; 0x87
   18852:	4099      	lsls	r1, r3
   18854:	6812      	ldr	r2, [r2, #0]
   18856:	468b      	mov	fp, r1
   18858:	430a      	orrs	r2, r1
   1885a:	4694      	mov	ip, r2
   1885c:	464a      	mov	r2, r9
   1885e:	4661      	mov	r1, ip
   18860:	6011      	str	r1, [r2, #0]
   18862:	2284      	movs	r2, #132	; 0x84
   18864:	4641      	mov	r1, r8
   18866:	0052      	lsls	r2, r2, #1
   18868:	50a1      	str	r1, [r4, r2]
   1886a:	2e02      	cmp	r6, #2
   1886c:	d1bb      	bne.n	187e6 <__register_exitproc+0x3a>
   1886e:	0002      	movs	r2, r0
   18870:	465c      	mov	r4, fp
   18872:	328d      	adds	r2, #141	; 0x8d
   18874:	32ff      	adds	r2, #255	; 0xff
   18876:	6811      	ldr	r1, [r2, #0]
   18878:	430c      	orrs	r4, r1
   1887a:	6014      	str	r4, [r2, #0]
   1887c:	e7b3      	b.n	187e6 <__register_exitproc+0x3a>
   1887e:	0020      	movs	r0, r4
   18880:	304d      	adds	r0, #77	; 0x4d
   18882:	30ff      	adds	r0, #255	; 0xff
   18884:	50e0      	str	r0, [r4, r3]
   18886:	e7a7      	b.n	187d8 <__register_exitproc+0x2c>
   18888:	6828      	ldr	r0, [r5, #0]
   1888a:	f7fe fdf1 	bl	17470 <__retarget_lock_release_recursive>
   1888e:	2001      	movs	r0, #1
   18890:	4240      	negs	r0, r0
   18892:	e7b1      	b.n	187f8 <__register_exitproc+0x4c>
   18894:	20000438 	.word	0x20000438
   18898:	00019998 	.word	0x00019998
   1889c:	00017565 	.word	0x00017565

000188a0 <_calloc_r>:
   188a0:	b510      	push	{r4, lr}
   188a2:	4351      	muls	r1, r2
   188a4:	f7fe fe68 	bl	17578 <_malloc_r>
   188a8:	1e04      	subs	r4, r0, #0
   188aa:	d01c      	beq.n	188e6 <_calloc_r+0x46>
   188ac:	0003      	movs	r3, r0
   188ae:	3b08      	subs	r3, #8
   188b0:	685a      	ldr	r2, [r3, #4]
   188b2:	2303      	movs	r3, #3
   188b4:	439a      	bics	r2, r3
   188b6:	3a04      	subs	r2, #4
   188b8:	2a24      	cmp	r2, #36	; 0x24
   188ba:	d816      	bhi.n	188ea <_calloc_r+0x4a>
   188bc:	0003      	movs	r3, r0
   188be:	2a13      	cmp	r2, #19
   188c0:	d90d      	bls.n	188de <_calloc_r+0x3e>
   188c2:	2100      	movs	r1, #0
   188c4:	3308      	adds	r3, #8
   188c6:	6001      	str	r1, [r0, #0]
   188c8:	6041      	str	r1, [r0, #4]
   188ca:	2a1b      	cmp	r2, #27
   188cc:	d907      	bls.n	188de <_calloc_r+0x3e>
   188ce:	6081      	str	r1, [r0, #8]
   188d0:	60c1      	str	r1, [r0, #12]
   188d2:	2a24      	cmp	r2, #36	; 0x24
   188d4:	d10d      	bne.n	188f2 <_calloc_r+0x52>
   188d6:	0003      	movs	r3, r0
   188d8:	6101      	str	r1, [r0, #16]
   188da:	3318      	adds	r3, #24
   188dc:	6141      	str	r1, [r0, #20]
   188de:	2200      	movs	r2, #0
   188e0:	601a      	str	r2, [r3, #0]
   188e2:	605a      	str	r2, [r3, #4]
   188e4:	609a      	str	r2, [r3, #8]
   188e6:	0020      	movs	r0, r4
   188e8:	bd10      	pop	{r4, pc}
   188ea:	2100      	movs	r1, #0
   188ec:	f7fb faf8 	bl	13ee0 <memset>
   188f0:	e7f9      	b.n	188e6 <_calloc_r+0x46>
   188f2:	0003      	movs	r3, r0
   188f4:	3310      	adds	r3, #16
   188f6:	e7f2      	b.n	188de <_calloc_r+0x3e>

000188f8 <_close_r>:
   188f8:	2300      	movs	r3, #0
   188fa:	b570      	push	{r4, r5, r6, lr}
   188fc:	4c06      	ldr	r4, [pc, #24]	; (18918 <_close_r+0x20>)
   188fe:	0005      	movs	r5, r0
   18900:	0008      	movs	r0, r1
   18902:	6023      	str	r3, [r4, #0]
   18904:	f7ea f926 	bl	2b54 <_close>
   18908:	1c43      	adds	r3, r0, #1
   1890a:	d000      	beq.n	1890e <_close_r+0x16>
   1890c:	bd70      	pop	{r4, r5, r6, pc}
   1890e:	6823      	ldr	r3, [r4, #0]
   18910:	2b00      	cmp	r3, #0
   18912:	d0fb      	beq.n	1890c <_close_r+0x14>
   18914:	602b      	str	r3, [r5, #0]
   18916:	e7f9      	b.n	1890c <_close_r+0x14>
   18918:	20001de8 	.word	0x20001de8

0001891c <_fclose_r>:
   1891c:	b570      	push	{r4, r5, r6, lr}
   1891e:	0005      	movs	r5, r0
   18920:	1e0c      	subs	r4, r1, #0
   18922:	d040      	beq.n	189a6 <_fclose_r+0x8a>
   18924:	2800      	cmp	r0, #0
   18926:	d002      	beq.n	1892e <_fclose_r+0x12>
   18928:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1892a:	2b00      	cmp	r3, #0
   1892c:	d03e      	beq.n	189ac <_fclose_r+0x90>
   1892e:	2601      	movs	r6, #1
   18930:	6e63      	ldr	r3, [r4, #100]	; 0x64
   18932:	4233      	tst	r3, r6
   18934:	d133      	bne.n	1899e <_fclose_r+0x82>
   18936:	89a3      	ldrh	r3, [r4, #12]
   18938:	059b      	lsls	r3, r3, #22
   1893a:	d543      	bpl.n	189c4 <_fclose_r+0xa8>
   1893c:	0021      	movs	r1, r4
   1893e:	0028      	movs	r0, r5
   18940:	f7fe f950 	bl	16be4 <__sflush_r>
   18944:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   18946:	0006      	movs	r6, r0
   18948:	2b00      	cmp	r3, #0
   1894a:	d004      	beq.n	18956 <_fclose_r+0x3a>
   1894c:	69e1      	ldr	r1, [r4, #28]
   1894e:	0028      	movs	r0, r5
   18950:	4798      	blx	r3
   18952:	2800      	cmp	r0, #0
   18954:	db44      	blt.n	189e0 <_fclose_r+0xc4>
   18956:	89a3      	ldrh	r3, [r4, #12]
   18958:	061b      	lsls	r3, r3, #24
   1895a:	d42a      	bmi.n	189b2 <_fclose_r+0x96>
   1895c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1895e:	2900      	cmp	r1, #0
   18960:	d008      	beq.n	18974 <_fclose_r+0x58>
   18962:	0023      	movs	r3, r4
   18964:	3340      	adds	r3, #64	; 0x40
   18966:	4299      	cmp	r1, r3
   18968:	d002      	beq.n	18970 <_fclose_r+0x54>
   1896a:	0028      	movs	r0, r5
   1896c:	f7fe fae6 	bl	16f3c <_free_r>
   18970:	2300      	movs	r3, #0
   18972:	6323      	str	r3, [r4, #48]	; 0x30
   18974:	6c61      	ldr	r1, [r4, #68]	; 0x44
   18976:	2900      	cmp	r1, #0
   18978:	d004      	beq.n	18984 <_fclose_r+0x68>
   1897a:	0028      	movs	r0, r5
   1897c:	f7fe fade 	bl	16f3c <_free_r>
   18980:	2300      	movs	r3, #0
   18982:	6463      	str	r3, [r4, #68]	; 0x44
   18984:	f7fe fa60 	bl	16e48 <__sfp_lock_acquire>
   18988:	2300      	movs	r3, #0
   1898a:	81a3      	strh	r3, [r4, #12]
   1898c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1898e:	07db      	lsls	r3, r3, #31
   18990:	d514      	bpl.n	189bc <_fclose_r+0xa0>
   18992:	6da0      	ldr	r0, [r4, #88]	; 0x58
   18994:	f7fe fd68 	bl	17468 <__retarget_lock_close_recursive>
   18998:	f7fe fa5e 	bl	16e58 <__sfp_lock_release>
   1899c:	e004      	b.n	189a8 <_fclose_r+0x8c>
   1899e:	220c      	movs	r2, #12
   189a0:	5ea3      	ldrsh	r3, [r4, r2]
   189a2:	2b00      	cmp	r3, #0
   189a4:	d1ca      	bne.n	1893c <_fclose_r+0x20>
   189a6:	2600      	movs	r6, #0
   189a8:	0030      	movs	r0, r6
   189aa:	bd70      	pop	{r4, r5, r6, pc}
   189ac:	f7fe fa1c 	bl	16de8 <__sinit>
   189b0:	e7bd      	b.n	1892e <_fclose_r+0x12>
   189b2:	6921      	ldr	r1, [r4, #16]
   189b4:	0028      	movs	r0, r5
   189b6:	f7fe fac1 	bl	16f3c <_free_r>
   189ba:	e7cf      	b.n	1895c <_fclose_r+0x40>
   189bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   189be:	f7fe fd57 	bl	17470 <__retarget_lock_release_recursive>
   189c2:	e7e6      	b.n	18992 <_fclose_r+0x76>
   189c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   189c6:	f7fe fd51 	bl	1746c <__retarget_lock_acquire_recursive>
   189ca:	220c      	movs	r2, #12
   189cc:	5ea3      	ldrsh	r3, [r4, r2]
   189ce:	2b00      	cmp	r3, #0
   189d0:	d1b4      	bne.n	1893c <_fclose_r+0x20>
   189d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   189d4:	401e      	ands	r6, r3
   189d6:	d1e6      	bne.n	189a6 <_fclose_r+0x8a>
   189d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   189da:	f7fe fd49 	bl	17470 <__retarget_lock_release_recursive>
   189de:	e7e3      	b.n	189a8 <_fclose_r+0x8c>
   189e0:	2601      	movs	r6, #1
   189e2:	4276      	negs	r6, r6
   189e4:	e7b7      	b.n	18956 <_fclose_r+0x3a>
   189e6:	46c0      	nop			; (mov r8, r8)

000189e8 <__fputwc>:
   189e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   189ea:	46ce      	mov	lr, r9
   189ec:	4647      	mov	r7, r8
   189ee:	b580      	push	{r7, lr}
   189f0:	b085      	sub	sp, #20
   189f2:	4680      	mov	r8, r0
   189f4:	4689      	mov	r9, r1
   189f6:	0014      	movs	r4, r2
   189f8:	f000 f896 	bl	18b28 <__locale_mb_cur_max>
   189fc:	2801      	cmp	r0, #1
   189fe:	d031      	beq.n	18a64 <__fputwc+0x7c>
   18a00:	0023      	movs	r3, r4
   18a02:	af03      	add	r7, sp, #12
   18a04:	335c      	adds	r3, #92	; 0x5c
   18a06:	464a      	mov	r2, r9
   18a08:	0039      	movs	r1, r7
   18a0a:	4640      	mov	r0, r8
   18a0c:	f000 f938 	bl	18c80 <_wcrtomb_r>
   18a10:	0006      	movs	r6, r0
   18a12:	1c43      	adds	r3, r0, #1
   18a14:	d021      	beq.n	18a5a <__fputwc+0x72>
   18a16:	2800      	cmp	r0, #0
   18a18:	d030      	beq.n	18a7c <__fputwc+0x94>
   18a1a:	7839      	ldrb	r1, [r7, #0]
   18a1c:	2500      	movs	r5, #0
   18a1e:	e007      	b.n	18a30 <__fputwc+0x48>
   18a20:	6823      	ldr	r3, [r4, #0]
   18a22:	1c5a      	adds	r2, r3, #1
   18a24:	6022      	str	r2, [r4, #0]
   18a26:	7019      	strb	r1, [r3, #0]
   18a28:	3501      	adds	r5, #1
   18a2a:	42b5      	cmp	r5, r6
   18a2c:	d226      	bcs.n	18a7c <__fputwc+0x94>
   18a2e:	5d79      	ldrb	r1, [r7, r5]
   18a30:	68a3      	ldr	r3, [r4, #8]
   18a32:	3b01      	subs	r3, #1
   18a34:	60a3      	str	r3, [r4, #8]
   18a36:	2b00      	cmp	r3, #0
   18a38:	daf2      	bge.n	18a20 <__fputwc+0x38>
   18a3a:	69a2      	ldr	r2, [r4, #24]
   18a3c:	4293      	cmp	r3, r2
   18a3e:	db01      	blt.n	18a44 <__fputwc+0x5c>
   18a40:	290a      	cmp	r1, #10
   18a42:	d1ed      	bne.n	18a20 <__fputwc+0x38>
   18a44:	0022      	movs	r2, r4
   18a46:	4640      	mov	r0, r8
   18a48:	f000 f8bc 	bl	18bc4 <__swbuf_r>
   18a4c:	1c43      	adds	r3, r0, #1
   18a4e:	d1eb      	bne.n	18a28 <__fputwc+0x40>
   18a50:	b005      	add	sp, #20
   18a52:	bc0c      	pop	{r2, r3}
   18a54:	4690      	mov	r8, r2
   18a56:	4699      	mov	r9, r3
   18a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18a5a:	2240      	movs	r2, #64	; 0x40
   18a5c:	89a3      	ldrh	r3, [r4, #12]
   18a5e:	4313      	orrs	r3, r2
   18a60:	81a3      	strh	r3, [r4, #12]
   18a62:	e7f5      	b.n	18a50 <__fputwc+0x68>
   18a64:	464b      	mov	r3, r9
   18a66:	3b01      	subs	r3, #1
   18a68:	2bfe      	cmp	r3, #254	; 0xfe
   18a6a:	d8c9      	bhi.n	18a00 <__fputwc+0x18>
   18a6c:	466a      	mov	r2, sp
   18a6e:	464b      	mov	r3, r9
   18a70:	71d3      	strb	r3, [r2, #7]
   18a72:	79d1      	ldrb	r1, [r2, #7]
   18a74:	af03      	add	r7, sp, #12
   18a76:	7039      	strb	r1, [r7, #0]
   18a78:	2601      	movs	r6, #1
   18a7a:	e7cf      	b.n	18a1c <__fputwc+0x34>
   18a7c:	4648      	mov	r0, r9
   18a7e:	e7e7      	b.n	18a50 <__fputwc+0x68>

00018a80 <_fputwc_r>:
   18a80:	6e53      	ldr	r3, [r2, #100]	; 0x64
   18a82:	b570      	push	{r4, r5, r6, lr}
   18a84:	0005      	movs	r5, r0
   18a86:	000e      	movs	r6, r1
   18a88:	0014      	movs	r4, r2
   18a8a:	07db      	lsls	r3, r3, #31
   18a8c:	d41e      	bmi.n	18acc <_fputwc_r+0x4c>
   18a8e:	230c      	movs	r3, #12
   18a90:	5ed2      	ldrsh	r2, [r2, r3]
   18a92:	b291      	uxth	r1, r2
   18a94:	058b      	lsls	r3, r1, #22
   18a96:	d516      	bpl.n	18ac6 <_fputwc_r+0x46>
   18a98:	2380      	movs	r3, #128	; 0x80
   18a9a:	019b      	lsls	r3, r3, #6
   18a9c:	4219      	tst	r1, r3
   18a9e:	d104      	bne.n	18aaa <_fputwc_r+0x2a>
   18aa0:	431a      	orrs	r2, r3
   18aa2:	81a2      	strh	r2, [r4, #12]
   18aa4:	6e62      	ldr	r2, [r4, #100]	; 0x64
   18aa6:	4313      	orrs	r3, r2
   18aa8:	6663      	str	r3, [r4, #100]	; 0x64
   18aaa:	0028      	movs	r0, r5
   18aac:	0022      	movs	r2, r4
   18aae:	0031      	movs	r1, r6
   18ab0:	f7ff ff9a 	bl	189e8 <__fputwc>
   18ab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   18ab6:	0005      	movs	r5, r0
   18ab8:	07db      	lsls	r3, r3, #31
   18aba:	d402      	bmi.n	18ac2 <_fputwc_r+0x42>
   18abc:	89a3      	ldrh	r3, [r4, #12]
   18abe:	059b      	lsls	r3, r3, #22
   18ac0:	d508      	bpl.n	18ad4 <_fputwc_r+0x54>
   18ac2:	0028      	movs	r0, r5
   18ac4:	bd70      	pop	{r4, r5, r6, pc}
   18ac6:	6da0      	ldr	r0, [r4, #88]	; 0x58
   18ac8:	f7fe fcd0 	bl	1746c <__retarget_lock_acquire_recursive>
   18acc:	230c      	movs	r3, #12
   18ace:	5ee2      	ldrsh	r2, [r4, r3]
   18ad0:	b291      	uxth	r1, r2
   18ad2:	e7e1      	b.n	18a98 <_fputwc_r+0x18>
   18ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   18ad6:	f7fe fccb 	bl	17470 <__retarget_lock_release_recursive>
   18ada:	e7f2      	b.n	18ac2 <_fputwc_r+0x42>

00018adc <_fstat_r>:
   18adc:	2300      	movs	r3, #0
   18ade:	b570      	push	{r4, r5, r6, lr}
   18ae0:	4c07      	ldr	r4, [pc, #28]	; (18b00 <_fstat_r+0x24>)
   18ae2:	0005      	movs	r5, r0
   18ae4:	0008      	movs	r0, r1
   18ae6:	0011      	movs	r1, r2
   18ae8:	6023      	str	r3, [r4, #0]
   18aea:	f7ea f836 	bl	2b5a <_fstat>
   18aee:	1c43      	adds	r3, r0, #1
   18af0:	d000      	beq.n	18af4 <_fstat_r+0x18>
   18af2:	bd70      	pop	{r4, r5, r6, pc}
   18af4:	6823      	ldr	r3, [r4, #0]
   18af6:	2b00      	cmp	r3, #0
   18af8:	d0fb      	beq.n	18af2 <_fstat_r+0x16>
   18afa:	602b      	str	r3, [r5, #0]
   18afc:	e7f9      	b.n	18af2 <_fstat_r+0x16>
   18afe:	46c0      	nop			; (mov r8, r8)
   18b00:	20001de8 	.word	0x20001de8

00018b04 <_isatty_r>:
   18b04:	2300      	movs	r3, #0
   18b06:	b570      	push	{r4, r5, r6, lr}
   18b08:	4c06      	ldr	r4, [pc, #24]	; (18b24 <_isatty_r+0x20>)
   18b0a:	0005      	movs	r5, r0
   18b0c:	0008      	movs	r0, r1
   18b0e:	6023      	str	r3, [r4, #0]
   18b10:	f7ea f828 	bl	2b64 <_isatty>
   18b14:	1c43      	adds	r3, r0, #1
   18b16:	d000      	beq.n	18b1a <_isatty_r+0x16>
   18b18:	bd70      	pop	{r4, r5, r6, pc}
   18b1a:	6823      	ldr	r3, [r4, #0]
   18b1c:	2b00      	cmp	r3, #0
   18b1e:	d0fb      	beq.n	18b18 <_isatty_r+0x14>
   18b20:	602b      	str	r3, [r5, #0]
   18b22:	e7f9      	b.n	18b18 <_isatty_r+0x14>
   18b24:	20001de8 	.word	0x20001de8

00018b28 <__locale_mb_cur_max>:
   18b28:	4b05      	ldr	r3, [pc, #20]	; (18b40 <__locale_mb_cur_max+0x18>)
   18b2a:	681b      	ldr	r3, [r3, #0]
   18b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   18b2e:	2b00      	cmp	r3, #0
   18b30:	d003      	beq.n	18b3a <__locale_mb_cur_max+0x12>
   18b32:	2294      	movs	r2, #148	; 0x94
   18b34:	0052      	lsls	r2, r2, #1
   18b36:	5c98      	ldrb	r0, [r3, r2]
   18b38:	4770      	bx	lr
   18b3a:	4b02      	ldr	r3, [pc, #8]	; (18b44 <__locale_mb_cur_max+0x1c>)
   18b3c:	e7f9      	b.n	18b32 <__locale_mb_cur_max+0xa>
   18b3e:	46c0      	nop			; (mov r8, r8)
   18b40:	2000000c 	.word	0x2000000c
   18b44:	2000084c 	.word	0x2000084c

00018b48 <_lseek_r>:
   18b48:	b570      	push	{r4, r5, r6, lr}
   18b4a:	0005      	movs	r5, r0
   18b4c:	0008      	movs	r0, r1
   18b4e:	0011      	movs	r1, r2
   18b50:	2200      	movs	r2, #0
   18b52:	4c06      	ldr	r4, [pc, #24]	; (18b6c <_lseek_r+0x24>)
   18b54:	6022      	str	r2, [r4, #0]
   18b56:	001a      	movs	r2, r3
   18b58:	f7ea f806 	bl	2b68 <_lseek>
   18b5c:	1c43      	adds	r3, r0, #1
   18b5e:	d000      	beq.n	18b62 <_lseek_r+0x1a>
   18b60:	bd70      	pop	{r4, r5, r6, pc}
   18b62:	6823      	ldr	r3, [r4, #0]
   18b64:	2b00      	cmp	r3, #0
   18b66:	d0fb      	beq.n	18b60 <_lseek_r+0x18>
   18b68:	602b      	str	r3, [r5, #0]
   18b6a:	e7f9      	b.n	18b60 <_lseek_r+0x18>
   18b6c:	20001de8 	.word	0x20001de8

00018b70 <__ascii_mbtowc>:
   18b70:	b082      	sub	sp, #8
   18b72:	2900      	cmp	r1, #0
   18b74:	d00a      	beq.n	18b8c <__ascii_mbtowc+0x1c>
   18b76:	2a00      	cmp	r2, #0
   18b78:	d00b      	beq.n	18b92 <__ascii_mbtowc+0x22>
   18b7a:	2b00      	cmp	r3, #0
   18b7c:	d00b      	beq.n	18b96 <__ascii_mbtowc+0x26>
   18b7e:	7813      	ldrb	r3, [r2, #0]
   18b80:	600b      	str	r3, [r1, #0]
   18b82:	7810      	ldrb	r0, [r2, #0]
   18b84:	1e43      	subs	r3, r0, #1
   18b86:	4198      	sbcs	r0, r3
   18b88:	b002      	add	sp, #8
   18b8a:	4770      	bx	lr
   18b8c:	a901      	add	r1, sp, #4
   18b8e:	2a00      	cmp	r2, #0
   18b90:	d1f3      	bne.n	18b7a <__ascii_mbtowc+0xa>
   18b92:	2000      	movs	r0, #0
   18b94:	e7f8      	b.n	18b88 <__ascii_mbtowc+0x18>
   18b96:	2002      	movs	r0, #2
   18b98:	4240      	negs	r0, r0
   18b9a:	e7f5      	b.n	18b88 <__ascii_mbtowc+0x18>

00018b9c <_read_r>:
   18b9c:	b570      	push	{r4, r5, r6, lr}
   18b9e:	0005      	movs	r5, r0
   18ba0:	0008      	movs	r0, r1
   18ba2:	0011      	movs	r1, r2
   18ba4:	2200      	movs	r2, #0
   18ba6:	4c06      	ldr	r4, [pc, #24]	; (18bc0 <_read_r+0x24>)
   18ba8:	6022      	str	r2, [r4, #0]
   18baa:	001a      	movs	r2, r3
   18bac:	f7e9 ff76 	bl	2a9c <_read>
   18bb0:	1c43      	adds	r3, r0, #1
   18bb2:	d000      	beq.n	18bb6 <_read_r+0x1a>
   18bb4:	bd70      	pop	{r4, r5, r6, pc}
   18bb6:	6823      	ldr	r3, [r4, #0]
   18bb8:	2b00      	cmp	r3, #0
   18bba:	d0fb      	beq.n	18bb4 <_read_r+0x18>
   18bbc:	602b      	str	r3, [r5, #0]
   18bbe:	e7f9      	b.n	18bb4 <_read_r+0x18>
   18bc0:	20001de8 	.word	0x20001de8

00018bc4 <__swbuf_r>:
   18bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18bc6:	0006      	movs	r6, r0
   18bc8:	000d      	movs	r5, r1
   18bca:	0014      	movs	r4, r2
   18bcc:	2800      	cmp	r0, #0
   18bce:	d002      	beq.n	18bd6 <__swbuf_r+0x12>
   18bd0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   18bd2:	2b00      	cmp	r3, #0
   18bd4:	d04e      	beq.n	18c74 <__swbuf_r+0xb0>
   18bd6:	69a3      	ldr	r3, [r4, #24]
   18bd8:	60a3      	str	r3, [r4, #8]
   18bda:	230c      	movs	r3, #12
   18bdc:	5ee0      	ldrsh	r0, [r4, r3]
   18bde:	b281      	uxth	r1, r0
   18be0:	070b      	lsls	r3, r1, #28
   18be2:	d53c      	bpl.n	18c5e <__swbuf_r+0x9a>
   18be4:	6923      	ldr	r3, [r4, #16]
   18be6:	2b00      	cmp	r3, #0
   18be8:	d039      	beq.n	18c5e <__swbuf_r+0x9a>
   18bea:	22ff      	movs	r2, #255	; 0xff
   18bec:	b2ef      	uxtb	r7, r5
   18bee:	4015      	ands	r5, r2
   18bf0:	2280      	movs	r2, #128	; 0x80
   18bf2:	0192      	lsls	r2, r2, #6
   18bf4:	4211      	tst	r1, r2
   18bf6:	d015      	beq.n	18c24 <__swbuf_r+0x60>
   18bf8:	6822      	ldr	r2, [r4, #0]
   18bfa:	6961      	ldr	r1, [r4, #20]
   18bfc:	1ad3      	subs	r3, r2, r3
   18bfe:	428b      	cmp	r3, r1
   18c00:	da1b      	bge.n	18c3a <__swbuf_r+0x76>
   18c02:	3301      	adds	r3, #1
   18c04:	68a1      	ldr	r1, [r4, #8]
   18c06:	3901      	subs	r1, #1
   18c08:	60a1      	str	r1, [r4, #8]
   18c0a:	1c51      	adds	r1, r2, #1
   18c0c:	6021      	str	r1, [r4, #0]
   18c0e:	7017      	strb	r7, [r2, #0]
   18c10:	6962      	ldr	r2, [r4, #20]
   18c12:	429a      	cmp	r2, r3
   18c14:	d01a      	beq.n	18c4c <__swbuf_r+0x88>
   18c16:	89a3      	ldrh	r3, [r4, #12]
   18c18:	07db      	lsls	r3, r3, #31
   18c1a:	d501      	bpl.n	18c20 <__swbuf_r+0x5c>
   18c1c:	2d0a      	cmp	r5, #10
   18c1e:	d015      	beq.n	18c4c <__swbuf_r+0x88>
   18c20:	0028      	movs	r0, r5
   18c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18c24:	4302      	orrs	r2, r0
   18c26:	6e61      	ldr	r1, [r4, #100]	; 0x64
   18c28:	81a2      	strh	r2, [r4, #12]
   18c2a:	4a14      	ldr	r2, [pc, #80]	; (18c7c <__swbuf_r+0xb8>)
   18c2c:	400a      	ands	r2, r1
   18c2e:	6662      	str	r2, [r4, #100]	; 0x64
   18c30:	6961      	ldr	r1, [r4, #20]
   18c32:	6822      	ldr	r2, [r4, #0]
   18c34:	1ad3      	subs	r3, r2, r3
   18c36:	428b      	cmp	r3, r1
   18c38:	dbe3      	blt.n	18c02 <__swbuf_r+0x3e>
   18c3a:	0021      	movs	r1, r4
   18c3c:	0030      	movs	r0, r6
   18c3e:	f7fe f879 	bl	16d34 <_fflush_r>
   18c42:	2800      	cmp	r0, #0
   18c44:	d108      	bne.n	18c58 <__swbuf_r+0x94>
   18c46:	6822      	ldr	r2, [r4, #0]
   18c48:	2301      	movs	r3, #1
   18c4a:	e7db      	b.n	18c04 <__swbuf_r+0x40>
   18c4c:	0021      	movs	r1, r4
   18c4e:	0030      	movs	r0, r6
   18c50:	f7fe f870 	bl	16d34 <_fflush_r>
   18c54:	2800      	cmp	r0, #0
   18c56:	d0e3      	beq.n	18c20 <__swbuf_r+0x5c>
   18c58:	2501      	movs	r5, #1
   18c5a:	426d      	negs	r5, r5
   18c5c:	e7e0      	b.n	18c20 <__swbuf_r+0x5c>
   18c5e:	0021      	movs	r1, r4
   18c60:	0030      	movs	r0, r6
   18c62:	f7fc fed3 	bl	15a0c <__swsetup_r>
   18c66:	2800      	cmp	r0, #0
   18c68:	d1f6      	bne.n	18c58 <__swbuf_r+0x94>
   18c6a:	230c      	movs	r3, #12
   18c6c:	5ee0      	ldrsh	r0, [r4, r3]
   18c6e:	6923      	ldr	r3, [r4, #16]
   18c70:	b281      	uxth	r1, r0
   18c72:	e7ba      	b.n	18bea <__swbuf_r+0x26>
   18c74:	f7fe f8b8 	bl	16de8 <__sinit>
   18c78:	e7ad      	b.n	18bd6 <__swbuf_r+0x12>
   18c7a:	46c0      	nop			; (mov r8, r8)
   18c7c:	ffffdfff 	.word	0xffffdfff

00018c80 <_wcrtomb_r>:
   18c80:	b570      	push	{r4, r5, r6, lr}
   18c82:	001d      	movs	r5, r3
   18c84:	4b11      	ldr	r3, [pc, #68]	; (18ccc <_wcrtomb_r+0x4c>)
   18c86:	b084      	sub	sp, #16
   18c88:	681b      	ldr	r3, [r3, #0]
   18c8a:	0004      	movs	r4, r0
   18c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   18c8e:	2900      	cmp	r1, #0
   18c90:	d00e      	beq.n	18cb0 <_wcrtomb_r+0x30>
   18c92:	2b00      	cmp	r3, #0
   18c94:	d016      	beq.n	18cc4 <_wcrtomb_r+0x44>
   18c96:	20e0      	movs	r0, #224	; 0xe0
   18c98:	581e      	ldr	r6, [r3, r0]
   18c9a:	002b      	movs	r3, r5
   18c9c:	0020      	movs	r0, r4
   18c9e:	47b0      	blx	r6
   18ca0:	1c43      	adds	r3, r0, #1
   18ca2:	d103      	bne.n	18cac <_wcrtomb_r+0x2c>
   18ca4:	2300      	movs	r3, #0
   18ca6:	602b      	str	r3, [r5, #0]
   18ca8:	338a      	adds	r3, #138	; 0x8a
   18caa:	6023      	str	r3, [r4, #0]
   18cac:	b004      	add	sp, #16
   18cae:	bd70      	pop	{r4, r5, r6, pc}
   18cb0:	2b00      	cmp	r3, #0
   18cb2:	d009      	beq.n	18cc8 <_wcrtomb_r+0x48>
   18cb4:	22e0      	movs	r2, #224	; 0xe0
   18cb6:	a901      	add	r1, sp, #4
   18cb8:	589e      	ldr	r6, [r3, r2]
   18cba:	0020      	movs	r0, r4
   18cbc:	002b      	movs	r3, r5
   18cbe:	2200      	movs	r2, #0
   18cc0:	47b0      	blx	r6
   18cc2:	e7ed      	b.n	18ca0 <_wcrtomb_r+0x20>
   18cc4:	4b02      	ldr	r3, [pc, #8]	; (18cd0 <_wcrtomb_r+0x50>)
   18cc6:	e7e6      	b.n	18c96 <_wcrtomb_r+0x16>
   18cc8:	4b01      	ldr	r3, [pc, #4]	; (18cd0 <_wcrtomb_r+0x50>)
   18cca:	e7f3      	b.n	18cb4 <_wcrtomb_r+0x34>
   18ccc:	2000000c 	.word	0x2000000c
   18cd0:	2000084c 	.word	0x2000084c

00018cd4 <__ascii_wctomb>:
   18cd4:	2900      	cmp	r1, #0
   18cd6:	d004      	beq.n	18ce2 <__ascii_wctomb+0xe>
   18cd8:	2aff      	cmp	r2, #255	; 0xff
   18cda:	d804      	bhi.n	18ce6 <__ascii_wctomb+0x12>
   18cdc:	2001      	movs	r0, #1
   18cde:	700a      	strb	r2, [r1, #0]
   18ce0:	4770      	bx	lr
   18ce2:	2000      	movs	r0, #0
   18ce4:	e7fc      	b.n	18ce0 <__ascii_wctomb+0xc>
   18ce6:	238a      	movs	r3, #138	; 0x8a
   18ce8:	6003      	str	r3, [r0, #0]
   18cea:	2001      	movs	r0, #1
   18cec:	4240      	negs	r0, r0
   18cee:	e7f7      	b.n	18ce0 <__ascii_wctomb+0xc>

00018cf0 <__aeabi_dcmpun>:
   18cf0:	b570      	push	{r4, r5, r6, lr}
   18cf2:	4e0e      	ldr	r6, [pc, #56]	; (18d2c <__aeabi_dcmpun+0x3c>)
   18cf4:	030d      	lsls	r5, r1, #12
   18cf6:	031c      	lsls	r4, r3, #12
   18cf8:	0049      	lsls	r1, r1, #1
   18cfa:	005b      	lsls	r3, r3, #1
   18cfc:	0b2d      	lsrs	r5, r5, #12
   18cfe:	0d49      	lsrs	r1, r1, #21
   18d00:	0b24      	lsrs	r4, r4, #12
   18d02:	0d5b      	lsrs	r3, r3, #21
   18d04:	42b1      	cmp	r1, r6
   18d06:	d004      	beq.n	18d12 <__aeabi_dcmpun+0x22>
   18d08:	4908      	ldr	r1, [pc, #32]	; (18d2c <__aeabi_dcmpun+0x3c>)
   18d0a:	2000      	movs	r0, #0
   18d0c:	428b      	cmp	r3, r1
   18d0e:	d008      	beq.n	18d22 <__aeabi_dcmpun+0x32>
   18d10:	bd70      	pop	{r4, r5, r6, pc}
   18d12:	4305      	orrs	r5, r0
   18d14:	2001      	movs	r0, #1
   18d16:	2d00      	cmp	r5, #0
   18d18:	d1fa      	bne.n	18d10 <__aeabi_dcmpun+0x20>
   18d1a:	4904      	ldr	r1, [pc, #16]	; (18d2c <__aeabi_dcmpun+0x3c>)
   18d1c:	2000      	movs	r0, #0
   18d1e:	428b      	cmp	r3, r1
   18d20:	d1f6      	bne.n	18d10 <__aeabi_dcmpun+0x20>
   18d22:	4314      	orrs	r4, r2
   18d24:	0020      	movs	r0, r4
   18d26:	1e44      	subs	r4, r0, #1
   18d28:	41a0      	sbcs	r0, r4
   18d2a:	e7f1      	b.n	18d10 <__aeabi_dcmpun+0x20>
   18d2c:	000007ff 	.word	0x000007ff

00018d30 <__aeabi_i2d>:
   18d30:	b570      	push	{r4, r5, r6, lr}
   18d32:	2800      	cmp	r0, #0
   18d34:	d030      	beq.n	18d98 <__aeabi_i2d+0x68>
   18d36:	17c3      	asrs	r3, r0, #31
   18d38:	18c4      	adds	r4, r0, r3
   18d3a:	405c      	eors	r4, r3
   18d3c:	0fc5      	lsrs	r5, r0, #31
   18d3e:	0020      	movs	r0, r4
   18d40:	f7fa fee2 	bl	13b08 <__clzsi2>
   18d44:	4b17      	ldr	r3, [pc, #92]	; (18da4 <__aeabi_i2d+0x74>)
   18d46:	4a18      	ldr	r2, [pc, #96]	; (18da8 <__aeabi_i2d+0x78>)
   18d48:	1a1b      	subs	r3, r3, r0
   18d4a:	1ad2      	subs	r2, r2, r3
   18d4c:	2a1f      	cmp	r2, #31
   18d4e:	dd18      	ble.n	18d82 <__aeabi_i2d+0x52>
   18d50:	4a16      	ldr	r2, [pc, #88]	; (18dac <__aeabi_i2d+0x7c>)
   18d52:	1ad2      	subs	r2, r2, r3
   18d54:	4094      	lsls	r4, r2
   18d56:	2200      	movs	r2, #0
   18d58:	0324      	lsls	r4, r4, #12
   18d5a:	055b      	lsls	r3, r3, #21
   18d5c:	0b24      	lsrs	r4, r4, #12
   18d5e:	0d5b      	lsrs	r3, r3, #21
   18d60:	2100      	movs	r1, #0
   18d62:	0010      	movs	r0, r2
   18d64:	0324      	lsls	r4, r4, #12
   18d66:	0d0a      	lsrs	r2, r1, #20
   18d68:	0b24      	lsrs	r4, r4, #12
   18d6a:	0512      	lsls	r2, r2, #20
   18d6c:	4322      	orrs	r2, r4
   18d6e:	4c10      	ldr	r4, [pc, #64]	; (18db0 <__aeabi_i2d+0x80>)
   18d70:	051b      	lsls	r3, r3, #20
   18d72:	4022      	ands	r2, r4
   18d74:	4313      	orrs	r3, r2
   18d76:	005b      	lsls	r3, r3, #1
   18d78:	07ed      	lsls	r5, r5, #31
   18d7a:	085b      	lsrs	r3, r3, #1
   18d7c:	432b      	orrs	r3, r5
   18d7e:	0019      	movs	r1, r3
   18d80:	bd70      	pop	{r4, r5, r6, pc}
   18d82:	0021      	movs	r1, r4
   18d84:	4091      	lsls	r1, r2
   18d86:	000a      	movs	r2, r1
   18d88:	210b      	movs	r1, #11
   18d8a:	1a08      	subs	r0, r1, r0
   18d8c:	40c4      	lsrs	r4, r0
   18d8e:	055b      	lsls	r3, r3, #21
   18d90:	0324      	lsls	r4, r4, #12
   18d92:	0b24      	lsrs	r4, r4, #12
   18d94:	0d5b      	lsrs	r3, r3, #21
   18d96:	e7e3      	b.n	18d60 <__aeabi_i2d+0x30>
   18d98:	2500      	movs	r5, #0
   18d9a:	2300      	movs	r3, #0
   18d9c:	2400      	movs	r4, #0
   18d9e:	2200      	movs	r2, #0
   18da0:	e7de      	b.n	18d60 <__aeabi_i2d+0x30>
   18da2:	46c0      	nop			; (mov r8, r8)
   18da4:	0000041e 	.word	0x0000041e
   18da8:	00000433 	.word	0x00000433
   18dac:	00000413 	.word	0x00000413
   18db0:	800fffff 	.word	0x800fffff
   18db4:	000007f8 	.word	0x000007f8
   18db8:	000007f8 	.word	0x000007f8
   18dbc:	000007c6 	.word	0x000007c6
   18dc0:	000007f8 	.word	0x000007f8
   18dc4:	000007c6 	.word	0x000007c6
   18dc8:	000007ac 	.word	0x000007ac
   18dcc:	000007ac 	.word	0x000007ac
   18dd0:	000007f8 	.word	0x000007f8
   18dd4:	000007f8 	.word	0x000007f8
   18dd8:	000007f8 	.word	0x000007f8
   18ddc:	000007f8 	.word	0x000007f8
   18de0:	000007f8 	.word	0x000007f8
   18de4:	000007f8 	.word	0x000007f8
   18de8:	000007f8 	.word	0x000007f8
   18dec:	000007f8 	.word	0x000007f8
   18df0:	000007f8 	.word	0x000007f8
   18df4:	000007f8 	.word	0x000007f8
   18df8:	000007f8 	.word	0x000007f8
   18dfc:	000007f8 	.word	0x000007f8
   18e00:	000007f8 	.word	0x000007f8
   18e04:	000007f8 	.word	0x000007f8
   18e08:	000007f8 	.word	0x000007f8
   18e0c:	000007f8 	.word	0x000007f8
   18e10:	000007f8 	.word	0x000007f8
   18e14:	000007f8 	.word	0x000007f8
   18e18:	000007f8 	.word	0x000007f8
   18e1c:	000007c6 	.word	0x000007c6
   18e20:	000007f8 	.word	0x000007f8
   18e24:	000007c6 	.word	0x000007c6
   18e28:	000007f8 	.word	0x000007f8
   18e2c:	000007f8 	.word	0x000007f8
   18e30:	000007f8 	.word	0x000007f8
   18e34:	000007f8 	.word	0x000007f8
   18e38:	000007f8 	.word	0x000007f8
   18e3c:	000007f8 	.word	0x000007f8
   18e40:	000007f8 	.word	0x000007f8
   18e44:	000007f8 	.word	0x000007f8
   18e48:	000007f8 	.word	0x000007f8
   18e4c:	000007f8 	.word	0x000007f8
   18e50:	000007f8 	.word	0x000007f8
   18e54:	000007f8 	.word	0x000007f8
   18e58:	000007f8 	.word	0x000007f8
   18e5c:	000007f8 	.word	0x000007f8
   18e60:	000007f8 	.word	0x000007f8
   18e64:	000007f8 	.word	0x000007f8
   18e68:	000007f8 	.word	0x000007f8
   18e6c:	000007f8 	.word	0x000007f8
   18e70:	000007f8 	.word	0x000007f8
   18e74:	000007f8 	.word	0x000007f8
   18e78:	000007f8 	.word	0x000007f8
   18e7c:	000007f8 	.word	0x000007f8
   18e80:	000007f8 	.word	0x000007f8
   18e84:	000007f8 	.word	0x000007f8
   18e88:	000007f8 	.word	0x000007f8
   18e8c:	000007f8 	.word	0x000007f8
   18e90:	000007f8 	.word	0x000007f8
   18e94:	000007f8 	.word	0x000007f8
   18e98:	000007f8 	.word	0x000007f8
   18e9c:	000007f8 	.word	0x000007f8
   18ea0:	000007f8 	.word	0x000007f8
   18ea4:	000007f8 	.word	0x000007f8
   18ea8:	000007f8 	.word	0x000007f8
   18eac:	000007f8 	.word	0x000007f8
   18eb0:	000007f8 	.word	0x000007f8
   18eb4:	000007c6 	.word	0x000007c6
   18eb8:	000007c6 	.word	0x000007c6
   18ebc:	000007ce 	.word	0x000007ce
   18ec0:	000007ce 	.word	0x000007ce
   18ec4:	000007ce 	.word	0x000007ce
   18ec8:	000007ce 	.word	0x000007ce
   18ecc:	42000000 	.word	0x42000000
   18ed0:	42000400 	.word	0x42000400
   18ed4:	42000800 	.word	0x42000800
   18ed8:	42000c00 	.word	0x42000c00
   18edc:	42001000 	.word	0x42001000
   18ee0:	43000400 	.word	0x43000400
   18ee4:	00001c92 	.word	0x00001c92
   18ee8:	00001c8e 	.word	0x00001c8e
   18eec:	00001c8e 	.word	0x00001c8e
   18ef0:	00001cf4 	.word	0x00001cf4
   18ef4:	00001cf4 	.word	0x00001cf4
   18ef8:	00001ca8 	.word	0x00001ca8
   18efc:	00001c98 	.word	0x00001c98
   18f00:	00001cae 	.word	0x00001cae
   18f04:	00001ce2 	.word	0x00001ce2
   18f08:	00001e98 	.word	0x00001e98
   18f0c:	00001e78 	.word	0x00001e78
   18f10:	00001e78 	.word	0x00001e78
   18f14:	00001f12 	.word	0x00001f12
   18f18:	00001e8a 	.word	0x00001e8a
   18f1c:	00001ea6 	.word	0x00001ea6
   18f20:	00001e7c 	.word	0x00001e7c
   18f24:	00001eb4 	.word	0x00001eb4
   18f28:	00001ef6 	.word	0x00001ef6
   18f2c:	00001f50 	.word	0x00001f50
   18f30:	00001f92 	.word	0x00001f92
   18f34:	00001f92 	.word	0x00001f92
   18f38:	00001f92 	.word	0x00001f92
   18f3c:	00001f42 	.word	0x00001f42
   18f40:	00001f5e 	.word	0x00001f5e
   18f44:	00001f34 	.word	0x00001f34
   18f48:	00001f6c 	.word	0x00001f6c
   18f4c:	00001f82 	.word	0x00001f82
   18f50:	0000273a 	.word	0x0000273a
   18f54:	00002830 	.word	0x00002830
   18f58:	0000283a 	.word	0x0000283a
   18f5c:	00002844 	.word	0x00002844
   18f60:	0000284e 	.word	0x0000284e
   18f64:	00002880 	.word	0x00002880
   18f68:	0000288a 	.word	0x0000288a
   18f6c:	00002894 	.word	0x00002894
   18f70:	0000289e 	.word	0x0000289e
   18f74:	000028a8 	.word	0x000028a8
   18f78:	42002000 	.word	0x42002000
   18f7c:	42002400 	.word	0x42002400
   18f80:	42002800 	.word	0x42002800
   18f84:	42002c00 	.word	0x42002c00
   18f88:	43000800 	.word	0x43000800
   18f8c:	00000002 	.word	0x00000002
   18f90:	00000100 	.word	0x00000100
   18f94:	00000002 	.word	0x00000002
   18f98:	00000200 	.word	0x00000200
   18f9c:	00000002 	.word	0x00000002
   18fa0:	00000400 	.word	0x00000400
   18fa4:	00000002 	.word	0x00000002
   18fa8:	00000800 	.word	0x00000800
   18fac:	00000003 	.word	0x00000003
   18fb0:	00000004 	.word	0x00000004

00018fb4 <AdvChannels923>:
   18fb4:	3706ea00 3706ea00 ff100100 3709f740     ...7...7....@..7
   18fc4:	3709f740 ff100100                       @..7....

00018fcc <DefaultChannels923>:
   18fcc:	50015001                                .P.P

00018fd0 <DefaultDrParamsAS>:
   18fd0:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   18fe0:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   18ff0:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   19000:	f2f2003c 010807f1 f2f20064 000a00ce     <.......d.......

00019010 <SubBandDutyCycle923>:
   19010:	00000064                                d...

00019014 <SubBandParams923>:
   19014:	35c36d80 37502800 00000000              .m.5.(P7....

00019020 <pds_reg_as_item_list>:
   19020:	200013ab 00200004 200013cb 25c00104     ... .. .... ...%
   19030:	20001356 ea010204                       V.. ....

00019038 <DefaultChannels915AU>:
   19038:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   19048:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   19058:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   19068:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   19078:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   19088:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   19098:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   190a8:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   190b8:	66016601 66016601 66016601 66016601     .f.f.f.f.f.f.f.f

000190c8 <DefaultDrParamsAU>:
   190c8:	00330008 01070cdf 0033000b 01070bce     ..3.......3.....
   190d8:	00330012 01070ac6 0073001c 010709c2     ..3.......s.....
   190e8:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   190f8:	00f2003d 010908be 00000000 010a0000     =...............
   19108:	00350007 01090c0c 00810005 01090b06     ..5.............
   19118:	00f20007 01090a01 00f2000c 010909fe     ................
   19128:	00f20016 010908fc 00f2002a 010907fc     ........*.......

00019138 <pds_reg_au_item_list>:
   19138:	200013db 00900008 2000147f 95010108     ... ....... ....

00019148 <AdvChannels433>:
   19148:	19d1b9d8 19d1b9d8 ff0c0101 19d4c718     ................
   19158:	19d4c718 ff0c0101 19d7d458 19d7d458     ........X...X...
   19168:	ff0c0101                                ....

0001916c <AdvChannels868>:
   1916c:	33be27a0 33be27a0 ff100101 33c134e0     .'.3.'.3.....4.3
   1917c:	33c134e0 ff100101 33c44220 33c44220     .4.3.... B.3 B.3
   1918c:	ff100101                                ....

00019190 <DefaultChannels433>:
   19190:	50015001 00005001                       .P.P.P..

00019198 <DefaultChannels868>:
   19198:	50015001 00005001                       .P.P.P..

000191a0 <DefaultDrparamsEU>:
   191a0:	00330008 01070cdf 0033000b 01070bd3     ..3.......3.....
   191b0:	00330017 01070acc 0073001c 010709c2     ..3.......s.....
   191c0:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   191d0:	00f2003c 010807f1 00f20064 000a00ce     <.......d.......

000191e0 <SubBandDutyCycle868>:
   191e0:	006403e8 03e80064 0064000a              ..d.d.....d.

000191ec <SubBandParams433>:
   191ec:	19cf0e40 19ea8580 00000000              @...........

000191f8 <SubBandParams868>:
   191f8:	337055c0 338eda40 00000000 338eda41     .Up3@..3....A..3
   19208:	33bca100 00000000 33bca101 33c5c8c0     ...3.......3...3
   19218:	00000000 33c74f60 33cef080 00000000     ....`O.3...3....
   19228:	33d1fdc0 33d5ce50 00000000 33d691a0     ...3P..3.......3
   19238:	33db2580 00000000                       .%.3....

00019240 <pds_reg_eu868_fid1_item_list>:
   19240:	200013ab 00200003                       ... .. .

00019248 <pds_reg_eu868_fid2_item_list>:
   19248:	200013cb 00c0000b                       ... ....

00019250 <AdvChannels865>:
   19250:	338fce64 338fce64 ff1e0100 3394fe84     d..3d..3.......3
   19260:	3394fe84 ff1e0100 339de1e8 339de1e8     ...3.......3...3
   19270:	ff1e0100                                ....

00019274 <DefaultChannels865>:
   19274:	50015001 00005001                       .P.P.P..

0001927c <DefaultDrParamsIN>:
   1927c:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1928c:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   1929c:	00f20031 010708be 00f20053 010707bc     1.......S.......
   192ac:	00000000 010a0000 00f20008 000a00fe     ................

000192bc <pds_reg_ind_item_list>:
   192bc:	200013ab 00200006 200013cb 25c00106     ... .. .... ...%

000192cc <AdvChannels923JP>:
   192cc:	3706ea00 3706ea00 ff100101 3709f740     ...7...7....@..7
   192dc:	3709f740 ff100101                       @..7....

000192e4 <DefaultChannels923JP>:
   192e4:	50015001                                .P.P

000192e8 <DefaultDrParamsJP>:
   192e8:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   192f8:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   19308:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   19318:	f2f2003c 010807f1 f2f20064 000a00ce     <.......d.......

00019328 <SubBandDutyCycleJP923>:
   19328:	000a0064                                d...

0001932c <SubBandParamsJP923>:
   1932c:	36d61600 36f7a7c0 00000000 36fab500     ...6...6.......6
   1933c:	37502800 00000000                       .(P7....

00019344 <pds_reg_jpn_fid1_item_list>:
   19344:	200013ab 00200007 200013cb 25c00107     ... .. .... ...%

00019354 <AdvChannels920KR>:
   19354:	36f62120 36f62120 ff0e0100 36f92e60      !.6 !.6....`..6
   19364:	36f92e60 ff0e0100 36fc3ba0 36fc3ba0     `..6.....;.6.;.6
   19374:	ff0e0100                                ....

00019378 <DefaultChannels920KR>:
   19378:	50015001 00005001                       .P.P.P..

00019380 <DefaultDrParamsKR>:
   19380:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   19390:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   193a0:	00f20031 010708be 00f20053 010707bc     1.......S.......

000193b0 <pds_reg_kr_fid1_item_list>:
   193b0:	200013ab 00200005 200013cb 25c00105     ... .. .... ...%

000193c0 <DefaultChannels915>:
   193c0:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   193d0:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   193e0:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   193f0:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   19400:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   19410:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   19420:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   19430:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   19440:	44014401 44014401 44014401 44014401     .D.D.D.D.D.D.D.D

00019450 <DefaultDrParamsNA>:
   19450:	000b0012 01070ac6 00350005 01070906     ..........5.....
   19460:	007d0007 01070801 00f2000c 010707fe     ..}.............
   19470:	00f20016 010908fc 00000000 010a0000     ................
   19480:	00000000 010a0000 00000000 010a0000     ................
   19490:	00350023 01090cd5 00810007 01090b06     #.5.............
   194a0:	00f20007 01090a01 00f2000c 010909fe     ................
   194b0:	00f20016 010908fc 00f2002a 010907fc     ........*.......

000194c0 <pds_reg_na_item_list>:
   194c0:	200013db 00900002 2000147f 95010102     ... ....... ....
   194d0:	0000555c 0000555c 0000555c 0000555c     \U..\U..\U..\U..
   194e0:	000055c2 00005628 000055da 000055c2     .U..(V...U...U..

000194f0 <taskHandlers>:
   194f0:	00009a91 0000fcbd 0000f2b1 0000915d     ............]...
   19500:	0000a9e9                                ....

00019504 <tc_interrupt_vectors.13496>:
   19504:	14131211 00000015 0000a4ea 0000a4fa     ................
   19514:	0000a4e4 0000a4fe 0000a4fa 0000a540     ............@...
   19524:	0000a558 0000a570 0000a59a 0000a5d8     X...p...........
   19534:	cefaafde 2055afde 11111111 11111111     ......U ........
   19544:	11111111 11111111 11111111 11111111     ................
   19554:	0a0d0a0d 41534545 3433524d 6e490a0d     ....EESAMR34..In
   19564:	61697469 697a696c 000d676e 74696e49     itializing..Init
   19574:	696c6169 6974617a 44206e6f 0d656e6f     ialization Done.
   19584:	00000d0a 7473614c 73657220 63207465     ....Last reset c
   19594:	65737561 0000203a 74737953 52206d65     ause: ..System R
   195a4:	74657365 71655220 74736575 0000000d     eset Request....
   195b4:	63746157 676f6468 73655220 000d7465     Watchdog Reset..
   195c4:	65747845 6c616e72 73655220 000d7465     External Reset..
   195d4:	776f7242 754f206e 33332074 74654420     Brown Out 33 Det
   195e4:	6f746365 65522072 0d746573 00000000     ector Reset.....
   195f4:	776f7242 754f206e 32312074 74654420     Brown Out 12 Det
   19604:	6f746365 65522072 0d746573 00000000     ector Reset.....
   19614:	65776f50 6e4f2d72 73655220 000d7465     Power-On Reset..
   19624:	6e696f4a 69616620 0d64656c 00000d0a     Join failed.....
   19634:	646e6553 20676e69 6e696f6a 71657220     Sending join req
   19644:	74736575 0000000d 6e696f4a 0a0d6465     uest....Joined..
   19654:	0000000d 6e617254 74696d73 676e6974     ....Transmitting
   19664:	2e2e2e20 0000000d 6e617254 74696d73      .......Transmit
   19674:	72724520 000d726f 6e617254 74696d73      Error..Transmit
   19684:	0d4b4f20 00000000 6e617254 74696d73      OK.....Transmit
   19694:	6d695420 74756f65 0000000d 6f470a0d      Timeout......Go
   196a4:	20676e69 73206f74 7065656c 2e2e2e20     ing to sleep ...
   196b4:	0000000d 70656c53 4b4f2074 6f77202c     ....Slept OK, wo
   196c4:	2d6e656b 0d217075 00000d0a 65656c53     ken-up!.....Slee
   196d4:	61662070 64656c69 0000000d 44434241     p failed....ABCD
   196e4:	94c18000                                         ..

000196e6 <FskSyncWordBuff>:
   196e6:	01c194c1                                         ...

000196e9 <macEndDevCmdReplyLen>:
   196e9:	02010201 01010203 0c0a0802                       .........

000196f2 <maxEIRPTable>:
   196f2:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
	...

00019704 <pds_mac_fid1_item_list>:
   19704:	20001aa6 00010000 20001aa4 06010100     ... ....... ....
   19714:	20001a38 0c040200 20001aa7 15010300     8.. ....... ....
   19724:	20001aa8 1b040400 20001af8 24040500     ... ....... ...$
   19734:	20001ad4 2d040600 20001ae8 36100700     ... ...-... ...6
   19744:	20001ad8 4b100800 20001ac2 60040900     ... ...K... ...`
   19754:	20001a91 69010b00 20001a40 6f010a00     ... ...i@.. ...o
   19764:	20001a78 75020c00 20001a7a 7c020d00     x.. ...uz.. ...|
   19774:	20001a7c 83020e00 20001a7e 8a020f00     |.. ....~.. ....
   19784:	20001a80 91021000 20001a82 98021100     ... ....... ....
   19794:	20001a84 9f011200 20001a85 a5011300     ... ....... ....
   197a4:	20001a8a b1011500 20001a89 ab011400     ... ....... ....
   197b4:	20001a30 b7041600                       0.. ....

000197bc <pds_mac_fid2_item_list>:
   197bc:	20001a1a 00050001 20001a9e 0a010101     ... ....... ....
   197cc:	200019b0 10010201 200019b1 16040301     ... ....... ....
   197dc:	200019b5 1f100401 200019c5 34100501     ... ....... ...4
   197ec:	200019f5 49100601 20001a05 5e080701     ... ...I... ...^
   197fc:	20001a0d 6b080801 20001a86 78020901     ... ...k... ...x
   1980c:	20001a34 7f040a01 20001a2c 88040b01     4.. ....,.. ....
   1981c:	20001a8f 91010c01 20001b90 97010d01     ... ....... ....
   1982c:	20001b91 9d010e01                       ... ....

00019834 <lorawanHandlers>:
   19834:	0000f165 0000f079 0000f239 000000fd     e...y...9.......

00019844 <radioTaskHandlers>:
   19844:	000108b1 000109b1 000106d1 0000ff55     ............U...
   19854:	00010cd9 000118a0 00011870 00011882     ........p.......
   19864:	000117c4 00011882 00011866 00011882     ........f.......
   19874:	000117c4 00011870 00011870 00011866     ....p...p...f...
   19884:	000117c4 000117cc 000117cc 000117cc     ................
   19894:	00011888 00011870 00011870 00011844     ....p...p...D...
   198a4:	00011928 00011844 00011866 00011844     (...D...f...D...
   198b4:	00011928 00011870 00011870 00011866     (...p...p...f...
   198c4:	00011928 000117cc 000117cc 000117cc     (...............
   198d4:	00011932 00011c20 00011b70 00011b70     2... ...p...p...
   198e4:	00011b6e 00011c12 00011c12 00011c08     n...............
   198f4:	00011b6e 00011c12 00011c08 00011c12     n...............
   19904:	00011b6e 00011c18 00011c18 00011c18     n...............
   19914:	00011ca8 000129f0 000129d2 0001298c     .....)...)...)..
   19924:	000128aa 0001298c 000129c4 0001298c     .(...)...)...)..
   19934:	000128aa 000129d2 000129d2 000129c4     .(...)...)...)..
   19944:	000128aa 000128a2 000128a2 000128a2     .(...(...(...(..
   19954:	00012c08 00013050 00012f10 00012f10     .,..P0.../.../..
   19964:	00012f0c 00013028 00013028 0001301a     ./..(0..(0...0..
   19974:	00012f0c 00013028 0001301a 00013028     ./..(0...0..(0..
   19984:	00012f0c 00013030 00013030 00013030     ./..00..00..00..
   19994:	00013234                                42..

00019998 <_global_impure_ptr>:
   19998:	20000010 0000000a 000148ca 0001499e     ... .....H...I..
   199a8:	0001499e 000148b6 0001499e 0001499e     .I...H...I...I..
   199b8:	0001499e 0001499e 0001499e 0001499e     .I...I...I...I..
   199c8:	00014970 00014482 0001499e 00014478     pI...D...I..xD..
   199d8:	0001448c 0001499e 000148c0 0001464c     .D...I...H..LF..
   199e8:	0001464c 0001464c 0001464c 0001464c     LF..LF..LF..LF..
   199f8:	0001464c 0001464c 0001464c 0001464c     LF..LF..LF..LF..
   19a08:	0001499e 0001499e 0001499e 0001499e     .I...I...I...I..
   19a18:	0001499e 0001499e 0001499e 0001499e     .I...I...I...I..
   19a28:	0001499e 0001499e 00014986 000148da     .I...I...I...H..
   19a38:	0001499e 000148da 0001499e 0001499e     .I...H...I...I..
   19a48:	0001499e 0001499e 00014840 0001499e     .I...I..@H...I..
   19a58:	0001499e 0001484a 0001499e 0001499e     .I..JH...I...I..
   19a68:	0001499e 0001499e 0001499e 00014878     .I...I...I..xH..
   19a78:	0001499e 0001499e 000148a6 0001499e     .I...I...H...I..
   19a88:	0001499e 0001499e 0001499e 0001499e     .I...I...I...I..
   19a98:	0001499e 0001499e 0001499e 0001499e     .I...I...I...I..
   19aa8:	0001499e 0001468c 000146c2 000148da     .I...F...F...H..
   19ab8:	000148da 000148da 0001476a 000146c2     .H...H..jG...F..
   19ac8:	0001499e 0001499e 00014774 0001499e     .I...I..tG...I..
   19ad8:	00014786 0001499a 000147b4 000147de     .G...I...G...G..
   19ae8:	0001499e 000147e8 0001499e 00014996     .I...G...I...I..
   19af8:	0001499e 0001499e 000144da 00464e49     .I...I...D..INF.
   19b08:	00666e69 004e414e 006e616e 33323130     inf.NAN.nan.0123
   19b18:	37363534 42413938 46454443 00000000     456789ABCDEF....
   19b28:	33323130 37363534 62613938 66656463     0123456789abcdef
   19b38:	00000000 6c756e28 0000296c 00000030     ....(null)..0...

00019b48 <blanks.7238>:
   19b48:	20202020 20202020 20202020 20202020                     

00019b58 <zeroes.7239>:
   19b58:	30303030 30303030 30303030 30303030     0000000000000000
   19b68:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

00019b78 <__mprec_bigtens>:
   19b78:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   19b88:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   19b98:	7f73bf3c 75154fdd                       <.s..O.u

00019ba0 <__mprec_tens>:
   19ba0:	00000000 3ff00000 00000000 40240000     .......?......$@
   19bb0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   19bc0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   19bd0:	00000000 412e8480 00000000 416312d0     .......A......cA
   19be0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   19bf0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   19c00:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   19c10:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   19c20:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   19c30:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   19c40:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   19c50:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   19c60:	79d99db4 44ea7843                       ...yCx.D

00019c68 <p05.6055>:
   19c68:	00000005 00000019 0000007d 00000043     ........}...C...
   19c78:	49534f50 00000058 0000002e              POSIX.......

00019c84 <_ctype_>:
   19c84:	20202000 20202020 28282020 20282828     .         ((((( 
   19c94:	20202020 20202020 20202020 20202020                     
   19ca4:	10108820 10101010 10101010 10101010      ...............
   19cb4:	04040410 04040404 10040404 10101010     ................
   19cc4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   19cd4:	01010101 01010101 01010101 10101010     ................
   19ce4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   19cf4:	02020202 02020202 02020202 10101010     ................
   19d04:	00000020 00000000 00000000 00000000      ...............
	...

00019d88 <_init>:
   19d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19d8a:	46c0      	nop			; (mov r8, r8)
   19d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   19d8e:	bc08      	pop	{r3}
   19d90:	469e      	mov	lr, r3
   19d92:	4770      	bx	lr

00019d94 <__init_array_start>:
   19d94:	00015ae1 	.word	0x00015ae1

00019d98 <__frame_dummy_init_array_entry>:
   19d98:	000000dd                                ....

00019d9c <_fini>:
   19d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19d9e:	46c0      	nop			; (mov r8, r8)
   19da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   19da2:	bc08      	pop	{r3}
   19da4:	469e      	mov	lr, r3
   19da6:	4770      	bx	lr

00019da8 <__fini_array_start>:
   19da8:	000000b5 	.word	0x000000b5
